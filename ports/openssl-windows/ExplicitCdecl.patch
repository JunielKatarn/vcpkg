diff --git a/apps/openssl.c b/apps/openssl.c
index 9648f35b02..f2e2fc5676 100644
--- a/apps/openssl.c
+++ b/apps/openssl.c
@@ -116,7 +116,7 @@ static char *make_config_name(void)
     return p;
 }
 
-int main(int argc, char *argv[])
+int __cdecl main(int argc, char *argv[])
 {
     FUNCTION f, *fp;
     LHASH_OF(FUNCTION) *prog = NULL;
@@ -630,7 +630,7 @@ static void list_pkey_meth(void)
     }
 }
 
-static int function_cmp(const FUNCTION * a, const FUNCTION * b)
+static int __cdecl function_cmp(const FUNCTION * a, const FUNCTION * b)
 {
     return strncmp(a->name, b->name, 8);
 }
@@ -640,7 +640,7 @@ static unsigned long function_hash(const FUNCTION * a)
     return OPENSSL_LH_strhash(a->name);
 }
 
-static int SortFnByName(const void *_f1, const void *_f2)
+static int __cdecl SortFnByName(const void *_f1, const void *_f2)
 {
     const FUNCTION *f1 = _f1;
     const FUNCTION *f2 = _f2;
diff --git a/apps/req.c b/apps/req.c
index f9d6fba109..56e3603a99 100644
--- a/apps/req.c
+++ b/apps/req.c
@@ -158,7 +158,7 @@ static unsigned long ext_name_hash(const OPENSSL_STRING *a)
     return OPENSSL_LH_strhash((const char *)a);
 }
 
-static int ext_name_cmp(const OPENSSL_STRING *a, const OPENSSL_STRING *b)
+static int __cdecl ext_name_cmp(const OPENSSL_STRING *a, const OPENSSL_STRING *b)
 {
     return strcmp((const char *)a, (const char *)b);
 }
diff --git a/apps/s_apps.h b/apps/s_apps.h
index f94e659e71..dc524c1bce 100644
--- a/apps/s_apps.h
+++ b/apps/s_apps.h
@@ -33,7 +33,7 @@ int init_client(int *sock, const char *host, const char *port,
                 int family, int type, int protocol);
 int should_retry(int i);
 
-long bio_dump_callback(BIO *bio, int cmd, const char *argp,
+long __cdecl bio_dump_callback(BIO *bio, int cmd, const char *argp,
                        int argi, long argl, long ret);
 
 void apps_ssl_info_callback(const SSL *s, int where, int ret);
diff --git a/apps/s_cb.c b/apps/s_cb.c
index 5dc1d03f28..a4c7143506 100644
--- a/apps/s_cb.c
+++ b/apps/s_cb.c
@@ -429,7 +429,7 @@ int ssl_print_tmp_key(BIO *out, SSL *s)
     return 1;
 }
 
-long bio_dump_callback(BIO *bio, int cmd, const char *argp,
+long __cdecl bio_dump_callback(BIO *bio, int cmd, const char *argp,
                        int argi, long argl, long ret)
 {
     BIO *out;
diff --git a/apps/win32_init.c b/apps/win32_init.c
index df4bff41a2..b8436cc54f 100644
--- a/apps/win32_init.c
+++ b/apps/win32_init.c
@@ -18,7 +18,7 @@ static UINT saved_cp;
 static int newargc;
 static char **newargv;
 
-static void cleanup(void)
+static void __cdecl cleanup(void)
 {
     int i;
 
diff --git a/crypto/aes/aes_cbc.c b/crypto/aes/aes_cbc.c
index 342841fc4f..01061c06f4 100644
--- a/crypto/aes/aes_cbc.c
+++ b/crypto/aes/aes_cbc.c
@@ -10,7 +10,7 @@
 #include <openssl/aes.h>
 #include <openssl/modes.h>
 
-void AES_cbc_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl AES_cbc_encrypt(const unsigned char *in, unsigned char *out,
                      size_t len, const AES_KEY *key,
                      unsigned char *ivec, const int enc)
 {
diff --git a/crypto/aes/aes_cfb.c b/crypto/aes/aes_cfb.c
index f010e3c4ea..c0e0fd4f13 100644
--- a/crypto/aes/aes_cfb.c
+++ b/crypto/aes/aes_cfb.c
@@ -16,7 +16,7 @@
  * used is contained in *num;
  */
 
-void AES_cfb128_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl AES_cfb128_encrypt(const unsigned char *in, unsigned char *out,
                         size_t length, const AES_KEY *key,
                         unsigned char *ivec, int *num, const int enc)
 {
@@ -26,7 +26,7 @@ void AES_cfb128_encrypt(const unsigned char *in, unsigned char *out,
 }
 
 /* N.B. This expects the input to be packed, MS bit first */
-void AES_cfb1_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl AES_cfb1_encrypt(const unsigned char *in, unsigned char *out,
                       size_t length, const AES_KEY *key,
                       unsigned char *ivec, int *num, const int enc)
 {
@@ -34,7 +34,7 @@ void AES_cfb1_encrypt(const unsigned char *in, unsigned char *out,
                             (block128_f) AES_encrypt);
 }
 
-void AES_cfb8_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl AES_cfb8_encrypt(const unsigned char *in, unsigned char *out,
                       size_t length, const AES_KEY *key,
                       unsigned char *ivec, int *num, const int enc)
 {
diff --git a/crypto/aes/aes_core.c b/crypto/aes/aes_core.c
index f1f11fd8de..8f7d611751 100644
--- a/crypto/aes/aes_core.c
+++ b/crypto/aes/aes_core.c
@@ -629,7 +629,7 @@ static const u32 rcon[] = {
 /**
  * Expand the cipher key into the encryption key schedule.
  */
-int AES_set_encrypt_key(const unsigned char *userKey, const int bits,
+int __cdecl AES_set_encrypt_key(const unsigned char *userKey, const int bits,
                         AES_KEY *key)
 {
 
@@ -731,7 +731,7 @@ int AES_set_encrypt_key(const unsigned char *userKey, const int bits,
 /**
  * Expand the cipher key into the decryption key schedule.
  */
-int AES_set_decrypt_key(const unsigned char *userKey, const int bits,
+int __cdecl AES_set_decrypt_key(const unsigned char *userKey, const int bits,
                         AES_KEY *key)
 {
 
@@ -784,7 +784,7 @@ int AES_set_decrypt_key(const unsigned char *userKey, const int bits,
  * Encrypt a single block
  * in and out can overlap
  */
-void AES_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl AES_encrypt(const unsigned char *in, unsigned char *out,
                  const AES_KEY *key) {
 
     const u32 *rk;
@@ -975,7 +975,7 @@ void AES_encrypt(const unsigned char *in, unsigned char *out,
  * Decrypt a single block
  * in and out can overlap
  */
-void AES_decrypt(const unsigned char *in, unsigned char *out,
+void __cdecl AES_decrypt(const unsigned char *in, unsigned char *out,
                  const AES_KEY *key)
 {
 
@@ -1208,7 +1208,7 @@ static const u32 rcon[] = {
 /**
  * Expand the cipher key into the encryption key schedule.
  */
-int AES_set_encrypt_key(const unsigned char *userKey, const int bits,
+int __cdecl AES_set_encrypt_key(const unsigned char *userKey, const int bits,
                         AES_KEY *key)
 {
     u32 *rk;
@@ -1309,7 +1309,7 @@ int AES_set_encrypt_key(const unsigned char *userKey, const int bits,
 /**
  * Expand the cipher key into the decryption key schedule.
  */
-int AES_set_decrypt_key(const unsigned char *userKey, const int bits,
+int __cdecl AES_set_decrypt_key(const unsigned char *userKey, const int bits,
                         AES_KEY *key)
 {
 
diff --git a/crypto/aes/aes_ecb.c b/crypto/aes/aes_ecb.c
index 29bfc1ad66..fa432af6d3 100644
--- a/crypto/aes/aes_ecb.c
+++ b/crypto/aes/aes_ecb.c
@@ -12,7 +12,7 @@
 #include <openssl/aes.h>
 #include "aes_locl.h"
 
-void AES_ecb_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl AES_ecb_encrypt(const unsigned char *in, unsigned char *out,
                      const AES_KEY *key, const int enc)
 {
 
diff --git a/crypto/aes/aes_ige.c b/crypto/aes/aes_ige.c
index 75f796cf3b..f46b21a191 100644
--- a/crypto/aes/aes_ige.c
+++ b/crypto/aes/aes_ige.c
@@ -34,7 +34,7 @@ typedef struct {
 
 /* N.B. The IV for this mode is _twice_ the block size */
 
-void AES_ige_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl AES_ige_encrypt(const unsigned char *in, unsigned char *out,
                      size_t length, const AES_KEY *key,
                      unsigned char *ivec, const int enc)
 {
@@ -166,7 +166,7 @@ void AES_ige_encrypt(const unsigned char *in, unsigned char *out,
 
 /* N.B. The IV for this mode is _four times_ the block size */
 
-void AES_bi_ige_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl AES_bi_ige_encrypt(const unsigned char *in, unsigned char *out,
                         size_t length, const AES_KEY *key,
                         const AES_KEY *key2, const unsigned char *ivec,
                         const int enc)
diff --git a/crypto/aes/aes_misc.c b/crypto/aes/aes_misc.c
index 7403c84f82..59c4c04e2f 100644
--- a/crypto/aes/aes_misc.c
+++ b/crypto/aes/aes_misc.c
@@ -11,7 +11,7 @@
 #include <openssl/aes.h>
 #include "aes_locl.h"
 
-const char *AES_options(void)
+const char * __cdecl AES_options(void)
 {
 #ifdef FULL_UNROLL
     return "aes(full)";
diff --git a/crypto/aes/aes_ofb.c b/crypto/aes/aes_ofb.c
index 215b53858e..8b0686d37d 100644
--- a/crypto/aes/aes_ofb.c
+++ b/crypto/aes/aes_ofb.c
@@ -10,7 +10,7 @@
 #include <openssl/aes.h>
 #include <openssl/modes.h>
 
-void AES_ofb128_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl AES_ofb128_encrypt(const unsigned char *in, unsigned char *out,
                         size_t length, const AES_KEY *key,
                         unsigned char *ivec, int *num)
 {
diff --git a/crypto/aes/aes_wrap.c b/crypto/aes/aes_wrap.c
index cae0b21229..d9932d89d0 100644
--- a/crypto/aes/aes_wrap.c
+++ b/crypto/aes/aes_wrap.c
@@ -11,14 +11,14 @@
 #include <openssl/aes.h>
 #include <openssl/modes.h>
 
-int AES_wrap_key(AES_KEY *key, const unsigned char *iv,
+int __cdecl AES_wrap_key(AES_KEY *key, const unsigned char *iv,
                  unsigned char *out,
                  const unsigned char *in, unsigned int inlen)
 {
     return CRYPTO_128_wrap(key, iv, out, in, inlen, (block128_f) AES_encrypt);
 }
 
-int AES_unwrap_key(AES_KEY *key, const unsigned char *iv,
+int __cdecl AES_unwrap_key(AES_KEY *key, const unsigned char *iv,
                    unsigned char *out,
                    const unsigned char *in, unsigned int inlen)
 {
diff --git a/crypto/aes/aes_x86core.c b/crypto/aes/aes_x86core.c
index 1b660d716d..f7b176169a 100644
--- a/crypto/aes/aes_x86core.c
+++ b/crypto/aes/aes_x86core.c
@@ -471,7 +471,7 @@ static const u32 rcon[] = {
 /**
  * Expand the cipher key into the encryption key schedule.
  */
-int AES_set_encrypt_key(const unsigned char *userKey, const int bits,
+int __cdecl AES_set_encrypt_key(const unsigned char *userKey, const int bits,
                         AES_KEY *key)
 {
 
@@ -573,7 +573,7 @@ int AES_set_encrypt_key(const unsigned char *userKey, const int bits,
 /**
  * Expand the cipher key into the decryption key schedule.
  */
-int AES_set_decrypt_key(const unsigned char *userKey, const int bits,
+int __cdecl AES_set_decrypt_key(const unsigned char *userKey, const int bits,
                         AES_KEY *key)
 {
 
@@ -655,7 +655,7 @@ int AES_set_decrypt_key(const unsigned char *userKey, const int bits,
  * Encrypt a single block
  * in and out can overlap
  */
-void AES_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl AES_encrypt(const unsigned char *in, unsigned char *out,
                  const AES_KEY *key)
 {
 
@@ -869,7 +869,7 @@ void AES_encrypt(const unsigned char *in, unsigned char *out,
  * Decrypt a single block
  * in and out can overlap
  */
-void AES_decrypt(const unsigned char *in, unsigned char *out,
+void __cdecl AES_decrypt(const unsigned char *in, unsigned char *out,
                  const AES_KEY *key)
 {
 
diff --git a/crypto/asn1/a_bitstr.c b/crypto/asn1/a_bitstr.c
index bffbd160a2..7f8e703c1a 100644
--- a/crypto/asn1/a_bitstr.c
+++ b/crypto/asn1/a_bitstr.c
@@ -13,7 +13,7 @@
 #include <openssl/asn1.h>
 #include "asn1_locl.h"
 
-int ASN1_BIT_STRING_set(ASN1_BIT_STRING *x, unsigned char *d, int len)
+int __cdecl ASN1_BIT_STRING_set(ASN1_BIT_STRING *x, unsigned char *d, int len)
 {
     return ASN1_STRING_set(x, d, len);
 }
@@ -143,7 +143,7 @@ ASN1_BIT_STRING *c2i_ASN1_BIT_STRING(ASN1_BIT_STRING **a,
 /*
  * These next 2 functions from Goetz Babin-Ebell.
  */
-int ASN1_BIT_STRING_set_bit(ASN1_BIT_STRING *a, int n, int value)
+int __cdecl ASN1_BIT_STRING_set_bit(ASN1_BIT_STRING *a, int n, int value)
 {
     int w, v, iv;
     unsigned char *c;
@@ -178,7 +178,7 @@ int ASN1_BIT_STRING_set_bit(ASN1_BIT_STRING *a, int n, int value)
     return 1;
 }
 
-int ASN1_BIT_STRING_get_bit(const ASN1_BIT_STRING *a, int n)
+int __cdecl ASN1_BIT_STRING_get_bit(const ASN1_BIT_STRING *a, int n)
 {
     int w, v;
 
@@ -195,7 +195,7 @@ int ASN1_BIT_STRING_get_bit(const ASN1_BIT_STRING *a, int n)
  * which is not specified in 'flags', 1 otherwise.
  * 'len' is the length of 'flags'.
  */
-int ASN1_BIT_STRING_check(const ASN1_BIT_STRING *a,
+int __cdecl ASN1_BIT_STRING_check(const ASN1_BIT_STRING *a,
                           const unsigned char *flags, int flags_len)
 {
     int i, ok;
diff --git a/crypto/asn1/a_d2i_fp.c b/crypto/asn1/a_d2i_fp.c
index a1a17901b8..15072e3787 100644
--- a/crypto/asn1/a_d2i_fp.c
+++ b/crypto/asn1/a_d2i_fp.c
@@ -18,7 +18,7 @@
 #ifndef NO_OLD_ASN1
 # ifndef OPENSSL_NO_STDIO
 
-void *ASN1_d2i_fp(void *(*xnew) (void), d2i_of_void *d2i, FILE *in, void **x)
+void * __cdecl ASN1_d2i_fp(void *(__cdecl *xnew) (void), d2i_of_void *d2i, FILE *in, void **x)
 {
     BIO *b;
     void *ret;
@@ -34,7 +34,7 @@ void *ASN1_d2i_fp(void *(*xnew) (void), d2i_of_void *d2i, FILE *in, void **x)
 }
 # endif
 
-void *ASN1_d2i_bio(void *(*xnew) (void), d2i_of_void *d2i, BIO *in, void **x)
+void * __cdecl ASN1_d2i_bio(void * (__cdecl *xnew) (void), d2i_of_void *d2i, BIO *in, void **x)
 {
     BUF_MEM *b = NULL;
     const unsigned char *p;
@@ -54,7 +54,7 @@ void *ASN1_d2i_bio(void *(*xnew) (void), d2i_of_void *d2i, BIO *in, void **x)
 
 #endif
 
-void *ASN1_item_d2i_bio(const ASN1_ITEM *it, BIO *in, void *x)
+void * __cdecl ASN1_item_d2i_bio(const ASN1_ITEM *it, BIO *in, void *x)
 {
     BUF_MEM *b = NULL;
     const unsigned char *p;
@@ -73,7 +73,7 @@ void *ASN1_item_d2i_bio(const ASN1_ITEM *it, BIO *in, void *x)
 }
 
 #ifndef OPENSSL_NO_STDIO
-void *ASN1_item_d2i_fp(const ASN1_ITEM *it, FILE *in, void *x)
+void * __cdecl ASN1_item_d2i_fp(const ASN1_ITEM *it, FILE *in, void *x)
 {
     BIO *b;
     char *ret;
diff --git a/crypto/asn1/a_dup.c b/crypto/asn1/a_dup.c
index 50af6b0006..a9ae2ba142 100644
--- a/crypto/asn1/a_dup.c
+++ b/crypto/asn1/a_dup.c
@@ -13,7 +13,7 @@
 
 #ifndef NO_OLD_ASN1
 
-void *ASN1_dup(i2d_of_void *i2d, d2i_of_void *d2i, void *x)
+void * __cdecl ASN1_dup(i2d_of_void *i2d, d2i_of_void *d2i, void *x)
 {
     unsigned char *b, *p;
     const unsigned char *p2;
@@ -46,7 +46,7 @@ void *ASN1_dup(i2d_of_void *i2d, d2i_of_void *d2i, void *x)
  * decode.
  */
 
-void *ASN1_item_dup(const ASN1_ITEM *it, void *x)
+void * __cdecl ASN1_item_dup(const ASN1_ITEM *it, void *x)
 {
     unsigned char *b = NULL;
     const unsigned char *p;
diff --git a/crypto/asn1/a_gentm.c b/crypto/asn1/a_gentm.c
index d3878d6e57..bd1ea790e2 100644
--- a/crypto/asn1/a_gentm.c
+++ b/crypto/asn1/a_gentm.c
@@ -26,12 +26,12 @@ int asn1_generalizedtime_to_tm(struct tm *tm, const ASN1_GENERALIZEDTIME *d)
     return asn1_time_to_tm(tm, d);
 }
 
-int ASN1_GENERALIZEDTIME_check(const ASN1_GENERALIZEDTIME *d)
+int __cdecl ASN1_GENERALIZEDTIME_check(const ASN1_GENERALIZEDTIME *d)
 {
     return asn1_generalizedtime_to_tm(NULL, d);
 }
 
-int ASN1_GENERALIZEDTIME_set_string(ASN1_GENERALIZEDTIME *s, const char *str)
+int __cdecl ASN1_GENERALIZEDTIME_set_string(ASN1_GENERALIZEDTIME *s, const char *str)
 {
     ASN1_GENERALIZEDTIME t;
 
@@ -49,13 +49,13 @@ int ASN1_GENERALIZEDTIME_set_string(ASN1_GENERALIZEDTIME *s, const char *str)
     return 1;
 }
 
-ASN1_GENERALIZEDTIME *ASN1_GENERALIZEDTIME_set(ASN1_GENERALIZEDTIME *s,
+ASN1_GENERALIZEDTIME * __cdecl ASN1_GENERALIZEDTIME_set(ASN1_GENERALIZEDTIME *s,
                                                time_t t)
 {
     return ASN1_GENERALIZEDTIME_adj(s, t, 0, 0);
 }
 
-ASN1_GENERALIZEDTIME *ASN1_GENERALIZEDTIME_adj(ASN1_GENERALIZEDTIME *s,
+ASN1_GENERALIZEDTIME * __cdecl ASN1_GENERALIZEDTIME_adj(ASN1_GENERALIZEDTIME *s,
                                                time_t t, int offset_day,
                                                long offset_sec)
 {
@@ -74,7 +74,7 @@ ASN1_GENERALIZEDTIME *ASN1_GENERALIZEDTIME_adj(ASN1_GENERALIZEDTIME *s,
     return asn1_time_from_tm(s, ts, V_ASN1_GENERALIZEDTIME);
 }
 
-int ASN1_GENERALIZEDTIME_print(BIO *bp, const ASN1_GENERALIZEDTIME *tm)
+int __cdecl ASN1_GENERALIZEDTIME_print(BIO *bp, const ASN1_GENERALIZEDTIME *tm)
 {
     if (tm->type != V_ASN1_GENERALIZEDTIME)
         return 0;
diff --git a/crypto/asn1/a_i2d_fp.c b/crypto/asn1/a_i2d_fp.c
index 980c65a25d..fe553ffe6c 100644
--- a/crypto/asn1/a_i2d_fp.c
+++ b/crypto/asn1/a_i2d_fp.c
@@ -15,7 +15,7 @@
 #ifndef NO_OLD_ASN1
 
 # ifndef OPENSSL_NO_STDIO
-int ASN1_i2d_fp(i2d_of_void *i2d, FILE *out, void *x)
+int __cdecl ASN1_i2d_fp(i2d_of_void *i2d, FILE *out, void *x)
 {
     BIO *b;
     int ret;
@@ -31,7 +31,7 @@ int ASN1_i2d_fp(i2d_of_void *i2d, FILE *out, void *x)
 }
 # endif
 
-int ASN1_i2d_bio(i2d_of_void *i2d, BIO *out, unsigned char *x)
+int __cdecl ASN1_i2d_bio(i2d_of_void *i2d, BIO *out, unsigned char *x)
 {
     char *b;
     unsigned char *p;
@@ -68,7 +68,7 @@ int ASN1_i2d_bio(i2d_of_void *i2d, BIO *out, unsigned char *x)
 #endif
 
 #ifndef OPENSSL_NO_STDIO
-int ASN1_item_i2d_fp(const ASN1_ITEM *it, FILE *out, void *x)
+int __cdecl ASN1_item_i2d_fp(const ASN1_ITEM *it, FILE *out, void *x)
 {
     BIO *b;
     int ret;
@@ -84,7 +84,7 @@ int ASN1_item_i2d_fp(const ASN1_ITEM *it, FILE *out, void *x)
 }
 #endif
 
-int ASN1_item_i2d_bio(const ASN1_ITEM *it, BIO *out, void *x)
+int __cdecl ASN1_item_i2d_bio(const ASN1_ITEM *it, BIO *out, void *x)
 {
     unsigned char *b = NULL;
     int i, j = 0, n, ret = 1;
diff --git a/crypto/asn1/a_int.c b/crypto/asn1/a_int.c
index 70a45cb3cc..4386180ac0 100644
--- a/crypto/asn1/a_int.c
+++ b/crypto/asn1/a_int.c
@@ -15,12 +15,12 @@
 #include <openssl/bn.h>
 #include "asn1_locl.h"
 
-ASN1_INTEGER *ASN1_INTEGER_dup(const ASN1_INTEGER *x)
+ASN1_INTEGER * __cdecl ASN1_INTEGER_dup(const ASN1_INTEGER *x)
 {
     return ASN1_STRING_dup(x);
 }
 
-int ASN1_INTEGER_cmp(const ASN1_INTEGER *x, const ASN1_INTEGER *y)
+int __cdecl ASN1_INTEGER_cmp(const ASN1_INTEGER *x, const ASN1_INTEGER *y)
 {
     int neg, ret;
     /* Compare signs */
@@ -384,7 +384,7 @@ static int asn1_string_set_uint64(ASN1_STRING *a, uint64_t r, int itype)
  * set as negative (it doesn't add a padding zero).
  */
 
-ASN1_INTEGER *d2i_ASN1_UINTEGER(ASN1_INTEGER **a, const unsigned char **pp,
+ASN1_INTEGER * __cdecl d2i_ASN1_UINTEGER(ASN1_INTEGER **a, const unsigned char **pp,
                                 long length)
 {
     ASN1_INTEGER *ret = NULL;
@@ -510,32 +510,32 @@ static BIGNUM *asn1_string_to_bn(const ASN1_INTEGER *ai, BIGNUM *bn,
     return ret;
 }
 
-int ASN1_INTEGER_get_int64(int64_t *pr, const ASN1_INTEGER *a)
+int __cdecl ASN1_INTEGER_get_int64(int64_t *pr, const ASN1_INTEGER *a)
 {
     return asn1_string_get_int64(pr, a, V_ASN1_INTEGER);
 }
 
-int ASN1_INTEGER_set_int64(ASN1_INTEGER *a, int64_t r)
+int __cdecl ASN1_INTEGER_set_int64(ASN1_INTEGER *a, int64_t r)
 {
     return asn1_string_set_int64(a, r, V_ASN1_INTEGER);
 }
 
-int ASN1_INTEGER_get_uint64(uint64_t *pr, const ASN1_INTEGER *a)
+int __cdecl ASN1_INTEGER_get_uint64(uint64_t *pr, const ASN1_INTEGER *a)
 {
     return asn1_string_get_uint64(pr, a, V_ASN1_INTEGER);
 }
 
-int ASN1_INTEGER_set_uint64(ASN1_INTEGER *a, uint64_t r)
+int __cdecl ASN1_INTEGER_set_uint64(ASN1_INTEGER *a, uint64_t r)
 {
     return asn1_string_set_uint64(a, r, V_ASN1_INTEGER);
 }
 
-int ASN1_INTEGER_set(ASN1_INTEGER *a, long v)
+int __cdecl ASN1_INTEGER_set(ASN1_INTEGER *a, long v)
 {
     return ASN1_INTEGER_set_int64(a, v);
 }
 
-long ASN1_INTEGER_get(const ASN1_INTEGER *a)
+long __cdecl ASN1_INTEGER_get(const ASN1_INTEGER *a)
 {
     int i;
     int64_t r;
@@ -549,32 +549,32 @@ long ASN1_INTEGER_get(const ASN1_INTEGER *a)
     return (long)r;
 }
 
-ASN1_INTEGER *BN_to_ASN1_INTEGER(const BIGNUM *bn, ASN1_INTEGER *ai)
+ASN1_INTEGER * __cdecl BN_to_ASN1_INTEGER(const BIGNUM *bn, ASN1_INTEGER *ai)
 {
     return bn_to_asn1_string(bn, ai, V_ASN1_INTEGER);
 }
 
-BIGNUM *ASN1_INTEGER_to_BN(const ASN1_INTEGER *ai, BIGNUM *bn)
+BIGNUM * __cdecl ASN1_INTEGER_to_BN(const ASN1_INTEGER *ai, BIGNUM *bn)
 {
     return asn1_string_to_bn(ai, bn, V_ASN1_INTEGER);
 }
 
-int ASN1_ENUMERATED_get_int64(int64_t *pr, const ASN1_ENUMERATED *a)
+int __cdecl ASN1_ENUMERATED_get_int64(int64_t *pr, const ASN1_ENUMERATED *a)
 {
     return asn1_string_get_int64(pr, a, V_ASN1_ENUMERATED);
 }
 
-int ASN1_ENUMERATED_set_int64(ASN1_ENUMERATED *a, int64_t r)
+int __cdecl ASN1_ENUMERATED_set_int64(ASN1_ENUMERATED *a, int64_t r)
 {
     return asn1_string_set_int64(a, r, V_ASN1_ENUMERATED);
 }
 
-int ASN1_ENUMERATED_set(ASN1_ENUMERATED *a, long v)
+int __cdecl ASN1_ENUMERATED_set(ASN1_ENUMERATED *a, long v)
 {
     return ASN1_ENUMERATED_set_int64(a, v);
 }
 
-long ASN1_ENUMERATED_get(const ASN1_ENUMERATED *a)
+long __cdecl ASN1_ENUMERATED_get(const ASN1_ENUMERATED *a)
 {
     int i;
     int64_t r;
@@ -592,12 +592,12 @@ long ASN1_ENUMERATED_get(const ASN1_ENUMERATED *a)
     return (long)r;
 }
 
-ASN1_ENUMERATED *BN_to_ASN1_ENUMERATED(const BIGNUM *bn, ASN1_ENUMERATED *ai)
+ASN1_ENUMERATED * __cdecl BN_to_ASN1_ENUMERATED(const BIGNUM *bn, ASN1_ENUMERATED *ai)
 {
     return bn_to_asn1_string(bn, ai, V_ASN1_ENUMERATED);
 }
 
-BIGNUM *ASN1_ENUMERATED_to_BN(const ASN1_ENUMERATED *ai, BIGNUM *bn)
+BIGNUM * __cdecl ASN1_ENUMERATED_to_BN(const ASN1_ENUMERATED *ai, BIGNUM *bn)
 {
     return asn1_string_to_bn(ai, bn, V_ASN1_ENUMERATED);
 }
diff --git a/crypto/asn1/a_mbstr.c b/crypto/asn1/a_mbstr.c
index 949fe6c161..5023259261 100644
--- a/crypto/asn1/a_mbstr.c
+++ b/crypto/asn1/a_mbstr.c
@@ -32,13 +32,13 @@ static int cpy_utf8(unsigned long value, void *arg);
  * size limits too.
  */
 
-int ASN1_mbstring_copy(ASN1_STRING **out, const unsigned char *in, int len,
+int __cdecl ASN1_mbstring_copy(ASN1_STRING **out, const unsigned char *in, int len,
                        int inform, unsigned long mask)
 {
     return ASN1_mbstring_ncopy(out, in, len, inform, mask, 0, 0);
 }
 
-int ASN1_mbstring_ncopy(ASN1_STRING **out, const unsigned char *in, int len,
+int __cdecl ASN1_mbstring_ncopy(ASN1_STRING **out, const unsigned char *in, int len,
                         int inform, unsigned long mask,
                         long minsize, long maxsize)
 {
diff --git a/crypto/asn1/a_object.c b/crypto/asn1/a_object.c
index 5e1424a806..54f8e51525 100644
--- a/crypto/asn1/a_object.c
+++ b/crypto/asn1/a_object.c
@@ -18,7 +18,7 @@
 #include "internal/asn1_int.h"
 #include "asn1_locl.h"
 
-int i2d_ASN1_OBJECT(const ASN1_OBJECT *a, unsigned char **pp)
+int __cdecl i2d_ASN1_OBJECT(const ASN1_OBJECT *a, unsigned char **pp)
 {
     unsigned char *p, *allocated = NULL;
     int objsize;
@@ -50,7 +50,7 @@ int i2d_ASN1_OBJECT(const ASN1_OBJECT *a, unsigned char **pp)
     return objsize;
 }
 
-int a2d_ASN1_OBJECT(unsigned char *out, int olen, const char *buf, int num)
+int __cdecl a2d_ASN1_OBJECT(unsigned char *out, int olen, const char *buf, int num)
 {
     int i, first, len = 0, c, use_bn;
     char ftmp[24], *tmp = ftmp;
@@ -177,12 +177,12 @@ int a2d_ASN1_OBJECT(unsigned char *out, int olen, const char *buf, int num)
     return 0;
 }
 
-int i2t_ASN1_OBJECT(char *buf, int buf_len, const ASN1_OBJECT *a)
+int __cdecl i2t_ASN1_OBJECT(char *buf, int buf_len, const ASN1_OBJECT *a)
 {
     return OBJ_obj2txt(buf, buf_len, a, 0);
 }
 
-int i2a_ASN1_OBJECT(BIO *bp, const ASN1_OBJECT *a)
+int __cdecl i2a_ASN1_OBJECT(BIO *bp, const ASN1_OBJECT *a)
 {
     char buf[80], *p = buf;
     int i;
@@ -208,7 +208,7 @@ int i2a_ASN1_OBJECT(BIO *bp, const ASN1_OBJECT *a)
     return i;
 }
 
-ASN1_OBJECT *d2i_ASN1_OBJECT(ASN1_OBJECT **a, const unsigned char **pp,
+ASN1_OBJECT * __cdecl d2i_ASN1_OBJECT(ASN1_OBJECT **a, const unsigned char **pp,
                              long length)
 {
     const unsigned char *p;
@@ -332,7 +332,7 @@ ASN1_OBJECT *c2i_ASN1_OBJECT(ASN1_OBJECT **a, const unsigned char **pp,
     return NULL;
 }
 
-ASN1_OBJECT *ASN1_OBJECT_new(void)
+ASN1_OBJECT * __cdecl ASN1_OBJECT_new(void)
 {
     ASN1_OBJECT *ret;
 
@@ -345,7 +345,7 @@ ASN1_OBJECT *ASN1_OBJECT_new(void)
     return ret;
 }
 
-void ASN1_OBJECT_free(ASN1_OBJECT *a)
+void __cdecl ASN1_OBJECT_free(ASN1_OBJECT *a)
 {
     if (a == NULL)
         return;
@@ -367,7 +367,7 @@ void ASN1_OBJECT_free(ASN1_OBJECT *a)
         OPENSSL_free(a);
 }
 
-ASN1_OBJECT *ASN1_OBJECT_create(int nid, unsigned char *data, int len,
+ASN1_OBJECT * __cdecl ASN1_OBJECT_create(int nid, unsigned char *data, int len,
                                 const char *sn, const char *ln)
 {
     ASN1_OBJECT o;
diff --git a/crypto/asn1/a_octet.c b/crypto/asn1/a_octet.c
index 2e1205caea..3ee70e8745 100644
--- a/crypto/asn1/a_octet.c
+++ b/crypto/asn1/a_octet.c
@@ -11,18 +11,18 @@
 #include "internal/cryptlib.h"
 #include <openssl/asn1.h>
 
-ASN1_OCTET_STRING *ASN1_OCTET_STRING_dup(const ASN1_OCTET_STRING *x)
+ASN1_OCTET_STRING * __cdecl ASN1_OCTET_STRING_dup(const ASN1_OCTET_STRING *x)
 {
     return ASN1_STRING_dup(x);
 }
 
-int ASN1_OCTET_STRING_cmp(const ASN1_OCTET_STRING *a,
+int __cdecl ASN1_OCTET_STRING_cmp(const ASN1_OCTET_STRING *a,
                           const ASN1_OCTET_STRING *b)
 {
     return ASN1_STRING_cmp(a, b);
 }
 
-int ASN1_OCTET_STRING_set(ASN1_OCTET_STRING *x, const unsigned char *d,
+int __cdecl ASN1_OCTET_STRING_set(ASN1_OCTET_STRING *x, const unsigned char *d,
                           int len)
 {
     return ASN1_STRING_set(x, d, len);
diff --git a/crypto/asn1/a_print.c b/crypto/asn1/a_print.c
index 8a373d9da9..f25605a0a3 100644
--- a/crypto/asn1/a_print.c
+++ b/crypto/asn1/a_print.c
@@ -12,7 +12,7 @@
 #include "internal/cryptlib.h"
 #include <openssl/asn1.h>
 
-int ASN1_PRINTABLE_type(const unsigned char *s, int len)
+int __cdecl ASN1_PRINTABLE_type(const unsigned char *s, int len)
 {
     int c;
     int ia5 = 0;
@@ -37,7 +37,7 @@ int ASN1_PRINTABLE_type(const unsigned char *s, int len)
     return V_ASN1_PRINTABLESTRING;
 }
 
-int ASN1_UNIVERSALSTRING_to_string(ASN1_UNIVERSALSTRING *s)
+int __cdecl ASN1_UNIVERSALSTRING_to_string(ASN1_UNIVERSALSTRING *s)
 {
     int i;
     unsigned char *p;
@@ -65,7 +65,7 @@ int ASN1_UNIVERSALSTRING_to_string(ASN1_UNIVERSALSTRING *s)
     return 1;
 }
 
-int ASN1_STRING_print(BIO *bp, const ASN1_STRING *v)
+int __cdecl ASN1_STRING_print(BIO *bp, const ASN1_STRING *v)
 {
     int i, n;
     char buf[80];
diff --git a/crypto/asn1/a_strex.c b/crypto/asn1/a_strex.c
index ea4dd1c5b1..9667e77e02 100644
--- a/crypto/asn1/a_strex.c
+++ b/crypto/asn1/a_strex.c
@@ -583,13 +583,13 @@ int X509_NAME_print_ex_fp(FILE *fp, const X509_NAME *nm, int indent,
 }
 #endif
 
-int ASN1_STRING_print_ex(BIO *out, const ASN1_STRING *str, unsigned long flags)
+int __cdecl ASN1_STRING_print_ex(BIO *out, const ASN1_STRING *str, unsigned long flags)
 {
     return do_print_ex(send_bio_chars, out, flags, str);
 }
 
 #ifndef OPENSSL_NO_STDIO
-int ASN1_STRING_print_ex_fp(FILE *fp, const ASN1_STRING *str, unsigned long flags)
+int __cdecl ASN1_STRING_print_ex_fp(FILE *fp, const ASN1_STRING *str, unsigned long flags)
 {
     return do_print_ex(send_fp_chars, fp, flags, str);
 }
@@ -600,7 +600,7 @@ int ASN1_STRING_print_ex_fp(FILE *fp, const ASN1_STRING *str, unsigned long flag
  * in output string or a negative error code
  */
 
-int ASN1_STRING_to_UTF8(unsigned char **out, const ASN1_STRING *in)
+int __cdecl ASN1_STRING_to_UTF8(unsigned char **out, const ASN1_STRING *in)
 {
     ASN1_STRING stmp, *str = &stmp;
     int mbflag, type, ret;
diff --git a/crypto/asn1/a_strnid.c b/crypto/asn1/a_strnid.c
index f19a9de647..712b31a65f 100644
--- a/crypto/asn1/a_strnid.c
+++ b/crypto/asn1/a_strnid.c
@@ -13,8 +13,8 @@
 #include <openssl/objects.h>
 
 static STACK_OF(ASN1_STRING_TABLE) *stable = NULL;
-static void st_free(ASN1_STRING_TABLE *tbl);
-static int sk_table_cmp(const ASN1_STRING_TABLE *const *a,
+static void __cdecl st_free(ASN1_STRING_TABLE *tbl);
+static int __cdecl sk_table_cmp(const ASN1_STRING_TABLE *const *a,
                         const ASN1_STRING_TABLE *const *b);
 
 /*
@@ -25,12 +25,12 @@ static int sk_table_cmp(const ASN1_STRING_TABLE *const *a,
 
 static unsigned long global_mask = B_ASN1_UTF8STRING;
 
-void ASN1_STRING_set_default_mask(unsigned long mask)
+void __cdecl ASN1_STRING_set_default_mask(unsigned long mask)
 {
     global_mask = mask;
 }
 
-unsigned long ASN1_STRING_get_default_mask(void)
+unsigned long __cdecl ASN1_STRING_get_default_mask(void)
 {
     return global_mask;
 }
@@ -45,7 +45,7 @@ unsigned long ASN1_STRING_get_default_mask(void)
  * default:   the default value, Printable, T61, BMP.
  */
 
-int ASN1_STRING_set_default_mask_asc(const char *p)
+int __cdecl ASN1_STRING_set_default_mask_asc(const char *p)
 {
     unsigned long mask;
     char *end;
@@ -76,7 +76,7 @@ int ASN1_STRING_set_default_mask_asc(const char *p)
  * a corresponding OID. For example certificates and certificate requests.
  */
 
-ASN1_STRING *ASN1_STRING_set_by_NID(ASN1_STRING **out,
+ASN1_STRING * __cdecl ASN1_STRING_set_by_NID(ASN1_STRING **out,
                                     const unsigned char *in, int inlen,
                                     int inform, int nid)
 {
@@ -109,7 +109,7 @@ ASN1_STRING *ASN1_STRING_set_by_NID(ASN1_STRING **out,
 
 #include "tbl_standard.h"
 
-static int sk_table_cmp(const ASN1_STRING_TABLE *const *a,
+static int __cdecl sk_table_cmp(const ASN1_STRING_TABLE *const *a,
                         const ASN1_STRING_TABLE *const *b)
 {
     return (*a)->nid - (*b)->nid;
@@ -117,14 +117,14 @@ static int sk_table_cmp(const ASN1_STRING_TABLE *const *a,
 
 DECLARE_OBJ_BSEARCH_CMP_FN(ASN1_STRING_TABLE, ASN1_STRING_TABLE, table);
 
-static int table_cmp(const ASN1_STRING_TABLE *a, const ASN1_STRING_TABLE *b)
+static int __cdecl table_cmp(const ASN1_STRING_TABLE *a, const ASN1_STRING_TABLE *b)
 {
     return a->nid - b->nid;
 }
 
 IMPLEMENT_OBJ_BSEARCH_CMP_FN(ASN1_STRING_TABLE, ASN1_STRING_TABLE, table);
 
-ASN1_STRING_TABLE *ASN1_STRING_TABLE_get(int nid)
+ASN1_STRING_TABLE * __cdecl ASN1_STRING_TABLE_get(int nid)
 {
     int idx;
     ASN1_STRING_TABLE fnd;
@@ -179,7 +179,7 @@ static ASN1_STRING_TABLE *stable_get(int nid)
     return rv;
 }
 
-int ASN1_STRING_TABLE_add(int nid,
+int __cdecl ASN1_STRING_TABLE_add(int nid,
                           long minsize, long maxsize, unsigned long mask,
                           unsigned long flags)
 {
@@ -201,7 +201,7 @@ int ASN1_STRING_TABLE_add(int nid,
     return 1;
 }
 
-void ASN1_STRING_TABLE_cleanup(void)
+void __cdecl ASN1_STRING_TABLE_cleanup(void)
 {
     STACK_OF(ASN1_STRING_TABLE) *tmp;
 
@@ -212,7 +212,7 @@ void ASN1_STRING_TABLE_cleanup(void)
     sk_ASN1_STRING_TABLE_pop_free(tmp, st_free);
 }
 
-static void st_free(ASN1_STRING_TABLE *tbl)
+static void __cdecl st_free(ASN1_STRING_TABLE *tbl)
 {
     if (tbl->flags & STABLE_FLAGS_MALLOC)
         OPENSSL_free(tbl);
diff --git a/crypto/asn1/a_time.c b/crypto/asn1/a_time.c
index c36dd95001..bca171433a 100644
--- a/crypto/asn1/a_time.c
+++ b/crypto/asn1/a_time.c
@@ -314,12 +314,12 @@ ASN1_TIME *asn1_time_from_tm(ASN1_TIME *s, struct tm *ts, int type)
     return NULL;
 }
 
-ASN1_TIME *ASN1_TIME_set(ASN1_TIME *s, time_t t)
+ASN1_TIME * __cdecl ASN1_TIME_set(ASN1_TIME *s, time_t t)
 {
     return ASN1_TIME_adj(s, t, 0, 0);
 }
 
-ASN1_TIME *ASN1_TIME_adj(ASN1_TIME *s, time_t t,
+ASN1_TIME * __cdecl ASN1_TIME_adj(ASN1_TIME *s, time_t t,
                          int offset_day, long offset_sec)
 {
     struct tm *ts;
@@ -337,7 +337,7 @@ ASN1_TIME *ASN1_TIME_adj(ASN1_TIME *s, time_t t,
     return asn1_time_from_tm(s, ts, V_ASN1_UNDEF);
 }
 
-int ASN1_TIME_check(const ASN1_TIME *t)
+int __cdecl ASN1_TIME_check(const ASN1_TIME *t)
 {
     if (t->type == V_ASN1_GENERALIZEDTIME)
         return ASN1_GENERALIZEDTIME_check(t);
@@ -347,7 +347,7 @@ int ASN1_TIME_check(const ASN1_TIME *t)
 }
 
 /* Convert an ASN1_TIME structure to GeneralizedTime */
-ASN1_GENERALIZEDTIME *ASN1_TIME_to_generalizedtime(const ASN1_TIME *t,
+ASN1_GENERALIZEDTIME * __cdecl ASN1_TIME_to_generalizedtime(const ASN1_TIME *t,
                                                    ASN1_GENERALIZEDTIME **out)
 {
     ASN1_GENERALIZEDTIME *ret = NULL;
@@ -367,7 +367,7 @@ ASN1_GENERALIZEDTIME *ASN1_TIME_to_generalizedtime(const ASN1_TIME *t,
     return ret;
 }
 
-int ASN1_TIME_set_string(ASN1_TIME *s, const char *str)
+int __cdecl ASN1_TIME_set_string(ASN1_TIME *s, const char *str)
 {
     /* Try UTC, if that fails, try GENERALIZED */
     if (ASN1_UTCTIME_set_string(s, str))
@@ -375,7 +375,7 @@ int ASN1_TIME_set_string(ASN1_TIME *s, const char *str)
     return ASN1_GENERALIZEDTIME_set_string(s, str);
 }
 
-int ASN1_TIME_set_string_X509(ASN1_TIME *s, const char *str)
+int __cdecl ASN1_TIME_set_string_X509(ASN1_TIME *s, const char *str)
 {
     ASN1_TIME t;
     struct tm tm;
@@ -434,7 +434,7 @@ out:
     return rv;
 }
 
-int ASN1_TIME_to_tm(const ASN1_TIME *s, struct tm *tm)
+int __cdecl ASN1_TIME_to_tm(const ASN1_TIME *s, struct tm *tm)
 {
     if (s == NULL) {
         time_t now_t;
@@ -449,7 +449,7 @@ int ASN1_TIME_to_tm(const ASN1_TIME *s, struct tm *tm)
     return asn1_time_to_tm(tm, s);
 }
 
-int ASN1_TIME_diff(int *pday, int *psec,
+int __cdecl ASN1_TIME_diff(int *pday, int *psec,
                    const ASN1_TIME *from, const ASN1_TIME *to)
 {
     struct tm tm_from, tm_to;
@@ -466,7 +466,7 @@ static const char _asn1_mon[12][4] = {
     "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"
 };
 
-int ASN1_TIME_print(BIO *bp, const ASN1_TIME *tm)
+int __cdecl ASN1_TIME_print(BIO *bp, const ASN1_TIME *tm)
 {
     char *v;
     int gmt = 0, l;
@@ -513,7 +513,7 @@ int ASN1_TIME_print(BIO *bp, const ASN1_TIME *tm)
     return 0;
 }
 
-int ASN1_TIME_cmp_time_t(const ASN1_TIME *s, time_t t)
+int __cdecl ASN1_TIME_cmp_time_t(const ASN1_TIME *s, time_t t)
 {
     struct tm stm, ttm;
     int day, sec;
@@ -534,7 +534,7 @@ int ASN1_TIME_cmp_time_t(const ASN1_TIME *s, time_t t)
     return 0;
 }
 
-int ASN1_TIME_normalize(ASN1_TIME *t)
+int __cdecl ASN1_TIME_normalize(ASN1_TIME *t)
 {
     struct tm tm;
 
@@ -544,7 +544,7 @@ int ASN1_TIME_normalize(ASN1_TIME *t)
     return asn1_time_from_tm(t, &tm, V_ASN1_UNDEF) != NULL;
 }
 
-int ASN1_TIME_compare(const ASN1_TIME *a, const ASN1_TIME *b)
+int __cdecl ASN1_TIME_compare(const ASN1_TIME *a, const ASN1_TIME *b)
 {
     int day, sec;
 
diff --git a/crypto/asn1/a_type.c b/crypto/asn1/a_type.c
index 732328e050..51f4490837 100644
--- a/crypto/asn1/a_type.c
+++ b/crypto/asn1/a_type.c
@@ -13,7 +13,7 @@
 #include <openssl/objects.h>
 #include "asn1_locl.h"
 
-int ASN1_TYPE_get(const ASN1_TYPE *a)
+int __cdecl ASN1_TYPE_get(const ASN1_TYPE *a)
 {
     if (a->type == V_ASN1_BOOLEAN
             || a->type == V_ASN1_NULL
@@ -23,7 +23,7 @@ int ASN1_TYPE_get(const ASN1_TYPE *a)
         return 0;
 }
 
-void ASN1_TYPE_set(ASN1_TYPE *a, int type, void *value)
+void __cdecl ASN1_TYPE_set(ASN1_TYPE *a, int type, void *value)
 {
     if (a->type != V_ASN1_BOOLEAN
             && a->type != V_ASN1_NULL
@@ -38,7 +38,7 @@ void ASN1_TYPE_set(ASN1_TYPE *a, int type, void *value)
         a->value.ptr = value;
 }
 
-int ASN1_TYPE_set1(ASN1_TYPE *a, int type, const void *value)
+int __cdecl ASN1_TYPE_set1(ASN1_TYPE *a, int type, const void *value)
 {
     if (!value || (type == V_ASN1_BOOLEAN)) {
         void *p = (void *)value;
@@ -60,7 +60,7 @@ int ASN1_TYPE_set1(ASN1_TYPE *a, int type, const void *value)
 }
 
 /* Returns 0 if they are equal, != 0 otherwise. */
-int ASN1_TYPE_cmp(const ASN1_TYPE *a, const ASN1_TYPE *b)
+int __cdecl ASN1_TYPE_cmp(const ASN1_TYPE *a, const ASN1_TYPE *b)
 {
     int result = -1;
 
@@ -106,7 +106,7 @@ int ASN1_TYPE_cmp(const ASN1_TYPE *a, const ASN1_TYPE *b)
     return result;
 }
 
-ASN1_TYPE *ASN1_TYPE_pack_sequence(const ASN1_ITEM *it, void *s, ASN1_TYPE **t)
+ASN1_TYPE * __cdecl ASN1_TYPE_pack_sequence(const ASN1_ITEM *it, void *s, ASN1_TYPE **t)
 {
     ASN1_OCTET_STRING *oct;
     ASN1_TYPE *rt;
@@ -130,7 +130,7 @@ ASN1_TYPE *ASN1_TYPE_pack_sequence(const ASN1_ITEM *it, void *s, ASN1_TYPE **t)
     return rt;
 }
 
-void *ASN1_TYPE_unpack_sequence(const ASN1_ITEM *it, const ASN1_TYPE *t)
+void * __cdecl ASN1_TYPE_unpack_sequence(const ASN1_ITEM *it, const ASN1_TYPE *t)
 {
     if (t == NULL || t->type != V_ASN1_SEQUENCE || t->value.sequence == NULL)
         return NULL;
diff --git a/crypto/asn1/a_utctm.c b/crypto/asn1/a_utctm.c
index b224991aa3..c5284ad11c 100644
--- a/crypto/asn1/a_utctm.c
+++ b/crypto/asn1/a_utctm.c
@@ -22,13 +22,13 @@ int asn1_utctime_to_tm(struct tm *tm, const ASN1_UTCTIME *d)
     return asn1_time_to_tm(tm, d);
 }
 
-int ASN1_UTCTIME_check(const ASN1_UTCTIME *d)
+int __cdecl ASN1_UTCTIME_check(const ASN1_UTCTIME *d)
 {
     return asn1_utctime_to_tm(NULL, d);
 }
 
 /* Sets the string via simple copy without cleaning it up */
-int ASN1_UTCTIME_set_string(ASN1_UTCTIME *s, const char *str)
+int __cdecl ASN1_UTCTIME_set_string(ASN1_UTCTIME *s, const char *str)
 {
     ASN1_UTCTIME t;
 
@@ -46,12 +46,12 @@ int ASN1_UTCTIME_set_string(ASN1_UTCTIME *s, const char *str)
     return 1;
 }
 
-ASN1_UTCTIME *ASN1_UTCTIME_set(ASN1_UTCTIME *s, time_t t)
+ASN1_UTCTIME * __cdecl ASN1_UTCTIME_set(ASN1_UTCTIME *s, time_t t)
 {
     return ASN1_UTCTIME_adj(s, t, 0, 0);
 }
 
-ASN1_UTCTIME *ASN1_UTCTIME_adj(ASN1_UTCTIME *s, time_t t,
+ASN1_UTCTIME * __cdecl ASN1_UTCTIME_adj(ASN1_UTCTIME *s, time_t t,
                                int offset_day, long offset_sec)
 {
     struct tm *ts;
@@ -69,7 +69,7 @@ ASN1_UTCTIME *ASN1_UTCTIME_adj(ASN1_UTCTIME *s, time_t t,
     return asn1_time_from_tm(s, ts, V_ASN1_UTCTIME);
 }
 
-int ASN1_UTCTIME_cmp_time_t(const ASN1_UTCTIME *s, time_t t)
+int __cdecl ASN1_UTCTIME_cmp_time_t(const ASN1_UTCTIME *s, time_t t)
 {
     struct tm stm, ttm;
     int day, sec;
@@ -90,7 +90,7 @@ int ASN1_UTCTIME_cmp_time_t(const ASN1_UTCTIME *s, time_t t)
     return 0;
 }
 
-int ASN1_UTCTIME_print(BIO *bp, const ASN1_UTCTIME *tm)
+int __cdecl ASN1_UTCTIME_print(BIO *bp, const ASN1_UTCTIME *tm)
 {
     if (tm->type != V_ASN1_UTCTIME)
         return 0;
diff --git a/crypto/asn1/a_utf8.c b/crypto/asn1/a_utf8.c
index e2dc09f6ae..1f8508f7a6 100644
--- a/crypto/asn1/a_utf8.c
+++ b/crypto/asn1/a_utf8.c
@@ -24,7 +24,7 @@
  * -4 = character encoded incorrectly (not minimal length).
  */
 
-int UTF8_getc(const unsigned char *str, int len, unsigned long *val)
+int __cdecl UTF8_getc(const unsigned char *str, int len, unsigned long *val)
 {
     const unsigned char *p;
     unsigned long value;
@@ -121,7 +121,7 @@ int UTF8_getc(const unsigned char *str, int len, unsigned long *val)
  * most 6 characters.
  */
 
-int UTF8_putc(unsigned char *str, int len, unsigned long value)
+int __cdecl UTF8_putc(unsigned char *str, int len, unsigned long value)
 {
     if (!str)
         len = 6;                /* Maximum we will need */
diff --git a/crypto/asn1/ameth_lib.c b/crypto/asn1/ameth_lib.c
index d7d270dbb5..dd23421ecd 100644
--- a/crypto/asn1/ameth_lib.c
+++ b/crypto/asn1/ameth_lib.c
@@ -18,13 +18,13 @@
 
 #include "standard_methods.h"
 
-typedef int sk_cmp_fn_type(const char *const *a, const char *const *b);
+typedef int __cdecl sk_cmp_fn_type(const char *const *a, const char *const *b);
 static STACK_OF(EVP_PKEY_ASN1_METHOD) *app_methods = NULL;
 
 DECLARE_OBJ_BSEARCH_CMP_FN(const EVP_PKEY_ASN1_METHOD *,
                            const EVP_PKEY_ASN1_METHOD *, ameth);
 
-static int ameth_cmp(const EVP_PKEY_ASN1_METHOD *const *a,
+static int __cdecl ameth_cmp(const EVP_PKEY_ASN1_METHOD *const *a,
                      const EVP_PKEY_ASN1_METHOD *const *b)
 {
     return ((*a)->pkey_id - (*b)->pkey_id);
diff --git a/crypto/asn1/asn1_err.c b/crypto/asn1/asn1_err.c
index 613f9ae713..0e5c0d8562 100644
--- a/crypto/asn1/asn1_err.c
+++ b/crypto/asn1/asn1_err.c
@@ -338,7 +338,7 @@ static const ERR_STRING_DATA ASN1_str_reasons[] = {
 
 #endif
 
-int ERR_load_ASN1_strings(void)
+int __cdecl ERR_load_ASN1_strings(void)
 {
 #ifndef OPENSSL_NO_ERR
     if (ERR_func_error_string(ASN1_str_functs[0].error) == NULL) {
diff --git a/crypto/asn1/asn1_gen.c b/crypto/asn1/asn1_gen.c
index 493a693aa3..d1fa076297 100644
--- a/crypto/asn1/asn1_gen.c
+++ b/crypto/asn1/asn1_gen.c
@@ -75,7 +75,7 @@ static ASN1_TYPE *asn1_multi(int utype, const char *section, X509V3_CTX *cnf,
 static ASN1_TYPE *asn1_str2type(const char *str, int format, int utype);
 static int asn1_str2tag(const char *tagstr, int len);
 
-ASN1_TYPE *ASN1_generate_nconf(const char *str, CONF *nconf)
+ASN1_TYPE * __cdecl ASN1_generate_nconf(const char *str, CONF *nconf)
 {
     X509V3_CTX cnf;
 
@@ -86,7 +86,7 @@ ASN1_TYPE *ASN1_generate_nconf(const char *str, CONF *nconf)
     return ASN1_generate_v3(str, &cnf);
 }
 
-ASN1_TYPE *ASN1_generate_v3(const char *str, X509V3_CTX *cnf)
+ASN1_TYPE * __cdecl ASN1_generate_v3(const char *str, X509V3_CTX *cnf)
 {
     int err = 0;
     ASN1_TYPE *ret = generate_v3(str, cnf, 0, &err);
@@ -782,7 +782,7 @@ static int mask_cb(const char *elem, int len, void *arg)
     return 1;
 }
 
-int ASN1_str2mask(const char *str, unsigned long *pmask)
+int __cdecl ASN1_str2mask(const char *str, unsigned long *pmask)
 {
     *pmask = 0;
     return CONF_parse_list(str, '|', 1, mask_cb, pmask);
diff --git a/crypto/asn1/asn1_item_list.c b/crypto/asn1/asn1_item_list.c
index 9798192f4b..74c5f9f395 100644
--- a/crypto/asn1/asn1_item_list.c
+++ b/crypto/asn1/asn1_item_list.c
@@ -21,7 +21,7 @@
 
 #include "asn1_item_list.h"
 
-const ASN1_ITEM *ASN1_ITEM_lookup(const char *name)
+const ASN1_ITEM * __cdecl ASN1_ITEM_lookup(const char *name)
 {
     size_t i;
 
@@ -34,7 +34,7 @@ const ASN1_ITEM *ASN1_ITEM_lookup(const char *name)
     return NULL;
 }
 
-const ASN1_ITEM *ASN1_ITEM_get(size_t i)
+const ASN1_ITEM * __cdecl ASN1_ITEM_get(size_t i)
 {
     if (i >= OSSL_NELEM(asn1_item_list))
         return NULL;
diff --git a/crypto/asn1/asn1_lib.c b/crypto/asn1/asn1_lib.c
index 88c4b53918..a2d58d0074 100644
--- a/crypto/asn1/asn1_lib.c
+++ b/crypto/asn1/asn1_lib.c
@@ -31,17 +31,17 @@ static int _asn1_check_infinite_end(const unsigned char **p, long len)
     return 0;
 }
 
-int ASN1_check_infinite_end(unsigned char **p, long len)
+int __cdecl ASN1_check_infinite_end(unsigned char **p, long len)
 {
     return _asn1_check_infinite_end((const unsigned char **)p, len);
 }
 
-int ASN1_const_check_infinite_end(const unsigned char **p, long len)
+int __cdecl ASN1_const_check_infinite_end(const unsigned char **p, long len)
 {
     return _asn1_check_infinite_end(p, len);
 }
 
-int ASN1_get_object(const unsigned char **pp, long *plength, int *ptag,
+int __cdecl ASN1_get_object(const unsigned char **pp, long *plength, int *ptag,
                     int *pclass, long omax)
 {
     int i, ret;
@@ -152,7 +152,7 @@ static int asn1_get_length(const unsigned char **pp, int *inf, long *rl,
 /*
  * class 0 is constructed constructed == 2 for indefinite length constructed
  */
-void ASN1_put_object(unsigned char **pp, int constructed, int length, int tag,
+void __cdecl ASN1_put_object(unsigned char **pp, int constructed, int length, int tag,
                      int xclass)
 {
     unsigned char *p = *pp;
@@ -182,7 +182,7 @@ void ASN1_put_object(unsigned char **pp, int constructed, int length, int tag,
     *pp = p;
 }
 
-int ASN1_put_eoc(unsigned char **pp)
+int __cdecl ASN1_put_eoc(unsigned char **pp)
 {
     unsigned char *p = *pp;
     *p++ = 0;
@@ -212,7 +212,7 @@ static void asn1_put_length(unsigned char **pp, int length)
     *pp = p;
 }
 
-int ASN1_object_size(int constructed, int length, int tag)
+int __cdecl ASN1_object_size(int constructed, int length, int tag)
 {
     int ret = 1;
     if (length < 0)
@@ -240,7 +240,7 @@ int ASN1_object_size(int constructed, int length, int tag)
     return ret + length;
 }
 
-int ASN1_STRING_copy(ASN1_STRING *dst, const ASN1_STRING *str)
+int __cdecl ASN1_STRING_copy(ASN1_STRING *dst, const ASN1_STRING *str)
 {
     if (str == NULL)
         return 0;
@@ -253,7 +253,7 @@ int ASN1_STRING_copy(ASN1_STRING *dst, const ASN1_STRING *str)
     return 1;
 }
 
-ASN1_STRING *ASN1_STRING_dup(const ASN1_STRING *str)
+ASN1_STRING * __cdecl ASN1_STRING_dup(const ASN1_STRING *str)
 {
     ASN1_STRING *ret;
     if (!str)
@@ -268,7 +268,7 @@ ASN1_STRING *ASN1_STRING_dup(const ASN1_STRING *str)
     return ret;
 }
 
-int ASN1_STRING_set(ASN1_STRING *str, const void *_data, int len)
+int __cdecl ASN1_STRING_set(ASN1_STRING *str, const void *_data, int len)
 {
     unsigned char *c;
     const char *data = _data;
@@ -297,19 +297,19 @@ int ASN1_STRING_set(ASN1_STRING *str, const void *_data, int len)
     return 1;
 }
 
-void ASN1_STRING_set0(ASN1_STRING *str, void *data, int len)
+void __cdecl ASN1_STRING_set0(ASN1_STRING *str, void *data, int len)
 {
     OPENSSL_free(str->data);
     str->data = data;
     str->length = len;
 }
 
-ASN1_STRING *ASN1_STRING_new(void)
+ASN1_STRING * __cdecl ASN1_STRING_new(void)
 {
     return ASN1_STRING_type_new(V_ASN1_OCTET_STRING);
 }
 
-ASN1_STRING *ASN1_STRING_type_new(int type)
+ASN1_STRING * __cdecl ASN1_STRING_type_new(int type)
 {
     ASN1_STRING *ret;
 
@@ -332,14 +332,14 @@ void asn1_string_embed_free(ASN1_STRING *a, int embed)
         OPENSSL_free(a);
 }
 
-void ASN1_STRING_free(ASN1_STRING *a)
+void __cdecl ASN1_STRING_free(ASN1_STRING *a)
 {
     if (a == NULL)
         return;
     asn1_string_embed_free(a, a->flags & ASN1_STRING_FLAG_EMBED);
 }
 
-void ASN1_STRING_clear_free(ASN1_STRING *a)
+void __cdecl ASN1_STRING_clear_free(ASN1_STRING *a)
 {
     if (a == NULL)
         return;
@@ -348,7 +348,7 @@ void ASN1_STRING_clear_free(ASN1_STRING *a)
     ASN1_STRING_free(a);
 }
 
-int ASN1_STRING_cmp(const ASN1_STRING *a, const ASN1_STRING *b)
+int __cdecl ASN1_STRING_cmp(const ASN1_STRING *a, const ASN1_STRING *b)
 {
     int i;
 
@@ -363,22 +363,22 @@ int ASN1_STRING_cmp(const ASN1_STRING *a, const ASN1_STRING *b)
         return i;
 }
 
-int ASN1_STRING_length(const ASN1_STRING *x)
+int __cdecl ASN1_STRING_length(const ASN1_STRING *x)
 {
     return x->length;
 }
 
-void ASN1_STRING_length_set(ASN1_STRING *x, int len)
+void __cdecl ASN1_STRING_length_set(ASN1_STRING *x, int len)
 {
     x->length = len;
 }
 
-int ASN1_STRING_type(const ASN1_STRING *x)
+int __cdecl ASN1_STRING_type(const ASN1_STRING *x)
 {
     return x->type;
 }
 
-const unsigned char *ASN1_STRING_get0_data(const ASN1_STRING *x)
+const unsigned char * __cdecl ASN1_STRING_get0_data(const ASN1_STRING *x)
 {
     return x->data;
 }
diff --git a/crypto/asn1/asn1_par.c b/crypto/asn1/asn1_par.c
index 4b60c615de..2749b7f9fd 100644
--- a/crypto/asn1/asn1_par.c
+++ b/crypto/asn1/asn1_par.c
@@ -55,12 +55,12 @@ static int asn1_print_info(BIO *bp, int tag, int xclass, int constructed,
     return 0;
 }
 
-int ASN1_parse(BIO *bp, const unsigned char *pp, long len, int indent)
+int __cdecl ASN1_parse(BIO *bp, const unsigned char *pp, long len, int indent)
 {
     return asn1_parse2(bp, &pp, len, 0, 0, indent, 0);
 }
 
-int ASN1_parse_dump(BIO *bp, const unsigned char *pp, long len, int indent,
+int __cdecl ASN1_parse_dump(BIO *bp, const unsigned char *pp, long len, int indent,
                     int dump)
 {
     return asn1_parse2(bp, &pp, len, 0, 0, indent, dump);
@@ -345,7 +345,7 @@ static int asn1_parse2(BIO *bp, const unsigned char **pp, long length,
     return ret;
 }
 
-const char *ASN1_tag2str(int tag)
+const char * __cdecl ASN1_tag2str(int tag)
 {
     static const char *const tag2str[] = {
         /* 0-4 */
diff --git a/crypto/asn1/asn_mime.c b/crypto/asn1/asn_mime.c
index dfd5be6347..0604e1827a 100644
--- a/crypto/asn1/asn_mime.c
+++ b/crypto/asn1/asn_mime.c
@@ -47,24 +47,24 @@ static char *strip_end(char *name);
 static MIME_HEADER *mime_hdr_new(const char *name, const char *value);
 static int mime_hdr_addparam(MIME_HEADER *mhdr, const char *name, const char *value);
 static STACK_OF(MIME_HEADER) *mime_parse_hdr(BIO *bio);
-static int mime_hdr_cmp(const MIME_HEADER *const *a,
+static int __cdecl mime_hdr_cmp(const MIME_HEADER *const *a,
                         const MIME_HEADER *const *b);
-static int mime_param_cmp(const MIME_PARAM *const *a,
+static int __cdecl mime_param_cmp(const MIME_PARAM *const *a,
                           const MIME_PARAM *const *b);
-static void mime_param_free(MIME_PARAM *param);
+static void __cdecl mime_param_free(MIME_PARAM *param);
 static int mime_bound_check(char *line, int linelen, const char *bound, int blen);
 static int multi_split(BIO *bio, const char *bound, STACK_OF(BIO) **ret);
 static int strip_eol(char *linebuf, int *plen, int flags);
 static MIME_HEADER *mime_hdr_find(STACK_OF(MIME_HEADER) *hdrs, const char *name);
 static MIME_PARAM *mime_param_find(MIME_HEADER *hdr, const char *name);
-static void mime_hdr_free(MIME_HEADER *hdr);
+static void __cdecl mime_hdr_free(MIME_HEADER *hdr);
 
 #define MAX_SMLEN 1024
 #define mime_debug(x)           /* x */
 
 /* Output an ASN1 structure in BER format streaming if necessary */
 
-int i2d_ASN1_bio_stream(BIO *out, ASN1_VALUE *val, BIO *in, int flags,
+int __cdecl i2d_ASN1_bio_stream(BIO *out, ASN1_VALUE *val, BIO *in, int flags,
                         const ASN1_ITEM *it)
 {
     /* If streaming create stream BIO and copy all content through it */
@@ -118,7 +118,7 @@ static int B64_write_ASN1(BIO *out, ASN1_VALUE *val, BIO *in, int flags,
 
 /* Streaming ASN1 PEM write */
 
-int PEM_write_bio_ASN1_stream(BIO *out, ASN1_VALUE *val, BIO *in, int flags,
+int __cdecl PEM_write_bio_ASN1_stream(BIO *out, ASN1_VALUE *val, BIO *in, int flags,
                               const char *hdr, const ASN1_ITEM *it)
 {
     int r;
@@ -219,7 +219,7 @@ static int asn1_write_micalg(BIO *out, STACK_OF(X509_ALGOR) *mdalgs)
 
 /* SMIME sender */
 
-int SMIME_write_ASN1(BIO *bio, ASN1_VALUE *val, BIO *data, int flags,
+int __cdecl SMIME_write_ASN1(BIO *bio, ASN1_VALUE *val, BIO *data, int flags,
                      int ctype_nid, int econt_nid,
                      STACK_OF(X509_ALGOR) *mdalgs, const ASN1_ITEM *it)
 {
@@ -367,7 +367,7 @@ static int asn1_output_data(BIO *out, BIO *data, ASN1_VALUE *val, int flags,
  * opaque this is set to NULL
  */
 
-ASN1_VALUE *SMIME_read_ASN1(BIO *bio, BIO **bcont, const ASN1_ITEM *it)
+ASN1_VALUE * __cdecl SMIME_read_ASN1(BIO *bio, BIO **bcont, const ASN1_ITEM *it)
 {
     BIO *asnin;
     STACK_OF(MIME_HEADER) *headers = NULL;
@@ -475,7 +475,7 @@ ASN1_VALUE *SMIME_read_ASN1(BIO *bio, BIO **bcont, const ASN1_ITEM *it)
 }
 
 /* Copy text from one BIO to another making the output CRLF at EOL */
-int SMIME_crlf_copy(BIO *in, BIO *out, int flags)
+int __cdecl SMIME_crlf_copy(BIO *in, BIO *out, int flags)
 {
     BIO *bf;
     char eol;
@@ -522,7 +522,7 @@ int SMIME_crlf_copy(BIO *in, BIO *out, int flags)
 }
 
 /* Strip off headers if they are text/plain */
-int SMIME_text(BIO *in, BIO *out)
+int __cdecl SMIME_text(BIO *in, BIO *out)
 {
     char iobuf[4096];
     int len;
@@ -854,7 +854,7 @@ static int mime_hdr_addparam(MIME_HEADER *mhdr, const char *name, const char *va
     return 0;
 }
 
-static int mime_hdr_cmp(const MIME_HEADER *const *a,
+static int __cdecl mime_hdr_cmp(const MIME_HEADER *const *a,
                         const MIME_HEADER *const *b)
 {
     if (!(*a)->name || !(*b)->name)
@@ -863,7 +863,7 @@ static int mime_hdr_cmp(const MIME_HEADER *const *a,
     return strcmp((*a)->name, (*b)->name);
 }
 
-static int mime_param_cmp(const MIME_PARAM *const *a,
+static int __cdecl mime_param_cmp(const MIME_PARAM *const *a,
                           const MIME_PARAM *const *b)
 {
     if (!(*a)->param_name || !(*b)->param_name)
@@ -897,7 +897,7 @@ static MIME_PARAM *mime_param_find(MIME_HEADER *hdr, const char *name)
     return sk_MIME_PARAM_value(hdr->params, idx);
 }
 
-static void mime_hdr_free(MIME_HEADER *hdr)
+static void __cdecl mime_hdr_free(MIME_HEADER *hdr)
 {
     if (hdr == NULL)
         return;
@@ -908,7 +908,7 @@ static void mime_hdr_free(MIME_HEADER *hdr)
     OPENSSL_free(hdr);
 }
 
-static void mime_param_free(MIME_PARAM *param)
+static void __cdecl mime_param_free(MIME_PARAM *param)
 {
     OPENSSL_free(param->param_name);
     OPENSSL_free(param->param_value);
diff --git a/crypto/asn1/asn_moid.c b/crypto/asn1/asn_moid.c
index 68a01f3117..937722f0ce 100644
--- a/crypto/asn1/asn_moid.c
+++ b/crypto/asn1/asn_moid.c
@@ -46,7 +46,7 @@ static void oid_module_finish(CONF_IMODULE *md)
 {
 }
 
-void ASN1_add_oid_module(void)
+void __cdecl ASN1_add_oid_module(void)
 {
     CONF_module_add("oid_section", oid_module_init, oid_module_finish);
 }
diff --git a/crypto/asn1/asn_mstbl.c b/crypto/asn1/asn_mstbl.c
index ddcbcd07fe..6ee31f0cd2 100644
--- a/crypto/asn1/asn_mstbl.c
+++ b/crypto/asn1/asn_mstbl.c
@@ -44,7 +44,7 @@ static void stbl_module_finish(CONF_IMODULE *md)
     ASN1_STRING_TABLE_cleanup();
 }
 
-void ASN1_add_stable_module(void)
+void __cdecl ASN1_add_stable_module(void)
 {
     CONF_module_add("stbl_section", stbl_module_init, stbl_module_finish);
 }
diff --git a/crypto/asn1/asn_pack.c b/crypto/asn1/asn_pack.c
index 63bc306756..18866ccbc9 100644
--- a/crypto/asn1/asn_pack.c
+++ b/crypto/asn1/asn_pack.c
@@ -13,7 +13,7 @@
 
 /* ASN1 packing and unpacking functions */
 
-ASN1_STRING *ASN1_item_pack(void *obj, const ASN1_ITEM *it, ASN1_STRING **oct)
+ASN1_STRING * __cdecl ASN1_item_pack(void *obj, const ASN1_ITEM *it, ASN1_STRING **oct)
 {
     ASN1_STRING *octmp;
 
@@ -50,7 +50,7 @@ ASN1_STRING *ASN1_item_pack(void *obj, const ASN1_ITEM *it, ASN1_STRING **oct)
 
 /* Extract an ASN1 object from an ASN1_STRING */
 
-void *ASN1_item_unpack(const ASN1_STRING *oct, const ASN1_ITEM *it)
+void * __cdecl ASN1_item_unpack(const ASN1_STRING *oct, const ASN1_ITEM *it)
 {
     const unsigned char *p;
     void *ret;
diff --git a/crypto/asn1/bio_asn1.c b/crypto/asn1/bio_asn1.c
index 86ee566323..59024d8120 100644
--- a/crypto/asn1/bio_asn1.c
+++ b/crypto/asn1/bio_asn1.c
@@ -93,7 +93,7 @@ static const BIO_METHOD methods_asn1 = {
     asn1_bio_callback_ctrl,
 };
 
-const BIO_METHOD *BIO_f_asn1(void)
+const BIO_METHOD * __cdecl BIO_f_asn1(void)
 {
     return &methods_asn1;
 }
@@ -419,25 +419,25 @@ static int asn1_bio_get_ex(BIO *b, int cmd,
     return ret;
 }
 
-int BIO_asn1_set_prefix(BIO *b, asn1_ps_func *prefix,
+int __cdecl BIO_asn1_set_prefix(BIO *b, asn1_ps_func *prefix,
                         asn1_ps_func *prefix_free)
 {
     return asn1_bio_set_ex(b, BIO_C_SET_PREFIX, prefix, prefix_free);
 }
 
-int BIO_asn1_get_prefix(BIO *b, asn1_ps_func **pprefix,
+int __cdecl BIO_asn1_get_prefix(BIO *b, asn1_ps_func **pprefix,
                         asn1_ps_func **pprefix_free)
 {
     return asn1_bio_get_ex(b, BIO_C_GET_PREFIX, pprefix, pprefix_free);
 }
 
-int BIO_asn1_set_suffix(BIO *b, asn1_ps_func *suffix,
+int __cdecl BIO_asn1_set_suffix(BIO *b, asn1_ps_func *suffix,
                         asn1_ps_func *suffix_free)
 {
     return asn1_bio_set_ex(b, BIO_C_SET_SUFFIX, suffix, suffix_free);
 }
 
-int BIO_asn1_get_suffix(BIO *b, asn1_ps_func **psuffix,
+int __cdecl BIO_asn1_get_suffix(BIO *b, asn1_ps_func **psuffix,
                         asn1_ps_func **psuffix_free)
 {
     return asn1_bio_get_ex(b, BIO_C_GET_SUFFIX, psuffix, psuffix_free);
diff --git a/crypto/asn1/bio_ndef.c b/crypto/asn1/bio_ndef.c
index 6222c99074..431a499dcf 100644
--- a/crypto/asn1/bio_ndef.c
+++ b/crypto/asn1/bio_ndef.c
@@ -49,7 +49,7 @@ static int ndef_suffix(BIO *b, unsigned char **pbuf, int *plen, void *parg);
 static int ndef_suffix_free(BIO *b, unsigned char **pbuf, int *plen,
                             void *parg);
 
-BIO *BIO_new_NDEF(BIO *out, ASN1_VALUE *val, const ASN1_ITEM *it)
+BIO * __cdecl BIO_new_NDEF(BIO *out, ASN1_VALUE *val, const ASN1_ITEM *it)
 {
     NDEF_SUPPORT *ndef_aux = NULL;
     BIO *asn_bio = NULL;
diff --git a/crypto/asn1/d2i_pr.c b/crypto/asn1/d2i_pr.c
index aa0d6ad6ae..0c0869904b 100644
--- a/crypto/asn1/d2i_pr.c
+++ b/crypto/asn1/d2i_pr.c
@@ -76,7 +76,7 @@ EVP_PKEY *d2i_PrivateKey(int type, EVP_PKEY **a, const unsigned char **pp,
  * type
  */
 
-EVP_PKEY *d2i_AutoPrivateKey(EVP_PKEY **a, const unsigned char **pp,
+EVP_PKEY * __cdecl d2i_AutoPrivateKey(EVP_PKEY **a, const unsigned char **pp,
                              long length)
 {
     STACK_OF(ASN1_TYPE) *inkey;
diff --git a/crypto/asn1/evp_asn1.c b/crypto/asn1/evp_asn1.c
index 895085a520..0dfb92e346 100644
--- a/crypto/asn1/evp_asn1.c
+++ b/crypto/asn1/evp_asn1.c
@@ -12,7 +12,7 @@
 #include <openssl/asn1.h>
 #include <openssl/asn1t.h>
 
-int ASN1_TYPE_set_octetstring(ASN1_TYPE *a, unsigned char *data, int len)
+int __cdecl ASN1_TYPE_set_octetstring(ASN1_TYPE *a, unsigned char *data, int len)
 {
     ASN1_STRING *os;
 
@@ -27,7 +27,7 @@ int ASN1_TYPE_set_octetstring(ASN1_TYPE *a, unsigned char *data, int len)
 }
 
 /* int max_len:  for returned value    */
-int ASN1_TYPE_get_octetstring(const ASN1_TYPE *a, unsigned char *data, int max_len)
+int __cdecl ASN1_TYPE_get_octetstring(const ASN1_TYPE *a, unsigned char *data, int max_len)
 {
     int ret, num;
     const unsigned char *p;
@@ -58,7 +58,7 @@ ASN1_SEQUENCE(asn1_int_oct) = {
 
 DECLARE_ASN1_ITEM(asn1_int_oct)
 
-int ASN1_TYPE_set_int_octetstring(ASN1_TYPE *a, long num, unsigned char *data,
+int __cdecl ASN1_TYPE_set_int_octetstring(ASN1_TYPE *a, long num, unsigned char *data,
                                   int len)
 {
     asn1_int_oct atmp;
@@ -80,7 +80,7 @@ int ASN1_TYPE_set_int_octetstring(ASN1_TYPE *a, long num, unsigned char *data,
  * we return the actual length...
  */
 /* int max_len:  for returned value    */
-int ASN1_TYPE_get_int_octetstring(const ASN1_TYPE *a, long *num,
+int __cdecl ASN1_TYPE_get_int_octetstring(const ASN1_TYPE *a, long *num,
                                   unsigned char *data, int max_len)
 {
     asn1_int_oct *atmp = NULL;
diff --git a/crypto/asn1/f_int.c b/crypto/asn1/f_int.c
index 6d6bddc651..bc7d6d73ea 100644
--- a/crypto/asn1/f_int.c
+++ b/crypto/asn1/f_int.c
@@ -13,7 +13,7 @@
 #include <openssl/buffer.h>
 #include <openssl/asn1.h>
 
-int i2a_ASN1_INTEGER(BIO *bp, const ASN1_INTEGER *a)
+int __cdecl i2a_ASN1_INTEGER(BIO *bp, const ASN1_INTEGER *a)
 {
     int i, n = 0;
     static const char *h = "0123456789ABCDEF";
@@ -51,7 +51,7 @@ int i2a_ASN1_INTEGER(BIO *bp, const ASN1_INTEGER *a)
     return -1;
 }
 
-int a2i_ASN1_INTEGER(BIO *bp, ASN1_INTEGER *bs, char *buf, int size)
+int __cdecl a2i_ASN1_INTEGER(BIO *bp, ASN1_INTEGER *bs, char *buf, int size)
 {
     int i, j, k, m, n, again, bufsize;
     unsigned char *s = NULL, *sp;
@@ -142,12 +142,12 @@ int a2i_ASN1_INTEGER(BIO *bp, ASN1_INTEGER *bs, char *buf, int size)
     return 0;
 }
 
-int i2a_ASN1_ENUMERATED(BIO *bp, const ASN1_ENUMERATED *a)
+int __cdecl i2a_ASN1_ENUMERATED(BIO *bp, const ASN1_ENUMERATED *a)
 {
     return i2a_ASN1_INTEGER(bp, a);
 }
 
-int a2i_ASN1_ENUMERATED(BIO *bp, ASN1_ENUMERATED *bs, char *buf, int size)
+int __cdecl a2i_ASN1_ENUMERATED(BIO *bp, ASN1_ENUMERATED *bs, char *buf, int size)
 {
     int rv = a2i_ASN1_INTEGER(bp, bs, buf, size);
     if (rv == 1)
diff --git a/crypto/asn1/f_string.c b/crypto/asn1/f_string.c
index f893489a67..68ee2f8324 100644
--- a/crypto/asn1/f_string.c
+++ b/crypto/asn1/f_string.c
@@ -13,7 +13,7 @@
 #include <openssl/buffer.h>
 #include <openssl/asn1.h>
 
-int i2a_ASN1_STRING(BIO *bp, const ASN1_STRING *a, int type)
+int __cdecl i2a_ASN1_STRING(BIO *bp, const ASN1_STRING *a, int type)
 {
     int i, n = 0;
     static const char *h = "0123456789ABCDEF";
@@ -45,7 +45,7 @@ int i2a_ASN1_STRING(BIO *bp, const ASN1_STRING *a, int type)
     return -1;
 }
 
-int a2i_ASN1_STRING(BIO *bp, ASN1_STRING *bs, char *buf, int size)
+int __cdecl a2i_ASN1_STRING(BIO *bp, ASN1_STRING *bs, char *buf, int size)
 {
     int i, j, k, m, n, again, bufsize;
     unsigned char *s = NULL, *sp;
diff --git a/crypto/asn1/i2d_pr.c b/crypto/asn1/i2d_pr.c
index 445b0c8425..748901dbc0 100644
--- a/crypto/asn1/i2d_pr.c
+++ b/crypto/asn1/i2d_pr.c
@@ -14,7 +14,7 @@
 #include "internal/asn1_int.h"
 #include "internal/evp_int.h"
 
-int i2d_PrivateKey(EVP_PKEY *a, unsigned char **pp)
+int __cdecl i2d_PrivateKey(EVP_PKEY *a, unsigned char **pp)
 {
     if (a->ameth && a->ameth->old_priv_encode) {
         return a->ameth->old_priv_encode(a, pp);
diff --git a/crypto/asn1/t_bitst.c b/crypto/asn1/t_bitst.c
index c0aeca4c78..0faad36e59 100644
--- a/crypto/asn1/t_bitst.c
+++ b/crypto/asn1/t_bitst.c
@@ -12,7 +12,7 @@
 #include <openssl/conf.h>
 #include <openssl/x509v3.h>
 
-int ASN1_BIT_STRING_name_print(BIO *out, ASN1_BIT_STRING *bs,
+int __cdecl ASN1_BIT_STRING_name_print(BIO *out, ASN1_BIT_STRING *bs,
                                BIT_STRING_BITNAME *tbl, int indent)
 {
     BIT_STRING_BITNAME *bnam;
@@ -30,7 +30,7 @@ int ASN1_BIT_STRING_name_print(BIO *out, ASN1_BIT_STRING *bs,
     return 1;
 }
 
-int ASN1_BIT_STRING_set_asc(ASN1_BIT_STRING *bs, const char *name, int value,
+int __cdecl ASN1_BIT_STRING_set_asc(ASN1_BIT_STRING *bs, const char *name, int value,
                             BIT_STRING_BITNAME *tbl)
 {
     int bitnum;
@@ -44,7 +44,7 @@ int ASN1_BIT_STRING_set_asc(ASN1_BIT_STRING *bs, const char *name, int value,
     return 1;
 }
 
-int ASN1_BIT_STRING_num_asc(const char *name, BIT_STRING_BITNAME *tbl)
+int __cdecl ASN1_BIT_STRING_num_asc(const char *name, BIT_STRING_BITNAME *tbl)
 {
     BIT_STRING_BITNAME *bnam;
     for (bnam = tbl; bnam->lname; bnam++) {
diff --git a/crypto/asn1/t_pkey.c b/crypto/asn1/t_pkey.c
index 3b2c9df891..ab3d27644d 100644
--- a/crypto/asn1/t_pkey.c
+++ b/crypto/asn1/t_pkey.c
@@ -18,7 +18,7 @@
 /* Maximum indent */
 #define ASN1_PRINT_MAX_INDENT 128
 
-int ASN1_buf_print(BIO *bp, const unsigned char *buf, size_t buflen, int indent)
+int __cdecl ASN1_buf_print(BIO *bp, const unsigned char *buf, size_t buflen, int indent)
 {
     size_t i;
 
@@ -42,7 +42,7 @@ int ASN1_buf_print(BIO *bp, const unsigned char *buf, size_t buflen, int indent)
     return 1;
 }
 
-int ASN1_bn_print(BIO *bp, const char *number, const BIGNUM *num,
+int __cdecl ASN1_bn_print(BIO *bp, const char *number, const BIGNUM *num,
                   unsigned char *ign, int indent)
 {
     int n, rv = 0;
diff --git a/crypto/asn1/tasn_dec.c b/crypto/asn1/tasn_dec.c
index c2a521ed51..1cf4f1067d 100644
--- a/crypto/asn1/tasn_dec.c
+++ b/crypto/asn1/tasn_dec.c
@@ -82,7 +82,7 @@ static const unsigned long tag2bit[32] = {
     B_ASN1_UNIVERSALSTRING, B_ASN1_UNKNOWN, B_ASN1_BMPSTRING, B_ASN1_UNKNOWN,
 };
 
-unsigned long ASN1_tag2bit(int tag)
+unsigned long __cdecl ASN1_tag2bit(int tag)
 {
     if ((tag < 0) || (tag > 30))
         return 0;
@@ -102,7 +102,7 @@ unsigned long ASN1_tag2bit(int tag)
  * this will simply be a special case.
  */
 
-ASN1_VALUE *ASN1_item_d2i(ASN1_VALUE **pval,
+ASN1_VALUE * __cdecl ASN1_item_d2i(ASN1_VALUE **pval,
                           const unsigned char **in, long len,
                           const ASN1_ITEM *it)
 {
@@ -116,7 +116,7 @@ ASN1_VALUE *ASN1_item_d2i(ASN1_VALUE **pval,
     return NULL;
 }
 
-int ASN1_item_ex_d2i(ASN1_VALUE **pval, const unsigned char **in, long len,
+int __cdecl ASN1_item_ex_d2i(ASN1_VALUE **pval, const unsigned char **in, long len,
                      const ASN1_ITEM *it,
                      int tag, int aclass, char opt, ASN1_TLC *ctx)
 {
diff --git a/crypto/asn1/tasn_enc.c b/crypto/asn1/tasn_enc.c
index 30be314ff9..67028de15d 100644
--- a/crypto/asn1/tasn_enc.c
+++ b/crypto/asn1/tasn_enc.c
@@ -33,13 +33,13 @@ static int asn1_ex_i2c(ASN1_VALUE **pval, unsigned char *cout, int *putype,
  * indefinite length constructed encoding, where appropriate
  */
 
-int ASN1_item_ndef_i2d(ASN1_VALUE *val, unsigned char **out,
+int __cdecl ASN1_item_ndef_i2d(ASN1_VALUE *val, unsigned char **out,
                        const ASN1_ITEM *it)
 {
     return asn1_item_flags_i2d(val, out, it, ASN1_TFLG_NDEF);
 }
 
-int ASN1_item_i2d(ASN1_VALUE *val, unsigned char **out, const ASN1_ITEM *it)
+int __cdecl ASN1_item_i2d(ASN1_VALUE *val, unsigned char **out, const ASN1_ITEM *it)
 {
     return asn1_item_flags_i2d(val, out, it, 0);
 }
@@ -79,7 +79,7 @@ static int asn1_item_flags_i2d(ASN1_VALUE *val, unsigned char **out,
  * performs the normal item handling: it can be used in external types.
  */
 
-int ASN1_item_ex_i2d(ASN1_VALUE **pval, unsigned char **out,
+int __cdecl ASN1_item_ex_i2d(ASN1_VALUE **pval, unsigned char **out,
                      const ASN1_ITEM *it, int tag, int aclass)
 {
     const ASN1_TEMPLATE *tt = NULL;
@@ -354,7 +354,7 @@ typedef struct {
     ASN1_VALUE *field;
 } DER_ENC;
 
-static int der_cmp(const void *a, const void *b)
+static int __cdecl der_cmp(const void *a, const void *b)
 {
     const DER_ENC *d1 = a, *d2 = b;
     int cmplen, i;
diff --git a/crypto/asn1/tasn_fre.c b/crypto/asn1/tasn_fre.c
index bbce489fe0..d59a6519cc 100644
--- a/crypto/asn1/tasn_fre.c
+++ b/crypto/asn1/tasn_fre.c
@@ -15,12 +15,12 @@
 
 /* Free up an ASN1 structure */
 
-void ASN1_item_free(ASN1_VALUE *val, const ASN1_ITEM *it)
+void __cdecl ASN1_item_free(ASN1_VALUE *val, const ASN1_ITEM *it)
 {
     asn1_item_embed_free(&val, it, 0);
 }
 
-void ASN1_item_ex_free(ASN1_VALUE **pval, const ASN1_ITEM *it)
+void __cdecl ASN1_item_ex_free(ASN1_VALUE **pval, const ASN1_ITEM *it)
 {
     asn1_item_embed_free(pval, it, 0);
 }
diff --git a/crypto/asn1/tasn_new.c b/crypto/asn1/tasn_new.c
index 6b8ea8ddd7..6c35cb2443 100644
--- a/crypto/asn1/tasn_new.c
+++ b/crypto/asn1/tasn_new.c
@@ -24,7 +24,7 @@ static int asn1_template_new(ASN1_VALUE **pval, const ASN1_TEMPLATE *tt);
 static void asn1_template_clear(ASN1_VALUE **pval, const ASN1_TEMPLATE *tt);
 static void asn1_primitive_clear(ASN1_VALUE **pval, const ASN1_ITEM *it);
 
-ASN1_VALUE *ASN1_item_new(const ASN1_ITEM *it)
+ASN1_VALUE * __cdecl ASN1_item_new(const ASN1_ITEM *it)
 {
     ASN1_VALUE *ret = NULL;
     if (ASN1_item_ex_new(&ret, it) > 0)
@@ -34,7 +34,7 @@ ASN1_VALUE *ASN1_item_new(const ASN1_ITEM *it)
 
 /* Allocate an ASN1 structure */
 
-int ASN1_item_ex_new(ASN1_VALUE **pval, const ASN1_ITEM *it)
+int __cdecl ASN1_item_ex_new(ASN1_VALUE **pval, const ASN1_ITEM *it)
 {
     return asn1_item_embed_new(pval, it, 0);
 }
diff --git a/crypto/asn1/tasn_prn.c b/crypto/asn1/tasn_prn.c
index 1fb66f1062..ca8babb602 100644
--- a/crypto/asn1/tasn_prn.c
+++ b/crypto/asn1/tasn_prn.c
@@ -32,7 +32,7 @@ static ASN1_PCTX default_pctx = {
     0                           /* str_flags */
 };
 
-ASN1_PCTX *ASN1_PCTX_new(void)
+ASN1_PCTX * __cdecl ASN1_PCTX_new(void)
 {
     ASN1_PCTX *ret;
 
@@ -44,57 +44,57 @@ ASN1_PCTX *ASN1_PCTX_new(void)
     return ret;
 }
 
-void ASN1_PCTX_free(ASN1_PCTX *p)
+void __cdecl ASN1_PCTX_free(ASN1_PCTX *p)
 {
     OPENSSL_free(p);
 }
 
-unsigned long ASN1_PCTX_get_flags(const ASN1_PCTX *p)
+unsigned long __cdecl ASN1_PCTX_get_flags(const ASN1_PCTX *p)
 {
     return p->flags;
 }
 
-void ASN1_PCTX_set_flags(ASN1_PCTX *p, unsigned long flags)
+void __cdecl ASN1_PCTX_set_flags(ASN1_PCTX *p, unsigned long flags)
 {
     p->flags = flags;
 }
 
-unsigned long ASN1_PCTX_get_nm_flags(const ASN1_PCTX *p)
+unsigned long __cdecl ASN1_PCTX_get_nm_flags(const ASN1_PCTX *p)
 {
     return p->nm_flags;
 }
 
-void ASN1_PCTX_set_nm_flags(ASN1_PCTX *p, unsigned long flags)
+void __cdecl ASN1_PCTX_set_nm_flags(ASN1_PCTX *p, unsigned long flags)
 {
     p->nm_flags = flags;
 }
 
-unsigned long ASN1_PCTX_get_cert_flags(const ASN1_PCTX *p)
+unsigned long __cdecl ASN1_PCTX_get_cert_flags(const ASN1_PCTX *p)
 {
     return p->cert_flags;
 }
 
-void ASN1_PCTX_set_cert_flags(ASN1_PCTX *p, unsigned long flags)
+void __cdecl ASN1_PCTX_set_cert_flags(ASN1_PCTX *p, unsigned long flags)
 {
     p->cert_flags = flags;
 }
 
-unsigned long ASN1_PCTX_get_oid_flags(const ASN1_PCTX *p)
+unsigned long __cdecl ASN1_PCTX_get_oid_flags(const ASN1_PCTX *p)
 {
     return p->oid_flags;
 }
 
-void ASN1_PCTX_set_oid_flags(ASN1_PCTX *p, unsigned long flags)
+void __cdecl ASN1_PCTX_set_oid_flags(ASN1_PCTX *p, unsigned long flags)
 {
     p->oid_flags = flags;
 }
 
-unsigned long ASN1_PCTX_get_str_flags(const ASN1_PCTX *p)
+unsigned long __cdecl ASN1_PCTX_get_str_flags(const ASN1_PCTX *p)
 {
     return p->str_flags;
 }
 
-void ASN1_PCTX_set_str_flags(ASN1_PCTX *p, unsigned long flags)
+void __cdecl ASN1_PCTX_set_str_flags(ASN1_PCTX *p, unsigned long flags)
 {
     p->str_flags = flags;
 }
@@ -118,7 +118,7 @@ static int asn1_print_fsname(BIO *out, int indent,
                              const char *fname, const char *sname,
                              const ASN1_PCTX *pctx);
 
-int ASN1_item_print(BIO *out, ASN1_VALUE *ifld, int indent,
+int __cdecl ASN1_item_print(BIO *out, ASN1_VALUE *ifld, int indent,
                     const ASN1_ITEM *it, const ASN1_PCTX *pctx)
 {
     const char *sname;
diff --git a/crypto/asn1/tasn_scn.c b/crypto/asn1/tasn_scn.c
index e1df2cfcae..312fc05033 100644
--- a/crypto/asn1/tasn_scn.c
+++ b/crypto/asn1/tasn_scn.c
@@ -22,7 +22,7 @@
  * passing details to a callback.
  */
 
-ASN1_SCTX *ASN1_SCTX_new(int (*scan_cb) (ASN1_SCTX *ctx))
+ASN1_SCTX * __cdecl ASN1_SCTX_new(int (*scan_cb) (ASN1_SCTX *ctx))
 {
     ASN1_SCTX *ret = OPENSSL_zalloc(sizeof(*ret));
 
@@ -34,32 +34,32 @@ ASN1_SCTX *ASN1_SCTX_new(int (*scan_cb) (ASN1_SCTX *ctx))
     return ret;
 }
 
-void ASN1_SCTX_free(ASN1_SCTX *p)
+void __cdecl ASN1_SCTX_free(ASN1_SCTX *p)
 {
     OPENSSL_free(p);
 }
 
-const ASN1_ITEM *ASN1_SCTX_get_item(ASN1_SCTX *p)
+const ASN1_ITEM * __cdecl ASN1_SCTX_get_item(ASN1_SCTX *p)
 {
     return p->it;
 }
 
-const ASN1_TEMPLATE *ASN1_SCTX_get_template(ASN1_SCTX *p)
+const ASN1_TEMPLATE * __cdecl ASN1_SCTX_get_template(ASN1_SCTX *p)
 {
     return p->tt;
 }
 
-unsigned long ASN1_SCTX_get_flags(ASN1_SCTX *p)
+unsigned long __cdecl ASN1_SCTX_get_flags(ASN1_SCTX *p)
 {
     return p->flags;
 }
 
-void ASN1_SCTX_set_app_data(ASN1_SCTX *p, void *data)
+void __cdecl ASN1_SCTX_set_app_data(ASN1_SCTX *p, void *data)
 {
     p->app_data = data;
 }
 
-void *ASN1_SCTX_get_app_data(ASN1_SCTX *p)
+void * __cdecl ASN1_SCTX_get_app_data(ASN1_SCTX *p)
 {
     return p->app_data;
 }
diff --git a/crypto/asn1/tasn_typ.c b/crypto/asn1/tasn_typ.c
index 98d9879014..727d912a49 100644
--- a/crypto/asn1/tasn_typ.c
+++ b/crypto/asn1/tasn_typ.c
@@ -16,11 +16,11 @@
 #define IMPLEMENT_ASN1_STRING_FUNCTIONS(sname) \
     IMPLEMENT_ASN1_TYPE(sname) \
     IMPLEMENT_ASN1_ENCODE_FUNCTIONS_fname(sname, sname, sname) \
-sname *sname##_new(void) \
+sname * __cdecl sname##_new(void) \
 { \
     return ASN1_STRING_type_new(V_##sname); \
 } \
-void sname##_free(sname *x) \
+void __cdecl sname##_free(sname *x) \
 { \
     ASN1_STRING_free(x); \
 }
diff --git a/crypto/asn1/x_info.c b/crypto/asn1/x_info.c
index 8d99f07c63..e9a5cbf7bc 100644
--- a/crypto/asn1/x_info.c
+++ b/crypto/asn1/x_info.c
@@ -26,7 +26,7 @@ X509_INFO *X509_INFO_new(void)
     return ret;
 }
 
-void X509_INFO_free(X509_INFO *x)
+void __cdecl X509_INFO_free(X509_INFO *x)
 {
     if (x == NULL)
         return;
diff --git a/crypto/async/arch/async_null.c b/crypto/async/arch/async_null.c
index 3eaf170f2e..642fcd3534 100644
--- a/crypto/async/arch/async_null.c
+++ b/crypto/async/arch/async_null.c
@@ -11,7 +11,7 @@
 #include "../async_locl.h"
 
 #ifdef ASYNC_NULL
-int ASYNC_is_capable(void)
+int __cdecl ASYNC_is_capable(void)
 {
     return 0;
 }
diff --git a/crypto/async/arch/async_posix.c b/crypto/async/arch/async_posix.c
index 02c342d3df..b91ee1a13b 100644
--- a/crypto/async/arch/async_posix.c
+++ b/crypto/async/arch/async_posix.c
@@ -17,7 +17,7 @@
 
 #define STACKSIZE       32768
 
-int ASYNC_is_capable(void)
+int __cdecl ASYNC_is_capable(void)
 {
     ucontext_t ctx;
 
diff --git a/crypto/async/arch/async_win.c b/crypto/async/arch/async_win.c
index 077d56ced0..d2f30908bd 100644
--- a/crypto/async/arch/async_win.c
+++ b/crypto/async/arch/async_win.c
@@ -15,7 +15,7 @@
 # include <windows.h>
 # include "internal/cryptlib.h"
 
-int ASYNC_is_capable(void)
+int __cdecl ASYNC_is_capable(void)
 {
     return 1;
 }
diff --git a/crypto/async/async.c b/crypto/async/async.c
index 1d83e4576f..92eaa6982c 100644
--- a/crypto/async/async.c
+++ b/crypto/async/async.c
@@ -164,7 +164,7 @@ void async_start_func(void)
     }
 }
 
-int ASYNC_start_job(ASYNC_JOB **job, ASYNC_WAIT_CTX *wctx, int *ret,
+int __cdecl ASYNC_start_job(ASYNC_JOB **job, ASYNC_WAIT_CTX *wctx, int *ret,
                     int (*func)(void *), void *args, size_t size)
 {
     async_ctx *ctx;
@@ -252,7 +252,7 @@ err:
     return ASYNC_ERR;
 }
 
-int ASYNC_pause_job(void)
+int __cdecl ASYNC_pause_job(void)
 {
     ASYNC_JOB *job;
     async_ctx *ctx = async_get_ctx();
@@ -313,7 +313,7 @@ void async_deinit(void)
     CRYPTO_THREAD_cleanup_local(&poolkey);
 }
 
-int ASYNC_init_thread(size_t max_size, size_t init_size)
+int __cdecl ASYNC_init_thread(size_t max_size, size_t init_size)
 {
     async_pool *pool;
     size_t curr_size = 0;
@@ -388,7 +388,7 @@ void async_delete_thread_state(void)
     async_ctx_free();
 }
 
-void ASYNC_cleanup_thread(void)
+void __cdecl ASYNC_cleanup_thread(void)
 {
     if (!OPENSSL_init_crypto(OPENSSL_INIT_ASYNC, NULL))
         return;
@@ -396,7 +396,7 @@ void ASYNC_cleanup_thread(void)
     async_delete_thread_state();
 }
 
-ASYNC_JOB *ASYNC_get_current_job(void)
+ASYNC_JOB * __cdecl ASYNC_get_current_job(void)
 {
     async_ctx *ctx;
 
@@ -410,12 +410,12 @@ ASYNC_JOB *ASYNC_get_current_job(void)
     return ctx->currjob;
 }
 
-ASYNC_WAIT_CTX *ASYNC_get_wait_ctx(ASYNC_JOB *job)
+ASYNC_WAIT_CTX * __cdecl ASYNC_get_wait_ctx(ASYNC_JOB *job)
 {
     return job->waitctx;
 }
 
-void ASYNC_block_pause(void)
+void __cdecl ASYNC_block_pause(void)
 {
     async_ctx *ctx;
 
@@ -432,7 +432,7 @@ void ASYNC_block_pause(void)
     ctx->blocked++;
 }
 
-void ASYNC_unblock_pause(void)
+void __cdecl ASYNC_unblock_pause(void)
 {
     async_ctx *ctx;
 
diff --git a/crypto/async/async_err.c b/crypto/async/async_err.c
index fd5527aae8..4b9144eadc 100644
--- a/crypto/async/async_err.c
+++ b/crypto/async/async_err.c
@@ -39,7 +39,7 @@ static const ERR_STRING_DATA ASYNC_str_reasons[] = {
 
 #endif
 
-int ERR_load_ASYNC_strings(void)
+int __cdecl ERR_load_ASYNC_strings(void)
 {
 #ifndef OPENSSL_NO_ERR
     if (ERR_func_error_string(ASYNC_str_functs[0].error) == NULL) {
diff --git a/crypto/async/async_wait.c b/crypto/async/async_wait.c
index b23e43e8c8..0ded29b180 100644
--- a/crypto/async/async_wait.c
+++ b/crypto/async/async_wait.c
@@ -12,12 +12,12 @@
 
 #include <openssl/err.h>
 
-ASYNC_WAIT_CTX *ASYNC_WAIT_CTX_new(void)
+ASYNC_WAIT_CTX * __cdecl ASYNC_WAIT_CTX_new(void)
 {
     return OPENSSL_zalloc(sizeof(ASYNC_WAIT_CTX));
 }
 
-void ASYNC_WAIT_CTX_free(ASYNC_WAIT_CTX *ctx)
+void __cdecl ASYNC_WAIT_CTX_free(ASYNC_WAIT_CTX *ctx)
 {
     struct fd_lookup_st *curr;
     struct fd_lookup_st *next;
@@ -40,7 +40,7 @@ void ASYNC_WAIT_CTX_free(ASYNC_WAIT_CTX *ctx)
 
     OPENSSL_free(ctx);
 }
-int ASYNC_WAIT_CTX_set_wait_fd(ASYNC_WAIT_CTX *ctx, const void *key,
+int __cdecl ASYNC_WAIT_CTX_set_wait_fd(ASYNC_WAIT_CTX *ctx, const void *key,
                                OSSL_ASYNC_FD fd, void *custom_data,
                                void (*cleanup)(ASYNC_WAIT_CTX *, const void *,
                                                OSSL_ASYNC_FD, void *))
@@ -63,7 +63,7 @@ int ASYNC_WAIT_CTX_set_wait_fd(ASYNC_WAIT_CTX *ctx, const void *key,
     return 1;
 }
 
-int ASYNC_WAIT_CTX_get_fd(ASYNC_WAIT_CTX *ctx, const void *key,
+int __cdecl ASYNC_WAIT_CTX_get_fd(ASYNC_WAIT_CTX *ctx, const void *key,
                           OSSL_ASYNC_FD *fd, void **custom_data)
 {
     struct fd_lookup_st *curr;
@@ -85,7 +85,7 @@ int ASYNC_WAIT_CTX_get_fd(ASYNC_WAIT_CTX *ctx, const void *key,
     return 0;
 }
 
-int ASYNC_WAIT_CTX_get_all_fds(ASYNC_WAIT_CTX *ctx, OSSL_ASYNC_FD *fd,
+int __cdecl ASYNC_WAIT_CTX_get_all_fds(ASYNC_WAIT_CTX *ctx, OSSL_ASYNC_FD *fd,
                                size_t *numfds)
 {
     struct fd_lookup_st *curr;
@@ -108,7 +108,7 @@ int ASYNC_WAIT_CTX_get_all_fds(ASYNC_WAIT_CTX *ctx, OSSL_ASYNC_FD *fd,
     return 1;
 }
 
-int ASYNC_WAIT_CTX_get_changed_fds(ASYNC_WAIT_CTX *ctx, OSSL_ASYNC_FD *addfd,
+int __cdecl ASYNC_WAIT_CTX_get_changed_fds(ASYNC_WAIT_CTX *ctx, OSSL_ASYNC_FD *addfd,
                                    size_t *numaddfds, OSSL_ASYNC_FD *delfd,
                                    size_t *numdelfds)
 {
@@ -137,7 +137,7 @@ int ASYNC_WAIT_CTX_get_changed_fds(ASYNC_WAIT_CTX *ctx, OSSL_ASYNC_FD *addfd,
     return 1;
 }
 
-int ASYNC_WAIT_CTX_clear_fd(ASYNC_WAIT_CTX *ctx, const void *key)
+int __cdecl ASYNC_WAIT_CTX_clear_fd(ASYNC_WAIT_CTX *ctx, const void *key)
 {
     struct fd_lookup_st *curr, *prev;
 
diff --git a/crypto/bf/bf_cfb64.c b/crypto/bf/bf_cfb64.c
index ce6e13b5a4..0779520ce2 100644
--- a/crypto/bf/bf_cfb64.c
+++ b/crypto/bf/bf_cfb64.c
@@ -16,7 +16,7 @@
  * used is contained in *num;
  */
 
-void BF_cfb64_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl BF_cfb64_encrypt(const unsigned char *in, unsigned char *out,
                       long length, const BF_KEY *schedule,
                       unsigned char *ivec, int *num, int encrypt)
 {
diff --git a/crypto/bf/bf_ecb.c b/crypto/bf/bf_ecb.c
index dc1becdbe4..c6800ddf33 100644
--- a/crypto/bf/bf_ecb.c
+++ b/crypto/bf/bf_ecb.c
@@ -17,12 +17,12 @@
  * SECURITY WORKSHOP, CAMBRIDGE, U.K., DECEMBER 9-11, 1993)
  */
 
-const char *BF_options(void)
+const char * __cdecl BF_options(void)
 {
     return "blowfish(ptr)";
 }
 
-void BF_ecb_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl BF_ecb_encrypt(const unsigned char *in, unsigned char *out,
                     const BF_KEY *key, int encrypt)
 {
     BF_LONG l, d[2];
diff --git a/crypto/bf/bf_enc.c b/crypto/bf/bf_enc.c
index 67c0d78aec..020ede1d18 100644
--- a/crypto/bf/bf_enc.c
+++ b/crypto/bf/bf_enc.c
@@ -21,7 +21,7 @@
 to modify the code.
 #endif
 
-void BF_encrypt(BF_LONG *data, const BF_KEY *key)
+void __cdecl BF_encrypt(BF_LONG *data, const BF_KEY *key)
 {
     register BF_LONG l, r;
     register const BF_LONG *p, *s;
@@ -60,7 +60,7 @@ void BF_encrypt(BF_LONG *data, const BF_KEY *key)
     data[0] = r & 0xffffffffU;
 }
 
-void BF_decrypt(BF_LONG *data, const BF_KEY *key)
+void __cdecl BF_decrypt(BF_LONG *data, const BF_KEY *key)
 {
     register BF_LONG l, r;
     register const BF_LONG *p, *s;
@@ -99,7 +99,7 @@ void BF_decrypt(BF_LONG *data, const BF_KEY *key)
     data[0] = r & 0xffffffffU;
 }
 
-void BF_cbc_encrypt(const unsigned char *in, unsigned char *out, long length,
+void __cdecl BF_cbc_encrypt(const unsigned char *in, unsigned char *out, long length,
                     const BF_KEY *schedule, unsigned char *ivec, int encrypt)
 {
     register BF_LONG tin0, tin1;
diff --git a/crypto/bf/bf_ofb64.c b/crypto/bf/bf_ofb64.c
index 6418217b30..36c49a5464 100644
--- a/crypto/bf/bf_ofb64.c
+++ b/crypto/bf/bf_ofb64.c
@@ -15,7 +15,7 @@
  * The extra state information to record how much of the 64bit block we have
  * used is contained in *num;
  */
-void BF_ofb64_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl BF_ofb64_encrypt(const unsigned char *in, unsigned char *out,
                       long length, const BF_KEY *schedule,
                       unsigned char *ivec, int *num)
 {
diff --git a/crypto/bf/bf_skey.c b/crypto/bf/bf_skey.c
index a4903a2a71..9855b47e0e 100644
--- a/crypto/bf/bf_skey.c
+++ b/crypto/bf/bf_skey.c
@@ -13,7 +13,7 @@
 #include "bf_locl.h"
 #include "bf_pi.h"
 
-void BF_set_key(BF_KEY *key, int len, const unsigned char *data)
+void __cdecl BF_set_key(BF_KEY *key, int len, const unsigned char *data)
 {
     int i;
     BF_LONG *p, ri, in[2];
diff --git a/crypto/bio/b_addr.c b/crypto/bio/b_addr.c
index dd5008e636..68a654319c 100644
--- a/crypto/bio/b_addr.c
+++ b/crypto/bio/b_addr.c
@@ -35,7 +35,7 @@ static CRYPTO_ONCE bio_lookup_init = CRYPTO_ONCE_STATIC_INIT;
  *
  */
 
-BIO_ADDR *BIO_ADDR_new(void)
+BIO_ADDR * __cdecl BIO_ADDR_new(void)
 {
     BIO_ADDR *ret = OPENSSL_zalloc(sizeof(*ret));
 
@@ -48,12 +48,12 @@ BIO_ADDR *BIO_ADDR_new(void)
     return ret;
 }
 
-void BIO_ADDR_free(BIO_ADDR *ap)
+void __cdecl BIO_ADDR_free(BIO_ADDR *ap)
 {
     OPENSSL_free(ap);
 }
 
-void BIO_ADDR_clear(BIO_ADDR *ap)
+void __cdecl BIO_ADDR_clear(BIO_ADDR *ap)
 {
     memset(ap, 0, sizeof(*ap));
     ap->sa.sa_family = AF_UNSPEC;
@@ -85,7 +85,7 @@ int BIO_ADDR_make(BIO_ADDR *ap, const struct sockaddr *sa)
     return 0;
 }
 
-int BIO_ADDR_rawmake(BIO_ADDR *ap, int family,
+int __cdecl BIO_ADDR_rawmake(BIO_ADDR *ap, int family,
                      const void *where, size_t wherelen,
                      unsigned short port)
 {
@@ -123,12 +123,12 @@ int BIO_ADDR_rawmake(BIO_ADDR *ap, int family,
     return 0;
 }
 
-int BIO_ADDR_family(const BIO_ADDR *ap)
+int __cdecl BIO_ADDR_family(const BIO_ADDR *ap)
 {
     return ap->sa.sa_family;
 }
 
-int BIO_ADDR_rawaddress(const BIO_ADDR *ap, void *p, size_t *l)
+int __cdecl BIO_ADDR_rawaddress(const BIO_ADDR *ap, void *p, size_t *l)
 {
     size_t len = 0;
     const void *addrptr = NULL;
@@ -162,7 +162,7 @@ int BIO_ADDR_rawaddress(const BIO_ADDR *ap, void *p, size_t *l)
     return 1;
 }
 
-unsigned short BIO_ADDR_rawport(const BIO_ADDR *ap)
+unsigned short __cdecl BIO_ADDR_rawport(const BIO_ADDR *ap)
 {
     if (ap->sa.sa_family == AF_INET)
         return ap->s_in.sin_port;
@@ -261,7 +261,7 @@ static int addr_strings(const BIO_ADDR *ap, int numeric,
     return 1;
 }
 
-char *BIO_ADDR_hostname_string(const BIO_ADDR *ap, int numeric)
+char * __cdecl BIO_ADDR_hostname_string(const BIO_ADDR *ap, int numeric)
 {
     char *hostname = NULL;
 
@@ -271,7 +271,7 @@ char *BIO_ADDR_hostname_string(const BIO_ADDR *ap, int numeric)
     return NULL;
 }
 
-char *BIO_ADDR_service_string(const BIO_ADDR *ap, int numeric)
+char * __cdecl BIO_ADDR_service_string(const BIO_ADDR *ap, int numeric)
 {
     char *service = NULL;
 
@@ -281,7 +281,7 @@ char *BIO_ADDR_service_string(const BIO_ADDR *ap, int numeric)
     return NULL;
 }
 
-char *BIO_ADDR_path_string(const BIO_ADDR *ap)
+char * __cdecl BIO_ADDR_path_string(const BIO_ADDR *ap)
 {
 #ifdef AF_UNIX
     if (ap->sa.sa_family == AF_UNIX)
@@ -338,28 +338,28 @@ socklen_t BIO_ADDR_sockaddr_size(const BIO_ADDR *ap)
  *
  */
 
-const BIO_ADDRINFO *BIO_ADDRINFO_next(const BIO_ADDRINFO *bai)
+const BIO_ADDRINFO * __cdecl BIO_ADDRINFO_next(const BIO_ADDRINFO *bai)
 {
     if (bai != NULL)
         return bai->bai_next;
     return NULL;
 }
 
-int BIO_ADDRINFO_family(const BIO_ADDRINFO *bai)
+int __cdecl BIO_ADDRINFO_family(const BIO_ADDRINFO *bai)
 {
     if (bai != NULL)
         return bai->bai_family;
     return 0;
 }
 
-int BIO_ADDRINFO_socktype(const BIO_ADDRINFO *bai)
+int __cdecl BIO_ADDRINFO_socktype(const BIO_ADDRINFO *bai)
 {
     if (bai != NULL)
         return bai->bai_socktype;
     return 0;
 }
 
-int BIO_ADDRINFO_protocol(const BIO_ADDRINFO *bai)
+int __cdecl BIO_ADDRINFO_protocol(const BIO_ADDRINFO *bai)
 {
     if (bai != NULL) {
         if (bai->bai_protocol != 0)
@@ -404,14 +404,14 @@ const struct sockaddr *BIO_ADDRINFO_sockaddr(const BIO_ADDRINFO *bai)
     return NULL;
 }
 
-const BIO_ADDR *BIO_ADDRINFO_address(const BIO_ADDRINFO *bai)
+const BIO_ADDR * __cdecl BIO_ADDRINFO_address(const BIO_ADDRINFO *bai)
 {
     if (bai != NULL)
         return (BIO_ADDR *)bai->bai_addr;
     return NULL;
 }
 
-void BIO_ADDRINFO_free(BIO_ADDRINFO *bai)
+void __cdecl BIO_ADDRINFO_free(BIO_ADDRINFO *bai)
 {
     if (bai == NULL)
         return;
@@ -464,7 +464,7 @@ void BIO_ADDRINFO_free(BIO_ADDRINFO *bai)
  * service              => *host untouched, *service = "service"
  *
  */
-int BIO_parse_hostserv(const char *hostserv, char **host, char **service,
+int __cdecl BIO_parse_hostserv(const char *hostserv, char **host, char **service,
                        enum BIO_hostserv_priorities hostserv_prio)
 {
     const char *h = NULL; size_t hl = 0;
@@ -609,7 +609,7 @@ DEFINE_RUN_ONCE_STATIC(do_bio_lookup_init)
     return bio_lookup_lock != NULL;
 }
 
-int BIO_lookup(const char *host, const char *service,
+int __cdecl BIO_lookup(const char *host, const char *service,
                enum BIO_lookup_type lookup_type,
                int family, int socktype, BIO_ADDRINFO **res)
 {
@@ -638,7 +638,7 @@ int BIO_lookup(const char *host, const char *service,
  *
  * The return value is 1 on success or 0 in case of error.
  */
-int BIO_lookup_ex(const char *host, const char *service, int lookup_type,
+int __cdecl BIO_lookup_ex(const char *host, const char *service, int lookup_type,
                   int family, int socktype, int protocol, BIO_ADDRINFO **res)
 {
     int ret = 0;                 /* Assume failure */
diff --git a/crypto/bio/b_dump.c b/crypto/bio/b_dump.c
index 0d06414e7d..b0d1c31ea0 100644
--- a/crypto/bio/b_dump.c
+++ b/crypto/bio/b_dump.c
@@ -19,13 +19,13 @@
 
 #define SPACE(buf, pos, n)   (sizeof(buf) - (pos) > (n))
 
-int BIO_dump_cb(int (*cb) (const void *data, size_t len, void *u),
+int __cdecl BIO_dump_cb(int (*cb) (const void *data, size_t len, void *u),
                 void *u, const char *s, int len)
 {
     return BIO_dump_indent_cb(cb, u, s, len, 0);
 }
 
-int BIO_dump_indent_cb(int (*cb) (const void *data, size_t len, void *u),
+int __cdecl BIO_dump_indent_cb(int (*cb) (const void *data, size_t len, void *u),
                        void *u, const char *s, int len, int indent)
 {
     int ret = 0;
@@ -96,12 +96,12 @@ static int write_fp(const void *data, size_t len, void *fp)
     return UP_fwrite(data, len, 1, fp);
 }
 
-int BIO_dump_fp(FILE *fp, const char *s, int len)
+int __cdecl BIO_dump_fp(FILE *fp, const char *s, int len)
 {
     return BIO_dump_cb(write_fp, fp, s, len);
 }
 
-int BIO_dump_indent_fp(FILE *fp, const char *s, int len, int indent)
+int __cdecl BIO_dump_indent_fp(FILE *fp, const char *s, int len, int indent)
 {
     return BIO_dump_indent_cb(write_fp, fp, s, len, indent);
 }
@@ -112,17 +112,17 @@ static int write_bio(const void *data, size_t len, void *bp)
     return BIO_write((BIO *)bp, (const char *)data, len);
 }
 
-int BIO_dump(BIO *bp, const char *s, int len)
+int __cdecl BIO_dump(BIO *bp, const char *s, int len)
 {
     return BIO_dump_cb(write_bio, bp, s, len);
 }
 
-int BIO_dump_indent(BIO *bp, const char *s, int len, int indent)
+int __cdecl BIO_dump_indent(BIO *bp, const char *s, int len, int indent)
 {
     return BIO_dump_indent_cb(write_bio, bp, s, len, indent);
 }
 
-int BIO_hex_string(BIO *out, int indent, int width, unsigned char *data,
+int __cdecl BIO_hex_string(BIO *out, int indent, int width, unsigned char *data,
                    int datalen)
 {
     int i, j = 0;
diff --git a/crypto/bio/b_print.c b/crypto/bio/b_print.c
index 9e907fcaa7..e5d4c1b52f 100644
--- a/crypto/bio/b_print.c
+++ b/crypto/bio/b_print.c
@@ -850,7 +850,7 @@ doapr_outch(char **sbuffer,
 
 /***************************************************************************/
 
-int BIO_printf(BIO *bio, const char *format, ...)
+int __cdecl BIO_printf(BIO *bio, const char *format, ...)
 {
     va_list args;
     int ret;
@@ -863,7 +863,7 @@ int BIO_printf(BIO *bio, const char *format, ...)
     return ret;
 }
 
-int BIO_vprintf(BIO *bio, const char *format, va_list args)
+int __cdecl BIO_vprintf(BIO *bio, const char *format, va_list args)
 {
     int ret;
     size_t retlen;
@@ -896,7 +896,7 @@ int BIO_vprintf(BIO *bio, const char *format, va_list args)
  * closely related to BIO_printf, and we need *some* name prefix ... (XXX the
  * function should be renamed, but to what?)
  */
-int BIO_snprintf(char *buf, size_t n, const char *format, ...)
+int __cdecl BIO_snprintf(char *buf, size_t n, const char *format, ...)
 {
     va_list args;
     int ret;
@@ -909,7 +909,7 @@ int BIO_snprintf(char *buf, size_t n, const char *format, ...)
     return ret;
 }
 
-int BIO_vsnprintf(char *buf, size_t n, const char *format, va_list args)
+int __cdecl BIO_vsnprintf(char *buf, size_t n, const char *format, va_list args)
 {
     size_t retlen;
     int truncated;
diff --git a/crypto/bio/b_sock.c b/crypto/bio/b_sock.c
index e7a24d02cb..ffa98b8041 100644
--- a/crypto/bio/b_sock.c
+++ b/crypto/bio/b_sock.c
@@ -85,7 +85,7 @@ int BIO_get_port(const char *str, unsigned short *port_ptr)
 }
 # endif
 
-int BIO_sock_error(int sock)
+int __cdecl BIO_sock_error(int sock)
 {
     int j = 0, i;
     socklen_t size = sizeof(j);
@@ -114,7 +114,7 @@ struct hostent *BIO_gethostbyname(const char *name)
 }
 # endif
 
-int BIO_sock_init(void)
+int __cdecl BIO_sock_init(void)
 {
 # ifdef OPENSSL_SYS_WINDOWS
     static struct WSAData wsa_state;
@@ -158,7 +158,7 @@ void bio_sock_cleanup_int(void)
 # endif
 }
 
-int BIO_socket_ioctl(int fd, long type, void *arg)
+int __cdecl BIO_socket_ioctl(int fd, long type, void *arg)
 {
     int i;
 
@@ -274,7 +274,7 @@ int BIO_accept(int sock, char **ip_port)
 }
 # endif
 
-int BIO_set_tcp_ndelay(int s, int on)
+int __cdecl BIO_set_tcp_ndelay(int s, int on)
 {
     int ret = 0;
 # if defined(TCP_NODELAY) && (defined(IPPROTO_TCP) || defined(SOL_TCP))
@@ -293,7 +293,7 @@ int BIO_set_tcp_ndelay(int s, int on)
     return (ret == 0);
 }
 
-int BIO_socket_nbio(int s, int mode)
+int __cdecl BIO_socket_nbio(int s, int mode)
 {
     int ret = -1;
     int l;
@@ -337,7 +337,7 @@ int BIO_socket_nbio(int s, int mode)
     return (ret == 0);
 }
 
-int BIO_sock_info(int sock,
+int __cdecl BIO_sock_info(int sock,
                   enum BIO_sock_info_type type, union BIO_sock_info_u *info)
 {
     switch (type) {
diff --git a/crypto/bio/b_sock2.c b/crypto/bio/b_sock2.c
index 5d82ab22dc..9ddc63b3e4 100644
--- a/crypto/bio/b_sock2.c
+++ b/crypto/bio/b_sock2.c
@@ -37,7 +37,7 @@
  * Returns the file descriptor on success or INVALID_SOCKET on failure.  On
  * failure errno is set, and a status is added to the OpenSSL error stack.
  */
-int BIO_socket(int domain, int socktype, int protocol, int options)
+int __cdecl BIO_socket(int domain, int socktype, int protocol, int options)
 {
     int sock = -1;
 
@@ -74,7 +74,7 @@ int BIO_socket(int domain, int socktype, int protocol, int options)
  * Returns 1 on success or 0 on failure.  On failure errno is set
  * and an error status is added to the OpenSSL error stack.
  */
-int BIO_connect(int sock, const BIO_ADDR *addr, int options)
+int __cdecl BIO_connect(int sock, const BIO_ADDR *addr, int options)
 {
     const int on = 1;
 
@@ -131,7 +131,7 @@ int BIO_connect(int sock, const BIO_ADDR *addr, int options)
  * you set to BIO_SOCK_REUSEADDR option it will try to reuse the port anyway.
  * It's recommended that you use this.
  */
-int BIO_bind(int sock, const BIO_ADDR *addr, int options)
+int __cdecl BIO_bind(int sock, const BIO_ADDR *addr, int options)
 {
 # ifndef OPENSSL_SYS_WINDOWS
     int on = 1;
@@ -203,7 +203,7 @@ int BIO_bind(int sock, const BIO_ADDR *addr, int options)
  * you set to BIO_SOCK_REUSEADDR option it will try to reuse the port anyway.
  * It's recommended that you use this.
  */
-int BIO_listen(int sock, const BIO_ADDR *addr, int options)
+int __cdecl BIO_listen(int sock, const BIO_ADDR *addr, int options)
 {
     int on = 1;
     int socktype;
@@ -278,7 +278,7 @@ int BIO_listen(int sock, const BIO_ADDR *addr, int options)
  * @options: BIO socket options, applied on the accepted socket.
  *
  */
-int BIO_accept_ex(int accept_sock, BIO_ADDR *addr_, int options)
+int __cdecl BIO_accept_ex(int accept_sock, BIO_ADDR *addr_, int options)
 {
     socklen_t len;
     int accepted_sock;
@@ -308,7 +308,7 @@ int BIO_accept_ex(int accept_sock, BIO_ADDR *addr_, int options)
  * BIO_closesocket - Close a socket
  * @sock: the socket to close
  */
-int BIO_closesocket(int sock)
+int __cdecl BIO_closesocket(int sock)
 {
     if (closesocket(sock) < 0)
         return 0;
diff --git a/crypto/bio/bf_buff.c b/crypto/bio/bf_buff.c
index 8e87a629b8..24081bc8ee 100644
--- a/crypto/bio/bf_buff.c
+++ b/crypto/bio/bf_buff.c
@@ -39,7 +39,7 @@ static const BIO_METHOD methods_buffer = {
     buffer_callback_ctrl,
 };
 
-const BIO_METHOD *BIO_f_buffer(void)
+const BIO_METHOD * __cdecl BIO_f_buffer(void)
 {
     return &methods_buffer;
 }
diff --git a/crypto/bio/bf_lbuf.c b/crypto/bio/bf_lbuf.c
index 194c7b8af7..dd2398aefe 100644
--- a/crypto/bio/bf_lbuf.c
+++ b/crypto/bio/bf_lbuf.c
@@ -44,7 +44,7 @@ static const BIO_METHOD methods_linebuffer = {
     linebuffer_callback_ctrl,
 };
 
-const BIO_METHOD *BIO_f_linebuffer(void)
+const BIO_METHOD * __cdecl BIO_f_linebuffer(void)
 {
     return &methods_linebuffer;
 }
diff --git a/crypto/bio/bf_nbio.c b/crypto/bio/bf_nbio.c
index 4bc84eeba6..ed299559eb 100644
--- a/crypto/bio/bf_nbio.c
+++ b/crypto/bio/bf_nbio.c
@@ -48,7 +48,7 @@ static const BIO_METHOD methods_nbiof = {
     nbiof_callback_ctrl,
 };
 
-const BIO_METHOD *BIO_f_nbio_test(void)
+const BIO_METHOD * __cdecl BIO_f_nbio_test(void)
 {
     return &methods_nbiof;
 }
diff --git a/crypto/bio/bf_null.c b/crypto/bio/bf_null.c
index 613fb2e058..0091b4aac5 100644
--- a/crypto/bio/bf_null.c
+++ b/crypto/bio/bf_null.c
@@ -39,7 +39,7 @@ static const BIO_METHOD methods_nullf = {
     nullf_callback_ctrl,
 };
 
-const BIO_METHOD *BIO_f_null(void)
+const BIO_METHOD * __cdecl BIO_f_null(void)
 {
     return &methods_nullf;
 }
diff --git a/crypto/bio/bio_cb.c b/crypto/bio/bio_cb.c
index 1154c233af..26c0a0d41b 100644
--- a/crypto/bio/bio_cb.c
+++ b/crypto/bio/bio_cb.c
@@ -14,7 +14,7 @@
 #include "internal/cryptlib.h"
 #include <openssl/err.h>
 
-long BIO_debug_callback(BIO *bio, int cmd, const char *argp,
+long __cdecl BIO_debug_callback(BIO *bio, int cmd, const char *argp,
                         int argi, long argl, long ret)
 {
     BIO *b;
diff --git a/crypto/bio/bio_err.c b/crypto/bio/bio_err.c
index 7aa9dabb29..15986e095d 100644
--- a/crypto/bio/bio_err.c
+++ b/crypto/bio/bio_err.c
@@ -133,7 +133,7 @@ static const ERR_STRING_DATA BIO_str_reasons[] = {
 
 #endif
 
-int ERR_load_BIO_strings(void)
+int __cdecl ERR_load_BIO_strings(void)
 {
 #ifndef OPENSSL_NO_ERR
     if (ERR_func_error_string(BIO_str_functs[0].error) == NULL) {
diff --git a/crypto/bio/bio_lib.c b/crypto/bio/bio_lib.c
index ca375b911a..7ecd31a1ad 100644
--- a/crypto/bio/bio_lib.c
+++ b/crypto/bio/bio_lib.c
@@ -68,7 +68,7 @@ static long bio_call_callback(BIO *b, int oper, const char *argp, size_t len,
     return ret;
 }
 
-BIO *BIO_new(const BIO_METHOD *method)
+BIO * __cdecl BIO_new(const BIO_METHOD *method)
 {
     BIO *bio = OPENSSL_zalloc(sizeof(*bio));
 
@@ -107,7 +107,7 @@ err:
     return NULL;
 }
 
-int BIO_free(BIO *a)
+int __cdecl BIO_free(BIO *a)
 {
     int ret;
 
@@ -140,42 +140,42 @@ int BIO_free(BIO *a)
     return 1;
 }
 
-void BIO_set_data(BIO *a, void *ptr)
+void __cdecl BIO_set_data(BIO *a, void *ptr)
 {
     a->ptr = ptr;
 }
 
-void *BIO_get_data(BIO *a)
+void * __cdecl BIO_get_data(BIO *a)
 {
     return a->ptr;
 }
 
-void BIO_set_init(BIO *a, int init)
+void __cdecl BIO_set_init(BIO *a, int init)
 {
     a->init = init;
 }
 
-int BIO_get_init(BIO *a)
+int __cdecl BIO_get_init(BIO *a)
 {
     return a->init;
 }
 
-void BIO_set_shutdown(BIO *a, int shut)
+void __cdecl BIO_set_shutdown(BIO *a, int shut)
 {
     a->shutdown = shut;
 }
 
-int BIO_get_shutdown(BIO *a)
+int __cdecl BIO_get_shutdown(BIO *a)
 {
     return a->shutdown;
 }
 
-void BIO_vfree(BIO *a)
+void __cdecl BIO_vfree(BIO *a)
 {
     BIO_free(a);
 }
 
-int BIO_up_ref(BIO *a)
+int __cdecl BIO_up_ref(BIO *a)
 {
     int i;
 
@@ -187,57 +187,57 @@ int BIO_up_ref(BIO *a)
     return ((i > 1) ? 1 : 0);
 }
 
-void BIO_clear_flags(BIO *b, int flags)
+void __cdecl BIO_clear_flags(BIO *b, int flags)
 {
     b->flags &= ~flags;
 }
 
-int BIO_test_flags(const BIO *b, int flags)
+int __cdecl BIO_test_flags(const BIO *b, int flags)
 {
     return (b->flags & flags);
 }
 
-void BIO_set_flags(BIO *b, int flags)
+void __cdecl BIO_set_flags(BIO *b, int flags)
 {
     b->flags |= flags;
 }
 
-BIO_callback_fn BIO_get_callback(const BIO *b)
+BIO_callback_fn __cdecl BIO_get_callback(const BIO *b)
 {
     return b->callback;
 }
 
-void BIO_set_callback(BIO *b, BIO_callback_fn cb)
+void __cdecl BIO_set_callback(BIO *b, BIO_callback_fn cb)
 {
     b->callback = cb;
 }
 
-BIO_callback_fn_ex BIO_get_callback_ex(const BIO *b)
+BIO_callback_fn_ex __cdecl BIO_get_callback_ex(const BIO *b)
 {
     return b->callback_ex;
 }
 
-void BIO_set_callback_ex(BIO *b, BIO_callback_fn_ex cb)
+void __cdecl BIO_set_callback_ex(BIO *b, BIO_callback_fn_ex cb)
 {
     b->callback_ex = cb;
 }
 
-void BIO_set_callback_arg(BIO *b, char *arg)
+void __cdecl BIO_set_callback_arg(BIO *b, char *arg)
 {
     b->cb_arg = arg;
 }
 
-char *BIO_get_callback_arg(const BIO *b)
+char * __cdecl BIO_get_callback_arg(const BIO *b)
 {
     return b->cb_arg;
 }
 
-const char *BIO_method_name(const BIO *b)
+const char * __cdecl BIO_method_name(const BIO *b)
 {
     return b->method->name;
 }
 
-int BIO_method_type(const BIO *b)
+int __cdecl BIO_method_type(const BIO *b)
 {
     return b->method->type;
 }
@@ -285,7 +285,7 @@ static int bio_read_intern(BIO *b, void *data, size_t dlen, size_t *readbytes)
     return ret;
 }
 
-int BIO_read(BIO *b, void *data, int dlen)
+int __cdecl BIO_read(BIO *b, void *data, int dlen)
 {
     size_t readbytes;
     int ret;
@@ -303,7 +303,7 @@ int BIO_read(BIO *b, void *data, int dlen)
     return ret;
 }
 
-int BIO_read_ex(BIO *b, void *data, size_t dlen, size_t *readbytes)
+int __cdecl BIO_read_ex(BIO *b, void *data, size_t dlen, size_t *readbytes)
 {
     int ret;
 
@@ -352,7 +352,7 @@ static int bio_write_intern(BIO *b, const void *data, size_t dlen,
     return ret;
 }
 
-int BIO_write(BIO *b, const void *data, int dlen)
+int __cdecl BIO_write(BIO *b, const void *data, int dlen)
 {
     size_t written;
     int ret;
@@ -370,7 +370,7 @@ int BIO_write(BIO *b, const void *data, int dlen)
     return ret;
 }
 
-int BIO_write_ex(BIO *b, const void *data, size_t dlen, size_t *written)
+int __cdecl BIO_write_ex(BIO *b, const void *data, size_t dlen, size_t *written)
 {
     int ret;
 
@@ -384,7 +384,7 @@ int BIO_write_ex(BIO *b, const void *data, size_t dlen, size_t *written)
     return ret;
 }
 
-int BIO_puts(BIO *b, const char *buf)
+int __cdecl BIO_puts(BIO *b, const char *buf)
 {
     int ret;
     size_t written = 0;
@@ -429,7 +429,7 @@ int BIO_puts(BIO *b, const char *buf)
     return ret;
 }
 
-int BIO_gets(BIO *b, char *buf, int size)
+int __cdecl BIO_gets(BIO *b, char *buf, int size)
 {
     int ret;
     size_t readbytes = 0;
@@ -477,7 +477,7 @@ int BIO_gets(BIO *b, char *buf, int size)
     return ret;
 }
 
-int BIO_indent(BIO *b, int indent, int max)
+int __cdecl BIO_indent(BIO *b, int indent, int max)
 {
     if (indent < 0)
         indent = 0;
@@ -489,7 +489,7 @@ int BIO_indent(BIO *b, int indent, int max)
     return 1;
 }
 
-long BIO_int_ctrl(BIO *b, int cmd, long larg, int iarg)
+long __cdecl BIO_int_ctrl(BIO *b, int cmd, long larg, int iarg)
 {
     int i;
 
@@ -497,7 +497,7 @@ long BIO_int_ctrl(BIO *b, int cmd, long larg, int iarg)
     return BIO_ctrl(b, cmd, larg, (char *)&i);
 }
 
-void *BIO_ptr_ctrl(BIO *b, int cmd, long larg)
+void * __cdecl BIO_ptr_ctrl(BIO *b, int cmd, long larg)
 {
     void *p = NULL;
 
@@ -507,7 +507,7 @@ void *BIO_ptr_ctrl(BIO *b, int cmd, long larg)
         return p;
 }
 
-long BIO_ctrl(BIO *b, int cmd, long larg, void *parg)
+long __cdecl BIO_ctrl(BIO *b, int cmd, long larg, void *parg)
 {
     long ret;
 
@@ -534,7 +534,7 @@ long BIO_ctrl(BIO *b, int cmd, long larg, void *parg)
     return ret;
 }
 
-long BIO_callback_ctrl(BIO *b, int cmd, BIO_info_cb *fp)
+long __cdecl BIO_callback_ctrl(BIO *b, int cmd, BIO_info_cb *fp)
 {
     long ret;
 
@@ -568,18 +568,18 @@ long BIO_callback_ctrl(BIO *b, int cmd, BIO_info_cb *fp)
  * do; but those macros have inappropriate return type, and for interfacing
  * from other programming languages, C macros aren't much of a help anyway.
  */
-size_t BIO_ctrl_pending(BIO *bio)
+size_t __cdecl BIO_ctrl_pending(BIO *bio)
 {
     return BIO_ctrl(bio, BIO_CTRL_PENDING, 0, NULL);
 }
 
-size_t BIO_ctrl_wpending(BIO *bio)
+size_t __cdecl BIO_ctrl_wpending(BIO *bio)
 {
     return BIO_ctrl(bio, BIO_CTRL_WPENDING, 0, NULL);
 }
 
 /* put the 'bio' on the end of b's list of operators */
-BIO *BIO_push(BIO *b, BIO *bio)
+BIO * __cdecl BIO_push(BIO *b, BIO *bio)
 {
     BIO *lb;
 
@@ -597,7 +597,7 @@ BIO *BIO_push(BIO *b, BIO *bio)
 }
 
 /* Remove the first and return the rest */
-BIO *BIO_pop(BIO *b)
+BIO * __cdecl BIO_pop(BIO *b)
 {
     BIO *ret;
 
@@ -617,7 +617,7 @@ BIO *BIO_pop(BIO *b)
     return ret;
 }
 
-BIO *BIO_get_retry_BIO(BIO *bio, int *reason)
+BIO * __cdecl BIO_get_retry_BIO(BIO *bio, int *reason)
 {
     BIO *b, *last;
 
@@ -635,17 +635,17 @@ BIO *BIO_get_retry_BIO(BIO *bio, int *reason)
     return last;
 }
 
-int BIO_get_retry_reason(BIO *bio)
+int __cdecl BIO_get_retry_reason(BIO *bio)
 {
     return bio->retry_reason;
 }
 
-void BIO_set_retry_reason(BIO *bio, int reason)
+void __cdecl BIO_set_retry_reason(BIO *bio, int reason)
 {
     bio->retry_reason = reason;
 }
 
-BIO *BIO_find_type(BIO *bio, int type)
+BIO * __cdecl BIO_find_type(BIO *bio, int type)
 {
     int mt, mask;
 
@@ -667,19 +667,19 @@ BIO *BIO_find_type(BIO *bio, int type)
     return NULL;
 }
 
-BIO *BIO_next(BIO *b)
+BIO * __cdecl BIO_next(BIO *b)
 {
     if (b == NULL)
         return NULL;
     return b->next_bio;
 }
 
-void BIO_set_next(BIO *b, BIO *next)
+void __cdecl BIO_set_next(BIO *b, BIO *next)
 {
     b->next_bio = next;
 }
 
-void BIO_free_all(BIO *bio)
+void __cdecl BIO_free_all(BIO *bio)
 {
     BIO *b;
     int ref;
@@ -695,7 +695,7 @@ void BIO_free_all(BIO *bio)
     }
 }
 
-BIO *BIO_dup_chain(BIO *in)
+BIO * __cdecl BIO_dup_chain(BIO *in)
 {
     BIO *ret = NULL, *eoc = NULL, *bio, *new_bio;
 
@@ -739,30 +739,30 @@ BIO *BIO_dup_chain(BIO *in)
     return NULL;
 }
 
-void BIO_copy_next_retry(BIO *b)
+void __cdecl BIO_copy_next_retry(BIO *b)
 {
     BIO_set_flags(b, BIO_get_retry_flags(b->next_bio));
     b->retry_reason = b->next_bio->retry_reason;
 }
 
-int BIO_set_ex_data(BIO *bio, int idx, void *data)
+int __cdecl BIO_set_ex_data(BIO *bio, int idx, void *data)
 {
     return CRYPTO_set_ex_data(&(bio->ex_data), idx, data);
 }
 
-void *BIO_get_ex_data(BIO *bio, int idx)
+void * __cdecl BIO_get_ex_data(BIO *bio, int idx)
 {
     return CRYPTO_get_ex_data(&(bio->ex_data), idx);
 }
 
-uint64_t BIO_number_read(BIO *bio)
+uint64_t __cdecl BIO_number_read(BIO *bio)
 {
     if (bio)
         return bio->num_read;
     return 0;
 }
 
-uint64_t BIO_number_written(BIO *bio)
+uint64_t __cdecl BIO_number_written(BIO *bio)
 {
     if (bio)
         return bio->num_write;
diff --git a/crypto/bio/bio_meth.c b/crypto/bio/bio_meth.c
index 493ff63a90..6018cbd424 100644
--- a/crypto/bio/bio_meth.c
+++ b/crypto/bio/bio_meth.c
@@ -19,7 +19,7 @@ DEFINE_RUN_ONCE_STATIC(do_bio_type_init)
     return bio_type_lock != NULL;
 }
 
-int BIO_get_new_index(void)
+int __cdecl BIO_get_new_index(void)
 {
     static CRYPTO_REF_COUNT bio_count = BIO_TYPE_START;
     int newval;
@@ -33,7 +33,7 @@ int BIO_get_new_index(void)
     return newval;
 }
 
-BIO_METHOD *BIO_meth_new(int type, const char *name)
+BIO_METHOD * __cdecl BIO_meth_new(int type, const char *name)
 {
     BIO_METHOD *biom = OPENSSL_zalloc(sizeof(BIO_METHOD));
 
@@ -47,7 +47,7 @@ BIO_METHOD *BIO_meth_new(int type, const char *name)
     return biom;
 }
 
-void BIO_meth_free(BIO_METHOD *biom)
+void __cdecl BIO_meth_free(BIO_METHOD *biom)
 {
     if (biom != NULL) {
         OPENSSL_free(biom->name);
@@ -55,12 +55,12 @@ void BIO_meth_free(BIO_METHOD *biom)
     }
 }
 
-int (*BIO_meth_get_write(const BIO_METHOD *biom)) (BIO *, const char *, int)
+int (* __cdecl BIO_meth_get_write(const BIO_METHOD *biom)) (BIO *, const char *, int)
 {
     return biom->bwrite_old;
 }
 
-int (*BIO_meth_get_write_ex(const BIO_METHOD *biom)) (BIO *, const char *, size_t,
+int (* __cdecl BIO_meth_get_write_ex(const BIO_METHOD *biom)) (BIO *, const char *, size_t,
                                                 size_t *)
 {
     return biom->bwrite;
@@ -86,7 +86,7 @@ int bwrite_conv(BIO *bio, const char *data, size_t datal, size_t *written)
     return 1;
 }
 
-int BIO_meth_set_write(BIO_METHOD *biom,
+int __cdecl BIO_meth_set_write(BIO_METHOD *biom,
                        int (*bwrite) (BIO *, const char *, int))
 {
     biom->bwrite_old = bwrite;
@@ -94,7 +94,7 @@ int BIO_meth_set_write(BIO_METHOD *biom,
     return 1;
 }
 
-int BIO_meth_set_write_ex(BIO_METHOD *biom,
+int __cdecl BIO_meth_set_write_ex(BIO_METHOD *biom,
                        int (*bwrite) (BIO *, const char *, size_t, size_t *))
 {
     biom->bwrite_old = NULL;
@@ -102,12 +102,12 @@ int BIO_meth_set_write_ex(BIO_METHOD *biom,
     return 1;
 }
 
-int (*BIO_meth_get_read(const BIO_METHOD *biom)) (BIO *, char *, int)
+int (* __cdecl BIO_meth_get_read(const BIO_METHOD *biom)) (BIO *, char *, int)
 {
     return biom->bread_old;
 }
 
-int (*BIO_meth_get_read_ex(const BIO_METHOD *biom)) (BIO *, char *, size_t, size_t *)
+int (* __cdecl BIO_meth_get_read_ex(const BIO_METHOD *biom)) (BIO *, char *, size_t, size_t *)
 {
     return biom->bread;
 }
@@ -132,7 +132,7 @@ int bread_conv(BIO *bio, char *data, size_t datal, size_t *readbytes)
     return 1;
 }
 
-int BIO_meth_set_read(BIO_METHOD *biom,
+int __cdecl BIO_meth_set_read(BIO_METHOD *biom,
                       int (*bread) (BIO *, char *, int))
 {
     biom->bread_old = bread;
@@ -140,7 +140,7 @@ int BIO_meth_set_read(BIO_METHOD *biom,
     return 1;
 }
 
-int BIO_meth_set_read_ex(BIO_METHOD *biom,
+int __cdecl BIO_meth_set_read_ex(BIO_METHOD *biom,
                          int (*bread) (BIO *, char *, size_t, size_t *))
 {
     biom->bread_old = NULL;
@@ -148,70 +148,70 @@ int BIO_meth_set_read_ex(BIO_METHOD *biom,
     return 1;
 }
 
-int (*BIO_meth_get_puts(const BIO_METHOD *biom)) (BIO *, const char *)
+int (* __cdecl BIO_meth_get_puts(const BIO_METHOD *biom)) (BIO *, const char *)
 {
     return biom->bputs;
 }
 
-int BIO_meth_set_puts(BIO_METHOD *biom,
+int __cdecl BIO_meth_set_puts(BIO_METHOD *biom,
                       int (*bputs) (BIO *, const char *))
 {
     biom->bputs = bputs;
     return 1;
 }
 
-int (*BIO_meth_get_gets(const BIO_METHOD *biom)) (BIO *, char *, int)
+int (* __cdecl BIO_meth_get_gets(const BIO_METHOD *biom)) (BIO *, char *, int)
 {
     return biom->bgets;
 }
 
-int BIO_meth_set_gets(BIO_METHOD *biom,
+int __cdecl BIO_meth_set_gets(BIO_METHOD *biom,
                       int (*bgets) (BIO *, char *, int))
 {
     biom->bgets = bgets;
     return 1;
 }
 
-long (*BIO_meth_get_ctrl(const BIO_METHOD *biom)) (BIO *, int, long, void *)
+long (* __cdecl BIO_meth_get_ctrl(const BIO_METHOD *biom)) (BIO *, int, long, void *)
 {
     return biom->ctrl;
 }
 
-int BIO_meth_set_ctrl(BIO_METHOD *biom,
+int __cdecl BIO_meth_set_ctrl(BIO_METHOD *biom,
                       long (*ctrl) (BIO *, int, long, void *))
 {
     biom->ctrl = ctrl;
     return 1;
 }
 
-int (*BIO_meth_get_create(const BIO_METHOD *biom)) (BIO *)
+int (* __cdecl BIO_meth_get_create(const BIO_METHOD *biom)) (BIO *)
 {
     return biom->create;
 }
 
-int BIO_meth_set_create(BIO_METHOD *biom, int (*create) (BIO *))
+int __cdecl BIO_meth_set_create(BIO_METHOD *biom, int (*create) (BIO *))
 {
     biom->create = create;
     return 1;
 }
 
-int (*BIO_meth_get_destroy(const BIO_METHOD *biom)) (BIO *)
+int (* __cdecl BIO_meth_get_destroy(const BIO_METHOD *biom)) (BIO *)
 {
     return biom->destroy;
 }
 
-int BIO_meth_set_destroy(BIO_METHOD *biom, int (*destroy) (BIO *))
+int __cdecl BIO_meth_set_destroy(BIO_METHOD *biom, int (*destroy) (BIO *))
 {
     biom->destroy = destroy;
     return 1;
 }
 
-long (*BIO_meth_get_callback_ctrl(const BIO_METHOD *biom)) (BIO *, int, BIO_info_cb *)
+long (* __cdecl BIO_meth_get_callback_ctrl(const BIO_METHOD *biom)) (BIO *, int, BIO_info_cb *)
 {
     return biom->callback_ctrl;
 }
 
-int BIO_meth_set_callback_ctrl(BIO_METHOD *biom,
+int __cdecl BIO_meth_set_callback_ctrl(BIO_METHOD *biom,
                                long (*callback_ctrl) (BIO *, int,
                                                       BIO_info_cb *))
 {
diff --git a/crypto/bio/bss_acpt.c b/crypto/bio/bss_acpt.c
index 993e5903a0..e1485816cf 100644
--- a/crypto/bio/bss_acpt.c
+++ b/crypto/bio/bss_acpt.c
@@ -68,7 +68,7 @@ static const BIO_METHOD methods_acceptp = {
     NULL,                       /* connect_callback_ctrl */
 };
 
-const BIO_METHOD *BIO_s_accept(void)
+const BIO_METHOD * __cdecl BIO_s_accept(void)
 {
     return &methods_acceptp;
 }
@@ -544,7 +544,7 @@ static int acpt_puts(BIO *bp, const char *str)
     return ret;
 }
 
-BIO *BIO_new_accept(const char *str)
+BIO * __cdecl BIO_new_accept(const char *str)
 {
     BIO *ret;
 
diff --git a/crypto/bio/bss_bio.c b/crypto/bio/bss_bio.c
index e34382c557..2d6529240f 100644
--- a/crypto/bio/bss_bio.c
+++ b/crypto/bio/bss_bio.c
@@ -52,7 +52,7 @@ static const BIO_METHOD methods_biop = {
     NULL                        /* no bio_callback_ctrl */
 };
 
-const BIO_METHOD *BIO_s_bio(void)
+const BIO_METHOD * __cdecl BIO_s_bio(void)
 {
     return &methods_biop;
 }
@@ -682,7 +682,7 @@ static void bio_destroy_pair(BIO *bio)
 }
 
 /* Exported convenience functions */
-int BIO_new_bio_pair(BIO **bio1_p, size_t writebuf1,
+int __cdecl BIO_new_bio_pair(BIO **bio1_p, size_t writebuf1,
                      BIO **bio2_p, size_t writebuf2)
 {
     BIO *bio1 = NULL, *bio2 = NULL;
@@ -725,17 +725,17 @@ int BIO_new_bio_pair(BIO **bio1_p, size_t writebuf1,
     return ret;
 }
 
-size_t BIO_ctrl_get_write_guarantee(BIO *bio)
+size_t __cdecl BIO_ctrl_get_write_guarantee(BIO *bio)
 {
     return BIO_ctrl(bio, BIO_C_GET_WRITE_GUARANTEE, 0, NULL);
 }
 
-size_t BIO_ctrl_get_read_request(BIO *bio)
+size_t __cdecl BIO_ctrl_get_read_request(BIO *bio)
 {
     return BIO_ctrl(bio, BIO_C_GET_READ_REQUEST, 0, NULL);
 }
 
-int BIO_ctrl_reset_read_request(BIO *bio)
+int __cdecl BIO_ctrl_reset_read_request(BIO *bio)
 {
     return (BIO_ctrl(bio, BIO_C_RESET_READ_REQUEST, 0, NULL) != 0);
 }
@@ -745,7 +745,7 @@ int BIO_ctrl_reset_read_request(BIO *bio)
  * (conceivably some other BIOs could allow non-copying reads and writes
  * too.)
  */
-int BIO_nread0(BIO *bio, char **buf)
+int __cdecl BIO_nread0(BIO *bio, char **buf)
 {
     long ret;
 
@@ -761,7 +761,7 @@ int BIO_nread0(BIO *bio, char **buf)
         return (int)ret;
 }
 
-int BIO_nread(BIO *bio, char **buf, int num)
+int __cdecl BIO_nread(BIO *bio, char **buf, int num)
 {
     int ret;
 
@@ -776,7 +776,7 @@ int BIO_nread(BIO *bio, char **buf, int num)
     return ret;
 }
 
-int BIO_nwrite0(BIO *bio, char **buf)
+int __cdecl BIO_nwrite0(BIO *bio, char **buf)
 {
     long ret;
 
@@ -792,7 +792,7 @@ int BIO_nwrite0(BIO *bio, char **buf)
         return (int)ret;
 }
 
-int BIO_nwrite(BIO *bio, char **buf, int num)
+int __cdecl BIO_nwrite(BIO *bio, char **buf, int num)
 {
     int ret;
 
diff --git a/crypto/bio/bss_conn.c b/crypto/bio/bss_conn.c
index e9673fe783..e6cfa068f5 100644
--- a/crypto/bio/bss_conn.c
+++ b/crypto/bio/bss_conn.c
@@ -242,7 +242,7 @@ void BIO_CONNECT_free(BIO_CONNECT *a)
     OPENSSL_free(a);
 }
 
-const BIO_METHOD *BIO_s_connect(void)
+const BIO_METHOD * __cdecl BIO_s_connect(void)
 {
     return &methods_connectp;
 }
@@ -524,7 +524,7 @@ static int conn_puts(BIO *bp, const char *str)
     return ret;
 }
 
-BIO *BIO_new_connect(const char *str)
+BIO * __cdecl BIO_new_connect(const char *str)
 {
     BIO *ret;
 
diff --git a/crypto/bio/bss_dgram.c b/crypto/bio/bss_dgram.c
index 551821609f..8fb8ccb96b 100644
--- a/crypto/bio/bss_dgram.c
+++ b/crypto/bio/bss_dgram.c
@@ -134,12 +134,12 @@ typedef struct bio_dgram_sctp_data_st {
 } bio_dgram_sctp_data;
 # endif
 
-const BIO_METHOD *BIO_s_datagram(void)
+const BIO_METHOD * __cdecl BIO_s_datagram(void)
 {
     return &methods_dgramp;
 }
 
-BIO *BIO_new_dgram(int fd, int close_flag)
+BIO * __cdecl BIO_new_dgram(int fd, int close_flag)
 {
     BIO *ret;
 
@@ -807,12 +807,12 @@ static int dgram_puts(BIO *bp, const char *str)
 }
 
 # ifndef OPENSSL_NO_SCTP
-const BIO_METHOD *BIO_s_datagram_sctp(void)
+const BIO_METHOD * __cdecl BIO_s_datagram_sctp(void)
 {
     return &methods_dgramp_sctp;
 }
 
-BIO *BIO_new_dgram_sctp(int fd, int close_flag)
+BIO * __cdecl BIO_new_dgram_sctp(int fd, int close_flag)
 {
     BIO *bio;
     int ret, optval = 20000;
@@ -944,7 +944,7 @@ BIO *BIO_new_dgram_sctp(int fd, int close_flag)
     return bio;
 }
 
-int BIO_dgram_is_sctp(BIO *bio)
+int __cdecl BIO_dgram_is_sctp(BIO *bio)
 {
     return (BIO_method_type(bio) == BIO_TYPE_DGRAM_SCTP);
 }
@@ -1573,7 +1573,7 @@ static long dgram_sctp_ctrl(BIO *b, int cmd, long num, void *ptr)
     return ret;
 }
 
-int BIO_dgram_sctp_notification_cb(BIO *b,
+int __cdecl BIO_dgram_sctp_notification_cb(BIO *b,
                                    void (*handle_notifications) (BIO *bio,
                                                                  void
                                                                  *context,
@@ -1604,7 +1604,7 @@ int BIO_dgram_sctp_notification_cb(BIO *b,
  *  0 when not dry yet
  *  1 when dry
  */
-int BIO_dgram_sctp_wait_for_dry(BIO *b)
+int __cdecl BIO_dgram_sctp_wait_for_dry(BIO *b)
 {
     int is_dry = 0;
     int sockflags = 0;
@@ -1762,7 +1762,7 @@ int BIO_dgram_sctp_wait_for_dry(BIO *b)
     return is_dry;
 }
 
-int BIO_dgram_sctp_msg_waiting(BIO *b)
+int __cdecl BIO_dgram_sctp_msg_waiting(BIO *b)
 {
     int n, sockflags;
     union sctp_notification snp;
@@ -1851,7 +1851,7 @@ static int BIO_dgram_should_retry(int i)
     return 0;
 }
 
-int BIO_dgram_non_fatal_error(int err)
+int __cdecl BIO_dgram_non_fatal_error(int err)
 {
     switch (err) {
 # if defined(OPENSSL_SYS_WINDOWS)
diff --git a/crypto/bio/bss_fd.c b/crypto/bio/bss_fd.c
index 5bc539c90b..d5e85b401a 100644
--- a/crypto/bio/bss_fd.c
+++ b/crypto/bio/bss_fd.c
@@ -16,22 +16,22 @@
 /*
  * Dummy placeholder for BIO_s_fd...
  */
-BIO *BIO_new_fd(int fd, int close_flag)
+BIO * __cdecl BIO_new_fd(int fd, int close_flag)
 {
     return NULL;
 }
 
-int BIO_fd_non_fatal_error(int err)
+int __cdecl BIO_fd_non_fatal_error(int err)
 {
     return 0;
 }
 
-int BIO_fd_should_retry(int i)
+int __cdecl BIO_fd_should_retry(int i)
 {
     return 0;
 }
 
-const BIO_METHOD *BIO_s_fd(void)
+const BIO_METHOD * __cdecl BIO_s_fd(void)
 {
     return NULL;
 }
@@ -55,7 +55,7 @@ static int fd_gets(BIO *h, char *buf, int size);
 static long fd_ctrl(BIO *h, int cmd, long arg1, void *arg2);
 static int fd_new(BIO *h);
 static int fd_free(BIO *data);
-int BIO_fd_should_retry(int s);
+int __cdecl BIO_fd_should_retry(int s);
 
 static const BIO_METHOD methods_fdp = {
     BIO_TYPE_FD,
@@ -74,12 +74,12 @@ static const BIO_METHOD methods_fdp = {
     NULL,                       /* fd_callback_ctrl */
 };
 
-const BIO_METHOD *BIO_s_fd(void)
+const BIO_METHOD * __cdecl BIO_s_fd(void)
 {
     return &methods_fdp;
 }
 
-BIO *BIO_new_fd(int fd, int close_flag)
+BIO * __cdecl BIO_new_fd(int fd, int close_flag)
 {
     BIO *ret;
     ret = BIO_new(BIO_s_fd());
@@ -220,7 +220,7 @@ static int fd_gets(BIO *bp, char *buf, int size)
     return ret;
 }
 
-int BIO_fd_should_retry(int i)
+int __cdecl BIO_fd_should_retry(int i)
 {
     int err;
 
@@ -232,7 +232,7 @@ int BIO_fd_should_retry(int i)
     return 0;
 }
 
-int BIO_fd_non_fatal_error(int err)
+int __cdecl BIO_fd_non_fatal_error(int err)
 {
     switch (err) {
 
diff --git a/crypto/bio/bss_file.c b/crypto/bio/bss_file.c
index a210205597..7247808a0f 100644
--- a/crypto/bio/bss_file.c
+++ b/crypto/bio/bss_file.c
@@ -56,7 +56,7 @@ static const BIO_METHOD methods_filep = {
     NULL,                      /* file_callback_ctrl */
 };
 
-BIO *BIO_new_file(const char *filename, const char *mode)
+BIO * __cdecl BIO_new_file(const char *filename, const char *mode)
 {
     BIO  *ret;
     FILE *file = openssl_fopen(filename, mode);
@@ -89,7 +89,7 @@ BIO *BIO_new_file(const char *filename, const char *mode)
     return ret;
 }
 
-BIO *BIO_new_fp(FILE *stream, int close_flag)
+BIO * __cdecl BIO_new_fp(FILE *stream, int close_flag)
 {
     BIO *ret;
 
@@ -102,7 +102,7 @@ BIO *BIO_new_fp(FILE *stream, int close_flag)
     return ret;
 }
 
-const BIO_METHOD *BIO_s_file(void)
+const BIO_METHOD * __cdecl BIO_s_file(void)
 {
     return &methods_filep;
 }
@@ -409,12 +409,12 @@ static const BIO_METHOD methods_filep = {
     NULL,                      /* file_callback_ctrl */
 };
 
-const BIO_METHOD *BIO_s_file(void)
+const BIO_METHOD * __cdecl BIO_s_file(void)
 {
     return &methods_filep;
 }
 
-BIO *BIO_new_file(const char *filename, const char *mode)
+BIO * __cdecl BIO_new_file(const char *filename, const char *mode)
 {
     return NULL;
 }
diff --git a/crypto/bio/bss_log.c b/crypto/bio/bss_log.c
index e9ab932ec2..631ab8875f 100644
--- a/crypto/bio/bss_log.c
+++ b/crypto/bio/bss_log.c
@@ -100,7 +100,7 @@ static const BIO_METHOD methods_slg = {
     NULL,                      /* slg_callback_ctrl */
 };
 
-const BIO_METHOD *BIO_s_log(void)
+const BIO_METHOD * __cdecl BIO_s_log(void)
 {
     return &methods_slg;
 }
@@ -409,7 +409,7 @@ static void xcloselog(BIO *bp)
 # endif                         /* Unix */
 
 #else                           /* NO_SYSLOG */
-const BIO_METHOD *BIO_s_log(void)
+const BIO_METHOD * __cdecl BIO_s_log(void)
 {
     return NULL;
 }
diff --git a/crypto/bio/bss_mem.c b/crypto/bio/bss_mem.c
index 2d536e9db0..e729731b75 100644
--- a/crypto/bio/bss_mem.c
+++ b/crypto/bio/bss_mem.c
@@ -73,17 +73,17 @@ typedef struct bio_buf_mem_st {
  * should_retry is not set
  */
 
-const BIO_METHOD *BIO_s_mem(void)
+const BIO_METHOD * __cdecl BIO_s_mem(void)
 {
     return &mem_method;
 }
 
-const BIO_METHOD *BIO_s_secmem(void)
+const BIO_METHOD * __cdecl BIO_s_secmem(void)
 {
     return(&secmem_method);
 }
 
-BIO *BIO_new_mem_buf(const void *buf, int len)
+BIO * __cdecl BIO_new_mem_buf(const void *buf, int len)
 {
     BIO *ret;
     BUF_MEM *b;
diff --git a/crypto/bio/bss_null.c b/crypto/bio/bss_null.c
index 08f1d2bc98..0f7fa42ece 100644
--- a/crypto/bio/bss_null.c
+++ b/crypto/bio/bss_null.c
@@ -34,7 +34,7 @@ static const BIO_METHOD null_method = {
     NULL,                     /* null_callback_ctrl */
 };
 
-const BIO_METHOD *BIO_s_null(void)
+const BIO_METHOD * __cdecl BIO_s_null(void)
 {
     return &null_method;
 }
diff --git a/crypto/bio/bss_sock.c b/crypto/bio/bss_sock.c
index ad38453201..ba84c5a75a 100644
--- a/crypto/bio/bss_sock.c
+++ b/crypto/bio/bss_sock.c
@@ -32,7 +32,7 @@ static int sock_puts(BIO *h, const char *str);
 static long sock_ctrl(BIO *h, int cmd, long arg1, void *arg2);
 static int sock_new(BIO *h);
 static int sock_free(BIO *data);
-int BIO_sock_should_retry(int s);
+int __cdecl BIO_sock_should_retry(int s);
 
 static const BIO_METHOD methods_sockp = {
     BIO_TYPE_SOCKET,
@@ -51,12 +51,12 @@ static const BIO_METHOD methods_sockp = {
     NULL,                       /* sock_callback_ctrl */
 };
 
-const BIO_METHOD *BIO_s_socket(void)
+const BIO_METHOD * __cdecl BIO_s_socket(void)
 {
     return &methods_sockp;
 }
 
-BIO *BIO_new_socket(int fd, int close_flag)
+BIO * __cdecl BIO_new_socket(int fd, int close_flag)
 {
     BIO *ret;
 
@@ -167,7 +167,7 @@ static int sock_puts(BIO *bp, const char *str)
     return ret;
 }
 
-int BIO_sock_should_retry(int i)
+int __cdecl BIO_sock_should_retry(int i)
 {
     int err;
 
@@ -179,7 +179,7 @@ int BIO_sock_should_retry(int i)
     return 0;
 }
 
-int BIO_sock_non_fatal_error(int err)
+int __cdecl BIO_sock_non_fatal_error(int err)
 {
     switch (err) {
 # if defined(OPENSSL_SYS_WINDOWS)
diff --git a/crypto/bn/bn_add.c b/crypto/bn/bn_add.c
index f2736b8f6d..ed3d53ddd6 100644
--- a/crypto/bn/bn_add.c
+++ b/crypto/bn/bn_add.c
@@ -11,7 +11,7 @@
 #include "bn_lcl.h"
 
 /* signed add of b to a. */
-int BN_add(BIGNUM *r, const BIGNUM *a, const BIGNUM *b)
+int __cdecl BN_add(BIGNUM *r, const BIGNUM *a, const BIGNUM *b)
 {
     int ret, r_neg, cmp_res;
 
@@ -42,7 +42,7 @@ int BN_add(BIGNUM *r, const BIGNUM *a, const BIGNUM *b)
 }
 
 /* signed sub of b from a. */
-int BN_sub(BIGNUM *r, const BIGNUM *a, const BIGNUM *b)
+int __cdecl BN_sub(BIGNUM *r, const BIGNUM *a, const BIGNUM *b)
 {
     int ret, r_neg, cmp_res;
 
@@ -73,7 +73,7 @@ int BN_sub(BIGNUM *r, const BIGNUM *a, const BIGNUM *b)
 }
 
 /* unsigned add of b to a, r can be equal to a or b. */
-int BN_uadd(BIGNUM *r, const BIGNUM *a, const BIGNUM *b)
+int __cdecl BN_uadd(BIGNUM *r, const BIGNUM *a, const BIGNUM *b)
 {
     int max, min, dif;
     const BN_ULONG *ap, *bp;
@@ -122,7 +122,7 @@ int BN_uadd(BIGNUM *r, const BIGNUM *a, const BIGNUM *b)
 }
 
 /* unsigned subtraction of b from a, a must be larger than b. */
-int BN_usub(BIGNUM *r, const BIGNUM *a, const BIGNUM *b)
+int __cdecl BN_usub(BIGNUM *r, const BIGNUM *a, const BIGNUM *b)
 {
     int max, min, dif;
     BN_ULONG t1, t2, borrow, *rp;
diff --git a/crypto/bn/bn_blind.c b/crypto/bn/bn_blind.c
index 450cdfb348..78def6d9ef 100644
--- a/crypto/bn/bn_blind.c
+++ b/crypto/bn/bn_blind.c
@@ -22,12 +22,12 @@ struct bn_blinding_st {
     int counter;
     unsigned long flags;
     BN_MONT_CTX *m_ctx;
-    int (*bn_mod_exp) (BIGNUM *r, const BIGNUM *a, const BIGNUM *p,
+    int (__cdecl *bn_mod_exp) (BIGNUM *r, const BIGNUM *a, const BIGNUM *p,
                        const BIGNUM *m, BN_CTX *ctx, BN_MONT_CTX *m_ctx);
     CRYPTO_RWLOCK *lock;
 };
 
-BN_BLINDING *BN_BLINDING_new(const BIGNUM *A, const BIGNUM *Ai, BIGNUM *mod)
+BN_BLINDING * __cdecl BN_BLINDING_new(const BIGNUM *A, const BIGNUM *Ai, BIGNUM *mod)
 {
     BN_BLINDING *ret = NULL;
 
@@ -78,7 +78,7 @@ BN_BLINDING *BN_BLINDING_new(const BIGNUM *A, const BIGNUM *Ai, BIGNUM *mod)
     return NULL;
 }
 
-void BN_BLINDING_free(BN_BLINDING *r)
+void __cdecl BN_BLINDING_free(BN_BLINDING *r)
 {
     if (r == NULL)
         return;
@@ -90,7 +90,7 @@ void BN_BLINDING_free(BN_BLINDING *r)
     OPENSSL_free(r);
 }
 
-int BN_BLINDING_update(BN_BLINDING *b, BN_CTX *ctx)
+int __cdecl BN_BLINDING_update(BN_BLINDING *b, BN_CTX *ctx)
 {
     int ret = 0;
 
@@ -126,12 +126,12 @@ int BN_BLINDING_update(BN_BLINDING *b, BN_CTX *ctx)
     return ret;
 }
 
-int BN_BLINDING_convert(BIGNUM *n, BN_BLINDING *b, BN_CTX *ctx)
+int __cdecl BN_BLINDING_convert(BIGNUM *n, BN_BLINDING *b, BN_CTX *ctx)
 {
     return BN_BLINDING_convert_ex(n, NULL, b, ctx);
 }
 
-int BN_BLINDING_convert_ex(BIGNUM *n, BIGNUM *r, BN_BLINDING *b, BN_CTX *ctx)
+int __cdecl BN_BLINDING_convert_ex(BIGNUM *n, BIGNUM *r, BN_BLINDING *b, BN_CTX *ctx)
 {
     int ret = 1;
 
@@ -159,12 +159,12 @@ int BN_BLINDING_convert_ex(BIGNUM *n, BIGNUM *r, BN_BLINDING *b, BN_CTX *ctx)
     return ret;
 }
 
-int BN_BLINDING_invert(BIGNUM *n, BN_BLINDING *b, BN_CTX *ctx)
+int __cdecl BN_BLINDING_invert(BIGNUM *n, BN_BLINDING *b, BN_CTX *ctx)
 {
     return BN_BLINDING_invert_ex(n, NULL, b, ctx);
 }
 
-int BN_BLINDING_invert_ex(BIGNUM *n, const BIGNUM *r, BN_BLINDING *b,
+int __cdecl BN_BLINDING_invert_ex(BIGNUM *n, const BIGNUM *r, BN_BLINDING *b,
                           BN_CTX *ctx)
 {
     int ret;
@@ -200,39 +200,39 @@ int BN_BLINDING_invert_ex(BIGNUM *n, const BIGNUM *r, BN_BLINDING *b,
     return ret;
 }
 
-int BN_BLINDING_is_current_thread(BN_BLINDING *b)
+int __cdecl BN_BLINDING_is_current_thread(BN_BLINDING *b)
 {
     return CRYPTO_THREAD_compare_id(CRYPTO_THREAD_get_current_id(), b->tid);
 }
 
-void BN_BLINDING_set_current_thread(BN_BLINDING *b)
+void __cdecl BN_BLINDING_set_current_thread(BN_BLINDING *b)
 {
     b->tid = CRYPTO_THREAD_get_current_id();
 }
 
-int BN_BLINDING_lock(BN_BLINDING *b)
+int __cdecl BN_BLINDING_lock(BN_BLINDING *b)
 {
     return CRYPTO_THREAD_write_lock(b->lock);
 }
 
-int BN_BLINDING_unlock(BN_BLINDING *b)
+int __cdecl BN_BLINDING_unlock(BN_BLINDING *b)
 {
     return CRYPTO_THREAD_unlock(b->lock);
 }
 
-unsigned long BN_BLINDING_get_flags(const BN_BLINDING *b)
+unsigned long __cdecl BN_BLINDING_get_flags(const BN_BLINDING *b)
 {
     return b->flags;
 }
 
-void BN_BLINDING_set_flags(BN_BLINDING *b, unsigned long flags)
+void __cdecl BN_BLINDING_set_flags(BN_BLINDING *b, unsigned long flags)
 {
     b->flags = flags;
 }
 
-BN_BLINDING *BN_BLINDING_create_param(BN_BLINDING *b,
+BN_BLINDING * __cdecl BN_BLINDING_create_param(BN_BLINDING *b,
                                       const BIGNUM *e, BIGNUM *m, BN_CTX *ctx,
-                                      int (*bn_mod_exp) (BIGNUM *r,
+                                      int (__cdecl *bn_mod_exp) (BIGNUM *r,
                                                          const BIGNUM *a,
                                                          const BIGNUM *p,
                                                          const BIGNUM *m,
diff --git a/crypto/bn/bn_const.c b/crypto/bn/bn_const.c
index 39dd61202a..584f77f91d 100644
--- a/crypto/bn/bn_const.c
+++ b/crypto/bn/bn_const.c
@@ -18,7 +18,7 @@
  * RFC2412 specifies a generator of of 22.
  */
 
-BIGNUM *BN_get_rfc2409_prime_768(BIGNUM *bn)
+BIGNUM * __cdecl BN_get_rfc2409_prime_768(BIGNUM *bn)
 {
     static const unsigned char RFC2409_PRIME_768[] = {
         0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
@@ -46,7 +46,7 @@ BIGNUM *BN_get_rfc2409_prime_768(BIGNUM *bn)
  * RFC2412 specifies a generator of 22.
  */
 
-BIGNUM *BN_get_rfc2409_prime_1024(BIGNUM *bn)
+BIGNUM * __cdecl BN_get_rfc2409_prime_1024(BIGNUM *bn)
 {
     static const unsigned char RFC2409_PRIME_1024[] = {
         0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
@@ -78,7 +78,7 @@ BIGNUM *BN_get_rfc2409_prime_1024(BIGNUM *bn)
  * RFC2312 specifies a generator of 22.
  */
 
-BIGNUM *BN_get_rfc3526_prime_1536(BIGNUM *bn)
+BIGNUM * __cdecl BN_get_rfc3526_prime_1536(BIGNUM *bn)
 {
     static const unsigned char RFC3526_PRIME_1536[] = {
         0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
@@ -117,7 +117,7 @@ BIGNUM *BN_get_rfc3526_prime_1536(BIGNUM *bn)
  * RFC3526 specifies a generator of 2.
  */
 
-BIGNUM *BN_get_rfc3526_prime_2048(BIGNUM *bn)
+BIGNUM * __cdecl BN_get_rfc3526_prime_2048(BIGNUM *bn)
 {
     static const unsigned char RFC3526_PRIME_2048[] = {
         0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
@@ -164,7 +164,7 @@ BIGNUM *BN_get_rfc3526_prime_2048(BIGNUM *bn)
  * RFC3526 specifies a generator of 2.
  */
 
-BIGNUM *BN_get_rfc3526_prime_3072(BIGNUM *bn)
+BIGNUM * __cdecl BN_get_rfc3526_prime_3072(BIGNUM *bn)
 {
     static const unsigned char RFC3526_PRIME_3072[] = {
         0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
@@ -227,7 +227,7 @@ BIGNUM *BN_get_rfc3526_prime_3072(BIGNUM *bn)
  * RFC3526 specifies a generator of 2.
  */
 
-BIGNUM *BN_get_rfc3526_prime_4096(BIGNUM *bn)
+BIGNUM * __cdecl BN_get_rfc3526_prime_4096(BIGNUM *bn)
 {
     static const unsigned char RFC3526_PRIME_4096[] = {
         0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
@@ -306,7 +306,7 @@ BIGNUM *BN_get_rfc3526_prime_4096(BIGNUM *bn)
  * RFC3526 specifies a generator of 2.
  */
 
-BIGNUM *BN_get_rfc3526_prime_6144(BIGNUM *bn)
+BIGNUM * __cdecl BN_get_rfc3526_prime_6144(BIGNUM *bn)
 {
     static const unsigned char RFC3526_PRIME_6144[] = {
         0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
@@ -417,7 +417,7 @@ BIGNUM *BN_get_rfc3526_prime_6144(BIGNUM *bn)
  * RFC3526 specifies a generator of 2.
  */
 
-BIGNUM *BN_get_rfc3526_prime_8192(BIGNUM *bn)
+BIGNUM * __cdecl BN_get_rfc3526_prime_8192(BIGNUM *bn)
 {
     static const unsigned char RFC3526_PRIME_8192[] = {
         0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
diff --git a/crypto/bn/bn_ctx.c b/crypto/bn/bn_ctx.c
index 90cecea2aa..30c25af63e 100644
--- a/crypto/bn/bn_ctx.c
+++ b/crypto/bn/bn_ctx.c
@@ -131,7 +131,7 @@ static void ctxdbg(BN_CTX *ctx)
 #endif
 
 
-BN_CTX *BN_CTX_new(void)
+BN_CTX * __cdecl BN_CTX_new(void)
 {
     BN_CTX *ret;
 
@@ -145,7 +145,7 @@ BN_CTX *BN_CTX_new(void)
     return ret;
 }
 
-BN_CTX *BN_CTX_secure_new(void)
+BN_CTX * __cdecl BN_CTX_secure_new(void)
 {
     BN_CTX *ret = BN_CTX_new();
 
@@ -154,7 +154,7 @@ BN_CTX *BN_CTX_secure_new(void)
     return ret;
 }
 
-void BN_CTX_free(BN_CTX *ctx)
+void __cdecl BN_CTX_free(BN_CTX *ctx)
 {
     if (ctx == NULL)
         return;
@@ -178,7 +178,7 @@ void BN_CTX_free(BN_CTX *ctx)
     OPENSSL_free(ctx);
 }
 
-void BN_CTX_start(BN_CTX *ctx)
+void __cdecl BN_CTX_start(BN_CTX *ctx)
 {
     CTXDBG_ENTRY("BN_CTX_start", ctx);
     /* If we're already overflowing ... */
@@ -192,7 +192,7 @@ void BN_CTX_start(BN_CTX *ctx)
     CTXDBG_EXIT(ctx);
 }
 
-void BN_CTX_end(BN_CTX *ctx)
+void __cdecl BN_CTX_end(BN_CTX *ctx)
 {
     if (ctx == NULL)
         return;
@@ -211,7 +211,7 @@ void BN_CTX_end(BN_CTX *ctx)
     CTXDBG_EXIT(ctx);
 }
 
-BIGNUM *BN_CTX_get(BN_CTX *ctx)
+BIGNUM * __cdecl BN_CTX_get(BN_CTX *ctx)
 {
     BIGNUM *ret;
 
diff --git a/crypto/bn/bn_div.c b/crypto/bn/bn_div.c
index 7fc0132830..2b50a5b322 100644
--- a/crypto/bn/bn_div.c
+++ b/crypto/bn/bn_div.c
@@ -14,7 +14,7 @@
 
 /* The old slow way */
 #if 0
-int BN_div(BIGNUM *dv, BIGNUM *rem, const BIGNUM *m, const BIGNUM *d,
+int __cdecl BN_div(BIGNUM *dv, BIGNUM *rem, const BIGNUM *m, const BIGNUM *d,
            BN_CTX *ctx)
 {
     int i, nm, nd;
@@ -206,7 +206,7 @@ static int bn_left_align(BIGNUM *num)
  *     rm->neg == num->neg                 (unless the remainder is zero)
  * If 'dv' or 'rm' is NULL, the respective value is not returned.
  */
-int BN_div(BIGNUM *dv, BIGNUM *rm, const BIGNUM *num, const BIGNUM *divisor,
+int __cdecl BN_div(BIGNUM *dv, BIGNUM *rm, const BIGNUM *num, const BIGNUM *divisor,
            BN_CTX *ctx)
 {
     int ret;
diff --git a/crypto/bn/bn_err.c b/crypto/bn/bn_err.c
index dd87c152cf..fb6c82a3a4 100644
--- a/crypto/bn/bn_err.c
+++ b/crypto/bn/bn_err.c
@@ -106,7 +106,7 @@ static const ERR_STRING_DATA BN_str_reasons[] = {
 
 #endif
 
-int ERR_load_BN_strings(void)
+int __cdecl ERR_load_BN_strings(void)
 {
 #ifndef OPENSSL_NO_ERR
     if (ERR_func_error_string(BN_str_functs[0].error) == NULL) {
diff --git a/crypto/bn/bn_exp.c b/crypto/bn/bn_exp.c
index 88f2baf0e5..5eb8d7986b 100644
--- a/crypto/bn/bn_exp.c
+++ b/crypto/bn/bn_exp.c
@@ -38,7 +38,7 @@ extern unsigned int OPENSSL_sparcv9cap_P[];
 #define TABLE_SIZE      32
 
 /* this one works - simple but works */
-int BN_exp(BIGNUM *r, const BIGNUM *a, const BIGNUM *p, BN_CTX *ctx)
+int __cdecl BN_exp(BIGNUM *r, const BIGNUM *a, const BIGNUM *p, BN_CTX *ctx)
 {
     int i, bits, ret = 0;
     BIGNUM *v, *rr;
@@ -86,7 +86,7 @@ int BN_exp(BIGNUM *r, const BIGNUM *a, const BIGNUM *p, BN_CTX *ctx)
     return ret;
 }
 
-int BN_mod_exp(BIGNUM *r, const BIGNUM *a, const BIGNUM *p, const BIGNUM *m,
+int __cdecl BN_mod_exp(BIGNUM *r, const BIGNUM *a, const BIGNUM *p, const BIGNUM *m,
                BN_CTX *ctx)
 {
     int ret;
@@ -158,7 +158,7 @@ int BN_mod_exp(BIGNUM *r, const BIGNUM *a, const BIGNUM *p, const BIGNUM *m,
     return ret;
 }
 
-int BN_mod_exp_recp(BIGNUM *r, const BIGNUM *a, const BIGNUM *p,
+int __cdecl BN_mod_exp_recp(BIGNUM *r, const BIGNUM *a, const BIGNUM *p,
                     const BIGNUM *m, BN_CTX *ctx)
 {
     int i, j, bits, ret = 0, wstart, wend, window, wvalue;
@@ -293,7 +293,7 @@ int BN_mod_exp_recp(BIGNUM *r, const BIGNUM *a, const BIGNUM *p,
     return ret;
 }
 
-int BN_mod_exp_mont(BIGNUM *rr, const BIGNUM *a, const BIGNUM *p,
+int __cdecl BN_mod_exp_mont(BIGNUM *rr, const BIGNUM *a, const BIGNUM *p,
                     const BIGNUM *m, BN_CTX *ctx, BN_MONT_CTX *in_mont)
 {
     int i, j, bits, ret = 0, wstart, wend, window, wvalue;
@@ -589,7 +589,7 @@ static int MOD_EXP_CTIME_COPY_FROM_PREBUF(BIGNUM *b, int top,
  * out by Colin Percival,
  * http://www.daemonology.net/hyperthreading-considered-harmful/)
  */
-int BN_mod_exp_mont_consttime(BIGNUM *rr, const BIGNUM *a, const BIGNUM *p,
+int __cdecl BN_mod_exp_mont_consttime(BIGNUM *rr, const BIGNUM *a, const BIGNUM *p,
                               const BIGNUM *m, BN_CTX *ctx,
                               BN_MONT_CTX *in_mont)
 {
@@ -1126,7 +1126,7 @@ int BN_mod_exp_mont_consttime(BIGNUM *rr, const BIGNUM *a, const BIGNUM *p,
     return ret;
 }
 
-int BN_mod_exp_mont_word(BIGNUM *rr, BN_ULONG a, const BIGNUM *p,
+int __cdecl BN_mod_exp_mont_word(BIGNUM *rr, BN_ULONG a, const BIGNUM *p,
                          const BIGNUM *m, BN_CTX *ctx, BN_MONT_CTX *in_mont)
 {
     BN_MONT_CTX *mont = NULL;
@@ -1274,7 +1274,7 @@ int BN_mod_exp_mont_word(BIGNUM *rr, BN_ULONG a, const BIGNUM *p,
 }
 
 /* The old fallback, simple version :-) */
-int BN_mod_exp_simple(BIGNUM *r, const BIGNUM *a, const BIGNUM *p,
+int __cdecl BN_mod_exp_simple(BIGNUM *r, const BIGNUM *a, const BIGNUM *p,
                       const BIGNUM *m, BN_CTX *ctx)
 {
     int i, j, bits, ret = 0, wstart, wend, window, wvalue;
diff --git a/crypto/bn/bn_exp2.c b/crypto/bn/bn_exp2.c
index 082c9286a0..6f0b1766e3 100644
--- a/crypto/bn/bn_exp2.c
+++ b/crypto/bn/bn_exp2.c
@@ -13,7 +13,7 @@
 
 #define TABLE_SIZE      32
 
-int BN_mod_exp2_mont(BIGNUM *rr, const BIGNUM *a1, const BIGNUM *p1,
+int __cdecl BN_mod_exp2_mont(BIGNUM *rr, const BIGNUM *a1, const BIGNUM *p1,
                      const BIGNUM *a2, const BIGNUM *p2, const BIGNUM *m,
                      BN_CTX *ctx, BN_MONT_CTX *in_mont)
 {
diff --git a/crypto/bn/bn_gcd.c b/crypto/bn/bn_gcd.c
index 0091ea4e08..e1a17257cf 100644
--- a/crypto/bn/bn_gcd.c
+++ b/crypto/bn/bn_gcd.c
@@ -12,7 +12,7 @@
 
 static BIGNUM *euclid(BIGNUM *a, BIGNUM *b);
 
-int BN_gcd(BIGNUM *r, const BIGNUM *in_a, const BIGNUM *in_b, BN_CTX *ctx)
+int __cdecl BN_gcd(BIGNUM *r, const BIGNUM *in_a, const BIGNUM *in_b, BN_CTX *ctx)
 {
     BIGNUM *a, *b, *t;
     int ret = 0;
@@ -121,7 +121,7 @@ static BIGNUM *BN_mod_inverse_no_branch(BIGNUM *in,
                                         const BIGNUM *a, const BIGNUM *n,
                                         BN_CTX *ctx);
 
-BIGNUM *BN_mod_inverse(BIGNUM *in,
+BIGNUM * __cdecl BN_mod_inverse(BIGNUM *in,
                        const BIGNUM *a, const BIGNUM *n, BN_CTX *ctx)
 {
     BIGNUM *rv;
diff --git a/crypto/bn/bn_gf2m.c b/crypto/bn/bn_gf2m.c
index 34d8b69c1e..e91d7f61f2 100644
--- a/crypto/bn/bn_gf2m.c
+++ b/crypto/bn/bn_gf2m.c
@@ -249,7 +249,7 @@ void bn_GF2m_mul_2x2(BN_ULONG *r, BN_ULONG a1, BN_ULONG a0, BN_ULONG b1,
  * Add polynomials a and b and store result in r; r could be a or b, a and b
  * could be equal; r is the bitwise XOR of a and b.
  */
-int BN_GF2m_add(BIGNUM *r, const BIGNUM *a, const BIGNUM *b)
+int __cdecl BN_GF2m_add(BIGNUM *r, const BIGNUM *a, const BIGNUM *b)
 {
     int i;
     const BIGNUM *at, *bt;
@@ -289,7 +289,7 @@ int BN_GF2m_add(BIGNUM *r, const BIGNUM *a, const BIGNUM *b)
  */
 
 /* Performs modular reduction of a and store result in r.  r could be a. */
-int BN_GF2m_mod_arr(BIGNUM *r, const BIGNUM *a, const int p[])
+int __cdecl BN_GF2m_mod_arr(BIGNUM *r, const BIGNUM *a, const int p[])
 {
     int j, k;
     int n, dN, d0, d1;
@@ -387,7 +387,7 @@ int BN_GF2m_mod_arr(BIGNUM *r, const BIGNUM *a, const int p[])
  * function is only provided for convenience; for best performance, use the
  * BN_GF2m_mod_arr function.
  */
-int BN_GF2m_mod(BIGNUM *r, const BIGNUM *a, const BIGNUM *p)
+int __cdecl BN_GF2m_mod(BIGNUM *r, const BIGNUM *a, const BIGNUM *p)
 {
     int ret = 0;
     int arr[6];
@@ -407,7 +407,7 @@ int BN_GF2m_mod(BIGNUM *r, const BIGNUM *a, const BIGNUM *p)
  * Compute the product of two polynomials a and b, reduce modulo p, and store
  * the result in r.  r could be a or b; a could be b.
  */
-int BN_GF2m_mod_mul_arr(BIGNUM *r, const BIGNUM *a, const BIGNUM *b,
+int __cdecl BN_GF2m_mod_mul_arr(BIGNUM *r, const BIGNUM *a, const BIGNUM *b,
                         const int p[], BN_CTX *ctx)
 {
     int zlen, i, j, k, ret = 0;
@@ -462,7 +462,7 @@ int BN_GF2m_mod_mul_arr(BIGNUM *r, const BIGNUM *a, const BIGNUM *b,
  * only provided for convenience; for best performance, use the
  * BN_GF2m_mod_mul_arr function.
  */
-int BN_GF2m_mod_mul(BIGNUM *r, const BIGNUM *a, const BIGNUM *b,
+int __cdecl BN_GF2m_mod_mul(BIGNUM *r, const BIGNUM *a, const BIGNUM *b,
                     const BIGNUM *p, BN_CTX *ctx)
 {
     int ret = 0;
@@ -486,7 +486,7 @@ int BN_GF2m_mod_mul(BIGNUM *r, const BIGNUM *a, const BIGNUM *b,
 }
 
 /* Square a, reduce the result mod p, and store it in a.  r could be a. */
-int BN_GF2m_mod_sqr_arr(BIGNUM *r, const BIGNUM *a, const int p[],
+int __cdecl BN_GF2m_mod_sqr_arr(BIGNUM *r, const BIGNUM *a, const int p[],
                         BN_CTX *ctx)
 {
     int i, ret = 0;
@@ -521,7 +521,7 @@ int BN_GF2m_mod_sqr_arr(BIGNUM *r, const BIGNUM *a, const int p[],
  * wrapper function is only provided for convenience; for best performance,
  * use the BN_GF2m_mod_sqr_arr function.
  */
-int BN_GF2m_mod_sqr(BIGNUM *r, const BIGNUM *a, const BIGNUM *p, BN_CTX *ctx)
+int __cdecl BN_GF2m_mod_sqr(BIGNUM *r, const BIGNUM *a, const BIGNUM *p, BN_CTX *ctx)
 {
     int ret = 0;
     const int max = BN_num_bits(p) + 1;
@@ -721,7 +721,7 @@ static int BN_GF2m_mod_inv_vartime(BIGNUM *r, const BIGNUM *a,
  * This is not constant time.
  * But it does eliminate first order deduction on the input.
  */
-int BN_GF2m_mod_inv(BIGNUM *r, const BIGNUM *a, const BIGNUM *p, BN_CTX *ctx)
+int __cdecl BN_GF2m_mod_inv(BIGNUM *r, const BIGNUM *a, const BIGNUM *p, BN_CTX *ctx)
 {
     BIGNUM *b = NULL;
     int ret = 0;
@@ -762,7 +762,7 @@ int BN_GF2m_mod_inv(BIGNUM *r, const BIGNUM *a, const BIGNUM *p, BN_CTX *ctx)
  * wrapper function is only provided for convenience; for best performance,
  * use the BN_GF2m_mod_inv function.
  */
-int BN_GF2m_mod_inv_arr(BIGNUM *r, const BIGNUM *xx, const int p[],
+int __cdecl BN_GF2m_mod_inv_arr(BIGNUM *r, const BIGNUM *xx, const int p[],
                         BN_CTX *ctx)
 {
     BIGNUM *field;
@@ -787,7 +787,7 @@ int BN_GF2m_mod_inv_arr(BIGNUM *r, const BIGNUM *xx, const int p[],
  * Divide y by x, reduce modulo p, and store the result in r. r could be x
  * or y, x could equal y.
  */
-int BN_GF2m_mod_div(BIGNUM *r, const BIGNUM *y, const BIGNUM *x,
+int __cdecl BN_GF2m_mod_div(BIGNUM *r, const BIGNUM *y, const BIGNUM *x,
                     const BIGNUM *p, BN_CTX *ctx)
 {
     BIGNUM *xinv = NULL;
@@ -820,7 +820,7 @@ int BN_GF2m_mod_div(BIGNUM *r, const BIGNUM *y, const BIGNUM *x,
  * BN_GF2m_mod_div implementation; this wrapper function is only provided for
  * convenience; for best performance, use the BN_GF2m_mod_div function.
  */
-int BN_GF2m_mod_div_arr(BIGNUM *r, const BIGNUM *yy, const BIGNUM *xx,
+int __cdecl BN_GF2m_mod_div_arr(BIGNUM *r, const BIGNUM *yy, const BIGNUM *xx,
                         const int p[], BN_CTX *ctx)
 {
     BIGNUM *field;
@@ -848,7 +848,7 @@ int BN_GF2m_mod_div_arr(BIGNUM *r, const BIGNUM *yy, const BIGNUM *xx,
  * could be a. Uses simple square-and-multiply algorithm A.5.1 from IEEE
  * P1363.
  */
-int BN_GF2m_mod_exp_arr(BIGNUM *r, const BIGNUM *a, const BIGNUM *b,
+int __cdecl BN_GF2m_mod_exp_arr(BIGNUM *r, const BIGNUM *a, const BIGNUM *b,
                         const int p[], BN_CTX *ctx)
 {
     int ret = 0, i, n;
@@ -894,7 +894,7 @@ int BN_GF2m_mod_exp_arr(BIGNUM *r, const BIGNUM *a, const BIGNUM *b,
  * implementation; this wrapper function is only provided for convenience;
  * for best performance, use the BN_GF2m_mod_exp_arr function.
  */
-int BN_GF2m_mod_exp(BIGNUM *r, const BIGNUM *a, const BIGNUM *b,
+int __cdecl BN_GF2m_mod_exp(BIGNUM *r, const BIGNUM *a, const BIGNUM *b,
                     const BIGNUM *p, BN_CTX *ctx)
 {
     int ret = 0;
@@ -921,7 +921,7 @@ int BN_GF2m_mod_exp(BIGNUM *r, const BIGNUM *a, const BIGNUM *b,
  * Compute the square root of a, reduce modulo p, and store the result in r.
  * r could be a. Uses exponentiation as in algorithm A.4.1 from IEEE P1363.
  */
-int BN_GF2m_mod_sqrt_arr(BIGNUM *r, const BIGNUM *a, const int p[],
+int __cdecl BN_GF2m_mod_sqrt_arr(BIGNUM *r, const BIGNUM *a, const int p[],
                          BN_CTX *ctx)
 {
     int ret = 0;
@@ -955,7 +955,7 @@ int BN_GF2m_mod_sqrt_arr(BIGNUM *r, const BIGNUM *a, const int p[],
  * implementation; this wrapper function is only provided for convenience;
  * for best performance, use the BN_GF2m_mod_sqrt_arr function.
  */
-int BN_GF2m_mod_sqrt(BIGNUM *r, const BIGNUM *a, const BIGNUM *p, BN_CTX *ctx)
+int __cdecl BN_GF2m_mod_sqrt(BIGNUM *r, const BIGNUM *a, const BIGNUM *p, BN_CTX *ctx)
 {
     int ret = 0;
     const int max = BN_num_bits(p) + 1;
@@ -980,7 +980,7 @@ int BN_GF2m_mod_sqrt(BIGNUM *r, const BIGNUM *a, const BIGNUM *p, BN_CTX *ctx)
  * Find r such that r^2 + r = a mod p.  r could be a. If no r exists returns
  * 0. Uses algorithms A.4.7 and A.4.6 from IEEE P1363.
  */
-int BN_GF2m_mod_solve_quad_arr(BIGNUM *r, const BIGNUM *a_, const int p[],
+int __cdecl BN_GF2m_mod_solve_quad_arr(BIGNUM *r, const BIGNUM *a_, const int p[],
                                BN_CTX *ctx)
 {
     int ret = 0, count = 0, j;
@@ -1084,7 +1084,7 @@ int BN_GF2m_mod_solve_quad_arr(BIGNUM *r, const BIGNUM *a_, const int p[],
  * implementation; this wrapper function is only provided for convenience;
  * for best performance, use the BN_GF2m_mod_solve_quad_arr function.
  */
-int BN_GF2m_mod_solve_quad(BIGNUM *r, const BIGNUM *a, const BIGNUM *p,
+int __cdecl BN_GF2m_mod_solve_quad(BIGNUM *r, const BIGNUM *a, const BIGNUM *p,
                            BN_CTX *ctx)
 {
     int ret = 0;
@@ -1113,7 +1113,7 @@ int BN_GF2m_mod_solve_quad(BIGNUM *r, const BIGNUM *a, const BIGNUM *p,
  * will be filled.  Return value is total number of array elements that would
  * be filled if array was large enough.
  */
-int BN_GF2m_poly2arr(const BIGNUM *a, int p[], int max)
+int __cdecl BN_GF2m_poly2arr(const BIGNUM *a, int p[], int max)
 {
     int i, j, k = 0;
     BN_ULONG mask;
@@ -1148,7 +1148,7 @@ int BN_GF2m_poly2arr(const BIGNUM *a, int p[], int max)
  * Convert the coefficient array representation of a polynomial to a
  * bit-string.  The array must be terminated by -1.
  */
-int BN_GF2m_arr2poly(const int p[], BIGNUM *a)
+int __cdecl BN_GF2m_arr2poly(const int p[], BIGNUM *a)
 {
     int i;
 
diff --git a/crypto/bn/bn_kron.c b/crypto/bn/bn_kron.c
index b9bc6cca27..b32009b2aa 100644
--- a/crypto/bn/bn_kron.c
+++ b/crypto/bn/bn_kron.c
@@ -14,7 +14,7 @@
 #define BN_lsw(n) (((n)->top == 0) ? (BN_ULONG) 0 : (n)->d[0])
 
 /* Returns -2 for errors because both -1 and 0 are valid results. */
-int BN_kronecker(const BIGNUM *a, const BIGNUM *b, BN_CTX *ctx)
+int __cdecl BN_kronecker(const BIGNUM *a, const BIGNUM *b, BN_CTX *ctx)
 {
     int i;
     int ret = -2;               /* avoid 'uninitialized' warning */
diff --git a/crypto/bn/bn_lib.c b/crypto/bn/bn_lib.c
index 254069ff38..9a56fb44fe 100644
--- a/crypto/bn/bn_lib.c
+++ b/crypto/bn/bn_lib.c
@@ -78,7 +78,7 @@ int BN_get_params(int which)
 }
 #endif
 
-const BIGNUM *BN_value_one(void)
+const BIGNUM * __cdecl BN_value_one(void)
 {
     static const BN_ULONG data_one = 1L;
     static const BIGNUM const_one =
@@ -87,7 +87,7 @@ const BIGNUM *BN_value_one(void)
     return &const_one;
 }
 
-int BN_num_bits_word(BN_ULONG l)
+int __cdecl BN_num_bits_word(BN_ULONG l)
 {
     BN_ULONG x, mask;
     int bits = (l != 0);
@@ -162,7 +162,7 @@ int bn_num_bits_consttime(const BIGNUM *a)
     return ret & mask;
 }
 
-int BN_num_bits(const BIGNUM *a)
+int __cdecl BN_num_bits(const BIGNUM *a)
 {
     int i = a->top - 1;
     bn_check_top(a);
@@ -197,7 +197,7 @@ static void bn_free_d(BIGNUM *a, int clear)
 }
 
 
-void BN_clear_free(BIGNUM *a)
+void __cdecl BN_clear_free(BIGNUM *a)
 {
     if (a == NULL)
         return;
@@ -209,7 +209,7 @@ void BN_clear_free(BIGNUM *a)
     }
 }
 
-void BN_free(BIGNUM *a)
+void __cdecl BN_free(BIGNUM *a)
 {
     if (a == NULL)
         return;
@@ -227,7 +227,7 @@ void bn_init(BIGNUM *a)
     bn_check_top(a);
 }
 
-BIGNUM *BN_new(void)
+BIGNUM * __cdecl BN_new(void)
 {
     BIGNUM *ret;
 
@@ -240,7 +240,7 @@ BIGNUM *BN_new(void)
     return ret;
 }
 
- BIGNUM *BN_secure_new(void)
+ BIGNUM * __cdecl BN_secure_new(void)
  {
      BIGNUM *ret = BN_new();
      if (ret != NULL)
@@ -301,7 +301,7 @@ BIGNUM *bn_expand2(BIGNUM *b, int words)
     return b;
 }
 
-BIGNUM *BN_dup(const BIGNUM *a)
+BIGNUM * __cdecl BN_dup(const BIGNUM *a)
 {
     BIGNUM *t;
 
@@ -320,7 +320,7 @@ BIGNUM *BN_dup(const BIGNUM *a)
     return t;
 }
 
-BIGNUM *BN_copy(BIGNUM *a, const BIGNUM *b)
+BIGNUM * __cdecl BN_copy(BIGNUM *a, const BIGNUM *b)
 {
     bn_check_top(b);
 
@@ -345,7 +345,7 @@ BIGNUM *BN_copy(BIGNUM *a, const BIGNUM *b)
                                     | BN_FLG_FIXED_TOP))
 #define FLAGS_STRUCT(flags) ((flags) & (BN_FLG_MALLOCED))
 
-void BN_swap(BIGNUM *a, BIGNUM *b)
+void __cdecl BN_swap(BIGNUM *a, BIGNUM *b)
 {
     int flags_old_a, flags_old_b;
     BN_ULONG *tmp_d;
@@ -378,7 +378,7 @@ void BN_swap(BIGNUM *a, BIGNUM *b)
     bn_check_top(b);
 }
 
-void BN_clear(BIGNUM *a)
+void __cdecl BN_clear(BIGNUM *a)
 {
     if (a == NULL)
         return;
@@ -390,7 +390,7 @@ void BN_clear(BIGNUM *a)
     a->flags &= ~BN_FLG_FIXED_TOP;
 }
 
-BN_ULONG BN_get_word(const BIGNUM *a)
+BN_ULONG __cdecl BN_get_word(const BIGNUM *a)
 {
     if (a->top > 1)
         return BN_MASK2;
@@ -400,7 +400,7 @@ BN_ULONG BN_get_word(const BIGNUM *a)
     return 0;
 }
 
-int BN_set_word(BIGNUM *a, BN_ULONG w)
+int __cdecl BN_set_word(BIGNUM *a, BN_ULONG w)
 {
     bn_check_top(a);
     if (bn_expand(a, (int)sizeof(BN_ULONG) * 8) == NULL)
@@ -413,7 +413,7 @@ int BN_set_word(BIGNUM *a, BN_ULONG w)
     return 1;
 }
 
-BIGNUM *BN_bin2bn(const unsigned char *s, int len, BIGNUM *ret)
+BIGNUM * __cdecl BN_bin2bn(const unsigned char *s, int len, BIGNUM *ret)
 {
     unsigned int i, m;
     unsigned int n;
@@ -511,19 +511,19 @@ int bn2binpad(const BIGNUM *a, unsigned char *to, int tolen, endianess_t endiane
     return tolen;
 }
 
-int BN_bn2binpad(const BIGNUM *a, unsigned char *to, int tolen)
+int __cdecl BN_bn2binpad(const BIGNUM *a, unsigned char *to, int tolen)
 {
     if (tolen < 0)
         return -1;
     return bn2binpad(a, to, tolen, big);
 }
 
-int BN_bn2bin(const BIGNUM *a, unsigned char *to)
+int __cdecl BN_bn2bin(const BIGNUM *a, unsigned char *to)
 {
     return bn2binpad(a, to, -1, big);
 }
 
-BIGNUM *BN_lebin2bn(const unsigned char *s, int len, BIGNUM *ret)
+BIGNUM * __cdecl BN_lebin2bn(const unsigned char *s, int len, BIGNUM *ret)
 {
     unsigned int i, m;
     unsigned int n;
@@ -570,14 +570,14 @@ BIGNUM *BN_lebin2bn(const unsigned char *s, int len, BIGNUM *ret)
     return ret;
 }
 
-int BN_bn2lebinpad(const BIGNUM *a, unsigned char *to, int tolen)
+int __cdecl BN_bn2lebinpad(const BIGNUM *a, unsigned char *to, int tolen)
 {
     if (tolen < 0)
         return -1;
     return bn2binpad(a, to, tolen, little);
 }
 
-int BN_ucmp(const BIGNUM *a, const BIGNUM *b)
+int __cdecl BN_ucmp(const BIGNUM *a, const BIGNUM *b)
 {
     int i;
     BN_ULONG t1, t2, *ap, *bp;
@@ -599,7 +599,7 @@ int BN_ucmp(const BIGNUM *a, const BIGNUM *b)
     return 0;
 }
 
-int BN_cmp(const BIGNUM *a, const BIGNUM *b)
+int __cdecl BN_cmp(const BIGNUM *a, const BIGNUM *b)
 {
     int i;
     int gt, lt;
@@ -646,7 +646,7 @@ int BN_cmp(const BIGNUM *a, const BIGNUM *b)
     return 0;
 }
 
-int BN_set_bit(BIGNUM *a, int n)
+int __cdecl BN_set_bit(BIGNUM *a, int n)
 {
     int i, j, k;
 
@@ -669,7 +669,7 @@ int BN_set_bit(BIGNUM *a, int n)
     return 1;
 }
 
-int BN_clear_bit(BIGNUM *a, int n)
+int __cdecl BN_clear_bit(BIGNUM *a, int n)
 {
     int i, j;
 
@@ -687,7 +687,7 @@ int BN_clear_bit(BIGNUM *a, int n)
     return 1;
 }
 
-int BN_is_bit_set(const BIGNUM *a, int n)
+int __cdecl BN_is_bit_set(const BIGNUM *a, int n)
 {
     int i, j;
 
@@ -701,7 +701,7 @@ int BN_is_bit_set(const BIGNUM *a, int n)
     return (int)(((a->d[i]) >> j) & ((BN_ULONG)1));
 }
 
-int BN_mask_bits(BIGNUM *a, int n)
+int __cdecl BN_mask_bits(BIGNUM *a, int n)
 {
     int b, w;
 
@@ -723,7 +723,7 @@ int BN_mask_bits(BIGNUM *a, int n)
     return 1;
 }
 
-void BN_set_negative(BIGNUM *a, int b)
+void __cdecl BN_set_negative(BIGNUM *a, int b)
 {
     if (b && !BN_is_zero(a))
         a->neg = 1;
@@ -788,7 +788,7 @@ int bn_cmp_part_words(const BN_ULONG *a, const BN_ULONG *b, int cl, int dl)
  * Assumes that at least nwords are allocated in both a and b.
  * Assumes that no more than nwords are used by either a or b.
  */
-void BN_consttime_swap(BN_ULONG condition, BIGNUM *a, BIGNUM *b, int nwords)
+void __cdecl BN_consttime_swap(BN_ULONG condition, BIGNUM *a, BIGNUM *b, int nwords)
 {
     BN_ULONG t;
     int i;
@@ -849,7 +849,7 @@ void BN_consttime_swap(BN_ULONG condition, BIGNUM *a, BIGNUM *b, int nwords)
 
 /* Bits of security, see SP800-57 */
 
-int BN_security_bits(int L, int N)
+int __cdecl BN_security_bits(int L, int N)
 {
     int secbits, bits;
     if (L >= 15360)
@@ -872,50 +872,50 @@ int BN_security_bits(int L, int N)
     return bits >= secbits ? secbits : bits;
 }
 
-void BN_zero_ex(BIGNUM *a)
+void __cdecl BN_zero_ex(BIGNUM *a)
 {
     a->neg = 0;
     a->top = 0;
     a->flags &= ~BN_FLG_FIXED_TOP;
 }
 
-int BN_abs_is_word(const BIGNUM *a, const BN_ULONG w)
+int __cdecl BN_abs_is_word(const BIGNUM *a, const BN_ULONG w)
 {
     return ((a->top == 1) && (a->d[0] == w)) || ((w == 0) && (a->top == 0));
 }
 
-int BN_is_zero(const BIGNUM *a)
+int __cdecl BN_is_zero(const BIGNUM *a)
 {
     return a->top == 0;
 }
 
-int BN_is_one(const BIGNUM *a)
+int __cdecl BN_is_one(const BIGNUM *a)
 {
     return BN_abs_is_word(a, 1) && !a->neg;
 }
 
-int BN_is_word(const BIGNUM *a, const BN_ULONG w)
+int __cdecl BN_is_word(const BIGNUM *a, const BN_ULONG w)
 {
     return BN_abs_is_word(a, w) && (!w || !a->neg);
 }
 
-int BN_is_odd(const BIGNUM *a)
+int __cdecl BN_is_odd(const BIGNUM *a)
 {
     return (a->top > 0) && (a->d[0] & 1);
 }
 
-int BN_is_negative(const BIGNUM *a)
+int __cdecl BN_is_negative(const BIGNUM *a)
 {
     return (a->neg != 0);
 }
 
-int BN_to_montgomery(BIGNUM *r, const BIGNUM *a, BN_MONT_CTX *mont,
+int __cdecl BN_to_montgomery(BIGNUM *r, const BIGNUM *a, BN_MONT_CTX *mont,
                      BN_CTX *ctx)
 {
     return BN_mod_mul_montgomery(r, a, &(mont->RR), mont, ctx);
 }
 
-void BN_with_flags(BIGNUM *dest, const BIGNUM *b, int flags)
+void __cdecl BN_with_flags(BIGNUM *dest, const BIGNUM *b, int flags)
 {
     dest->d = b->d;
     dest->top = b->top;
@@ -926,7 +926,7 @@ void BN_with_flags(BIGNUM *dest, const BIGNUM *b, int flags)
                    | BN_FLG_STATIC_DATA | flags);
 }
 
-BN_GENCB *BN_GENCB_new(void)
+BN_GENCB * __cdecl BN_GENCB_new(void)
 {
     BN_GENCB *ret;
 
@@ -938,25 +938,25 @@ BN_GENCB *BN_GENCB_new(void)
     return ret;
 }
 
-void BN_GENCB_free(BN_GENCB *cb)
+void __cdecl BN_GENCB_free(BN_GENCB *cb)
 {
     if (cb == NULL)
         return;
     OPENSSL_free(cb);
 }
 
-void BN_set_flags(BIGNUM *b, int n)
+void __cdecl BN_set_flags(BIGNUM *b, int n)
 {
     b->flags |= n;
 }
 
-int BN_get_flags(const BIGNUM *b, int n)
+int __cdecl BN_get_flags(const BIGNUM *b, int n)
 {
     return b->flags & n;
 }
 
 /* Populate a BN_GENCB structure with an "old"-style callback */
-void BN_GENCB_set_old(BN_GENCB *gencb, void (*callback) (int, int, void *),
+void __cdecl BN_GENCB_set_old(BN_GENCB *gencb, void (*callback) (int, int, void *),
                       void *cb_arg)
 {
     BN_GENCB *tmp_gencb = gencb;
@@ -966,7 +966,7 @@ void BN_GENCB_set_old(BN_GENCB *gencb, void (*callback) (int, int, void *),
 }
 
 /* Populate a BN_GENCB structure with a "new"-style callback */
-void BN_GENCB_set(BN_GENCB *gencb, int (*callback) (int, int, BN_GENCB *),
+void __cdecl BN_GENCB_set(BN_GENCB *gencb, int (*callback) (int, int, BN_GENCB *),
                   void *cb_arg)
 {
     BN_GENCB *tmp_gencb = gencb;
@@ -975,7 +975,7 @@ void BN_GENCB_set(BN_GENCB *gencb, int (*callback) (int, int, BN_GENCB *),
     tmp_gencb->cb.cb_2 = callback;
 }
 
-void *BN_GENCB_get_arg(BN_GENCB *cb)
+void * __cdecl BN_GENCB_get_arg(BN_GENCB *cb)
 {
     return cb->arg;
 }
diff --git a/crypto/bn/bn_mod.c b/crypto/bn/bn_mod.c
index 712fc8ac14..74f692d527 100644
--- a/crypto/bn/bn_mod.c
+++ b/crypto/bn/bn_mod.c
@@ -10,7 +10,7 @@
 #include "internal/cryptlib.h"
 #include "bn_lcl.h"
 
-int BN_nnmod(BIGNUM *r, const BIGNUM *m, const BIGNUM *d, BN_CTX *ctx)
+int __cdecl BN_nnmod(BIGNUM *r, const BIGNUM *m, const BIGNUM *d, BN_CTX *ctx)
 {
     /*
      * like BN_mod, but returns non-negative remainder (i.e., 0 <= r < |d|
@@ -25,7 +25,7 @@ int BN_nnmod(BIGNUM *r, const BIGNUM *m, const BIGNUM *d, BN_CTX *ctx)
     return (d->neg ? BN_sub : BN_add) (r, r, d);
 }
 
-int BN_mod_add(BIGNUM *r, const BIGNUM *a, const BIGNUM *b, const BIGNUM *m,
+int __cdecl BN_mod_add(BIGNUM *r, const BIGNUM *a, const BIGNUM *b, const BIGNUM *m,
                BN_CTX *ctx)
 {
     if (!BN_add(r, a, b))
@@ -92,7 +92,7 @@ int bn_mod_add_fixed_top(BIGNUM *r, const BIGNUM *a, const BIGNUM *b,
     return 1;
 }
 
-int BN_mod_add_quick(BIGNUM *r, const BIGNUM *a, const BIGNUM *b,
+int __cdecl BN_mod_add_quick(BIGNUM *r, const BIGNUM *a, const BIGNUM *b,
                      const BIGNUM *m)
 {
     int ret = bn_mod_add_fixed_top(r, a, b, m);
@@ -103,7 +103,7 @@ int BN_mod_add_quick(BIGNUM *r, const BIGNUM *a, const BIGNUM *b,
     return ret;
 }
 
-int BN_mod_sub(BIGNUM *r, const BIGNUM *a, const BIGNUM *b, const BIGNUM *m,
+int __cdecl BN_mod_sub(BIGNUM *r, const BIGNUM *a, const BIGNUM *b, const BIGNUM *m,
                BN_CTX *ctx)
 {
     if (!BN_sub(r, a, b))
@@ -179,7 +179,7 @@ int bn_mod_sub_fixed_top(BIGNUM *r, const BIGNUM *a, const BIGNUM *b,
  * BN_mod_sub variant that may be used if both a and b are non-negative and
  * less than m
  */
-int BN_mod_sub_quick(BIGNUM *r, const BIGNUM *a, const BIGNUM *b,
+int __cdecl BN_mod_sub_quick(BIGNUM *r, const BIGNUM *a, const BIGNUM *b,
                      const BIGNUM *m)
 {
     if (!BN_sub(r, a, b))
@@ -190,7 +190,7 @@ int BN_mod_sub_quick(BIGNUM *r, const BIGNUM *a, const BIGNUM *b,
 }
 
 /* slow but works */
-int BN_mod_mul(BIGNUM *r, const BIGNUM *a, const BIGNUM *b, const BIGNUM *m,
+int __cdecl BN_mod_mul(BIGNUM *r, const BIGNUM *a, const BIGNUM *b, const BIGNUM *m,
                BN_CTX *ctx)
 {
     BIGNUM *t;
@@ -219,7 +219,7 @@ int BN_mod_mul(BIGNUM *r, const BIGNUM *a, const BIGNUM *b, const BIGNUM *m,
     return ret;
 }
 
-int BN_mod_sqr(BIGNUM *r, const BIGNUM *a, const BIGNUM *m, BN_CTX *ctx)
+int __cdecl BN_mod_sqr(BIGNUM *r, const BIGNUM *a, const BIGNUM *m, BN_CTX *ctx)
 {
     if (!BN_sqr(r, a, ctx))
         return 0;
@@ -227,7 +227,7 @@ int BN_mod_sqr(BIGNUM *r, const BIGNUM *a, const BIGNUM *m, BN_CTX *ctx)
     return BN_mod(r, r, m, ctx);
 }
 
-int BN_mod_lshift1(BIGNUM *r, const BIGNUM *a, const BIGNUM *m, BN_CTX *ctx)
+int __cdecl BN_mod_lshift1(BIGNUM *r, const BIGNUM *a, const BIGNUM *m, BN_CTX *ctx)
 {
     if (!BN_lshift1(r, a))
         return 0;
@@ -239,7 +239,7 @@ int BN_mod_lshift1(BIGNUM *r, const BIGNUM *a, const BIGNUM *m, BN_CTX *ctx)
  * BN_mod_lshift1 variant that may be used if a is non-negative and less than
  * m
  */
-int BN_mod_lshift1_quick(BIGNUM *r, const BIGNUM *a, const BIGNUM *m)
+int __cdecl BN_mod_lshift1_quick(BIGNUM *r, const BIGNUM *a, const BIGNUM *m)
 {
     if (!BN_lshift1(r, a))
         return 0;
@@ -249,7 +249,7 @@ int BN_mod_lshift1_quick(BIGNUM *r, const BIGNUM *a, const BIGNUM *m)
     return 1;
 }
 
-int BN_mod_lshift(BIGNUM *r, const BIGNUM *a, int n, const BIGNUM *m,
+int __cdecl BN_mod_lshift(BIGNUM *r, const BIGNUM *a, int n, const BIGNUM *m,
                   BN_CTX *ctx)
 {
     BIGNUM *abs_m = NULL;
@@ -276,7 +276,7 @@ int BN_mod_lshift(BIGNUM *r, const BIGNUM *a, int n, const BIGNUM *m,
  * BN_mod_lshift variant that may be used if a is non-negative and less than
  * m
  */
-int BN_mod_lshift_quick(BIGNUM *r, const BIGNUM *a, int n, const BIGNUM *m)
+int __cdecl BN_mod_lshift_quick(BIGNUM *r, const BIGNUM *a, int n, const BIGNUM *m)
 {
     if (r != a) {
         if (BN_copy(r, a) == NULL)
diff --git a/crypto/bn/bn_mont.c b/crypto/bn/bn_mont.c
index 393d27c392..e7866176bb 100644
--- a/crypto/bn/bn_mont.c
+++ b/crypto/bn/bn_mont.c
@@ -23,7 +23,7 @@
 static int bn_from_montgomery_word(BIGNUM *ret, BIGNUM *r, BN_MONT_CTX *mont);
 #endif
 
-int BN_mod_mul_montgomery(BIGNUM *r, const BIGNUM *a, const BIGNUM *b,
+int __cdecl BN_mod_mul_montgomery(BIGNUM *r, const BIGNUM *a, const BIGNUM *b,
                           BN_MONT_CTX *mont, BN_CTX *ctx)
 {
     int ret = bn_mul_mont_fixed_top(r, a, b, mont, ctx);
@@ -159,7 +159,7 @@ static int bn_from_montgomery_word(BIGNUM *ret, BIGNUM *r, BN_MONT_CTX *mont)
 }
 #endif                          /* MONT_WORD */
 
-int BN_from_montgomery(BIGNUM *ret, const BIGNUM *a, BN_MONT_CTX *mont,
+int __cdecl BN_from_montgomery(BIGNUM *ret, const BIGNUM *a, BN_MONT_CTX *mont,
                        BN_CTX *ctx)
 {
     int retn;
@@ -225,7 +225,7 @@ int bn_to_mont_fixed_top(BIGNUM *r, const BIGNUM *a, BN_MONT_CTX *mont,
     return bn_mul_mont_fixed_top(r, a, &(mont->RR), mont, ctx);
 }
 
-BN_MONT_CTX *BN_MONT_CTX_new(void)
+BN_MONT_CTX * __cdecl BN_MONT_CTX_new(void)
 {
     BN_MONT_CTX *ret;
 
@@ -249,7 +249,7 @@ void BN_MONT_CTX_init(BN_MONT_CTX *ctx)
     ctx->flags = 0;
 }
 
-void BN_MONT_CTX_free(BN_MONT_CTX *mont)
+void __cdecl BN_MONT_CTX_free(BN_MONT_CTX *mont)
 {
     if (mont == NULL)
         return;
@@ -260,7 +260,7 @@ void BN_MONT_CTX_free(BN_MONT_CTX *mont)
         OPENSSL_free(mont);
 }
 
-int BN_MONT_CTX_set(BN_MONT_CTX *mont, const BIGNUM *mod, BN_CTX *ctx)
+int __cdecl BN_MONT_CTX_set(BN_MONT_CTX *mont, const BIGNUM *mod, BN_CTX *ctx)
 {
     int i, ret = 0;
     BIGNUM *Ri, *R;
@@ -408,7 +408,7 @@ int BN_MONT_CTX_set(BN_MONT_CTX *mont, const BIGNUM *mod, BN_CTX *ctx)
     return ret;
 }
 
-BN_MONT_CTX *BN_MONT_CTX_copy(BN_MONT_CTX *to, BN_MONT_CTX *from)
+BN_MONT_CTX * __cdecl BN_MONT_CTX_copy(BN_MONT_CTX *to, BN_MONT_CTX *from)
 {
     if (to == from)
         return to;
@@ -425,7 +425,7 @@ BN_MONT_CTX *BN_MONT_CTX_copy(BN_MONT_CTX *to, BN_MONT_CTX *from)
     return to;
 }
 
-BN_MONT_CTX *BN_MONT_CTX_set_locked(BN_MONT_CTX **pmont, CRYPTO_RWLOCK *lock,
+BN_MONT_CTX * __cdecl BN_MONT_CTX_set_locked(BN_MONT_CTX **pmont, CRYPTO_RWLOCK *lock,
                                     const BIGNUM *mod, BN_CTX *ctx)
 {
     BN_MONT_CTX *ret;
diff --git a/crypto/bn/bn_mpi.c b/crypto/bn/bn_mpi.c
index 043e21d26a..335e9ff56a 100644
--- a/crypto/bn/bn_mpi.c
+++ b/crypto/bn/bn_mpi.c
@@ -11,7 +11,7 @@
 #include "internal/cryptlib.h"
 #include "bn_lcl.h"
 
-int BN_bn2mpi(const BIGNUM *a, unsigned char *d)
+int __cdecl BN_bn2mpi(const BIGNUM *a, unsigned char *d)
 {
     int bits;
     int num = 0;
@@ -39,7 +39,7 @@ int BN_bn2mpi(const BIGNUM *a, unsigned char *d)
     return (num + 4 + ext);
 }
 
-BIGNUM *BN_mpi2bn(const unsigned char *d, int n, BIGNUM *ain)
+BIGNUM * __cdecl BN_mpi2bn(const unsigned char *d, int n, BIGNUM *ain)
 {
     long len;
     int neg = 0;
diff --git a/crypto/bn/bn_mul.c b/crypto/bn/bn_mul.c
index 5eda65cfbb..fb9c4345cb 100644
--- a/crypto/bn/bn_mul.c
+++ b/crypto/bn/bn_mul.c
@@ -494,7 +494,7 @@ void bn_mul_low_recursive(BN_ULONG *r, BN_ULONG *a, BN_ULONG *b, int n2,
 }
 #endif                          /* BN_RECURSION */
 
-int BN_mul(BIGNUM *r, const BIGNUM *a, const BIGNUM *b, BN_CTX *ctx)
+int __cdecl BN_mul(BIGNUM *r, const BIGNUM *a, const BIGNUM *b, BN_CTX *ctx)
 {
     int ret = bn_mul_fixed_top(r, a, b, ctx);
 
diff --git a/crypto/bn/bn_nist.c b/crypto/bn/bn_nist.c
index dcdd321c66..ad94535001 100644
--- a/crypto/bn/bn_nist.c
+++ b/crypto/bn/bn_nist.c
@@ -224,27 +224,27 @@ static const BIGNUM _bignum_nist_p_521 = {
     BN_FLG_STATIC_DATA
 };
 
-const BIGNUM *BN_get0_nist_prime_192(void)
+const BIGNUM * __cdecl BN_get0_nist_prime_192(void)
 {
     return &_bignum_nist_p_192;
 }
 
-const BIGNUM *BN_get0_nist_prime_224(void)
+const BIGNUM * __cdecl BN_get0_nist_prime_224(void)
 {
     return &_bignum_nist_p_224;
 }
 
-const BIGNUM *BN_get0_nist_prime_256(void)
+const BIGNUM * __cdecl BN_get0_nist_prime_256(void)
 {
     return &_bignum_nist_p_256;
 }
 
-const BIGNUM *BN_get0_nist_prime_384(void)
+const BIGNUM * __cdecl BN_get0_nist_prime_384(void)
 {
     return &_bignum_nist_p_384;
 }
 
-const BIGNUM *BN_get0_nist_prime_521(void)
+const BIGNUM * __cdecl BN_get0_nist_prime_521(void)
 {
     return &_bignum_nist_p_521;
 }
@@ -315,7 +315,7 @@ static void nist_cp_bn(BN_ULONG *dst, const BN_ULONG *src, int top)
         bn_cp_64(to, 2, from, (a1) - 3) \
         }
 
-int BN_nist_mod_192(BIGNUM *r, const BIGNUM *a, const BIGNUM *field,
+int __cdecl BN_nist_mod_192(BIGNUM *r, const BIGNUM *a, const BIGNUM *field,
                     BN_CTX *ctx)
 {
     int top = a->top, i;
@@ -456,7 +456,7 @@ typedef BN_ULONG (*bn_addsub_f) (BN_ULONG *, const BN_ULONG *,
         bn_cp_32(to, 6, from, (a1) - 7) \
         }
 
-int BN_nist_mod_224(BIGNUM *r, const BIGNUM *a, const BIGNUM *field,
+int __cdecl BN_nist_mod_224(BIGNUM *r, const BIGNUM *a, const BIGNUM *field,
                     BN_CTX *ctx)
 {
     int top = a->top, i;
@@ -637,7 +637,7 @@ int BN_nist_mod_224(BIGNUM *r, const BIGNUM *a, const BIGNUM *field,
         bn_cp_32(to, 7, from, (a1) - 8) \
         }
 
-int BN_nist_mod_256(BIGNUM *r, const BIGNUM *a, const BIGNUM *field,
+int __cdecl BN_nist_mod_256(BIGNUM *r, const BIGNUM *a, const BIGNUM *field,
                     BN_CTX *ctx)
 {
     int i, top = a->top;
@@ -883,7 +883,7 @@ int BN_nist_mod_256(BIGNUM *r, const BIGNUM *a, const BIGNUM *field,
         bn_cp_32(to, 11, from, (a1) - 12)  \
         }
 
-int BN_nist_mod_384(BIGNUM *r, const BIGNUM *a, const BIGNUM *field,
+int __cdecl BN_nist_mod_384(BIGNUM *r, const BIGNUM *a, const BIGNUM *field,
                     BN_CTX *ctx)
 {
     int i, top = a->top;
@@ -1152,7 +1152,7 @@ int BN_nist_mod_384(BIGNUM *r, const BIGNUM *a, const BIGNUM *field,
 #define BN_NIST_521_LSHIFT      (BN_BITS2-BN_NIST_521_RSHIFT)
 #define BN_NIST_521_TOP_MASK    ((BN_ULONG)BN_MASK2>>BN_NIST_521_LSHIFT)
 
-int BN_nist_mod_521(BIGNUM *r, const BIGNUM *a, const BIGNUM *field,
+int __cdecl BN_nist_mod_521(BIGNUM *r, const BIGNUM *a, const BIGNUM *field,
                     BN_CTX *ctx)
 {
     int top = a->top, i;
@@ -1223,7 +1223,7 @@ int BN_nist_mod_521(BIGNUM *r, const BIGNUM *a, const BIGNUM *field,
     return 1;
 }
 
-int (*BN_nist_mod_func(const BIGNUM *p)) (BIGNUM *r, const BIGNUM *a,
+int (__cdecl *BN_nist_mod_func(const BIGNUM *p)) (BIGNUM *r, const BIGNUM *a,
                                           const BIGNUM *field, BN_CTX *ctx) {
     if (BN_ucmp(&_bignum_nist_p_192, p) == 0)
         return BN_nist_mod_192;
diff --git a/crypto/bn/bn_prime.c b/crypto/bn/bn_prime.c
index 19b081f38e..860112b30c 100644
--- a/crypto/bn/bn_prime.c
+++ b/crypto/bn/bn_prime.c
@@ -27,7 +27,7 @@ static int probable_prime_dh_safe(BIGNUM *rnd, int bits,
                                   const BIGNUM *add, const BIGNUM *rem,
                                   BN_CTX *ctx);
 
-int BN_GENCB_call(BN_GENCB *cb, int a, int b)
+int __cdecl BN_GENCB_call(BN_GENCB *cb, int a, int b)
 {
     /* No callback means continue */
     if (!cb)
@@ -49,7 +49,7 @@ int BN_GENCB_call(BN_GENCB *cb, int a, int b)
     return 0;
 }
 
-int BN_generate_prime_ex(BIGNUM *ret, int bits, int safe,
+int __cdecl BN_generate_prime_ex(BIGNUM *ret, int bits, int safe,
                          const BIGNUM *add, const BIGNUM *rem, BN_GENCB *cb)
 {
     BIGNUM *t;
@@ -145,13 +145,13 @@ int BN_generate_prime_ex(BIGNUM *ret, int bits, int safe,
     return found;
 }
 
-int BN_is_prime_ex(const BIGNUM *a, int checks, BN_CTX *ctx_passed,
+int __cdecl BN_is_prime_ex(const BIGNUM *a, int checks, BN_CTX *ctx_passed,
                    BN_GENCB *cb)
 {
     return BN_is_prime_fasttest_ex(a, checks, ctx_passed, 0, cb);
 }
 
-int BN_is_prime_fasttest_ex(const BIGNUM *a, int checks, BN_CTX *ctx_passed,
+int __cdecl BN_is_prime_fasttest_ex(const BIGNUM *a, int checks, BN_CTX *ctx_passed,
                             int do_trial_division, BN_GENCB *cb)
 {
     int i, j, ret = -1;
diff --git a/crypto/bn/bn_print.c b/crypto/bn/bn_print.c
index 1853269d90..62ac640cca 100644
--- a/crypto/bn/bn_print.c
+++ b/crypto/bn/bn_print.c
@@ -17,7 +17,7 @@
 static const char Hex[] = "0123456789ABCDEF";
 
 /* Must 'OPENSSL_free' the returned data */
-char *BN_bn2hex(const BIGNUM *a)
+char * __cdecl BN_bn2hex(const BIGNUM *a)
 {
     int i, j, v, z = 0;
     char *buf;
@@ -50,7 +50,7 @@ char *BN_bn2hex(const BIGNUM *a)
 }
 
 /* Must 'OPENSSL_free' the returned data */
-char *BN_bn2dec(const BIGNUM *a)
+char * __cdecl BN_bn2dec(const BIGNUM *a)
 {
     int i = 0, num, ok = 0, n, tbytes;
     char *buf = NULL;
@@ -123,7 +123,7 @@ char *BN_bn2dec(const BIGNUM *a)
     return NULL;
 }
 
-int BN_hex2bn(BIGNUM **bn, const char *a)
+int __cdecl BN_hex2bn(BIGNUM **bn, const char *a)
 {
     BIGNUM *ret = NULL;
     BN_ULONG l = 0;
@@ -196,7 +196,7 @@ int BN_hex2bn(BIGNUM **bn, const char *a)
     return 0;
 }
 
-int BN_dec2bn(BIGNUM **bn, const char *a)
+int __cdecl BN_dec2bn(BIGNUM **bn, const char *a)
 {
     BIGNUM *ret = NULL;
     BN_ULONG l = 0;
@@ -266,7 +266,7 @@ int BN_dec2bn(BIGNUM **bn, const char *a)
     return 0;
 }
 
-int BN_asc2bn(BIGNUM **bn, const char *a)
+int __cdecl BN_asc2bn(BIGNUM **bn, const char *a)
 {
     const char *p = a;
 
@@ -287,7 +287,7 @@ int BN_asc2bn(BIGNUM **bn, const char *a)
 }
 
 # ifndef OPENSSL_NO_STDIO
-int BN_print_fp(FILE *fp, const BIGNUM *a)
+int __cdecl BN_print_fp(FILE *fp, const BIGNUM *a)
 {
     BIO *b;
     int ret;
@@ -301,7 +301,7 @@ int BN_print_fp(FILE *fp, const BIGNUM *a)
 }
 # endif
 
-int BN_print(BIO *bp, const BIGNUM *a)
+int __cdecl BN_print(BIO *bp, const BIGNUM *a)
 {
     int i, j, v, z = 0;
     int ret = 0;
@@ -326,7 +326,7 @@ int BN_print(BIO *bp, const BIGNUM *a)
     return ret;
 }
 
-char *BN_options(void)
+char * __cdecl BN_options(void)
 {
     static int init = 0;
     static char data[16];
diff --git a/crypto/bn/bn_rand.c b/crypto/bn/bn_rand.c
index 051f29e343..e43a405cb9 100644
--- a/crypto/bn/bn_rand.c
+++ b/crypto/bn/bn_rand.c
@@ -94,17 +94,17 @@ toosmall:
     return 0;
 }
 
-int BN_rand(BIGNUM *rnd, int bits, int top, int bottom)
+int __cdecl BN_rand(BIGNUM *rnd, int bits, int top, int bottom)
 {
     return bnrand(NORMAL, rnd, bits, top, bottom);
 }
 
-int BN_bntest_rand(BIGNUM *rnd, int bits, int top, int bottom)
+int __cdecl BN_bntest_rand(BIGNUM *rnd, int bits, int top, int bottom)
 {
     return bnrand(TESTING, rnd, bits, top, bottom);
 }
 
-int BN_priv_rand(BIGNUM *rnd, int bits, int top, int bottom)
+int __cdecl BN_priv_rand(BIGNUM *rnd, int bits, int top, int bottom)
 {
     return bnrand(PRIVATE, rnd, bits, top, bottom);
 }
@@ -174,22 +174,22 @@ static int bnrand_range(BNRAND_FLAG flag, BIGNUM *r, const BIGNUM *range)
     return 1;
 }
 
-int BN_rand_range(BIGNUM *r, const BIGNUM *range)
+int __cdecl BN_rand_range(BIGNUM *r, const BIGNUM *range)
 {
     return bnrand_range(NORMAL, r, range);
 }
 
-int BN_priv_rand_range(BIGNUM *r, const BIGNUM *range)
+int __cdecl BN_priv_rand_range(BIGNUM *r, const BIGNUM *range)
 {
     return bnrand_range(PRIVATE, r, range);
 }
 
-int BN_pseudo_rand(BIGNUM *rnd, int bits, int top, int bottom)
+int __cdecl BN_pseudo_rand(BIGNUM *rnd, int bits, int top, int bottom)
 {
     return BN_rand(rnd, bits, top, bottom);
 }
 
-int BN_pseudo_rand_range(BIGNUM *r, const BIGNUM *range)
+int __cdecl BN_pseudo_rand_range(BIGNUM *r, const BIGNUM *range)
 {
     return BN_rand_range(r, range);
 }
@@ -202,7 +202,7 @@ int BN_pseudo_rand_range(BIGNUM *r, const BIGNUM *range)
  * weakness leads directly to private key exposure unless this function is
  * used.
  */
-int BN_generate_dsa_nonce(BIGNUM *out, const BIGNUM *range,
+int __cdecl BN_generate_dsa_nonce(BIGNUM *out, const BIGNUM *range,
                           const BIGNUM *priv, const unsigned char *message,
                           size_t message_len, BN_CTX *ctx)
 {
diff --git a/crypto/bn/bn_recp.c b/crypto/bn/bn_recp.c
index 9ab767f42f..a2110af2c5 100644
--- a/crypto/bn/bn_recp.c
+++ b/crypto/bn/bn_recp.c
@@ -17,7 +17,7 @@ void BN_RECP_CTX_init(BN_RECP_CTX *recp)
     bn_init(&(recp->Nr));
 }
 
-BN_RECP_CTX *BN_RECP_CTX_new(void)
+BN_RECP_CTX * __cdecl BN_RECP_CTX_new(void)
 {
     BN_RECP_CTX *ret;
 
@@ -32,7 +32,7 @@ BN_RECP_CTX *BN_RECP_CTX_new(void)
     return ret;
 }
 
-void BN_RECP_CTX_free(BN_RECP_CTX *recp)
+void __cdecl BN_RECP_CTX_free(BN_RECP_CTX *recp)
 {
     if (recp == NULL)
         return;
@@ -42,7 +42,7 @@ void BN_RECP_CTX_free(BN_RECP_CTX *recp)
         OPENSSL_free(recp);
 }
 
-int BN_RECP_CTX_set(BN_RECP_CTX *recp, const BIGNUM *d, BN_CTX *ctx)
+int __cdecl BN_RECP_CTX_set(BN_RECP_CTX *recp, const BIGNUM *d, BN_CTX *ctx)
 {
     if (!BN_copy(&(recp->N), d))
         return 0;
@@ -52,7 +52,7 @@ int BN_RECP_CTX_set(BN_RECP_CTX *recp, const BIGNUM *d, BN_CTX *ctx)
     return 1;
 }
 
-int BN_mod_mul_reciprocal(BIGNUM *r, const BIGNUM *x, const BIGNUM *y,
+int __cdecl BN_mod_mul_reciprocal(BIGNUM *r, const BIGNUM *x, const BIGNUM *y,
                           BN_RECP_CTX *recp, BN_CTX *ctx)
 {
     int ret = 0;
@@ -81,7 +81,7 @@ int BN_mod_mul_reciprocal(BIGNUM *r, const BIGNUM *x, const BIGNUM *y,
     return ret;
 }
 
-int BN_div_recp(BIGNUM *dv, BIGNUM *rem, const BIGNUM *m,
+int __cdecl BN_div_recp(BIGNUM *dv, BIGNUM *rem, const BIGNUM *m,
                 BN_RECP_CTX *recp, BN_CTX *ctx)
 {
     int i, j, ret = 0;
@@ -171,7 +171,7 @@ int BN_div_recp(BIGNUM *dv, BIGNUM *rem, const BIGNUM *m,
  * required.
  */
 /* r := 2^len / m */
-int BN_reciprocal(BIGNUM *r, const BIGNUM *m, int len, BN_CTX *ctx)
+int __cdecl BN_reciprocal(BIGNUM *r, const BIGNUM *m, int len, BN_CTX *ctx)
 {
     int ret = -1;
     BIGNUM *t;
diff --git a/crypto/bn/bn_shift.c b/crypto/bn/bn_shift.c
index b7a1e0ff9a..4276529583 100644
--- a/crypto/bn/bn_shift.c
+++ b/crypto/bn/bn_shift.c
@@ -11,7 +11,7 @@
 #include "internal/cryptlib.h"
 #include "bn_lcl.h"
 
-int BN_lshift1(BIGNUM *r, const BIGNUM *a)
+int __cdecl BN_lshift1(BIGNUM *r, const BIGNUM *a)
 {
     register BN_ULONG *ap, *rp, t, c;
     int i;
@@ -44,7 +44,7 @@ int BN_lshift1(BIGNUM *r, const BIGNUM *a)
     return 1;
 }
 
-int BN_rshift1(BIGNUM *r, const BIGNUM *a)
+int __cdecl BN_rshift1(BIGNUM *r, const BIGNUM *a)
 {
     BN_ULONG *ap, *rp, t, c;
     int i, j;
@@ -81,7 +81,7 @@ int BN_rshift1(BIGNUM *r, const BIGNUM *a)
     return 1;
 }
 
-int BN_lshift(BIGNUM *r, const BIGNUM *a, int n)
+int __cdecl BN_lshift(BIGNUM *r, const BIGNUM *a, int n)
 {
     int ret;
 
@@ -150,7 +150,7 @@ int bn_lshift_fixed_top(BIGNUM *r, const BIGNUM *a, int n)
     return 1;
 }
 
-int BN_rshift(BIGNUM *r, const BIGNUM *a, int n)
+int __cdecl BN_rshift(BIGNUM *r, const BIGNUM *a, int n)
 {
     int i, j, nw, lb, rb;
     BN_ULONG *t, *f;
diff --git a/crypto/bn/bn_sqr.c b/crypto/bn/bn_sqr.c
index 0c0a590f0c..01acfc0a46 100644
--- a/crypto/bn/bn_sqr.c
+++ b/crypto/bn/bn_sqr.c
@@ -14,7 +14,7 @@
 /*
  * I've just gone over this and it is now %20 faster on x86 - eay - 27 Jun 96
  */
-int BN_sqr(BIGNUM *r, const BIGNUM *a, BN_CTX *ctx)
+int __cdecl BN_sqr(BIGNUM *r, const BIGNUM *a, BN_CTX *ctx)
 {
     int ret = bn_sqr_fixed_top(r, a, ctx);
 
diff --git a/crypto/bn/bn_sqrt.c b/crypto/bn/bn_sqrt.c
index c3e66b033b..67b8c2e9bc 100644
--- a/crypto/bn/bn_sqrt.c
+++ b/crypto/bn/bn_sqrt.c
@@ -10,7 +10,7 @@
 #include "internal/cryptlib.h"
 #include "bn_lcl.h"
 
-BIGNUM *BN_mod_sqrt(BIGNUM *in, const BIGNUM *a, const BIGNUM *p, BN_CTX *ctx)
+BIGNUM * __cdecl BN_mod_sqrt(BIGNUM *in, const BIGNUM *a, const BIGNUM *p, BN_CTX *ctx)
 /*
  * Returns 'ret' such that ret^2 == a (mod p), using the Tonelli/Shanks
  * algorithm (cf. Henri Cohen, "A Course in Algebraic Computational Number
diff --git a/crypto/bn/bn_word.c b/crypto/bn/bn_word.c
index 262d7668fc..5a69b23337 100644
--- a/crypto/bn/bn_word.c
+++ b/crypto/bn/bn_word.c
@@ -10,7 +10,7 @@
 #include "internal/cryptlib.h"
 #include "bn_lcl.h"
 
-BN_ULONG BN_mod_word(const BIGNUM *a, BN_ULONG w)
+BN_ULONG __cdecl BN_mod_word(const BIGNUM *a, BN_ULONG w)
 {
 #ifndef BN_LLONG
     BN_ULONG ret = 0;
@@ -58,7 +58,7 @@ BN_ULONG BN_mod_word(const BIGNUM *a, BN_ULONG w)
     return (BN_ULONG)ret;
 }
 
-BN_ULONG BN_div_word(BIGNUM *a, BN_ULONG w)
+BN_ULONG __cdecl BN_div_word(BIGNUM *a, BN_ULONG w)
 {
     BN_ULONG ret = 0;
     int i, j;
@@ -95,7 +95,7 @@ BN_ULONG BN_div_word(BIGNUM *a, BN_ULONG w)
     return ret;
 }
 
-int BN_add_word(BIGNUM *a, BN_ULONG w)
+int __cdecl BN_add_word(BIGNUM *a, BN_ULONG w)
 {
     BN_ULONG l;
     int i;
@@ -131,7 +131,7 @@ int BN_add_word(BIGNUM *a, BN_ULONG w)
     return 1;
 }
 
-int BN_sub_word(BIGNUM *a, BN_ULONG w)
+int __cdecl BN_sub_word(BIGNUM *a, BN_ULONG w)
 {
     int i;
 
@@ -178,7 +178,7 @@ int BN_sub_word(BIGNUM *a, BN_ULONG w)
     return 1;
 }
 
-int BN_mul_word(BIGNUM *a, BN_ULONG w)
+int __cdecl BN_mul_word(BIGNUM *a, BN_ULONG w)
 {
     BN_ULONG ll;
 
diff --git a/crypto/bn/bn_x931p.c b/crypto/bn/bn_x931p.c
index 9eb8384fde..1f909079bf 100644
--- a/crypto/bn/bn_x931p.c
+++ b/crypto/bn/bn_x931p.c
@@ -48,7 +48,7 @@ static int bn_x931_derive_pi(BIGNUM *pi, const BIGNUM *Xpi, BN_CTX *ctx,
  * will be returned too: this is needed for testing.
  */
 
-int BN_X931_derive_prime_ex(BIGNUM *p, BIGNUM *p1, BIGNUM *p2,
+int __cdecl BN_X931_derive_prime_ex(BIGNUM *p, BIGNUM *p1, BIGNUM *p2,
                             const BIGNUM *Xp, const BIGNUM *Xp1,
                             const BIGNUM *Xp2, const BIGNUM *e, BN_CTX *ctx,
                             BN_GENCB *cb)
@@ -157,7 +157,7 @@ int BN_X931_derive_prime_ex(BIGNUM *p, BIGNUM *p1, BIGNUM *p2,
  * parameter is sum of number of bits in both.
  */
 
-int BN_X931_generate_Xpq(BIGNUM *Xp, BIGNUM *Xq, int nbits, BN_CTX *ctx)
+int __cdecl BN_X931_generate_Xpq(BIGNUM *Xp, BIGNUM *Xq, int nbits, BN_CTX *ctx)
 {
     BIGNUM *t;
     int i;
@@ -212,7 +212,7 @@ int BN_X931_generate_Xpq(BIGNUM *Xp, BIGNUM *Xq, int nbits, BN_CTX *ctx)
  * previous function and supplied as input.
  */
 
-int BN_X931_generate_prime_ex(BIGNUM *p, BIGNUM *p1, BIGNUM *p2,
+int __cdecl BN_X931_generate_prime_ex(BIGNUM *p, BIGNUM *p1, BIGNUM *p2,
                               BIGNUM *Xp1, BIGNUM *Xp2,
                               const BIGNUM *Xp,
                               const BIGNUM *e, BN_CTX *ctx, BN_GENCB *cb)
diff --git a/crypto/buffer/buf_err.c b/crypto/buffer/buf_err.c
index 7e6e53226a..7980b60764 100644
--- a/crypto/buffer/buf_err.c
+++ b/crypto/buffer/buf_err.c
@@ -26,7 +26,7 @@ static const ERR_STRING_DATA BUF_str_reasons[] = {
 
 #endif
 
-int ERR_load_BUF_strings(void)
+int __cdecl ERR_load_BUF_strings(void)
 {
 #ifndef OPENSSL_NO_ERR
     if (ERR_func_error_string(BUF_str_functs[0].error) == NULL) {
diff --git a/crypto/buffer/buffer.c b/crypto/buffer/buffer.c
index 72258abb9e..d22c318e90 100644
--- a/crypto/buffer/buffer.c
+++ b/crypto/buffer/buffer.c
@@ -18,7 +18,7 @@
  */
 #define LIMIT_BEFORE_EXPANSION 0x5ffffffc
 
-BUF_MEM *BUF_MEM_new_ex(unsigned long flags)
+BUF_MEM * __cdecl BUF_MEM_new_ex(unsigned long flags)
 {
     BUF_MEM *ret;
 
@@ -28,7 +28,7 @@ BUF_MEM *BUF_MEM_new_ex(unsigned long flags)
     return ret;
 }
 
-BUF_MEM *BUF_MEM_new(void)
+BUF_MEM * __cdecl BUF_MEM_new(void)
 {
     BUF_MEM *ret;
 
@@ -40,7 +40,7 @@ BUF_MEM *BUF_MEM_new(void)
     return ret;
 }
 
-void BUF_MEM_free(BUF_MEM *a)
+void __cdecl BUF_MEM_free(BUF_MEM *a)
 {
     if (a == NULL)
         return;
@@ -70,7 +70,7 @@ static char *sec_alloc_realloc(BUF_MEM *str, size_t len)
     return ret;
 }
 
-size_t BUF_MEM_grow(BUF_MEM *str, size_t len)
+size_t __cdecl BUF_MEM_grow(BUF_MEM *str, size_t len)
 {
     char *ret;
     size_t n;
@@ -107,7 +107,7 @@ size_t BUF_MEM_grow(BUF_MEM *str, size_t len)
     return len;
 }
 
-size_t BUF_MEM_grow_clean(BUF_MEM *str, size_t len)
+size_t __cdecl BUF_MEM_grow_clean(BUF_MEM *str, size_t len)
 {
     char *ret;
     size_t n;
@@ -145,7 +145,7 @@ size_t BUF_MEM_grow_clean(BUF_MEM *str, size_t len)
     return len;
 }
 
-void BUF_reverse(unsigned char *out, const unsigned char *in, size_t size)
+void __cdecl BUF_reverse(unsigned char *out, const unsigned char *in, size_t size)
 {
     size_t i;
     if (in) {
diff --git a/crypto/camellia/cmll_cbc.c b/crypto/camellia/cmll_cbc.c
index b19171ded2..fb26318666 100644
--- a/crypto/camellia/cmll_cbc.c
+++ b/crypto/camellia/cmll_cbc.c
@@ -10,7 +10,7 @@
 #include <openssl/camellia.h>
 #include <openssl/modes.h>
 
-void Camellia_cbc_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl Camellia_cbc_encrypt(const unsigned char *in, unsigned char *out,
                           size_t len, const CAMELLIA_KEY *key,
                           unsigned char *ivec, const int enc)
 {
diff --git a/crypto/camellia/cmll_cfb.c b/crypto/camellia/cmll_cfb.c
index 4f49eaded6..cdc2301048 100644
--- a/crypto/camellia/cmll_cfb.c
+++ b/crypto/camellia/cmll_cfb.c
@@ -16,7 +16,7 @@
  * used is contained in *num;
  */
 
-void Camellia_cfb128_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl Camellia_cfb128_encrypt(const unsigned char *in, unsigned char *out,
                              size_t length, const CAMELLIA_KEY *key,
                              unsigned char *ivec, int *num, const int enc)
 {
@@ -26,7 +26,7 @@ void Camellia_cfb128_encrypt(const unsigned char *in, unsigned char *out,
 }
 
 /* N.B. This expects the input to be packed, MS bit first */
-void Camellia_cfb1_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl Camellia_cfb1_encrypt(const unsigned char *in, unsigned char *out,
                            size_t length, const CAMELLIA_KEY *key,
                            unsigned char *ivec, int *num, const int enc)
 {
@@ -34,7 +34,7 @@ void Camellia_cfb1_encrypt(const unsigned char *in, unsigned char *out,
                             (block128_f) Camellia_encrypt);
 }
 
-void Camellia_cfb8_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl Camellia_cfb8_encrypt(const unsigned char *in, unsigned char *out,
                            size_t length, const CAMELLIA_KEY *key,
                            unsigned char *ivec, int *num, const int enc)
 {
diff --git a/crypto/camellia/cmll_ctr.c b/crypto/camellia/cmll_ctr.c
index 161d1e18c1..22d866e810 100644
--- a/crypto/camellia/cmll_ctr.c
+++ b/crypto/camellia/cmll_ctr.c
@@ -10,7 +10,7 @@
 #include <openssl/camellia.h>
 #include <openssl/modes.h>
 
-void Camellia_ctr128_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl Camellia_ctr128_encrypt(const unsigned char *in, unsigned char *out,
                              size_t length, const CAMELLIA_KEY *key,
                              unsigned char ivec[CAMELLIA_BLOCK_SIZE],
                              unsigned char ecount_buf[CAMELLIA_BLOCK_SIZE],
diff --git a/crypto/camellia/cmll_ecb.c b/crypto/camellia/cmll_ecb.c
index d932f1b375..e45cf04902 100644
--- a/crypto/camellia/cmll_ecb.c
+++ b/crypto/camellia/cmll_ecb.c
@@ -10,7 +10,7 @@
 #include <openssl/camellia.h>
 #include "cmll_locl.h"
 
-void Camellia_ecb_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl Camellia_ecb_encrypt(const unsigned char *in, unsigned char *out,
                           const CAMELLIA_KEY *key, const int enc)
 {
     if (CAMELLIA_ENCRYPT == enc)
diff --git a/crypto/camellia/cmll_misc.c b/crypto/camellia/cmll_misc.c
index e5f014b79c..4179aec6b5 100644
--- a/crypto/camellia/cmll_misc.c
+++ b/crypto/camellia/cmll_misc.c
@@ -11,7 +11,7 @@
 #include <openssl/camellia.h>
 #include "cmll_locl.h"
 
-int Camellia_set_key(const unsigned char *userKey, const int bits,
+int __cdecl Camellia_set_key(const unsigned char *userKey, const int bits,
                      CAMELLIA_KEY *key)
 {
     if (!userKey || !key)
@@ -22,13 +22,13 @@ int Camellia_set_key(const unsigned char *userKey, const int bits,
     return 0;
 }
 
-void Camellia_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl Camellia_encrypt(const unsigned char *in, unsigned char *out,
                       const CAMELLIA_KEY *key)
 {
     Camellia_EncryptBlock_Rounds(key->grand_rounds, in, key->u.rd_key, out);
 }
 
-void Camellia_decrypt(const unsigned char *in, unsigned char *out,
+void __cdecl Camellia_decrypt(const unsigned char *in, unsigned char *out,
                       const CAMELLIA_KEY *key)
 {
     Camellia_DecryptBlock_Rounds(key->grand_rounds, in, key->u.rd_key, out);
diff --git a/crypto/camellia/cmll_ofb.c b/crypto/camellia/cmll_ofb.c
index b43c685c75..313e0ad165 100644
--- a/crypto/camellia/cmll_ofb.c
+++ b/crypto/camellia/cmll_ofb.c
@@ -15,7 +15,7 @@
  * The extra state information to record how much of the 128bit block we have
  * used is contained in *num;
  */
-void Camellia_ofb128_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl Camellia_ofb128_encrypt(const unsigned char *in, unsigned char *out,
                              size_t length, const CAMELLIA_KEY *key,
                              unsigned char *ivec, int *num)
 {
diff --git a/crypto/cast/c_cfb64.c b/crypto/cast/c_cfb64.c
index bd7cb2f468..1de8cafef3 100644
--- a/crypto/cast/c_cfb64.c
+++ b/crypto/cast/c_cfb64.c
@@ -16,7 +16,7 @@
  * used is contained in *num;
  */
 
-void CAST_cfb64_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl CAST_cfb64_encrypt(const unsigned char *in, unsigned char *out,
                         long length, const CAST_KEY *schedule,
                         unsigned char *ivec, int *num, int enc)
 {
diff --git a/crypto/cast/c_ecb.c b/crypto/cast/c_ecb.c
index da4179438f..35fca6cac3 100644
--- a/crypto/cast/c_ecb.c
+++ b/crypto/cast/c_ecb.c
@@ -11,7 +11,7 @@
 #include "cast_lcl.h"
 #include <openssl/opensslv.h>
 
-void CAST_ecb_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl CAST_ecb_encrypt(const unsigned char *in, unsigned char *out,
                       const CAST_KEY *ks, int enc)
 {
     CAST_LONG l, d[2];
diff --git a/crypto/cast/c_enc.c b/crypto/cast/c_enc.c
index 700b6d162a..79ef8d1d3a 100644
--- a/crypto/cast/c_enc.c
+++ b/crypto/cast/c_enc.c
@@ -10,7 +10,7 @@
 #include <openssl/cast.h>
 #include "cast_lcl.h"
 
-void CAST_encrypt(CAST_LONG *data, const CAST_KEY *key)
+void __cdecl CAST_encrypt(CAST_LONG *data, const CAST_KEY *key)
 {
     CAST_LONG l, r, t;
     const CAST_LONG *k;
@@ -42,7 +42,7 @@ void CAST_encrypt(CAST_LONG *data, const CAST_KEY *key)
     data[0] = r & 0xffffffffL;
 }
 
-void CAST_decrypt(CAST_LONG *data, const CAST_KEY *key)
+void __cdecl CAST_decrypt(CAST_LONG *data, const CAST_KEY *key)
 {
     CAST_LONG l, r, t;
     const CAST_LONG *k;
@@ -74,7 +74,7 @@ void CAST_decrypt(CAST_LONG *data, const CAST_KEY *key)
     data[0] = r & 0xffffffffL;
 }
 
-void CAST_cbc_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl CAST_cbc_encrypt(const unsigned char *in, unsigned char *out,
                       long length, const CAST_KEY *ks, unsigned char *iv,
                       int enc)
 {
diff --git a/crypto/cast/c_ofb64.c b/crypto/cast/c_ofb64.c
index dffb074762..5633b76659 100644
--- a/crypto/cast/c_ofb64.c
+++ b/crypto/cast/c_ofb64.c
@@ -15,7 +15,7 @@
  * The extra state information to record how much of the 64bit block we have
  * used is contained in *num;
  */
-void CAST_ofb64_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl CAST_ofb64_encrypt(const unsigned char *in, unsigned char *out,
                         long length, const CAST_KEY *schedule,
                         unsigned char *ivec, int *num)
 {
diff --git a/crypto/cast/c_skey.c b/crypto/cast/c_skey.c
index 962d2a60b4..16aa1b085e 100644
--- a/crypto/cast/c_skey.c
+++ b/crypto/cast/c_skey.c
@@ -23,7 +23,7 @@
 #define S6 CAST_S_table6
 #define S7 CAST_S_table7
 
-void CAST_set_key(CAST_KEY *key, int len, const unsigned char *data)
+void __cdecl CAST_set_key(CAST_KEY *key, int len, const unsigned char *data)
 {
     CAST_LONG x[16];
     CAST_LONG z[16];
diff --git a/crypto/cmac/cmac.c b/crypto/cmac/cmac.c
index 6989c32d06..7bc58bb88d 100644
--- a/crypto/cmac/cmac.c
+++ b/crypto/cmac/cmac.c
@@ -43,7 +43,7 @@ static void make_kn(unsigned char *k1, const unsigned char *l, int bl)
     k1[i] = (c << 1) ^ ((0 - carry) & (bl == 16 ? 0x87 : 0x1b));
 }
 
-CMAC_CTX *CMAC_CTX_new(void)
+CMAC_CTX * __cdecl CMAC_CTX_new(void)
 {
     CMAC_CTX *ctx;
 
@@ -60,7 +60,7 @@ CMAC_CTX *CMAC_CTX_new(void)
     return ctx;
 }
 
-void CMAC_CTX_cleanup(CMAC_CTX *ctx)
+void __cdecl CMAC_CTX_cleanup(CMAC_CTX *ctx)
 {
     EVP_CIPHER_CTX_reset(ctx->cctx);
     OPENSSL_cleanse(ctx->tbl, EVP_MAX_BLOCK_LENGTH);
@@ -70,12 +70,12 @@ void CMAC_CTX_cleanup(CMAC_CTX *ctx)
     ctx->nlast_block = -1;
 }
 
-EVP_CIPHER_CTX *CMAC_CTX_get0_cipher_ctx(CMAC_CTX *ctx)
+EVP_CIPHER_CTX * __cdecl CMAC_CTX_get0_cipher_ctx(CMAC_CTX *ctx)
 {
     return ctx->cctx;
 }
 
-void CMAC_CTX_free(CMAC_CTX *ctx)
+void __cdecl CMAC_CTX_free(CMAC_CTX *ctx)
 {
     if (!ctx)
         return;
@@ -84,7 +84,7 @@ void CMAC_CTX_free(CMAC_CTX *ctx)
     OPENSSL_free(ctx);
 }
 
-int CMAC_CTX_copy(CMAC_CTX *out, const CMAC_CTX *in)
+int __cdecl CMAC_CTX_copy(CMAC_CTX *out, const CMAC_CTX *in)
 {
     int bl;
     if (in->nlast_block == -1)
@@ -100,7 +100,7 @@ int CMAC_CTX_copy(CMAC_CTX *out, const CMAC_CTX *in)
     return 1;
 }
 
-int CMAC_Init(CMAC_CTX *ctx, const void *key, size_t keylen,
+int __cdecl CMAC_Init(CMAC_CTX *ctx, const void *key, size_t keylen,
               const EVP_CIPHER *cipher, ENGINE *impl)
 {
     static const unsigned char zero_iv[EVP_MAX_BLOCK_LENGTH] = { 0 };
@@ -143,7 +143,7 @@ int CMAC_Init(CMAC_CTX *ctx, const void *key, size_t keylen,
     return 1;
 }
 
-int CMAC_Update(CMAC_CTX *ctx, const void *in, size_t dlen)
+int __cdecl CMAC_Update(CMAC_CTX *ctx, const void *in, size_t dlen)
 {
     const unsigned char *data = in;
     size_t bl;
@@ -183,7 +183,7 @@ int CMAC_Update(CMAC_CTX *ctx, const void *in, size_t dlen)
 
 }
 
-int CMAC_Final(CMAC_CTX *ctx, unsigned char *out, size_t *poutlen)
+int __cdecl CMAC_Final(CMAC_CTX *ctx, unsigned char *out, size_t *poutlen)
 {
     int i, bl, lb;
     if (ctx->nlast_block == -1)
@@ -211,7 +211,7 @@ int CMAC_Final(CMAC_CTX *ctx, unsigned char *out, size_t *poutlen)
     return 1;
 }
 
-int CMAC_resume(CMAC_CTX *ctx)
+int __cdecl CMAC_resume(CMAC_CTX *ctx)
 {
     if (ctx->nlast_block == -1)
         return 0;
diff --git a/crypto/cms/cms_asn1.c b/crypto/cms/cms_asn1.c
index 993ea6b219..1d42f1d800 100644
--- a/crypto/cms/cms_asn1.c
+++ b/crypto/cms/cms_asn1.c
@@ -372,7 +372,7 @@ ASN1_SEQUENCE(CMS_SharedInfo) = {
   ASN1_EXP_OPT(CMS_SharedInfo, suppPubInfo, ASN1_OCTET_STRING, 2),
 } static_ASN1_SEQUENCE_END(CMS_SharedInfo)
 
-int CMS_SharedInfo_encode(unsigned char **pder, X509_ALGOR *kekalg,
+int __cdecl CMS_SharedInfo_encode(unsigned char **pder, X509_ALGOR *kekalg,
                           ASN1_OCTET_STRING *ukm, int keylen)
 {
     union {
diff --git a/crypto/cms/cms_att.c b/crypto/cms/cms_att.c
index 0566019753..2354bf1b49 100644
--- a/crypto/cms/cms_att.c
+++ b/crypto/cms/cms_att.c
@@ -66,40 +66,40 @@ static const struct {
 
 /* CMS SignedData Attribute utilities */
 
-int CMS_signed_get_attr_count(const CMS_SignerInfo *si)
+int __cdecl CMS_signed_get_attr_count(const CMS_SignerInfo *si)
 {
     return X509at_get_attr_count(si->signedAttrs);
 }
 
-int CMS_signed_get_attr_by_NID(const CMS_SignerInfo *si, int nid, int lastpos)
+int __cdecl CMS_signed_get_attr_by_NID(const CMS_SignerInfo *si, int nid, int lastpos)
 {
     return X509at_get_attr_by_NID(si->signedAttrs, nid, lastpos);
 }
 
-int CMS_signed_get_attr_by_OBJ(const CMS_SignerInfo *si, const ASN1_OBJECT *obj,
+int __cdecl CMS_signed_get_attr_by_OBJ(const CMS_SignerInfo *si, const ASN1_OBJECT *obj,
                                int lastpos)
 {
     return X509at_get_attr_by_OBJ(si->signedAttrs, obj, lastpos);
 }
 
-X509_ATTRIBUTE *CMS_signed_get_attr(const CMS_SignerInfo *si, int loc)
+X509_ATTRIBUTE * __cdecl CMS_signed_get_attr(const CMS_SignerInfo *si, int loc)
 {
     return X509at_get_attr(si->signedAttrs, loc);
 }
 
-X509_ATTRIBUTE *CMS_signed_delete_attr(CMS_SignerInfo *si, int loc)
+X509_ATTRIBUTE * __cdecl CMS_signed_delete_attr(CMS_SignerInfo *si, int loc)
 {
     return X509at_delete_attr(si->signedAttrs, loc);
 }
 
-int CMS_signed_add1_attr(CMS_SignerInfo *si, X509_ATTRIBUTE *attr)
+int __cdecl CMS_signed_add1_attr(CMS_SignerInfo *si, X509_ATTRIBUTE *attr)
 {
     if (X509at_add1_attr(&si->signedAttrs, attr))
         return 1;
     return 0;
 }
 
-int CMS_signed_add1_attr_by_OBJ(CMS_SignerInfo *si,
+int __cdecl CMS_signed_add1_attr_by_OBJ(CMS_SignerInfo *si,
                                 const ASN1_OBJECT *obj, int type,
                                 const void *bytes, int len)
 {
@@ -108,7 +108,7 @@ int CMS_signed_add1_attr_by_OBJ(CMS_SignerInfo *si,
     return 0;
 }
 
-int CMS_signed_add1_attr_by_NID(CMS_SignerInfo *si,
+int __cdecl CMS_signed_add1_attr_by_NID(CMS_SignerInfo *si,
                                 int nid, int type, const void *bytes, int len)
 {
     if (X509at_add1_attr_by_NID(&si->signedAttrs, nid, type, bytes, len))
@@ -116,7 +116,7 @@ int CMS_signed_add1_attr_by_NID(CMS_SignerInfo *si,
     return 0;
 }
 
-int CMS_signed_add1_attr_by_txt(CMS_SignerInfo *si,
+int __cdecl CMS_signed_add1_attr_by_txt(CMS_SignerInfo *si,
                                 const char *attrname, int type,
                                 const void *bytes, int len)
 {
@@ -125,47 +125,47 @@ int CMS_signed_add1_attr_by_txt(CMS_SignerInfo *si,
     return 0;
 }
 
-void *CMS_signed_get0_data_by_OBJ(CMS_SignerInfo *si, const ASN1_OBJECT *oid,
+void * __cdecl CMS_signed_get0_data_by_OBJ(CMS_SignerInfo *si, const ASN1_OBJECT *oid,
                                   int lastpos, int type)
 {
     return X509at_get0_data_by_OBJ(si->signedAttrs, oid, lastpos, type);
 }
 
-int CMS_unsigned_get_attr_count(const CMS_SignerInfo *si)
+int __cdecl CMS_unsigned_get_attr_count(const CMS_SignerInfo *si)
 {
     return X509at_get_attr_count(si->unsignedAttrs);
 }
 
-int CMS_unsigned_get_attr_by_NID(const CMS_SignerInfo *si, int nid,
+int __cdecl CMS_unsigned_get_attr_by_NID(const CMS_SignerInfo *si, int nid,
                                  int lastpos)
 {
     return X509at_get_attr_by_NID(si->unsignedAttrs, nid, lastpos);
 }
 
-int CMS_unsigned_get_attr_by_OBJ(const CMS_SignerInfo *si,
+int __cdecl CMS_unsigned_get_attr_by_OBJ(const CMS_SignerInfo *si,
                                  const ASN1_OBJECT *obj, int lastpos)
 {
     return X509at_get_attr_by_OBJ(si->unsignedAttrs, obj, lastpos);
 }
 
-X509_ATTRIBUTE *CMS_unsigned_get_attr(const CMS_SignerInfo *si, int loc)
+X509_ATTRIBUTE * __cdecl CMS_unsigned_get_attr(const CMS_SignerInfo *si, int loc)
 {
     return X509at_get_attr(si->unsignedAttrs, loc);
 }
 
-X509_ATTRIBUTE *CMS_unsigned_delete_attr(CMS_SignerInfo *si, int loc)
+X509_ATTRIBUTE * __cdecl CMS_unsigned_delete_attr(CMS_SignerInfo *si, int loc)
 {
     return X509at_delete_attr(si->unsignedAttrs, loc);
 }
 
-int CMS_unsigned_add1_attr(CMS_SignerInfo *si, X509_ATTRIBUTE *attr)
+int __cdecl CMS_unsigned_add1_attr(CMS_SignerInfo *si, X509_ATTRIBUTE *attr)
 {
     if (X509at_add1_attr(&si->unsignedAttrs, attr))
         return 1;
     return 0;
 }
 
-int CMS_unsigned_add1_attr_by_OBJ(CMS_SignerInfo *si,
+int __cdecl CMS_unsigned_add1_attr_by_OBJ(CMS_SignerInfo *si,
                                   const ASN1_OBJECT *obj, int type,
                                   const void *bytes, int len)
 {
@@ -174,7 +174,7 @@ int CMS_unsigned_add1_attr_by_OBJ(CMS_SignerInfo *si,
     return 0;
 }
 
-int CMS_unsigned_add1_attr_by_NID(CMS_SignerInfo *si,
+int __cdecl CMS_unsigned_add1_attr_by_NID(CMS_SignerInfo *si,
                                   int nid, int type,
                                   const void *bytes, int len)
 {
@@ -183,7 +183,7 @@ int CMS_unsigned_add1_attr_by_NID(CMS_SignerInfo *si,
     return 0;
 }
 
-int CMS_unsigned_add1_attr_by_txt(CMS_SignerInfo *si,
+int __cdecl CMS_unsigned_add1_attr_by_txt(CMS_SignerInfo *si,
                                   const char *attrname, int type,
                                   const void *bytes, int len)
 {
@@ -193,7 +193,7 @@ int CMS_unsigned_add1_attr_by_txt(CMS_SignerInfo *si,
     return 0;
 }
 
-void *CMS_unsigned_get0_data_by_OBJ(CMS_SignerInfo *si, ASN1_OBJECT *oid,
+void * __cdecl CMS_unsigned_get0_data_by_OBJ(CMS_SignerInfo *si, ASN1_OBJECT *oid,
                                     int lastpos, int type)
 {
     return X509at_get0_data_by_OBJ(si->unsignedAttrs, oid, lastpos, type);
diff --git a/crypto/cms/cms_enc.c b/crypto/cms/cms_enc.c
index a1719830e8..d1f52954f7 100644
--- a/crypto/cms/cms_enc.c
+++ b/crypto/cms/cms_enc.c
@@ -180,7 +180,7 @@ int cms_EncryptedContent_init(CMS_EncryptedContentInfo *ec,
     return 1;
 }
 
-int CMS_EncryptedData_set1_key(CMS_ContentInfo *cms, const EVP_CIPHER *ciph,
+int __cdecl CMS_EncryptedData_set1_key(CMS_ContentInfo *cms, const EVP_CIPHER *ciph,
                                const unsigned char *key, size_t keylen)
 {
     CMS_EncryptedContentInfo *ec;
diff --git a/crypto/cms/cms_env.c b/crypto/cms/cms_env.c
index 26fb81f79a..b28624c111 100644
--- a/crypto/cms/cms_env.c
+++ b/crypto/cms/cms_env.c
@@ -78,7 +78,7 @@ int cms_env_asn1_ctrl(CMS_RecipientInfo *ri, int cmd)
     return 1;
 }
 
-STACK_OF(CMS_RecipientInfo) *CMS_get0_RecipientInfos(CMS_ContentInfo *cms)
+STACK_OF(CMS_RecipientInfo) * __cdecl CMS_get0_RecipientInfos(CMS_ContentInfo *cms)
 {
     CMS_EnvelopedData *env;
     env = cms_get0_enveloped(cms);
@@ -87,12 +87,12 @@ STACK_OF(CMS_RecipientInfo) *CMS_get0_RecipientInfos(CMS_ContentInfo *cms)
     return env->recipientInfos;
 }
 
-int CMS_RecipientInfo_type(CMS_RecipientInfo *ri)
+int __cdecl CMS_RecipientInfo_type(CMS_RecipientInfo *ri)
 {
     return ri->type;
 }
 
-EVP_PKEY_CTX *CMS_RecipientInfo_get0_pkey_ctx(CMS_RecipientInfo *ri)
+EVP_PKEY_CTX * __cdecl CMS_RecipientInfo_get0_pkey_ctx(CMS_RecipientInfo *ri)
 {
     if (ri->type == CMS_RECIPINFO_TRANS)
         return ri->d.ktri->pctx;
@@ -101,7 +101,7 @@ EVP_PKEY_CTX *CMS_RecipientInfo_get0_pkey_ctx(CMS_RecipientInfo *ri)
     return NULL;
 }
 
-CMS_ContentInfo *CMS_EnvelopedData_create(const EVP_CIPHER *cipher)
+CMS_ContentInfo *__cdecl CMS_EnvelopedData_create(const EVP_CIPHER *cipher)
 {
     CMS_ContentInfo *cms;
     CMS_EnvelopedData *env;
@@ -175,7 +175,7 @@ static int cms_RecipientInfo_ktri_init(CMS_RecipientInfo *ri, X509 *recip,
  * Add a recipient certificate using appropriate type of RecipientInfo
  */
 
-CMS_RecipientInfo *CMS_add1_recipient_cert(CMS_ContentInfo *cms,
+CMS_RecipientInfo * __cdecl CMS_add1_recipient_cert(CMS_ContentInfo *cms,
                                            X509 *recip, unsigned int flags)
 {
     CMS_RecipientInfo *ri = NULL;
@@ -228,7 +228,7 @@ CMS_RecipientInfo *CMS_add1_recipient_cert(CMS_ContentInfo *cms,
 
 }
 
-int CMS_RecipientInfo_ktri_get0_algs(CMS_RecipientInfo *ri,
+int __cdecl CMS_RecipientInfo_ktri_get0_algs(CMS_RecipientInfo *ri,
                                      EVP_PKEY **pk, X509 **recip,
                                      X509_ALGOR **palg)
 {
@@ -250,7 +250,7 @@ int CMS_RecipientInfo_ktri_get0_algs(CMS_RecipientInfo *ri,
     return 1;
 }
 
-int CMS_RecipientInfo_ktri_get0_signer_id(CMS_RecipientInfo *ri,
+int __cdecl CMS_RecipientInfo_ktri_get0_signer_id(CMS_RecipientInfo *ri,
                                           ASN1_OCTET_STRING **keyid,
                                           X509_NAME **issuer,
                                           ASN1_INTEGER **sno)
@@ -266,7 +266,7 @@ int CMS_RecipientInfo_ktri_get0_signer_id(CMS_RecipientInfo *ri,
     return cms_SignerIdentifier_get0_signer_id(ktri->rid, keyid, issuer, sno);
 }
 
-int CMS_RecipientInfo_ktri_cert_cmp(CMS_RecipientInfo *ri, X509 *cert)
+int __cdecl CMS_RecipientInfo_ktri_cert_cmp(CMS_RecipientInfo *ri, X509 *cert)
 {
     if (ri->type != CMS_RECIPINFO_TRANS) {
         CMSerr(CMS_F_CMS_RECIPIENTINFO_KTRI_CERT_CMP,
@@ -276,7 +276,7 @@ int CMS_RecipientInfo_ktri_cert_cmp(CMS_RecipientInfo *ri, X509 *cert)
     return cms_SignerIdentifier_cert_cmp(ri->d.ktri->rid, cert);
 }
 
-int CMS_RecipientInfo_set0_pkey(CMS_RecipientInfo *ri, EVP_PKEY *pkey)
+int __cdecl CMS_RecipientInfo_set0_pkey(CMS_RecipientInfo *ri, EVP_PKEY *pkey)
 {
     if (ri->type != CMS_RECIPINFO_TRANS) {
         CMSerr(CMS_F_CMS_RECIPIENTINFO_SET0_PKEY, CMS_R_NOT_KEY_TRANSPORT);
@@ -439,7 +439,7 @@ static int cms_RecipientInfo_ktri_decrypt(CMS_ContentInfo *cms,
 
 /* Key Encrypted Key (KEK) RecipientInfo routines */
 
-int CMS_RecipientInfo_kekri_id_cmp(CMS_RecipientInfo *ri,
+int __cdecl CMS_RecipientInfo_kekri_id_cmp(CMS_RecipientInfo *ri,
                                    const unsigned char *id, size_t idlen)
 {
     ASN1_OCTET_STRING tmp_os;
@@ -475,7 +475,7 @@ static size_t aes_wrap_keylen(int nid)
     }
 }
 
-CMS_RecipientInfo *CMS_add0_recipient_key(CMS_ContentInfo *cms, int nid,
+CMS_RecipientInfo * __cdecl CMS_add0_recipient_key(CMS_ContentInfo *cms, int nid,
                                           unsigned char *key, size_t keylen,
                                           unsigned char *id, size_t idlen,
                                           ASN1_GENERALIZEDTIME *date,
@@ -575,7 +575,7 @@ CMS_RecipientInfo *CMS_add0_recipient_key(CMS_ContentInfo *cms, int nid,
 
 }
 
-int CMS_RecipientInfo_kekri_get0_id(CMS_RecipientInfo *ri,
+int __cdecl CMS_RecipientInfo_kekri_get0_id(CMS_RecipientInfo *ri,
                                     X509_ALGOR **palg,
                                     ASN1_OCTET_STRING **pid,
                                     ASN1_GENERALIZEDTIME **pdate,
@@ -609,7 +609,7 @@ int CMS_RecipientInfo_kekri_get0_id(CMS_RecipientInfo *ri,
     return 1;
 }
 
-int CMS_RecipientInfo_set0_key(CMS_RecipientInfo *ri,
+int __cdecl CMS_RecipientInfo_set0_key(CMS_RecipientInfo *ri,
                                unsigned char *key, size_t keylen)
 {
     CMS_KEKRecipientInfo *kekri;
@@ -752,7 +752,7 @@ static int cms_RecipientInfo_kekri_decrypt(CMS_ContentInfo *cms,
 
 }
 
-int CMS_RecipientInfo_decrypt(CMS_ContentInfo *cms, CMS_RecipientInfo *ri)
+int __cdecl CMS_RecipientInfo_decrypt(CMS_ContentInfo *cms, CMS_RecipientInfo *ri)
 {
     switch (ri->type) {
     case CMS_RECIPINFO_TRANS:
@@ -771,7 +771,7 @@ int CMS_RecipientInfo_decrypt(CMS_ContentInfo *cms, CMS_RecipientInfo *ri)
     }
 }
 
-int CMS_RecipientInfo_encrypt(CMS_ContentInfo *cms, CMS_RecipientInfo *ri)
+int __cdecl CMS_RecipientInfo_encrypt(CMS_ContentInfo *cms, CMS_RecipientInfo *ri)
 {
     switch (ri->type) {
     case CMS_RECIPINFO_TRANS:
diff --git a/crypto/cms/cms_err.c b/crypto/cms/cms_err.c
index a211f4954c..6812833251 100644
--- a/crypto/cms/cms_err.c
+++ b/crypto/cms/cms_err.c
@@ -285,7 +285,7 @@ static const ERR_STRING_DATA CMS_str_reasons[] = {
 
 #endif
 
-int ERR_load_CMS_strings(void)
+int __cdecl ERR_load_CMS_strings(void)
 {
 #ifndef OPENSSL_NO_ERR
     if (ERR_func_error_string(CMS_str_functs[0].error) == NULL) {
diff --git a/crypto/cms/cms_ess.c b/crypto/cms/cms_ess.c
index 4780231c22..d50a5d94a4 100644
--- a/crypto/cms/cms_ess.c
+++ b/crypto/cms/cms_ess.c
@@ -20,7 +20,7 @@ IMPLEMENT_ASN1_FUNCTIONS(CMS_ReceiptRequest)
 
 /* ESS services: for now just Signed Receipt related */
 
-int CMS_get1_ReceiptRequest(CMS_SignerInfo *si, CMS_ReceiptRequest **prr)
+int __cdecl CMS_get1_ReceiptRequest(CMS_SignerInfo *si, CMS_ReceiptRequest **prr)
 {
     ASN1_STRING *str;
     CMS_ReceiptRequest *rr = NULL;
@@ -43,7 +43,7 @@ int CMS_get1_ReceiptRequest(CMS_SignerInfo *si, CMS_ReceiptRequest **prr)
     return 1;
 }
 
-CMS_ReceiptRequest *CMS_ReceiptRequest_create0(unsigned char *id, int idlen,
+CMS_ReceiptRequest * __cdecl CMS_ReceiptRequest_create0(unsigned char *id, int idlen,
                                                int allorfirst,
                                                STACK_OF(GENERAL_NAMES)
                                                *receiptList, STACK_OF(GENERAL_NAMES)
@@ -85,7 +85,7 @@ CMS_ReceiptRequest *CMS_ReceiptRequest_create0(unsigned char *id, int idlen,
 
 }
 
-int CMS_add1_ReceiptRequest(CMS_SignerInfo *si, CMS_ReceiptRequest *rr)
+int __cdecl CMS_add1_ReceiptRequest(CMS_SignerInfo *si, CMS_ReceiptRequest *rr)
 {
     unsigned char *rrder = NULL;
     int rrderlen, r = 0;
@@ -110,7 +110,7 @@ int CMS_add1_ReceiptRequest(CMS_SignerInfo *si, CMS_ReceiptRequest *rr)
 
 }
 
-void CMS_ReceiptRequest_get0_values(CMS_ReceiptRequest *rr,
+void __cdecl CMS_ReceiptRequest_get0_values(CMS_ReceiptRequest *rr,
                                     ASN1_STRING **pcid,
                                     int *pallorfirst,
                                     STACK_OF(GENERAL_NAMES) **plist,
diff --git a/crypto/cms/cms_io.c b/crypto/cms/cms_io.c
index d18f980a97..9665751f04 100644
--- a/crypto/cms/cms_io.c
+++ b/crypto/cms/cms_io.c
@@ -14,7 +14,7 @@
 #include <openssl/cms.h>
 #include "cms_lcl.h"
 
-int CMS_stream(unsigned char ***boundary, CMS_ContentInfo *cms)
+int __cdecl CMS_stream(unsigned char ***boundary, CMS_ContentInfo *cms)
 {
     ASN1_OCTET_STRING **pos;
     pos = CMS_get0_content(cms);
@@ -32,19 +32,19 @@ int CMS_stream(unsigned char ***boundary, CMS_ContentInfo *cms)
     return 0;
 }
 
-CMS_ContentInfo *d2i_CMS_bio(BIO *bp, CMS_ContentInfo **cms)
+CMS_ContentInfo * __cdecl d2i_CMS_bio(BIO *bp, CMS_ContentInfo **cms)
 {
     return ASN1_item_d2i_bio(ASN1_ITEM_rptr(CMS_ContentInfo), bp, cms);
 }
 
-int i2d_CMS_bio(BIO *bp, CMS_ContentInfo *cms)
+int __cdecl i2d_CMS_bio(BIO *bp, CMS_ContentInfo *cms)
 {
     return ASN1_item_i2d_bio(ASN1_ITEM_rptr(CMS_ContentInfo), bp, cms);
 }
 
 IMPLEMENT_PEM_rw_const(CMS, CMS_ContentInfo, PEM_STRING_CMS, CMS_ContentInfo)
 
-BIO *BIO_new_CMS(BIO *out, CMS_ContentInfo *cms)
+BIO * __cdecl BIO_new_CMS(BIO *out, CMS_ContentInfo *cms)
 {
     return BIO_new_NDEF(out, (ASN1_VALUE *)cms,
                         ASN1_ITEM_rptr(CMS_ContentInfo));
@@ -52,20 +52,20 @@ BIO *BIO_new_CMS(BIO *out, CMS_ContentInfo *cms)
 
 /* CMS wrappers round generalised stream and MIME routines */
 
-int i2d_CMS_bio_stream(BIO *out, CMS_ContentInfo *cms, BIO *in, int flags)
+int __cdecl i2d_CMS_bio_stream(BIO *out, CMS_ContentInfo *cms, BIO *in, int flags)
 {
     return i2d_ASN1_bio_stream(out, (ASN1_VALUE *)cms, in, flags,
                                ASN1_ITEM_rptr(CMS_ContentInfo));
 }
 
-int PEM_write_bio_CMS_stream(BIO *out, CMS_ContentInfo *cms, BIO *in,
+int __cdecl PEM_write_bio_CMS_stream(BIO *out, CMS_ContentInfo *cms, BIO *in,
                              int flags)
 {
     return PEM_write_bio_ASN1_stream(out, (ASN1_VALUE *)cms, in, flags,
                                      "CMS", ASN1_ITEM_rptr(CMS_ContentInfo));
 }
 
-int SMIME_write_CMS(BIO *bio, CMS_ContentInfo *cms, BIO *data, int flags)
+int __cdecl SMIME_write_CMS(BIO *bio, CMS_ContentInfo *cms, BIO *data, int flags)
 {
     STACK_OF(X509_ALGOR) *mdalgs;
     int ctype_nid = OBJ_obj2nid(cms->contentType);
@@ -80,7 +80,7 @@ int SMIME_write_CMS(BIO *bio, CMS_ContentInfo *cms, BIO *data, int flags)
                             ASN1_ITEM_rptr(CMS_ContentInfo));
 }
 
-CMS_ContentInfo *SMIME_read_CMS(BIO *bio, BIO **bcont)
+CMS_ContentInfo * __cdecl SMIME_read_CMS(BIO *bio, BIO **bcont)
 {
     return (CMS_ContentInfo *)SMIME_read_ASN1(bio, bcont,
                                               ASN1_ITEM_rptr
diff --git a/crypto/cms/cms_kari.c b/crypto/cms/cms_kari.c
index 5e83814d0f..f864155d24 100644
--- a/crypto/cms/cms_kari.c
+++ b/crypto/cms/cms_kari.c
@@ -19,7 +19,7 @@
 
 /* Key Agreement Recipient Info (KARI) routines */
 
-int CMS_RecipientInfo_kari_get0_alg(CMS_RecipientInfo *ri,
+int __cdecl CMS_RecipientInfo_kari_get0_alg(CMS_RecipientInfo *ri,
                                     X509_ALGOR **palg,
                                     ASN1_OCTET_STRING **pukm)
 {
@@ -38,7 +38,7 @@ int CMS_RecipientInfo_kari_get0_alg(CMS_RecipientInfo *ri,
 /* Retrieve recipient encrypted keys from a kari */
 
 STACK_OF(CMS_RecipientEncryptedKey)
-*CMS_RecipientInfo_kari_get0_reks(CMS_RecipientInfo *ri)
+* __cdecl CMS_RecipientInfo_kari_get0_reks(CMS_RecipientInfo *ri)
 {
     if (ri->type != CMS_RECIPINFO_AGREE) {
         CMSerr(CMS_F_CMS_RECIPIENTINFO_KARI_GET0_REKS,
@@ -48,7 +48,7 @@ STACK_OF(CMS_RecipientEncryptedKey)
     return ri->d.kari->recipientEncryptedKeys;
 }
 
-int CMS_RecipientInfo_kari_get0_orig_id(CMS_RecipientInfo *ri,
+int __cdecl CMS_RecipientInfo_kari_get0_orig_id(CMS_RecipientInfo *ri,
                                         X509_ALGOR **pubalg,
                                         ASN1_BIT_STRING **pubkey,
                                         ASN1_OCTET_STRING **keyid,
@@ -90,7 +90,7 @@ int CMS_RecipientInfo_kari_get0_orig_id(CMS_RecipientInfo *ri,
     return 1;
 }
 
-int CMS_RecipientInfo_kari_orig_id_cmp(CMS_RecipientInfo *ri, X509 *cert)
+int __cdecl CMS_RecipientInfo_kari_orig_id_cmp(CMS_RecipientInfo *ri, X509 *cert)
 {
     CMS_OriginatorIdentifierOrKey *oik;
     if (ri->type != CMS_RECIPINFO_AGREE) {
@@ -106,7 +106,7 @@ int CMS_RecipientInfo_kari_orig_id_cmp(CMS_RecipientInfo *ri, X509 *cert)
     return -1;
 }
 
-int CMS_RecipientEncryptedKey_get0_id(CMS_RecipientEncryptedKey *rek,
+int __cdecl CMS_RecipientEncryptedKey_get0_id(CMS_RecipientEncryptedKey *rek,
                                       ASN1_OCTET_STRING **keyid,
                                       ASN1_GENERALIZEDTIME **tm,
                                       CMS_OtherKeyAttribute **other,
@@ -140,7 +140,7 @@ int CMS_RecipientEncryptedKey_get0_id(CMS_RecipientEncryptedKey *rek,
     return 1;
 }
 
-int CMS_RecipientEncryptedKey_cert_cmp(CMS_RecipientEncryptedKey *rek,
+int __cdecl CMS_RecipientEncryptedKey_cert_cmp(CMS_RecipientEncryptedKey *rek,
                                        X509 *cert)
 {
     CMS_KeyAgreeRecipientIdentifier *rid = rek->rid;
@@ -152,7 +152,7 @@ int CMS_RecipientEncryptedKey_cert_cmp(CMS_RecipientEncryptedKey *rek,
         return -1;
 }
 
-int CMS_RecipientInfo_kari_set0_pkey(CMS_RecipientInfo *ri, EVP_PKEY *pk)
+int __cdecl CMS_RecipientInfo_kari_set0_pkey(CMS_RecipientInfo *ri, EVP_PKEY *pk)
 {
     EVP_PKEY_CTX *pctx;
     CMS_KeyAgreeRecipientInfo *kari = ri->d.kari;
@@ -171,7 +171,7 @@ int CMS_RecipientInfo_kari_set0_pkey(CMS_RecipientInfo *ri, EVP_PKEY *pk)
     return 0;
 }
 
-EVP_CIPHER_CTX *CMS_RecipientInfo_kari_get0_ctx(CMS_RecipientInfo *ri)
+EVP_CIPHER_CTX * __cdecl CMS_RecipientInfo_kari_get0_ctx(CMS_RecipientInfo *ri)
 {
     if (ri->type == CMS_RECIPINFO_AGREE)
         return ri->d.kari->ctx;
@@ -225,7 +225,7 @@ static int cms_kek_cipher(unsigned char **pout, size_t *poutlen,
     return rv;
 }
 
-int CMS_RecipientInfo_kari_decrypt(CMS_ContentInfo *cms,
+int __cdecl CMS_RecipientInfo_kari_decrypt(CMS_ContentInfo *cms,
                                    CMS_RecipientInfo *ri,
                                    CMS_RecipientEncryptedKey *rek)
 {
diff --git a/crypto/cms/cms_lib.c b/crypto/cms/cms_lib.c
index c2cac26010..fd8ccac1b8 100644
--- a/crypto/cms/cms_lib.c
+++ b/crypto/cms/cms_lib.c
@@ -19,7 +19,7 @@
 IMPLEMENT_ASN1_FUNCTIONS(CMS_ContentInfo)
 IMPLEMENT_ASN1_PRINT_FUNCTION(CMS_ContentInfo)
 
-const ASN1_OBJECT *CMS_get0_type(const CMS_ContentInfo *cms)
+const ASN1_OBJECT * __cdecl CMS_get0_type(const CMS_ContentInfo *cms)
 {
     return cms->contentType;
 }
@@ -53,7 +53,7 @@ BIO *cms_content_bio(CMS_ContentInfo *cms)
     return BIO_new_mem_buf((*pos)->data, (*pos)->length);
 }
 
-BIO *CMS_dataInit(CMS_ContentInfo *cms, BIO *icont)
+BIO * __cdecl CMS_dataInit(CMS_ContentInfo *cms, BIO *icont)
 {
     BIO *cmsbio, *cont;
     if (icont)
@@ -104,7 +104,7 @@ BIO *CMS_dataInit(CMS_ContentInfo *cms, BIO *icont)
 
 }
 
-int CMS_dataFinal(CMS_ContentInfo *cms, BIO *cmsbio)
+int __cdecl CMS_dataFinal(CMS_ContentInfo *cms, BIO *cmsbio)
 {
     ASN1_OCTET_STRING **pos = CMS_get0_content(cms);
     if (!pos)
@@ -153,7 +153,7 @@ int CMS_dataFinal(CMS_ContentInfo *cms, BIO *cmsbio)
  * or set later.
  */
 
-ASN1_OCTET_STRING **CMS_get0_content(CMS_ContentInfo *cms)
+ASN1_OCTET_STRING ** __cdecl CMS_get0_content(CMS_ContentInfo *cms)
 {
     switch (OBJ_obj2nid(cms->contentType)) {
 
@@ -221,7 +221,7 @@ static ASN1_OBJECT **cms_get0_econtent_type(CMS_ContentInfo *cms)
     }
 }
 
-const ASN1_OBJECT *CMS_get0_eContentType(CMS_ContentInfo *cms)
+const ASN1_OBJECT * __cdecl CMS_get0_eContentType(CMS_ContentInfo *cms)
 {
     ASN1_OBJECT **petype;
     petype = cms_get0_econtent_type(cms);
@@ -230,7 +230,7 @@ const ASN1_OBJECT *CMS_get0_eContentType(CMS_ContentInfo *cms)
     return NULL;
 }
 
-int CMS_set1_eContentType(CMS_ContentInfo *cms, const ASN1_OBJECT *oid)
+int __cdecl CMS_set1_eContentType(CMS_ContentInfo *cms, const ASN1_OBJECT *oid)
 {
     ASN1_OBJECT **petype, *etype;
     petype = cms_get0_econtent_type(cms);
@@ -246,7 +246,7 @@ int CMS_set1_eContentType(CMS_ContentInfo *cms, const ASN1_OBJECT *oid)
     return 1;
 }
 
-int CMS_is_detached(CMS_ContentInfo *cms)
+int __cdecl CMS_is_detached(CMS_ContentInfo *cms)
 {
     ASN1_OCTET_STRING **pos;
     pos = CMS_get0_content(cms);
@@ -257,7 +257,7 @@ int CMS_is_detached(CMS_ContentInfo *cms)
     return 1;
 }
 
-int CMS_set_detached(CMS_ContentInfo *cms, int detached)
+int __cdecl CMS_set_detached(CMS_ContentInfo *cms, int detached)
 {
     ASN1_OCTET_STRING **pos;
     pos = CMS_get0_content(cms);
@@ -357,7 +357,7 @@ static STACK_OF(CMS_CertificateChoices)
     }
 }
 
-CMS_CertificateChoices *CMS_add0_CertificateChoices(CMS_ContentInfo *cms)
+CMS_CertificateChoices * __cdecl CMS_add0_CertificateChoices(CMS_ContentInfo *cms)
 {
     STACK_OF(CMS_CertificateChoices) **pcerts;
     CMS_CertificateChoices *cch;
@@ -378,7 +378,7 @@ CMS_CertificateChoices *CMS_add0_CertificateChoices(CMS_ContentInfo *cms)
     return cch;
 }
 
-int CMS_add0_cert(CMS_ContentInfo *cms, X509 *cert)
+int __cdecl CMS_add0_cert(CMS_ContentInfo *cms, X509 *cert)
 {
     CMS_CertificateChoices *cch;
     STACK_OF(CMS_CertificateChoices) **pcerts;
@@ -404,7 +404,7 @@ int CMS_add0_cert(CMS_ContentInfo *cms, X509 *cert)
     return 1;
 }
 
-int CMS_add1_cert(CMS_ContentInfo *cms, X509 *cert)
+int __cdecl CMS_add1_cert(CMS_ContentInfo *cms, X509 *cert)
 {
     int r;
     r = CMS_add0_cert(cms, cert);
@@ -434,7 +434,7 @@ static STACK_OF(CMS_RevocationInfoChoice)
     }
 }
 
-CMS_RevocationInfoChoice *CMS_add0_RevocationInfoChoice(CMS_ContentInfo *cms)
+CMS_RevocationInfoChoice * __cdecl CMS_add0_RevocationInfoChoice(CMS_ContentInfo *cms)
 {
     STACK_OF(CMS_RevocationInfoChoice) **pcrls;
     CMS_RevocationInfoChoice *rch;
@@ -455,7 +455,7 @@ CMS_RevocationInfoChoice *CMS_add0_RevocationInfoChoice(CMS_ContentInfo *cms)
     return rch;
 }
 
-int CMS_add0_crl(CMS_ContentInfo *cms, X509_CRL *crl)
+int __cdecl CMS_add0_crl(CMS_ContentInfo *cms, X509_CRL *crl)
 {
     CMS_RevocationInfoChoice *rch;
     rch = CMS_add0_RevocationInfoChoice(cms);
@@ -466,7 +466,7 @@ int CMS_add0_crl(CMS_ContentInfo *cms, X509_CRL *crl)
     return 1;
 }
 
-int CMS_add1_crl(CMS_ContentInfo *cms, X509_CRL *crl)
+int __cdecl CMS_add1_crl(CMS_ContentInfo *cms, X509_CRL *crl)
 {
     int r;
     r = CMS_add0_crl(cms, crl);
@@ -475,7 +475,7 @@ int CMS_add1_crl(CMS_ContentInfo *cms, X509_CRL *crl)
     return r;
 }
 
-STACK_OF(X509) *CMS_get1_certs(CMS_ContentInfo *cms)
+STACK_OF(X509) * __cdecl CMS_get1_certs(CMS_ContentInfo *cms)
 {
     STACK_OF(X509) *certs = NULL;
     CMS_CertificateChoices *cch;
@@ -503,7 +503,7 @@ STACK_OF(X509) *CMS_get1_certs(CMS_ContentInfo *cms)
 
 }
 
-STACK_OF(X509_CRL) *CMS_get1_crls(CMS_ContentInfo *cms)
+STACK_OF(X509_CRL) * __cdecl CMS_get1_crls(CMS_ContentInfo *cms)
 {
     STACK_OF(X509_CRL) *crls = NULL;
     STACK_OF(CMS_RevocationInfoChoice) **pcrls;
diff --git a/crypto/cms/cms_pwri.c b/crypto/cms/cms_pwri.c
index 26e3bdcf9e..d23f4e9fd3 100644
--- a/crypto/cms/cms_pwri.c
+++ b/crypto/cms/cms_pwri.c
@@ -18,7 +18,7 @@
 #include "cms_lcl.h"
 #include "internal/asn1_int.h"
 
-int CMS_RecipientInfo_set0_password(CMS_RecipientInfo *ri,
+int __cdecl CMS_RecipientInfo_set0_password(CMS_RecipientInfo *ri,
                                     unsigned char *pass, ossl_ssize_t passlen)
 {
     CMS_PasswordRecipientInfo *pwri;
@@ -35,7 +35,7 @@ int CMS_RecipientInfo_set0_password(CMS_RecipientInfo *ri,
     return 1;
 }
 
-CMS_RecipientInfo *CMS_add0_recipient_password(CMS_ContentInfo *cms,
+CMS_RecipientInfo * __cdecl CMS_add0_recipient_password(CMS_ContentInfo *cms,
                                                int iter, int wrap_nid,
                                                int pbe_nid,
                                                unsigned char *pass,
diff --git a/crypto/cms/cms_sd.c b/crypto/cms/cms_sd.c
index 3841513f8b..ad291f9b50 100644
--- a/crypto/cms/cms_sd.c
+++ b/crypto/cms/cms_sd.c
@@ -50,7 +50,7 @@ static CMS_SignedData *cms_signed_data_init(CMS_ContentInfo *cms)
 
 /* Just initialise SignedData e.g. for certs only structure */
 
-int CMS_SignedData_init(CMS_ContentInfo *cms)
+int __cdecl CMS_SignedData_init(CMS_ContentInfo *cms)
 {
     if (cms_signed_data_init(cms))
         return 1;
@@ -238,7 +238,7 @@ static int cms_sd_asn1_ctrl(CMS_SignerInfo *si, int cmd)
     return 1;
 }
 
-CMS_SignerInfo *CMS_add1_signer(CMS_ContentInfo *cms,
+CMS_SignerInfo * __cdecl CMS_add1_signer(CMS_ContentInfo *cms,
                                 X509 *signer, EVP_PKEY *pk, const EVP_MD *md,
                                 unsigned int flags)
 {
@@ -422,17 +422,17 @@ static int cms_add1_signingTime(CMS_SignerInfo *si, ASN1_TIME *t)
 
 }
 
-EVP_PKEY_CTX *CMS_SignerInfo_get0_pkey_ctx(CMS_SignerInfo *si)
+EVP_PKEY_CTX * __cdecl CMS_SignerInfo_get0_pkey_ctx(CMS_SignerInfo *si)
 {
     return si->pctx;
 }
 
-EVP_MD_CTX *CMS_SignerInfo_get0_md_ctx(CMS_SignerInfo *si)
+EVP_MD_CTX * __cdecl CMS_SignerInfo_get0_md_ctx(CMS_SignerInfo *si)
 {
     return si->mctx;
 }
 
-STACK_OF(CMS_SignerInfo) *CMS_get0_SignerInfos(CMS_ContentInfo *cms)
+STACK_OF(CMS_SignerInfo) * __cdecl CMS_get0_SignerInfos(CMS_ContentInfo *cms)
 {
     CMS_SignedData *sd;
     sd = cms_get0_signed(cms);
@@ -441,7 +441,7 @@ STACK_OF(CMS_SignerInfo) *CMS_get0_SignerInfos(CMS_ContentInfo *cms)
     return sd->signerInfos;
 }
 
-STACK_OF(X509) *CMS_get0_signers(CMS_ContentInfo *cms)
+STACK_OF(X509) * __cdecl CMS_get0_signers(CMS_ContentInfo *cms)
 {
     STACK_OF(X509) *signers = NULL;
     STACK_OF(CMS_SignerInfo) *sinfos;
@@ -465,7 +465,7 @@ STACK_OF(X509) *CMS_get0_signers(CMS_ContentInfo *cms)
     return signers;
 }
 
-void CMS_SignerInfo_set1_signer_cert(CMS_SignerInfo *si, X509 *signer)
+void __cdecl CMS_SignerInfo_set1_signer_cert(CMS_SignerInfo *si, X509 *signer)
 {
     if (signer) {
         X509_up_ref(signer);
@@ -476,19 +476,19 @@ void CMS_SignerInfo_set1_signer_cert(CMS_SignerInfo *si, X509 *signer)
     si->signer = signer;
 }
 
-int CMS_SignerInfo_get0_signer_id(CMS_SignerInfo *si,
+int __cdecl CMS_SignerInfo_get0_signer_id(CMS_SignerInfo *si,
                                   ASN1_OCTET_STRING **keyid,
                                   X509_NAME **issuer, ASN1_INTEGER **sno)
 {
     return cms_SignerIdentifier_get0_signer_id(si->sid, keyid, issuer, sno);
 }
 
-int CMS_SignerInfo_cert_cmp(CMS_SignerInfo *si, X509 *cert)
+int __cdecl CMS_SignerInfo_cert_cmp(CMS_SignerInfo *si, X509 *cert)
 {
     return cms_SignerIdentifier_cert_cmp(si->sid, cert);
 }
 
-int CMS_set1_signers_certs(CMS_ContentInfo *cms, STACK_OF(X509) *scerts,
+int __cdecl CMS_set1_signers_certs(CMS_ContentInfo *cms, STACK_OF(X509) *scerts,
                            unsigned int flags)
 {
     CMS_SignedData *sd;
@@ -534,7 +534,7 @@ int CMS_set1_signers_certs(CMS_ContentInfo *cms, STACK_OF(X509) *scerts,
     return ret;
 }
 
-void CMS_SignerInfo_get0_algs(CMS_SignerInfo *si, EVP_PKEY **pk,
+void __cdecl CMS_SignerInfo_get0_algs(CMS_SignerInfo *si, EVP_PKEY **pk,
                               X509 **signer, X509_ALGOR **pdig,
                               X509_ALGOR **psig)
 {
@@ -548,7 +548,7 @@ void CMS_SignerInfo_get0_algs(CMS_SignerInfo *si, EVP_PKEY **pk,
         *psig = si->signatureAlgorithm;
 }
 
-ASN1_OCTET_STRING *CMS_SignerInfo_get0_signature(CMS_SignerInfo *si)
+ASN1_OCTET_STRING * __cdecl CMS_SignerInfo_get0_signature(CMS_SignerInfo *si)
 {
     return si->signature;
 }
@@ -653,7 +653,7 @@ int cms_SignedData_final(CMS_ContentInfo *cms, BIO *chain)
     return 1;
 }
 
-int CMS_SignerInfo_sign(CMS_SignerInfo *si)
+int __cdecl CMS_SignerInfo_sign(CMS_SignerInfo *si)
 {
     EVP_MD_CTX *mctx = si->mctx;
     EVP_PKEY_CTX *pctx = NULL;
@@ -722,7 +722,7 @@ int CMS_SignerInfo_sign(CMS_SignerInfo *si)
     return 0;
 }
 
-int CMS_SignerInfo_verify(CMS_SignerInfo *si)
+int __cdecl CMS_SignerInfo_verify(CMS_SignerInfo *si)
 {
     EVP_MD_CTX *mctx = NULL;
     unsigned char *abuf = NULL;
@@ -800,7 +800,7 @@ BIO *cms_SignedData_init_bio(CMS_ContentInfo *cms)
     return NULL;
 }
 
-int CMS_SignerInfo_verify_content(CMS_SignerInfo *si, BIO *chain)
+int __cdecl CMS_SignerInfo_verify_content(CMS_SignerInfo *si, BIO *chain)
 {
     ASN1_OCTET_STRING *os = NULL;
     EVP_MD_CTX *mctx = EVP_MD_CTX_new();
@@ -877,7 +877,7 @@ int CMS_SignerInfo_verify_content(CMS_SignerInfo *si, BIO *chain)
 
 }
 
-int CMS_add_smimecap(CMS_SignerInfo *si, STACK_OF(X509_ALGOR) *algs)
+int __cdecl CMS_add_smimecap(CMS_SignerInfo *si, STACK_OF(X509_ALGOR) *algs)
 {
     unsigned char *smder = NULL;
     int smderlen, r;
@@ -890,7 +890,7 @@ int CMS_add_smimecap(CMS_SignerInfo *si, STACK_OF(X509_ALGOR) *algs)
     return r;
 }
 
-int CMS_add_simple_smimecap(STACK_OF(X509_ALGOR) **algs,
+int __cdecl CMS_add_simple_smimecap(STACK_OF(X509_ALGOR) **algs,
                             int algnid, int keysize)
 {
     X509_ALGOR *alg;
@@ -933,7 +933,7 @@ static int cms_add_digest_smcap(STACK_OF(X509_ALGOR) **sk, int nid, int arg)
     return 1;
 }
 
-int CMS_add_standard_smimecap(STACK_OF(X509_ALGOR) **smcap)
+int __cdecl CMS_add_standard_smimecap(STACK_OF(X509_ALGOR) **smcap)
 {
     if (!cms_add_cipher_smcap(smcap, NID_aes_256_cbc, -1)
         || !cms_add_digest_smcap(smcap, NID_id_GostR3411_2012_256, -1)
diff --git a/crypto/cms/cms_smime.c b/crypto/cms/cms_smime.c
index 10815639f8..319c96e015 100644
--- a/crypto/cms/cms_smime.c
+++ b/crypto/cms/cms_smime.c
@@ -99,7 +99,7 @@ static void do_free_upto(BIO *f, BIO *upto)
         BIO_free_all(f);
 }
 
-int CMS_data(CMS_ContentInfo *cms, BIO *out, unsigned int flags)
+int __cdecl CMS_data(CMS_ContentInfo *cms, BIO *out, unsigned int flags)
 {
     BIO *cont;
     int r;
@@ -115,7 +115,7 @@ int CMS_data(CMS_ContentInfo *cms, BIO *out, unsigned int flags)
     return r;
 }
 
-CMS_ContentInfo *CMS_data_create(BIO *in, unsigned int flags)
+CMS_ContentInfo * __cdecl CMS_data_create(BIO *in, unsigned int flags)
 {
     CMS_ContentInfo *cms;
     cms = cms_Data_create();
@@ -130,7 +130,7 @@ CMS_ContentInfo *CMS_data_create(BIO *in, unsigned int flags)
     return NULL;
 }
 
-int CMS_digest_verify(CMS_ContentInfo *cms, BIO *dcont, BIO *out,
+int __cdecl CMS_digest_verify(CMS_ContentInfo *cms, BIO *dcont, BIO *out,
                       unsigned int flags)
 {
     BIO *cont;
@@ -153,7 +153,7 @@ int CMS_digest_verify(CMS_ContentInfo *cms, BIO *dcont, BIO *out,
     return r;
 }
 
-CMS_ContentInfo *CMS_digest_create(BIO *in, const EVP_MD *md,
+CMS_ContentInfo * __cdecl CMS_digest_create(BIO *in, const EVP_MD *md,
                                    unsigned int flags)
 {
     CMS_ContentInfo *cms;
@@ -173,7 +173,7 @@ CMS_ContentInfo *CMS_digest_create(BIO *in, const EVP_MD *md,
     return NULL;
 }
 
-int CMS_EncryptedData_decrypt(CMS_ContentInfo *cms,
+int __cdecl CMS_EncryptedData_decrypt(CMS_ContentInfo *cms,
                               const unsigned char *key, size_t keylen,
                               BIO *dcont, BIO *out, unsigned int flags)
 {
@@ -198,7 +198,7 @@ int CMS_EncryptedData_decrypt(CMS_ContentInfo *cms,
     return r;
 }
 
-CMS_ContentInfo *CMS_EncryptedData_encrypt(BIO *in, const EVP_CIPHER *cipher,
+CMS_ContentInfo * __cdecl CMS_EncryptedData_encrypt(BIO *in, const EVP_CIPHER *cipher,
                                            const unsigned char *key,
                                            size_t keylen, unsigned int flags)
 {
@@ -262,7 +262,7 @@ static int cms_signerinfo_verify_cert(CMS_SignerInfo *si,
 
 }
 
-int CMS_verify(CMS_ContentInfo *cms, STACK_OF(X509) *certs,
+int __cdecl CMS_verify(CMS_ContentInfo *cms, STACK_OF(X509) *certs,
                X509_STORE *store, BIO *dcont, BIO *out, unsigned int flags)
 {
     CMS_SignerInfo *si;
@@ -420,7 +420,7 @@ int CMS_verify(CMS_ContentInfo *cms, STACK_OF(X509) *certs,
     return ret;
 }
 
-int CMS_verify_receipt(CMS_ContentInfo *rcms, CMS_ContentInfo *ocms,
+int __cdecl CMS_verify_receipt(CMS_ContentInfo *rcms, CMS_ContentInfo *ocms,
                        STACK_OF(X509) *certs,
                        X509_STORE *store, unsigned int flags)
 {
@@ -432,7 +432,7 @@ int CMS_verify_receipt(CMS_ContentInfo *rcms, CMS_ContentInfo *ocms,
     return cms_Receipt_verify(rcms, ocms);
 }
 
-CMS_ContentInfo *CMS_sign(X509 *signcert, EVP_PKEY *pkey,
+CMS_ContentInfo * __cdecl CMS_sign(X509 *signcert, EVP_PKEY *pkey,
                           STACK_OF(X509) *certs, BIO *data,
                           unsigned int flags)
 {
@@ -475,7 +475,7 @@ CMS_ContentInfo *CMS_sign(X509 *signcert, EVP_PKEY *pkey,
     return NULL;
 }
 
-CMS_ContentInfo *CMS_sign_receipt(CMS_SignerInfo *si,
+CMS_ContentInfo * __cdecl CMS_sign_receipt(CMS_SignerInfo *si,
                                   X509 *signcert, EVP_PKEY *pkey,
                                   STACK_OF(X509) *certs, unsigned int flags)
 {
@@ -543,7 +543,7 @@ CMS_ContentInfo *CMS_sign_receipt(CMS_SignerInfo *si,
 
 }
 
-CMS_ContentInfo *CMS_encrypt(STACK_OF(X509) *certs, BIO *data,
+CMS_ContentInfo * __cdecl CMS_encrypt(STACK_OF(X509) *certs, BIO *data,
                              const EVP_CIPHER *cipher, unsigned int flags)
 {
     CMS_ContentInfo *cms;
@@ -598,7 +598,7 @@ static int cms_kari_set1_pkey(CMS_ContentInfo *cms, CMS_RecipientInfo *ri,
     return 0;
 }
 
-int CMS_decrypt_set1_pkey(CMS_ContentInfo *cms, EVP_PKEY *pk, X509 *cert)
+int __cdecl CMS_decrypt_set1_pkey(CMS_ContentInfo *cms, EVP_PKEY *pk, X509 *cert)
 {
     STACK_OF(CMS_RecipientInfo) *ris;
     CMS_RecipientInfo *ri;
@@ -669,7 +669,7 @@ int CMS_decrypt_set1_pkey(CMS_ContentInfo *cms, EVP_PKEY *pk, X509 *cert)
 
 }
 
-int CMS_decrypt_set1_key(CMS_ContentInfo *cms,
+int __cdecl CMS_decrypt_set1_key(CMS_ContentInfo *cms,
                          unsigned char *key, size_t keylen,
                          const unsigned char *id, size_t idlen)
 {
@@ -705,7 +705,7 @@ int CMS_decrypt_set1_key(CMS_ContentInfo *cms,
 
 }
 
-int CMS_decrypt_set1_password(CMS_ContentInfo *cms,
+int __cdecl CMS_decrypt_set1_password(CMS_ContentInfo *cms,
                               unsigned char *pass, ossl_ssize_t passlen)
 {
     STACK_OF(CMS_RecipientInfo) *ris;
@@ -728,7 +728,7 @@ int CMS_decrypt_set1_password(CMS_ContentInfo *cms,
 
 }
 
-int CMS_decrypt(CMS_ContentInfo *cms, EVP_PKEY *pk, X509 *cert,
+int __cdecl CMS_decrypt(CMS_ContentInfo *cms, EVP_PKEY *pk, X509 *cert,
                 BIO *dcont, BIO *out, unsigned int flags)
 {
     int r;
@@ -759,7 +759,7 @@ int CMS_decrypt(CMS_ContentInfo *cms, EVP_PKEY *pk, X509 *cert,
     return r;
 }
 
-int CMS_final(CMS_ContentInfo *cms, BIO *data, BIO *dcont, unsigned int flags)
+int __cdecl CMS_final(CMS_ContentInfo *cms, BIO *data, BIO *dcont, unsigned int flags)
 {
     BIO *cmsbio;
     int ret = 0;
@@ -789,7 +789,7 @@ int CMS_final(CMS_ContentInfo *cms, BIO *data, BIO *dcont, unsigned int flags)
 
 #ifdef ZLIB
 
-int CMS_uncompress(CMS_ContentInfo *cms, BIO *dcont, BIO *out,
+int __cdecl CMS_uncompress(CMS_ContentInfo *cms, BIO *dcont, BIO *out,
                    unsigned int flags)
 {
     BIO *cont;
@@ -810,7 +810,7 @@ int CMS_uncompress(CMS_ContentInfo *cms, BIO *dcont, BIO *out,
     return r;
 }
 
-CMS_ContentInfo *CMS_compress(BIO *in, int comp_nid, unsigned int flags)
+CMS_ContentInfo * __cdecl CMS_compress(BIO *in, int comp_nid, unsigned int flags)
 {
     CMS_ContentInfo *cms;
     if (comp_nid <= 0)
@@ -831,14 +831,14 @@ CMS_ContentInfo *CMS_compress(BIO *in, int comp_nid, unsigned int flags)
 
 #else
 
-int CMS_uncompress(CMS_ContentInfo *cms, BIO *dcont, BIO *out,
+int __cdecl CMS_uncompress(CMS_ContentInfo *cms, BIO *dcont, BIO *out,
                    unsigned int flags)
 {
     CMSerr(CMS_F_CMS_UNCOMPRESS, CMS_R_UNSUPPORTED_COMPRESSION_ALGORITHM);
     return 0;
 }
 
-CMS_ContentInfo *CMS_compress(BIO *in, int comp_nid, unsigned int flags)
+CMS_ContentInfo * __cdecl CMS_compress(BIO *in, int comp_nid, unsigned int flags)
 {
     CMSerr(CMS_F_CMS_COMPRESS, CMS_R_UNSUPPORTED_COMPRESSION_ALGORITHM);
     return NULL;
diff --git a/crypto/comp/c_zlib.c b/crypto/comp/c_zlib.c
index d688deee5f..be15b051e5 100644
--- a/crypto/comp/c_zlib.c
+++ b/crypto/comp/c_zlib.c
@@ -17,7 +17,7 @@
 #include "internal/bio.h"
 #include "comp_lcl.h"
 
-COMP_METHOD *COMP_zlib(void);
+COMP_METHOD * __cdecl COMP_zlib(void);
 
 static COMP_METHOD zlib_method_nozlib = {
     NID_undef,
@@ -206,7 +206,7 @@ static int zlib_stateful_expand_block(COMP_CTX *ctx, unsigned char *out,
 
 #endif
 
-COMP_METHOD *COMP_zlib(void)
+COMP_METHOD * __cdecl COMP_zlib(void)
 {
     COMP_METHOD *meth = &zlib_method_nozlib;
 
@@ -310,7 +310,7 @@ static const BIO_METHOD bio_meth_zlib = {
     bio_zlib_callback_ctrl
 };
 
-const BIO_METHOD *BIO_f_zlib(void)
+const BIO_METHOD * __cdecl BIO_f_zlib(void)
 {
     return &bio_meth_zlib;
 }
diff --git a/crypto/comp/comp_err.c b/crypto/comp/comp_err.c
index 2dca315cf1..9d893d52ad 100644
--- a/crypto/comp/comp_err.c
+++ b/crypto/comp/comp_err.c
@@ -34,7 +34,7 @@ static const ERR_STRING_DATA COMP_str_reasons[] = {
 
 #endif
 
-int ERR_load_COMP_strings(void)
+int __cdecl ERR_load_COMP_strings(void)
 {
 #ifndef OPENSSL_NO_ERR
     if (ERR_func_error_string(COMP_str_functs[0].error) == NULL) {
diff --git a/crypto/comp/comp_lib.c b/crypto/comp/comp_lib.c
index 6ae2114496..99169e6acd 100644
--- a/crypto/comp/comp_lib.c
+++ b/crypto/comp/comp_lib.c
@@ -15,7 +15,7 @@
 #include <openssl/err.h>
 #include "comp_lcl.h"
 
-COMP_CTX *COMP_CTX_new(COMP_METHOD *meth)
+COMP_CTX * __cdecl COMP_CTX_new(COMP_METHOD *meth)
 {
     COMP_CTX *ret;
 
@@ -31,22 +31,22 @@ COMP_CTX *COMP_CTX_new(COMP_METHOD *meth)
     return ret;
 }
 
-const COMP_METHOD *COMP_CTX_get_method(const COMP_CTX *ctx)
+const COMP_METHOD * __cdecl COMP_CTX_get_method(const COMP_CTX *ctx)
 {
     return ctx->meth;
 }
 
-int COMP_get_type(const COMP_METHOD *meth)
+int __cdecl COMP_get_type(const COMP_METHOD *meth)
 {
     return meth->type;
 }
 
-const char *COMP_get_name(const COMP_METHOD *meth)
+const char * __cdecl COMP_get_name(const COMP_METHOD *meth)
 {
     return meth->name;
 }
 
-void COMP_CTX_free(COMP_CTX *ctx)
+void __cdecl COMP_CTX_free(COMP_CTX *ctx)
 {
     if (ctx == NULL)
         return;
@@ -56,7 +56,7 @@ void COMP_CTX_free(COMP_CTX *ctx)
     OPENSSL_free(ctx);
 }
 
-int COMP_compress_block(COMP_CTX *ctx, unsigned char *out, int olen,
+int __cdecl COMP_compress_block(COMP_CTX *ctx, unsigned char *out, int olen,
                         unsigned char *in, int ilen)
 {
     int ret;
@@ -71,7 +71,7 @@ int COMP_compress_block(COMP_CTX *ctx, unsigned char *out, int olen,
     return ret;
 }
 
-int COMP_expand_block(COMP_CTX *ctx, unsigned char *out, int olen,
+int __cdecl COMP_expand_block(COMP_CTX *ctx, unsigned char *out, int olen,
                       unsigned char *in, int ilen)
 {
     int ret;
@@ -87,7 +87,7 @@ int COMP_expand_block(COMP_CTX *ctx, unsigned char *out, int olen,
     return ret;
 }
 
-int COMP_CTX_get_type(const COMP_CTX* comp)
+int __cdecl COMP_CTX_get_type(const COMP_CTX* comp)
 {
     return comp->meth ? comp->meth->type : NID_undef;
 }
diff --git a/crypto/conf/conf_api.c b/crypto/conf/conf_api.c
index 5e57d749ce..14a98b93bf 100644
--- a/crypto/conf/conf_api.c
+++ b/crypto/conf/conf_api.c
@@ -20,7 +20,7 @@ static void value_free_hash(const CONF_VALUE *a, LHASH_OF(CONF_VALUE) *conf);
 static void value_free_stack_doall(CONF_VALUE *a);
 
 /* Up until OpenSSL 0.9.5a, this was get_section */
-CONF_VALUE *_CONF_get_section(const CONF *conf, const char *section)
+CONF_VALUE * __cdecl _CONF_get_section(const CONF *conf, const char *section)
 {
     CONF_VALUE *v, vv;
 
@@ -33,7 +33,7 @@ CONF_VALUE *_CONF_get_section(const CONF *conf, const char *section)
 }
 
 /* Up until OpenSSL 0.9.5a, this was CONF_get_section */
-STACK_OF(CONF_VALUE) *_CONF_get_section_values(const CONF *conf,
+STACK_OF(CONF_VALUE) * __cdecl _CONF_get_section_values(const CONF *conf,
                                                const char *section)
 {
     CONF_VALUE *v;
@@ -45,7 +45,7 @@ STACK_OF(CONF_VALUE) *_CONF_get_section_values(const CONF *conf,
         return NULL;
 }
 
-int _CONF_add_string(CONF *conf, CONF_VALUE *section, CONF_VALUE *value)
+int __cdecl _CONF_add_string(CONF *conf, CONF_VALUE *section, CONF_VALUE *value)
 {
     CONF_VALUE *v = NULL;
     STACK_OF(CONF_VALUE) *ts;
@@ -67,7 +67,7 @@ int _CONF_add_string(CONF *conf, CONF_VALUE *section, CONF_VALUE *value)
     return 1;
 }
 
-char *_CONF_get_string(const CONF *conf, const char *section,
+char * __cdecl _CONF_get_string(const CONF *conf, const char *section,
                        const char *name)
 {
     CONF_VALUE *v, vv;
@@ -104,7 +104,7 @@ static unsigned long conf_value_hash(const CONF_VALUE *v)
     return (OPENSSL_LH_strhash(v->section) << 2) ^ OPENSSL_LH_strhash(v->name);
 }
 
-static int conf_value_cmp(const CONF_VALUE *a, const CONF_VALUE *b)
+static int __cdecl conf_value_cmp(const CONF_VALUE *a, const CONF_VALUE *b)
 {
     int i;
 
@@ -123,7 +123,7 @@ static int conf_value_cmp(const CONF_VALUE *a, const CONF_VALUE *b)
         return ((a->name == NULL) ? -1 : 1);
 }
 
-int _CONF_new_data(CONF *conf)
+int __cdecl _CONF_new_data(CONF *conf)
 {
     if (conf == NULL) {
         return 0;
@@ -140,7 +140,7 @@ typedef LHASH_OF(CONF_VALUE) LH_CONF_VALUE;
 
 IMPLEMENT_LHASH_DOALL_ARG_CONST(CONF_VALUE, LH_CONF_VALUE);
 
-void _CONF_free_data(CONF *conf)
+void __cdecl _CONF_free_data(CONF *conf)
 {
     if (conf == NULL || conf->data == NULL)
         return;
@@ -186,7 +186,7 @@ static void value_free_stack_doall(CONF_VALUE *a)
 }
 
 /* Up until OpenSSL 0.9.5a, this was new_section */
-CONF_VALUE *_CONF_new_section(CONF *conf, const char *section)
+CONF_VALUE * __cdecl _CONF_new_section(CONF *conf, const char *section)
 {
     STACK_OF(CONF_VALUE) *sk = NULL;
     int i;
diff --git a/crypto/conf/conf_def.c b/crypto/conf/conf_def.c
index 8e3f42a0ca..5a07ccda71 100644
--- a/crypto/conf/conf_def.c
+++ b/crypto/conf/conf_def.c
@@ -89,12 +89,12 @@ static CONF_METHOD WIN32_method = {
     def_load
 };
 
-CONF_METHOD *NCONF_default(void)
+CONF_METHOD * __cdecl NCONF_default(void)
 {
     return &default_method;
 }
 
-CONF_METHOD *NCONF_WIN32(void)
+CONF_METHOD * __cdecl NCONF_WIN32(void)
 {
     return &WIN32_method;
 }
diff --git a/crypto/conf/conf_err.c b/crypto/conf/conf_err.c
index f7613584ec..a7d299e885 100644
--- a/crypto/conf/conf_err.c
+++ b/crypto/conf/conf_err.c
@@ -83,7 +83,7 @@ static const ERR_STRING_DATA CONF_str_reasons[] = {
 
 #endif
 
-int ERR_load_CONF_strings(void)
+int __cdecl ERR_load_CONF_strings(void)
 {
 #ifndef OPENSSL_NO_ERR
     if (ERR_func_error_string(CONF_str_functs[0].error) == NULL) {
diff --git a/crypto/conf/conf_lib.c b/crypto/conf/conf_lib.c
index 2d40ac97ec..21fe21c999 100644
--- a/crypto/conf/conf_lib.c
+++ b/crypto/conf/conf_lib.c
@@ -22,7 +22,7 @@ static CONF_METHOD *default_CONF_method = NULL;
 
 /* Init a 'CONF' structure from an old LHASH */
 
-void CONF_set_nconf(CONF *conf, LHASH_OF(CONF_VALUE) *hash)
+void __cdecl CONF_set_nconf(CONF *conf, LHASH_OF(CONF_VALUE) *hash)
 {
     if (default_CONF_method == NULL)
         default_CONF_method = NCONF_default();
@@ -36,13 +36,13 @@ void CONF_set_nconf(CONF *conf, LHASH_OF(CONF_VALUE) *hash)
  * terms of the new CONF interface.
  */
 
-int CONF_set_default_method(CONF_METHOD *meth)
+int __cdecl CONF_set_default_method(CONF_METHOD *meth)
 {
     default_CONF_method = meth;
     return 1;
 }
 
-LHASH_OF(CONF_VALUE) *CONF_load(LHASH_OF(CONF_VALUE) *conf, const char *file,
+LHASH_OF(CONF_VALUE) * __cdecl CONF_load(LHASH_OF(CONF_VALUE) *conf, const char *file,
                                 long *eline)
 {
     LHASH_OF(CONF_VALUE) *ltmp;
@@ -65,7 +65,7 @@ LHASH_OF(CONF_VALUE) *CONF_load(LHASH_OF(CONF_VALUE) *conf, const char *file,
 }
 
 #ifndef OPENSSL_NO_STDIO
-LHASH_OF(CONF_VALUE) *CONF_load_fp(LHASH_OF(CONF_VALUE) *conf, FILE *fp,
+LHASH_OF(CONF_VALUE) * __cdecl CONF_load_fp(LHASH_OF(CONF_VALUE) *conf, FILE *fp,
                                    long *eline)
 {
     BIO *btmp;
@@ -80,7 +80,7 @@ LHASH_OF(CONF_VALUE) *CONF_load_fp(LHASH_OF(CONF_VALUE) *conf, FILE *fp,
 }
 #endif
 
-LHASH_OF(CONF_VALUE) *CONF_load_bio(LHASH_OF(CONF_VALUE) *conf, BIO *bp,
+LHASH_OF(CONF_VALUE) * __cdecl CONF_load_bio(LHASH_OF(CONF_VALUE) *conf, BIO *bp,
                                     long *eline)
 {
     CONF ctmp;
@@ -94,7 +94,7 @@ LHASH_OF(CONF_VALUE) *CONF_load_bio(LHASH_OF(CONF_VALUE) *conf, BIO *bp,
     return NULL;
 }
 
-STACK_OF(CONF_VALUE) *CONF_get_section(LHASH_OF(CONF_VALUE) *conf,
+STACK_OF(CONF_VALUE) * __cdecl CONF_get_section(LHASH_OF(CONF_VALUE) *conf,
                                        const char *section)
 {
     if (conf == NULL) {
@@ -106,7 +106,7 @@ STACK_OF(CONF_VALUE) *CONF_get_section(LHASH_OF(CONF_VALUE) *conf,
     }
 }
 
-char *CONF_get_string(LHASH_OF(CONF_VALUE) *conf, const char *group,
+char * __cdecl CONF_get_string(LHASH_OF(CONF_VALUE) *conf, const char *group,
                       const char *name)
 {
     if (conf == NULL) {
@@ -118,7 +118,7 @@ char *CONF_get_string(LHASH_OF(CONF_VALUE) *conf, const char *group,
     }
 }
 
-long CONF_get_number(LHASH_OF(CONF_VALUE) *conf, const char *group,
+long __cdecl CONF_get_number(LHASH_OF(CONF_VALUE) *conf, const char *group,
                      const char *name)
 {
     int status;
@@ -136,7 +136,7 @@ long CONF_get_number(LHASH_OF(CONF_VALUE) *conf, const char *group,
     return status == 0 ? 0L : result;
 }
 
-void CONF_free(LHASH_OF(CONF_VALUE) *conf)
+void __cdecl CONF_free(LHASH_OF(CONF_VALUE) *conf)
 {
     CONF ctmp;
     CONF_set_nconf(&ctmp, conf);
@@ -144,7 +144,7 @@ void CONF_free(LHASH_OF(CONF_VALUE) *conf)
 }
 
 #ifndef OPENSSL_NO_STDIO
-int CONF_dump_fp(LHASH_OF(CONF_VALUE) *conf, FILE *out)
+int __cdecl CONF_dump_fp(LHASH_OF(CONF_VALUE) *conf, FILE *out)
 {
     BIO *btmp;
     int ret;
@@ -159,7 +159,7 @@ int CONF_dump_fp(LHASH_OF(CONF_VALUE) *conf, FILE *out)
 }
 #endif
 
-int CONF_dump_bio(LHASH_OF(CONF_VALUE) *conf, BIO *out)
+int __cdecl CONF_dump_bio(LHASH_OF(CONF_VALUE) *conf, BIO *out)
 {
     CONF ctmp;
     CONF_set_nconf(&ctmp, conf);
@@ -174,7 +174,7 @@ int CONF_dump_bio(LHASH_OF(CONF_VALUE) *conf, BIO *out)
  * the "CONF classic" functions, for consistency.
  */
 
-CONF *NCONF_new(CONF_METHOD *meth)
+CONF * __cdecl NCONF_new(CONF_METHOD *meth)
 {
     CONF *ret;
 
@@ -190,21 +190,21 @@ CONF *NCONF_new(CONF_METHOD *meth)
     return ret;
 }
 
-void NCONF_free(CONF *conf)
+void __cdecl NCONF_free(CONF *conf)
 {
     if (conf == NULL)
         return;
     conf->meth->destroy(conf);
 }
 
-void NCONF_free_data(CONF *conf)
+void __cdecl NCONF_free_data(CONF *conf)
 {
     if (conf == NULL)
         return;
     conf->meth->destroy_data(conf);
 }
 
-int NCONF_load(CONF *conf, const char *file, long *eline)
+int __cdecl NCONF_load(CONF *conf, const char *file, long *eline)
 {
     if (conf == NULL) {
         CONFerr(CONF_F_NCONF_LOAD, CONF_R_NO_CONF);
@@ -215,7 +215,7 @@ int NCONF_load(CONF *conf, const char *file, long *eline)
 }
 
 #ifndef OPENSSL_NO_STDIO
-int NCONF_load_fp(CONF *conf, FILE *fp, long *eline)
+int __cdecl NCONF_load_fp(CONF *conf, FILE *fp, long *eline)
 {
     BIO *btmp;
     int ret;
@@ -229,7 +229,7 @@ int NCONF_load_fp(CONF *conf, FILE *fp, long *eline)
 }
 #endif
 
-int NCONF_load_bio(CONF *conf, BIO *bp, long *eline)
+int __cdecl NCONF_load_bio(CONF *conf, BIO *bp, long *eline)
 {
     if (conf == NULL) {
         CONFerr(CONF_F_NCONF_LOAD_BIO, CONF_R_NO_CONF);
@@ -239,7 +239,7 @@ int NCONF_load_bio(CONF *conf, BIO *bp, long *eline)
     return conf->meth->load_bio(conf, bp, eline);
 }
 
-STACK_OF(CONF_VALUE) *NCONF_get_section(const CONF *conf, const char *section)
+STACK_OF(CONF_VALUE) * __cdecl NCONF_get_section(const CONF *conf, const char *section)
 {
     if (conf == NULL) {
         CONFerr(CONF_F_NCONF_GET_SECTION, CONF_R_NO_CONF);
@@ -254,7 +254,7 @@ STACK_OF(CONF_VALUE) *NCONF_get_section(const CONF *conf, const char *section)
     return _CONF_get_section_values(conf, section);
 }
 
-char *NCONF_get_string(const CONF *conf, const char *group, const char *name)
+char * __cdecl NCONF_get_string(const CONF *conf, const char *group, const char *name)
 {
     char *s = _CONF_get_string(conf, group, name);
 
@@ -285,7 +285,7 @@ static int default_to_int(const CONF *conf, char c)
     return (int)(c - '0');
 }
 
-int NCONF_get_number_e(const CONF *conf, const char *group, const char *name,
+int __cdecl NCONF_get_number_e(const CONF *conf, const char *group, const char *name,
                        long *result)
 {
     char *str;
@@ -324,7 +324,7 @@ int NCONF_get_number_e(const CONF *conf, const char *group, const char *name,
 }
 
 #ifndef OPENSSL_NO_STDIO
-int NCONF_dump_fp(const CONF *conf, FILE *out)
+int __cdecl NCONF_dump_fp(const CONF *conf, FILE *out)
 {
     BIO *btmp;
     int ret;
@@ -338,7 +338,7 @@ int NCONF_dump_fp(const CONF *conf, FILE *out)
 }
 #endif
 
-int NCONF_dump_bio(const CONF *conf, BIO *out)
+int __cdecl NCONF_dump_bio(const CONF *conf, BIO *out)
 {
     if (conf == NULL) {
         CONFerr(CONF_F_NCONF_DUMP_BIO, CONF_R_NO_CONF);
@@ -352,7 +352,7 @@ int NCONF_dump_bio(const CONF *conf, BIO *out)
  * These routines call the C malloc/free, to avoid intermixing with
  * OpenSSL function pointers before the library is initialized.
  */
-OPENSSL_INIT_SETTINGS *OPENSSL_INIT_new(void)
+OPENSSL_INIT_SETTINGS * __cdecl OPENSSL_INIT_new(void)
 {
     OPENSSL_INIT_SETTINGS *ret = malloc(sizeof(*ret));
 
@@ -365,7 +365,7 @@ OPENSSL_INIT_SETTINGS *OPENSSL_INIT_new(void)
 
 
 #ifndef OPENSSL_NO_STDIO
-int OPENSSL_INIT_set_config_filename(OPENSSL_INIT_SETTINGS *settings,
+int __cdecl OPENSSL_INIT_set_config_filename(OPENSSL_INIT_SETTINGS *settings,
                                      const char *filename)
 {
     char *newfilename = NULL;
@@ -382,13 +382,13 @@ int OPENSSL_INIT_set_config_filename(OPENSSL_INIT_SETTINGS *settings,
     return 1;
 }
 
-void OPENSSL_INIT_set_config_file_flags(OPENSSL_INIT_SETTINGS *settings,
+void __cdecl OPENSSL_INIT_set_config_file_flags(OPENSSL_INIT_SETTINGS *settings,
                                         unsigned long flags)
 {
     settings->flags = flags;
 }
 
-int OPENSSL_INIT_set_config_appname(OPENSSL_INIT_SETTINGS *settings,
+int __cdecl OPENSSL_INIT_set_config_appname(OPENSSL_INIT_SETTINGS *settings,
                                     const char *appname)
 {
     char *newappname = NULL;
@@ -406,7 +406,7 @@ int OPENSSL_INIT_set_config_appname(OPENSSL_INIT_SETTINGS *settings,
 }
 #endif
 
-void OPENSSL_INIT_free(OPENSSL_INIT_SETTINGS *settings)
+void __cdecl OPENSSL_INIT_free(OPENSSL_INIT_SETTINGS *settings)
 {
     free(settings->filename);
     free(settings->appname);
diff --git a/crypto/conf/conf_mall.c b/crypto/conf/conf_mall.c
index 7e86948e89..164e3247cc 100644
--- a/crypto/conf/conf_mall.c
+++ b/crypto/conf/conf_mall.c
@@ -18,7 +18,7 @@
 
 /* Load all OpenSSL builtin modules */
 
-void OPENSSL_load_builtin_modules(void)
+void __cdecl OPENSSL_load_builtin_modules(void)
 {
     /* Add builtin modules here */
     ASN1_add_oid_module();
diff --git a/crypto/conf/conf_mod.c b/crypto/conf/conf_mod.c
index e703d97f54..8fd90440b4 100644
--- a/crypto/conf/conf_mod.c
+++ b/crypto/conf/conf_mod.c
@@ -69,7 +69,7 @@ static CONF_MODULE *module_load_dso(const CONF *cnf, const char *name,
 
 /* Main function: load modules from a CONF structure */
 
-int CONF_modules_load(const CONF *cnf, const char *appname,
+int __cdecl CONF_modules_load(const CONF *cnf, const char *appname,
                       unsigned long flags)
 {
     STACK_OF(CONF_VALUE) *values;
@@ -109,7 +109,7 @@ int CONF_modules_load(const CONF *cnf, const char *appname,
 
 }
 
-int CONF_modules_load_file(const char *filename, const char *appname,
+int __cdecl CONF_modules_load_file(const char *filename, const char *appname,
                            unsigned long flags)
 {
     char *file = NULL;
@@ -356,7 +356,7 @@ static int module_init(CONF_MODULE *pmod, const char *name, const char *value,
  * including static ones.
  */
 
-void CONF_modules_unload(int all)
+void __cdecl CONF_modules_unload(int all)
 {
     int i;
     CONF_MODULE *md;
@@ -387,7 +387,7 @@ static void module_free(CONF_MODULE *md)
 
 /* finish and free up all modules instances */
 
-void CONF_modules_finish(void)
+void __cdecl CONF_modules_finish(void)
 {
     CONF_IMODULE *imod;
     while (sk_CONF_IMODULE_num(initialized_modules) > 0) {
@@ -414,7 +414,7 @@ static void module_finish(CONF_IMODULE *imod)
 
 /* Add a static module to OpenSSL */
 
-int CONF_module_add(const char *name, conf_init_func *ifunc,
+int __cdecl CONF_module_add(const char *name, conf_init_func *ifunc,
                     conf_finish_func *ffunc)
 {
     if (module_add(NULL, name, ifunc, ffunc))
@@ -431,54 +431,54 @@ void conf_modules_free_int(void)
 
 /* Utility functions */
 
-const char *CONF_imodule_get_name(const CONF_IMODULE *md)
+const char * __cdecl CONF_imodule_get_name(const CONF_IMODULE *md)
 {
     return md->name;
 }
 
-const char *CONF_imodule_get_value(const CONF_IMODULE *md)
+const char * __cdecl CONF_imodule_get_value(const CONF_IMODULE *md)
 {
     return md->value;
 }
 
-void *CONF_imodule_get_usr_data(const CONF_IMODULE *md)
+void * __cdecl CONF_imodule_get_usr_data(const CONF_IMODULE *md)
 {
     return md->usr_data;
 }
 
-void CONF_imodule_set_usr_data(CONF_IMODULE *md, void *usr_data)
+void __cdecl CONF_imodule_set_usr_data(CONF_IMODULE *md, void *usr_data)
 {
     md->usr_data = usr_data;
 }
 
-CONF_MODULE *CONF_imodule_get_module(const CONF_IMODULE *md)
+CONF_MODULE * __cdecl CONF_imodule_get_module(const CONF_IMODULE *md)
 {
     return md->pmod;
 }
 
-unsigned long CONF_imodule_get_flags(const CONF_IMODULE *md)
+unsigned long __cdecl CONF_imodule_get_flags(const CONF_IMODULE *md)
 {
     return md->flags;
 }
 
-void CONF_imodule_set_flags(CONF_IMODULE *md, unsigned long flags)
+void __cdecl CONF_imodule_set_flags(CONF_IMODULE *md, unsigned long flags)
 {
     md->flags = flags;
 }
 
-void *CONF_module_get_usr_data(CONF_MODULE *pmod)
+void * __cdecl CONF_module_get_usr_data(CONF_MODULE *pmod)
 {
     return pmod->usr_data;
 }
 
-void CONF_module_set_usr_data(CONF_MODULE *pmod, void *usr_data)
+void __cdecl CONF_module_set_usr_data(CONF_MODULE *pmod, void *usr_data)
 {
     pmod->usr_data = usr_data;
 }
 
 /* Return default config file name */
 
-char *CONF_get1_default_config_file(void)
+char * __cdecl CONF_get1_default_config_file(void)
 {
     char *file, *sep = "";
     int len;
@@ -510,7 +510,7 @@ char *CONF_get1_default_config_file(void)
  * lists for example.
  */
 
-int CONF_parse_list(const char *list_, int sep, int nospc,
+int __cdecl CONF_parse_list(const char *list_, int sep, int nospc,
                     int (*list_cb) (const char *elem, int len, void *usr),
                     void *arg)
 {
diff --git a/crypto/cpt_err.c b/crypto/cpt_err.c
index 4147b1cb9e..e01ac49581 100644
--- a/crypto/cpt_err.c
+++ b/crypto/cpt_err.c
@@ -65,7 +65,7 @@ static const ERR_STRING_DATA CRYPTO_str_reasons[] = {
 
 #endif
 
-int ERR_load_CRYPTO_strings(void)
+int __cdecl ERR_load_CRYPTO_strings(void)
 {
 #ifndef OPENSSL_NO_ERR
     if (ERR_func_error_string(CRYPTO_str_functs[0].error) == NULL) {
diff --git a/crypto/cryptlib.c b/crypto/cryptlib.c
index 7b761a3adc..f91032571e 100644
--- a/crypto/cryptlib.c
+++ b/crypto/cryptlib.c
@@ -184,13 +184,13 @@ void OPENSSL_cpuid_setup(void)
 # if defined(_WIN32_WINNT) && _WIN32_WINNT>=0x0333
 #  ifdef OPENSSL_SYS_WIN_CORE
 
-int OPENSSL_isservice(void)
+int __cdecl OPENSSL_isservice(void)
 {
     /* OneCore API cannot interact with GUI */
     return 1;
 }
 #  else
-int OPENSSL_isservice(void)
+int __cdecl OPENSSL_isservice(void)
 {
     HWINSTA h;
     DWORD len;
@@ -252,7 +252,7 @@ int OPENSSL_isservice(void)
 }
 #  endif
 # else
-int OPENSSL_isservice(void)
+int __cdecl OPENSSL_isservice(void)
 {
     return 0;
 }
@@ -407,13 +407,13 @@ void OPENSSL_showfatal(const char *fmta, ...)
 #endif
 }
 
-int OPENSSL_isservice(void)
+int __cdecl OPENSSL_isservice(void)
 {
     return 0;
 }
 #endif
 
-void OPENSSL_die(const char *message, const char *file, int line)
+void __cdecl OPENSSL_die(const char *message, const char *file, int line)
 {
     OPENSSL_showfatal("%s:%d: OpenSSL internal error: %s\n",
                       file, line, message);
@@ -440,7 +440,7 @@ void OPENSSL_die(const char *message, const char *file, int line)
  * There are also assembler versions of this function.
  */
 # undef CRYPTO_memcmp
-int CRYPTO_memcmp(const void * in_a, const void * in_b, size_t len)
+int __cdecl CRYPTO_memcmp(const void * in_a, const void * in_b, size_t len)
 {
     size_t i;
     const volatile unsigned char *a = in_a;
diff --git a/crypto/ct/ct_b64.c b/crypto/ct/ct_b64.c
index 109ffcdcf2..96a0923227 100644
--- a/crypto/ct/ct_b64.c
+++ b/crypto/ct/ct_b64.c
@@ -60,7 +60,7 @@ err:
     return -1;
 }
 
-SCT *SCT_new_from_base64(unsigned char version, const char *logid_base64,
+SCT * __cdecl SCT_new_from_base64(unsigned char version, const char *logid_base64,
                          ct_log_entry_type_t entry_type, uint64_t timestamp,
                          const char *extensions_base64,
                          const char *signature_base64)
@@ -132,7 +132,7 @@ SCT *SCT_new_from_base64(unsigned char version, const char *logid_base64,
  * 0 on decoding failure, or invalid parameter if any
  * -1 on internal (malloc) failure
  */
-int CTLOG_new_from_base64(CTLOG **ct_log, const char *pkey_base64, const char *name)
+int __cdecl CTLOG_new_from_base64(CTLOG **ct_log, const char *pkey_base64, const char *name)
 {
     unsigned char *pkey_der = NULL;
     int pkey_der_len;
diff --git a/crypto/ct/ct_err.c b/crypto/ct/ct_err.c
index c0c62fee6c..6873d6869a 100644
--- a/crypto/ct/ct_err.c
+++ b/crypto/ct/ct_err.c
@@ -84,7 +84,7 @@ static const ERR_STRING_DATA CT_str_reasons[] = {
 
 #endif
 
-int ERR_load_CT_strings(void)
+int __cdecl ERR_load_CT_strings(void)
 {
 #ifndef OPENSSL_NO_ERR
     if (ERR_func_error_string(CT_str_functs[0].error) == NULL) {
diff --git a/crypto/ct/ct_log.c b/crypto/ct/ct_log.c
index c1bca3e141..b1478336c6 100644
--- a/crypto/ct/ct_log.c
+++ b/crypto/ct/ct_log.c
@@ -89,7 +89,7 @@ err:
     return ret;
 }
 
-CTLOG_STORE *CTLOG_STORE_new(void)
+CTLOG_STORE * __cdecl CTLOG_STORE_new(void)
 {
     CTLOG_STORE *ret = OPENSSL_zalloc(sizeof(*ret));
 
@@ -108,7 +108,7 @@ err:
     return NULL;
 }
 
-void CTLOG_STORE_free(CTLOG_STORE *store)
+void __cdecl CTLOG_STORE_free(CTLOG_STORE *store)
 {
     if (store != NULL) {
         sk_CTLOG_pop_free(store->logs, CTLOG_free);
@@ -135,7 +135,7 @@ static int ctlog_new_from_conf(CTLOG **ct_log, const CONF *conf, const char *sec
     return CTLOG_new_from_base64(ct_log, pkey_base64, description);
 }
 
-int CTLOG_STORE_load_default_file(CTLOG_STORE *store)
+int __cdecl CTLOG_STORE_load_default_file(CTLOG_STORE *store)
 {
     const char *fpath = ossl_safe_getenv(CTLOG_FILE_EVP);
 
@@ -192,7 +192,7 @@ mem_err:
     return -1;
 }
 
-int CTLOG_STORE_load_file(CTLOG_STORE *store, const char *file)
+int __cdecl CTLOG_STORE_load_file(CTLOG_STORE *store, const char *file)
 {
     int ret = 0;
     char *enabled_logs;
@@ -234,7 +234,7 @@ end:
  * Takes ownership of the public key.
  * Copies the name.
  */
-CTLOG *CTLOG_new(EVP_PKEY *public_key, const char *name)
+CTLOG * __cdecl CTLOG_new(EVP_PKEY *public_key, const char *name)
 {
     CTLOG *ret = OPENSSL_zalloc(sizeof(*ret));
 
@@ -260,7 +260,7 @@ err:
 }
 
 /* Frees CT log and associated structures */
-void CTLOG_free(CTLOG *log)
+void __cdecl CTLOG_free(CTLOG *log)
 {
     if (log != NULL) {
         OPENSSL_free(log->name);
@@ -269,19 +269,19 @@ void CTLOG_free(CTLOG *log)
     }
 }
 
-const char *CTLOG_get0_name(const CTLOG *log)
+const char * __cdecl CTLOG_get0_name(const CTLOG *log)
 {
     return log->name;
 }
 
-void CTLOG_get0_log_id(const CTLOG *log, const uint8_t **log_id,
+void __cdecl CTLOG_get0_log_id(const CTLOG *log, const uint8_t **log_id,
                        size_t *log_id_len)
 {
     *log_id = log->log_id;
     *log_id_len = CT_V1_HASHLEN;
 }
 
-EVP_PKEY *CTLOG_get0_public_key(const CTLOG *log)
+EVP_PKEY * __cdecl CTLOG_get0_public_key(const CTLOG *log)
 {
     return log->public_key;
 }
@@ -290,7 +290,7 @@ EVP_PKEY *CTLOG_get0_public_key(const CTLOG *log)
  * Given a log ID, finds the matching log.
  * Returns NULL if no match found.
  */
-const CTLOG *CTLOG_STORE_get0_log_by_id(const CTLOG_STORE *store,
+const CTLOG * __cdecl CTLOG_STORE_get0_log_by_id(const CTLOG_STORE *store,
                                         const uint8_t *log_id,
                                         size_t log_id_len)
 {
diff --git a/crypto/ct/ct_oct.c b/crypto/ct/ct_oct.c
index 0dd691c0f7..283c7fd229 100644
--- a/crypto/ct/ct_oct.c
+++ b/crypto/ct/ct_oct.c
@@ -67,7 +67,7 @@ int o2i_SCT_signature(SCT *sct, const unsigned char **in, size_t len)
     return len - len_remaining;
 }
 
-SCT *o2i_SCT(SCT **psct, const unsigned char **in, size_t len)
+SCT * __cdecl o2i_SCT(SCT **psct, const unsigned char **in, size_t len)
 {
     SCT *sct = NULL;
     const unsigned char *p;
@@ -197,7 +197,7 @@ err:
     return -1;
 }
 
-int i2o_SCT(const SCT *sct, unsigned char **out)
+int __cdecl i2o_SCT(const SCT *sct, unsigned char **out)
 {
     size_t len;
     unsigned char *p = NULL, *pstart = NULL;
@@ -254,7 +254,7 @@ err:
     return -1;
 }
 
-STACK_OF(SCT) *o2i_SCT_LIST(STACK_OF(SCT) **a, const unsigned char **pp,
+STACK_OF(SCT) * __cdecl o2i_SCT_LIST(STACK_OF(SCT) **a, const unsigned char **pp,
                             size_t len)
 {
     STACK_OF(SCT) *sk = NULL;
@@ -318,7 +318,7 @@ STACK_OF(SCT) *o2i_SCT_LIST(STACK_OF(SCT) **a, const unsigned char **pp,
     return NULL;
 }
 
-int i2o_SCT_LIST(const STACK_OF(SCT) *a, unsigned char **pp)
+int __cdecl i2o_SCT_LIST(const STACK_OF(SCT) *a, unsigned char **pp)
 {
     int len, sct_len, i, is_pp_new = 0;
     size_t len2;
@@ -373,7 +373,7 @@ int i2o_SCT_LIST(const STACK_OF(SCT) *a, unsigned char **pp)
     return -1;
 }
 
-STACK_OF(SCT) *d2i_SCT_LIST(STACK_OF(SCT) **a, const unsigned char **pp,
+STACK_OF(SCT) * __cdecl d2i_SCT_LIST(STACK_OF(SCT) **a, const unsigned char **pp,
                             long len)
 {
     ASN1_OCTET_STRING *oct = NULL;
@@ -392,7 +392,7 @@ STACK_OF(SCT) *d2i_SCT_LIST(STACK_OF(SCT) **a, const unsigned char **pp,
     return sk;
 }
 
-int i2d_SCT_LIST(const STACK_OF(SCT) *a, unsigned char **out)
+int __cdecl i2d_SCT_LIST(const STACK_OF(SCT) *a, unsigned char **out)
 {
     ASN1_OCTET_STRING oct;
     int len;
diff --git a/crypto/ct/ct_policy.c b/crypto/ct/ct_policy.c
index 0d7b346387..9ee70de48f 100644
--- a/crypto/ct/ct_policy.c
+++ b/crypto/ct/ct_policy.c
@@ -25,7 +25,7 @@
  */
 static const time_t SCT_CLOCK_DRIFT_TOLERANCE = 300;
 
-CT_POLICY_EVAL_CTX *CT_POLICY_EVAL_CTX_new(void)
+CT_POLICY_EVAL_CTX * __cdecl CT_POLICY_EVAL_CTX_new(void)
 {
     CT_POLICY_EVAL_CTX *ctx = OPENSSL_zalloc(sizeof(CT_POLICY_EVAL_CTX));
 
@@ -41,7 +41,7 @@ CT_POLICY_EVAL_CTX *CT_POLICY_EVAL_CTX_new(void)
     return ctx;
 }
 
-void CT_POLICY_EVAL_CTX_free(CT_POLICY_EVAL_CTX *ctx)
+void __cdecl CT_POLICY_EVAL_CTX_free(CT_POLICY_EVAL_CTX *ctx)
 {
     if (ctx == NULL)
         return;
@@ -50,7 +50,7 @@ void CT_POLICY_EVAL_CTX_free(CT_POLICY_EVAL_CTX *ctx)
     OPENSSL_free(ctx);
 }
 
-int CT_POLICY_EVAL_CTX_set1_cert(CT_POLICY_EVAL_CTX *ctx, X509 *cert)
+int __cdecl CT_POLICY_EVAL_CTX_set1_cert(CT_POLICY_EVAL_CTX *ctx, X509 *cert)
 {
     if (!X509_up_ref(cert))
         return 0;
@@ -58,7 +58,7 @@ int CT_POLICY_EVAL_CTX_set1_cert(CT_POLICY_EVAL_CTX *ctx, X509 *cert)
     return 1;
 }
 
-int CT_POLICY_EVAL_CTX_set1_issuer(CT_POLICY_EVAL_CTX *ctx, X509 *issuer)
+int __cdecl CT_POLICY_EVAL_CTX_set1_issuer(CT_POLICY_EVAL_CTX *ctx, X509 *issuer)
 {
     if (!X509_up_ref(issuer))
         return 0;
@@ -66,33 +66,33 @@ int CT_POLICY_EVAL_CTX_set1_issuer(CT_POLICY_EVAL_CTX *ctx, X509 *issuer)
     return 1;
 }
 
-void CT_POLICY_EVAL_CTX_set_shared_CTLOG_STORE(CT_POLICY_EVAL_CTX *ctx,
+void __cdecl CT_POLICY_EVAL_CTX_set_shared_CTLOG_STORE(CT_POLICY_EVAL_CTX *ctx,
                                                CTLOG_STORE *log_store)
 {
     ctx->log_store = log_store;
 }
 
-void CT_POLICY_EVAL_CTX_set_time(CT_POLICY_EVAL_CTX *ctx, uint64_t time_in_ms)
+void __cdecl CT_POLICY_EVAL_CTX_set_time(CT_POLICY_EVAL_CTX *ctx, uint64_t time_in_ms)
 {
     ctx->epoch_time_in_ms = time_in_ms;
 }
 
-X509* CT_POLICY_EVAL_CTX_get0_cert(const CT_POLICY_EVAL_CTX *ctx)
+X509* __cdecl CT_POLICY_EVAL_CTX_get0_cert(const CT_POLICY_EVAL_CTX *ctx)
 {
     return ctx->cert;
 }
 
-X509* CT_POLICY_EVAL_CTX_get0_issuer(const CT_POLICY_EVAL_CTX *ctx)
+X509* __cdecl CT_POLICY_EVAL_CTX_get0_issuer(const CT_POLICY_EVAL_CTX *ctx)
 {
     return ctx->issuer;
 }
 
-const CTLOG_STORE *CT_POLICY_EVAL_CTX_get0_log_store(const CT_POLICY_EVAL_CTX *ctx)
+const CTLOG_STORE * __cdecl CT_POLICY_EVAL_CTX_get0_log_store(const CT_POLICY_EVAL_CTX *ctx)
 {
     return ctx->log_store;
 }
 
-uint64_t CT_POLICY_EVAL_CTX_get_time(const CT_POLICY_EVAL_CTX *ctx)
+uint64_t __cdecl CT_POLICY_EVAL_CTX_get_time(const CT_POLICY_EVAL_CTX *ctx)
 {
     return ctx->epoch_time_in_ms;
 }
diff --git a/crypto/ct/ct_prn.c b/crypto/ct/ct_prn.c
index 376e04523e..1d96075d24 100644
--- a/crypto/ct/ct_prn.c
+++ b/crypto/ct/ct_prn.c
@@ -47,7 +47,7 @@ static void timestamp_print(uint64_t timestamp, BIO *out)
     ASN1_GENERALIZEDTIME_free(gen);
 }
 
-const char *SCT_validation_status_string(const SCT *sct)
+const char * __cdecl SCT_validation_status_string(const SCT *sct)
 {
 
     switch (SCT_get_validation_status(sct)) {
@@ -67,7 +67,7 @@ const char *SCT_validation_status_string(const SCT *sct)
     return "unknown status";
 }
 
-void SCT_print(const SCT *sct, BIO *out, int indent,
+void __cdecl SCT_print(const SCT *sct, BIO *out, int indent,
                const CTLOG_STORE *log_store)
 {
     const CTLOG *log = NULL;
@@ -111,7 +111,7 @@ void SCT_print(const SCT *sct, BIO *out, int indent,
     BIO_hex_string(out, indent + 16, 16, sct->sig, sct->sig_len);
 }
 
-void SCT_LIST_print(const STACK_OF(SCT) *sct_list, BIO *out, int indent,
+void __cdecl SCT_LIST_print(const STACK_OF(SCT) *sct_list, BIO *out, int indent,
                     const char *separator, const CTLOG_STORE *log_store)
 {
     int sct_count = sk_SCT_num(sct_list);
diff --git a/crypto/ct/ct_sct.c b/crypto/ct/ct_sct.c
index 1dc16857ba..7f209479ae 100644
--- a/crypto/ct/ct_sct.c
+++ b/crypto/ct/ct_sct.c
@@ -19,7 +19,7 @@
 
 #include "ct_locl.h"
 
-SCT *SCT_new(void)
+SCT * __cdecl SCT_new(void)
 {
     SCT *sct = OPENSSL_zalloc(sizeof(*sct));
 
@@ -33,7 +33,7 @@ SCT *SCT_new(void)
     return sct;
 }
 
-void SCT_free(SCT *sct)
+void __cdecl SCT_free(SCT *sct)
 {
     if (sct == NULL)
         return;
@@ -45,12 +45,12 @@ void SCT_free(SCT *sct)
     OPENSSL_free(sct);
 }
 
-void SCT_LIST_free(STACK_OF(SCT) *a)
+void __cdecl SCT_LIST_free(STACK_OF(SCT) *a)
 {
     sk_SCT_pop_free(a, SCT_free);
 }
 
-int SCT_set_version(SCT *sct, sct_version_t version)
+int __cdecl SCT_set_version(SCT *sct, sct_version_t version)
 {
     if (version != SCT_VERSION_V1) {
         CTerr(CT_F_SCT_SET_VERSION, CT_R_UNSUPPORTED_VERSION);
@@ -61,7 +61,7 @@ int SCT_set_version(SCT *sct, sct_version_t version)
     return 1;
 }
 
-int SCT_set_log_entry_type(SCT *sct, ct_log_entry_type_t entry_type)
+int __cdecl SCT_set_log_entry_type(SCT *sct, ct_log_entry_type_t entry_type)
 {
     sct->validation_status = SCT_VALIDATION_STATUS_NOT_SET;
 
@@ -77,7 +77,7 @@ int SCT_set_log_entry_type(SCT *sct, ct_log_entry_type_t entry_type)
     return 0;
 }
 
-int SCT_set0_log_id(SCT *sct, unsigned char *log_id, size_t log_id_len)
+int __cdecl SCT_set0_log_id(SCT *sct, unsigned char *log_id, size_t log_id_len)
 {
     if (sct->version == SCT_VERSION_V1 && log_id_len != CT_V1_HASHLEN) {
         CTerr(CT_F_SCT_SET0_LOG_ID, CT_R_INVALID_LOG_ID_LENGTH);
@@ -91,7 +91,7 @@ int SCT_set0_log_id(SCT *sct, unsigned char *log_id, size_t log_id_len)
     return 1;
 }
 
-int SCT_set1_log_id(SCT *sct, const unsigned char *log_id, size_t log_id_len)
+int __cdecl SCT_set1_log_id(SCT *sct, const unsigned char *log_id, size_t log_id_len)
 {
     if (sct->version == SCT_VERSION_V1 && log_id_len != CT_V1_HASHLEN) {
         CTerr(CT_F_SCT_SET1_LOG_ID, CT_R_INVALID_LOG_ID_LENGTH);
@@ -115,13 +115,13 @@ int SCT_set1_log_id(SCT *sct, const unsigned char *log_id, size_t log_id_len)
 }
 
 
-void SCT_set_timestamp(SCT *sct, uint64_t timestamp)
+void __cdecl SCT_set_timestamp(SCT *sct, uint64_t timestamp)
 {
     sct->timestamp = timestamp;
     sct->validation_status = SCT_VALIDATION_STATUS_NOT_SET;
 }
 
-int SCT_set_signature_nid(SCT *sct, int nid)
+int __cdecl SCT_set_signature_nid(SCT *sct, int nid)
 {
     switch (nid) {
     case NID_sha256WithRSAEncryption:
@@ -140,7 +140,7 @@ int SCT_set_signature_nid(SCT *sct, int nid)
     }
 }
 
-void SCT_set0_extensions(SCT *sct, unsigned char *ext, size_t ext_len)
+void __cdecl SCT_set0_extensions(SCT *sct, unsigned char *ext, size_t ext_len)
 {
     OPENSSL_free(sct->ext);
     sct->ext = ext;
@@ -148,7 +148,7 @@ void SCT_set0_extensions(SCT *sct, unsigned char *ext, size_t ext_len)
     sct->validation_status = SCT_VALIDATION_STATUS_NOT_SET;
 }
 
-int SCT_set1_extensions(SCT *sct, const unsigned char *ext, size_t ext_len)
+int __cdecl SCT_set1_extensions(SCT *sct, const unsigned char *ext, size_t ext_len)
 {
     OPENSSL_free(sct->ext);
     sct->ext = NULL;
@@ -166,7 +166,7 @@ int SCT_set1_extensions(SCT *sct, const unsigned char *ext, size_t ext_len)
     return 1;
 }
 
-void SCT_set0_signature(SCT *sct, unsigned char *sig, size_t sig_len)
+void __cdecl SCT_set0_signature(SCT *sct, unsigned char *sig, size_t sig_len)
 {
     OPENSSL_free(sct->sig);
     sct->sig = sig;
@@ -174,7 +174,7 @@ void SCT_set0_signature(SCT *sct, unsigned char *sig, size_t sig_len)
     sct->validation_status = SCT_VALIDATION_STATUS_NOT_SET;
 }
 
-int SCT_set1_signature(SCT *sct, const unsigned char *sig, size_t sig_len)
+int __cdecl SCT_set1_signature(SCT *sct, const unsigned char *sig, size_t sig_len)
 {
     OPENSSL_free(sct->sig);
     sct->sig = NULL;
@@ -192,28 +192,28 @@ int SCT_set1_signature(SCT *sct, const unsigned char *sig, size_t sig_len)
     return 1;
 }
 
-sct_version_t SCT_get_version(const SCT *sct)
+sct_version_t __cdecl SCT_get_version(const SCT *sct)
 {
     return sct->version;
 }
 
-ct_log_entry_type_t SCT_get_log_entry_type(const SCT *sct)
+ct_log_entry_type_t __cdecl SCT_get_log_entry_type(const SCT *sct)
 {
     return sct->entry_type;
 }
 
-size_t SCT_get0_log_id(const SCT *sct, unsigned char **log_id)
+size_t __cdecl SCT_get0_log_id(const SCT *sct, unsigned char **log_id)
 {
     *log_id = sct->log_id;
     return sct->log_id_len;
 }
 
-uint64_t SCT_get_timestamp(const SCT *sct)
+uint64_t __cdecl SCT_get_timestamp(const SCT *sct)
 {
     return sct->timestamp;
 }
 
-int SCT_get_signature_nid(const SCT *sct)
+int __cdecl SCT_get_signature_nid(const SCT *sct)
 {
     if (sct->version == SCT_VERSION_V1) {
         if (sct->hash_alg == TLSEXT_hash_sha256) {
@@ -230,13 +230,13 @@ int SCT_get_signature_nid(const SCT *sct)
     return NID_undef;
 }
 
-size_t SCT_get0_extensions(const SCT *sct, unsigned char **ext)
+size_t __cdecl SCT_get0_extensions(const SCT *sct, unsigned char **ext)
 {
     *ext = sct->ext;
     return sct->ext_len;
 }
 
-size_t SCT_get0_signature(const SCT *sct, unsigned char **sig)
+size_t __cdecl SCT_get0_signature(const SCT *sct, unsigned char **sig)
 {
     *sig = sct->sig;
     return sct->sig_len;
@@ -260,12 +260,12 @@ int SCT_signature_is_complete(const SCT *sct)
         sct->sig != NULL && sct->sig_len > 0;
 }
 
-sct_source_t SCT_get_source(const SCT *sct)
+sct_source_t __cdecl SCT_get_source(const SCT *sct)
 {
     return sct->source;
 }
 
-int SCT_set_source(SCT *sct, sct_source_t source)
+int __cdecl SCT_set_source(SCT *sct, sct_source_t source)
 {
     sct->source = source;
     sct->validation_status = SCT_VALIDATION_STATUS_NOT_SET;
@@ -282,12 +282,12 @@ int SCT_set_source(SCT *sct, sct_source_t source)
     return 1;
 }
 
-sct_validation_status_t SCT_get_validation_status(const SCT *sct)
+sct_validation_status_t __cdecl SCT_get_validation_status(const SCT *sct)
 {
     return sct->validation_status;
 }
 
-int SCT_validate(SCT *sct, const CT_POLICY_EVAL_CTX *ctx)
+int __cdecl SCT_validate(SCT *sct, const CT_POLICY_EVAL_CTX *ctx)
 {
     int is_sct_valid = -1;
     SCT_CTX *sctx = NULL;
@@ -373,7 +373,7 @@ err:
     return is_sct_valid;
 }
 
-int SCT_LIST_validate(const STACK_OF(SCT) *scts, CT_POLICY_EVAL_CTX *ctx)
+int __cdecl SCT_LIST_validate(const STACK_OF(SCT) *scts, CT_POLICY_EVAL_CTX *ctx)
 {
     int are_scts_valid = 1;
     int sct_count = scts != NULL ? sk_SCT_num(scts) : 0;
diff --git a/crypto/cversion.c b/crypto/cversion.c
index 534e7eba55..dae679e43d 100644
--- a/crypto/cversion.c
+++ b/crypto/cversion.c
@@ -11,12 +11,12 @@
 
 #include "buildinf.h"
 
-unsigned long OpenSSL_version_num(void)
+unsigned long __cdecl OpenSSL_version_num(void)
 {
     return OPENSSL_VERSION_NUMBER;
 }
 
-const char *OpenSSL_version(int t)
+const char * __cdecl OpenSSL_version(int t)
 {
     switch (t) {
     case OPENSSL_VERSION:
diff --git a/crypto/des/cbc_cksm.c b/crypto/des/cbc_cksm.c
index 5a1f72f82d..08eb1daeae 100644
--- a/crypto/des/cbc_cksm.c
+++ b/crypto/des/cbc_cksm.c
@@ -9,7 +9,7 @@
 
 #include "des_locl.h"
 
-DES_LONG DES_cbc_cksum(const unsigned char *in, DES_cblock *output,
+DES_LONG __cdecl DES_cbc_cksum(const unsigned char *in, DES_cblock *output,
                        long length, DES_key_schedule *schedule,
                        const_DES_cblock *ivec)
 {
diff --git a/crypto/des/cfb64ede.c b/crypto/des/cfb64ede.c
index 21943f6143..5787e2e741 100644
--- a/crypto/des/cfb64ede.c
+++ b/crypto/des/cfb64ede.c
@@ -15,7 +15,7 @@
  * used is contained in *num;
  */
 
-void DES_ede3_cfb64_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl DES_ede3_cfb64_encrypt(const unsigned char *in, unsigned char *out,
                             long length, DES_key_schedule *ks1,
                             DES_key_schedule *ks2, DES_key_schedule *ks3,
                             DES_cblock *ivec, int *num, int enc)
@@ -82,7 +82,7 @@ void DES_ede3_cfb64_encrypt(const unsigned char *in, unsigned char *out,
  * not what EVP needs.
  */
 
-void DES_ede3_cfb_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl DES_ede3_cfb_encrypt(const unsigned char *in, unsigned char *out,
                           int numbits, long length, DES_key_schedule *ks1,
                           DES_key_schedule *ks2, DES_key_schedule *ks3,
                           DES_cblock *ivec, int enc)
diff --git a/crypto/des/cfb64enc.c b/crypto/des/cfb64enc.c
index 96de51b055..fe5494e048 100644
--- a/crypto/des/cfb64enc.c
+++ b/crypto/des/cfb64enc.c
@@ -15,7 +15,7 @@
  * used is contained in *num;
  */
 
-void DES_cfb64_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl DES_cfb64_encrypt(const unsigned char *in, unsigned char *out,
                        long length, DES_key_schedule *schedule,
                        DES_cblock *ivec, int *num, int enc)
 {
diff --git a/crypto/des/cfb_enc.c b/crypto/des/cfb_enc.c
index 544392e405..038cc0b5c2 100644
--- a/crypto/des/cfb_enc.c
+++ b/crypto/des/cfb_enc.c
@@ -21,7 +21,7 @@
  * Until Aug 1 2003 this function did not correctly implement CFB-r, so it
  * will not be compatible with any encryption prior to that date. Ben.
  */
-void DES_cfb_encrypt(const unsigned char *in, unsigned char *out, int numbits,
+void __cdecl DES_cfb_encrypt(const unsigned char *in, unsigned char *out, int numbits,
                      long length, DES_key_schedule *schedule,
                      DES_cblock *ivec, int enc)
 {
diff --git a/crypto/des/des_enc.c b/crypto/des/des_enc.c
index ed134ace8c..cc26900077 100644
--- a/crypto/des/des_enc.c
+++ b/crypto/des/des_enc.c
@@ -11,7 +11,7 @@
 #include "des_locl.h"
 #include "spr.h"
 
-void DES_encrypt1(DES_LONG *data, DES_key_schedule *ks, int enc)
+void __cdecl DES_encrypt1(DES_LONG *data, DES_key_schedule *ks, int enc)
 {
     register DES_LONG l, r, t, u;
     register DES_LONG *s;
@@ -82,7 +82,7 @@ void DES_encrypt1(DES_LONG *data, DES_key_schedule *ks, int enc)
     l = r = t = u = 0;
 }
 
-void DES_encrypt2(DES_LONG *data, DES_key_schedule *ks, int enc)
+void __cdecl DES_encrypt2(DES_LONG *data, DES_key_schedule *ks, int enc)
 {
     register DES_LONG l, r, t, u;
     register DES_LONG *s;
@@ -146,7 +146,7 @@ void DES_encrypt2(DES_LONG *data, DES_key_schedule *ks, int enc)
     l = r = t = u = 0;
 }
 
-void DES_encrypt3(DES_LONG *data, DES_key_schedule *ks1,
+void __cdecl DES_encrypt3(DES_LONG *data, DES_key_schedule *ks1,
                   DES_key_schedule *ks2, DES_key_schedule *ks3)
 {
     register DES_LONG l, r;
@@ -166,7 +166,7 @@ void DES_encrypt3(DES_LONG *data, DES_key_schedule *ks1,
     data[1] = r;
 }
 
-void DES_decrypt3(DES_LONG *data, DES_key_schedule *ks1,
+void __cdecl DES_decrypt3(DES_LONG *data, DES_key_schedule *ks1,
                   DES_key_schedule *ks2, DES_key_schedule *ks3)
 {
     register DES_LONG l, r;
@@ -191,7 +191,7 @@ void DES_decrypt3(DES_LONG *data, DES_key_schedule *ks1,
 # undef CBC_ENC_C__DONT_UPDATE_IV
 # include "ncbc_enc.c"          /* DES_ncbc_encrypt */
 
-void DES_ede3_cbc_encrypt(const unsigned char *input, unsigned char *output,
+void __cdecl DES_ede3_cbc_encrypt(const unsigned char *input, unsigned char *output,
                           long length, DES_key_schedule *ks1,
                           DES_key_schedule *ks2, DES_key_schedule *ks3,
                           DES_cblock *ivec, int enc)
diff --git a/crypto/des/ecb3_enc.c b/crypto/des/ecb3_enc.c
index 6ac89d4e78..87d36b06f2 100644
--- a/crypto/des/ecb3_enc.c
+++ b/crypto/des/ecb3_enc.c
@@ -9,7 +9,7 @@
 
 #include "des_locl.h"
 
-void DES_ecb3_encrypt(const_DES_cblock *input, DES_cblock *output,
+void __cdecl DES_ecb3_encrypt(const_DES_cblock *input, DES_cblock *output,
                       DES_key_schedule *ks1, DES_key_schedule *ks2,
                       DES_key_schedule *ks3, int enc)
 {
diff --git a/crypto/des/ecb_enc.c b/crypto/des/ecb_enc.c
index 5ed079d15f..96283d0b72 100644
--- a/crypto/des/ecb_enc.c
+++ b/crypto/des/ecb_enc.c
@@ -12,7 +12,7 @@
 #include <openssl/bio.h>
 
 
-const char *DES_options(void)
+const char * __cdecl DES_options(void)
 {
     static int init = 1;
     static char buf[12];
@@ -27,7 +27,7 @@ const char *DES_options(void)
     return buf;
 }
 
-void DES_ecb_encrypt(const_DES_cblock *input, DES_cblock *output,
+void __cdecl DES_ecb_encrypt(const_DES_cblock *input, DES_cblock *output,
                      DES_key_schedule *ks, int enc)
 {
     register DES_LONG l;
diff --git a/crypto/des/fcrypt.c b/crypto/des/fcrypt.c
index aaee4bf236..c398fcc879 100644
--- a/crypto/des/fcrypt.c
+++ b/crypto/des/fcrypt.c
@@ -55,7 +55,7 @@ static unsigned const char cov_2char[64] = {
     0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A
 };
 
-char *DES_crypt(const char *buf, const char *salt)
+char * __cdecl DES_crypt(const char *buf, const char *salt)
 {
     static char buff[14];
 
@@ -88,7 +88,7 @@ char *DES_crypt(const char *buf, const char *salt)
 #endif
 }
 
-char *DES_fcrypt(const char *buf, const char *salt, char *ret)
+char * __cdecl DES_fcrypt(const char *buf, const char *salt, char *ret)
 {
     unsigned int i, j, x, y;
     DES_LONG Eswap0, Eswap1;
diff --git a/crypto/des/ncbc_enc.c b/crypto/des/ncbc_enc.c
index 244f15ca2a..6143a3a46d 100644
--- a/crypto/des/ncbc_enc.c
+++ b/crypto/des/ncbc_enc.c
@@ -16,10 +16,10 @@
 #include "des_locl.h"
 
 #ifdef CBC_ENC_C__DONT_UPDATE_IV
-void DES_cbc_encrypt(const unsigned char *in, unsigned char *out, long length,
+void __cdecl DES_cbc_encrypt(const unsigned char *in, unsigned char *out, long length,
                      DES_key_schedule *_schedule, DES_cblock *ivec, int enc)
 #else
-void DES_ncbc_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl DES_ncbc_encrypt(const unsigned char *in, unsigned char *out,
                       long length, DES_key_schedule *_schedule,
                       DES_cblock *ivec, int enc)
 #endif
diff --git a/crypto/des/ofb64ede.c b/crypto/des/ofb64ede.c
index a551a07e0e..321c627aa3 100644
--- a/crypto/des/ofb64ede.c
+++ b/crypto/des/ofb64ede.c
@@ -14,7 +14,7 @@
  * The extra state information to record how much of the 64bit block we have
  * used is contained in *num;
  */
-void DES_ede3_ofb64_encrypt(register const unsigned char *in,
+void __cdecl DES_ede3_ofb64_encrypt(register const unsigned char *in,
                             register unsigned char *out, long length,
                             DES_key_schedule *k1, DES_key_schedule *k2,
                             DES_key_schedule *k3, DES_cblock *ivec, int *num)
diff --git a/crypto/des/ofb64enc.c b/crypto/des/ofb64enc.c
index 30976c871d..cd8bb4894a 100644
--- a/crypto/des/ofb64enc.c
+++ b/crypto/des/ofb64enc.c
@@ -14,7 +14,7 @@
  * The extra state information to record how much of the 64bit block we have
  * used is contained in *num;
  */
-void DES_ofb64_encrypt(register const unsigned char *in,
+void __cdecl DES_ofb64_encrypt(register const unsigned char *in,
                        register unsigned char *out, long length,
                        DES_key_schedule *schedule, DES_cblock *ivec, int *num)
 {
diff --git a/crypto/des/ofb_enc.c b/crypto/des/ofb_enc.c
index 65a9b8604d..03b3aa5f64 100644
--- a/crypto/des/ofb_enc.c
+++ b/crypto/des/ofb_enc.c
@@ -15,7 +15,7 @@
  * retrieved from the first byte and half the second.  The second 12 bits
  * will come from the 3rd and half the 4th byte.
  */
-void DES_ofb_encrypt(const unsigned char *in, unsigned char *out, int numbits,
+void __cdecl DES_ofb_encrypt(const unsigned char *in, unsigned char *out, int numbits,
                      long length, DES_key_schedule *schedule,
                      DES_cblock *ivec)
 {
diff --git a/crypto/des/pcbc_enc.c b/crypto/des/pcbc_enc.c
index 0fa058f03f..eef34b6503 100644
--- a/crypto/des/pcbc_enc.c
+++ b/crypto/des/pcbc_enc.c
@@ -9,7 +9,7 @@
 
 #include "des_locl.h"
 
-void DES_pcbc_encrypt(const unsigned char *input, unsigned char *output,
+void __cdecl DES_pcbc_encrypt(const unsigned char *input, unsigned char *output,
                       long length, DES_key_schedule *schedule,
                       DES_cblock *ivec, int enc)
 {
diff --git a/crypto/des/qud_cksm.c b/crypto/des/qud_cksm.c
index 81e6be8226..283914f386 100644
--- a/crypto/des/qud_cksm.c
+++ b/crypto/des/qud_cksm.c
@@ -24,7 +24,7 @@
 /* Got the value MIT uses via brute force :-) 2/10/90 eay */
 #define NOISE   ((DES_LONG)83653421L)
 
-DES_LONG DES_quad_cksum(const unsigned char *input, DES_cblock output[],
+DES_LONG __cdecl DES_quad_cksum(const unsigned char *input, DES_cblock output[],
                         long length, int out_count, DES_cblock *seed)
 {
     DES_LONG z0, z1, t0, t1;
diff --git a/crypto/des/rand_key.c b/crypto/des/rand_key.c
index fe8aefec37..1ae58a94ad 100644
--- a/crypto/des/rand_key.c
+++ b/crypto/des/rand_key.c
@@ -10,7 +10,7 @@
 #include <openssl/des.h>
 #include <openssl/rand.h>
 
-int DES_random_key(DES_cblock *ret)
+int __cdecl DES_random_key(DES_cblock *ret)
 {
     do {
         if (RAND_priv_bytes((unsigned char *)ret, sizeof(DES_cblock)) != 1)
diff --git a/crypto/des/set_key.c b/crypto/des/set_key.c
index adbad72362..bb9663f51e 100644
--- a/crypto/des/set_key.c
+++ b/crypto/des/set_key.c
@@ -50,7 +50,7 @@ static const unsigned char odd_parity[256] = {
     254
 };
 
-void DES_set_odd_parity(DES_cblock *key)
+void __cdecl DES_set_odd_parity(DES_cblock *key)
 {
     unsigned int i;
 
@@ -58,7 +58,7 @@ void DES_set_odd_parity(DES_cblock *key)
         (*key)[i] = odd_parity[(*key)[i]];
 }
 
-int DES_check_key_parity(const_DES_cblock *key)
+int __cdecl DES_check_key_parity(const_DES_cblock *key)
 {
     unsigned int i;
 
@@ -99,7 +99,7 @@ static const DES_cblock weak_keys[NUM_WEAK_KEY] = {
     {0xFE, 0xE0, 0xFE, 0xE0, 0xFE, 0xF1, 0xFE, 0xF1}
 };
 
-int DES_is_weak_key(const_DES_cblock *key)
+int __cdecl DES_is_weak_key(const_DES_cblock *key)
 {
     int i;
 
@@ -275,7 +275,7 @@ static const DES_LONG des_skb[8][64] = {
      }
 };
 
-int DES_set_key(const_DES_cblock *key, DES_key_schedule *schedule)
+int __cdecl DES_set_key(const_DES_cblock *key, DES_key_schedule *schedule)
 {
     if (DES_check_key) {
         return DES_set_key_checked(key, schedule);
@@ -290,7 +290,7 @@ int DES_set_key(const_DES_cblock *key, DES_key_schedule *schedule)
  * return -1 if key parity error,
  * return -2 if illegal weak key.
  */
-int DES_set_key_checked(const_DES_cblock *key, DES_key_schedule *schedule)
+int __cdecl DES_set_key_checked(const_DES_cblock *key, DES_key_schedule *schedule)
 {
     if (!DES_check_key_parity(key))
         return -1;
@@ -300,7 +300,7 @@ int DES_set_key_checked(const_DES_cblock *key, DES_key_schedule *schedule)
     return 0;
 }
 
-void DES_set_key_unchecked(const_DES_cblock *key, DES_key_schedule *schedule)
+void __cdecl DES_set_key_unchecked(const_DES_cblock *key, DES_key_schedule *schedule)
 {
     static const int shifts2[16] =
         { 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0 };
@@ -366,7 +366,7 @@ void DES_set_key_unchecked(const_DES_cblock *key, DES_key_schedule *schedule)
     }
 }
 
-int DES_key_sched(const_DES_cblock *key, DES_key_schedule *schedule)
+int __cdecl DES_key_sched(const_DES_cblock *key, DES_key_schedule *schedule)
 {
     return DES_set_key(key, schedule);
 }
diff --git a/crypto/des/str2key.c b/crypto/des/str2key.c
index e18d726522..0b290d9da5 100644
--- a/crypto/des/str2key.c
+++ b/crypto/des/str2key.c
@@ -10,7 +10,7 @@
 #include <openssl/crypto.h>
 #include "des_locl.h"
 
-void DES_string_to_key(const char *str, DES_cblock *key)
+void __cdecl DES_string_to_key(const char *str, DES_cblock *key)
 {
     DES_key_schedule ks;
     int i, length;
@@ -37,7 +37,7 @@ void DES_string_to_key(const char *str, DES_cblock *key)
     DES_set_odd_parity(key);
 }
 
-void DES_string_to_2keys(const char *str, DES_cblock *key1, DES_cblock *key2)
+void __cdecl DES_string_to_2keys(const char *str, DES_cblock *key1, DES_cblock *key2)
 {
     DES_key_schedule ks;
     int i, length;
diff --git a/crypto/des/xcbc_enc.c b/crypto/des/xcbc_enc.c
index c4e455d9b9..108e6d99af 100644
--- a/crypto/des/xcbc_enc.c
+++ b/crypto/des/xcbc_enc.c
@@ -11,7 +11,7 @@
 
 /* RSA's DESX */
 
-void DES_xcbc_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl DES_xcbc_encrypt(const unsigned char *in, unsigned char *out,
                       long length, DES_key_schedule *schedule,
                       DES_cblock *ivec, const_DES_cblock *inw,
                       const_DES_cblock *outw, int enc)
diff --git a/crypto/dh/dh_ameth.c b/crypto/dh/dh_ameth.c
index 05a1d4227e..bb1f2fe5b5 100644
--- a/crypto/dh/dh_ameth.c
+++ b/crypto/dh/dh_ameth.c
@@ -418,7 +418,7 @@ static int int_dh_param_copy(DH *to, const DH *from, int is_x942)
     return 1;
 }
 
-DH *DHparams_dup(DH *dh)
+DH * __cdecl DHparams_dup(DH *dh)
 {
     DH *ret;
     ret = DH_new();
@@ -477,7 +477,7 @@ static int dh_private_print(BIO *bp, const EVP_PKEY *pkey, int indent,
     return do_dh_print(bp, pkey->pkey.dh, indent, 2);
 }
 
-int DHparams_print(BIO *bp, const DH *x)
+int __cdecl DHparams_print(BIO *bp, const DH *x)
 {
     return do_dh_print(bp, x, 4, 0);
 }
diff --git a/crypto/dh/dh_asn1.c b/crypto/dh/dh_asn1.c
index 1a40633b48..812985b456 100644
--- a/crypto/dh/dh_asn1.c
+++ b/crypto/dh/dh_asn1.c
@@ -70,15 +70,15 @@ ASN1_SEQUENCE(DHxparams) = {
         ASN1_OPT(int_dhx942_dh, vparams, DHvparams),
 } static_ASN1_SEQUENCE_END_name(int_dhx942_dh, DHxparams)
 
-int_dhx942_dh *d2i_int_dhx(int_dhx942_dh **a,
+int_dhx942_dh * __cdecl d2i_int_dhx(int_dhx942_dh **a,
                            const unsigned char **pp, long length);
-int i2d_int_dhx(const int_dhx942_dh *a, unsigned char **pp);
+int __cdecl i2d_int_dhx(const int_dhx942_dh *a, unsigned char **pp);
 
 IMPLEMENT_ASN1_ENCODE_FUNCTIONS_const_fname(int_dhx942_dh, DHxparams, int_dhx)
 
 /* Application public function: read in X9.42 DH parameters into DH structure */
 
-DH *d2i_DHxparams(DH **a, const unsigned char **pp, long length)
+DH * __cdecl d2i_DHxparams(DH **a, const unsigned char **pp, long length)
 {
     int_dhx942_dh *dhx = NULL;
     DH *dh = NULL;
@@ -115,7 +115,7 @@ DH *d2i_DHxparams(DH **a, const unsigned char **pp, long length)
     return dh;
 }
 
-int i2d_DHxparams(const DH *dh, unsigned char **pp)
+int __cdecl i2d_DHxparams(const DH *dh, unsigned char **pp)
 {
     int_dhx942_dh dhx;
     int_dhvparams dhv;
diff --git a/crypto/dh/dh_check.c b/crypto/dh/dh_check.c
index d13d8206ce..6fd1ed4e24 100644
--- a/crypto/dh/dh_check.c
+++ b/crypto/dh/dh_check.c
@@ -20,7 +20,7 @@
  * p is odd
  * 1 < g < p - 1
  */
-int DH_check_params_ex(const DH *dh)
+int __cdecl DH_check_params_ex(const DH *dh)
 {
     int errflags = 0;
 
@@ -35,7 +35,7 @@ int DH_check_params_ex(const DH *dh)
     return errflags == 0;
 }
 
-int DH_check_params(const DH *dh, int *ret)
+int __cdecl DH_check_params(const DH *dh, int *ret)
 {
     int ok = 0;
     BIGNUM *tmp = NULL;
@@ -70,7 +70,7 @@ int DH_check_params(const DH *dh, int *ret)
  * Check that p is a safe prime and
  * g is a suitable generator.
  */
-int DH_check_ex(const DH *dh)
+int __cdecl DH_check_ex(const DH *dh)
 {
     int errflags = 0;
 
@@ -95,7 +95,7 @@ int DH_check_ex(const DH *dh)
     return errflags == 0;
 }
 
-int DH_check(const DH *dh, int *ret)
+int __cdecl DH_check(const DH *dh, int *ret)
 {
     int ok = 0, r;
     BN_CTX *ctx = NULL;
@@ -160,7 +160,7 @@ int DH_check(const DH *dh, int *ret)
     return ok;
 }
 
-int DH_check_pub_key_ex(const DH *dh, const BIGNUM *pub_key)
+int __cdecl DH_check_pub_key_ex(const DH *dh, const BIGNUM *pub_key)
 {
     int errflags = 0;
 
@@ -177,7 +177,7 @@ int DH_check_pub_key_ex(const DH *dh, const BIGNUM *pub_key)
     return errflags == 0;
 }
 
-int DH_check_pub_key(const DH *dh, const BIGNUM *pub_key, int *ret)
+int __cdecl DH_check_pub_key(const DH *dh, const BIGNUM *pub_key, int *ret)
 {
     int ok = 0;
     BIGNUM *tmp = NULL;
diff --git a/crypto/dh/dh_err.c b/crypto/dh/dh_err.c
index 7285587b4a..c0d1a0f856 100644
--- a/crypto/dh/dh_err.c
+++ b/crypto/dh/dh_err.c
@@ -89,7 +89,7 @@ static const ERR_STRING_DATA DH_str_reasons[] = {
 
 #endif
 
-int ERR_load_DH_strings(void)
+int __cdecl ERR_load_DH_strings(void)
 {
 #ifndef OPENSSL_NO_ERR
     if (ERR_func_error_string(DH_str_functs[0].error) == NULL) {
diff --git a/crypto/dh/dh_gen.c b/crypto/dh/dh_gen.c
index d293835eb2..20e3b0d4d7 100644
--- a/crypto/dh/dh_gen.c
+++ b/crypto/dh/dh_gen.c
@@ -20,7 +20,7 @@
 static int dh_builtin_genparams(DH *ret, int prime_len, int generator,
                                 BN_GENCB *cb);
 
-int DH_generate_parameters_ex(DH *ret, int prime_len, int generator,
+int __cdecl DH_generate_parameters_ex(DH *ret, int prime_len, int generator,
                               BN_GENCB *cb)
 {
     if (ret->meth->generate_params)
diff --git a/crypto/dh/dh_kdf.c b/crypto/dh/dh_kdf.c
index e17122bc82..1424edaa3e 100644
--- a/crypto/dh/dh_kdf.c
+++ b/crypto/dh/dh_kdf.c
@@ -95,7 +95,7 @@ static int dh_sharedinfo_encode(unsigned char **pder, unsigned char **pctr,
     return derlen;
 }
 
-int DH_KDF_X9_42(unsigned char *out, size_t outlen,
+int __cdecl DH_KDF_X9_42(unsigned char *out, size_t outlen,
                  const unsigned char *Z, size_t Zlen,
                  ASN1_OBJECT *key_oid,
                  const unsigned char *ukm, size_t ukmlen, const EVP_MD *md)
diff --git a/crypto/dh/dh_key.c b/crypto/dh/dh_key.c
index 718aa422d9..41e831df91 100644
--- a/crypto/dh/dh_key.c
+++ b/crypto/dh/dh_key.c
@@ -20,17 +20,17 @@ static int dh_bn_mod_exp(const DH *dh, BIGNUM *r,
 static int dh_init(DH *dh);
 static int dh_finish(DH *dh);
 
-int DH_generate_key(DH *dh)
+int __cdecl DH_generate_key(DH *dh)
 {
     return dh->meth->generate_key(dh);
 }
 
-int DH_compute_key(unsigned char *key, const BIGNUM *pub_key, DH *dh)
+int __cdecl DH_compute_key(unsigned char *key, const BIGNUM *pub_key, DH *dh)
 {
     return dh->meth->compute_key(key, pub_key, dh);
 }
 
-int DH_compute_key_padded(unsigned char *key, const BIGNUM *pub_key, DH *dh)
+int __cdecl DH_compute_key_padded(unsigned char *key, const BIGNUM *pub_key, DH *dh)
 {
     int rv, pad;
     rv = dh->meth->compute_key(key, pub_key, dh);
@@ -58,17 +58,17 @@ static DH_METHOD dh_ossl = {
 
 static const DH_METHOD *default_DH_method = &dh_ossl;
 
-const DH_METHOD *DH_OpenSSL(void)
+const DH_METHOD * __cdecl DH_OpenSSL(void)
 {
     return &dh_ossl;
 }
 
-void DH_set_default_method(const DH_METHOD *meth)
+void __cdecl DH_set_default_method(const DH_METHOD *meth)
 {
     default_DH_method = meth;
 }
 
-const DH_METHOD *DH_get_default_method(void)
+const DH_METHOD * __cdecl DH_get_default_method(void)
 {
     return default_DH_method;
 }
diff --git a/crypto/dh/dh_lib.c b/crypto/dh/dh_lib.c
index e7e7ef08e9..5b478956e6 100644
--- a/crypto/dh/dh_lib.c
+++ b/crypto/dh/dh_lib.c
@@ -14,7 +14,7 @@
 #include "dh_locl.h"
 #include <openssl/engine.h>
 
-int DH_set_method(DH *dh, const DH_METHOD *meth)
+int __cdecl DH_set_method(DH *dh, const DH_METHOD *meth)
 {
     /*
      * NB: The caller is specifically setting a method, so it's not up to us
@@ -34,12 +34,12 @@ int DH_set_method(DH *dh, const DH_METHOD *meth)
     return 1;
 }
 
-DH *DH_new(void)
+DH * __cdecl DH_new(void)
 {
     return DH_new_method(NULL);
 }
 
-DH *DH_new_method(ENGINE *engine)
+DH * __cdecl DH_new_method(ENGINE *engine)
 {
     DH *ret = OPENSSL_zalloc(sizeof(*ret));
 
@@ -93,7 +93,7 @@ DH *DH_new_method(ENGINE *engine)
     return NULL;
 }
 
-void DH_free(DH *r)
+void __cdecl DH_free(DH *r)
 {
     int i;
 
@@ -127,7 +127,7 @@ void DH_free(DH *r)
     OPENSSL_free(r);
 }
 
-int DH_up_ref(DH *r)
+int __cdecl DH_up_ref(DH *r)
 {
     int i;
 
@@ -139,27 +139,27 @@ int DH_up_ref(DH *r)
     return ((i > 1) ? 1 : 0);
 }
 
-int DH_set_ex_data(DH *d, int idx, void *arg)
+int __cdecl DH_set_ex_data(DH *d, int idx, void *arg)
 {
     return CRYPTO_set_ex_data(&d->ex_data, idx, arg);
 }
 
-void *DH_get_ex_data(DH *d, int idx)
+void * __cdecl DH_get_ex_data(DH *d, int idx)
 {
     return CRYPTO_get_ex_data(&d->ex_data, idx);
 }
 
-int DH_bits(const DH *dh)
+int __cdecl DH_bits(const DH *dh)
 {
     return BN_num_bits(dh->p);
 }
 
-int DH_size(const DH *dh)
+int __cdecl DH_size(const DH *dh)
 {
     return BN_num_bytes(dh->p);
 }
 
-int DH_security_bits(const DH *dh)
+int __cdecl DH_security_bits(const DH *dh)
 {
     int N;
     if (dh->q)
@@ -172,7 +172,7 @@ int DH_security_bits(const DH *dh)
 }
 
 
-void DH_get0_pqg(const DH *dh,
+void __cdecl DH_get0_pqg(const DH *dh,
                  const BIGNUM **p, const BIGNUM **q, const BIGNUM **g)
 {
     if (p != NULL)
@@ -183,7 +183,7 @@ void DH_get0_pqg(const DH *dh,
         *g = dh->g;
 }
 
-int DH_set0_pqg(DH *dh, BIGNUM *p, BIGNUM *q, BIGNUM *g)
+int __cdecl DH_set0_pqg(DH *dh, BIGNUM *p, BIGNUM *q, BIGNUM *g)
 {
     /* If the fields p and g in d are NULL, the corresponding input
      * parameters MUST be non-NULL.  q may remain NULL.
@@ -212,18 +212,18 @@ int DH_set0_pqg(DH *dh, BIGNUM *p, BIGNUM *q, BIGNUM *g)
     return 1;
 }
 
-long DH_get_length(const DH *dh)
+long __cdecl DH_get_length(const DH *dh)
 {
     return dh->length;
 }
 
-int DH_set_length(DH *dh, long length)
+int __cdecl DH_set_length(DH *dh, long length)
 {
     dh->length = length;
     return 1;
 }
 
-void DH_get0_key(const DH *dh, const BIGNUM **pub_key, const BIGNUM **priv_key)
+void __cdecl DH_get0_key(const DH *dh, const BIGNUM **pub_key, const BIGNUM **priv_key)
 {
     if (pub_key != NULL)
         *pub_key = dh->pub_key;
@@ -231,7 +231,7 @@ void DH_get0_key(const DH *dh, const BIGNUM **pub_key, const BIGNUM **priv_key)
         *priv_key = dh->priv_key;
 }
 
-int DH_set0_key(DH *dh, BIGNUM *pub_key, BIGNUM *priv_key)
+int __cdecl DH_set0_key(DH *dh, BIGNUM *pub_key, BIGNUM *priv_key)
 {
     if (pub_key != NULL) {
         BN_clear_free(dh->pub_key);
@@ -245,47 +245,47 @@ int DH_set0_key(DH *dh, BIGNUM *pub_key, BIGNUM *priv_key)
     return 1;
 }
 
-const BIGNUM *DH_get0_p(const DH *dh)
+const BIGNUM * __cdecl DH_get0_p(const DH *dh)
 {
     return dh->p;
 }
 
-const BIGNUM *DH_get0_q(const DH *dh)
+const BIGNUM * __cdecl DH_get0_q(const DH *dh)
 {
     return dh->q;
 }
 
-const BIGNUM *DH_get0_g(const DH *dh)
+const BIGNUM * __cdecl DH_get0_g(const DH *dh)
 {
     return dh->g;
 }
 
-const BIGNUM *DH_get0_priv_key(const DH *dh)
+const BIGNUM * __cdecl DH_get0_priv_key(const DH *dh)
 {
     return dh->priv_key;
 }
 
-const BIGNUM *DH_get0_pub_key(const DH *dh)
+const BIGNUM * __cdecl DH_get0_pub_key(const DH *dh)
 {
     return dh->pub_key;
 }
 
-void DH_clear_flags(DH *dh, int flags)
+void __cdecl DH_clear_flags(DH *dh, int flags)
 {
     dh->flags &= ~flags;
 }
 
-int DH_test_flags(const DH *dh, int flags)
+int __cdecl DH_test_flags(const DH *dh, int flags)
 {
     return dh->flags & flags;
 }
 
-void DH_set_flags(DH *dh, int flags)
+void __cdecl DH_set_flags(DH *dh, int flags)
 {
     dh->flags |= flags;
 }
 
-ENGINE *DH_get0_engine(DH *dh)
+ENGINE * __cdecl DH_get0_engine(DH *dh)
 {
     return dh->engine;
 }
diff --git a/crypto/dh/dh_meth.c b/crypto/dh/dh_meth.c
index 59c4d7e967..8e1c98640f 100644
--- a/crypto/dh/dh_meth.c
+++ b/crypto/dh/dh_meth.c
@@ -11,7 +11,7 @@
 #include <string.h>
 #include <openssl/err.h>
 
-DH_METHOD *DH_meth_new(const char *name, int flags)
+DH_METHOD * __cdecl DH_meth_new(const char *name, int flags)
 {
     DH_METHOD *dhm = OPENSSL_zalloc(sizeof(*dhm));
 
@@ -29,7 +29,7 @@ DH_METHOD *DH_meth_new(const char *name, int flags)
     return NULL;
 }
 
-void DH_meth_free(DH_METHOD *dhm)
+void __cdecl DH_meth_free(DH_METHOD *dhm)
 {
     if (dhm != NULL) {
         OPENSSL_free(dhm->name);
@@ -37,7 +37,7 @@ void DH_meth_free(DH_METHOD *dhm)
     }
 }
 
-DH_METHOD *DH_meth_dup(const DH_METHOD *dhm)
+DH_METHOD * __cdecl DH_meth_dup(const DH_METHOD *dhm)
 {
     DH_METHOD *ret = OPENSSL_malloc(sizeof(*ret));
 
@@ -55,12 +55,12 @@ DH_METHOD *DH_meth_dup(const DH_METHOD *dhm)
     return NULL;
 }
 
-const char *DH_meth_get0_name(const DH_METHOD *dhm)
+const char * __cdecl DH_meth_get0_name(const DH_METHOD *dhm)
 {
     return dhm->name;
 }
 
-int DH_meth_set1_name(DH_METHOD *dhm, const char *name)
+int __cdecl DH_meth_set1_name(DH_METHOD *dhm, const char *name)
 {
     char *tmpname = OPENSSL_strdup(name);
 
@@ -75,46 +75,46 @@ int DH_meth_set1_name(DH_METHOD *dhm, const char *name)
     return 1;
 }
 
-int DH_meth_get_flags(const DH_METHOD *dhm)
+int __cdecl DH_meth_get_flags(const DH_METHOD *dhm)
 {
     return dhm->flags;
 }
 
-int DH_meth_set_flags(DH_METHOD *dhm, int flags)
+int __cdecl DH_meth_set_flags(DH_METHOD *dhm, int flags)
 {
     dhm->flags = flags;
     return 1;
 }
 
-void *DH_meth_get0_app_data(const DH_METHOD *dhm)
+void * __cdecl DH_meth_get0_app_data(const DH_METHOD *dhm)
 {
     return dhm->app_data;
 }
 
-int DH_meth_set0_app_data(DH_METHOD *dhm, void *app_data)
+int __cdecl DH_meth_set0_app_data(DH_METHOD *dhm, void *app_data)
 {
     dhm->app_data = app_data;
     return 1;
 }
 
-int (*DH_meth_get_generate_key(const DH_METHOD *dhm)) (DH *)
+int (* __cdecl DH_meth_get_generate_key(const DH_METHOD *dhm)) (DH *)
 {
     return dhm->generate_key;
 }
 
-int DH_meth_set_generate_key(DH_METHOD *dhm, int (*generate_key) (DH *))
+int __cdecl DH_meth_set_generate_key(DH_METHOD *dhm, int (*generate_key) (DH *))
 {
     dhm->generate_key = generate_key;
     return 1;
 }
 
-int (*DH_meth_get_compute_key(const DH_METHOD *dhm))
+int (* __cdecl DH_meth_get_compute_key(const DH_METHOD *dhm))
         (unsigned char *key, const BIGNUM *pub_key, DH *dh)
 {
     return dhm->compute_key;
 }
 
-int DH_meth_set_compute_key(DH_METHOD *dhm,
+int __cdecl DH_meth_set_compute_key(DH_METHOD *dhm,
         int (*compute_key) (unsigned char *key, const BIGNUM *pub_key, DH *dh))
 {
     dhm->compute_key = compute_key;
@@ -122,14 +122,14 @@ int DH_meth_set_compute_key(DH_METHOD *dhm,
 }
 
 
-int (*DH_meth_get_bn_mod_exp(const DH_METHOD *dhm))
+int (* __cdecl DH_meth_get_bn_mod_exp(const DH_METHOD *dhm))
     (const DH *, BIGNUM *, const BIGNUM *, const BIGNUM *, const BIGNUM *,
      BN_CTX *, BN_MONT_CTX *)
 {
     return dhm->bn_mod_exp;
 }
 
-int DH_meth_set_bn_mod_exp(DH_METHOD *dhm,
+int __cdecl DH_meth_set_bn_mod_exp(DH_METHOD *dhm,
     int (*bn_mod_exp) (const DH *, BIGNUM *, const BIGNUM *, const BIGNUM *,
                        const BIGNUM *, BN_CTX *, BN_MONT_CTX *))
 {
@@ -137,35 +137,35 @@ int DH_meth_set_bn_mod_exp(DH_METHOD *dhm,
     return 1;
 }
 
-int (*DH_meth_get_init(const DH_METHOD *dhm))(DH *)
+int (* __cdecl DH_meth_get_init(const DH_METHOD *dhm))(DH *)
 {
     return dhm->init;
 }
 
-int DH_meth_set_init(DH_METHOD *dhm, int (*init)(DH *))
+int __cdecl DH_meth_set_init(DH_METHOD *dhm, int (*init)(DH *))
 {
     dhm->init = init;
     return 1;
 }
 
-int (*DH_meth_get_finish(const DH_METHOD *dhm)) (DH *)
+int (* __cdecl DH_meth_get_finish(const DH_METHOD *dhm)) (DH *)
 {
     return dhm->finish;
 }
 
-int DH_meth_set_finish(DH_METHOD *dhm, int (*finish) (DH *))
+int __cdecl DH_meth_set_finish(DH_METHOD *dhm, int (*finish) (DH *))
 {
     dhm->finish = finish;
     return 1;
 }
 
-int (*DH_meth_get_generate_params(const DH_METHOD *dhm))
+int (* __cdecl DH_meth_get_generate_params(const DH_METHOD *dhm))
         (DH *, int, int, BN_GENCB *)
 {
     return dhm->generate_params;
 }
 
-int DH_meth_set_generate_params(DH_METHOD *dhm,
+int __cdecl DH_meth_set_generate_params(DH_METHOD *dhm,
         int (*generate_params) (DH *, int, int, BN_GENCB *))
 {
     dhm->generate_params = generate_params;
diff --git a/crypto/dh/dh_prn.c b/crypto/dh/dh_prn.c
index aab1733db3..a92bc8c4f0 100644
--- a/crypto/dh/dh_prn.c
+++ b/crypto/dh/dh_prn.c
@@ -13,7 +13,7 @@
 #include <openssl/dh.h>
 
 #ifndef OPENSSL_NO_STDIO
-int DHparams_print_fp(FILE *fp, const DH *x)
+int __cdecl DHparams_print_fp(FILE *fp, const DH *x)
 {
     BIO *b;
     int ret;
diff --git a/crypto/dh/dh_rfc5114.c b/crypto/dh/dh_rfc5114.c
index c4a219590e..da0aa66125 100644
--- a/crypto/dh/dh_rfc5114.c
+++ b/crypto/dh/dh_rfc5114.c
@@ -20,7 +20,7 @@
  */
 
 #define make_dh(x) \
-DH *DH_get_##x(void) \
+DH * __cdecl DH_get_##x(void) \
 { \
     DH *dh = DH_new(); \
 \
diff --git a/crypto/dh/dh_rfc7919.c b/crypto/dh/dh_rfc7919.c
index a54b468e55..1395473199 100644
--- a/crypto/dh/dh_rfc7919.c
+++ b/crypto/dh/dh_rfc7919.c
@@ -25,7 +25,7 @@ static DH *dh_param_init(const BIGNUM *p, int32_t nbits)
     return dh;
 }
 
-DH *DH_new_by_nid(int nid)
+DH * __cdecl DH_new_by_nid(int nid)
 {
     switch (nid) {
     case NID_ffdhe2048:
@@ -44,7 +44,7 @@ DH *DH_new_by_nid(int nid)
     }
 }
 
-int DH_get_nid(const DH *dh)
+int __cdecl DH_get_nid(const DH *dh)
 {
     int nid;
 
diff --git a/crypto/dsa/dsa_err.c b/crypto/dsa/dsa_err.c
index 8dcf0548ac..5503fc2534 100644
--- a/crypto/dsa/dsa_err.c
+++ b/crypto/dsa/dsa_err.c
@@ -66,7 +66,7 @@ static const ERR_STRING_DATA DSA_str_reasons[] = {
 
 #endif
 
-int ERR_load_DSA_strings(void)
+int __cdecl ERR_load_DSA_strings(void)
 {
 #ifndef OPENSSL_NO_ERR
     if (ERR_func_error_string(DSA_str_functs[0].error) == NULL) {
diff --git a/crypto/dsa/dsa_lib.c b/crypto/dsa/dsa_lib.c
index 1048601beb..85919db19f 100644
--- a/crypto/dsa/dsa_lib.c
+++ b/crypto/dsa/dsa_lib.c
@@ -16,7 +16,7 @@
 #include <openssl/engine.h>
 #include <openssl/dh.h>
 
-DSA *DSA_new(void)
+DSA * __cdecl DSA_new(void)
 {
     return DSA_new_method(NULL);
 }
diff --git a/crypto/ec/ec_asn1.c b/crypto/ec/ec_asn1.c
index 1ce1181fc1..c289b805a4 100644
--- a/crypto/ec/ec_asn1.c
+++ b/crypto/ec/ec_asn1.c
@@ -905,7 +905,7 @@ EC_GROUP *EC_GROUP_new_from_ecpkparameters(const ECPKPARAMETERS *params)
 
 /* EC_GROUP <-> DER encoding of ECPKPARAMETERS */
 
-EC_GROUP *d2i_ECPKParameters(EC_GROUP **a, const unsigned char **in, long len)
+EC_GROUP * __cdecl d2i_ECPKParameters(EC_GROUP **a, const unsigned char **in, long len)
 {
     EC_GROUP *group = NULL;
     ECPKPARAMETERS *params = NULL;
@@ -933,7 +933,7 @@ EC_GROUP *d2i_ECPKParameters(EC_GROUP **a, const unsigned char **in, long len)
     return group;
 }
 
-int i2d_ECPKParameters(const EC_GROUP *a, unsigned char **out)
+int __cdecl i2d_ECPKParameters(const EC_GROUP *a, unsigned char **out)
 {
     int ret = 0;
     ECPKPARAMETERS *tmp = EC_GROUP_get_ecpkparameters(a, NULL);
@@ -952,7 +952,7 @@ int i2d_ECPKParameters(const EC_GROUP *a, unsigned char **out)
 
 /* some EC_KEY functions */
 
-EC_KEY *d2i_ECPrivateKey(EC_KEY **a, const unsigned char **in, long len)
+EC_KEY * __cdecl d2i_ECPrivateKey(EC_KEY **a, const unsigned char **in, long len)
 {
     EC_KEY *ret = NULL;
     EC_PRIVATEKEY *priv_key = NULL;
@@ -1031,7 +1031,7 @@ EC_KEY *d2i_ECPrivateKey(EC_KEY **a, const unsigned char **in, long len)
     return NULL;
 }
 
-int i2d_ECPrivateKey(EC_KEY *a, unsigned char **out)
+int __cdecl i2d_ECPrivateKey(EC_KEY *a, unsigned char **out)
 {
     int ret = 0, ok = 0;
     unsigned char *priv= NULL, *pub= NULL;
@@ -1209,7 +1209,7 @@ DECLARE_ASN1_FUNCTIONS_const(ECDSA_SIG)
 DECLARE_ASN1_ENCODE_FUNCTIONS_const(ECDSA_SIG, ECDSA_SIG)
 IMPLEMENT_ASN1_ENCODE_FUNCTIONS_const_fname(ECDSA_SIG, ECDSA_SIG, ECDSA_SIG)
 
-ECDSA_SIG *ECDSA_SIG_new(void)
+ECDSA_SIG * __cdecl ECDSA_SIG_new(void)
 {
     ECDSA_SIG *sig = OPENSSL_zalloc(sizeof(*sig));
     if (sig == NULL)
@@ -1217,7 +1217,7 @@ ECDSA_SIG *ECDSA_SIG_new(void)
     return sig;
 }
 
-void ECDSA_SIG_free(ECDSA_SIG *sig)
+void __cdecl ECDSA_SIG_free(ECDSA_SIG *sig)
 {
     if (sig == NULL)
         return;
diff --git a/crypto/ec/ec_key.c b/crypto/ec/ec_key.c
index 9349abf030..6f306973b0 100644
--- a/crypto/ec/ec_key.c
+++ b/crypto/ec/ec_key.c
@@ -15,7 +15,7 @@
 #include <openssl/err.h>
 #include <openssl/engine.h>
 
-EC_KEY *EC_KEY_new(void)
+EC_KEY * __cdecl EC_KEY_new(void)
 {
     return EC_KEY_new_method(NULL);
 }
diff --git a/crypto/ec/ec_lcl.h b/crypto/ec/ec_lcl.h
index fbdb04ea3a..c979ee994f 100644
--- a/crypto/ec/ec_lcl.h
+++ b/crypto/ec/ec_lcl.h
@@ -246,7 +246,7 @@ struct ec_group_st {
     /* method-specific */
     void *field_data2;
     /* method-specific */
-    int (*field_mod_func) (BIGNUM *, const BIGNUM *, const BIGNUM *,
+    int (__cdecl *field_mod_func) (BIGNUM *, const BIGNUM *, const BIGNUM *,
                            BN_CTX *);
     /* data for ECDSA inverse */
     BN_MONT_CTX *mont_data;
diff --git a/crypto/engine/eng_dyn.c b/crypto/engine/eng_dyn.c
index 843226c077..8844659541 100644
--- a/crypto/engine/eng_dyn.c
+++ b/crypto/engine/eng_dyn.c
@@ -117,7 +117,7 @@ struct st_dynamic_data_ctx {
  */
 static int dynamic_ex_data_idx = -1;
 
-static void int_free_str(char *s)
+static void __cdecl int_free_str(char *s)
 {
     OPENSSL_free(s);
 }
diff --git a/crypto/engine/eng_lib.c b/crypto/engine/eng_lib.c
index d7f2026fac..1e494730a6 100644
--- a/crypto/engine/eng_lib.c
+++ b/crypto/engine/eng_lib.c
@@ -157,7 +157,7 @@ void engine_cleanup_add_last(ENGINE_CLEANUP_CB *cb)
 }
 
 /* The API function that performs all cleanup */
-static void engine_cleanup_cb_free(ENGINE_CLEANUP_ITEM *item)
+static void __cdecl engine_cleanup_cb_free(ENGINE_CLEANUP_ITEM *item)
 {
     (*(item->cb)) ();
     OPENSSL_free(item);
diff --git a/crypto/engine/eng_table.c b/crypto/engine/eng_table.c
index ac4b02fc12..cc46bdb969 100644
--- a/crypto/engine/eng_table.c
+++ b/crypto/engine/eng_table.c
@@ -56,7 +56,7 @@ static unsigned long engine_pile_hash(const ENGINE_PILE *c)
     return c->nid;
 }
 
-static int engine_pile_cmp(const ENGINE_PILE *a, const ENGINE_PILE *b)
+static int __cdecl engine_pile_cmp(const ENGINE_PILE *a, const ENGINE_PILE *b)
 {
     return a->nid - b->nid;
 }
diff --git a/crypto/err/err.c b/crypto/err/err.c
index 3a58ccb958..cec0cfdc3a 100644
--- a/crypto/err/err.c
+++ b/crypto/err/err.c
@@ -164,7 +164,7 @@ static unsigned long err_string_data_hash(const ERR_STRING_DATA *a)
     return (ret ^ ret % 19 * 13);
 }
 
-static int err_string_data_cmp(const ERR_STRING_DATA *a,
+static int __cdecl err_string_data_cmp(const ERR_STRING_DATA *a,
                                const ERR_STRING_DATA *b)
 {
     if (a->error == b->error)
@@ -342,7 +342,7 @@ static int err_load_strings(const ERR_STRING_DATA *str)
     return 1;
 }
 
-int ERR_load_ERR_strings(void)
+int __cdecl ERR_load_ERR_strings(void)
 {
 #ifndef OPENSSL_NO_ERR
     if (!RUN_ONCE(&err_string_init, do_err_strings_init))
@@ -357,7 +357,7 @@ int ERR_load_ERR_strings(void)
     return 1;
 }
 
-int ERR_load_strings(int lib, ERR_STRING_DATA *str)
+int __cdecl ERR_load_strings(int lib, ERR_STRING_DATA *str)
 {
     if (ERR_load_ERR_strings() == 0)
         return 0;
@@ -367,7 +367,7 @@ int ERR_load_strings(int lib, ERR_STRING_DATA *str)
     return 1;
 }
 
-int ERR_load_strings_const(const ERR_STRING_DATA *str)
+int __cdecl ERR_load_strings_const(const ERR_STRING_DATA *str)
 {
     if (ERR_load_ERR_strings() == 0)
         return 0;
@@ -375,7 +375,7 @@ int ERR_load_strings_const(const ERR_STRING_DATA *str)
     return 1;
 }
 
-int ERR_unload_strings(int lib, ERR_STRING_DATA *str)
+int __cdecl ERR_unload_strings(int lib, ERR_STRING_DATA *str)
 {
     if (!RUN_ONCE(&err_string_init, do_err_strings_init))
         return 0;
@@ -392,7 +392,7 @@ int ERR_unload_strings(int lib, ERR_STRING_DATA *str)
     return 1;
 }
 
-void err_free_strings_int(void)
+void __cdecl err_free_strings_int(void)
 {
     if (!RUN_ONCE(&err_string_init, do_err_strings_init))
         return;
@@ -437,7 +437,7 @@ void ERR_put_error(int lib, int func, int reason, const char *file, int line)
     err_clear_data(es, es->top);
 }
 
-void ERR_clear_error(void)
+void __cdecl ERR_clear_error(void)
 {
     int i;
     ERR_STATE *es;
@@ -582,7 +582,7 @@ static unsigned long get_error_values(int inc, int top, const char **file,
     return ret;
 }
 
-void ERR_error_string_n(unsigned long e, char *buf, size_t len)
+void __cdecl ERR_error_string_n(unsigned long e, char *buf, size_t len)
 {
     char lsbuf[64], fsbuf[64], rsbuf[64];
     const char *ls, *fs, *rs;
@@ -623,7 +623,7 @@ void ERR_error_string_n(unsigned long e, char *buf, size_t len)
  * ERR_error_string_n should be used instead for ret != NULL as
  * ERR_error_string cannot know how large the buffer is
  */
-char *ERR_error_string(unsigned long e, char *ret)
+char * __cdecl ERR_error_string(unsigned long e, char *ret)
 {
     static char buf[256];
 
@@ -633,7 +633,7 @@ char *ERR_error_string(unsigned long e, char *ret)
     return ret;
 }
 
-const char *ERR_lib_error_string(unsigned long e)
+const char * __cdecl ERR_lib_error_string(unsigned long e)
 {
     ERR_STRING_DATA d, *p;
     unsigned long l;
@@ -648,7 +648,7 @@ const char *ERR_lib_error_string(unsigned long e)
     return ((p == NULL) ? NULL : p->string);
 }
 
-const char *ERR_func_error_string(unsigned long e)
+const char * __cdecl ERR_func_error_string(unsigned long e)
 {
     ERR_STRING_DATA d, *p;
     unsigned long l, f;
@@ -664,7 +664,7 @@ const char *ERR_func_error_string(unsigned long e)
     return ((p == NULL) ? NULL : p->string);
 }
 
-const char *ERR_reason_error_string(unsigned long e)
+const char * __cdecl ERR_reason_error_string(unsigned long e)
 {
     ERR_STRING_DATA d, *p = NULL;
     unsigned long l, r;
@@ -712,7 +712,7 @@ DEFINE_RUN_ONCE_STATIC(err_do_init)
     return CRYPTO_THREAD_init_local(&err_thread_local, NULL);
 }
 
-ERR_STATE *ERR_get_state(void)
+ERR_STATE *__cdecl ERR_get_state(void)
 {
     ERR_STATE *state;
     int saveerrno = get_last_sys_error();
@@ -835,7 +835,7 @@ void ERR_set_error_data(char *data, int flags)
     err_set_error_data_int(data, flags);
 }
 
-void ERR_add_error_data(int num, ...)
+void __cdecl ERR_add_error_data(int num, ...)
 {
     va_list args;
     va_start(args, num);
@@ -843,7 +843,7 @@ void ERR_add_error_data(int num, ...)
     va_end(args);
 }
 
-void ERR_add_error_vdata(int num, va_list args)
+void __cdecl ERR_add_error_vdata(int num, va_list args)
 {
     int i, n, s;
     char *str, *p, *a;
diff --git a/crypto/err/err_all.c b/crypto/err/err_all.c
index d9ec04b606..ad86eaab70 100644
--- a/crypto/err/err_all.c
+++ b/crypto/err/err_all.c
@@ -39,7 +39,7 @@
 #include <openssl/kdferr.h>
 #include <openssl/storeerr.h>
 
-int err_load_crypto_strings_int(void)
+int __cdecl err_load_crypto_strings_int(void)
 {
     if (
 #ifndef OPENSSL_NO_ERR
diff --git a/crypto/err/err_prn.c b/crypto/err/err_prn.c
index c82e62947e..0691fec995 100644
--- a/crypto/err/err_prn.c
+++ b/crypto/err/err_prn.c
@@ -13,7 +13,7 @@
 #include <openssl/buffer.h>
 #include <openssl/err.h>
 
-void ERR_print_errors_cb(int (*cb) (const char *str, size_t len, void *u),
+void __cdecl ERR_print_errors_cb(int (*cb) (const char *str, size_t len, void *u),
                          void *u)
 {
     unsigned long l;
@@ -47,13 +47,13 @@ static int print_bio(const char *str, size_t len, void *bp)
     return BIO_write((BIO *)bp, str, len);
 }
 
-void ERR_print_errors(BIO *bp)
+void __cdecl ERR_print_errors(BIO *bp)
 {
     ERR_print_errors_cb(print_bio, bp);
 }
 
 #ifndef OPENSSL_NO_STDIO
-void ERR_print_errors_fp(FILE *fp)
+void __cdecl ERR_print_errors_fp(FILE *fp)
 {
     BIO *bio = BIO_new_fp(fp, BIO_NOCLOSE);
     if (bio == NULL)
diff --git a/crypto/evp/bio_enc.c b/crypto/evp/bio_enc.c
index 6639061eae..e09e36f470 100644
--- a/crypto/evp/bio_enc.c
+++ b/crypto/evp/bio_enc.c
@@ -405,7 +405,7 @@ int BIO_set_cipher(BIO *b, const EVP_CIPHER *c, const unsigned char *k,
                    const unsigned char *i, int e)
 {
     BIO_ENC_CTX *ctx;
-    long (*callback) (struct bio_st *, int, const char *, int, long, long);
+    long (__cdecl *callback) (struct bio_st *, int, const char *, int, long, long);
 
     ctx = BIO_get_data(b);
     if (ctx == NULL)
diff --git a/crypto/evp/evp_pbe.c b/crypto/evp/evp_pbe.c
index 5a88817b4a..5cd9d07bf7 100644
--- a/crypto/evp/evp_pbe.c
+++ b/crypto/evp/evp_pbe.c
@@ -135,7 +135,7 @@ int EVP_PBE_CipherInit(ASN1_OBJECT *pbe_obj, const char *pass, int passlen,
 
 DECLARE_OBJ_BSEARCH_CMP_FN(EVP_PBE_CTL, EVP_PBE_CTL, pbe2);
 
-static int pbe2_cmp(const EVP_PBE_CTL *pbe1, const EVP_PBE_CTL *pbe2)
+static int __cdecl pbe2_cmp(const EVP_PBE_CTL *pbe1, const EVP_PBE_CTL *pbe2)
 {
     int ret = pbe1->pbe_type - pbe2->pbe_type;
     if (ret)
@@ -146,7 +146,7 @@ static int pbe2_cmp(const EVP_PBE_CTL *pbe1, const EVP_PBE_CTL *pbe2)
 
 IMPLEMENT_OBJ_BSEARCH_CMP_FN(EVP_PBE_CTL, EVP_PBE_CTL, pbe2);
 
-static int pbe_cmp(const EVP_PBE_CTL *const *a, const EVP_PBE_CTL *const *b)
+static int __cdecl pbe_cmp(const EVP_PBE_CTL *const *a, const EVP_PBE_CTL *const *b)
 {
     int ret = (*a)->pbe_type - (*b)->pbe_type;
     if (ret)
@@ -235,7 +235,7 @@ int EVP_PBE_find(int type, int pbe_nid,
     return 1;
 }
 
-static void free_evp_pbe_ctl(EVP_PBE_CTL *pbe)
+static void __cdecl free_evp_pbe_ctl(EVP_PBE_CTL *pbe)
 {
     OPENSSL_free(pbe);
 }
diff --git a/crypto/evp/p_lib.c b/crypto/evp/p_lib.c
index 3cd7ca8d54..8395f0539b 100644
--- a/crypto/evp/p_lib.c
+++ b/crypto/evp/p_lib.c
@@ -137,7 +137,7 @@ int EVP_PKEY_cmp(const EVP_PKEY *a, const EVP_PKEY *b)
     return -2;
 }
 
-EVP_PKEY *EVP_PKEY_new(void)
+EVP_PKEY * __cdecl EVP_PKEY_new(void)
 {
     EVP_PKEY *ret = OPENSSL_zalloc(sizeof(*ret));
 
diff --git a/crypto/evp/pmeth_lib.c b/crypto/evp/pmeth_lib.c
index 7fbf895e07..4d69a349e5 100644
--- a/crypto/evp/pmeth_lib.c
+++ b/crypto/evp/pmeth_lib.c
@@ -17,7 +17,7 @@
 #include "internal/evp_int.h"
 #include "internal/numbers.h"
 
-typedef int sk_cmp_fn_type(const char *const *a, const char *const *b);
+typedef int __cdecl sk_cmp_fn_type(const char *const *a, const char *const *b);
 
 static STACK_OF(EVP_PKEY_METHOD) *app_pkey_methods = NULL;
 
@@ -72,7 +72,7 @@ static const EVP_PKEY_METHOD *standard_methods[] = {
 DECLARE_OBJ_BSEARCH_CMP_FN(const EVP_PKEY_METHOD *, const EVP_PKEY_METHOD *,
                            pmeth);
 
-static int pmeth_cmp(const EVP_PKEY_METHOD *const *a,
+static int __cdecl pmeth_cmp(const EVP_PKEY_METHOD *const *a,
                      const EVP_PKEY_METHOD *const *b)
 {
     return ((*a)->pkey_id - (*b)->pkey_id);
@@ -234,7 +234,7 @@ void EVP_PKEY_meth_copy(EVP_PKEY_METHOD *dst, const EVP_PKEY_METHOD *src)
     dst->check = src->check;
 }
 
-void EVP_PKEY_meth_free(EVP_PKEY_METHOD *pmeth)
+void __cdecl EVP_PKEY_meth_free(EVP_PKEY_METHOD *pmeth)
 {
     if (pmeth && (pmeth->flags & EVP_PKEY_FLAG_DYNAMIC))
         OPENSSL_free(pmeth);
diff --git a/crypto/ex_data.c b/crypto/ex_data.c
index 08dc7c4073..db440eeb06 100644
--- a/crypto/ex_data.c
+++ b/crypto/ex_data.c
@@ -79,7 +79,7 @@ static EX_CALLBACKS *get_and_lock(int class_index)
     return ip;
 }
 
-static void cleanup_cb(EX_CALLBACK *funcs)
+static void __cdecl cleanup_cb(EX_CALLBACK *funcs)
 {
     OPENSSL_free(funcs);
 }
@@ -127,7 +127,7 @@ static int dummy_dup(CRYPTO_EX_DATA *to, const CRYPTO_EX_DATA *from,
     return 1;
 }
 
-int CRYPTO_free_ex_index(int class_index, int idx)
+int __cdecl CRYPTO_free_ex_index(int class_index, int idx)
 {
     EX_CALLBACKS *ip = get_and_lock(class_index);
     EX_CALLBACK *a;
@@ -152,7 +152,7 @@ err:
 /*
  * Register a new index.
  */
-int CRYPTO_get_ex_new_index(int class_index, long argl, void *argp,
+int __cdecl CRYPTO_get_ex_new_index(int class_index, long argl, void *argp,
                             CRYPTO_EX_new *new_func, CRYPTO_EX_dup *dup_func,
                             CRYPTO_EX_free *free_func)
 {
@@ -205,7 +205,7 @@ int CRYPTO_get_ex_new_index(int class_index, long argl, void *argp,
  * in the lock, then using them outside the lock. Note this only applies
  * to the global "ex_data" state (ie. class definitions), not 'ad' itself.
  */
-int CRYPTO_new_ex_data(int class_index, void *obj, CRYPTO_EX_DATA *ad)
+int __cdecl CRYPTO_new_ex_data(int class_index, void *obj, CRYPTO_EX_DATA *ad)
 {
     int mx, i;
     void *ptr;
@@ -250,7 +250,7 @@ int CRYPTO_new_ex_data(int class_index, void *obj, CRYPTO_EX_DATA *ad)
  * Duplicate a CRYPTO_EX_DATA variable - including calling dup() callbacks
  * for each index in the class used by this variable
  */
-int CRYPTO_dup_ex_data(int class_index, CRYPTO_EX_DATA *to,
+int __cdecl CRYPTO_dup_ex_data(int class_index, CRYPTO_EX_DATA *to,
                        const CRYPTO_EX_DATA *from)
 {
     int mx, j, i;
@@ -317,7 +317,7 @@ int CRYPTO_dup_ex_data(int class_index, CRYPTO_EX_DATA *to,
  * Cleanup a CRYPTO_EX_DATA variable - including calling free() callbacks for
  * each index in the class used by this variable
  */
-void CRYPTO_free_ex_data(int class_index, void *obj, CRYPTO_EX_DATA *ad)
+void __cdecl CRYPTO_free_ex_data(int class_index, void *obj, CRYPTO_EX_DATA *ad)
 {
     int mx, i;
     EX_CALLBACKS *ip;
@@ -366,7 +366,7 @@ void CRYPTO_free_ex_data(int class_index, void *obj, CRYPTO_EX_DATA *ad)
  * For a given CRYPTO_EX_DATA variable, set the value corresponding to a
  * particular index in the class used by this variable
  */
-int CRYPTO_set_ex_data(CRYPTO_EX_DATA *ad, int idx, void *val)
+int __cdecl CRYPTO_set_ex_data(CRYPTO_EX_DATA *ad, int idx, void *val)
 {
     int i;
 
@@ -391,7 +391,7 @@ int CRYPTO_set_ex_data(CRYPTO_EX_DATA *ad, int idx, void *val)
  * For a given CRYPTO_EX_DATA_ variable, get the value corresponding to a
  * particular index in the class used by this variable
  */
-void *CRYPTO_get_ex_data(const CRYPTO_EX_DATA *ad, int idx)
+void * __cdecl CRYPTO_get_ex_data(const CRYPTO_EX_DATA *ad, int idx)
 {
     if (ad->sk == NULL || idx >= sk_void_num(ad->sk))
         return NULL;
diff --git a/crypto/include/internal/err_int.h b/crypto/include/internal/err_int.h
index 44ac944627..574d2e780f 100644
--- a/crypto/include/internal/err_int.h
+++ b/crypto/include/internal/err_int.h
@@ -10,7 +10,7 @@
 #ifndef INTERNAL_ERR_INT_H
 # define INTERNAL_ERR_INT_H
 
-int err_load_crypto_strings_int(void);
+int __cdecl err_load_crypto_strings_int(void);
 void err_cleanup(void);
 void err_delete_thread_state(void);
 int err_shelve_state(void **);
diff --git a/crypto/init.c b/crypto/init.c
index 9fc0e8ef68..c87de50e62 100644
--- a/crypto/init.c
+++ b/crypto/init.c
@@ -119,7 +119,7 @@ err:
 
 static CRYPTO_ONCE register_atexit = CRYPTO_ONCE_STATIC_INIT;
 #if !defined(OPENSSL_SYS_UEFI) && defined(_WIN32)
-static int win32atexit(void)
+static int __cdecl win32atexit(void)
 {
     OPENSSL_cleanup();
     return 0;
@@ -449,7 +449,7 @@ static void ossl_init_thread_stop(struct thread_local_inits_st *locals)
     OPENSSL_free(locals);
 }
 
-void OPENSSL_thread_stop(void)
+void __cdecl OPENSSL_thread_stop(void)
 {
     if (destructor_key.sane != -1)
         ossl_init_thread_stop(ossl_init_get_thread_local(0));
@@ -494,7 +494,7 @@ int ossl_init_thread_start(uint64_t opts)
     return 1;
 }
 
-void OPENSSL_cleanup(void)
+void __cdecl OPENSSL_cleanup(void)
 {
     OPENSSL_INIT_STOP *currhandler, *lasthandler;
     CRYPTO_THREAD_LOCAL key;
@@ -617,7 +617,7 @@ void OPENSSL_cleanup(void)
  * called prior to any threads making calls to any OpenSSL functions,
  * i.e. passing a non-null settings value is assumed to be single-threaded.
  */
-int OPENSSL_init_crypto(uint64_t opts, const OPENSSL_INIT_SETTINGS *settings)
+int __cdecl OPENSSL_init_crypto(uint64_t opts, const OPENSSL_INIT_SETTINGS *settings)
 {
     if (stopped) {
         if (!(opts & OPENSSL_INIT_BASE_ONLY))
@@ -759,7 +759,7 @@ int OPENSSL_init_crypto(uint64_t opts, const OPENSSL_INIT_SETTINGS *settings)
     return 1;
 }
 
-int OPENSSL_atexit(void (*handler)(void))
+int __cdecl OPENSSL_atexit(void (*handler)(void))
 {
     OPENSSL_INIT_STOP *newhand;
 
@@ -837,15 +837,15 @@ int OPENSSL_atexit(void (*handler)(void))
  *      http://man7.org/linux/man-pages/man7/signal-safety.7.html
  */
 
-void OPENSSL_fork_prepare(void)
+void __cdecl OPENSSL_fork_prepare(void)
 {
 }
 
-void OPENSSL_fork_parent(void)
+void __cdecl OPENSSL_fork_parent(void)
 {
 }
 
-void OPENSSL_fork_child(void)
+void __cdecl OPENSSL_fork_child(void)
 {
 }
 #endif
diff --git a/crypto/lhash/lhash.c b/crypto/lhash/lhash.c
index 485d4c3fff..e9519e91b6 100644
--- a/crypto/lhash/lhash.c
+++ b/crypto/lhash/lhash.c
@@ -93,7 +93,7 @@ void OPENSSL_LH_free(OPENSSL_LHASH *lh)
     OPENSSL_free(lh);
 }
 
-void *OPENSSL_LH_insert(OPENSSL_LHASH *lh, void *data)
+void * __cdecl OPENSSL_LH_insert(OPENSSL_LHASH *lh, void *data)
 {
     unsigned long hash;
     OPENSSL_LH_NODE *nn, **rn;
diff --git a/crypto/mem.c b/crypto/mem.c
index 780053ffef..56c02305ea 100644
--- a/crypto/mem.c
+++ b/crypto/mem.c
@@ -23,11 +23,11 @@
  */
 static int allow_customize = 1;
 
-static void *(*malloc_impl)(size_t, const char *, int)
+static void *(__cdecl *malloc_impl)(size_t, const char *, int)
     = CRYPTO_malloc;
-static void *(*realloc_impl)(void *, size_t, const char *, int)
+static void *(__cdecl *realloc_impl)(void *, size_t, const char *, int)
     = CRYPTO_realloc;
-static void (*free_impl)(void *, const char *, int)
+static void (__cdecl *free_impl)(void *, const char *, int)
     = CRYPTO_free;
 
 #ifndef OPENSSL_NO_CRYPTO_MDEBUG
@@ -57,10 +57,10 @@ static int call_malloc_debug = 0;
 # define FAILTEST() /* empty */
 #endif
 
-int CRYPTO_set_mem_functions(
-        void *(*m)(size_t, const char *, int),
-        void *(*r)(void *, size_t, const char *, int),
-        void (*f)(void *, const char *, int))
+int __cdecl CRYPTO_set_mem_functions(
+        void *(__cdecl *m)(size_t, const char *, int),
+        void *(__cdecl *r)(void *, size_t, const char *, int),
+        void (__cdecl *f)(void *, const char *, int))
 {
     if (!allow_customize)
         return 0;
@@ -73,7 +73,7 @@ int CRYPTO_set_mem_functions(
     return 1;
 }
 
-int CRYPTO_set_mem_debug(int flag)
+int __cdecl CRYPTO_set_mem_debug(int flag)
 {
     if (!allow_customize)
         return 0;
@@ -81,10 +81,10 @@ int CRYPTO_set_mem_debug(int flag)
     return 1;
 }
 
-void CRYPTO_get_mem_functions(
-        void *(**m)(size_t, const char *, int),
-        void *(**r)(void *, size_t, const char *, int),
-        void (**f)(void *, const char *, int))
+void __cdecl CRYPTO_get_mem_functions(
+        void *(__cdecl **m)(size_t, const char *, int),
+        void *(__cdecl **r)(void *, size_t, const char *, int),
+        void (__cdecl **f)(void *, const char *, int))
 {
     if (m != NULL)
         *m = malloc_impl;
@@ -95,7 +95,7 @@ void CRYPTO_get_mem_functions(
 }
 
 #ifndef OPENSSL_NO_CRYPTO_MDEBUG
-void CRYPTO_get_alloc_counts(int *mcount, int *rcount, int *fcount)
+void __cdecl CRYPTO_get_alloc_counts(int *mcount, int *rcount, int *fcount)
 {
     if (mcount != NULL)
         *mcount = tsan_load(&malloc_count);
@@ -189,7 +189,7 @@ void ossl_malloc_setup_failures(void)
 }
 #endif
 
-void *CRYPTO_malloc(size_t num, const char *file, int line)
+void * __cdecl CRYPTO_malloc(size_t num, const char *file, int line)
 {
     void *ret = NULL;
 
@@ -225,7 +225,7 @@ void *CRYPTO_malloc(size_t num, const char *file, int line)
     return ret;
 }
 
-void *CRYPTO_zalloc(size_t num, const char *file, int line)
+void * __cdecl CRYPTO_zalloc(size_t num, const char *file, int line)
 {
     void *ret = CRYPTO_malloc(num, file, line);
 
@@ -235,7 +235,7 @@ void *CRYPTO_zalloc(size_t num, const char *file, int line)
     return ret;
 }
 
-void *CRYPTO_realloc(void *str, size_t num, const char *file, int line)
+void * __cdecl CRYPTO_realloc(void *str, size_t num, const char *file, int line)
 {
     INCREMENT(realloc_count);
     if (realloc_impl != NULL && realloc_impl != &CRYPTO_realloc)
@@ -265,7 +265,7 @@ void *CRYPTO_realloc(void *str, size_t num, const char *file, int line)
 
 }
 
-void *CRYPTO_clear_realloc(void *str, size_t old_len, size_t num,
+void * __cdecl CRYPTO_clear_realloc(void *str, size_t old_len, size_t num,
                            const char *file, int line)
 {
     void *ret = NULL;
@@ -292,7 +292,7 @@ void *CRYPTO_clear_realloc(void *str, size_t old_len, size_t num,
     return ret;
 }
 
-void CRYPTO_free(void *str, const char *file, int line)
+void __cdecl CRYPTO_free(void *str, const char *file, int line)
 {
     INCREMENT(free_count);
     if (free_impl != NULL && free_impl != &CRYPTO_free) {
@@ -313,7 +313,7 @@ void CRYPTO_free(void *str, const char *file, int line)
 #endif
 }
 
-void CRYPTO_clear_free(void *str, size_t num, const char *file, int line)
+void __cdecl CRYPTO_clear_free(void *str, size_t num, const char *file, int line)
 {
     if (str == NULL)
         return;
diff --git a/crypto/mem_clr.c b/crypto/mem_clr.c
index 35bfb74eae..c9310edccd 100644
--- a/crypto/mem_clr.c
+++ b/crypto/mem_clr.c
@@ -15,11 +15,11 @@
  * the pointer and can't assume that it points to any function in
  * particular (such as memset, which it then might further "optimize")
  */
-typedef void *(*memset_t)(void *, int, size_t);
+typedef void *(__cdecl *memset_t)(void *, int, size_t);
 
 static volatile memset_t memset_func = memset;
 
-void OPENSSL_cleanse(void *ptr, size_t len)
+void __cdecl OPENSSL_cleanse(void *ptr, size_t len)
 {
     memset_func(ptr, 0, len);
 }
diff --git a/crypto/mem_dbg.c b/crypto/mem_dbg.c
index 0489e97adb..9d4d5e5dc1 100644
--- a/crypto/mem_dbg.c
+++ b/crypto/mem_dbg.c
@@ -117,7 +117,7 @@ static void app_info_free(APP_INFO *inf)
 }
 #endif
 
-int CRYPTO_mem_ctrl(int mode)
+int __cdecl CRYPTO_mem_ctrl(int mode)
 {
 #ifdef OPENSSL_NO_CRYPTO_MDEBUG
     return mode - mode;
@@ -266,7 +266,7 @@ static int pop_info(void)
     return 0;
 }
 
-int CRYPTO_mem_debug_push(const char *info, const char *file, int line)
+int __cdecl CRYPTO_mem_debug_push(const char *info, const char *file, int line)
 {
     APP_INFO *ami, *amim;
     int ret = 0;
@@ -298,7 +298,7 @@ int CRYPTO_mem_debug_push(const char *info, const char *file, int line)
     return ret;
 }
 
-int CRYPTO_mem_debug_pop(void)
+int __cdecl CRYPTO_mem_debug_pop(void)
 {
     int ret = 0;
 
@@ -312,7 +312,7 @@ int CRYPTO_mem_debug_pop(void)
 
 static unsigned long break_order_num = 0;
 
-void CRYPTO_mem_debug_malloc(void *addr, size_t num, int before_p,
+void __cdecl CRYPTO_mem_debug_malloc(void *addr, size_t num, int before_p,
                              const char *file, int line)
 {
     MEM *m, *mm;
@@ -379,7 +379,7 @@ void CRYPTO_mem_debug_malloc(void *addr, size_t num, int before_p,
     return;
 }
 
-void CRYPTO_mem_debug_free(void *addr, int before_p,
+void __cdecl CRYPTO_mem_debug_free(void *addr, int before_p,
         const char *file, int line)
 {
     MEM m, *mp;
@@ -407,7 +407,7 @@ void CRYPTO_mem_debug_free(void *addr, int before_p,
     }
 }
 
-void CRYPTO_mem_debug_realloc(void *addr1, void *addr2, size_t num,
+void __cdecl CRYPTO_mem_debug_realloc(void *addr1, void *addr2, size_t num,
                               int before_p, const char *file, int line)
 {
     MEM m, *mp;
@@ -566,7 +566,7 @@ static void print_leak(const MEM *m, MEM_LEAK *l)
 
 IMPLEMENT_LHASH_DOALL_ARG_CONST(MEM, MEM_LEAK);
 
-int CRYPTO_mem_leaks_cb(int (*cb) (const char *str, size_t len, void *u),
+int __cdecl CRYPTO_mem_leaks_cb(int (*cb) (const char *str, size_t len, void *u),
                         void *u)
 {
     MEM_LEAK ml;
@@ -633,7 +633,7 @@ static int print_bio(const char *str, size_t len, void *b)
     return BIO_write((BIO *)b, str, len);
 }
 
-int CRYPTO_mem_leaks(BIO *b)
+int __cdecl CRYPTO_mem_leaks(BIO *b)
 {
     /*
      * OPENSSL_cleanup() will free the ex_data locks so we can't have any
@@ -645,7 +645,7 @@ int CRYPTO_mem_leaks(BIO *b)
 }
 
 # ifndef OPENSSL_NO_STDIO
-int CRYPTO_mem_leaks_fp(FILE *fp)
+int __cdecl CRYPTO_mem_leaks_fp(FILE *fp)
 {
     BIO *b;
     int ret;
diff --git a/crypto/mem_sec.c b/crypto/mem_sec.c
index 9e0f6702f4..ec7000fd8c 100644
--- a/crypto/mem_sec.c
+++ b/crypto/mem_sec.c
@@ -65,7 +65,7 @@ static size_t sh_actual_size(char *ptr);
 static int sh_allocated(const char *ptr);
 #endif
 
-int CRYPTO_secure_malloc_init(size_t size, int minsize)
+int __cdecl CRYPTO_secure_malloc_init(size_t size, int minsize)
 {
 #ifdef OPENSSL_SECURE_MEMORY
     int ret = 0;
@@ -88,7 +88,7 @@ int CRYPTO_secure_malloc_init(size_t size, int minsize)
 #endif /* OPENSSL_SECURE_MEMORY */
 }
 
-int CRYPTO_secure_malloc_done(void)
+int __cdecl CRYPTO_secure_malloc_done(void)
 {
 #ifdef OPENSSL_SECURE_MEMORY
     if (secure_mem_used == 0) {
@@ -102,7 +102,7 @@ int CRYPTO_secure_malloc_done(void)
     return 0;
 }
 
-int CRYPTO_secure_malloc_initialized(void)
+int __cdecl CRYPTO_secure_malloc_initialized(void)
 {
 #ifdef OPENSSL_SECURE_MEMORY
     return secure_mem_initialized;
@@ -111,7 +111,7 @@ int CRYPTO_secure_malloc_initialized(void)
 #endif /* OPENSSL_SECURE_MEMORY */
 }
 
-void *CRYPTO_secure_malloc(size_t num, const char *file, int line)
+void * __cdecl CRYPTO_secure_malloc(size_t num, const char *file, int line)
 {
 #ifdef OPENSSL_SECURE_MEMORY
     void *ret;
@@ -131,7 +131,7 @@ void *CRYPTO_secure_malloc(size_t num, const char *file, int line)
 #endif /* OPENSSL_SECURE_MEMORY */
 }
 
-void *CRYPTO_secure_zalloc(size_t num, const char *file, int line)
+void * __cdecl CRYPTO_secure_zalloc(size_t num, const char *file, int line)
 {
 #ifdef OPENSSL_SECURE_MEMORY
     if (secure_mem_initialized)
@@ -141,7 +141,7 @@ void *CRYPTO_secure_zalloc(size_t num, const char *file, int line)
     return CRYPTO_zalloc(num, file, line);
 }
 
-void CRYPTO_secure_free(void *ptr, const char *file, int line)
+void __cdecl CRYPTO_secure_free(void *ptr, const char *file, int line)
 {
 #ifdef OPENSSL_SECURE_MEMORY
     size_t actual_size;
@@ -163,7 +163,7 @@ void CRYPTO_secure_free(void *ptr, const char *file, int line)
 #endif /* OPENSSL_SECURE_MEMORY */
 }
 
-void CRYPTO_secure_clear_free(void *ptr, size_t num,
+void __cdecl CRYPTO_secure_clear_free(void *ptr, size_t num,
                               const char *file, int line)
 {
 #ifdef OPENSSL_SECURE_MEMORY
@@ -190,7 +190,7 @@ void CRYPTO_secure_clear_free(void *ptr, size_t num,
 #endif /* OPENSSL_SECURE_MEMORY */
 }
 
-int CRYPTO_secure_allocated(const void *ptr)
+int __cdecl CRYPTO_secure_allocated(const void *ptr)
 {
 #ifdef OPENSSL_SECURE_MEMORY
     int ret;
@@ -206,7 +206,7 @@ int CRYPTO_secure_allocated(const void *ptr)
 #endif /* OPENSSL_SECURE_MEMORY */
 }
 
-size_t CRYPTO_secure_used(void)
+size_t __cdecl CRYPTO_secure_used(void)
 {
 #ifdef OPENSSL_SECURE_MEMORY
     return secure_mem_used;
@@ -215,7 +215,7 @@ size_t CRYPTO_secure_used(void)
 #endif /* OPENSSL_SECURE_MEMORY */
 }
 
-size_t CRYPTO_secure_actual_size(void *ptr)
+size_t __cdecl CRYPTO_secure_actual_size(void *ptr)
 {
 #ifdef OPENSSL_SECURE_MEMORY
     size_t actual_size;
diff --git a/crypto/o_fips.c b/crypto/o_fips.c
index 050ea9c216..f3a1755872 100644
--- a/crypto/o_fips.c
+++ b/crypto/o_fips.c
@@ -9,13 +9,13 @@
 
 #include "internal/cryptlib.h"
 
-int FIPS_mode(void)
+int __cdecl FIPS_mode(void)
 {
     /* This version of the library does not support FIPS mode. */
     return 0;
 }
 
-int FIPS_mode_set(int r)
+int __cdecl FIPS_mode_set(int r)
 {
     if (r == 0)
         return 1;
diff --git a/crypto/o_init.c b/crypto/o_init.c
index ed6b1303d8..e133b629c0 100644
--- a/crypto/o_init.c
+++ b/crypto/o_init.c
@@ -15,7 +15,7 @@
  * nothing.
  */
 
-void OPENSSL_init(void)
+void __cdecl OPENSSL_init(void)
 {
     return;
 }
diff --git a/crypto/o_str.c b/crypto/o_str.c
index 9ad7a89dca..2684c159aa 100644
--- a/crypto/o_str.c
+++ b/crypto/o_str.c
@@ -24,7 +24,7 @@ int OPENSSL_memcmp(const void *v1, const void *v2, size_t n)
     return ret;
 }
 
-char *CRYPTO_strdup(const char *str, const char* file, int line)
+char * __cdecl CRYPTO_strdup(const char *str, const char* file, int line)
 {
     char *ret;
 
@@ -36,7 +36,7 @@ char *CRYPTO_strdup(const char *str, const char* file, int line)
     return ret;
 }
 
-char *CRYPTO_strndup(const char *str, size_t s, const char* file, int line)
+char * __cdecl CRYPTO_strndup(const char *str, size_t s, const char* file, int line)
 {
     size_t maxlen;
     char *ret;
@@ -54,7 +54,7 @@ char *CRYPTO_strndup(const char *str, size_t s, const char* file, int line)
     return ret;
 }
 
-void *CRYPTO_memdup(const void *data, size_t siz, const char* file, int line)
+void * __cdecl CRYPTO_memdup(const void *data, size_t siz, const char* file, int line)
 {
     void *ret;
 
@@ -69,7 +69,7 @@ void *CRYPTO_memdup(const void *data, size_t siz, const char* file, int line)
     return memcpy(ret, data, siz);
 }
 
-size_t OPENSSL_strnlen(const char *str, size_t maxlen)
+size_t __cdecl OPENSSL_strnlen(const char *str, size_t maxlen)
 {
     const char *p;
 
@@ -78,7 +78,7 @@ size_t OPENSSL_strnlen(const char *str, size_t maxlen)
     return p - str;
 }
 
-size_t OPENSSL_strlcpy(char *dst, const char *src, size_t size)
+size_t __cdecl OPENSSL_strlcpy(char *dst, const char *src, size_t size)
 {
     size_t l = 0;
     for (; size > 1 && *src; size--) {
@@ -90,7 +90,7 @@ size_t OPENSSL_strlcpy(char *dst, const char *src, size_t size)
     return l + strlen(src);
 }
 
-size_t OPENSSL_strlcat(char *dst, const char *src, size_t size)
+size_t __cdecl OPENSSL_strlcat(char *dst, const char *src, size_t size)
 {
     size_t l = 0;
     for (; size > 0 && *dst; size--, dst++)
@@ -98,7 +98,7 @@ size_t OPENSSL_strlcat(char *dst, const char *src, size_t size)
     return l + OPENSSL_strlcpy(dst, src, size);
 }
 
-int OPENSSL_hexchar2int(unsigned char c)
+int __cdecl OPENSSL_hexchar2int(unsigned char c)
 {
 #ifdef CHARSET_EBCDIC
     c = os_toebcdic[c];
@@ -144,7 +144,7 @@ int OPENSSL_hexchar2int(unsigned char c)
 /*
  * Give a string of hex digits convert to a buffer
  */
-unsigned char *OPENSSL_hexstr2buf(const char *str, long *len)
+unsigned char * __cdecl OPENSSL_hexstr2buf(const char *str, long *len)
 {
     unsigned char *hexbuf, *q;
     unsigned char ch, cl;
@@ -188,7 +188,7 @@ unsigned char *OPENSSL_hexstr2buf(const char *str, long *len)
  * hex representation @@@ (Contents of buffer are always kept in ASCII, also
  * on EBCDIC machines)
  */
-char *OPENSSL_buf2hexstr(const unsigned char *buffer, long len)
+char * __cdecl OPENSSL_buf2hexstr(const unsigned char *buffer, long len)
 {
     static const char hexdig[] = "0123456789ABCDEF";
     char *tmp, *q;
diff --git a/crypto/o_time.c b/crypto/o_time.c
index 6d764f55e2..8e2a4cd734 100644
--- a/crypto/o_time.c
+++ b/crypto/o_time.c
@@ -11,7 +11,7 @@
 #include <string.h>
 #include <openssl/crypto.h>
 
-struct tm *OPENSSL_gmtime(const time_t *timer, struct tm *result)
+struct tm * __cdecl OPENSSL_gmtime(const time_t *timer, struct tm *result)
 {
     struct tm *ts = NULL;
 
@@ -69,7 +69,7 @@ static void julian_to_date(long jd, int *y, int *m, int *d);
 static int julian_adj(const struct tm *tm, int off_day, long offset_sec,
                       long *pday, int *psec);
 
-int OPENSSL_gmtime_adj(struct tm *tm, int off_day, long offset_sec)
+int __cdecl OPENSSL_gmtime_adj(struct tm *tm, int off_day, long offset_sec)
 {
     int time_sec, time_year, time_month, time_day;
     long time_jd;
@@ -99,7 +99,7 @@ int OPENSSL_gmtime_adj(struct tm *tm, int off_day, long offset_sec)
 
 }
 
-int OPENSSL_gmtime_diff(int *pday, int *psec,
+int __cdecl OPENSSL_gmtime_diff(int *pday, int *psec,
                         const struct tm *from, const struct tm *to)
 {
     int from_sec, to_sec, diff_sec;
diff --git a/crypto/objects/o_names.c b/crypto/objects/o_names.c
index c4355370cb..9f9d815e87 100644
--- a/crypto/objects/o_names.c
+++ b/crypto/objects/o_names.c
@@ -30,7 +30,7 @@
  * transparently assign function pointers to it.
  */
 #if defined(OPENSSL_SYS_VMS_DECC) || defined(OPENSSL_SYS_UEFI)
-static int obj_strcasecmp(const char *a, const char *b)
+static int __cdecl obj_strcasecmp(const char *a, const char *b)
 {
     return strcasecmp(a, b);
 }
@@ -48,7 +48,7 @@ static CRYPTO_RWLOCK *obj_lock = NULL;
 
 struct name_funcs_st {
     unsigned long (*hash_func) (const char *name);
-    int (*cmp_func) (const char *a, const char *b);
+    int (__cdecl *cmp_func) (const char *a, const char *b);
     void (*free_func) (const char *, int, const char *);
 };
 
@@ -61,7 +61,7 @@ static STACK_OF(NAME_FUNCS) *name_funcs_stack;
  */
 
 static unsigned long obj_name_hash(const OBJ_NAME *a);
-static int obj_name_cmp(const OBJ_NAME *a, const OBJ_NAME *b);
+static int __cdecl obj_name_cmp(const OBJ_NAME *a, const OBJ_NAME *b);
 
 static CRYPTO_ONCE init = CRYPTO_ONCE_STATIC_INIT;
 DEFINE_RUN_ONCE_STATIC(o_names_init)
@@ -79,7 +79,7 @@ int OBJ_NAME_init(void)
 }
 
 int OBJ_NAME_new_index(unsigned long (*hash_func) (const char *),
-                       int (*cmp_func) (const char *, const char *),
+                       int (__cdecl *cmp_func) (const char *, const char *),
                        void (*free_func) (const char *, int, const char *))
 {
     int ret = 0, i, push;
@@ -137,7 +137,7 @@ out:
     return ret;
 }
 
-static int obj_name_cmp(const OBJ_NAME *a, const OBJ_NAME *b)
+static int __cdecl obj_name_cmp(const OBJ_NAME *a, const OBJ_NAME *b)
 {
     int ret;
 
@@ -334,7 +334,7 @@ static void do_all_sorted_fn(const OBJ_NAME *name, void *d_)
     d->names[d->n++] = name;
 }
 
-static int do_all_sorted_cmp(const void *n1_, const void *n2_)
+static int __cdecl do_all_sorted_cmp(const void *n1_, const void *n2_)
 {
     const OBJ_NAME *const *n1 = n1_;
     const OBJ_NAME *const *n2 = n2_;
@@ -377,7 +377,7 @@ static void names_lh_free_doall(OBJ_NAME *onp)
         OBJ_NAME_remove(onp->name, onp->type);
 }
 
-static void name_funcs_free(NAME_FUNCS *ptr)
+static void __cdecl name_funcs_free(NAME_FUNCS *ptr)
 {
     OPENSSL_free(ptr);
 }
diff --git a/crypto/objects/obj_dat.c b/crypto/objects/obj_dat.c
index ef2d1e0dda..93489b2520 100644
--- a/crypto/objects/obj_dat.c
+++ b/crypto/objects/obj_dat.c
@@ -38,14 +38,14 @@ struct added_obj_st {
 static int new_nid = NUM_NID;
 static LHASH_OF(ADDED_OBJ) *added = NULL;
 
-static int sn_cmp(const ASN1_OBJECT *const *a, const unsigned int *b)
+static int __cdecl sn_cmp(const ASN1_OBJECT *const *a, const unsigned int *b)
 {
     return strcmp((*a)->sn, nid_objs[*b].sn);
 }
 
 IMPLEMENT_OBJ_BSEARCH_CMP_FN(const ASN1_OBJECT *, unsigned int, sn);
 
-static int ln_cmp(const ASN1_OBJECT *const *a, const unsigned int *b)
+static int __cdecl ln_cmp(const ASN1_OBJECT *const *a, const unsigned int *b)
 {
     return strcmp((*a)->ln, nid_objs[*b].ln);
 }
@@ -85,7 +85,7 @@ static unsigned long added_obj_hash(const ADDED_OBJ *ca)
     return ret;
 }
 
-static int added_obj_cmp(const ADDED_OBJ *ca, const ADDED_OBJ *cb)
+static int __cdecl added_obj_cmp(const ADDED_OBJ *ca, const ADDED_OBJ *cb)
 {
     ASN1_OBJECT *a, *b;
     int i;
@@ -298,7 +298,7 @@ const char *OBJ_nid2ln(int n)
     }
 }
 
-static int obj_cmp(const ASN1_OBJECT *const *ap, const unsigned int *bp)
+static int __cdecl obj_cmp(const ASN1_OBJECT *const *ap, const unsigned int *bp)
 {
     int j;
     const ASN1_OBJECT *a = *ap;
@@ -580,14 +580,14 @@ int OBJ_sn2nid(const char *s)
 }
 
 const void *OBJ_bsearch_(const void *key, const void *base, int num, int size,
-                         int (*cmp) (const void *, const void *))
+                         int (__cdecl *cmp) (const void *, const void *))
 {
     return OBJ_bsearch_ex_(key, base, num, size, cmp, 0);
 }
 
 const void *OBJ_bsearch_ex_(const void *key, const void *base_, int num,
                             int size,
-                            int (*cmp) (const void *, const void *),
+                            int (__cdecl *cmp) (const void *, const void *),
                             int flags)
 {
     const char *base = base_;
diff --git a/crypto/objects/obj_xref.c b/crypto/objects/obj_xref.c
index faf59eb20c..b9218cd74c 100644
--- a/crypto/objects/obj_xref.c
+++ b/crypto/objects/obj_xref.c
@@ -14,7 +14,7 @@
 
 static STACK_OF(nid_triple) *sig_app, *sigx_app;
 
-static int sig_cmp(const nid_triple *a, const nid_triple *b)
+static int __cdecl sig_cmp(const nid_triple *a, const nid_triple *b)
 {
     return a->sign_id - b->sign_id;
 }
@@ -22,14 +22,14 @@ static int sig_cmp(const nid_triple *a, const nid_triple *b)
 DECLARE_OBJ_BSEARCH_CMP_FN(nid_triple, nid_triple, sig);
 IMPLEMENT_OBJ_BSEARCH_CMP_FN(nid_triple, nid_triple, sig);
 
-static int sig_sk_cmp(const nid_triple *const *a, const nid_triple *const *b)
+static int __cdecl sig_sk_cmp(const nid_triple *const *a, const nid_triple *const *b)
 {
     return (*a)->sign_id - (*b)->sign_id;
 }
 
 DECLARE_OBJ_BSEARCH_CMP_FN(const nid_triple *, const nid_triple *, sigx);
 
-static int sigx_cmp(const nid_triple *const *a, const nid_triple *const *b)
+static int __cdecl sigx_cmp(const nid_triple *const *a, const nid_triple *const *b)
 {
     int ret;
     ret = (*a)->hash_id - (*b)->hash_id;
@@ -125,7 +125,7 @@ int OBJ_add_sigid(int signid, int dig_id, int pkey_id)
     return 1;
 }
 
-static void sid_free(nid_triple *tt)
+static void __cdecl sid_free(nid_triple *tt)
 {
     OPENSSL_free(tt);
 }
diff --git a/crypto/rsa/rsa_lib.c b/crypto/rsa/rsa_lib.c
index e737a28898..1ba92cd08b 100644
--- a/crypto/rsa/rsa_lib.c
+++ b/crypto/rsa/rsa_lib.c
@@ -17,7 +17,7 @@
 #include "internal/evp_int.h"
 #include "rsa_locl.h"
 
-RSA *RSA_new(void)
+RSA * __cdecl RSA_new(void)
 {
     return RSA_new_method(NULL);
 }
diff --git a/crypto/rsa/rsa_locl.h b/crypto/rsa/rsa_locl.h
index 2b94462a94..6cedbac835 100644
--- a/crypto/rsa/rsa_locl.h
+++ b/crypto/rsa/rsa_locl.h
@@ -67,23 +67,23 @@ struct rsa_st {
 
 struct rsa_meth_st {
     char *name;
-    int (*rsa_pub_enc) (int flen, const unsigned char *from,
+    int (__cdecl *rsa_pub_enc) (int flen, const unsigned char *from,
                         unsigned char *to, RSA *rsa, int padding);
-    int (*rsa_pub_dec) (int flen, const unsigned char *from,
+    int (__cdecl *rsa_pub_dec) (int flen, const unsigned char *from,
                         unsigned char *to, RSA *rsa, int padding);
-    int (*rsa_priv_enc) (int flen, const unsigned char *from,
+    int (__cdecl *rsa_priv_enc) (int flen, const unsigned char *from,
                          unsigned char *to, RSA *rsa, int padding);
-    int (*rsa_priv_dec) (int flen, const unsigned char *from,
+    int (__cdecl *rsa_priv_dec) (int flen, const unsigned char *from,
                          unsigned char *to, RSA *rsa, int padding);
     /* Can be null */
-    int (*rsa_mod_exp) (BIGNUM *r0, const BIGNUM *I, RSA *rsa, BN_CTX *ctx);
+    int (__cdecl *rsa_mod_exp) (BIGNUM *r0, const BIGNUM *I, RSA *rsa, BN_CTX *ctx);
     /* Can be null */
-    int (*bn_mod_exp) (BIGNUM *r, const BIGNUM *a, const BIGNUM *p,
+    int (__cdecl *bn_mod_exp) (BIGNUM *r, const BIGNUM *a, const BIGNUM *p,
                        const BIGNUM *m, BN_CTX *ctx, BN_MONT_CTX *m_ctx);
     /* called at new */
-    int (*init) (RSA *rsa);
+    int (__cdecl *init) (RSA *rsa);
     /* called at free */
-    int (*finish) (RSA *rsa);
+    int (__cdecl *finish) (RSA *rsa);
     /* RSA_METHOD_FLAG_* things */
     int flags;
     /* may be needed! */
@@ -94,11 +94,11 @@ struct rsa_meth_st {
      * this to work the RSA_public_decrypt() and RSA_private_encrypt() should
      * *NOT* be used RSA_sign(), RSA_verify() should be used instead.
      */
-    int (*rsa_sign) (int type,
+    int (__cdecl *rsa_sign) (int type,
                      const unsigned char *m, unsigned int m_length,
                      unsigned char *sigret, unsigned int *siglen,
                      const RSA *rsa);
-    int (*rsa_verify) (int dtype, const unsigned char *m,
+    int (__cdecl *rsa_verify) (int dtype, const unsigned char *m,
                        unsigned int m_length, const unsigned char *sigbuf,
                        unsigned int siglen, const RSA *rsa);
     /*
@@ -107,8 +107,8 @@ struct rsa_meth_st {
      * rewired, but one day it would be nice to assume there are no such
      * things as "builtin software" implementations.
      */
-    int (*rsa_keygen) (RSA *rsa, int bits, BIGNUM *e, BN_GENCB *cb);
-    int (*rsa_multi_prime_keygen) (RSA *rsa, int bits, int primes,
+    int (__cdecl *rsa_keygen) (RSA *rsa, int bits, BIGNUM *e, BN_GENCB *cb);
+    int (__cdecl *rsa_multi_prime_keygen) (RSA *rsa, int bits, int primes,
                                    BIGNUM *e, BN_GENCB *cb);
 };
 
@@ -125,8 +125,8 @@ RSA_PSS_PARAMS *rsa_pss_params_create(const EVP_MD *sigmd,
 int rsa_pss_get_param(const RSA_PSS_PARAMS *pss, const EVP_MD **pmd,
                       const EVP_MD **pmgf1md, int *psaltlen);
 /* internal function to clear and free multi-prime parameters */
-void rsa_multip_info_free_ex(RSA_PRIME_INFO *pinfo);
-void rsa_multip_info_free(RSA_PRIME_INFO *pinfo);
+void __cdecl rsa_multip_info_free_ex(RSA_PRIME_INFO *pinfo);
+void __cdecl rsa_multip_info_free(RSA_PRIME_INFO *pinfo);
 RSA_PRIME_INFO *rsa_multip_info_new(void);
 int rsa_multip_calc_product(RSA *rsa);
 int rsa_multip_cap(int bits);
diff --git a/crypto/rsa/rsa_meth.c b/crypto/rsa/rsa_meth.c
index def19f375f..d8687a289e 100644
--- a/crypto/rsa/rsa_meth.c
+++ b/crypto/rsa/rsa_meth.c
@@ -97,15 +97,15 @@ int RSA_meth_set0_app_data(RSA_METHOD *meth, void *app_data)
     return 1;
 }
 
-int (*RSA_meth_get_pub_enc(const RSA_METHOD *meth))
+int (__cdecl *RSA_meth_get_pub_enc(const RSA_METHOD *meth))
     (int flen, const unsigned char *from,
      unsigned char *to, RSA *rsa, int padding)
 {
     return meth->rsa_pub_enc;
 }
 
-int RSA_meth_set_pub_enc(RSA_METHOD *meth,
-                         int (*pub_enc) (int flen, const unsigned char *from,
+int __cdecl RSA_meth_set_pub_enc(RSA_METHOD *meth,
+                         int (__cdecl *pub_enc) (int flen, const unsigned char *from,
                                          unsigned char *to, RSA *rsa,
                                          int padding))
 {
@@ -113,15 +113,15 @@ int RSA_meth_set_pub_enc(RSA_METHOD *meth,
     return 1;
 }
 
-int (*RSA_meth_get_pub_dec(const RSA_METHOD *meth))
+int (__cdecl *RSA_meth_get_pub_dec(const RSA_METHOD *meth))
     (int flen, const unsigned char *from,
      unsigned char *to, RSA *rsa, int padding)
 {
     return meth->rsa_pub_dec;
 }
 
-int RSA_meth_set_pub_dec(RSA_METHOD *meth,
-                         int (*pub_dec) (int flen, const unsigned char *from,
+int __cdecl RSA_meth_set_pub_dec(RSA_METHOD *meth,
+                         int (__cdecl *pub_dec) (int flen, const unsigned char *from,
                                          unsigned char *to, RSA *rsa,
                                          int padding))
 {
@@ -129,15 +129,15 @@ int RSA_meth_set_pub_dec(RSA_METHOD *meth,
     return 1;
 }
 
-int (*RSA_meth_get_priv_enc(const RSA_METHOD *meth))
+int (__cdecl *RSA_meth_get_priv_enc(const RSA_METHOD *meth))
     (int flen, const unsigned char *from,
      unsigned char *to, RSA *rsa, int padding)
 {
     return meth->rsa_priv_enc;
 }
 
-int RSA_meth_set_priv_enc(RSA_METHOD *meth,
-                          int (*priv_enc) (int flen, const unsigned char *from,
+int __cdecl RSA_meth_set_priv_enc(RSA_METHOD *meth,
+                          int (__cdecl *priv_enc) (int flen, const unsigned char *from,
                                            unsigned char *to, RSA *rsa,
                                            int padding))
 {
@@ -145,15 +145,15 @@ int RSA_meth_set_priv_enc(RSA_METHOD *meth,
     return 1;
 }
 
-int (*RSA_meth_get_priv_dec(const RSA_METHOD *meth))
+int (__cdecl *RSA_meth_get_priv_dec(const RSA_METHOD *meth))
     (int flen, const unsigned char *from,
      unsigned char *to, RSA *rsa, int padding)
 {
     return meth->rsa_priv_dec;
 }
 
-int RSA_meth_set_priv_dec(RSA_METHOD *meth,
-                          int (*priv_dec) (int flen, const unsigned char *from,
+int __cdecl RSA_meth_set_priv_dec(RSA_METHOD *meth,
+                          int (__cdecl *priv_dec) (int flen, const unsigned char *from,
                                            unsigned char *to, RSA *rsa,
                                            int padding))
 {
@@ -162,14 +162,14 @@ int RSA_meth_set_priv_dec(RSA_METHOD *meth,
 }
 
     /* Can be null */
-int (*RSA_meth_get_mod_exp(const RSA_METHOD *meth))
+int (__cdecl *RSA_meth_get_mod_exp(const RSA_METHOD *meth))
     (BIGNUM *r0, const BIGNUM *i, RSA *rsa, BN_CTX *ctx)
 {
     return meth->rsa_mod_exp;
 }
 
-int RSA_meth_set_mod_exp(RSA_METHOD *meth,
-                         int (*mod_exp) (BIGNUM *r0, const BIGNUM *i, RSA *rsa,
+int __cdecl RSA_meth_set_mod_exp(RSA_METHOD *meth,
+                         int (__cdecl *mod_exp) (BIGNUM *r0, const BIGNUM *i, RSA *rsa,
                                          BN_CTX *ctx))
 {
     meth->rsa_mod_exp = mod_exp;
@@ -177,15 +177,15 @@ int RSA_meth_set_mod_exp(RSA_METHOD *meth,
 }
 
     /* Can be null */
-int (*RSA_meth_get_bn_mod_exp(const RSA_METHOD *meth))
+int (__cdecl *RSA_meth_get_bn_mod_exp(const RSA_METHOD *meth))
     (BIGNUM *r, const BIGNUM *a, const BIGNUM *p,
      const BIGNUM *m, BN_CTX *ctx, BN_MONT_CTX *m_ctx)
 {
     return meth->bn_mod_exp;
 }
 
-int RSA_meth_set_bn_mod_exp(RSA_METHOD *meth,
-                            int (*bn_mod_exp) (BIGNUM *r,
+int __cdecl RSA_meth_set_bn_mod_exp(RSA_METHOD *meth,
+                            int (__cdecl *bn_mod_exp) (BIGNUM *r,
                                                const BIGNUM *a,
                                                const BIGNUM *p,
                                                const BIGNUM *m,
@@ -197,30 +197,30 @@ int RSA_meth_set_bn_mod_exp(RSA_METHOD *meth,
 }
 
     /* called at new */
-int (*RSA_meth_get_init(const RSA_METHOD *meth)) (RSA *rsa)
+int (__cdecl *RSA_meth_get_init(const RSA_METHOD *meth)) (RSA *rsa)
 {
     return meth->init;
 }
 
-int RSA_meth_set_init(RSA_METHOD *meth, int (*init) (RSA *rsa))
+int __cdecl RSA_meth_set_init(RSA_METHOD *meth, int (__cdecl *init) (RSA *rsa))
 {
     meth->init = init;
     return 1;
 }
 
     /* called at free */
-int (*RSA_meth_get_finish(const RSA_METHOD *meth)) (RSA *rsa)
+int (__cdecl *RSA_meth_get_finish(const RSA_METHOD *meth)) (RSA *rsa)
 {
     return meth->finish;
 }
 
-int RSA_meth_set_finish(RSA_METHOD *meth, int (*finish) (RSA *rsa))
+int __cdecl RSA_meth_set_finish(RSA_METHOD *meth, int (__cdecl *finish) (RSA *rsa))
 {
     meth->finish = finish;
     return 1;
 }
 
-int (*RSA_meth_get_sign(const RSA_METHOD *meth))
+int (__cdecl *RSA_meth_get_sign(const RSA_METHOD *meth))
     (int type,
      const unsigned char *m, unsigned int m_length,
      unsigned char *sigret, unsigned int *siglen,
@@ -229,8 +229,8 @@ int (*RSA_meth_get_sign(const RSA_METHOD *meth))
     return meth->rsa_sign;
 }
 
-int RSA_meth_set_sign(RSA_METHOD *meth,
-                      int (*sign) (int type, const unsigned char *m,
+int __cdecl RSA_meth_set_sign(RSA_METHOD *meth,
+                      int (__cdecl *sign) (int type, const unsigned char *m,
                                    unsigned int m_length,
                                    unsigned char *sigret, unsigned int *siglen,
                                    const RSA *rsa))
@@ -239,7 +239,7 @@ int RSA_meth_set_sign(RSA_METHOD *meth,
     return 1;
 }
 
-int (*RSA_meth_get_verify(const RSA_METHOD *meth))
+int (__cdecl *RSA_meth_get_verify(const RSA_METHOD *meth))
     (int dtype, const unsigned char *m,
      unsigned int m_length, const unsigned char *sigbuf,
      unsigned int siglen, const RSA *rsa)
@@ -247,8 +247,8 @@ int (*RSA_meth_get_verify(const RSA_METHOD *meth))
     return meth->rsa_verify;
 }
 
-int RSA_meth_set_verify(RSA_METHOD *meth,
-                        int (*verify) (int dtype, const unsigned char *m,
+int __cdecl RSA_meth_set_verify(RSA_METHOD *meth,
+                        int (__cdecl *verify) (int dtype, const unsigned char *m,
                                        unsigned int m_length,
                                        const unsigned char *sigbuf,
                                        unsigned int siglen, const RSA *rsa))
@@ -257,28 +257,28 @@ int RSA_meth_set_verify(RSA_METHOD *meth,
     return 1;
 }
 
-int (*RSA_meth_get_keygen(const RSA_METHOD *meth))
+int (__cdecl *RSA_meth_get_keygen(const RSA_METHOD *meth))
     (RSA *rsa, int bits, BIGNUM *e, BN_GENCB *cb)
 {
     return meth->rsa_keygen;
 }
 
-int RSA_meth_set_keygen(RSA_METHOD *meth,
-                        int (*keygen) (RSA *rsa, int bits, BIGNUM *e,
+int __cdecl RSA_meth_set_keygen(RSA_METHOD *meth,
+                        int (__cdecl *keygen) (RSA *rsa, int bits, BIGNUM *e,
                                        BN_GENCB *cb))
 {
     meth->rsa_keygen = keygen;
     return 1;
 }
 
-int (*RSA_meth_get_multi_prime_keygen(const RSA_METHOD *meth))
+int (__cdecl *RSA_meth_get_multi_prime_keygen(const RSA_METHOD *meth))
     (RSA *rsa, int bits, int primes, BIGNUM *e, BN_GENCB *cb)
 {
     return meth->rsa_multi_prime_keygen;
 }
 
-int RSA_meth_set_multi_prime_keygen(RSA_METHOD *meth,
-                                    int (*keygen) (RSA *rsa, int bits,
+int __cdecl RSA_meth_set_multi_prime_keygen(RSA_METHOD *meth,
+                                    int (__cdecl *keygen) (RSA *rsa, int bits,
                                                    int primes, BIGNUM *e,
                                                    BN_GENCB *cb))
 {
diff --git a/crypto/rsa/rsa_mp.c b/crypto/rsa/rsa_mp.c
index e7e810823b..b8c7a7396c 100644
--- a/crypto/rsa/rsa_mp.c
+++ b/crypto/rsa/rsa_mp.c
@@ -12,14 +12,14 @@
 #include <openssl/err.h>
 #include "rsa_locl.h"
 
-void rsa_multip_info_free_ex(RSA_PRIME_INFO *pinfo)
+void __cdecl rsa_multip_info_free_ex(RSA_PRIME_INFO *pinfo)
 {
     /* free pp and pinfo only */
     BN_clear_free(pinfo->pp);
     OPENSSL_free(pinfo);
 }
 
-void rsa_multip_info_free(RSA_PRIME_INFO *pinfo)
+void __cdecl rsa_multip_info_free(RSA_PRIME_INFO *pinfo)
 {
     /* free a RSA_PRIME_INFO structure */
     BN_clear_free(pinfo->r);
diff --git a/crypto/rsa/rsa_ossl.c b/crypto/rsa/rsa_ossl.c
index c8c3b7886a..9e022c1381 100644
--- a/crypto/rsa/rsa_ossl.c
+++ b/crypto/rsa/rsa_ossl.c
@@ -12,18 +12,18 @@
 #include "rsa_locl.h"
 #include "internal/constant_time_locl.h"
 
-static int rsa_ossl_public_encrypt(int flen, const unsigned char *from,
+static int __cdecl rsa_ossl_public_encrypt(int flen, const unsigned char *from,
                                   unsigned char *to, RSA *rsa, int padding);
-static int rsa_ossl_private_encrypt(int flen, const unsigned char *from,
+static int __cdecl rsa_ossl_private_encrypt(int flen, const unsigned char *from,
                                    unsigned char *to, RSA *rsa, int padding);
-static int rsa_ossl_public_decrypt(int flen, const unsigned char *from,
+static int __cdecl rsa_ossl_public_decrypt(int flen, const unsigned char *from,
                                   unsigned char *to, RSA *rsa, int padding);
-static int rsa_ossl_private_decrypt(int flen, const unsigned char *from,
+static int __cdecl rsa_ossl_private_decrypt(int flen, const unsigned char *from,
                                    unsigned char *to, RSA *rsa, int padding);
-static int rsa_ossl_mod_exp(BIGNUM *r0, const BIGNUM *i, RSA *rsa,
+static int __cdecl rsa_ossl_mod_exp(BIGNUM *r0, const BIGNUM *i, RSA *rsa,
                            BN_CTX *ctx);
-static int rsa_ossl_init(RSA *rsa);
-static int rsa_ossl_finish(RSA *rsa);
+static int __cdecl rsa_ossl_init(RSA *rsa);
+static int __cdecl rsa_ossl_finish(RSA *rsa);
 static RSA_METHOD rsa_pkcs1_ossl_meth = {
     "OpenSSL PKCS#1 RSA",
     rsa_ossl_public_encrypt,
@@ -65,7 +65,7 @@ const RSA_METHOD *RSA_null_method(void)
     return NULL;
 }
 
-static int rsa_ossl_public_encrypt(int flen, const unsigned char *from,
+static int __cdecl rsa_ossl_public_encrypt(int flen, const unsigned char *from,
                                   unsigned char *to, RSA *rsa, int padding)
 {
     BIGNUM *f, *ret;
@@ -230,7 +230,7 @@ static int rsa_blinding_invert(BN_BLINDING *b, BIGNUM *f, BIGNUM *unblind,
 }
 
 /* signing */
-static int rsa_ossl_private_encrypt(int flen, const unsigned char *from,
+static int __cdecl rsa_ossl_private_encrypt(int flen, const unsigned char *from,
                                    unsigned char *to, RSA *rsa, int padding)
 {
     BIGNUM *f, *ret, *res;
@@ -364,7 +364,7 @@ static int rsa_ossl_private_encrypt(int flen, const unsigned char *from,
     return r;
 }
 
-static int rsa_ossl_private_decrypt(int flen, const unsigned char *from,
+static int __cdecl rsa_ossl_private_decrypt(int flen, const unsigned char *from,
                                    unsigned char *to, RSA *rsa, int padding)
 {
     BIGNUM *f, *ret;
@@ -499,7 +499,7 @@ static int rsa_ossl_private_decrypt(int flen, const unsigned char *from,
 }
 
 /* signature verification */
-static int rsa_ossl_public_decrypt(int flen, const unsigned char *from,
+static int __cdecl rsa_ossl_public_decrypt(int flen, const unsigned char *from,
                                   unsigned char *to, RSA *rsa, int padding)
 {
     BIGNUM *f, *ret;
@@ -594,7 +594,7 @@ static int rsa_ossl_public_decrypt(int flen, const unsigned char *from,
     return r;
 }
 
-static int rsa_ossl_mod_exp(BIGNUM *r0, const BIGNUM *I, RSA *rsa, BN_CTX *ctx)
+static int __cdecl rsa_ossl_mod_exp(BIGNUM *r0, const BIGNUM *I, RSA *rsa, BN_CTX *ctx)
 {
     BIGNUM *r1, *m1, *vrfy, *r2, *m[RSA_MAX_PRIME_NUM - 2];
     int ret = 0, i, ex_primes = 0, smooth = 0;
@@ -954,13 +954,13 @@ static int rsa_ossl_mod_exp(BIGNUM *r0, const BIGNUM *I, RSA *rsa, BN_CTX *ctx)
     return ret;
 }
 
-static int rsa_ossl_init(RSA *rsa)
+static int __cdecl rsa_ossl_init(RSA *rsa)
 {
     rsa->flags |= RSA_FLAG_CACHE_PUBLIC | RSA_FLAG_CACHE_PRIVATE;
     return 1;
 }
 
-static int rsa_ossl_finish(RSA *rsa)
+static int __cdecl rsa_ossl_finish(RSA *rsa)
 {
     int i;
     RSA_PRIME_INFO *pinfo;
diff --git a/crypto/sha/keccak1600.c b/crypto/sha/keccak1600.c
index 55a44023d5..9e3e805b1b 100644
--- a/crypto/sha/keccak1600.c
+++ b/crypto/sha/keccak1600.c
@@ -1146,7 +1146,7 @@ void SHA3_sponge(const unsigned char *inp, size_t len,
 
 # include <stdio.h>
 
-int main()
+int __cdecl main()
 {
     /*
      * This is 5-bit SHAKE128 test from http://csrc.nist.gov/groups/ST/toolkit/examples.html#aHashing
diff --git a/crypto/srp/srp_vfy.c b/crypto/srp/srp_vfy.c
index eb279dd418..68e177db22 100644
--- a/crypto/srp/srp_vfy.c
+++ b/crypto/srp/srp_vfy.c
@@ -173,7 +173,7 @@ static int t_tob64(char *dst, const unsigned char *src, int size)
     return 1;
 }
 
-void SRP_user_pwd_free(SRP_user_pwd *user_pwd)
+void __cdecl SRP_user_pwd_free(SRP_user_pwd *user_pwd)
 {
     if (user_pwd == NULL)
         return;
diff --git a/crypto/stack/stack.c b/crypto/stack/stack.c
index 975515db59..80248f71b0 100644
--- a/crypto/stack/stack.c
+++ b/crypto/stack/stack.c
@@ -357,7 +357,7 @@ void OPENSSL_sk_zero(OPENSSL_STACK *st)
     st->num = 0;
 }
 
-void OPENSSL_sk_pop_free(OPENSSL_STACK *st, OPENSSL_sk_freefunc func)
+void __cdecl OPENSSL_sk_pop_free(OPENSSL_STACK *st, OPENSSL_sk_freefunc func)
 {
     int i;
 
@@ -377,12 +377,12 @@ void OPENSSL_sk_free(OPENSSL_STACK *st)
     OPENSSL_free(st);
 }
 
-int OPENSSL_sk_num(const OPENSSL_STACK *st)
+int __cdecl OPENSSL_sk_num(const OPENSSL_STACK *st)
 {
     return st == NULL ? -1 : st->num;
 }
 
-void *OPENSSL_sk_value(const OPENSSL_STACK *st, int i)
+void * __cdecl OPENSSL_sk_value(const OPENSSL_STACK *st, int i)
 {
     if (st == NULL || i < 0 || i >= st->num)
         return NULL;
diff --git a/crypto/store/store_lib.c b/crypto/store/store_lib.c
index 7de2e31f55..dcd8211221 100644
--- a/crypto/store/store_lib.c
+++ b/crypto/store/store_lib.c
@@ -439,7 +439,7 @@ X509_CRL *OSSL_STORE_INFO_get1_CRL(const OSSL_STORE_INFO *info)
 /*
  * Free the OSSL_STORE_INFO
  */
-void OSSL_STORE_INFO_free(OSSL_STORE_INFO *info)
+void __cdecl OSSL_STORE_INFO_free(OSSL_STORE_INFO *info)
 {
     if (info != NULL) {
         switch (info->type) {
diff --git a/crypto/store/store_register.c b/crypto/store/store_register.c
index e68cb3c568..e141dc8bd6 100644
--- a/crypto/store/store_register.c
+++ b/crypto/store/store_register.c
@@ -134,7 +134,7 @@ static unsigned long store_loader_hash(const OSSL_STORE_LOADER *v)
     return OPENSSL_LH_strhash(v->scheme);
 }
 
-static int store_loader_cmp(const OSSL_STORE_LOADER *a,
+static int __cdecl store_loader_cmp(const OSSL_STORE_LOADER *a,
                             const OSSL_STORE_LOADER *b)
 {
     assert(a->scheme != NULL && b->scheme != NULL);
diff --git a/crypto/threads_none.c b/crypto/threads_none.c
index aabf0e0dc0..744fad452c 100644
--- a/crypto/threads_none.c
+++ b/crypto/threads_none.c
@@ -17,7 +17,7 @@
 #  include <unistd.h>
 # endif
 
-CRYPTO_RWLOCK *CRYPTO_THREAD_lock_new(void)
+CRYPTO_RWLOCK * __cdecl CRYPTO_THREAD_lock_new(void)
 {
     CRYPTO_RWLOCK *lock;
 
@@ -31,28 +31,28 @@ CRYPTO_RWLOCK *CRYPTO_THREAD_lock_new(void)
     return lock;
 }
 
-int CRYPTO_THREAD_read_lock(CRYPTO_RWLOCK *lock)
+int __cdecl CRYPTO_THREAD_read_lock(CRYPTO_RWLOCK *lock)
 {
     if (!ossl_assert(*(unsigned int *)lock == 1))
         return 0;
     return 1;
 }
 
-int CRYPTO_THREAD_write_lock(CRYPTO_RWLOCK *lock)
+int __cdecl CRYPTO_THREAD_write_lock(CRYPTO_RWLOCK *lock)
 {
     if (!ossl_assert(*(unsigned int *)lock == 1))
         return 0;
     return 1;
 }
 
-int CRYPTO_THREAD_unlock(CRYPTO_RWLOCK *lock)
+int __cdecl CRYPTO_THREAD_unlock(CRYPTO_RWLOCK *lock)
 {
     if (!ossl_assert(*(unsigned int *)lock == 1))
         return 0;
     return 1;
 }
 
-void CRYPTO_THREAD_lock_free(CRYPTO_RWLOCK *lock) {
+void __cdecl CRYPTO_THREAD_lock_free(CRYPTO_RWLOCK *lock) {
     if (lock == NULL)
         return;
 
@@ -62,7 +62,7 @@ void CRYPTO_THREAD_lock_free(CRYPTO_RWLOCK *lock) {
     return;
 }
 
-int CRYPTO_THREAD_run_once(CRYPTO_ONCE *once, void (*init)(void))
+int __cdecl CRYPTO_THREAD_run_once(CRYPTO_ONCE *once, void (*init)(void))
 {
     if (*once != 0)
         return 1;
@@ -77,7 +77,7 @@ int CRYPTO_THREAD_run_once(CRYPTO_ONCE *once, void (*init)(void))
 
 static void *thread_local_storage[OPENSSL_CRYPTO_THREAD_LOCAL_KEY_MAX];
 
-int CRYPTO_THREAD_init_local(CRYPTO_THREAD_LOCAL *key, void (*cleanup)(void *))
+int __cdecl CRYPTO_THREAD_init_local(CRYPTO_THREAD_LOCAL *key, void (*cleanup)(void *))
 {
     static unsigned int thread_local_key = 0;
 
@@ -91,7 +91,7 @@ int CRYPTO_THREAD_init_local(CRYPTO_THREAD_LOCAL *key, void (*cleanup)(void *))
     return 1;
 }
 
-void *CRYPTO_THREAD_get_local(CRYPTO_THREAD_LOCAL *key)
+void * __cdecl CRYPTO_THREAD_get_local(CRYPTO_THREAD_LOCAL *key)
 {
     if (*key >= OPENSSL_CRYPTO_THREAD_LOCAL_KEY_MAX)
         return NULL;
@@ -99,7 +99,7 @@ void *CRYPTO_THREAD_get_local(CRYPTO_THREAD_LOCAL *key)
     return thread_local_storage[*key];
 }
 
-int CRYPTO_THREAD_set_local(CRYPTO_THREAD_LOCAL *key, void *val)
+int __cdecl CRYPTO_THREAD_set_local(CRYPTO_THREAD_LOCAL *key, void *val)
 {
     if (*key >= OPENSSL_CRYPTO_THREAD_LOCAL_KEY_MAX)
         return 0;
@@ -109,23 +109,23 @@ int CRYPTO_THREAD_set_local(CRYPTO_THREAD_LOCAL *key, void *val)
     return 1;
 }
 
-int CRYPTO_THREAD_cleanup_local(CRYPTO_THREAD_LOCAL *key)
+int __cdecl CRYPTO_THREAD_cleanup_local(CRYPTO_THREAD_LOCAL *key)
 {
     *key = OPENSSL_CRYPTO_THREAD_LOCAL_KEY_MAX + 1;
     return 1;
 }
 
-CRYPTO_THREAD_ID CRYPTO_THREAD_get_current_id(void)
+CRYPTO_THREAD_ID __cdecl CRYPTO_THREAD_get_current_id(void)
 {
     return 0;
 }
 
-int CRYPTO_THREAD_compare_id(CRYPTO_THREAD_ID a, CRYPTO_THREAD_ID b)
+int __cdecl CRYPTO_THREAD_compare_id(CRYPTO_THREAD_ID a, CRYPTO_THREAD_ID b)
 {
     return (a == b);
 }
 
-int CRYPTO_atomic_add(int *val, int amount, int *ret, CRYPTO_RWLOCK *lock)
+int __cdecl CRYPTO_atomic_add(int *val, int amount, int *ret, CRYPTO_RWLOCK *lock)
 {
     *val += amount;
     *ret  = *val;
diff --git a/crypto/threads_pthread.c b/crypto/threads_pthread.c
index 1774a2b2ac..1ee53716d3 100644
--- a/crypto/threads_pthread.c
+++ b/crypto/threads_pthread.c
@@ -21,7 +21,7 @@
 #  define USE_RWLOCK
 # endif
 
-CRYPTO_RWLOCK *CRYPTO_THREAD_lock_new(void)
+CRYPTO_RWLOCK * __cdecl CRYPTO_THREAD_lock_new(void)
 {
 # ifdef USE_RWLOCK
     CRYPTO_RWLOCK *lock;
@@ -59,7 +59,7 @@ CRYPTO_RWLOCK *CRYPTO_THREAD_lock_new(void)
     return lock;
 }
 
-int CRYPTO_THREAD_read_lock(CRYPTO_RWLOCK *lock)
+int __cdecl CRYPTO_THREAD_read_lock(CRYPTO_RWLOCK *lock)
 {
 # ifdef USE_RWLOCK
     if (pthread_rwlock_rdlock(lock) != 0)
@@ -72,7 +72,7 @@ int CRYPTO_THREAD_read_lock(CRYPTO_RWLOCK *lock)
     return 1;
 }
 
-int CRYPTO_THREAD_write_lock(CRYPTO_RWLOCK *lock)
+int __cdecl CRYPTO_THREAD_write_lock(CRYPTO_RWLOCK *lock)
 {
 # ifdef USE_RWLOCK
     if (pthread_rwlock_wrlock(lock) != 0)
@@ -85,7 +85,7 @@ int CRYPTO_THREAD_write_lock(CRYPTO_RWLOCK *lock)
     return 1;
 }
 
-int CRYPTO_THREAD_unlock(CRYPTO_RWLOCK *lock)
+int __cdecl CRYPTO_THREAD_unlock(CRYPTO_RWLOCK *lock)
 {
 # ifdef USE_RWLOCK
     if (pthread_rwlock_unlock(lock) != 0)
@@ -98,7 +98,7 @@ int CRYPTO_THREAD_unlock(CRYPTO_RWLOCK *lock)
     return 1;
 }
 
-void CRYPTO_THREAD_lock_free(CRYPTO_RWLOCK *lock)
+void __cdecl CRYPTO_THREAD_lock_free(CRYPTO_RWLOCK *lock)
 {
     if (lock == NULL)
         return;
@@ -113,7 +113,7 @@ void CRYPTO_THREAD_lock_free(CRYPTO_RWLOCK *lock)
     return;
 }
 
-int CRYPTO_THREAD_run_once(CRYPTO_ONCE *once, void (*init)(void))
+int __cdecl CRYPTO_THREAD_run_once(CRYPTO_ONCE *once, void (*init)(void))
 {
     if (pthread_once(once, init) != 0)
         return 0;
@@ -160,7 +160,7 @@ int CRYPTO_THREAD_compare_id(CRYPTO_THREAD_ID a, CRYPTO_THREAD_ID b)
     return pthread_equal(a, b);
 }
 
-int CRYPTO_atomic_add(int *val, int amount, int *ret, CRYPTO_RWLOCK *lock)
+int __cdecl CRYPTO_atomic_add(int *val, int amount, int *ret, CRYPTO_RWLOCK *lock)
 {
 # if defined(__GNUC__) && defined(__ATOMIC_ACQ_REL)
     if (__atomic_is_lock_free(sizeof(*val), val)) {
diff --git a/crypto/threads_win.c b/crypto/threads_win.c
index 44a360fcab..499d9d2a9f 100644
--- a/crypto/threads_win.c
+++ b/crypto/threads_win.c
@@ -15,7 +15,7 @@
 
 #if defined(OPENSSL_THREADS) && !defined(CRYPTO_TDEBUG) && defined(OPENSSL_SYS_WINDOWS)
 
-CRYPTO_RWLOCK *CRYPTO_THREAD_lock_new(void)
+CRYPTO_RWLOCK * __cdecl CRYPTO_THREAD_lock_new(void)
 {
     CRYPTO_RWLOCK *lock;
 
@@ -37,25 +37,25 @@ CRYPTO_RWLOCK *CRYPTO_THREAD_lock_new(void)
     return lock;
 }
 
-int CRYPTO_THREAD_read_lock(CRYPTO_RWLOCK *lock)
+int __cdecl CRYPTO_THREAD_read_lock(CRYPTO_RWLOCK *lock)
 {
     EnterCriticalSection(lock);
     return 1;
 }
 
-int CRYPTO_THREAD_write_lock(CRYPTO_RWLOCK *lock)
+int __cdecl CRYPTO_THREAD_write_lock(CRYPTO_RWLOCK *lock)
 {
     EnterCriticalSection(lock);
     return 1;
 }
 
-int CRYPTO_THREAD_unlock(CRYPTO_RWLOCK *lock)
+int __cdecl CRYPTO_THREAD_unlock(CRYPTO_RWLOCK *lock)
 {
     LeaveCriticalSection(lock);
     return 1;
 }
 
-void CRYPTO_THREAD_lock_free(CRYPTO_RWLOCK *lock)
+void __cdecl CRYPTO_THREAD_lock_free(CRYPTO_RWLOCK *lock)
 {
     if (lock == NULL)
         return;
@@ -74,7 +74,7 @@ void CRYPTO_THREAD_lock_free(CRYPTO_RWLOCK *lock)
  * We don't use InitOnceExecuteOnce because that isn't available in WinXP which
  * we still have to support.
  */
-int CRYPTO_THREAD_run_once(CRYPTO_ONCE *once, void (*init)(void))
+int __cdecl CRYPTO_THREAD_run_once(CRYPTO_ONCE *once, void (*init)(void))
 {
     LONG volatile *lock = (LONG *)once;
     LONG result;
@@ -94,7 +94,7 @@ int CRYPTO_THREAD_run_once(CRYPTO_ONCE *once, void (*init)(void))
     return (*lock == ONCE_DONE);
 }
 
-int CRYPTO_THREAD_init_local(CRYPTO_THREAD_LOCAL *key, void (*cleanup)(void *))
+int __cdecl CRYPTO_THREAD_init_local(CRYPTO_THREAD_LOCAL *key, void (*cleanup)(void *))
 {
     *key = TlsAlloc();
     if (*key == TLS_OUT_OF_INDEXES)
@@ -103,7 +103,7 @@ int CRYPTO_THREAD_init_local(CRYPTO_THREAD_LOCAL *key, void (*cleanup)(void *))
     return 1;
 }
 
-void *CRYPTO_THREAD_get_local(CRYPTO_THREAD_LOCAL *key)
+void * __cdecl CRYPTO_THREAD_get_local(CRYPTO_THREAD_LOCAL *key)
 {
     DWORD last_error;
     void *ret;
@@ -127,7 +127,7 @@ void *CRYPTO_THREAD_get_local(CRYPTO_THREAD_LOCAL *key)
     return ret;
 }
 
-int CRYPTO_THREAD_set_local(CRYPTO_THREAD_LOCAL *key, void *val)
+int __cdecl CRYPTO_THREAD_set_local(CRYPTO_THREAD_LOCAL *key, void *val)
 {
     if (TlsSetValue(*key, val) == 0)
         return 0;
@@ -135,7 +135,7 @@ int CRYPTO_THREAD_set_local(CRYPTO_THREAD_LOCAL *key, void *val)
     return 1;
 }
 
-int CRYPTO_THREAD_cleanup_local(CRYPTO_THREAD_LOCAL *key)
+int __cdecl CRYPTO_THREAD_cleanup_local(CRYPTO_THREAD_LOCAL *key)
 {
     if (TlsFree(*key) == 0)
         return 0;
@@ -143,17 +143,17 @@ int CRYPTO_THREAD_cleanup_local(CRYPTO_THREAD_LOCAL *key)
     return 1;
 }
 
-CRYPTO_THREAD_ID CRYPTO_THREAD_get_current_id(void)
+CRYPTO_THREAD_ID __cdecl CRYPTO_THREAD_get_current_id(void)
 {
     return GetCurrentThreadId();
 }
 
-int CRYPTO_THREAD_compare_id(CRYPTO_THREAD_ID a, CRYPTO_THREAD_ID b)
+int __cdecl CRYPTO_THREAD_compare_id(CRYPTO_THREAD_ID a, CRYPTO_THREAD_ID b)
 {
     return (a == b);
 }
 
-int CRYPTO_atomic_add(int *val, int amount, int *ret, CRYPTO_RWLOCK *lock)
+int __cdecl CRYPTO_atomic_add(int *val, int amount, int *ret, CRYPTO_RWLOCK *lock)
 {
     *ret = InterlockedExchangeAdd(val, amount) + amount;
     return 1;
diff --git a/crypto/ts/ts_asn1.c b/crypto/ts/ts_asn1.c
index 8707207082..ff5b77c36c 100644
--- a/crypto/ts/ts_asn1.c
+++ b/crypto/ts/ts_asn1.c
@@ -19,24 +19,24 @@ ASN1_SEQUENCE(TS_MSG_IMPRINT) = {
 
 IMPLEMENT_ASN1_FUNCTIONS_const(TS_MSG_IMPRINT)
 IMPLEMENT_ASN1_DUP_FUNCTION(TS_MSG_IMPRINT)
-TS_MSG_IMPRINT *d2i_TS_MSG_IMPRINT_bio(BIO *bp, TS_MSG_IMPRINT **a)
+TS_MSG_IMPRINT * __cdecl d2i_TS_MSG_IMPRINT_bio(BIO *bp, TS_MSG_IMPRINT **a)
 {
     return ASN1_d2i_bio_of(TS_MSG_IMPRINT, TS_MSG_IMPRINT_new,
                            d2i_TS_MSG_IMPRINT, bp, a);
 }
 
-int i2d_TS_MSG_IMPRINT_bio(BIO *bp, TS_MSG_IMPRINT *a)
+int __cdecl i2d_TS_MSG_IMPRINT_bio(BIO *bp, TS_MSG_IMPRINT *a)
 {
     return ASN1_i2d_bio_of_const(TS_MSG_IMPRINT, i2d_TS_MSG_IMPRINT, bp, a);
 }
 #ifndef OPENSSL_NO_STDIO
-TS_MSG_IMPRINT *d2i_TS_MSG_IMPRINT_fp(FILE *fp, TS_MSG_IMPRINT **a)
+TS_MSG_IMPRINT * __cdecl d2i_TS_MSG_IMPRINT_fp(FILE *fp, TS_MSG_IMPRINT **a)
 {
     return ASN1_d2i_fp_of(TS_MSG_IMPRINT, TS_MSG_IMPRINT_new,
                           d2i_TS_MSG_IMPRINT, fp, a);
 }
 
-int i2d_TS_MSG_IMPRINT_fp(FILE *fp, TS_MSG_IMPRINT *a)
+int __cdecl i2d_TS_MSG_IMPRINT_fp(FILE *fp, TS_MSG_IMPRINT *a)
 {
     return ASN1_i2d_fp_of_const(TS_MSG_IMPRINT, i2d_TS_MSG_IMPRINT, fp, a);
 }
@@ -53,22 +53,22 @@ ASN1_SEQUENCE(TS_REQ) = {
 
 IMPLEMENT_ASN1_FUNCTIONS_const(TS_REQ)
 IMPLEMENT_ASN1_DUP_FUNCTION(TS_REQ)
-TS_REQ *d2i_TS_REQ_bio(BIO *bp, TS_REQ **a)
+TS_REQ * __cdecl d2i_TS_REQ_bio(BIO *bp, TS_REQ **a)
 {
     return ASN1_d2i_bio_of(TS_REQ, TS_REQ_new, d2i_TS_REQ, bp, a);
 }
 
-int i2d_TS_REQ_bio(BIO *bp, TS_REQ *a)
+int __cdecl i2d_TS_REQ_bio(BIO *bp, TS_REQ *a)
 {
     return ASN1_i2d_bio_of_const(TS_REQ, i2d_TS_REQ, bp, a);
 }
 #ifndef OPENSSL_NO_STDIO
-TS_REQ *d2i_TS_REQ_fp(FILE *fp, TS_REQ **a)
+TS_REQ * __cdecl d2i_TS_REQ_fp(FILE *fp, TS_REQ **a)
 {
     return ASN1_d2i_fp_of(TS_REQ, TS_REQ_new, d2i_TS_REQ, fp, a);
 }
 
-int i2d_TS_REQ_fp(FILE *fp, TS_REQ *a)
+int __cdecl i2d_TS_REQ_fp(FILE *fp, TS_REQ *a)
 {
     return ASN1_i2d_fp_of_const(TS_REQ, i2d_TS_REQ, fp, a);
 }
@@ -98,24 +98,24 @@ ASN1_SEQUENCE(TS_TST_INFO) = {
 
 IMPLEMENT_ASN1_FUNCTIONS_const(TS_TST_INFO)
 IMPLEMENT_ASN1_DUP_FUNCTION(TS_TST_INFO)
-TS_TST_INFO *d2i_TS_TST_INFO_bio(BIO *bp, TS_TST_INFO **a)
+TS_TST_INFO * __cdecl d2i_TS_TST_INFO_bio(BIO *bp, TS_TST_INFO **a)
 {
     return ASN1_d2i_bio_of(TS_TST_INFO, TS_TST_INFO_new, d2i_TS_TST_INFO, bp,
                            a);
 }
 
-int i2d_TS_TST_INFO_bio(BIO *bp, TS_TST_INFO *a)
+int __cdecl i2d_TS_TST_INFO_bio(BIO *bp, TS_TST_INFO *a)
 {
     return ASN1_i2d_bio_of_const(TS_TST_INFO, i2d_TS_TST_INFO, bp, a);
 }
 #ifndef OPENSSL_NO_STDIO
-TS_TST_INFO *d2i_TS_TST_INFO_fp(FILE *fp, TS_TST_INFO **a)
+TS_TST_INFO * __cdecl d2i_TS_TST_INFO_fp(FILE *fp, TS_TST_INFO **a)
 {
     return ASN1_d2i_fp_of(TS_TST_INFO, TS_TST_INFO_new, d2i_TS_TST_INFO, fp,
                           a);
 }
 
-int i2d_TS_TST_INFO_fp(FILE *fp, TS_TST_INFO *a)
+int __cdecl i2d_TS_TST_INFO_fp(FILE *fp, TS_TST_INFO *a)
 {
     return ASN1_i2d_fp_of_const(TS_TST_INFO, i2d_TS_TST_INFO, fp, a);
 }
@@ -180,22 +180,22 @@ IMPLEMENT_ASN1_FUNCTIONS_const(TS_RESP)
 
 IMPLEMENT_ASN1_DUP_FUNCTION(TS_RESP)
 
-TS_RESP *d2i_TS_RESP_bio(BIO *bp, TS_RESP **a)
+TS_RESP * __cdecl d2i_TS_RESP_bio(BIO *bp, TS_RESP **a)
 {
     return ASN1_d2i_bio_of(TS_RESP, TS_RESP_new, d2i_TS_RESP, bp, a);
 }
 
-int i2d_TS_RESP_bio(BIO *bp, TS_RESP *a)
+int __cdecl i2d_TS_RESP_bio(BIO *bp, TS_RESP *a)
 {
     return ASN1_i2d_bio_of_const(TS_RESP, i2d_TS_RESP, bp, a);
 }
 #ifndef OPENSSL_NO_STDIO
-TS_RESP *d2i_TS_RESP_fp(FILE *fp, TS_RESP **a)
+TS_RESP * __cdecl d2i_TS_RESP_fp(FILE *fp, TS_RESP **a)
 {
     return ASN1_d2i_fp_of(TS_RESP, TS_RESP_new, d2i_TS_RESP, fp, a);
 }
 
-int i2d_TS_RESP_fp(FILE *fp, TS_RESP *a)
+int __cdecl i2d_TS_RESP_fp(FILE *fp, TS_RESP *a)
 {
     return ASN1_i2d_fp_of_const(TS_RESP, i2d_TS_RESP, fp, a);
 }
@@ -243,7 +243,7 @@ IMPLEMENT_ASN1_FUNCTIONS_const(ESS_SIGNING_CERT_V2)
 IMPLEMENT_ASN1_DUP_FUNCTION(ESS_SIGNING_CERT_V2)
 
 /* Getting encapsulated TS_TST_INFO object from PKCS7. */
-TS_TST_INFO *PKCS7_to_TS_TST_INFO(PKCS7 *token)
+TS_TST_INFO * __cdecl PKCS7_to_TS_TST_INFO(PKCS7 *token)
 {
     PKCS7_SIGNED *pkcs7_signed;
     PKCS7 *enveloped;
diff --git a/crypto/ts/ts_conf.c b/crypto/ts/ts_conf.c
index 625089a59b..d315780109 100644
--- a/crypto/ts/ts_conf.c
+++ b/crypto/ts/ts_conf.c
@@ -41,7 +41,7 @@
 
 /* Function definitions for certificate and key loading. */
 
-X509 *TS_CONF_load_cert(const char *file)
+X509 * __cdecl TS_CONF_load_cert(const char *file)
 {
     BIO *cert = NULL;
     X509 *x = NULL;
@@ -56,7 +56,7 @@ X509 *TS_CONF_load_cert(const char *file)
     return x;
 }
 
-STACK_OF(X509) *TS_CONF_load_certs(const char *file)
+STACK_OF(X509) * __cdecl TS_CONF_load_certs(const char *file)
 {
     BIO *certs = NULL;
     STACK_OF(X509) *othercerts = NULL;
@@ -84,7 +84,7 @@ STACK_OF(X509) *TS_CONF_load_certs(const char *file)
     return othercerts;
 }
 
-EVP_PKEY *TS_CONF_load_key(const char *file, const char *pass)
+EVP_PKEY * __cdecl TS_CONF_load_key(const char *file, const char *pass)
 {
     BIO *key = NULL;
     EVP_PKEY *pkey = NULL;
@@ -113,7 +113,7 @@ static void ts_CONF_invalid(const char *name, const char *tag)
     ERR_add_error_data(3, name, "::", tag);
 }
 
-const char *TS_CONF_get_tsa_section(CONF *conf, const char *section)
+const char * __cdecl TS_CONF_get_tsa_section(CONF *conf, const char *section)
 {
     if (!section) {
         section = NCONF_get_string(conf, BASE_SECTION, ENV_DEFAULT_TSA);
@@ -123,7 +123,7 @@ const char *TS_CONF_get_tsa_section(CONF *conf, const char *section)
     return section;
 }
 
-int TS_CONF_set_serial(CONF *conf, const char *section, TS_serial_cb cb,
+int __cdecl TS_CONF_set_serial(CONF *conf, const char *section, TS_serial_cb cb,
                        TS_RESP_CTX *ctx)
 {
     int ret = 0;
@@ -141,7 +141,7 @@ int TS_CONF_set_serial(CONF *conf, const char *section, TS_serial_cb cb,
 
 #ifndef OPENSSL_NO_ENGINE
 
-int TS_CONF_set_crypto_device(CONF *conf, const char *section,
+int __cdecl TS_CONF_set_crypto_device(CONF *conf, const char *section,
                               const char *device)
 {
     int ret = 0;
@@ -158,7 +158,7 @@ int TS_CONF_set_crypto_device(CONF *conf, const char *section,
     return ret;
 }
 
-int TS_CONF_set_default_engine(const char *name)
+int __cdecl TS_CONF_set_default_engine(const char *name)
 {
     ENGINE *e = NULL;
     int ret = 0;
@@ -185,7 +185,7 @@ int TS_CONF_set_default_engine(const char *name)
 
 #endif
 
-int TS_CONF_set_signer_cert(CONF *conf, const char *section,
+int __cdecl TS_CONF_set_signer_cert(CONF *conf, const char *section,
                             const char *cert, TS_RESP_CTX *ctx)
 {
     int ret = 0;
@@ -209,7 +209,7 @@ int TS_CONF_set_signer_cert(CONF *conf, const char *section,
     return ret;
 }
 
-int TS_CONF_set_certs(CONF *conf, const char *section, const char *certs,
+int __cdecl TS_CONF_set_certs(CONF *conf, const char *section, const char *certs,
                       TS_RESP_CTX *ctx)
 {
     int ret = 0;
@@ -231,7 +231,7 @@ int TS_CONF_set_certs(CONF *conf, const char *section, const char *certs,
     return ret;
 }
 
-int TS_CONF_set_signer_key(CONF *conf, const char *section,
+int __cdecl TS_CONF_set_signer_key(CONF *conf, const char *section,
                            const char *key, const char *pass,
                            TS_RESP_CTX *ctx)
 {
@@ -254,7 +254,7 @@ int TS_CONF_set_signer_key(CONF *conf, const char *section,
     return ret;
 }
 
-int TS_CONF_set_signer_digest(CONF *conf, const char *section,
+int __cdecl TS_CONF_set_signer_digest(CONF *conf, const char *section,
                               const char *md, TS_RESP_CTX *ctx)
 {
     int ret = 0;
@@ -278,7 +278,7 @@ int TS_CONF_set_signer_digest(CONF *conf, const char *section,
     return ret;
 }
 
-int TS_CONF_set_def_policy(CONF *conf, const char *section,
+int __cdecl TS_CONF_set_def_policy(CONF *conf, const char *section,
                            const char *policy, TS_RESP_CTX *ctx)
 {
     int ret = 0;
@@ -302,7 +302,7 @@ int TS_CONF_set_def_policy(CONF *conf, const char *section,
     return ret;
 }
 
-int TS_CONF_set_policies(CONF *conf, const char *section, TS_RESP_CTX *ctx)
+int __cdecl TS_CONF_set_policies(CONF *conf, const char *section, TS_RESP_CTX *ctx)
 {
     int ret = 0;
     int i;
@@ -334,7 +334,7 @@ int TS_CONF_set_policies(CONF *conf, const char *section, TS_RESP_CTX *ctx)
     return ret;
 }
 
-int TS_CONF_set_digests(CONF *conf, const char *section, TS_RESP_CTX *ctx)
+int __cdecl TS_CONF_set_digests(CONF *conf, const char *section, TS_RESP_CTX *ctx)
 {
     int ret = 0;
     int i;
@@ -372,7 +372,7 @@ int TS_CONF_set_digests(CONF *conf, const char *section, TS_RESP_CTX *ctx)
     return ret;
 }
 
-int TS_CONF_set_accuracy(CONF *conf, const char *section, TS_RESP_CTX *ctx)
+int __cdecl TS_CONF_set_accuracy(CONF *conf, const char *section, TS_RESP_CTX *ctx)
 {
     int ret = 0;
     int i;
@@ -409,7 +409,7 @@ int TS_CONF_set_accuracy(CONF *conf, const char *section, TS_RESP_CTX *ctx)
     return ret;
 }
 
-int TS_CONF_set_clock_precision_digits(CONF *conf, const char *section,
+int __cdecl TS_CONF_set_clock_precision_digits(CONF *conf, const char *section,
                                        TS_RESP_CTX *ctx)
 {
     int ret = 0;
@@ -451,24 +451,24 @@ static int ts_CONF_add_flag(CONF *conf, const char *section,
     return 1;
 }
 
-int TS_CONF_set_ordering(CONF *conf, const char *section, TS_RESP_CTX *ctx)
+int __cdecl TS_CONF_set_ordering(CONF *conf, const char *section, TS_RESP_CTX *ctx)
 {
     return ts_CONF_add_flag(conf, section, ENV_ORDERING, TS_ORDERING, ctx);
 }
 
-int TS_CONF_set_tsa_name(CONF *conf, const char *section, TS_RESP_CTX *ctx)
+int __cdecl TS_CONF_set_tsa_name(CONF *conf, const char *section, TS_RESP_CTX *ctx)
 {
     return ts_CONF_add_flag(conf, section, ENV_TSA_NAME, TS_TSA_NAME, ctx);
 }
 
-int TS_CONF_set_ess_cert_id_chain(CONF *conf, const char *section,
+int __cdecl TS_CONF_set_ess_cert_id_chain(CONF *conf, const char *section,
                                   TS_RESP_CTX *ctx)
 {
     return ts_CONF_add_flag(conf, section, ENV_ESS_CERT_ID_CHAIN,
                             TS_ESS_CERT_ID_CHAIN, ctx);
 }
 
-int TS_CONF_set_ess_cert_id_digest(CONF *conf, const char *section,
+int __cdecl TS_CONF_set_ess_cert_id_digest(CONF *conf, const char *section,
                                    TS_RESP_CTX *ctx)
 {
     int ret = 0;
diff --git a/crypto/ts/ts_lib.c b/crypto/ts/ts_lib.c
index ce2e12c593..e01b8284a8 100644
--- a/crypto/ts/ts_lib.c
+++ b/crypto/ts/ts_lib.c
@@ -16,7 +16,7 @@
 #include <openssl/ts.h>
 #include "ts_lcl.h"
 
-int TS_ASN1_INTEGER_print_bio(BIO *bio, const ASN1_INTEGER *num)
+int __cdecl TS_ASN1_INTEGER_print_bio(BIO *bio, const ASN1_INTEGER *num)
 {
     BIGNUM *num_bn;
     int result = 0;
@@ -35,7 +35,7 @@ int TS_ASN1_INTEGER_print_bio(BIO *bio, const ASN1_INTEGER *num)
     return result;
 }
 
-int TS_OBJ_print_bio(BIO *bio, const ASN1_OBJECT *obj)
+int __cdecl TS_OBJ_print_bio(BIO *bio, const ASN1_OBJECT *obj)
 {
     char obj_txt[128];
 
@@ -45,7 +45,7 @@ int TS_OBJ_print_bio(BIO *bio, const ASN1_OBJECT *obj)
     return 1;
 }
 
-int TS_ext_print_bio(BIO *bio, const STACK_OF(X509_EXTENSION) *extensions)
+int __cdecl TS_ext_print_bio(BIO *bio, const STACK_OF(X509_EXTENSION) *extensions)
 {
     int i, critical, n;
     X509_EXTENSION *ex;
@@ -70,14 +70,14 @@ int TS_ext_print_bio(BIO *bio, const STACK_OF(X509_EXTENSION) *extensions)
     return 1;
 }
 
-int TS_X509_ALGOR_print_bio(BIO *bio, const X509_ALGOR *alg)
+int __cdecl TS_X509_ALGOR_print_bio(BIO *bio, const X509_ALGOR *alg)
 {
     int i = OBJ_obj2nid(alg->algorithm);
     return BIO_printf(bio, "Hash Algorithm: %s\n",
                       (i == NID_undef) ? "UNKNOWN" : OBJ_nid2ln(i));
 }
 
-int TS_MSG_IMPRINT_print_bio(BIO *bio, TS_MSG_IMPRINT *a)
+int __cdecl TS_MSG_IMPRINT_print_bio(BIO *bio, TS_MSG_IMPRINT *a)
 {
     ASN1_OCTET_STRING *msg;
 
diff --git a/crypto/ts/ts_req_print.c b/crypto/ts/ts_req_print.c
index 0dedf47d92..69b9f51302 100644
--- a/crypto/ts/ts_req_print.c
+++ b/crypto/ts/ts_req_print.c
@@ -15,7 +15,7 @@
 #include <openssl/ts.h>
 #include "ts_lcl.h"
 
-int TS_REQ_print_bio(BIO *bio, TS_REQ *a)
+int __cdecl TS_REQ_print_bio(BIO *bio, TS_REQ *a)
 {
     int v;
     ASN1_OBJECT *policy_id;
diff --git a/crypto/ts/ts_req_utils.c b/crypto/ts/ts_req_utils.c
index 2073d3395d..2c480cf495 100644
--- a/crypto/ts/ts_req_utils.c
+++ b/crypto/ts/ts_req_utils.c
@@ -14,17 +14,17 @@
 #include <openssl/ts.h>
 #include "ts_lcl.h"
 
-int TS_REQ_set_version(TS_REQ *a, long version)
+int __cdecl TS_REQ_set_version(TS_REQ *a, long version)
 {
     return ASN1_INTEGER_set(a->version, version);
 }
 
-long TS_REQ_get_version(const TS_REQ *a)
+long __cdecl TS_REQ_get_version(const TS_REQ *a)
 {
     return ASN1_INTEGER_get(a->version);
 }
 
-int TS_REQ_set_msg_imprint(TS_REQ *a, TS_MSG_IMPRINT *msg_imprint)
+int __cdecl TS_REQ_set_msg_imprint(TS_REQ *a, TS_MSG_IMPRINT *msg_imprint)
 {
     TS_MSG_IMPRINT *new_msg_imprint;
 
@@ -40,12 +40,12 @@ int TS_REQ_set_msg_imprint(TS_REQ *a, TS_MSG_IMPRINT *msg_imprint)
     return 1;
 }
 
-TS_MSG_IMPRINT *TS_REQ_get_msg_imprint(TS_REQ *a)
+TS_MSG_IMPRINT * __cdecl TS_REQ_get_msg_imprint(TS_REQ *a)
 {
     return a->msg_imprint;
 }
 
-int TS_MSG_IMPRINT_set_algo(TS_MSG_IMPRINT *a, X509_ALGOR *alg)
+int __cdecl TS_MSG_IMPRINT_set_algo(TS_MSG_IMPRINT *a, X509_ALGOR *alg)
 {
     X509_ALGOR *new_alg;
 
@@ -61,22 +61,22 @@ int TS_MSG_IMPRINT_set_algo(TS_MSG_IMPRINT *a, X509_ALGOR *alg)
     return 1;
 }
 
-X509_ALGOR *TS_MSG_IMPRINT_get_algo(TS_MSG_IMPRINT *a)
+X509_ALGOR * __cdecl TS_MSG_IMPRINT_get_algo(TS_MSG_IMPRINT *a)
 {
     return a->hash_algo;
 }
 
-int TS_MSG_IMPRINT_set_msg(TS_MSG_IMPRINT *a, unsigned char *d, int len)
+int __cdecl TS_MSG_IMPRINT_set_msg(TS_MSG_IMPRINT *a, unsigned char *d, int len)
 {
     return ASN1_OCTET_STRING_set(a->hashed_msg, d, len);
 }
 
-ASN1_OCTET_STRING *TS_MSG_IMPRINT_get_msg(TS_MSG_IMPRINT *a)
+ASN1_OCTET_STRING * __cdecl TS_MSG_IMPRINT_get_msg(TS_MSG_IMPRINT *a)
 {
     return a->hashed_msg;
 }
 
-int TS_REQ_set_policy_id(TS_REQ *a, const ASN1_OBJECT *policy)
+int __cdecl TS_REQ_set_policy_id(TS_REQ *a, const ASN1_OBJECT *policy)
 {
     ASN1_OBJECT *new_policy;
 
@@ -92,12 +92,12 @@ int TS_REQ_set_policy_id(TS_REQ *a, const ASN1_OBJECT *policy)
     return 1;
 }
 
-ASN1_OBJECT *TS_REQ_get_policy_id(TS_REQ *a)
+ASN1_OBJECT * __cdecl TS_REQ_get_policy_id(TS_REQ *a)
 {
     return a->policy_id;
 }
 
-int TS_REQ_set_nonce(TS_REQ *a, const ASN1_INTEGER *nonce)
+int __cdecl TS_REQ_set_nonce(TS_REQ *a, const ASN1_INTEGER *nonce)
 {
     ASN1_INTEGER *new_nonce;
 
@@ -113,28 +113,28 @@ int TS_REQ_set_nonce(TS_REQ *a, const ASN1_INTEGER *nonce)
     return 1;
 }
 
-const ASN1_INTEGER *TS_REQ_get_nonce(const TS_REQ *a)
+const ASN1_INTEGER * __cdecl TS_REQ_get_nonce(const TS_REQ *a)
 {
     return a->nonce;
 }
 
-int TS_REQ_set_cert_req(TS_REQ *a, int cert_req)
+int __cdecl TS_REQ_set_cert_req(TS_REQ *a, int cert_req)
 {
     a->cert_req = cert_req ? 0xFF : 0x00;
     return 1;
 }
 
-int TS_REQ_get_cert_req(const TS_REQ *a)
+int __cdecl TS_REQ_get_cert_req(const TS_REQ *a)
 {
     return a->cert_req ? 1 : 0;
 }
 
-STACK_OF(X509_EXTENSION) *TS_REQ_get_exts(TS_REQ *a)
+STACK_OF(X509_EXTENSION) * __cdecl TS_REQ_get_exts(TS_REQ *a)
 {
     return a->extensions;
 }
 
-void TS_REQ_ext_free(TS_REQ *a)
+void __cdecl TS_REQ_ext_free(TS_REQ *a)
 {
     if (!a)
         return;
@@ -142,42 +142,42 @@ void TS_REQ_ext_free(TS_REQ *a)
     a->extensions = NULL;
 }
 
-int TS_REQ_get_ext_count(TS_REQ *a)
+int __cdecl TS_REQ_get_ext_count(TS_REQ *a)
 {
     return X509v3_get_ext_count(a->extensions);
 }
 
-int TS_REQ_get_ext_by_NID(TS_REQ *a, int nid, int lastpos)
+int __cdecl TS_REQ_get_ext_by_NID(TS_REQ *a, int nid, int lastpos)
 {
     return X509v3_get_ext_by_NID(a->extensions, nid, lastpos);
 }
 
-int TS_REQ_get_ext_by_OBJ(TS_REQ *a, const ASN1_OBJECT *obj, int lastpos)
+int __cdecl TS_REQ_get_ext_by_OBJ(TS_REQ *a, const ASN1_OBJECT *obj, int lastpos)
 {
     return X509v3_get_ext_by_OBJ(a->extensions, obj, lastpos);
 }
 
-int TS_REQ_get_ext_by_critical(TS_REQ *a, int crit, int lastpos)
+int __cdecl TS_REQ_get_ext_by_critical(TS_REQ *a, int crit, int lastpos)
 {
     return X509v3_get_ext_by_critical(a->extensions, crit, lastpos);
 }
 
-X509_EXTENSION *TS_REQ_get_ext(TS_REQ *a, int loc)
+X509_EXTENSION * __cdecl TS_REQ_get_ext(TS_REQ *a, int loc)
 {
     return X509v3_get_ext(a->extensions, loc);
 }
 
-X509_EXTENSION *TS_REQ_delete_ext(TS_REQ *a, int loc)
+X509_EXTENSION * __cdecl TS_REQ_delete_ext(TS_REQ *a, int loc)
 {
     return X509v3_delete_ext(a->extensions, loc);
 }
 
-int TS_REQ_add_ext(TS_REQ *a, X509_EXTENSION *ex, int loc)
+int __cdecl TS_REQ_add_ext(TS_REQ *a, X509_EXTENSION *ex, int loc)
 {
     return X509v3_add_ext(&a->extensions, ex, loc) != NULL;
 }
 
-void *TS_REQ_get_ext_d2i(TS_REQ *a, int nid, int *crit, int *idx)
+void * __cdecl TS_REQ_get_ext_d2i(TS_REQ *a, int nid, int *crit, int *idx)
 {
     return X509V3_get_d2i(a->extensions, nid, crit, idx);
 }
diff --git a/crypto/ts/ts_rsp_print.c b/crypto/ts/ts_rsp_print.c
index 6eb0ec8d75..9d0e9b2fc4 100644
--- a/crypto/ts/ts_rsp_print.c
+++ b/crypto/ts/ts_rsp_print.c
@@ -25,7 +25,7 @@ static int ts_status_map_print(BIO *bio, const struct status_map_st *a,
 static int ts_ACCURACY_print_bio(BIO *bio, const TS_ACCURACY *accuracy);
 
 
-int TS_RESP_print_bio(BIO *bio, TS_RESP *a)
+int __cdecl TS_RESP_print_bio(BIO *bio, TS_RESP *a)
 {
     BIO_printf(bio, "Status info:\n");
     TS_STATUS_INFO_print_bio(bio, a->status_info);
@@ -39,7 +39,7 @@ int TS_RESP_print_bio(BIO *bio, TS_RESP *a)
     return 1;
 }
 
-int TS_STATUS_INFO_print_bio(BIO *bio, TS_STATUS_INFO *a)
+int __cdecl TS_STATUS_INFO_print_bio(BIO *bio, TS_STATUS_INFO *a)
 {
     static const char *status_map[] = {
         "Granted.",
@@ -115,7 +115,7 @@ static int ts_status_map_print(BIO *bio, const struct status_map_st *a,
     return lines;
 }
 
-int TS_TST_INFO_print_bio(BIO *bio, TS_TST_INFO *a)
+int __cdecl TS_TST_INFO_print_bio(BIO *bio, TS_TST_INFO *a)
 {
     int v;
 
diff --git a/crypto/ts/ts_rsp_sign.c b/crypto/ts/ts_rsp_sign.c
index 1b2b84ef6b..4e5131031f 100644
--- a/crypto/ts/ts_rsp_sign.c
+++ b/crypto/ts/ts_rsp_sign.c
@@ -117,7 +117,7 @@ static int def_extension_cb(struct TS_resp_ctx *ctx, X509_EXTENSION *ext,
 
 /* TS_RESP_CTX management functions. */
 
-TS_RESP_CTX *TS_RESP_CTX_new(void)
+TS_RESP_CTX * __cdecl TS_RESP_CTX_new(void)
 {
     TS_RESP_CTX *ctx;
 
@@ -135,7 +135,7 @@ TS_RESP_CTX *TS_RESP_CTX_new(void)
     return ctx;
 }
 
-void TS_RESP_CTX_free(TS_RESP_CTX *ctx)
+void __cdecl TS_RESP_CTX_free(TS_RESP_CTX *ctx)
 {
     if (!ctx)
         return;
@@ -152,7 +152,7 @@ void TS_RESP_CTX_free(TS_RESP_CTX *ctx)
     OPENSSL_free(ctx);
 }
 
-int TS_RESP_CTX_set_signer_cert(TS_RESP_CTX *ctx, X509 *signer)
+int __cdecl TS_RESP_CTX_set_signer_cert(TS_RESP_CTX *ctx, X509 *signer)
 {
     if (X509_check_purpose(signer, X509_PURPOSE_TIMESTAMP_SIGN, 0) != 1) {
         TSerr(TS_F_TS_RESP_CTX_SET_SIGNER_CERT,
@@ -165,7 +165,7 @@ int TS_RESP_CTX_set_signer_cert(TS_RESP_CTX *ctx, X509 *signer)
     return 1;
 }
 
-int TS_RESP_CTX_set_signer_key(TS_RESP_CTX *ctx, EVP_PKEY *key)
+int __cdecl TS_RESP_CTX_set_signer_key(TS_RESP_CTX *ctx, EVP_PKEY *key)
 {
     EVP_PKEY_free(ctx->signer_key);
     ctx->signer_key = key;
@@ -174,13 +174,13 @@ int TS_RESP_CTX_set_signer_key(TS_RESP_CTX *ctx, EVP_PKEY *key)
     return 1;
 }
 
-int TS_RESP_CTX_set_signer_digest(TS_RESP_CTX *ctx, const EVP_MD *md)
+int __cdecl TS_RESP_CTX_set_signer_digest(TS_RESP_CTX *ctx, const EVP_MD *md)
 {
     ctx->signer_md = md;
     return 1;
 }
 
-int TS_RESP_CTX_set_def_policy(TS_RESP_CTX *ctx, const ASN1_OBJECT *def_policy)
+int __cdecl TS_RESP_CTX_set_def_policy(TS_RESP_CTX *ctx, const ASN1_OBJECT *def_policy)
 {
     ASN1_OBJECT_free(ctx->default_policy);
     if ((ctx->default_policy = OBJ_dup(def_policy)) == NULL)
@@ -191,7 +191,7 @@ int TS_RESP_CTX_set_def_policy(TS_RESP_CTX *ctx, const ASN1_OBJECT *def_policy)
     return 0;
 }
 
-int TS_RESP_CTX_set_certs(TS_RESP_CTX *ctx, STACK_OF(X509) *certs)
+int __cdecl TS_RESP_CTX_set_certs(TS_RESP_CTX *ctx, STACK_OF(X509) *certs)
 {
 
     sk_X509_pop_free(ctx->certs, X509_free);
@@ -206,7 +206,7 @@ int TS_RESP_CTX_set_certs(TS_RESP_CTX *ctx, STACK_OF(X509) *certs)
     return 1;
 }
 
-int TS_RESP_CTX_add_policy(TS_RESP_CTX *ctx, const ASN1_OBJECT *policy)
+int __cdecl TS_RESP_CTX_add_policy(TS_RESP_CTX *ctx, const ASN1_OBJECT *policy)
 {
     ASN1_OBJECT *copy = NULL;
 
@@ -225,7 +225,7 @@ int TS_RESP_CTX_add_policy(TS_RESP_CTX *ctx, const ASN1_OBJECT *policy)
     return 0;
 }
 
-int TS_RESP_CTX_add_md(TS_RESP_CTX *ctx, const EVP_MD *md)
+int __cdecl TS_RESP_CTX_add_md(TS_RESP_CTX *ctx, const EVP_MD *md)
 {
     if (ctx->mds == NULL
         && (ctx->mds = sk_EVP_MD_new_null()) == NULL)
@@ -247,7 +247,7 @@ int TS_RESP_CTX_add_md(TS_RESP_CTX *ctx, const EVP_MD *md)
         ASN1_INTEGER_free(ctx->micros);         \
         ctx->micros = NULL;
 
-int TS_RESP_CTX_set_accuracy(TS_RESP_CTX *ctx,
+int __cdecl TS_RESP_CTX_set_accuracy(TS_RESP_CTX *ctx,
                              int secs, int millis, int micros)
 {
 
@@ -272,31 +272,31 @@ int TS_RESP_CTX_set_accuracy(TS_RESP_CTX *ctx,
     return 0;
 }
 
-void TS_RESP_CTX_add_flags(TS_RESP_CTX *ctx, int flags)
+void __cdecl TS_RESP_CTX_add_flags(TS_RESP_CTX *ctx, int flags)
 {
     ctx->flags |= flags;
 }
 
-void TS_RESP_CTX_set_serial_cb(TS_RESP_CTX *ctx, TS_serial_cb cb, void *data)
+void __cdecl TS_RESP_CTX_set_serial_cb(TS_RESP_CTX *ctx, TS_serial_cb cb, void *data)
 {
     ctx->serial_cb = cb;
     ctx->serial_cb_data = data;
 }
 
-void TS_RESP_CTX_set_time_cb(TS_RESP_CTX *ctx, TS_time_cb cb, void *data)
+void __cdecl TS_RESP_CTX_set_time_cb(TS_RESP_CTX *ctx, TS_time_cb cb, void *data)
 {
     ctx->time_cb = cb;
     ctx->time_cb_data = data;
 }
 
-void TS_RESP_CTX_set_extension_cb(TS_RESP_CTX *ctx,
+void __cdecl TS_RESP_CTX_set_extension_cb(TS_RESP_CTX *ctx,
                                   TS_extension_cb cb, void *data)
 {
     ctx->extension_cb = cb;
     ctx->extension_cb_data = data;
 }
 
-int TS_RESP_CTX_set_status_info(TS_RESP_CTX *ctx,
+int __cdecl TS_RESP_CTX_set_status_info(TS_RESP_CTX *ctx,
                                 int status, const char *text)
 {
     TS_STATUS_INFO *si = NULL;
@@ -329,7 +329,7 @@ int TS_RESP_CTX_set_status_info(TS_RESP_CTX *ctx,
     return ret;
 }
 
-int TS_RESP_CTX_set_status_info_cond(TS_RESP_CTX *ctx,
+int __cdecl TS_RESP_CTX_set_status_info_cond(TS_RESP_CTX *ctx,
                                      int status, const char *text)
 {
     int ret = 1;
@@ -341,7 +341,7 @@ int TS_RESP_CTX_set_status_info_cond(TS_RESP_CTX *ctx,
     return ret;
 }
 
-int TS_RESP_CTX_add_failure_info(TS_RESP_CTX *ctx, int failure)
+int __cdecl TS_RESP_CTX_add_failure_info(TS_RESP_CTX *ctx, int failure)
 {
     TS_STATUS_INFO *si = ctx->response->status_info;
     if (si->failure_info == NULL
@@ -355,17 +355,17 @@ int TS_RESP_CTX_add_failure_info(TS_RESP_CTX *ctx, int failure)
     return 0;
 }
 
-TS_REQ *TS_RESP_CTX_get_request(TS_RESP_CTX *ctx)
+TS_REQ * __cdecl TS_RESP_CTX_get_request(TS_RESP_CTX *ctx)
 {
     return ctx->request;
 }
 
-TS_TST_INFO *TS_RESP_CTX_get_tst_info(TS_RESP_CTX *ctx)
+TS_TST_INFO * __cdecl TS_RESP_CTX_get_tst_info(TS_RESP_CTX *ctx)
 {
     return ctx->tst_info;
 }
 
-int TS_RESP_CTX_set_clock_precision_digits(TS_RESP_CTX *ctx,
+int __cdecl TS_RESP_CTX_set_clock_precision_digits(TS_RESP_CTX *ctx,
                                            unsigned precision)
 {
     if (precision > TS_MAX_CLOCK_PRECISION_DIGITS)
@@ -375,7 +375,7 @@ int TS_RESP_CTX_set_clock_precision_digits(TS_RESP_CTX *ctx,
 }
 
 /* Main entry method of the response generation. */
-TS_RESP *TS_RESP_create_response(TS_RESP_CTX *ctx, BIO *req_bio)
+TS_RESP * __cdecl TS_RESP_create_response(TS_RESP_CTX *ctx, BIO *req_bio)
 {
     ASN1_OBJECT *policy;
     TS_RESP *response;
@@ -1050,7 +1050,7 @@ static ASN1_GENERALIZEDTIME *TS_RESP_set_genTime_with_precision(
     return NULL;
 }
 
-int TS_RESP_CTX_set_ess_cert_id_digest(TS_RESP_CTX *ctx, const EVP_MD *md)
+int __cdecl TS_RESP_CTX_set_ess_cert_id_digest(TS_RESP_CTX *ctx, const EVP_MD *md)
 {
     ctx->ess_cert_id_digest = md;
     return 1;
diff --git a/crypto/ts/ts_rsp_utils.c b/crypto/ts/ts_rsp_utils.c
index 3ecee39a22..d3d3bcd01a 100644
--- a/crypto/ts/ts_rsp_utils.c
+++ b/crypto/ts/ts_rsp_utils.c
@@ -14,7 +14,7 @@
 #include <openssl/pkcs7.h>
 #include "ts_lcl.h"
 
-int TS_RESP_set_status_info(TS_RESP *a, TS_STATUS_INFO *status_info)
+int __cdecl TS_RESP_set_status_info(TS_RESP *a, TS_STATUS_INFO *status_info)
 {
     TS_STATUS_INFO *new_status_info;
 
@@ -31,13 +31,13 @@ int TS_RESP_set_status_info(TS_RESP *a, TS_STATUS_INFO *status_info)
     return 1;
 }
 
-TS_STATUS_INFO *TS_RESP_get_status_info(TS_RESP *a)
+TS_STATUS_INFO * __cdecl TS_RESP_get_status_info(TS_RESP *a)
 {
     return a->status_info;
 }
 
 /* Caller loses ownership of PKCS7 and TS_TST_INFO objects. */
-void TS_RESP_set_tst_info(TS_RESP *a, PKCS7 *p7, TS_TST_INFO *tst_info)
+void __cdecl TS_RESP_set_tst_info(TS_RESP *a, PKCS7 *p7, TS_TST_INFO *tst_info)
 {
     PKCS7_free(a->token);
     a->token = p7;
@@ -45,27 +45,27 @@ void TS_RESP_set_tst_info(TS_RESP *a, PKCS7 *p7, TS_TST_INFO *tst_info)
     a->tst_info = tst_info;
 }
 
-PKCS7 *TS_RESP_get_token(TS_RESP *a)
+PKCS7 * __cdecl TS_RESP_get_token(TS_RESP *a)
 {
     return a->token;
 }
 
-TS_TST_INFO *TS_RESP_get_tst_info(TS_RESP *a)
+TS_TST_INFO * __cdecl TS_RESP_get_tst_info(TS_RESP *a)
 {
     return a->tst_info;
 }
 
-int TS_TST_INFO_set_version(TS_TST_INFO *a, long version)
+int __cdecl TS_TST_INFO_set_version(TS_TST_INFO *a, long version)
 {
     return ASN1_INTEGER_set(a->version, version);
 }
 
-long TS_TST_INFO_get_version(const TS_TST_INFO *a)
+long __cdecl TS_TST_INFO_get_version(const TS_TST_INFO *a)
 {
     return ASN1_INTEGER_get(a->version);
 }
 
-int TS_TST_INFO_set_policy_id(TS_TST_INFO *a, ASN1_OBJECT *policy)
+int __cdecl TS_TST_INFO_set_policy_id(TS_TST_INFO *a, ASN1_OBJECT *policy)
 {
     ASN1_OBJECT *new_policy;
 
@@ -81,12 +81,12 @@ int TS_TST_INFO_set_policy_id(TS_TST_INFO *a, ASN1_OBJECT *policy)
     return 1;
 }
 
-ASN1_OBJECT *TS_TST_INFO_get_policy_id(TS_TST_INFO *a)
+ASN1_OBJECT * __cdecl TS_TST_INFO_get_policy_id(TS_TST_INFO *a)
 {
     return a->policy_id;
 }
 
-int TS_TST_INFO_set_msg_imprint(TS_TST_INFO *a, TS_MSG_IMPRINT *msg_imprint)
+int __cdecl TS_TST_INFO_set_msg_imprint(TS_TST_INFO *a, TS_MSG_IMPRINT *msg_imprint)
 {
     TS_MSG_IMPRINT *new_msg_imprint;
 
@@ -102,12 +102,12 @@ int TS_TST_INFO_set_msg_imprint(TS_TST_INFO *a, TS_MSG_IMPRINT *msg_imprint)
     return 1;
 }
 
-TS_MSG_IMPRINT *TS_TST_INFO_get_msg_imprint(TS_TST_INFO *a)
+TS_MSG_IMPRINT * __cdecl TS_TST_INFO_get_msg_imprint(TS_TST_INFO *a)
 {
     return a->msg_imprint;
 }
 
-int TS_TST_INFO_set_serial(TS_TST_INFO *a, const ASN1_INTEGER *serial)
+int __cdecl TS_TST_INFO_set_serial(TS_TST_INFO *a, const ASN1_INTEGER *serial)
 {
     ASN1_INTEGER *new_serial;
 
@@ -123,12 +123,12 @@ int TS_TST_INFO_set_serial(TS_TST_INFO *a, const ASN1_INTEGER *serial)
     return 1;
 }
 
-const ASN1_INTEGER *TS_TST_INFO_get_serial(const TS_TST_INFO *a)
+const ASN1_INTEGER * __cdecl TS_TST_INFO_get_serial(const TS_TST_INFO *a)
 {
     return a->serial;
 }
 
-int TS_TST_INFO_set_time(TS_TST_INFO *a, const ASN1_GENERALIZEDTIME *gtime)
+int __cdecl TS_TST_INFO_set_time(TS_TST_INFO *a, const ASN1_GENERALIZEDTIME *gtime)
 {
     ASN1_GENERALIZEDTIME *new_time;
 
@@ -144,12 +144,12 @@ int TS_TST_INFO_set_time(TS_TST_INFO *a, const ASN1_GENERALIZEDTIME *gtime)
     return 1;
 }
 
-const ASN1_GENERALIZEDTIME *TS_TST_INFO_get_time(const TS_TST_INFO *a)
+const ASN1_GENERALIZEDTIME * __cdecl TS_TST_INFO_get_time(const TS_TST_INFO *a)
 {
     return a->time;
 }
 
-int TS_TST_INFO_set_accuracy(TS_TST_INFO *a, TS_ACCURACY *accuracy)
+int __cdecl TS_TST_INFO_set_accuracy(TS_TST_INFO *a, TS_ACCURACY *accuracy)
 {
     TS_ACCURACY *new_accuracy;
 
@@ -165,12 +165,12 @@ int TS_TST_INFO_set_accuracy(TS_TST_INFO *a, TS_ACCURACY *accuracy)
     return 1;
 }
 
-TS_ACCURACY *TS_TST_INFO_get_accuracy(TS_TST_INFO *a)
+TS_ACCURACY * __cdecl TS_TST_INFO_get_accuracy(TS_TST_INFO *a)
 {
     return a->accuracy;
 }
 
-int TS_ACCURACY_set_seconds(TS_ACCURACY *a, const ASN1_INTEGER *seconds)
+int __cdecl TS_ACCURACY_set_seconds(TS_ACCURACY *a, const ASN1_INTEGER *seconds)
 {
     ASN1_INTEGER *new_seconds;
 
@@ -186,12 +186,12 @@ int TS_ACCURACY_set_seconds(TS_ACCURACY *a, const ASN1_INTEGER *seconds)
     return 1;
 }
 
-const ASN1_INTEGER *TS_ACCURACY_get_seconds(const TS_ACCURACY *a)
+const ASN1_INTEGER * __cdecl TS_ACCURACY_get_seconds(const TS_ACCURACY *a)
 {
     return a->seconds;
 }
 
-int TS_ACCURACY_set_millis(TS_ACCURACY *a, const ASN1_INTEGER *millis)
+int __cdecl TS_ACCURACY_set_millis(TS_ACCURACY *a, const ASN1_INTEGER *millis)
 {
     ASN1_INTEGER *new_millis = NULL;
 
@@ -209,12 +209,12 @@ int TS_ACCURACY_set_millis(TS_ACCURACY *a, const ASN1_INTEGER *millis)
     return 1;
 }
 
-const ASN1_INTEGER *TS_ACCURACY_get_millis(const TS_ACCURACY *a)
+const ASN1_INTEGER * __cdecl TS_ACCURACY_get_millis(const TS_ACCURACY *a)
 {
     return a->millis;
 }
 
-int TS_ACCURACY_set_micros(TS_ACCURACY *a, const ASN1_INTEGER *micros)
+int __cdecl TS_ACCURACY_set_micros(TS_ACCURACY *a, const ASN1_INTEGER *micros)
 {
     ASN1_INTEGER *new_micros = NULL;
 
@@ -232,23 +232,23 @@ int TS_ACCURACY_set_micros(TS_ACCURACY *a, const ASN1_INTEGER *micros)
     return 1;
 }
 
-const ASN1_INTEGER *TS_ACCURACY_get_micros(const TS_ACCURACY *a)
+const ASN1_INTEGER * __cdecl TS_ACCURACY_get_micros(const TS_ACCURACY *a)
 {
     return a->micros;
 }
 
-int TS_TST_INFO_set_ordering(TS_TST_INFO *a, int ordering)
+int __cdecl TS_TST_INFO_set_ordering(TS_TST_INFO *a, int ordering)
 {
     a->ordering = ordering ? 0xFF : 0x00;
     return 1;
 }
 
-int TS_TST_INFO_get_ordering(const TS_TST_INFO *a)
+int __cdecl TS_TST_INFO_get_ordering(const TS_TST_INFO *a)
 {
     return a->ordering ? 1 : 0;
 }
 
-int TS_TST_INFO_set_nonce(TS_TST_INFO *a, const ASN1_INTEGER *nonce)
+int __cdecl TS_TST_INFO_set_nonce(TS_TST_INFO *a, const ASN1_INTEGER *nonce)
 {
     ASN1_INTEGER *new_nonce;
 
@@ -264,12 +264,12 @@ int TS_TST_INFO_set_nonce(TS_TST_INFO *a, const ASN1_INTEGER *nonce)
     return 1;
 }
 
-const ASN1_INTEGER *TS_TST_INFO_get_nonce(const TS_TST_INFO *a)
+const ASN1_INTEGER * __cdecl TS_TST_INFO_get_nonce(const TS_TST_INFO *a)
 {
     return a->nonce;
 }
 
-int TS_TST_INFO_set_tsa(TS_TST_INFO *a, GENERAL_NAME *tsa)
+int __cdecl TS_TST_INFO_set_tsa(TS_TST_INFO *a, GENERAL_NAME *tsa)
 {
     GENERAL_NAME *new_tsa;
 
@@ -285,17 +285,17 @@ int TS_TST_INFO_set_tsa(TS_TST_INFO *a, GENERAL_NAME *tsa)
     return 1;
 }
 
-GENERAL_NAME *TS_TST_INFO_get_tsa(TS_TST_INFO *a)
+GENERAL_NAME * __cdecl TS_TST_INFO_get_tsa(TS_TST_INFO *a)
 {
     return a->tsa;
 }
 
-STACK_OF(X509_EXTENSION) *TS_TST_INFO_get_exts(TS_TST_INFO *a)
+STACK_OF(X509_EXTENSION) * __cdecl TS_TST_INFO_get_exts(TS_TST_INFO *a)
 {
     return a->extensions;
 }
 
-void TS_TST_INFO_ext_free(TS_TST_INFO *a)
+void __cdecl TS_TST_INFO_ext_free(TS_TST_INFO *a)
 {
     if (!a)
         return;
@@ -303,63 +303,63 @@ void TS_TST_INFO_ext_free(TS_TST_INFO *a)
     a->extensions = NULL;
 }
 
-int TS_TST_INFO_get_ext_count(TS_TST_INFO *a)
+int __cdecl TS_TST_INFO_get_ext_count(TS_TST_INFO *a)
 {
     return X509v3_get_ext_count(a->extensions);
 }
 
-int TS_TST_INFO_get_ext_by_NID(TS_TST_INFO *a, int nid, int lastpos)
+int __cdecl TS_TST_INFO_get_ext_by_NID(TS_TST_INFO *a, int nid, int lastpos)
 {
     return X509v3_get_ext_by_NID(a->extensions, nid, lastpos);
 }
 
-int TS_TST_INFO_get_ext_by_OBJ(TS_TST_INFO *a, const ASN1_OBJECT *obj, int lastpos)
+int __cdecl TS_TST_INFO_get_ext_by_OBJ(TS_TST_INFO *a, const ASN1_OBJECT *obj, int lastpos)
 {
     return X509v3_get_ext_by_OBJ(a->extensions, obj, lastpos);
 }
 
-int TS_TST_INFO_get_ext_by_critical(TS_TST_INFO *a, int crit, int lastpos)
+int __cdecl TS_TST_INFO_get_ext_by_critical(TS_TST_INFO *a, int crit, int lastpos)
 {
     return X509v3_get_ext_by_critical(a->extensions, crit, lastpos);
 }
 
-X509_EXTENSION *TS_TST_INFO_get_ext(TS_TST_INFO *a, int loc)
+X509_EXTENSION * __cdecl TS_TST_INFO_get_ext(TS_TST_INFO *a, int loc)
 {
     return X509v3_get_ext(a->extensions, loc);
 }
 
-X509_EXTENSION *TS_TST_INFO_delete_ext(TS_TST_INFO *a, int loc)
+X509_EXTENSION * __cdecl TS_TST_INFO_delete_ext(TS_TST_INFO *a, int loc)
 {
     return X509v3_delete_ext(a->extensions, loc);
 }
 
-int TS_TST_INFO_add_ext(TS_TST_INFO *a, X509_EXTENSION *ex, int loc)
+int __cdecl TS_TST_INFO_add_ext(TS_TST_INFO *a, X509_EXTENSION *ex, int loc)
 {
     return X509v3_add_ext(&a->extensions, ex, loc) != NULL;
 }
 
-void *TS_TST_INFO_get_ext_d2i(TS_TST_INFO *a, int nid, int *crit, int *idx)
+void * __cdecl TS_TST_INFO_get_ext_d2i(TS_TST_INFO *a, int nid, int *crit, int *idx)
 {
     return X509V3_get_d2i(a->extensions, nid, crit, idx);
 }
 
-int TS_STATUS_INFO_set_status(TS_STATUS_INFO *a, int i)
+int __cdecl TS_STATUS_INFO_set_status(TS_STATUS_INFO *a, int i)
 {
     return ASN1_INTEGER_set(a->status, i);
 }
 
-const ASN1_INTEGER *TS_STATUS_INFO_get0_status(const TS_STATUS_INFO *a)
+const ASN1_INTEGER * __cdecl TS_STATUS_INFO_get0_status(const TS_STATUS_INFO *a)
 {
     return a->status;
 }
 
 const STACK_OF(ASN1_UTF8STRING) *
-TS_STATUS_INFO_get0_text(const TS_STATUS_INFO *a)
+__cdecl TS_STATUS_INFO_get0_text(const TS_STATUS_INFO *a)
 {
     return a->text;
 }
 
-const ASN1_BIT_STRING *TS_STATUS_INFO_get0_failure_info(const TS_STATUS_INFO *a)
+const ASN1_BIT_STRING * __cdecl TS_STATUS_INFO_get0_failure_info(const TS_STATUS_INFO *a)
 {
     return a->failure_info;
 }
diff --git a/crypto/ts/ts_rsp_verify.c b/crypto/ts/ts_rsp_verify.c
index 9deda81b07..1e1382d953 100644
--- a/crypto/ts/ts_rsp_verify.c
+++ b/crypto/ts/ts_rsp_verify.c
@@ -87,7 +87,7 @@ static struct {
  *      - Verify the signature value.
  *      - Returns the signer certificate in 'signer', if 'signer' is not NULL.
  */
-int TS_RESP_verify_signature(PKCS7 *token, STACK_OF(X509) *certs,
+int __cdecl TS_RESP_verify_signature(PKCS7 *token, STACK_OF(X509) *certs,
                              X509_STORE *store, X509 **signer_out)
 {
     STACK_OF(PKCS7_SIGNER_INFO) *sinfos = NULL;
@@ -365,7 +365,7 @@ static int ts_issuer_serial_cmp(ESS_ISSUER_SERIAL *is, X509 *cert)
  *      - Gives an error message if the TS_TST_INFO is not present.
  *      - Calls _TS_RESP_verify_token to verify the token content.
  */
-int TS_RESP_verify_response(TS_VERIFY_CTX *ctx, TS_RESP *response)
+int __cdecl TS_RESP_verify_response(TS_VERIFY_CTX *ctx, TS_RESP *response)
 {
     PKCS7 *token = response->token;
     TS_TST_INFO *tst_info = response->tst_info;
@@ -385,7 +385,7 @@ int TS_RESP_verify_response(TS_VERIFY_CTX *ctx, TS_RESP *response)
  * Tries to extract a TS_TST_INFO structure from the PKCS7 token and
  * calls the internal int_TS_RESP_verify_token function for verifying it.
  */
-int TS_RESP_verify_token(TS_VERIFY_CTX *ctx, PKCS7 *token)
+int __cdecl TS_RESP_verify_token(TS_VERIFY_CTX *ctx, PKCS7 *token)
 {
     TS_TST_INFO *tst_info = PKCS7_to_TS_TST_INFO(token);
     int ret = 0;
diff --git a/crypto/ts/ts_verify_ctx.c b/crypto/ts/ts_verify_ctx.c
index d4792ee04f..19a4a6b2a0 100644
--- a/crypto/ts/ts_verify_ctx.c
+++ b/crypto/ts/ts_verify_ctx.c
@@ -12,7 +12,7 @@
 #include <openssl/ts.h>
 #include "ts_lcl.h"
 
-TS_VERIFY_CTX *TS_VERIFY_CTX_new(void)
+TS_VERIFY_CTX * __cdecl TS_VERIFY_CTX_new(void)
 {
     TS_VERIFY_CTX *ctx = OPENSSL_zalloc(sizeof(*ctx));
 
@@ -21,13 +21,13 @@ TS_VERIFY_CTX *TS_VERIFY_CTX_new(void)
     return ctx;
 }
 
-void TS_VERIFY_CTX_init(TS_VERIFY_CTX *ctx)
+void __cdecl TS_VERIFY_CTX_init(TS_VERIFY_CTX *ctx)
 {
     OPENSSL_assert(ctx != NULL);
     memset(ctx, 0, sizeof(*ctx));
 }
 
-void TS_VERIFY_CTX_free(TS_VERIFY_CTX *ctx)
+void __cdecl TS_VERIFY_CTX_free(TS_VERIFY_CTX *ctx)
 {
     if (!ctx)
         return;
@@ -36,38 +36,38 @@ void TS_VERIFY_CTX_free(TS_VERIFY_CTX *ctx)
     OPENSSL_free(ctx);
 }
 
-int TS_VERIFY_CTX_add_flags(TS_VERIFY_CTX *ctx, int f)
+int __cdecl TS_VERIFY_CTX_add_flags(TS_VERIFY_CTX *ctx, int f)
 {
     ctx->flags |= f;
     return ctx->flags;
 }
 
-int TS_VERIFY_CTX_set_flags(TS_VERIFY_CTX *ctx, int f)
+int __cdecl TS_VERIFY_CTX_set_flags(TS_VERIFY_CTX *ctx, int f)
 {
     ctx->flags = f;
     return ctx->flags;
 }
 
-BIO *TS_VERIFY_CTX_set_data(TS_VERIFY_CTX *ctx, BIO *b)
+BIO * __cdecl TS_VERIFY_CTX_set_data(TS_VERIFY_CTX *ctx, BIO *b)
 {
     ctx->data = b;
     return ctx->data;
 }
 
-X509_STORE *TS_VERIFY_CTX_set_store(TS_VERIFY_CTX *ctx, X509_STORE *s)
+X509_STORE * __cdecl TS_VERIFY_CTX_set_store(TS_VERIFY_CTX *ctx, X509_STORE *s)
 {
     ctx->store = s;
     return ctx->store;
 }
 
-STACK_OF(X509) *TS_VERIFY_CTS_set_certs(TS_VERIFY_CTX *ctx,
+STACK_OF(X509) * __cdecl TS_VERIFY_CTS_set_certs(TS_VERIFY_CTX *ctx,
                                         STACK_OF(X509) *certs)
 {
     ctx->certs = certs;
     return ctx->certs;
 }
 
-unsigned char *TS_VERIFY_CTX_set_imprint(TS_VERIFY_CTX *ctx,
+unsigned char * __cdecl TS_VERIFY_CTX_set_imprint(TS_VERIFY_CTX *ctx,
                                          unsigned char *hexstr, long len)
 {
     ctx->imprint = hexstr;
@@ -75,7 +75,7 @@ unsigned char *TS_VERIFY_CTX_set_imprint(TS_VERIFY_CTX *ctx,
     return ctx->imprint;
 }
 
-void TS_VERIFY_CTX_cleanup(TS_VERIFY_CTX *ctx)
+void __cdecl TS_VERIFY_CTX_cleanup(TS_VERIFY_CTX *ctx)
 {
     if (!ctx)
         return;
@@ -97,7 +97,7 @@ void TS_VERIFY_CTX_cleanup(TS_VERIFY_CTX *ctx)
     TS_VERIFY_CTX_init(ctx);
 }
 
-TS_VERIFY_CTX *TS_REQ_to_TS_VERIFY_CTX(TS_REQ *req, TS_VERIFY_CTX *ctx)
+TS_VERIFY_CTX * __cdecl TS_REQ_to_TS_VERIFY_CTX(TS_REQ *req, TS_VERIFY_CTX *ctx)
 {
     TS_VERIFY_CTX *ret = ctx;
     ASN1_OBJECT *policy;
diff --git a/crypto/ui/ui_lib.c b/crypto/ui/ui_lib.c
index f550972d3e..a30b5d2ebe 100644
--- a/crypto/ui/ui_lib.c
+++ b/crypto/ui/ui_lib.c
@@ -49,7 +49,7 @@ UI *UI_new_method(const UI_METHOD *method)
     return ret;
 }
 
-static void free_string(UI_STRING *uis)
+static void __cdecl free_string(UI_STRING *uis)
 {
     if (uis->flags & OUT_STRING_FREEABLE) {
         OPENSSL_free((char *)uis->out_string);
diff --git a/crypto/ui/ui_openssl.c b/crypto/ui/ui_openssl.c
index 0ec9f0daf3..467e6a640f 100644
--- a/crypto/ui/ui_openssl.c
+++ b/crypto/ui/ui_openssl.c
@@ -159,7 +159,7 @@ struct IOSB {
 # ifdef SIGACTION
 static struct sigaction savsig[NX509_SIG];
 # else
-static void (*savsig[NX509_SIG]) (int);
+static void (__cdecl *savsig[NX509_SIG]) (int);
 # endif
 
 # ifdef OPENSSL_SYS_VMS
@@ -183,9 +183,9 @@ static int is_a_tty;
 /* Declare static functions */
 # if !defined(OPENSSL_SYS_WINCE)
 static int read_till_nl(FILE *);
-static void recsig(int);
-static void pushsig(void);
-static void popsig(void);
+static void __cdecl recsig(int);
+static void __cdecl pushsig(void);
+static void __cdecl popsig(void);
 # endif
 # if defined(OPENSSL_SYS_MSDOS) && !defined(_WIN32)
 static int noecho_fgets(char *buf, int size, FILE *tty);
@@ -584,7 +584,7 @@ static int close_console(UI *ui)
 
 # if !defined(OPENSSL_SYS_WINCE)
 /* Internal functions to handle signals and act on them */
-static void pushsig(void)
+static void __cdecl pushsig(void)
 {
 #  ifndef OPENSSL_SYS_WIN32
     int i;
@@ -630,7 +630,7 @@ static void pushsig(void)
 #  endif
 }
 
-static void popsig(void)
+static void __cdecl popsig(void)
 {
 #  ifdef OPENSSL_SYS_WIN32
     signal(SIGABRT, savsig[SIGABRT]);
@@ -659,7 +659,7 @@ static void popsig(void)
 #  endif
 }
 
-static void recsig(int i)
+static void __cdecl recsig(int i)
 {
     intr_signal = i;
 }
diff --git a/crypto/uid.c b/crypto/uid.c
index 65b1171039..0bc9bc0d8c 100644
--- a/crypto/uid.c
+++ b/crypto/uid.c
@@ -12,7 +12,7 @@
 
 #if defined(OPENSSL_SYS_WIN32) || defined(OPENSSL_SYS_VXWORKS) || defined(OPENSSL_SYS_UEFI)
 
-int OPENSSL_issetugid(void)
+int __cdecl OPENSSL_issetugid(void)
 {
     return 0;
 }
@@ -21,7 +21,7 @@ int OPENSSL_issetugid(void)
 
 # include OPENSSL_UNISTD
 
-int OPENSSL_issetugid(void)
+int __cdecl OPENSSL_issetugid(void)
 {
     return issetugid();
 }
@@ -38,7 +38,7 @@ int OPENSSL_issetugid(void)
 #  endif
 # endif
 
-int OPENSSL_issetugid(void)
+int __cdecl OPENSSL_issetugid(void)
 {
 # ifdef OSSL_IMPLEMENT_GETAUXVAL
     return getauxval(AT_SECURE) != 0;
diff --git a/crypto/x509/by_dir.c b/crypto/x509/by_dir.c
index b691a83a0d..0070026868 100644
--- a/crypto/x509/by_dir.c
+++ b/crypto/x509/by_dir.c
@@ -118,12 +118,12 @@ static int new_dir(X509_LOOKUP *lu)
     return 0;
 }
 
-static void by_dir_hash_free(BY_DIR_HASH *hash)
+static void __cdecl by_dir_hash_free(BY_DIR_HASH *hash)
 {
     OPENSSL_free(hash);
 }
 
-static int by_dir_hash_cmp(const BY_DIR_HASH *const *a,
+static int __cdecl by_dir_hash_cmp(const BY_DIR_HASH *const *a,
                            const BY_DIR_HASH *const *b)
 {
     if ((*a)->hash > (*b)->hash)
@@ -133,7 +133,7 @@ static int by_dir_hash_cmp(const BY_DIR_HASH *const *a,
     return 0;
 }
 
-static void by_dir_entry_free(BY_DIR_ENTRY *ent)
+static void __cdecl by_dir_entry_free(BY_DIR_ENTRY *ent)
 {
     OPENSSL_free(ent->dir);
     sk_BY_DIR_HASH_pop_free(ent->hashes, by_dir_hash_free);
diff --git a/crypto/x509/x509_lu.c b/crypto/x509/x509_lu.c
index b7d2e66574..9c5b36cabc 100644
--- a/crypto/x509/x509_lu.c
+++ b/crypto/x509/x509_lu.c
@@ -135,7 +135,7 @@ X509_STORE *X509_LOOKUP_get_store(const X509_LOOKUP *ctx)
 }
 
 
-static int x509_object_cmp(const X509_OBJECT *const *a,
+static int __cdecl x509_object_cmp(const X509_OBJECT *const *a,
                            const X509_OBJECT *const *b)
 {
     int ret;
@@ -465,7 +465,7 @@ int X509_OBJECT_set1_X509_CRL(X509_OBJECT *a, X509_CRL *obj)
     return 1;
 }
 
-void X509_OBJECT_free(X509_OBJECT *a)
+void __cdecl X509_OBJECT_free(X509_OBJECT *a)
 {
     x509_object_free_internal(a);
     OPENSSL_free(a);
diff --git a/crypto/x509/x509_trs.c b/crypto/x509/x509_trs.c
index d749af4d59..7ca429180f 100644
--- a/crypto/x509/x509_trs.c
+++ b/crypto/x509/x509_trs.c
@@ -12,8 +12,8 @@
 #include <openssl/x509v3.h>
 #include "internal/x509_int.h"
 
-static int tr_cmp(const X509_TRUST *const *a, const X509_TRUST *const *b);
-static void trtable_free(X509_TRUST *p);
+static int __cdecl tr_cmp(const X509_TRUST *const *a, const X509_TRUST *const *b);
+static void __cdecl trtable_free(X509_TRUST *p);
 
 static int trust_1oidany(X509_TRUST *trust, X509 *x, int flags);
 static int trust_1oid(X509_TRUST *trust, X509 *x, int flags);
@@ -49,7 +49,7 @@ static X509_TRUST trstandard[] = {
 
 static STACK_OF(X509_TRUST) *trtable = NULL;
 
-static int tr_cmp(const X509_TRUST *const *a, const X509_TRUST *const *b)
+static int __cdecl tr_cmp(const X509_TRUST *const *a, const X509_TRUST *const *b)
 {
     return (*a)->trust - (*b)->trust;
 }
@@ -182,7 +182,7 @@ int X509_TRUST_add(int id, int flags, int (*ck) (X509_TRUST *, X509 *, int),
     return 0;
 }
 
-static void trtable_free(X509_TRUST *p)
+static void __cdecl trtable_free(X509_TRUST *p)
 {
     if (!p)
         return;
diff --git a/crypto/x509/x509_vpm.c b/crypto/x509/x509_vpm.c
index aea186295c..2a354ce00c 100644
--- a/crypto/x509/x509_vpm.c
+++ b/crypto/x509/x509_vpm.c
@@ -23,12 +23,12 @@
 #define SET_HOST 0
 #define ADD_HOST 1
 
-static char *str_copy(const char *s)
+static char * __cdecl str_copy(const char *s)
 {
     return OPENSSL_strdup(s);
 }
 
-static void str_free(char *s)
+static void __cdecl str_free(char *s)
 {
     OPENSSL_free(s);
 }
@@ -95,7 +95,7 @@ X509_VERIFY_PARAM *X509_VERIFY_PARAM_new(void)
     return param;
 }
 
-void X509_VERIFY_PARAM_free(X509_VERIFY_PARAM *param)
+void __cdecl X509_VERIFY_PARAM_free(X509_VERIFY_PARAM *param)
 {
     if (param == NULL)
         return;
@@ -531,7 +531,7 @@ static const X509_VERIFY_PARAM default_table[] = {
 
 static STACK_OF(X509_VERIFY_PARAM) *param_table = NULL;
 
-static int table_cmp(const X509_VERIFY_PARAM *a, const X509_VERIFY_PARAM *b)
+static int __cdecl table_cmp(const X509_VERIFY_PARAM *a, const X509_VERIFY_PARAM *b)
 {
     return strcmp(a->name, b->name);
 }
@@ -539,7 +539,7 @@ static int table_cmp(const X509_VERIFY_PARAM *a, const X509_VERIFY_PARAM *b)
 DECLARE_OBJ_BSEARCH_CMP_FN(X509_VERIFY_PARAM, X509_VERIFY_PARAM, table);
 IMPLEMENT_OBJ_BSEARCH_CMP_FN(X509_VERIFY_PARAM, X509_VERIFY_PARAM, table);
 
-static int param_cmp(const X509_VERIFY_PARAM *const *a,
+static int __cdecl param_cmp(const X509_VERIFY_PARAM *const *a,
                      const X509_VERIFY_PARAM *const *b)
 {
     return strcmp((*a)->name, (*b)->name);
diff --git a/crypto/x509/x_all.c b/crypto/x509/x_all.c
index 24e4114601..741320d1b8 100644
--- a/crypto/x509/x_all.c
+++ b/crypto/x509/x_all.c
@@ -212,9 +212,9 @@ RSA *d2i_RSAPublicKey_fp(FILE *fp, RSA **rsa)
     return ASN1_item_d2i_fp(ASN1_ITEM_rptr(RSAPublicKey), fp, rsa);
 }
 
-RSA *d2i_RSA_PUBKEY_fp(FILE *fp, RSA **rsa)
+RSA * __cdecl d2i_RSA_PUBKEY_fp(FILE *fp, RSA **rsa)
 {
-    return ASN1_d2i_fp((void *(*)(void))
+    return ASN1_d2i_fp((void *(__cdecl *)(void))
                        RSA_new, (D2I_OF(void)) d2i_RSA_PUBKEY, fp,
                        (void **)rsa);
 }
@@ -245,7 +245,7 @@ RSA *d2i_RSAPublicKey_bio(BIO *bp, RSA **rsa)
     return ASN1_item_d2i_bio(ASN1_ITEM_rptr(RSAPublicKey), bp, rsa);
 }
 
-RSA *d2i_RSA_PUBKEY_bio(BIO *bp, RSA **rsa)
+RSA * __cdecl d2i_RSA_PUBKEY_bio(BIO *bp, RSA **rsa)
 {
     return ASN1_d2i_bio_of(RSA, RSA_new, d2i_RSA_PUBKEY, bp, rsa);
 }
@@ -263,7 +263,7 @@ int i2d_RSA_PUBKEY_bio(BIO *bp, RSA *rsa)
 
 #ifndef OPENSSL_NO_DSA
 # ifndef OPENSSL_NO_STDIO
-DSA *d2i_DSAPrivateKey_fp(FILE *fp, DSA **dsa)
+DSA * __cdecl d2i_DSAPrivateKey_fp(FILE *fp, DSA **dsa)
 {
     return ASN1_d2i_fp_of(DSA, DSA_new, d2i_DSAPrivateKey, fp, dsa);
 }
@@ -273,7 +273,7 @@ int i2d_DSAPrivateKey_fp(FILE *fp, DSA *dsa)
     return ASN1_i2d_fp_of_const(DSA, i2d_DSAPrivateKey, fp, dsa);
 }
 
-DSA *d2i_DSA_PUBKEY_fp(FILE *fp, DSA **dsa)
+DSA * __cdecl d2i_DSA_PUBKEY_fp(FILE *fp, DSA **dsa)
 {
     return ASN1_d2i_fp_of(DSA, DSA_new, d2i_DSA_PUBKEY, fp, dsa);
 }
@@ -284,7 +284,7 @@ int i2d_DSA_PUBKEY_fp(FILE *fp, DSA *dsa)
 }
 # endif
 
-DSA *d2i_DSAPrivateKey_bio(BIO *bp, DSA **dsa)
+DSA * __cdecl d2i_DSAPrivateKey_bio(BIO *bp, DSA **dsa)
 {
     return ASN1_d2i_bio_of(DSA, DSA_new, d2i_DSAPrivateKey, bp, dsa);
 }
@@ -294,7 +294,7 @@ int i2d_DSAPrivateKey_bio(BIO *bp, DSA *dsa)
     return ASN1_i2d_bio_of_const(DSA, i2d_DSAPrivateKey, bp, dsa);
 }
 
-DSA *d2i_DSA_PUBKEY_bio(BIO *bp, DSA **dsa)
+DSA * __cdecl d2i_DSA_PUBKEY_bio(BIO *bp, DSA **dsa)
 {
     return ASN1_d2i_bio_of(DSA, DSA_new, d2i_DSA_PUBKEY, bp, dsa);
 }
@@ -308,7 +308,7 @@ int i2d_DSA_PUBKEY_bio(BIO *bp, DSA *dsa)
 
 #ifndef OPENSSL_NO_EC
 # ifndef OPENSSL_NO_STDIO
-EC_KEY *d2i_EC_PUBKEY_fp(FILE *fp, EC_KEY **eckey)
+EC_KEY * __cdecl d2i_EC_PUBKEY_fp(FILE *fp, EC_KEY **eckey)
 {
     return ASN1_d2i_fp_of(EC_KEY, EC_KEY_new, d2i_EC_PUBKEY, fp, eckey);
 }
@@ -318,7 +318,7 @@ int i2d_EC_PUBKEY_fp(FILE *fp, EC_KEY *eckey)
     return ASN1_i2d_fp_of(EC_KEY, i2d_EC_PUBKEY, fp, eckey);
 }
 
-EC_KEY *d2i_ECPrivateKey_fp(FILE *fp, EC_KEY **eckey)
+EC_KEY * __cdecl d2i_ECPrivateKey_fp(FILE *fp, EC_KEY **eckey)
 {
     return ASN1_d2i_fp_of(EC_KEY, EC_KEY_new, d2i_ECPrivateKey, fp, eckey);
 }
@@ -328,7 +328,7 @@ int i2d_ECPrivateKey_fp(FILE *fp, EC_KEY *eckey)
     return ASN1_i2d_fp_of(EC_KEY, i2d_ECPrivateKey, fp, eckey);
 }
 # endif
-EC_KEY *d2i_EC_PUBKEY_bio(BIO *bp, EC_KEY **eckey)
+EC_KEY * __cdecl d2i_EC_PUBKEY_bio(BIO *bp, EC_KEY **eckey)
 {
     return ASN1_d2i_bio_of(EC_KEY, EC_KEY_new, d2i_EC_PUBKEY, bp, eckey);
 }
@@ -338,7 +338,7 @@ int i2d_EC_PUBKEY_bio(BIO *bp, EC_KEY *ecdsa)
     return ASN1_i2d_bio_of(EC_KEY, i2d_EC_PUBKEY, bp, ecdsa);
 }
 
-EC_KEY *d2i_ECPrivateKey_bio(BIO *bp, EC_KEY **eckey)
+EC_KEY * __cdecl d2i_ECPrivateKey_bio(BIO *bp, EC_KEY **eckey)
 {
     return ASN1_d2i_bio_of(EC_KEY, EC_KEY_new, d2i_ECPrivateKey, bp, eckey);
 }
@@ -462,7 +462,7 @@ int i2d_PrivateKey_fp(FILE *fp, EVP_PKEY *pkey)
     return ASN1_i2d_fp_of(EVP_PKEY, i2d_PrivateKey, fp, pkey);
 }
 
-EVP_PKEY *d2i_PrivateKey_fp(FILE *fp, EVP_PKEY **a)
+EVP_PKEY * __cdecl d2i_PrivateKey_fp(FILE *fp, EVP_PKEY **a)
 {
     return ASN1_d2i_fp_of(EVP_PKEY, EVP_PKEY_new, d2i_AutoPrivateKey, fp, a);
 }
@@ -472,7 +472,7 @@ int i2d_PUBKEY_fp(FILE *fp, EVP_PKEY *pkey)
     return ASN1_i2d_fp_of(EVP_PKEY, i2d_PUBKEY, fp, pkey);
 }
 
-EVP_PKEY *d2i_PUBKEY_fp(FILE *fp, EVP_PKEY **a)
+EVP_PKEY * __cdecl d2i_PUBKEY_fp(FILE *fp, EVP_PKEY **a)
 {
     return ASN1_d2i_fp_of(EVP_PKEY, EVP_PKEY_new, d2i_PUBKEY, fp, a);
 }
@@ -509,7 +509,7 @@ int i2d_PrivateKey_bio(BIO *bp, EVP_PKEY *pkey)
     return ASN1_i2d_bio_of(EVP_PKEY, i2d_PrivateKey, bp, pkey);
 }
 
-EVP_PKEY *d2i_PrivateKey_bio(BIO *bp, EVP_PKEY **a)
+EVP_PKEY * __cdecl d2i_PrivateKey_bio(BIO *bp, EVP_PKEY **a)
 {
     return ASN1_d2i_bio_of(EVP_PKEY, EVP_PKEY_new, d2i_AutoPrivateKey, bp, a);
 }
@@ -519,7 +519,7 @@ int i2d_PUBKEY_bio(BIO *bp, EVP_PKEY *pkey)
     return ASN1_i2d_bio_of(EVP_PKEY, i2d_PUBKEY, bp, pkey);
 }
 
-EVP_PKEY *d2i_PUBKEY_bio(BIO *bp, EVP_PKEY **a)
+EVP_PKEY * __cdecl d2i_PUBKEY_bio(BIO *bp, EVP_PKEY **a)
 {
     return ASN1_d2i_bio_of(EVP_PKEY, EVP_PKEY_new, d2i_PUBKEY, bp, a);
 }
diff --git a/crypto/x509/x_crl.c b/crypto/x509/x_crl.c
index 12ab3cca42..c830de507c 100644
--- a/crypto/x509/x_crl.c
+++ b/crypto/x509/x_crl.c
@@ -15,7 +15,7 @@
 #include <openssl/x509v3.h>
 #include "x509_lcl.h"
 
-static int X509_REVOKED_cmp(const X509_REVOKED *const *a,
+static int __cdecl X509_REVOKED_cmp(const X509_REVOKED *const *a,
                             const X509_REVOKED *const *b);
 static void setup_idp(X509_CRL *crl, ISSUING_DIST_POINT *idp);
 
@@ -311,7 +311,7 @@ IMPLEMENT_ASN1_FUNCTIONS(X509_CRL)
 
 IMPLEMENT_ASN1_DUP_FUNCTION(X509_CRL)
 
-static int X509_REVOKED_cmp(const X509_REVOKED *const *a,
+static int __cdecl X509_REVOKED_cmp(const X509_REVOKED *const *a,
                             const X509_REVOKED *const *b)
 {
     return (ASN1_STRING_cmp((ASN1_STRING *)&(*a)->serialNumber,
diff --git a/crypto/x509/x_name.c b/crypto/x509/x_name.c
index a1e9bbdb66..e8c1ef76b3 100644
--- a/crypto/x509/x_name.c
+++ b/crypto/x509/x_name.c
@@ -125,12 +125,12 @@ static void x509_name_ex_free(ASN1_VALUE **pval, const ASN1_ITEM *it)
     *pval = NULL;
 }
 
-static void local_sk_X509_NAME_ENTRY_free(STACK_OF(X509_NAME_ENTRY) *ne)
+static void __cdecl local_sk_X509_NAME_ENTRY_free(STACK_OF(X509_NAME_ENTRY) *ne)
 {
     sk_X509_NAME_ENTRY_free(ne);
 }
 
-static void local_sk_X509_NAME_ENTRY_pop_free(STACK_OF(X509_NAME_ENTRY) *ne)
+static void __cdecl local_sk_X509_NAME_ENTRY_pop_free(STACK_OF(X509_NAME_ENTRY) *ne)
 {
     sk_X509_NAME_ENTRY_pop_free(ne, X509_NAME_ENTRY_free);
 }
diff --git a/crypto/x509/x_pubkey.c b/crypto/x509/x_pubkey.c
index 1c87b8268e..18da2106b0 100644
--- a/crypto/x509/x_pubkey.c
+++ b/crypto/x509/x_pubkey.c
@@ -179,7 +179,7 @@ EVP_PKEY *X509_PUBKEY_get(X509_PUBKEY *key)
  * decode as X509_PUBKEY
  */
 
-EVP_PKEY *d2i_PUBKEY(EVP_PKEY **a, const unsigned char **pp, long length)
+EVP_PKEY * __cdecl d2i_PUBKEY(EVP_PKEY **a, const unsigned char **pp, long length)
 {
     X509_PUBKEY *xpk;
     EVP_PKEY *pktmp;
@@ -200,7 +200,7 @@ EVP_PKEY *d2i_PUBKEY(EVP_PKEY **a, const unsigned char **pp, long length)
     return pktmp;
 }
 
-int i2d_PUBKEY(EVP_PKEY *a, unsigned char **pp)
+int __cdecl i2d_PUBKEY(EVP_PKEY *a, unsigned char **pp)
 {
     X509_PUBKEY *xpk = NULL;
     int ret;
@@ -217,7 +217,7 @@ int i2d_PUBKEY(EVP_PKEY *a, unsigned char **pp)
  * The following are equivalents but which return RSA and DSA keys
  */
 #ifndef OPENSSL_NO_RSA
-RSA *d2i_RSA_PUBKEY(RSA **a, const unsigned char **pp, long length)
+RSA * __cdecl d2i_RSA_PUBKEY(RSA **a, const unsigned char **pp, long length)
 {
     EVP_PKEY *pkey;
     RSA *key;
@@ -238,7 +238,7 @@ RSA *d2i_RSA_PUBKEY(RSA **a, const unsigned char **pp, long length)
     return key;
 }
 
-int i2d_RSA_PUBKEY(RSA *a, unsigned char **pp)
+int __cdecl i2d_RSA_PUBKEY(RSA *a, unsigned char **pp)
 {
     EVP_PKEY *pktmp;
     int ret;
@@ -257,7 +257,7 @@ int i2d_RSA_PUBKEY(RSA *a, unsigned char **pp)
 #endif
 
 #ifndef OPENSSL_NO_DSA
-DSA *d2i_DSA_PUBKEY(DSA **a, const unsigned char **pp, long length)
+DSA * __cdecl d2i_DSA_PUBKEY(DSA **a, const unsigned char **pp, long length)
 {
     EVP_PKEY *pkey;
     DSA *key;
@@ -278,7 +278,7 @@ DSA *d2i_DSA_PUBKEY(DSA **a, const unsigned char **pp, long length)
     return key;
 }
 
-int i2d_DSA_PUBKEY(DSA *a, unsigned char **pp)
+int __cdecl i2d_DSA_PUBKEY(DSA *a, unsigned char **pp)
 {
     EVP_PKEY *pktmp;
     int ret;
@@ -297,7 +297,7 @@ int i2d_DSA_PUBKEY(DSA *a, unsigned char **pp)
 #endif
 
 #ifndef OPENSSL_NO_EC
-EC_KEY *d2i_EC_PUBKEY(EC_KEY **a, const unsigned char **pp, long length)
+EC_KEY * __cdecl d2i_EC_PUBKEY(EC_KEY **a, const unsigned char **pp, long length)
 {
     EVP_PKEY *pkey;
     EC_KEY *key;
@@ -318,7 +318,7 @@ EC_KEY *d2i_EC_PUBKEY(EC_KEY **a, const unsigned char **pp, long length)
     return key;
 }
 
-int i2d_EC_PUBKEY(EC_KEY *a, unsigned char **pp)
+int __cdecl i2d_EC_PUBKEY(EC_KEY *a, unsigned char **pp)
 {
     EVP_PKEY *pktmp;
     int ret;
diff --git a/crypto/x509/x_x509.c b/crypto/x509/x_x509.c
index afe59c46c5..c0c0f2f44f 100644
--- a/crypto/x509/x_x509.c
+++ b/crypto/x509/x_x509.c
@@ -127,7 +127,7 @@ void *X509_get_ex_data(X509 *r, int idx)
  * reliable source such as local storage.
  */
 
-X509 *d2i_X509_AUX(X509 **a, const unsigned char **pp, long length)
+X509 * __cdecl d2i_X509_AUX(X509 **a, const unsigned char **pp, long length)
 {
     const unsigned char *q;
     X509 *ret;
@@ -197,7 +197,7 @@ static int i2d_x509_aux_internal(X509 *a, unsigned char **pp)
  * the allocation, nor can we allow i2d_X509_CERT_AUX() to increment the
  * allocated buffer.
  */
-int i2d_X509_AUX(X509 *a, unsigned char **pp)
+int __cdecl i2d_X509_AUX(X509 *a, unsigned char **pp)
 {
     int length;
     unsigned char *tmp;
diff --git a/crypto/x509v3/pcy_cache.c b/crypto/x509v3/pcy_cache.c
index 623870b1f6..42194005c7 100644
--- a/crypto/x509v3/pcy_cache.c
+++ b/crypto/x509v3/pcy_cache.c
@@ -14,7 +14,7 @@
 
 #include "pcy_int.h"
 
-static int policy_data_cmp(const X509_POLICY_DATA *const *a,
+static int __cdecl policy_data_cmp(const X509_POLICY_DATA *const *a,
                            const X509_POLICY_DATA *const *b);
 static int policy_cache_set_int(long *out, ASN1_INTEGER *value);
 
@@ -207,7 +207,7 @@ X509_POLICY_DATA *policy_cache_find_data(const X509_POLICY_CACHE *cache,
     return sk_X509_POLICY_DATA_value(cache->data, idx);
 }
 
-static int policy_data_cmp(const X509_POLICY_DATA *const *a,
+static int __cdecl policy_data_cmp(const X509_POLICY_DATA *const *a,
                            const X509_POLICY_DATA *const *b)
 {
     return OBJ_cmp((*a)->valid_policy, (*b)->valid_policy);
diff --git a/crypto/x509v3/pcy_data.c b/crypto/x509v3/pcy_data.c
index bd3bb0e40d..1ce8f6ce77 100644
--- a/crypto/x509v3/pcy_data.c
+++ b/crypto/x509v3/pcy_data.c
@@ -15,7 +15,7 @@
 
 /* Policy Node routines */
 
-void policy_data_free(X509_POLICY_DATA *data)
+void __cdecl policy_data_free(X509_POLICY_DATA *data)
 {
     if (data == NULL)
         return;
diff --git a/crypto/x509v3/pcy_int.h b/crypto/x509v3/pcy_int.h
index 5daf78de45..8f16cd61a3 100644
--- a/crypto/x509v3/pcy_int.h
+++ b/crypto/x509v3/pcy_int.h
@@ -137,7 +137,7 @@ struct X509_POLICY_TREE_st {
 
 X509_POLICY_DATA *policy_data_new(POLICYINFO *policy, const ASN1_OBJECT *id,
                                   int crit);
-void policy_data_free(X509_POLICY_DATA *data);
+void __cdecl policy_data_free(X509_POLICY_DATA *data);
 
 X509_POLICY_DATA *policy_cache_find_data(const X509_POLICY_CACHE *cache,
                                          const ASN1_OBJECT *id);
@@ -160,7 +160,7 @@ X509_POLICY_NODE *level_add_node(X509_POLICY_LEVEL *level,
                                  X509_POLICY_DATA *data,
                                  X509_POLICY_NODE *parent,
                                  X509_POLICY_TREE *tree);
-void policy_node_free(X509_POLICY_NODE *node);
+void __cdecl policy_node_free(X509_POLICY_NODE *node);
 int policy_node_match(const X509_POLICY_LEVEL *lvl,
                       const X509_POLICY_NODE *node, const ASN1_OBJECT *oid);
 
diff --git a/crypto/x509v3/pcy_node.c b/crypto/x509v3/pcy_node.c
index 1ffe98498b..f43bf9b52a 100644
--- a/crypto/x509v3/pcy_node.c
+++ b/crypto/x509v3/pcy_node.c
@@ -14,7 +14,7 @@
 
 #include "pcy_int.h"
 
-static int node_cmp(const X509_POLICY_NODE *const *a,
+static int __cdecl node_cmp(const X509_POLICY_NODE *const *a,
                     const X509_POLICY_NODE *const *b)
 {
     return OBJ_cmp((*a)->data->valid_policy, (*b)->data->valid_policy);
@@ -113,7 +113,7 @@ X509_POLICY_NODE *level_add_node(X509_POLICY_LEVEL *level,
     return NULL;
 }
 
-void policy_node_free(X509_POLICY_NODE *node)
+void __cdecl policy_node_free(X509_POLICY_NODE *node)
 {
     OPENSSL_free(node);
 }
diff --git a/crypto/x509v3/pcy_tree.c b/crypto/x509v3/pcy_tree.c
index 87f51d001b..676c2ccc79 100644
--- a/crypto/x509v3/pcy_tree.c
+++ b/crypto/x509v3/pcy_tree.c
@@ -598,7 +598,7 @@ static int tree_evaluate(X509_POLICY_TREE *tree)
     return X509_PCY_TREE_VALID;
 }
 
-static void exnode_free(X509_POLICY_NODE *node)
+static void __cdecl exnode_free(X509_POLICY_NODE *node)
 {
     if (node->data && (node->data->flags & POLICY_DATA_FLAG_EXTRA_NODE))
         OPENSSL_free(node);
diff --git a/crypto/x509v3/v3_addr.c b/crypto/x509v3/v3_addr.c
index bb58e04846..b6fceb2779 100644
--- a/crypto/x509v3/v3_addr.c
+++ b/crypto/x509v3/v3_addr.c
@@ -316,7 +316,7 @@ static int IPAddressOrRange_cmp(const IPAddressOrRange *a,
  * IPv4-specific closure over IPAddressOrRange_cmp, since sk_sort()
  * comparison routines are only allowed two arguments.
  */
-static int v4IPAddressOrRange_cmp(const IPAddressOrRange *const *a,
+static int __cdecl v4IPAddressOrRange_cmp(const IPAddressOrRange *const *a,
                                   const IPAddressOrRange *const *b)
 {
     return IPAddressOrRange_cmp(*a, *b, 4);
@@ -326,7 +326,7 @@ static int v4IPAddressOrRange_cmp(const IPAddressOrRange *const *a,
  * IPv6-specific closure over IPAddressOrRange_cmp, since sk_sort()
  * comparison routines are only allowed two arguments.
  */
-static int v6IPAddressOrRange_cmp(const IPAddressOrRange *const *a,
+static int __cdecl v6IPAddressOrRange_cmp(const IPAddressOrRange *const *a,
                                   const IPAddressOrRange *const *b)
 {
     return IPAddressOrRange_cmp(*a, *b, 16);
@@ -666,7 +666,7 @@ int X509v3_addr_get_range(IPAddressOrRange *aor,
  * null-SAFI rule to apply only within a single AFI, which is what I
  * would have expected and is what the following code implements.
  */
-static int IPAddressFamily_cmp(const IPAddressFamily *const *a_,
+static int __cdecl IPAddressFamily_cmp(const IPAddressFamily *const *a_,
                                const IPAddressFamily *const *b_)
 {
     const ASN1_OCTET_STRING *a = (*a_)->addressFamily;
diff --git a/crypto/x509v3/v3_asid.c b/crypto/x509v3/v3_asid.c
index 089f2ae29f..3bc9762a64 100644
--- a/crypto/x509v3/v3_asid.c
+++ b/crypto/x509v3/v3_asid.c
@@ -119,7 +119,7 @@ static int i2r_ASIdentifiers(const X509V3_EXT_METHOD *method,
 /*
  * Sort comparison function for a sequence of ASIdOrRange elements.
  */
-static int ASIdOrRange_cmp(const ASIdOrRange *const *a_,
+static int __cdecl ASIdOrRange_cmp(const ASIdOrRange *const *a_,
                            const ASIdOrRange *const *b_)
 {
     const ASIdOrRange *a = *a_, *b = *b_;
diff --git a/crypto/x509v3/v3_lib.c b/crypto/x509v3/v3_lib.c
index 97c1cbc20f..eadec5615d 100644
--- a/crypto/x509v3/v3_lib.c
+++ b/crypto/x509v3/v3_lib.c
@@ -18,9 +18,9 @@
 
 static STACK_OF(X509V3_EXT_METHOD) *ext_list = NULL;
 
-static int ext_cmp(const X509V3_EXT_METHOD *const *a,
+static int __cdecl ext_cmp(const X509V3_EXT_METHOD *const *a,
                    const X509V3_EXT_METHOD *const *b);
-static void ext_list_free(X509V3_EXT_METHOD *ext);
+static void __cdecl ext_list_free(X509V3_EXT_METHOD *ext);
 
 int X509V3_EXT_add(X509V3_EXT_METHOD *ext)
 {
@@ -36,7 +36,7 @@ int X509V3_EXT_add(X509V3_EXT_METHOD *ext)
     return 1;
 }
 
-static int ext_cmp(const X509V3_EXT_METHOD *const *a,
+static int __cdecl ext_cmp(const X509V3_EXT_METHOD *const *a,
                    const X509V3_EXT_METHOD *const *b)
 {
     return ((*a)->ext_nid - (*b)->ext_nid);
@@ -108,7 +108,7 @@ void X509V3_EXT_cleanup(void)
     ext_list = NULL;
 }
 
-static void ext_list_free(X509V3_EXT_METHOD *ext)
+static void __cdecl ext_list_free(X509V3_EXT_METHOD *ext)
 {
     if (ext->ext_flags & X509V3_EXT_DYNAMIC)
         OPENSSL_free(ext);
diff --git a/crypto/x509v3/v3_purp.c b/crypto/x509v3/v3_purp.c
index 2f06289d19..0f5b865f71 100644
--- a/crypto/x509v3/v3_purp.c
+++ b/crypto/x509v3/v3_purp.c
@@ -36,8 +36,8 @@ static int check_purpose_timestamp_sign(const X509_PURPOSE *xp, const X509 *x,
 static int no_check(const X509_PURPOSE *xp, const X509 *x, int ca);
 static int ocsp_helper(const X509_PURPOSE *xp, const X509 *x, int ca);
 
-static int xp_cmp(const X509_PURPOSE *const *a, const X509_PURPOSE *const *b);
-static void xptable_free(X509_PURPOSE *p);
+static int __cdecl xp_cmp(const X509_PURPOSE *const *a, const X509_PURPOSE *const *b);
+static void __cdecl xptable_free(X509_PURPOSE *p);
 
 static X509_PURPOSE xstandard[] = {
     {X509_PURPOSE_SSL_CLIENT, X509_TRUST_SSL_CLIENT, 0,
@@ -65,7 +65,7 @@ static X509_PURPOSE xstandard[] = {
 
 static STACK_OF(X509_PURPOSE) *xptable = NULL;
 
-static int xp_cmp(const X509_PURPOSE *const *a, const X509_PURPOSE *const *b)
+static int __cdecl xp_cmp(const X509_PURPOSE *const *a, const X509_PURPOSE *const *b)
 {
     return (*a)->purpose - (*b)->purpose;
 }
@@ -214,7 +214,7 @@ int X509_PURPOSE_add(int id, int trust, int flags,
     return 0;
 }
 
-static void xptable_free(X509_PURPOSE *p)
+static void __cdecl xptable_free(X509_PURPOSE *p)
 {
     if (!p)
         return;
@@ -253,7 +253,7 @@ int X509_PURPOSE_get_trust(const X509_PURPOSE *xp)
     return xp->trust;
 }
 
-static int nid_cmp(const int *a, const int *b)
+static int __cdecl nid_cmp(const int *a, const int *b)
 {
     return *a - *b;
 }
diff --git a/crypto/x509v3/v3_utl.c b/crypto/x509v3/v3_utl.c
index c9b40d2c76..d051a495d2 100644
--- a/crypto/x509v3/v3_utl.c
+++ b/crypto/x509v3/v3_utl.c
@@ -21,10 +21,10 @@
 #include "ext_dat.h"
 
 static char *strip_spaces(char *name);
-static int sk_strcmp(const char *const *a, const char *const *b);
+static int __cdecl sk_strcmp(const char *const *a, const char *const *b);
 static STACK_OF(OPENSSL_STRING) *get_email(X509_NAME *name,
                                            GENERAL_NAMES *gens);
-static void str_free(OPENSSL_STRING str);
+static void __cdecl str_free(OPENSSL_STRING str);
 static int append_ia5(STACK_OF(OPENSSL_STRING) **sk, const ASN1_IA5STRING *email);
 
 static int ipv4_from_asc(unsigned char *v4, const char *in);
@@ -75,7 +75,7 @@ int X509V3_add_value_uchar(const char *name, const unsigned char *value,
 
 /* Free function for STACK_OF(CONF_VALUE) */
 
-void X509V3_conf_free(CONF_VALUE *conf)
+void __cdecl X509V3_conf_free(CONF_VALUE *conf)
 {
     if (!conf)
         return;
@@ -410,7 +410,7 @@ int name_cmp(const char *name, const char *cmp)
     return 1;
 }
 
-static int sk_strcmp(const char *const *a, const char *const *b)
+static int __cdecl sk_strcmp(const char *const *a, const char *const *b)
 {
     return strcmp(*a, *b);
 }
@@ -491,7 +491,7 @@ static STACK_OF(OPENSSL_STRING) *get_email(X509_NAME *name,
     return ret;
 }
 
-static void str_free(OPENSSL_STRING str)
+static void __cdecl str_free(OPENSSL_STRING str)
 {
     OPENSSL_free(str);
 }
diff --git a/demos/bio/client-arg.c b/demos/bio/client-arg.c
index e8d5e46ab5..64da8b8d55 100644
--- a/demos/bio/client-arg.c
+++ b/demos/bio/client-arg.c
@@ -11,7 +11,7 @@
 #include <openssl/err.h>
 #include <openssl/ssl.h>
 
-int main(int argc, char **argv)
+int __cdecl main(int argc, char **argv)
 {
     BIO *sbio = NULL, *out = NULL;
     int len;
diff --git a/demos/bio/client-conf.c b/demos/bio/client-conf.c
index e819030eec..223f1ca7d8 100644
--- a/demos/bio/client-conf.c
+++ b/demos/bio/client-conf.c
@@ -12,7 +12,7 @@
 #include <openssl/ssl.h>
 #include <openssl/conf.h>
 
-int main(int argc, char **argv)
+int __cdecl main(int argc, char **argv)
 {
     BIO *sbio = NULL, *out = NULL;
     int i, len, rv;
diff --git a/demos/bio/saccept.c b/demos/bio/saccept.c
index de86ae6322..5bd262f50d 100644
--- a/demos/bio/saccept.c
+++ b/demos/bio/saccept.c
@@ -45,7 +45,7 @@ void sigsetup(void)
     sigaction(SIGINT, &sa, NULL);
 }
 
-int main(int argc, char *argv[])
+int __cdecl main(int argc, char *argv[])
 {
     char *port = NULL;
     BIO *in = NULL;
diff --git a/demos/bio/sconnect.c b/demos/bio/sconnect.c
index db71f29afe..3a377a9399 100644
--- a/demos/bio/sconnect.c
+++ b/demos/bio/sconnect.c
@@ -25,7 +25,7 @@
 #define HOSTPORT "localhost:4433"
 #define CAFILE "root.pem"
 
-int main(int argc, char *argv[])
+int __cdecl main(int argc, char *argv[])
 {
     const char *hostport = HOSTPORT;
     const char *CAfile = CAFILE;
diff --git a/demos/bio/server-arg.c b/demos/bio/server-arg.c
index d80d070f7a..9f079641b6 100644
--- a/demos/bio/server-arg.c
+++ b/demos/bio/server-arg.c
@@ -20,7 +20,7 @@
 #include <openssl/err.h>
 #include <openssl/ssl.h>
 
-int main(int argc, char *argv[])
+int __cdecl main(int argc, char *argv[])
 {
     char *port = "*:4433";
     BIO *ssl_bio, *tmp;
diff --git a/demos/bio/server-cmod.c b/demos/bio/server-cmod.c
index f1079ad329..caf3f18340 100644
--- a/demos/bio/server-cmod.c
+++ b/demos/bio/server-cmod.c
@@ -19,7 +19,7 @@
 #include <openssl/ssl.h>
 #include <openssl/conf.h>
 
-int main(int argc, char *argv[])
+int __cdecl main(int argc, char *argv[])
 {
     unsigned char buf[512];
     char *port = "*:4433";
diff --git a/demos/bio/server-conf.c b/demos/bio/server-conf.c
index 4d1655bfc9..f2a0773e52 100644
--- a/demos/bio/server-conf.c
+++ b/demos/bio/server-conf.c
@@ -21,7 +21,7 @@
 #include <openssl/ssl.h>
 #include <openssl/conf.h>
 
-int main(int argc, char *argv[])
+int __cdecl main(int argc, char *argv[])
 {
     char *port = "*:4433";
     BIO *in = NULL;
diff --git a/demos/cms/cms_comp.c b/demos/cms/cms_comp.c
index 0d548f93ca..d11002dd80 100644
--- a/demos/cms/cms_comp.c
+++ b/demos/cms/cms_comp.c
@@ -12,7 +12,7 @@
 #include <openssl/cms.h>
 #include <openssl/err.h>
 
-int main(int argc, char **argv)
+int __cdecl main(int argc, char **argv)
 {
     BIO *in = NULL, *out = NULL;
     CMS_ContentInfo *cms = NULL;
diff --git a/demos/cms/cms_ddec.c b/demos/cms/cms_ddec.c
index 8f2e9aecb2..04e8e519f0 100644
--- a/demos/cms/cms_ddec.c
+++ b/demos/cms/cms_ddec.c
@@ -15,7 +15,7 @@
 #include <openssl/cms.h>
 #include <openssl/err.h>
 
-int main(int argc, char **argv)
+int __cdecl main(int argc, char **argv)
 {
     BIO *in = NULL, *out = NULL, *tbio = NULL, *dcont = NULL;
     X509 *rcert = NULL;
diff --git a/demos/cms/cms_dec.c b/demos/cms/cms_dec.c
index 4f9428b4e7..09bd72a002 100644
--- a/demos/cms/cms_dec.c
+++ b/demos/cms/cms_dec.c
@@ -12,7 +12,7 @@
 #include <openssl/cms.h>
 #include <openssl/err.h>
 
-int main(int argc, char **argv)
+int __cdecl main(int argc, char **argv)
 {
     BIO *in = NULL, *out = NULL, *tbio = NULL;
     X509 *rcert = NULL;
diff --git a/demos/cms/cms_denc.c b/demos/cms/cms_denc.c
index adba69b96d..62a73c390a 100644
--- a/demos/cms/cms_denc.c
+++ b/demos/cms/cms_denc.c
@@ -15,7 +15,7 @@
 #include <openssl/cms.h>
 #include <openssl/err.h>
 
-int main(int argc, char **argv)
+int __cdecl main(int argc, char **argv)
 {
     BIO *in = NULL, *out = NULL, *tbio = NULL, *dout = NULL;
     X509 *rcert = NULL;
diff --git a/demos/cms/cms_enc.c b/demos/cms/cms_enc.c
index 4d17d720c6..d9205aa679 100644
--- a/demos/cms/cms_enc.c
+++ b/demos/cms/cms_enc.c
@@ -12,7 +12,7 @@
 #include <openssl/cms.h>
 #include <openssl/err.h>
 
-int main(int argc, char **argv)
+int __cdecl main(int argc, char **argv)
 {
     BIO *in = NULL, *out = NULL, *tbio = NULL;
     X509 *rcert = NULL;
diff --git a/demos/cms/cms_sign.c b/demos/cms/cms_sign.c
index 15bd5b8dd9..8e1a1e2d98 100644
--- a/demos/cms/cms_sign.c
+++ b/demos/cms/cms_sign.c
@@ -12,7 +12,7 @@
 #include <openssl/cms.h>
 #include <openssl/err.h>
 
-int main(int argc, char **argv)
+int __cdecl main(int argc, char **argv)
 {
     BIO *in = NULL, *out = NULL, *tbio = NULL;
     X509 *scert = NULL;
diff --git a/demos/cms/cms_sign2.c b/demos/cms/cms_sign2.c
index 14ebf27775..e288b4b2cf 100644
--- a/demos/cms/cms_sign2.c
+++ b/demos/cms/cms_sign2.c
@@ -12,7 +12,7 @@
 #include <openssl/cms.h>
 #include <openssl/err.h>
 
-int main(int argc, char **argv)
+int __cdecl main(int argc, char **argv)
 {
     BIO *in = NULL, *out = NULL, *tbio = NULL;
     X509 *scert = NULL, *scert2 = NULL;
diff --git a/demos/cms/cms_uncomp.c b/demos/cms/cms_uncomp.c
index 3e3b4c4c6e..4251a09a77 100644
--- a/demos/cms/cms_uncomp.c
+++ b/demos/cms/cms_uncomp.c
@@ -12,7 +12,7 @@
 #include <openssl/cms.h>
 #include <openssl/err.h>
 
-int main(int argc, char **argv)
+int __cdecl main(int argc, char **argv)
 {
     BIO *in = NULL, *out = NULL;
     CMS_ContentInfo *cms = NULL;
diff --git a/demos/cms/cms_ver.c b/demos/cms/cms_ver.c
index 43c10e2513..b6d62a108a 100644
--- a/demos/cms/cms_ver.c
+++ b/demos/cms/cms_ver.c
@@ -12,7 +12,7 @@
 #include <openssl/cms.h>
 #include <openssl/err.h>
 
-int main(int argc, char **argv)
+int __cdecl main(int argc, char **argv)
 {
     BIO *in = NULL, *out = NULL, *tbio = NULL, *cont = NULL;
     X509_STORE *st = NULL;
diff --git a/demos/evp/aesccm.c b/demos/evp/aesccm.c
index cc4d0b5ee9..e06181d761 100644
--- a/demos/evp/aesccm.c
+++ b/demos/evp/aesccm.c
@@ -118,7 +118,7 @@ void aes_ccm_decrypt(void)
     EVP_CIPHER_CTX_free(ctx);
 }
 
-int main(int argc, char **argv)
+int __cdecl main(int argc, char **argv)
 {
     aes_ccm_encrypt();
     aes_ccm_decrypt();
diff --git a/demos/evp/aesgcm.c b/demos/evp/aesgcm.c
index 3cef27f991..420384af91 100644
--- a/demos/evp/aesgcm.c
+++ b/demos/evp/aesgcm.c
@@ -114,7 +114,7 @@ void aes_gcm_decrypt(void)
     EVP_CIPHER_CTX_free(ctx);
 }
 
-int main(int argc, char **argv)
+int __cdecl main(int argc, char **argv)
 {
     aes_gcm_encrypt();
     aes_gcm_decrypt();
diff --git a/demos/pkcs12/pkread.c b/demos/pkcs12/pkread.c
index e5f78f1b35..495bb16402 100644
--- a/demos/pkcs12/pkread.c
+++ b/demos/pkcs12/pkread.c
@@ -45,7 +45,7 @@ static char *find_friendly_name(PKCS12 *p12)
     return name;
 }
 
-int main(int argc, char **argv)
+int __cdecl main(int argc, char **argv)
 {
     FILE *fp;
     EVP_PKEY *pkey = NULL;
diff --git a/demos/pkcs12/pkwrite.c b/demos/pkcs12/pkwrite.c
index e14cf8327d..6fa4b99735 100644
--- a/demos/pkcs12/pkwrite.c
+++ b/demos/pkcs12/pkwrite.c
@@ -15,7 +15,7 @@
 
 /* Simple PKCS#12 file creator */
 
-int main(int argc, char **argv)
+int __cdecl main(int argc, char **argv)
 {
     FILE *fp;
     EVP_PKEY *pkey;
diff --git a/demos/smime/smdec.c b/demos/smime/smdec.c
index c4d1b090d9..3238f5bed5 100644
--- a/demos/smime/smdec.c
+++ b/demos/smime/smdec.c
@@ -12,7 +12,7 @@
 #include <openssl/pkcs7.h>
 #include <openssl/err.h>
 
-int main(int argc, char **argv)
+int __cdecl main(int argc, char **argv)
 {
     BIO *in = NULL, *out = NULL, *tbio = NULL;
     X509 *rcert = NULL;
diff --git a/demos/smime/smenc.c b/demos/smime/smenc.c
index 5d36e9a497..ec8107f7f8 100644
--- a/demos/smime/smenc.c
+++ b/demos/smime/smenc.c
@@ -12,7 +12,7 @@
 #include <openssl/pkcs7.h>
 #include <openssl/err.h>
 
-int main(int argc, char **argv)
+int __cdecl main(int argc, char **argv)
 {
     BIO *in = NULL, *out = NULL, *tbio = NULL;
     X509 *rcert = NULL;
diff --git a/demos/smime/smsign.c b/demos/smime/smsign.c
index ba0adb3974..3ccccfe2bb 100644
--- a/demos/smime/smsign.c
+++ b/demos/smime/smsign.c
@@ -12,7 +12,7 @@
 #include <openssl/pkcs7.h>
 #include <openssl/err.h>
 
-int main(int argc, char **argv)
+int __cdecl main(int argc, char **argv)
 {
     BIO *in = NULL, *out = NULL, *tbio = NULL;
     X509 *scert = NULL;
diff --git a/demos/smime/smsign2.c b/demos/smime/smsign2.c
index 2b7f45b294..80f8e3b518 100644
--- a/demos/smime/smsign2.c
+++ b/demos/smime/smsign2.c
@@ -12,7 +12,7 @@
 #include <openssl/pkcs7.h>
 #include <openssl/err.h>
 
-int main(int argc, char **argv)
+int __cdecl main(int argc, char **argv)
 {
     BIO *in = NULL, *out = NULL, *tbio = NULL;
     X509 *scert = NULL, *scert2 = NULL;
diff --git a/demos/smime/smver.c b/demos/smime/smver.c
index 75411c40d0..01cd21813f 100644
--- a/demos/smime/smver.c
+++ b/demos/smime/smver.c
@@ -12,7 +12,7 @@
 #include <openssl/pkcs7.h>
 #include <openssl/err.h>
 
-int main(int argc, char **argv)
+int __cdecl main(int argc, char **argv)
 {
     BIO *in = NULL, *out = NULL, *tbio = NULL, *cont = NULL;
     X509_STORE *st = NULL;
diff --git a/doc/man3/ASYNC_start_job.pod b/doc/man3/ASYNC_start_job.pod
index b06db76708..7aa6cac37e 100644
--- a/doc/man3/ASYNC_start_job.pod
+++ b/doc/man3/ASYNC_start_job.pod
@@ -244,7 +244,7 @@ The following example demonstrates how to use most of the core async APIs:
      return 1;
  }
 
- int main(void)
+ int __cdecl main(void)
  {
      ASYNC_JOB *job = NULL;
      ASYNC_WAIT_CTX *ctx = NULL;
diff --git a/doc/man3/EVP_DigestInit.pod b/doc/man3/EVP_DigestInit.pod
index 3e3e342297..bf10d3bb6f 100644
--- a/doc/man3/EVP_DigestInit.pod
+++ b/doc/man3/EVP_DigestInit.pod
@@ -313,7 +313,7 @@ digest name passed on the command line.
  #include <string.h>
  #include <openssl/evp.h>
 
- int main(int argc, char *argv[])
+ int __cdecl main(int argc, char *argv[])
  {
      EVP_MD_CTX *mdctx;
      const EVP_MD *md;
diff --git a/doc/man3/PKCS12_newpass.pod b/doc/man3/PKCS12_newpass.pod
index 5fc041bfbd..d8df52c083 100644
--- a/doc/man3/PKCS12_newpass.pod
+++ b/doc/man3/PKCS12_newpass.pod
@@ -45,7 +45,7 @@ the result to a new file.
  #include <openssl/err.h>
  #include <openssl/pkcs12.h>
 
- int main(int argc, char **argv)
+ int __cdecl main(int argc, char **argv)
  {
      FILE *fp;
      PKCS12 *p12;
diff --git a/engines/e_capi.c b/engines/e_capi.c
index 37202b81f3..7e466dc279 100644
--- a/engines/e_capi.c
+++ b/engines/e_capi.c
@@ -122,14 +122,14 @@ CAPI_KEY *capi_find_key(CAPI_CTX *ctx, const char *id);
 
 static EVP_PKEY *capi_load_privkey(ENGINE *eng, const char *key_id,
                                    UI_METHOD *ui_method, void *callback_data);
-static int capi_rsa_sign(int dtype, const unsigned char *m,
+static int __cdecl capi_rsa_sign(int dtype, const unsigned char *m,
                          unsigned int m_len, unsigned char *sigret,
                          unsigned int *siglen, const RSA *rsa);
-static int capi_rsa_priv_enc(int flen, const unsigned char *from,
+static int __cdecl capi_rsa_priv_enc(int flen, const unsigned char *from,
                              unsigned char *to, RSA *rsa, int padding);
-static int capi_rsa_priv_dec(int flen, const unsigned char *from,
+static int __cdecl capi_rsa_priv_dec(int flen, const unsigned char *from,
                              unsigned char *to, RSA *rsa, int padding);
-static int capi_rsa_free(RSA *rsa);
+static int __cdecl capi_rsa_free(RSA *rsa);
 
 # ifndef OPENSSL_NO_DSA
 static DSA_SIG *capi_dsa_do_sign(const unsigned char *digest, int dlen,
@@ -808,14 +808,14 @@ static EVP_PKEY *capi_load_privkey(ENGINE *eng, const char *key_id,
 
 /* CryptoAPI RSA operations */
 
-int capi_rsa_priv_enc(int flen, const unsigned char *from,
+int __cdecl capi_rsa_priv_enc(int flen, const unsigned char *from,
                       unsigned char *to, RSA *rsa, int padding)
 {
     CAPIerr(CAPI_F_CAPI_RSA_PRIV_ENC, CAPI_R_FUNCTION_NOT_SUPPORTED);
     return -1;
 }
 
-int capi_rsa_sign(int dtype, const unsigned char *m, unsigned int m_len,
+int __cdecl capi_rsa_sign(int dtype, const unsigned char *m, unsigned int m_len,
                   unsigned char *sigret, unsigned int *siglen, const RSA *rsa)
 {
     ALG_ID alg;
@@ -910,7 +910,7 @@ int capi_rsa_sign(int dtype, const unsigned char *m, unsigned int m_len,
     return ret;
 }
 
-int capi_rsa_priv_dec(int flen, const unsigned char *from,
+int __cdecl capi_rsa_priv_dec(int flen, const unsigned char *from,
                       unsigned char *to, RSA *rsa, int padding)
 {
     int i;
@@ -977,7 +977,7 @@ int capi_rsa_priv_dec(int flen, const unsigned char *from,
     return flen;
 }
 
-static int capi_rsa_free(RSA *rsa)
+static int __cdecl capi_rsa_free(RSA *rsa)
 {
     CAPI_KEY *capi_key;
     capi_key = RSA_get_ex_data(rsa, rsa_capi_idx);
diff --git a/fuzz/driver.c b/fuzz/driver.c
index 54d67de202..b9010d6987 100644
--- a/fuzz/driver.c
+++ b/fuzz/driver.c
@@ -32,7 +32,7 @@ int LLVMFuzzerTestOneInput(const uint8_t *buf, size_t len)
 
 #define BUF_SIZE 65536
 
-int main(int argc, char** argv)
+int __cdecl main(int argc, char** argv)
 {
     FuzzerInitialize(&argc, &argv);
 
diff --git a/fuzz/test-corpus.c b/fuzz/test-corpus.c
index 86be5337e1..13e2cae10d 100644
--- a/fuzz/test-corpus.c
+++ b/fuzz/test-corpus.c
@@ -58,7 +58,7 @@ static void testfile(const char *pathname)
     fclose(f);
 }
 
-int main(int argc, char **argv) {
+int __cdecl main(int argc, char **argv) {
     int n;
 
     FuzzerInitialize(&argc, &argv);
diff --git a/include/internal/err.h b/include/internal/err.h
index d46b8bdb29..6bad3f0cf3 100644
--- a/include/internal/err.h
+++ b/include/internal/err.h
@@ -10,6 +10,6 @@
 #ifndef INTERNAL_ERR_H
 # define INTERNAL_ERR_H
 
-void err_free_strings_int(void);
+void __cdecl err_free_strings_int(void);
 
 #endif
diff --git a/include/openssl/aes.h b/include/openssl/aes.h
index 245c552abd..6f78f11053 100644
--- a/include/openssl/aes.h
+++ b/include/openssl/aes.h
@@ -38,49 +38,49 @@ struct aes_key_st {
 };
 typedef struct aes_key_st AES_KEY;
 
-const char *AES_options(void);
+const char * __cdecl AES_options(void);
 
-int AES_set_encrypt_key(const unsigned char *userKey, const int bits,
+int __cdecl AES_set_encrypt_key(const unsigned char *userKey, const int bits,
                         AES_KEY *key);
-int AES_set_decrypt_key(const unsigned char *userKey, const int bits,
+int __cdecl AES_set_decrypt_key(const unsigned char *userKey, const int bits,
                         AES_KEY *key);
 
-void AES_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl AES_encrypt(const unsigned char *in, unsigned char *out,
                  const AES_KEY *key);
-void AES_decrypt(const unsigned char *in, unsigned char *out,
+void __cdecl AES_decrypt(const unsigned char *in, unsigned char *out,
                  const AES_KEY *key);
 
-void AES_ecb_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl AES_ecb_encrypt(const unsigned char *in, unsigned char *out,
                      const AES_KEY *key, const int enc);
-void AES_cbc_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl AES_cbc_encrypt(const unsigned char *in, unsigned char *out,
                      size_t length, const AES_KEY *key,
                      unsigned char *ivec, const int enc);
-void AES_cfb128_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl AES_cfb128_encrypt(const unsigned char *in, unsigned char *out,
                         size_t length, const AES_KEY *key,
                         unsigned char *ivec, int *num, const int enc);
-void AES_cfb1_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl AES_cfb1_encrypt(const unsigned char *in, unsigned char *out,
                       size_t length, const AES_KEY *key,
                       unsigned char *ivec, int *num, const int enc);
-void AES_cfb8_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl AES_cfb8_encrypt(const unsigned char *in, unsigned char *out,
                       size_t length, const AES_KEY *key,
                       unsigned char *ivec, int *num, const int enc);
-void AES_ofb128_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl AES_ofb128_encrypt(const unsigned char *in, unsigned char *out,
                         size_t length, const AES_KEY *key,
                         unsigned char *ivec, int *num);
 /* NB: the IV is _two_ blocks long */
-void AES_ige_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl AES_ige_encrypt(const unsigned char *in, unsigned char *out,
                      size_t length, const AES_KEY *key,
                      unsigned char *ivec, const int enc);
 /* NB: the IV is _four_ blocks long */
-void AES_bi_ige_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl AES_bi_ige_encrypt(const unsigned char *in, unsigned char *out,
                         size_t length, const AES_KEY *key,
                         const AES_KEY *key2, const unsigned char *ivec,
                         const int enc);
 
-int AES_wrap_key(AES_KEY *key, const unsigned char *iv,
+int __cdecl AES_wrap_key(AES_KEY *key, const unsigned char *iv,
                  unsigned char *out,
                  const unsigned char *in, unsigned int inlen);
-int AES_unwrap_key(AES_KEY *key, const unsigned char *iv,
+int __cdecl AES_unwrap_key(AES_KEY *key, const unsigned char *iv,
                    unsigned char *out,
                    const unsigned char *in, unsigned int inlen);
 
diff --git a/include/openssl/asn1.h b/include/openssl/asn1.h
index 9522eec18f..30c2a14d7a 100644
--- a/include/openssl/asn1.h
+++ b/include/openssl/asn1.h
@@ -228,25 +228,25 @@ typedef struct ASN1_VALUE_st ASN1_VALUE;
         DECLARE_ASN1_ENCODE_FUNCTIONS(type, itname, name)
 
 # define DECLARE_ASN1_ENCODE_FUNCTIONS(type, itname, name) \
-        type *d2i_##name(type **a, const unsigned char **in, long len); \
-        int i2d_##name(type *a, unsigned char **out); \
+        type * __cdecl d2i_##name(type **a, const unsigned char **in, long len); \
+        int __cdecl i2d_##name(type *a, unsigned char **out); \
         DECLARE_ASN1_ITEM(itname)
 
 # define DECLARE_ASN1_ENCODE_FUNCTIONS_const(type, name) \
-        type *d2i_##name(type **a, const unsigned char **in, long len); \
-        int i2d_##name(const type *a, unsigned char **out); \
+        type * __cdecl d2i_##name(type **a, const unsigned char **in, long len); \
+        int __cdecl i2d_##name(const type *a, unsigned char **out); \
         DECLARE_ASN1_ITEM(name)
 
 # define DECLARE_ASN1_NDEF_FUNCTION(name) \
-        int i2d_##name##_NDEF(name *a, unsigned char **out);
+        int __cdecl i2d_##name##_NDEF(name *a, unsigned char **out);
 
 # define DECLARE_ASN1_FUNCTIONS_const(name) \
         DECLARE_ASN1_ALLOC_FUNCTIONS(name) \
         DECLARE_ASN1_ENCODE_FUNCTIONS_const(name, name)
 
 # define DECLARE_ASN1_ALLOC_FUNCTIONS_name(type, name) \
-        type *name##_new(void); \
-        void name##_free(type *a);
+        type * __cdecl name##_new(void); \
+        void __cdecl name##_free(type *a);
 
 # define DECLARE_ASN1_PRINT_FUNCTION(stname) \
         DECLARE_ASN1_PRINT_FUNCTION_fname(stname, stname)
@@ -255,23 +255,23 @@ typedef struct ASN1_VALUE_st ASN1_VALUE;
         int fname##_print_ctx(BIO *out, stname *x, int indent, \
                                          const ASN1_PCTX *pctx);
 
-# define D2I_OF(type) type *(*)(type **,const unsigned char **,long)
-# define I2D_OF(type) int (*)(type *,unsigned char **)
-# define I2D_OF_const(type) int (*)(const type *,unsigned char **)
+# define D2I_OF(type) type *(__cdecl *)(type **,const unsigned char **,long)
+# define I2D_OF(type) int (__cdecl *)(type *,unsigned char **)
+# define I2D_OF_const(type) int (__cdecl *)(const type *,unsigned char **)
 
 # define CHECKED_D2I_OF(type, d2i) \
     ((d2i_of_void*) (1 ? d2i : ((D2I_OF(type))0)))
 # define CHECKED_I2D_OF(type, i2d) \
     ((i2d_of_void*) (1 ? i2d : ((I2D_OF(type))0)))
 # define CHECKED_NEW_OF(type, xnew) \
-    ((void *(*)(void)) (1 ? xnew : ((type *(*)(void))0)))
+    ((void *(__cdecl *)(void)) (1 ? xnew : ((type *(__cdecl *)(void))0)))
 # define CHECKED_PTR_OF(type, p) \
     ((void*) (1 ? p : (type*)0))
 # define CHECKED_PPTR_OF(type, p) \
     ((void**) (1 ? p : (type**)0))
 
-# define TYPEDEF_D2I_OF(type) typedef type *d2i_of_##type(type **,const unsigned char **,long)
-# define TYPEDEF_I2D_OF(type) typedef int i2d_of_##type(type *,unsigned char **)
+# define TYPEDEF_D2I_OF(type) typedef type * __cdecl d2i_of_##type(type **,const unsigned char **,long)
+# define TYPEDEF_I2D_OF(type) typedef int __cdecl i2d_of_##type(type *,unsigned char **)
 # define TYPEDEF_D2I2D_OF(type) TYPEDEF_D2I_OF(type); TYPEDEF_I2D_OF(type)
 
 TYPEDEF_D2I2D_OF(void);
@@ -517,87 +517,87 @@ typedef struct BIT_STRING_BITNAME_st {
 
 DECLARE_ASN1_FUNCTIONS_fname(ASN1_TYPE, ASN1_ANY, ASN1_TYPE)
 
-int ASN1_TYPE_get(const ASN1_TYPE *a);
-void ASN1_TYPE_set(ASN1_TYPE *a, int type, void *value);
-int ASN1_TYPE_set1(ASN1_TYPE *a, int type, const void *value);
-int ASN1_TYPE_cmp(const ASN1_TYPE *a, const ASN1_TYPE *b);
+int __cdecl ASN1_TYPE_get(const ASN1_TYPE *a);
+void __cdecl ASN1_TYPE_set(ASN1_TYPE *a, int type, void *value);
+int __cdecl ASN1_TYPE_set1(ASN1_TYPE *a, int type, const void *value);
+int __cdecl ASN1_TYPE_cmp(const ASN1_TYPE *a, const ASN1_TYPE *b);
 
-ASN1_TYPE *ASN1_TYPE_pack_sequence(const ASN1_ITEM *it, void *s, ASN1_TYPE **t);
-void *ASN1_TYPE_unpack_sequence(const ASN1_ITEM *it, const ASN1_TYPE *t);
+ASN1_TYPE * __cdecl ASN1_TYPE_pack_sequence(const ASN1_ITEM *it, void *s, ASN1_TYPE **t);
+void * __cdecl ASN1_TYPE_unpack_sequence(const ASN1_ITEM *it, const ASN1_TYPE *t);
 
-ASN1_OBJECT *ASN1_OBJECT_new(void);
-void ASN1_OBJECT_free(ASN1_OBJECT *a);
-int i2d_ASN1_OBJECT(const ASN1_OBJECT *a, unsigned char **pp);
-ASN1_OBJECT *d2i_ASN1_OBJECT(ASN1_OBJECT **a, const unsigned char **pp,
+ASN1_OBJECT * __cdecl ASN1_OBJECT_new(void);
+void __cdecl ASN1_OBJECT_free(ASN1_OBJECT *a);
+int __cdecl i2d_ASN1_OBJECT(const ASN1_OBJECT *a, unsigned char **pp);
+ASN1_OBJECT * __cdecl d2i_ASN1_OBJECT(ASN1_OBJECT **a, const unsigned char **pp,
                              long length);
 
 DECLARE_ASN1_ITEM(ASN1_OBJECT)
 
 DEFINE_STACK_OF(ASN1_OBJECT)
 
-ASN1_STRING *ASN1_STRING_new(void);
-void ASN1_STRING_free(ASN1_STRING *a);
-void ASN1_STRING_clear_free(ASN1_STRING *a);
-int ASN1_STRING_copy(ASN1_STRING *dst, const ASN1_STRING *str);
-ASN1_STRING *ASN1_STRING_dup(const ASN1_STRING *a);
-ASN1_STRING *ASN1_STRING_type_new(int type);
-int ASN1_STRING_cmp(const ASN1_STRING *a, const ASN1_STRING *b);
+ASN1_STRING * __cdecl ASN1_STRING_new(void);
+void __cdecl ASN1_STRING_free(ASN1_STRING *a);
+void __cdecl ASN1_STRING_clear_free(ASN1_STRING *a);
+int __cdecl ASN1_STRING_copy(ASN1_STRING *dst, const ASN1_STRING *str);
+ASN1_STRING * __cdecl ASN1_STRING_dup(const ASN1_STRING *a);
+ASN1_STRING * __cdecl ASN1_STRING_type_new(int type);
+int __cdecl ASN1_STRING_cmp(const ASN1_STRING *a, const ASN1_STRING *b);
   /*
    * Since this is used to store all sorts of things, via macros, for now,
    * make its data void *
    */
-int ASN1_STRING_set(ASN1_STRING *str, const void *data, int len);
-void ASN1_STRING_set0(ASN1_STRING *str, void *data, int len);
-int ASN1_STRING_length(const ASN1_STRING *x);
-void ASN1_STRING_length_set(ASN1_STRING *x, int n);
-int ASN1_STRING_type(const ASN1_STRING *x);
+int __cdecl ASN1_STRING_set(ASN1_STRING *str, const void *data, int len);
+void __cdecl ASN1_STRING_set0(ASN1_STRING *str, void *data, int len);
+int __cdecl ASN1_STRING_length(const ASN1_STRING *x);
+void __cdecl ASN1_STRING_length_set(ASN1_STRING *x, int n);
+int __cdecl ASN1_STRING_type(const ASN1_STRING *x);
 DEPRECATEDIN_1_1_0(unsigned char *ASN1_STRING_data(ASN1_STRING *x))
-const unsigned char *ASN1_STRING_get0_data(const ASN1_STRING *x);
+const unsigned char * __cdecl ASN1_STRING_get0_data(const ASN1_STRING *x);
 
 DECLARE_ASN1_FUNCTIONS(ASN1_BIT_STRING)
-int ASN1_BIT_STRING_set(ASN1_BIT_STRING *a, unsigned char *d, int length);
-int ASN1_BIT_STRING_set_bit(ASN1_BIT_STRING *a, int n, int value);
-int ASN1_BIT_STRING_get_bit(const ASN1_BIT_STRING *a, int n);
-int ASN1_BIT_STRING_check(const ASN1_BIT_STRING *a,
+int __cdecl ASN1_BIT_STRING_set(ASN1_BIT_STRING *a, unsigned char *d, int length);
+int __cdecl ASN1_BIT_STRING_set_bit(ASN1_BIT_STRING *a, int n, int value);
+int __cdecl ASN1_BIT_STRING_get_bit(const ASN1_BIT_STRING *a, int n);
+int __cdecl ASN1_BIT_STRING_check(const ASN1_BIT_STRING *a,
                           const unsigned char *flags, int flags_len);
 
-int ASN1_BIT_STRING_name_print(BIO *out, ASN1_BIT_STRING *bs,
+int __cdecl ASN1_BIT_STRING_name_print(BIO *out, ASN1_BIT_STRING *bs,
                                BIT_STRING_BITNAME *tbl, int indent);
-int ASN1_BIT_STRING_num_asc(const char *name, BIT_STRING_BITNAME *tbl);
-int ASN1_BIT_STRING_set_asc(ASN1_BIT_STRING *bs, const char *name, int value,
+int __cdecl ASN1_BIT_STRING_num_asc(const char *name, BIT_STRING_BITNAME *tbl);
+int __cdecl ASN1_BIT_STRING_set_asc(ASN1_BIT_STRING *bs, const char *name, int value,
                             BIT_STRING_BITNAME *tbl);
 
 DECLARE_ASN1_FUNCTIONS(ASN1_INTEGER)
-ASN1_INTEGER *d2i_ASN1_UINTEGER(ASN1_INTEGER **a, const unsigned char **pp,
+ASN1_INTEGER * __cdecl d2i_ASN1_UINTEGER(ASN1_INTEGER **a, const unsigned char **pp,
                                 long length);
-ASN1_INTEGER *ASN1_INTEGER_dup(const ASN1_INTEGER *x);
-int ASN1_INTEGER_cmp(const ASN1_INTEGER *x, const ASN1_INTEGER *y);
+ASN1_INTEGER * __cdecl ASN1_INTEGER_dup(const ASN1_INTEGER *x);
+int __cdecl ASN1_INTEGER_cmp(const ASN1_INTEGER *x, const ASN1_INTEGER *y);
 
 DECLARE_ASN1_FUNCTIONS(ASN1_ENUMERATED)
 
-int ASN1_UTCTIME_check(const ASN1_UTCTIME *a);
-ASN1_UTCTIME *ASN1_UTCTIME_set(ASN1_UTCTIME *s, time_t t);
-ASN1_UTCTIME *ASN1_UTCTIME_adj(ASN1_UTCTIME *s, time_t t,
+int __cdecl ASN1_UTCTIME_check(const ASN1_UTCTIME *a);
+ASN1_UTCTIME * __cdecl ASN1_UTCTIME_set(ASN1_UTCTIME *s, time_t t);
+ASN1_UTCTIME * __cdecl ASN1_UTCTIME_adj(ASN1_UTCTIME *s, time_t t,
                                int offset_day, long offset_sec);
-int ASN1_UTCTIME_set_string(ASN1_UTCTIME *s, const char *str);
-int ASN1_UTCTIME_cmp_time_t(const ASN1_UTCTIME *s, time_t t);
+int __cdecl ASN1_UTCTIME_set_string(ASN1_UTCTIME *s, const char *str);
+int __cdecl ASN1_UTCTIME_cmp_time_t(const ASN1_UTCTIME *s, time_t t);
 
-int ASN1_GENERALIZEDTIME_check(const ASN1_GENERALIZEDTIME *a);
-ASN1_GENERALIZEDTIME *ASN1_GENERALIZEDTIME_set(ASN1_GENERALIZEDTIME *s,
+int __cdecl ASN1_GENERALIZEDTIME_check(const ASN1_GENERALIZEDTIME *a);
+ASN1_GENERALIZEDTIME * __cdecl ASN1_GENERALIZEDTIME_set(ASN1_GENERALIZEDTIME *s,
                                                time_t t);
-ASN1_GENERALIZEDTIME *ASN1_GENERALIZEDTIME_adj(ASN1_GENERALIZEDTIME *s,
+ASN1_GENERALIZEDTIME * __cdecl ASN1_GENERALIZEDTIME_adj(ASN1_GENERALIZEDTIME *s,
                                                time_t t, int offset_day,
                                                long offset_sec);
-int ASN1_GENERALIZEDTIME_set_string(ASN1_GENERALIZEDTIME *s, const char *str);
+int __cdecl ASN1_GENERALIZEDTIME_set_string(ASN1_GENERALIZEDTIME *s, const char *str);
 
-int ASN1_TIME_diff(int *pday, int *psec,
+int __cdecl ASN1_TIME_diff(int *pday, int *psec,
                    const ASN1_TIME *from, const ASN1_TIME *to);
 
 DECLARE_ASN1_FUNCTIONS(ASN1_OCTET_STRING)
-ASN1_OCTET_STRING *ASN1_OCTET_STRING_dup(const ASN1_OCTET_STRING *a);
-int ASN1_OCTET_STRING_cmp(const ASN1_OCTET_STRING *a,
+ASN1_OCTET_STRING * __cdecl ASN1_OCTET_STRING_dup(const ASN1_OCTET_STRING *a);
+int __cdecl ASN1_OCTET_STRING_cmp(const ASN1_OCTET_STRING *a,
                           const ASN1_OCTET_STRING *b);
-int ASN1_OCTET_STRING_set(ASN1_OCTET_STRING *str, const unsigned char *data,
+int __cdecl ASN1_OCTET_STRING_set(ASN1_OCTET_STRING *str, const unsigned char *data,
                           int len);
 
 DECLARE_ASN1_FUNCTIONS(ASN1_VISIBLESTRING)
@@ -606,8 +606,8 @@ DECLARE_ASN1_FUNCTIONS(ASN1_UTF8STRING)
 DECLARE_ASN1_FUNCTIONS(ASN1_NULL)
 DECLARE_ASN1_FUNCTIONS(ASN1_BMPSTRING)
 
-int UTF8_getc(const unsigned char *str, int len, unsigned long *val);
-int UTF8_putc(unsigned char *str, int len, unsigned long value);
+int __cdecl UTF8_getc(const unsigned char *str, int len, unsigned long *val);
+int __cdecl UTF8_putc(unsigned char *str, int len, unsigned long value);
 
 DECLARE_ASN1_FUNCTIONS_name(ASN1_STRING, ASN1_PRINTABLE)
 
@@ -623,69 +623,69 @@ DECLARE_ASN1_FUNCTIONS(ASN1_TIME)
 
 DECLARE_ASN1_ITEM(ASN1_OCTET_STRING_NDEF)
 
-ASN1_TIME *ASN1_TIME_set(ASN1_TIME *s, time_t t);
-ASN1_TIME *ASN1_TIME_adj(ASN1_TIME *s, time_t t,
+ASN1_TIME * __cdecl ASN1_TIME_set(ASN1_TIME *s, time_t t);
+ASN1_TIME * __cdecl ASN1_TIME_adj(ASN1_TIME *s, time_t t,
                          int offset_day, long offset_sec);
-int ASN1_TIME_check(const ASN1_TIME *t);
-ASN1_GENERALIZEDTIME *ASN1_TIME_to_generalizedtime(const ASN1_TIME *t,
+int __cdecl ASN1_TIME_check(const ASN1_TIME *t);
+ASN1_GENERALIZEDTIME * __cdecl ASN1_TIME_to_generalizedtime(const ASN1_TIME *t,
                                                    ASN1_GENERALIZEDTIME **out);
-int ASN1_TIME_set_string(ASN1_TIME *s, const char *str);
-int ASN1_TIME_set_string_X509(ASN1_TIME *s, const char *str);
-int ASN1_TIME_to_tm(const ASN1_TIME *s, struct tm *tm);
-int ASN1_TIME_normalize(ASN1_TIME *s);
-int ASN1_TIME_cmp_time_t(const ASN1_TIME *s, time_t t);
-int ASN1_TIME_compare(const ASN1_TIME *a, const ASN1_TIME *b);
-
-int i2a_ASN1_INTEGER(BIO *bp, const ASN1_INTEGER *a);
-int a2i_ASN1_INTEGER(BIO *bp, ASN1_INTEGER *bs, char *buf, int size);
-int i2a_ASN1_ENUMERATED(BIO *bp, const ASN1_ENUMERATED *a);
-int a2i_ASN1_ENUMERATED(BIO *bp, ASN1_ENUMERATED *bs, char *buf, int size);
-int i2a_ASN1_OBJECT(BIO *bp, const ASN1_OBJECT *a);
-int a2i_ASN1_STRING(BIO *bp, ASN1_STRING *bs, char *buf, int size);
-int i2a_ASN1_STRING(BIO *bp, const ASN1_STRING *a, int type);
-int i2t_ASN1_OBJECT(char *buf, int buf_len, const ASN1_OBJECT *a);
-
-int a2d_ASN1_OBJECT(unsigned char *out, int olen, const char *buf, int num);
-ASN1_OBJECT *ASN1_OBJECT_create(int nid, unsigned char *data, int len,
+int __cdecl ASN1_TIME_set_string(ASN1_TIME *s, const char *str);
+int __cdecl ASN1_TIME_set_string_X509(ASN1_TIME *s, const char *str);
+int __cdecl ASN1_TIME_to_tm(const ASN1_TIME *s, struct tm *tm);
+int __cdecl ASN1_TIME_normalize(ASN1_TIME *s);
+int __cdecl ASN1_TIME_cmp_time_t(const ASN1_TIME *s, time_t t);
+int __cdecl ASN1_TIME_compare(const ASN1_TIME *a, const ASN1_TIME *b);
+
+int __cdecl i2a_ASN1_INTEGER(BIO *bp, const ASN1_INTEGER *a);
+int __cdecl a2i_ASN1_INTEGER(BIO *bp, ASN1_INTEGER *bs, char *buf, int size);
+int __cdecl i2a_ASN1_ENUMERATED(BIO *bp, const ASN1_ENUMERATED *a);
+int __cdecl a2i_ASN1_ENUMERATED(BIO *bp, ASN1_ENUMERATED *bs, char *buf, int size);
+int __cdecl i2a_ASN1_OBJECT(BIO *bp, const ASN1_OBJECT *a);
+int __cdecl a2i_ASN1_STRING(BIO *bp, ASN1_STRING *bs, char *buf, int size);
+int __cdecl i2a_ASN1_STRING(BIO *bp, const ASN1_STRING *a, int type);
+int __cdecl i2t_ASN1_OBJECT(char *buf, int buf_len, const ASN1_OBJECT *a);
+
+int __cdecl a2d_ASN1_OBJECT(unsigned char *out, int olen, const char *buf, int num);
+ASN1_OBJECT * __cdecl ASN1_OBJECT_create(int nid, unsigned char *data, int len,
                                 const char *sn, const char *ln);
 
-int ASN1_INTEGER_get_int64(int64_t *pr, const ASN1_INTEGER *a);
-int ASN1_INTEGER_set_int64(ASN1_INTEGER *a, int64_t r);
-int ASN1_INTEGER_get_uint64(uint64_t *pr, const ASN1_INTEGER *a);
-int ASN1_INTEGER_set_uint64(ASN1_INTEGER *a, uint64_t r);
+int __cdecl ASN1_INTEGER_get_int64(int64_t *pr, const ASN1_INTEGER *a);
+int __cdecl ASN1_INTEGER_set_int64(ASN1_INTEGER *a, int64_t r);
+int __cdecl ASN1_INTEGER_get_uint64(uint64_t *pr, const ASN1_INTEGER *a);
+int __cdecl ASN1_INTEGER_set_uint64(ASN1_INTEGER *a, uint64_t r);
 
-int ASN1_INTEGER_set(ASN1_INTEGER *a, long v);
-long ASN1_INTEGER_get(const ASN1_INTEGER *a);
-ASN1_INTEGER *BN_to_ASN1_INTEGER(const BIGNUM *bn, ASN1_INTEGER *ai);
-BIGNUM *ASN1_INTEGER_to_BN(const ASN1_INTEGER *ai, BIGNUM *bn);
+int __cdecl ASN1_INTEGER_set(ASN1_INTEGER *a, long v);
+long __cdecl ASN1_INTEGER_get(const ASN1_INTEGER *a);
+ASN1_INTEGER * __cdecl BN_to_ASN1_INTEGER(const BIGNUM *bn, ASN1_INTEGER *ai);
+BIGNUM * __cdecl ASN1_INTEGER_to_BN(const ASN1_INTEGER *ai, BIGNUM *bn);
 
-int ASN1_ENUMERATED_get_int64(int64_t *pr, const ASN1_ENUMERATED *a);
-int ASN1_ENUMERATED_set_int64(ASN1_ENUMERATED *a, int64_t r);
+int __cdecl ASN1_ENUMERATED_get_int64(int64_t *pr, const ASN1_ENUMERATED *a);
+int __cdecl ASN1_ENUMERATED_set_int64(ASN1_ENUMERATED *a, int64_t r);
 
 
-int ASN1_ENUMERATED_set(ASN1_ENUMERATED *a, long v);
-long ASN1_ENUMERATED_get(const ASN1_ENUMERATED *a);
-ASN1_ENUMERATED *BN_to_ASN1_ENUMERATED(const BIGNUM *bn, ASN1_ENUMERATED *ai);
-BIGNUM *ASN1_ENUMERATED_to_BN(const ASN1_ENUMERATED *ai, BIGNUM *bn);
+int __cdecl ASN1_ENUMERATED_set(ASN1_ENUMERATED *a, long v);
+long __cdecl ASN1_ENUMERATED_get(const ASN1_ENUMERATED *a);
+ASN1_ENUMERATED * __cdecl BN_to_ASN1_ENUMERATED(const BIGNUM *bn, ASN1_ENUMERATED *ai);
+BIGNUM * __cdecl ASN1_ENUMERATED_to_BN(const ASN1_ENUMERATED *ai, BIGNUM *bn);
 
 /* General */
 /* given a string, return the correct type, max is the maximum length */
-int ASN1_PRINTABLE_type(const unsigned char *s, int max);
+int __cdecl ASN1_PRINTABLE_type(const unsigned char *s, int max);
 
-unsigned long ASN1_tag2bit(int tag);
+unsigned long __cdecl ASN1_tag2bit(int tag);
 
 /* SPECIALS */
-int ASN1_get_object(const unsigned char **pp, long *plength, int *ptag,
+int __cdecl ASN1_get_object(const unsigned char **pp, long *plength, int *ptag,
                     int *pclass, long omax);
-int ASN1_check_infinite_end(unsigned char **p, long len);
-int ASN1_const_check_infinite_end(const unsigned char **p, long len);
-void ASN1_put_object(unsigned char **pp, int constructed, int length,
+int __cdecl ASN1_check_infinite_end(unsigned char **p, long len);
+int __cdecl ASN1_const_check_infinite_end(const unsigned char **p, long len);
+void __cdecl ASN1_put_object(unsigned char **pp, int constructed, int length,
                      int tag, int xclass);
-int ASN1_put_eoc(unsigned char **pp);
-int ASN1_object_size(int constructed, int length, int tag);
+int __cdecl ASN1_put_eoc(unsigned char **pp);
+int __cdecl ASN1_object_size(int constructed, int length, int tag);
 
 /* Used to implement other functions */
-void *ASN1_dup(i2d_of_void *i2d, d2i_of_void *d2i, void *x);
+void * __cdecl ASN1_dup(i2d_of_void *i2d, d2i_of_void *d2i, void *x);
 
 # define ASN1_dup_of(type,i2d,d2i,x) \
     ((type*)ASN1_dup(CHECKED_I2D_OF(type, i2d), \
@@ -697,7 +697,7 @@ void *ASN1_dup(i2d_of_void *i2d, d2i_of_void *d2i, void *x);
                      CHECKED_D2I_OF(type, d2i), \
                      CHECKED_PTR_OF(const type, x)))
 
-void *ASN1_item_dup(const ASN1_ITEM *it, void *x);
+void * __cdecl ASN1_item_dup(const ASN1_ITEM *it, void *x);
 
 /* ASN1 alloc/free macros for when a type is only used internally */
 
@@ -706,16 +706,16 @@ void *ASN1_item_dup(const ASN1_ITEM *it, void *x);
                 ASN1_item_free(CHECKED_PTR_OF(type, x), ASN1_ITEM_rptr(type))
 
 # ifndef OPENSSL_NO_STDIO
-void *ASN1_d2i_fp(void *(*xnew) (void), d2i_of_void *d2i, FILE *in, void **x);
+void * __cdecl ASN1_d2i_fp(void *(__cdecl *xnew) (void), d2i_of_void *d2i, FILE *in, void **x);
 
 #  define ASN1_d2i_fp_of(type,xnew,d2i,in,x) \
-    ((type*)ASN1_d2i_fp(CHECKED_NEW_OF(type, xnew), \
+    ((type *)ASN1_d2i_fp(CHECKED_NEW_OF(type, xnew), \
                         CHECKED_D2I_OF(type, d2i), \
                         in, \
                         CHECKED_PPTR_OF(type, x)))
 
-void *ASN1_item_d2i_fp(const ASN1_ITEM *it, FILE *in, void *x);
-int ASN1_i2d_fp(i2d_of_void *i2d, FILE *out, void *x);
+void * __cdecl ASN1_item_d2i_fp(const ASN1_ITEM *it, FILE *in, void *x);
+int __cdecl ASN1_i2d_fp(i2d_of_void *i2d, FILE *out, void *x);
 
 #  define ASN1_i2d_fp_of(type,i2d,out,x) \
     (ASN1_i2d_fp(CHECKED_I2D_OF(type, i2d), \
@@ -727,22 +727,22 @@ int ASN1_i2d_fp(i2d_of_void *i2d, FILE *out, void *x);
                  out, \
                  CHECKED_PTR_OF(const type, x)))
 
-int ASN1_item_i2d_fp(const ASN1_ITEM *it, FILE *out, void *x);
-int ASN1_STRING_print_ex_fp(FILE *fp, const ASN1_STRING *str, unsigned long flags);
+int __cdecl ASN1_item_i2d_fp(const ASN1_ITEM *it, FILE *out, void *x);
+int __cdecl ASN1_STRING_print_ex_fp(FILE *fp, const ASN1_STRING *str, unsigned long flags);
 # endif
 
-int ASN1_STRING_to_UTF8(unsigned char **out, const ASN1_STRING *in);
+int __cdecl ASN1_STRING_to_UTF8(unsigned char **out, const ASN1_STRING *in);
 
-void *ASN1_d2i_bio(void *(*xnew) (void), d2i_of_void *d2i, BIO *in, void **x);
+void * __cdecl ASN1_d2i_bio(void * (__cdecl *xnew) (void), d2i_of_void *d2i, BIO *in, void **x);
 
 #  define ASN1_d2i_bio_of(type,xnew,d2i,in,x) \
-    ((type*)ASN1_d2i_bio( CHECKED_NEW_OF(type, xnew), \
+    ((type*) ASN1_d2i_bio( CHECKED_NEW_OF(type, xnew), \
                           CHECKED_D2I_OF(type, d2i), \
                           in, \
                           CHECKED_PPTR_OF(type, x)))
 
-void *ASN1_item_d2i_bio(const ASN1_ITEM *it, BIO *in, void *x);
-int ASN1_i2d_bio(i2d_of_void *i2d, BIO *out, unsigned char *x);
+void * __cdecl ASN1_item_d2i_bio(const ASN1_ITEM *it, BIO *in, void *x);
+int __cdecl ASN1_i2d_bio(i2d_of_void *i2d, BIO *out, unsigned char *x);
 
 #  define ASN1_i2d_bio_of(type,i2d,out,x) \
     (ASN1_i2d_bio(CHECKED_I2D_OF(type, i2d), \
@@ -754,69 +754,69 @@ int ASN1_i2d_bio(i2d_of_void *i2d, BIO *out, unsigned char *x);
                   out, \
                   CHECKED_PTR_OF(const type, x)))
 
-int ASN1_item_i2d_bio(const ASN1_ITEM *it, BIO *out, void *x);
-int ASN1_UTCTIME_print(BIO *fp, const ASN1_UTCTIME *a);
-int ASN1_GENERALIZEDTIME_print(BIO *fp, const ASN1_GENERALIZEDTIME *a);
-int ASN1_TIME_print(BIO *fp, const ASN1_TIME *a);
-int ASN1_STRING_print(BIO *bp, const ASN1_STRING *v);
-int ASN1_STRING_print_ex(BIO *out, const ASN1_STRING *str, unsigned long flags);
-int ASN1_buf_print(BIO *bp, const unsigned char *buf, size_t buflen, int off);
-int ASN1_bn_print(BIO *bp, const char *number, const BIGNUM *num,
+int __cdecl ASN1_item_i2d_bio(const ASN1_ITEM *it, BIO *out, void *x);
+int __cdecl ASN1_UTCTIME_print(BIO *fp, const ASN1_UTCTIME *a);
+int __cdecl ASN1_GENERALIZEDTIME_print(BIO *fp, const ASN1_GENERALIZEDTIME *a);
+int __cdecl ASN1_TIME_print(BIO *fp, const ASN1_TIME *a);
+int __cdecl ASN1_STRING_print(BIO *bp, const ASN1_STRING *v);
+int __cdecl ASN1_STRING_print_ex(BIO *out, const ASN1_STRING *str, unsigned long flags);
+int __cdecl ASN1_buf_print(BIO *bp, const unsigned char *buf, size_t buflen, int off);
+int __cdecl ASN1_bn_print(BIO *bp, const char *number, const BIGNUM *num,
                   unsigned char *buf, int off);
-int ASN1_parse(BIO *bp, const unsigned char *pp, long len, int indent);
-int ASN1_parse_dump(BIO *bp, const unsigned char *pp, long len, int indent,
+int __cdecl ASN1_parse(BIO *bp, const unsigned char *pp, long len, int indent);
+int __cdecl ASN1_parse_dump(BIO *bp, const unsigned char *pp, long len, int indent,
                     int dump);
-const char *ASN1_tag2str(int tag);
+const char * __cdecl ASN1_tag2str(int tag);
 
 /* Used to load and write Netscape format cert */
 
-int ASN1_UNIVERSALSTRING_to_string(ASN1_UNIVERSALSTRING *s);
+int __cdecl ASN1_UNIVERSALSTRING_to_string(ASN1_UNIVERSALSTRING *s);
 
-int ASN1_TYPE_set_octetstring(ASN1_TYPE *a, unsigned char *data, int len);
-int ASN1_TYPE_get_octetstring(const ASN1_TYPE *a, unsigned char *data, int max_len);
-int ASN1_TYPE_set_int_octetstring(ASN1_TYPE *a, long num,
+int __cdecl ASN1_TYPE_set_octetstring(ASN1_TYPE *a, unsigned char *data, int len);
+int __cdecl ASN1_TYPE_get_octetstring(const ASN1_TYPE *a, unsigned char *data, int max_len);
+int __cdecl ASN1_TYPE_set_int_octetstring(ASN1_TYPE *a, long num,
                                   unsigned char *data, int len);
-int ASN1_TYPE_get_int_octetstring(const ASN1_TYPE *a, long *num,
+int __cdecl ASN1_TYPE_get_int_octetstring(const ASN1_TYPE *a, long *num,
                                   unsigned char *data, int max_len);
 
-void *ASN1_item_unpack(const ASN1_STRING *oct, const ASN1_ITEM *it);
+void * __cdecl ASN1_item_unpack(const ASN1_STRING *oct, const ASN1_ITEM *it);
 
-ASN1_STRING *ASN1_item_pack(void *obj, const ASN1_ITEM *it,
+ASN1_STRING * __cdecl ASN1_item_pack(void *obj, const ASN1_ITEM *it,
                             ASN1_OCTET_STRING **oct);
 
-void ASN1_STRING_set_default_mask(unsigned long mask);
-int ASN1_STRING_set_default_mask_asc(const char *p);
-unsigned long ASN1_STRING_get_default_mask(void);
-int ASN1_mbstring_copy(ASN1_STRING **out, const unsigned char *in, int len,
+void __cdecl ASN1_STRING_set_default_mask(unsigned long mask);
+int __cdecl ASN1_STRING_set_default_mask_asc(const char *p);
+unsigned long __cdecl ASN1_STRING_get_default_mask(void);
+int __cdecl ASN1_mbstring_copy(ASN1_STRING **out, const unsigned char *in, int len,
                        int inform, unsigned long mask);
-int ASN1_mbstring_ncopy(ASN1_STRING **out, const unsigned char *in, int len,
+int __cdecl ASN1_mbstring_ncopy(ASN1_STRING **out, const unsigned char *in, int len,
                         int inform, unsigned long mask,
                         long minsize, long maxsize);
 
-ASN1_STRING *ASN1_STRING_set_by_NID(ASN1_STRING **out,
+ASN1_STRING * __cdecl ASN1_STRING_set_by_NID(ASN1_STRING **out,
                                     const unsigned char *in, int inlen,
                                     int inform, int nid);
-ASN1_STRING_TABLE *ASN1_STRING_TABLE_get(int nid);
-int ASN1_STRING_TABLE_add(int, long, long, unsigned long, unsigned long);
-void ASN1_STRING_TABLE_cleanup(void);
+ASN1_STRING_TABLE * __cdecl ASN1_STRING_TABLE_get(int nid);
+int __cdecl ASN1_STRING_TABLE_add(int, long, long, unsigned long, unsigned long);
+void __cdecl ASN1_STRING_TABLE_cleanup(void);
 
 /* ASN1 template functions */
 
 /* Old API compatible functions */
-ASN1_VALUE *ASN1_item_new(const ASN1_ITEM *it);
-void ASN1_item_free(ASN1_VALUE *val, const ASN1_ITEM *it);
-ASN1_VALUE *ASN1_item_d2i(ASN1_VALUE **val, const unsigned char **in,
+ASN1_VALUE * __cdecl ASN1_item_new(const ASN1_ITEM *it);
+void __cdecl ASN1_item_free(ASN1_VALUE *val, const ASN1_ITEM *it);
+ASN1_VALUE * __cdecl ASN1_item_d2i(ASN1_VALUE **val, const unsigned char **in,
                           long len, const ASN1_ITEM *it);
-int ASN1_item_i2d(ASN1_VALUE *val, unsigned char **out, const ASN1_ITEM *it);
-int ASN1_item_ndef_i2d(ASN1_VALUE *val, unsigned char **out,
+int __cdecl ASN1_item_i2d(ASN1_VALUE *val, unsigned char **out, const ASN1_ITEM *it);
+int __cdecl ASN1_item_ndef_i2d(ASN1_VALUE *val, unsigned char **out,
                        const ASN1_ITEM *it);
 
-void ASN1_add_oid_module(void);
-void ASN1_add_stable_module(void);
+void __cdecl ASN1_add_oid_module(void);
+void __cdecl ASN1_add_stable_module(void);
 
-ASN1_TYPE *ASN1_generate_nconf(const char *str, CONF *nconf);
-ASN1_TYPE *ASN1_generate_v3(const char *str, X509V3_CTX *cnf);
-int ASN1_str2mask(const char *str, unsigned long *pmask);
+ASN1_TYPE * __cdecl ASN1_generate_nconf(const char *str, CONF *nconf);
+ASN1_TYPE * __cdecl ASN1_generate_v3(const char *str, X509V3_CTX *cnf);
+int __cdecl ASN1_str2mask(const char *str, unsigned long *pmask);
 
 /* ASN1 Print flags */
 
@@ -839,46 +839,46 @@ int ASN1_str2mask(const char *str, unsigned long *pmask);
 /* Don't show structure name even at top level */
 # define ASN1_PCTX_FLAGS_NO_STRUCT_NAME          0x100
 
-int ASN1_item_print(BIO *out, ASN1_VALUE *ifld, int indent,
+int __cdecl ASN1_item_print(BIO *out, ASN1_VALUE *ifld, int indent,
                     const ASN1_ITEM *it, const ASN1_PCTX *pctx);
-ASN1_PCTX *ASN1_PCTX_new(void);
-void ASN1_PCTX_free(ASN1_PCTX *p);
-unsigned long ASN1_PCTX_get_flags(const ASN1_PCTX *p);
-void ASN1_PCTX_set_flags(ASN1_PCTX *p, unsigned long flags);
-unsigned long ASN1_PCTX_get_nm_flags(const ASN1_PCTX *p);
-void ASN1_PCTX_set_nm_flags(ASN1_PCTX *p, unsigned long flags);
-unsigned long ASN1_PCTX_get_cert_flags(const ASN1_PCTX *p);
-void ASN1_PCTX_set_cert_flags(ASN1_PCTX *p, unsigned long flags);
-unsigned long ASN1_PCTX_get_oid_flags(const ASN1_PCTX *p);
-void ASN1_PCTX_set_oid_flags(ASN1_PCTX *p, unsigned long flags);
-unsigned long ASN1_PCTX_get_str_flags(const ASN1_PCTX *p);
-void ASN1_PCTX_set_str_flags(ASN1_PCTX *p, unsigned long flags);
-
-ASN1_SCTX *ASN1_SCTX_new(int (*scan_cb) (ASN1_SCTX *ctx));
-void ASN1_SCTX_free(ASN1_SCTX *p);
-const ASN1_ITEM *ASN1_SCTX_get_item(ASN1_SCTX *p);
-const ASN1_TEMPLATE *ASN1_SCTX_get_template(ASN1_SCTX *p);
-unsigned long ASN1_SCTX_get_flags(ASN1_SCTX *p);
-void ASN1_SCTX_set_app_data(ASN1_SCTX *p, void *data);
-void *ASN1_SCTX_get_app_data(ASN1_SCTX *p);
-
-const BIO_METHOD *BIO_f_asn1(void);
-
-BIO *BIO_new_NDEF(BIO *out, ASN1_VALUE *val, const ASN1_ITEM *it);
-
-int i2d_ASN1_bio_stream(BIO *out, ASN1_VALUE *val, BIO *in, int flags,
+ASN1_PCTX * __cdecl ASN1_PCTX_new(void);
+void __cdecl ASN1_PCTX_free(ASN1_PCTX *p);
+unsigned long __cdecl ASN1_PCTX_get_flags(const ASN1_PCTX *p);
+void __cdecl ASN1_PCTX_set_flags(ASN1_PCTX *p, unsigned long flags);
+unsigned long __cdecl ASN1_PCTX_get_nm_flags(const ASN1_PCTX *p);
+void __cdecl ASN1_PCTX_set_nm_flags(ASN1_PCTX *p, unsigned long flags);
+unsigned long __cdecl ASN1_PCTX_get_cert_flags(const ASN1_PCTX *p);
+void __cdecl ASN1_PCTX_set_cert_flags(ASN1_PCTX *p, unsigned long flags);
+unsigned long __cdecl ASN1_PCTX_get_oid_flags(const ASN1_PCTX *p);
+void __cdecl ASN1_PCTX_set_oid_flags(ASN1_PCTX *p, unsigned long flags);
+unsigned long __cdecl ASN1_PCTX_get_str_flags(const ASN1_PCTX *p);
+void __cdecl ASN1_PCTX_set_str_flags(ASN1_PCTX *p, unsigned long flags);
+
+ASN1_SCTX * __cdecl ASN1_SCTX_new(int (*scan_cb) (ASN1_SCTX *ctx));
+void __cdecl ASN1_SCTX_free(ASN1_SCTX *p);
+const ASN1_ITEM * __cdecl ASN1_SCTX_get_item(ASN1_SCTX *p);
+const ASN1_TEMPLATE * __cdecl ASN1_SCTX_get_template(ASN1_SCTX *p);
+unsigned long __cdecl ASN1_SCTX_get_flags(ASN1_SCTX *p);
+void __cdecl ASN1_SCTX_set_app_data(ASN1_SCTX *p, void *data);
+void * __cdecl ASN1_SCTX_get_app_data(ASN1_SCTX *p);
+
+const BIO_METHOD * __cdecl BIO_f_asn1(void);
+
+BIO * __cdecl BIO_new_NDEF(BIO *out, ASN1_VALUE *val, const ASN1_ITEM *it);
+
+int __cdecl i2d_ASN1_bio_stream(BIO *out, ASN1_VALUE *val, BIO *in, int flags,
                         const ASN1_ITEM *it);
-int PEM_write_bio_ASN1_stream(BIO *out, ASN1_VALUE *val, BIO *in, int flags,
+int __cdecl PEM_write_bio_ASN1_stream(BIO *out, ASN1_VALUE *val, BIO *in, int flags,
                               const char *hdr, const ASN1_ITEM *it);
-int SMIME_write_ASN1(BIO *bio, ASN1_VALUE *val, BIO *data, int flags,
+int __cdecl SMIME_write_ASN1(BIO *bio, ASN1_VALUE *val, BIO *data, int flags,
                      int ctype_nid, int econt_nid,
                      STACK_OF(X509_ALGOR) *mdalgs, const ASN1_ITEM *it);
-ASN1_VALUE *SMIME_read_ASN1(BIO *bio, BIO **bcont, const ASN1_ITEM *it);
-int SMIME_crlf_copy(BIO *in, BIO *out, int flags);
-int SMIME_text(BIO *in, BIO *out);
+ASN1_VALUE * __cdecl SMIME_read_ASN1(BIO *bio, BIO **bcont, const ASN1_ITEM *it);
+int __cdecl SMIME_crlf_copy(BIO *in, BIO *out, int flags);
+int __cdecl SMIME_text(BIO *in, BIO *out);
 
-const ASN1_ITEM *ASN1_ITEM_lookup(const char *name);
-const ASN1_ITEM *ASN1_ITEM_get(size_t i);
+const ASN1_ITEM * __cdecl ASN1_ITEM_lookup(const char *name);
+const ASN1_ITEM * __cdecl ASN1_ITEM_get(size_t i);
 
 # ifdef  __cplusplus
 }
diff --git a/include/openssl/asn1err.h b/include/openssl/asn1err.h
index faed5a5518..10d838047e 100644
--- a/include/openssl/asn1err.h
+++ b/include/openssl/asn1err.h
@@ -18,7 +18,7 @@
 # ifdef  __cplusplus
 extern "C"
 # endif
-int ERR_load_ASN1_strings(void);
+int __cdecl ERR_load_ASN1_strings(void);
 
 /*
  * ASN1 function codes.
diff --git a/include/openssl/asn1t.h b/include/openssl/asn1t.h
index a450ba0d9d..4c086992ef 100644
--- a/include/openssl/asn1t.h
+++ b/include/openssl/asn1t.h
@@ -818,11 +818,11 @@ typedef struct ASN1_STREAM_ARG_st {
         }
 
 # define IMPLEMENT_ASN1_ALLOC_FUNCTIONS_fname(stname, itname, fname) \
-        stname *fname##_new(void) \
+        stname * __cdecl fname##_new(void) \
         { \
                 return (stname *)ASN1_item_new(ASN1_ITEM_rptr(itname)); \
         } \
-        void fname##_free(stname *a) \
+        void __cdecl fname##_free(stname *a) \
         { \
                 ASN1_item_free((ASN1_VALUE *)a, ASN1_ITEM_rptr(itname)); \
         }
@@ -832,17 +832,17 @@ typedef struct ASN1_STREAM_ARG_st {
         IMPLEMENT_ASN1_ALLOC_FUNCTIONS_fname(stname, itname, fname)
 
 # define IMPLEMENT_ASN1_ENCODE_FUNCTIONS_fname(stname, itname, fname) \
-        stname *d2i_##fname(stname **a, const unsigned char **in, long len) \
+        stname * __cdecl d2i_##fname(stname **a, const unsigned char **in, long len) \
         { \
                 return (stname *)ASN1_item_d2i((ASN1_VALUE **)a, in, len, ASN1_ITEM_rptr(itname));\
         } \
-        int i2d_##fname(stname *a, unsigned char **out) \
+        int __cdecl i2d_##fname(stname *a, unsigned char **out) \
         { \
                 return ASN1_item_i2d((ASN1_VALUE *)a, out, ASN1_ITEM_rptr(itname));\
         }
 
 # define IMPLEMENT_ASN1_NDEF_FUNCTION(stname) \
-        int i2d_##stname##_NDEF(stname *a, unsigned char **out) \
+        int __cdecl i2d_##stname##_NDEF(stname *a, unsigned char **out) \
         { \
                 return ASN1_item_ndef_i2d((ASN1_VALUE *)a, out, ASN1_ITEM_rptr(stname));\
         }
@@ -865,17 +865,17 @@ typedef struct ASN1_STREAM_ARG_st {
  * constification is done.
  */
 # define IMPLEMENT_ASN1_ENCODE_FUNCTIONS_const_fname(stname, itname, fname) \
-        stname *d2i_##fname(stname **a, const unsigned char **in, long len) \
+        stname * __cdecl d2i_##fname(stname **a, const unsigned char **in, long len) \
         { \
                 return (stname *)ASN1_item_d2i((ASN1_VALUE **)a, in, len, ASN1_ITEM_rptr(itname));\
         } \
-        int i2d_##fname(const stname *a, unsigned char **out) \
+        int __cdecl i2d_##fname(const stname *a, unsigned char **out) \
         { \
                 return ASN1_item_i2d((ASN1_VALUE *)a, out, ASN1_ITEM_rptr(itname));\
         }
 
 # define IMPLEMENT_ASN1_DUP_FUNCTION(stname) \
-        stname * stname##_dup(stname *x) \
+        stname * __cdecl stname##_dup(stname *x) \
         { \
         return ASN1_item_dup(ASN1_ITEM_rptr(stname), x); \
         }
@@ -929,14 +929,14 @@ DEFINE_STACK_OF(ASN1_VALUE)
 
 /* Functions used internally by the ASN1 code */
 
-int ASN1_item_ex_new(ASN1_VALUE **pval, const ASN1_ITEM *it);
-void ASN1_item_ex_free(ASN1_VALUE **pval, const ASN1_ITEM *it);
+int __cdecl ASN1_item_ex_new(ASN1_VALUE **pval, const ASN1_ITEM *it);
+void __cdecl ASN1_item_ex_free(ASN1_VALUE **pval, const ASN1_ITEM *it);
 
-int ASN1_item_ex_d2i(ASN1_VALUE **pval, const unsigned char **in, long len,
+int __cdecl ASN1_item_ex_d2i(ASN1_VALUE **pval, const unsigned char **in, long len,
                      const ASN1_ITEM *it, int tag, int aclass, char opt,
                      ASN1_TLC *ctx);
 
-int ASN1_item_ex_i2d(ASN1_VALUE **pval, unsigned char **out,
+int __cdecl ASN1_item_ex_i2d(ASN1_VALUE **pval, unsigned char **out,
                      const ASN1_ITEM *it, int tag, int aclass);
 
 #ifdef  __cplusplus
diff --git a/include/openssl/async.h b/include/openssl/async.h
index 7052b89052..5cb71527ce 100644
--- a/include/openssl/async.h
+++ b/include/openssl/async.h
@@ -37,37 +37,37 @@ typedef struct async_wait_ctx_st ASYNC_WAIT_CTX;
 #define ASYNC_PAUSE    2
 #define ASYNC_FINISH   3
 
-int ASYNC_init_thread(size_t max_size, size_t init_size);
-void ASYNC_cleanup_thread(void);
+int __cdecl ASYNC_init_thread(size_t max_size, size_t init_size);
+void __cdecl ASYNC_cleanup_thread(void);
 
 #ifdef OSSL_ASYNC_FD
-ASYNC_WAIT_CTX *ASYNC_WAIT_CTX_new(void);
-void ASYNC_WAIT_CTX_free(ASYNC_WAIT_CTX *ctx);
-int ASYNC_WAIT_CTX_set_wait_fd(ASYNC_WAIT_CTX *ctx, const void *key,
+ASYNC_WAIT_CTX * __cdecl ASYNC_WAIT_CTX_new(void);
+void __cdecl ASYNC_WAIT_CTX_free(ASYNC_WAIT_CTX *ctx);
+int __cdecl ASYNC_WAIT_CTX_set_wait_fd(ASYNC_WAIT_CTX *ctx, const void *key,
                                OSSL_ASYNC_FD fd,
                                void *custom_data,
                                void (*cleanup)(ASYNC_WAIT_CTX *, const void *,
                                                OSSL_ASYNC_FD, void *));
-int ASYNC_WAIT_CTX_get_fd(ASYNC_WAIT_CTX *ctx, const void *key,
+int __cdecl ASYNC_WAIT_CTX_get_fd(ASYNC_WAIT_CTX *ctx, const void *key,
                         OSSL_ASYNC_FD *fd, void **custom_data);
-int ASYNC_WAIT_CTX_get_all_fds(ASYNC_WAIT_CTX *ctx, OSSL_ASYNC_FD *fd,
+int __cdecl ASYNC_WAIT_CTX_get_all_fds(ASYNC_WAIT_CTX *ctx, OSSL_ASYNC_FD *fd,
                                size_t *numfds);
-int ASYNC_WAIT_CTX_get_changed_fds(ASYNC_WAIT_CTX *ctx, OSSL_ASYNC_FD *addfd,
+int __cdecl ASYNC_WAIT_CTX_get_changed_fds(ASYNC_WAIT_CTX *ctx, OSSL_ASYNC_FD *addfd,
                                    size_t *numaddfds, OSSL_ASYNC_FD *delfd,
                                    size_t *numdelfds);
-int ASYNC_WAIT_CTX_clear_fd(ASYNC_WAIT_CTX *ctx, const void *key);
+int __cdecl ASYNC_WAIT_CTX_clear_fd(ASYNC_WAIT_CTX *ctx, const void *key);
 #endif
 
-int ASYNC_is_capable(void);
+int __cdecl ASYNC_is_capable(void);
 
-int ASYNC_start_job(ASYNC_JOB **job, ASYNC_WAIT_CTX *ctx, int *ret,
+int __cdecl ASYNC_start_job(ASYNC_JOB **job, ASYNC_WAIT_CTX *ctx, int *ret,
                     int (*func)(void *), void *args, size_t size);
-int ASYNC_pause_job(void);
+int __cdecl ASYNC_pause_job(void);
 
-ASYNC_JOB *ASYNC_get_current_job(void);
-ASYNC_WAIT_CTX *ASYNC_get_wait_ctx(ASYNC_JOB *job);
-void ASYNC_block_pause(void);
-void ASYNC_unblock_pause(void);
+ASYNC_JOB * __cdecl ASYNC_get_current_job(void);
+ASYNC_WAIT_CTX * __cdecl ASYNC_get_wait_ctx(ASYNC_JOB *job);
+void __cdecl ASYNC_block_pause(void);
+void __cdecl ASYNC_unblock_pause(void);
 
 
 # ifdef  __cplusplus
diff --git a/include/openssl/asyncerr.h b/include/openssl/asyncerr.h
index 91afbbb2f5..d404cafb75 100644
--- a/include/openssl/asyncerr.h
+++ b/include/openssl/asyncerr.h
@@ -18,7 +18,7 @@
 # ifdef  __cplusplus
 extern "C"
 # endif
-int ERR_load_ASYNC_strings(void);
+int __cdecl ERR_load_ASYNC_strings(void);
 
 /*
  * ASYNC function codes.
diff --git a/include/openssl/bio.h b/include/openssl/bio.h
index e1fddfb796..4adb76d7e3 100644
--- a/include/openssl/bio.h
+++ b/include/openssl/bio.h
@@ -173,10 +173,10 @@ extern "C" {
 typedef union bio_addr_st BIO_ADDR;
 typedef struct bio_addrinfo_st BIO_ADDRINFO;
 
-int BIO_get_new_index(void);
-void BIO_set_flags(BIO *b, int flags);
-int BIO_test_flags(const BIO *b, int flags);
-void BIO_clear_flags(BIO *b, int flags);
+int __cdecl BIO_get_new_index(void);
+void __cdecl BIO_set_flags(BIO *b, int flags);
+int __cdecl BIO_test_flags(const BIO *b, int flags);
+void __cdecl BIO_clear_flags(BIO *b, int flags);
 
 # define BIO_get_flags(b) BIO_test_flags(b, ~(0x0))
 # define BIO_set_retry_special(b) \
@@ -232,24 +232,24 @@ void BIO_clear_flags(BIO *b, int flags);
 # define BIO_cb_pre(a)   (!((a)&BIO_CB_RETURN))
 # define BIO_cb_post(a)  ((a)&BIO_CB_RETURN)
 
-typedef long (*BIO_callback_fn)(BIO *b, int oper, const char *argp, int argi,
+typedef long (__cdecl *BIO_callback_fn)(BIO *b, int oper, const char *argp, int argi,
                                 long argl, long ret);
-typedef long (*BIO_callback_fn_ex)(BIO *b, int oper, const char *argp,
+typedef long (__cdecl *BIO_callback_fn_ex)(BIO *b, int oper, const char *argp,
                                    size_t len, int argi,
                                    long argl, int ret, size_t *processed);
-BIO_callback_fn BIO_get_callback(const BIO *b);
-void BIO_set_callback(BIO *b, BIO_callback_fn callback);
+BIO_callback_fn __cdecl BIO_get_callback(const BIO *b);
+void __cdecl BIO_set_callback(BIO *b, BIO_callback_fn callback);
 
-BIO_callback_fn_ex BIO_get_callback_ex(const BIO *b);
-void BIO_set_callback_ex(BIO *b, BIO_callback_fn_ex callback);
+BIO_callback_fn_ex __cdecl BIO_get_callback_ex(const BIO *b);
+void __cdecl BIO_set_callback_ex(BIO *b, BIO_callback_fn_ex callback);
 
-char *BIO_get_callback_arg(const BIO *b);
-void BIO_set_callback_arg(BIO *b, char *arg);
+char * __cdecl BIO_get_callback_arg(const BIO *b);
+void __cdecl BIO_set_callback_arg(BIO *b, char *arg);
 
 typedef struct bio_method_st BIO_METHOD;
 
-const char *BIO_method_name(const BIO *b);
-int BIO_method_type(const BIO *b);
+const char * __cdecl BIO_method_name(const BIO *b);
+int __cdecl BIO_method_type(const BIO *b);
 
 typedef int BIO_info_cb(BIO *, int, int);
 typedef BIO_info_cb bio_info_cb;  /* backward compatibility */
@@ -483,8 +483,8 @@ int BIO_read_filename(BIO *b, const char *name);
 # define BIO_pending(b)          (int)BIO_ctrl(b,BIO_CTRL_PENDING,0,NULL)
 # define BIO_wpending(b)         (int)BIO_ctrl(b,BIO_CTRL_WPENDING,0,NULL)
 /* ...pending macros have inappropriate return type */
-size_t BIO_ctrl_pending(BIO *b);
-size_t BIO_ctrl_wpending(BIO *b);
+size_t __cdecl BIO_ctrl_pending(BIO *b);
+size_t __cdecl BIO_ctrl_wpending(BIO *b);
 # define BIO_flush(b)            (int)BIO_ctrl(b,BIO_CTRL_FLUSH,0,NULL)
 # define BIO_get_info_callback(b,cbp) (int)BIO_ctrl(b,BIO_CTRL_GET_CALLBACK,0, \
                                                    cbp)
@@ -503,9 +503,9 @@ size_t BIO_ctrl_wpending(BIO *b);
 /* macros with inappropriate type -- but ...pending macros use int too: */
 # define BIO_get_write_guarantee(b) (int)BIO_ctrl(b,BIO_C_GET_WRITE_GUARANTEE,0,NULL)
 # define BIO_get_read_request(b)    (int)BIO_ctrl(b,BIO_C_GET_READ_REQUEST,0,NULL)
-size_t BIO_ctrl_get_write_guarantee(BIO *b);
-size_t BIO_ctrl_get_read_request(BIO *b);
-int BIO_ctrl_reset_read_request(BIO *b);
+size_t __cdecl BIO_ctrl_get_write_guarantee(BIO *b);
+size_t __cdecl BIO_ctrl_get_read_request(BIO *b);
+int __cdecl BIO_ctrl_reset_read_request(BIO *b);
 
 /* ctrl macros for dgram */
 # define BIO_ctrl_dgram_connect(b,peer)  \
@@ -525,162 +525,162 @@ int BIO_ctrl_reset_read_request(BIO *b);
 
 #define BIO_get_ex_new_index(l, p, newf, dupf, freef) \
     CRYPTO_get_ex_new_index(CRYPTO_EX_INDEX_BIO, l, p, newf, dupf, freef)
-int BIO_set_ex_data(BIO *bio, int idx, void *data);
-void *BIO_get_ex_data(BIO *bio, int idx);
-uint64_t BIO_number_read(BIO *bio);
-uint64_t BIO_number_written(BIO *bio);
+int __cdecl BIO_set_ex_data(BIO *bio, int idx, void *data);
+void * __cdecl BIO_get_ex_data(BIO *bio, int idx);
+uint64_t __cdecl BIO_number_read(BIO *bio);
+uint64_t __cdecl BIO_number_written(BIO *bio);
 
 /* For BIO_f_asn1() */
-int BIO_asn1_set_prefix(BIO *b, asn1_ps_func *prefix,
+int __cdecl BIO_asn1_set_prefix(BIO *b, asn1_ps_func *prefix,
                         asn1_ps_func *prefix_free);
-int BIO_asn1_get_prefix(BIO *b, asn1_ps_func **pprefix,
+int __cdecl BIO_asn1_get_prefix(BIO *b, asn1_ps_func **pprefix,
                         asn1_ps_func **pprefix_free);
-int BIO_asn1_set_suffix(BIO *b, asn1_ps_func *suffix,
+int __cdecl BIO_asn1_set_suffix(BIO *b, asn1_ps_func *suffix,
                         asn1_ps_func *suffix_free);
-int BIO_asn1_get_suffix(BIO *b, asn1_ps_func **psuffix,
+int __cdecl BIO_asn1_get_suffix(BIO *b, asn1_ps_func **psuffix,
                         asn1_ps_func **psuffix_free);
 
-const BIO_METHOD *BIO_s_file(void);
-BIO *BIO_new_file(const char *filename, const char *mode);
+const BIO_METHOD * __cdecl BIO_s_file(void);
+BIO * __cdecl BIO_new_file(const char *filename, const char *mode);
 # ifndef OPENSSL_NO_STDIO
-BIO *BIO_new_fp(FILE *stream, int close_flag);
+BIO * __cdecl BIO_new_fp(FILE *stream, int close_flag);
 # endif
-BIO *BIO_new(const BIO_METHOD *type);
-int BIO_free(BIO *a);
-void BIO_set_data(BIO *a, void *ptr);
-void *BIO_get_data(BIO *a);
-void BIO_set_init(BIO *a, int init);
-int BIO_get_init(BIO *a);
-void BIO_set_shutdown(BIO *a, int shut);
-int BIO_get_shutdown(BIO *a);
-void BIO_vfree(BIO *a);
-int BIO_up_ref(BIO *a);
-int BIO_read(BIO *b, void *data, int dlen);
-int BIO_read_ex(BIO *b, void *data, size_t dlen, size_t *readbytes);
-int BIO_gets(BIO *bp, char *buf, int size);
-int BIO_write(BIO *b, const void *data, int dlen);
-int BIO_write_ex(BIO *b, const void *data, size_t dlen, size_t *written);
-int BIO_puts(BIO *bp, const char *buf);
-int BIO_indent(BIO *b, int indent, int max);
-long BIO_ctrl(BIO *bp, int cmd, long larg, void *parg);
-long BIO_callback_ctrl(BIO *b, int cmd, BIO_info_cb *fp);
-void *BIO_ptr_ctrl(BIO *bp, int cmd, long larg);
-long BIO_int_ctrl(BIO *bp, int cmd, long larg, int iarg);
-BIO *BIO_push(BIO *b, BIO *append);
-BIO *BIO_pop(BIO *b);
-void BIO_free_all(BIO *a);
-BIO *BIO_find_type(BIO *b, int bio_type);
-BIO *BIO_next(BIO *b);
-void BIO_set_next(BIO *b, BIO *next);
-BIO *BIO_get_retry_BIO(BIO *bio, int *reason);
-int BIO_get_retry_reason(BIO *bio);
-void BIO_set_retry_reason(BIO *bio, int reason);
-BIO *BIO_dup_chain(BIO *in);
-
-int BIO_nread0(BIO *bio, char **buf);
-int BIO_nread(BIO *bio, char **buf, int num);
-int BIO_nwrite0(BIO *bio, char **buf);
-int BIO_nwrite(BIO *bio, char **buf, int num);
-
-long BIO_debug_callback(BIO *bio, int cmd, const char *argp, int argi,
+BIO * __cdecl BIO_new(const BIO_METHOD *type);
+int __cdecl BIO_free(BIO *a);
+void __cdecl BIO_set_data(BIO *a, void *ptr);
+void * __cdecl BIO_get_data(BIO *a);
+void __cdecl BIO_set_init(BIO *a, int init);
+int __cdecl BIO_get_init(BIO *a);
+void __cdecl BIO_set_shutdown(BIO *a, int shut);
+int __cdecl BIO_get_shutdown(BIO *a);
+void __cdecl BIO_vfree(BIO *a);
+int __cdecl BIO_up_ref(BIO *a);
+int __cdecl BIO_read(BIO *b, void *data, int dlen);
+int __cdecl BIO_read_ex(BIO *b, void *data, size_t dlen, size_t *readbytes);
+int __cdecl BIO_gets(BIO *bp, char *buf, int size);
+int __cdecl BIO_write(BIO *b, const void *data, int dlen);
+int __cdecl BIO_write_ex(BIO *b, const void *data, size_t dlen, size_t *written);
+int __cdecl BIO_puts(BIO *bp, const char *buf);
+int __cdecl BIO_indent(BIO *b, int indent, int max);
+long __cdecl BIO_ctrl(BIO *bp, int cmd, long larg, void *parg);
+long __cdecl BIO_callback_ctrl(BIO *b, int cmd, BIO_info_cb *fp);
+void * __cdecl BIO_ptr_ctrl(BIO *bp, int cmd, long larg);
+long __cdecl BIO_int_ctrl(BIO *bp, int cmd, long larg, int iarg);
+BIO * __cdecl BIO_push(BIO *b, BIO *append);
+BIO * __cdecl BIO_pop(BIO *b);
+void __cdecl BIO_free_all(BIO *a);
+BIO *__cdecl BIO_find_type(BIO *b, int bio_type);
+BIO * __cdecl BIO_next(BIO *b);
+void __cdecl BIO_set_next(BIO *b, BIO *next);
+BIO * __cdecl BIO_get_retry_BIO(BIO *bio, int *reason);
+int __cdecl BIO_get_retry_reason(BIO *bio);
+void __cdecl BIO_set_retry_reason(BIO *bio, int reason);
+BIO * __cdecl BIO_dup_chain(BIO *in);
+
+int __cdecl BIO_nread0(BIO *bio, char **buf);
+int __cdecl BIO_nread(BIO *bio, char **buf, int num);
+int __cdecl BIO_nwrite0(BIO *bio, char **buf);
+int __cdecl BIO_nwrite(BIO *bio, char **buf, int num);
+
+long __cdecl BIO_debug_callback(BIO *bio, int cmd, const char *argp, int argi,
                         long argl, long ret);
 
-const BIO_METHOD *BIO_s_mem(void);
-const BIO_METHOD *BIO_s_secmem(void);
-BIO *BIO_new_mem_buf(const void *buf, int len);
+const BIO_METHOD * __cdecl BIO_s_mem(void);
+const BIO_METHOD * __cdecl BIO_s_secmem(void);
+BIO * __cdecl BIO_new_mem_buf(const void *buf, int len);
 # ifndef OPENSSL_NO_SOCK
-const BIO_METHOD *BIO_s_socket(void);
-const BIO_METHOD *BIO_s_connect(void);
-const BIO_METHOD *BIO_s_accept(void);
+const BIO_METHOD * __cdecl BIO_s_socket(void);
+const BIO_METHOD * __cdecl BIO_s_connect(void);
+const BIO_METHOD * __cdecl BIO_s_accept(void);
 # endif
-const BIO_METHOD *BIO_s_fd(void);
-const BIO_METHOD *BIO_s_log(void);
-const BIO_METHOD *BIO_s_bio(void);
-const BIO_METHOD *BIO_s_null(void);
-const BIO_METHOD *BIO_f_null(void);
-const BIO_METHOD *BIO_f_buffer(void);
-const BIO_METHOD *BIO_f_linebuffer(void);
-const BIO_METHOD *BIO_f_nbio_test(void);
+const BIO_METHOD * __cdecl BIO_s_fd(void);
+const BIO_METHOD * __cdecl BIO_s_log(void);
+const BIO_METHOD * __cdecl BIO_s_bio(void);
+const BIO_METHOD * __cdecl BIO_s_null(void);
+const BIO_METHOD * __cdecl BIO_f_null(void);
+const BIO_METHOD * __cdecl BIO_f_buffer(void);
+const BIO_METHOD * __cdecl BIO_f_linebuffer(void);
+const BIO_METHOD * __cdecl BIO_f_nbio_test(void);
 # ifndef OPENSSL_NO_DGRAM
-const BIO_METHOD *BIO_s_datagram(void);
-int BIO_dgram_non_fatal_error(int error);
-BIO *BIO_new_dgram(int fd, int close_flag);
+const BIO_METHOD * __cdecl BIO_s_datagram(void);
+int __cdecl BIO_dgram_non_fatal_error(int error);
+BIO * __cdecl BIO_new_dgram(int fd, int close_flag);
 #  ifndef OPENSSL_NO_SCTP
-const BIO_METHOD *BIO_s_datagram_sctp(void);
-BIO *BIO_new_dgram_sctp(int fd, int close_flag);
-int BIO_dgram_is_sctp(BIO *bio);
-int BIO_dgram_sctp_notification_cb(BIO *b,
+const BIO_METHOD * __cdecl BIO_s_datagram_sctp(void);
+BIO * __cdecl BIO_new_dgram_sctp(int fd, int close_flag);
+int __cdecl BIO_dgram_is_sctp(BIO *bio);
+int __cdecl BIO_dgram_sctp_notification_cb(BIO *b,
                                    void (*handle_notifications) (BIO *bio,
                                                                  void *context,
                                                                  void *buf),
                                    void *context);
-int BIO_dgram_sctp_wait_for_dry(BIO *b);
-int BIO_dgram_sctp_msg_waiting(BIO *b);
+int __cdecl BIO_dgram_sctp_wait_for_dry(BIO *b);
+int __cdecl BIO_dgram_sctp_msg_waiting(BIO *b);
 #  endif
 # endif
 
 # ifndef OPENSSL_NO_SOCK
-int BIO_sock_should_retry(int i);
-int BIO_sock_non_fatal_error(int error);
+int __cdecl BIO_sock_should_retry(int i);
+int __cdecl BIO_sock_non_fatal_error(int error);
 # endif
 
-int BIO_fd_should_retry(int i);
-int BIO_fd_non_fatal_error(int error);
-int BIO_dump_cb(int (*cb) (const void *data, size_t len, void *u),
+int __cdecl BIO_fd_should_retry(int i);
+int __cdecl BIO_fd_non_fatal_error(int error);
+int __cdecl BIO_dump_cb(int (*cb) (const void *data, size_t len, void *u),
                 void *u, const char *s, int len);
-int BIO_dump_indent_cb(int (*cb) (const void *data, size_t len, void *u),
+int __cdecl BIO_dump_indent_cb(int (*cb) (const void *data, size_t len, void *u),
                        void *u, const char *s, int len, int indent);
-int BIO_dump(BIO *b, const char *bytes, int len);
-int BIO_dump_indent(BIO *b, const char *bytes, int len, int indent);
+int __cdecl BIO_dump(BIO *b, const char *bytes, int len);
+int __cdecl BIO_dump_indent(BIO *b, const char *bytes, int len, int indent);
 # ifndef OPENSSL_NO_STDIO
-int BIO_dump_fp(FILE *fp, const char *s, int len);
-int BIO_dump_indent_fp(FILE *fp, const char *s, int len, int indent);
+int __cdecl BIO_dump_fp(FILE *fp, const char *s, int len);
+int __cdecl BIO_dump_indent_fp(FILE *fp, const char *s, int len, int indent);
 # endif
-int BIO_hex_string(BIO *out, int indent, int width, unsigned char *data,
+int __cdecl BIO_hex_string(BIO *out, int indent, int width, unsigned char *data,
                    int datalen);
 
 # ifndef OPENSSL_NO_SOCK
-BIO_ADDR *BIO_ADDR_new(void);
-int BIO_ADDR_rawmake(BIO_ADDR *ap, int family,
+BIO_ADDR * __cdecl BIO_ADDR_new(void);
+int __cdecl BIO_ADDR_rawmake(BIO_ADDR *ap, int family,
                      const void *where, size_t wherelen, unsigned short port);
-void BIO_ADDR_free(BIO_ADDR *);
-void BIO_ADDR_clear(BIO_ADDR *ap);
-int BIO_ADDR_family(const BIO_ADDR *ap);
-int BIO_ADDR_rawaddress(const BIO_ADDR *ap, void *p, size_t *l);
-unsigned short BIO_ADDR_rawport(const BIO_ADDR *ap);
-char *BIO_ADDR_hostname_string(const BIO_ADDR *ap, int numeric);
-char *BIO_ADDR_service_string(const BIO_ADDR *ap, int numeric);
-char *BIO_ADDR_path_string(const BIO_ADDR *ap);
-
-const BIO_ADDRINFO *BIO_ADDRINFO_next(const BIO_ADDRINFO *bai);
-int BIO_ADDRINFO_family(const BIO_ADDRINFO *bai);
-int BIO_ADDRINFO_socktype(const BIO_ADDRINFO *bai);
-int BIO_ADDRINFO_protocol(const BIO_ADDRINFO *bai);
-const BIO_ADDR *BIO_ADDRINFO_address(const BIO_ADDRINFO *bai);
-void BIO_ADDRINFO_free(BIO_ADDRINFO *bai);
+void __cdecl BIO_ADDR_free(BIO_ADDR *);
+void __cdecl BIO_ADDR_clear(BIO_ADDR *ap);
+int __cdecl BIO_ADDR_family(const BIO_ADDR *ap);
+int __cdecl BIO_ADDR_rawaddress(const BIO_ADDR *ap, void *p, size_t *l);
+unsigned short __cdecl BIO_ADDR_rawport(const BIO_ADDR *ap);
+char * __cdecl BIO_ADDR_hostname_string(const BIO_ADDR *ap, int numeric);
+char * __cdecl BIO_ADDR_service_string(const BIO_ADDR *ap, int numeric);
+char * __cdecl BIO_ADDR_path_string(const BIO_ADDR *ap);
+
+const BIO_ADDRINFO * __cdecl BIO_ADDRINFO_next(const BIO_ADDRINFO *bai);
+int __cdecl BIO_ADDRINFO_family(const BIO_ADDRINFO *bai);
+int __cdecl BIO_ADDRINFO_socktype(const BIO_ADDRINFO *bai);
+int __cdecl BIO_ADDRINFO_protocol(const BIO_ADDRINFO *bai);
+const BIO_ADDR * __cdecl BIO_ADDRINFO_address(const BIO_ADDRINFO *bai);
+void __cdecl BIO_ADDRINFO_free(BIO_ADDRINFO *bai);
 
 enum BIO_hostserv_priorities {
     BIO_PARSE_PRIO_HOST, BIO_PARSE_PRIO_SERV
 };
-int BIO_parse_hostserv(const char *hostserv, char **host, char **service,
+int __cdecl BIO_parse_hostserv(const char *hostserv, char **host, char **service,
                        enum BIO_hostserv_priorities hostserv_prio);
 enum BIO_lookup_type {
     BIO_LOOKUP_CLIENT, BIO_LOOKUP_SERVER
 };
-int BIO_lookup(const char *host, const char *service,
+int __cdecl BIO_lookup(const char *host, const char *service,
                enum BIO_lookup_type lookup_type,
                int family, int socktype, BIO_ADDRINFO **res);
-int BIO_lookup_ex(const char *host, const char *service,
+int __cdecl BIO_lookup_ex(const char *host, const char *service,
                   int lookup_type, int family, int socktype, int protocol,
                   BIO_ADDRINFO **res);
-int BIO_sock_error(int sock);
-int BIO_socket_ioctl(int fd, long type, void *arg);
-int BIO_socket_nbio(int fd, int mode);
-int BIO_sock_init(void);
+int __cdecl BIO_sock_error(int sock);
+int __cdecl BIO_socket_ioctl(int fd, long type, void *arg);
+int __cdecl BIO_socket_nbio(int fd, int mode);
+int __cdecl BIO_sock_init(void);
 # if OPENSSL_API_COMPAT < 0x10100000L
 #  define BIO_sock_cleanup() while(0) continue
 # endif
-int BIO_set_tcp_ndelay(int sock, int turn_on);
+int __cdecl BIO_set_tcp_ndelay(int sock, int turn_on);
 
 DEPRECATEDIN_1_1_0(struct hostent *BIO_gethostbyname(const char *name))
 DEPRECATEDIN_1_1_0(int BIO_get_port(const char *str, unsigned short *port_ptr))
@@ -694,7 +694,7 @@ union BIO_sock_info_u {
 enum BIO_sock_info_type {
     BIO_SOCK_INFO_ADDRESS
 };
-int BIO_sock_info(int sock,
+int __cdecl BIO_sock_info(int sock,
                   enum BIO_sock_info_type type, union BIO_sock_info_u *info);
 
 #  define BIO_SOCK_REUSEADDR    0x01
@@ -703,21 +703,21 @@ int BIO_sock_info(int sock,
 #  define BIO_SOCK_NONBLOCK     0x08
 #  define BIO_SOCK_NODELAY      0x10
 
-int BIO_socket(int domain, int socktype, int protocol, int options);
-int BIO_connect(int sock, const BIO_ADDR *addr, int options);
-int BIO_bind(int sock, const BIO_ADDR *addr, int options);
-int BIO_listen(int sock, const BIO_ADDR *addr, int options);
-int BIO_accept_ex(int accept_sock, BIO_ADDR *addr, int options);
-int BIO_closesocket(int sock);
+int __cdecl BIO_socket(int domain, int socktype, int protocol, int options);
+int __cdecl BIO_connect(int sock, const BIO_ADDR *addr, int options);
+int __cdecl BIO_bind(int sock, const BIO_ADDR *addr, int options);
+int __cdecl BIO_listen(int sock, const BIO_ADDR *addr, int options);
+int __cdecl BIO_accept_ex(int accept_sock, BIO_ADDR *addr, int options);
+int __cdecl BIO_closesocket(int sock);
 
-BIO *BIO_new_socket(int sock, int close_flag);
-BIO *BIO_new_connect(const char *host_port);
-BIO *BIO_new_accept(const char *host_port);
+BIO * __cdecl BIO_new_socket(int sock, int close_flag);
+BIO * __cdecl BIO_new_connect(const char *host_port);
+BIO * __cdecl BIO_new_accept(const char *host_port);
 # endif /* OPENSSL_NO_SOCK*/
 
-BIO *BIO_new_fd(int fd, int close_flag);
+BIO * __cdecl BIO_new_fd(int fd, int close_flag);
 
-int BIO_new_bio_pair(BIO **bio1, size_t writebuf1,
+int __cdecl BIO_new_bio_pair(BIO **bio1, size_t writebuf1,
                      BIO **bio2, size_t writebuf2);
 /*
  * If successful, returns 1 and in *bio1, *bio2 two BIO pair endpoints.
@@ -725,7 +725,7 @@ int BIO_new_bio_pair(BIO **bio1, size_t writebuf1,
  * value.
  */
 
-void BIO_copy_next_retry(BIO *b);
+void __cdecl BIO_copy_next_retry(BIO *b);
 
 /*
  * long BIO_ghbn_ctrl(int cmd,int iarg,char *parg);
@@ -748,49 +748,49 @@ void BIO_copy_next_retry(BIO *b);
 #   endif
 #  endif
 # endif
-int BIO_printf(BIO *bio, const char *format, ...)
+int __cdecl BIO_printf(BIO *bio, const char *format, ...)
 ossl_bio__attr__((__format__(ossl_bio__printf__, 2, 3)));
-int BIO_vprintf(BIO *bio, const char *format, va_list args)
+int __cdecl BIO_vprintf(BIO *bio, const char *format, va_list args)
 ossl_bio__attr__((__format__(ossl_bio__printf__, 2, 0)));
-int BIO_snprintf(char *buf, size_t n, const char *format, ...)
+int __cdecl BIO_snprintf(char *buf, size_t n, const char *format, ...)
 ossl_bio__attr__((__format__(ossl_bio__printf__, 3, 4)));
-int BIO_vsnprintf(char *buf, size_t n, const char *format, va_list args)
+int __cdecl BIO_vsnprintf(char *buf, size_t n, const char *format, va_list args)
 ossl_bio__attr__((__format__(ossl_bio__printf__, 3, 0)));
 # undef ossl_bio__attr__
 # undef ossl_bio__printf__
 
 
-BIO_METHOD *BIO_meth_new(int type, const char *name);
-void BIO_meth_free(BIO_METHOD *biom);
-int (*BIO_meth_get_write(const BIO_METHOD *biom)) (BIO *, const char *, int);
-int (*BIO_meth_get_write_ex(const BIO_METHOD *biom)) (BIO *, const char *, size_t,
+BIO_METHOD *__cdecl BIO_meth_new(int type, const char *name);
+void __cdecl BIO_meth_free(BIO_METHOD *biom);
+int (* __cdecl BIO_meth_get_write(const BIO_METHOD *biom)) (BIO *, const char *, int);
+int (* __cdecl BIO_meth_get_write_ex(const BIO_METHOD *biom)) (BIO *, const char *, size_t,
                                                 size_t *);
-int BIO_meth_set_write(BIO_METHOD *biom,
+int __cdecl BIO_meth_set_write(BIO_METHOD *biom,
                        int (*write) (BIO *, const char *, int));
-int BIO_meth_set_write_ex(BIO_METHOD *biom,
+int __cdecl BIO_meth_set_write_ex(BIO_METHOD *biom,
                        int (*bwrite) (BIO *, const char *, size_t, size_t *));
-int (*BIO_meth_get_read(const BIO_METHOD *biom)) (BIO *, char *, int);
-int (*BIO_meth_get_read_ex(const BIO_METHOD *biom)) (BIO *, char *, size_t, size_t *);
-int BIO_meth_set_read(BIO_METHOD *biom,
+int (* __cdecl BIO_meth_get_read(const BIO_METHOD *biom)) (BIO *, char *, int);
+int (* __cdecl BIO_meth_get_read_ex(const BIO_METHOD *biom)) (BIO *, char *, size_t, size_t *);
+int __cdecl BIO_meth_set_read(BIO_METHOD *biom,
                       int (*read) (BIO *, char *, int));
-int BIO_meth_set_read_ex(BIO_METHOD *biom,
+int __cdecl BIO_meth_set_read_ex(BIO_METHOD *biom,
                          int (*bread) (BIO *, char *, size_t, size_t *));
-int (*BIO_meth_get_puts(const BIO_METHOD *biom)) (BIO *, const char *);
-int BIO_meth_set_puts(BIO_METHOD *biom,
+int (* __cdecl BIO_meth_get_puts(const BIO_METHOD *biom)) (BIO *, const char *);
+int __cdecl BIO_meth_set_puts(BIO_METHOD *biom,
                       int (*puts) (BIO *, const char *));
-int (*BIO_meth_get_gets(const BIO_METHOD *biom)) (BIO *, char *, int);
-int BIO_meth_set_gets(BIO_METHOD *biom,
+int (* __cdecl BIO_meth_get_gets(const BIO_METHOD *biom)) (BIO *, char *, int);
+int __cdecl BIO_meth_set_gets(BIO_METHOD *biom,
                       int (*gets) (BIO *, char *, int));
-long (*BIO_meth_get_ctrl(const BIO_METHOD *biom)) (BIO *, int, long, void *);
-int BIO_meth_set_ctrl(BIO_METHOD *biom,
+long (* __cdecl BIO_meth_get_ctrl(const BIO_METHOD *biom)) (BIO *, int, long, void *);
+int __cdecl BIO_meth_set_ctrl(BIO_METHOD *biom,
                       long (*ctrl) (BIO *, int, long, void *));
-int (*BIO_meth_get_create(const BIO_METHOD *bion)) (BIO *);
-int BIO_meth_set_create(BIO_METHOD *biom, int (*create) (BIO *));
-int (*BIO_meth_get_destroy(const BIO_METHOD *biom)) (BIO *);
-int BIO_meth_set_destroy(BIO_METHOD *biom, int (*destroy) (BIO *));
-long (*BIO_meth_get_callback_ctrl(const BIO_METHOD *biom))
+int (* __cdecl BIO_meth_get_create(const BIO_METHOD *bion)) (BIO *);
+int __cdecl BIO_meth_set_create(BIO_METHOD *biom, int (*create) (BIO *));
+int (* __cdecl BIO_meth_get_destroy(const BIO_METHOD *biom)) (BIO *);
+int __cdecl BIO_meth_set_destroy(BIO_METHOD *biom, int (*destroy) (BIO *));
+long (* __cdecl BIO_meth_get_callback_ctrl(const BIO_METHOD *biom))
                                  (BIO *, int, BIO_info_cb *);
-int BIO_meth_set_callback_ctrl(BIO_METHOD *biom,
+int __cdecl BIO_meth_set_callback_ctrl(BIO_METHOD *biom,
                                long (*callback_ctrl) (BIO *, int,
                                                       BIO_info_cb *));
 
diff --git a/include/openssl/bioerr.h b/include/openssl/bioerr.h
index 46e2c96ee3..4c738bbb02 100644
--- a/include/openssl/bioerr.h
+++ b/include/openssl/bioerr.h
@@ -18,7 +18,7 @@
 # ifdef  __cplusplus
 extern "C"
 # endif
-int ERR_load_BIO_strings(void);
+int __cdecl ERR_load_BIO_strings(void);
 
 /*
  * BIO function codes.
diff --git a/include/openssl/blowfish.h b/include/openssl/blowfish.h
index cd3e460e98..a749b13ade 100644
--- a/include/openssl/blowfish.h
+++ b/include/openssl/blowfish.h
@@ -36,22 +36,22 @@ typedef struct bf_key_st {
     BF_LONG S[4 * 256];
 } BF_KEY;
 
-void BF_set_key(BF_KEY *key, int len, const unsigned char *data);
+void __cdecl BF_set_key(BF_KEY *key, int len, const unsigned char *data);
 
-void BF_encrypt(BF_LONG *data, const BF_KEY *key);
-void BF_decrypt(BF_LONG *data, const BF_KEY *key);
+void __cdecl BF_encrypt(BF_LONG *data, const BF_KEY *key);
+void __cdecl BF_decrypt(BF_LONG *data, const BF_KEY *key);
 
-void BF_ecb_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl BF_ecb_encrypt(const unsigned char *in, unsigned char *out,
                     const BF_KEY *key, int enc);
-void BF_cbc_encrypt(const unsigned char *in, unsigned char *out, long length,
+void __cdecl BF_cbc_encrypt(const unsigned char *in, unsigned char *out, long length,
                     const BF_KEY *schedule, unsigned char *ivec, int enc);
-void BF_cfb64_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl BF_cfb64_encrypt(const unsigned char *in, unsigned char *out,
                       long length, const BF_KEY *schedule,
                       unsigned char *ivec, int *num, int enc);
-void BF_ofb64_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl BF_ofb64_encrypt(const unsigned char *in, unsigned char *out,
                       long length, const BF_KEY *schedule,
                       unsigned char *ivec, int *num);
-const char *BF_options(void);
+const char * __cdecl BF_options(void);
 
 # ifdef  __cplusplus
 }
diff --git a/include/openssl/bn.h b/include/openssl/bn.h
index 8af05d00e5..def342fd3a 100644
--- a/include/openssl/bn.h
+++ b/include/openssl/bn.h
@@ -67,8 +67,8 @@ extern "C" {
 #  define BN_FLG_FREE            0x8000 /* used for debugging */
 # endif
 
-void BN_set_flags(BIGNUM *b, int n);
-int BN_get_flags(const BIGNUM *b, int n);
+void __cdecl BN_set_flags(BIGNUM *b, int n);
+int __cdecl BN_get_flags(const BIGNUM *b, int n);
 
 /* Values for |top| in BN_rand() */
 #define BN_RAND_TOP_ANY    -1
@@ -85,23 +85,23 @@ int BN_get_flags(const BIGNUM *b, int n);
  * value |dest| should be a newly allocated BIGNUM obtained via BN_new() that
  * has not been otherwise initialised or used.
  */
-void BN_with_flags(BIGNUM *dest, const BIGNUM *b, int flags);
+void __cdecl BN_with_flags(BIGNUM *dest, const BIGNUM *b, int flags);
 
 /* Wrapper function to make using BN_GENCB easier */
-int BN_GENCB_call(BN_GENCB *cb, int a, int b);
+int __cdecl BN_GENCB_call(BN_GENCB *cb, int a, int b);
 
-BN_GENCB *BN_GENCB_new(void);
-void BN_GENCB_free(BN_GENCB *cb);
+BN_GENCB * __cdecl BN_GENCB_new(void);
+void __cdecl BN_GENCB_free(BN_GENCB *cb);
 
 /* Populate a BN_GENCB structure with an "old"-style callback */
-void BN_GENCB_set_old(BN_GENCB *gencb, void (*callback) (int, int, void *),
+void __cdecl BN_GENCB_set_old(BN_GENCB *gencb, void (*callback) (int, int, void *),
                       void *cb_arg);
 
 /* Populate a BN_GENCB structure with a "new"-style callback */
-void BN_GENCB_set(BN_GENCB *gencb, int (*callback) (int, int, BN_GENCB *),
+void __cdecl BN_GENCB_set(BN_GENCB *gencb, int (*callback) (int, int, BN_GENCB *),
                   void *cb_arg);
 
-void *BN_GENCB_get_arg(BN_GENCB *cb);
+void * __cdecl BN_GENCB_get_arg(BN_GENCB *cb);
 
 # define BN_prime_checks 0      /* default: select number of iterations based
                                  * on the size of the number */
@@ -180,15 +180,15 @@ void *BN_GENCB_get_arg(BN_GENCB *cb);
 
 # define BN_num_bytes(a) ((BN_num_bits(a)+7)/8)
 
-int BN_abs_is_word(const BIGNUM *a, const BN_ULONG w);
-int BN_is_zero(const BIGNUM *a);
-int BN_is_one(const BIGNUM *a);
-int BN_is_word(const BIGNUM *a, const BN_ULONG w);
-int BN_is_odd(const BIGNUM *a);
+int __cdecl BN_abs_is_word(const BIGNUM *a, const BN_ULONG w);
+int __cdecl BN_is_zero(const BIGNUM *a);
+int __cdecl BN_is_one(const BIGNUM *a);
+int __cdecl BN_is_word(const BIGNUM *a, const BN_ULONG w);
+int __cdecl BN_is_odd(const BIGNUM *a);
 
 # define BN_one(a)       (BN_set_word((a),1))
 
-void BN_zero_ex(BIGNUM *a);
+void __cdecl BN_zero_ex(BIGNUM *a);
 
 # if OPENSSL_API_COMPAT >= 0x00908000L
 #  define BN_zero(a)      BN_zero_ex(a)
@@ -196,131 +196,131 @@ void BN_zero_ex(BIGNUM *a);
 #  define BN_zero(a)      (BN_set_word((a),0))
 # endif
 
-const BIGNUM *BN_value_one(void);
-char *BN_options(void);
-BN_CTX *BN_CTX_new(void);
-BN_CTX *BN_CTX_secure_new(void);
-void BN_CTX_free(BN_CTX *c);
-void BN_CTX_start(BN_CTX *ctx);
-BIGNUM *BN_CTX_get(BN_CTX *ctx);
-void BN_CTX_end(BN_CTX *ctx);
-int BN_rand(BIGNUM *rnd, int bits, int top, int bottom);
-int BN_priv_rand(BIGNUM *rnd, int bits, int top, int bottom);
-int BN_rand_range(BIGNUM *rnd, const BIGNUM *range);
-int BN_priv_rand_range(BIGNUM *rnd, const BIGNUM *range);
-int BN_pseudo_rand(BIGNUM *rnd, int bits, int top, int bottom);
-int BN_pseudo_rand_range(BIGNUM *rnd, const BIGNUM *range);
-int BN_num_bits(const BIGNUM *a);
-int BN_num_bits_word(BN_ULONG l);
-int BN_security_bits(int L, int N);
-BIGNUM *BN_new(void);
-BIGNUM *BN_secure_new(void);
-void BN_clear_free(BIGNUM *a);
-BIGNUM *BN_copy(BIGNUM *a, const BIGNUM *b);
-void BN_swap(BIGNUM *a, BIGNUM *b);
-BIGNUM *BN_bin2bn(const unsigned char *s, int len, BIGNUM *ret);
-int BN_bn2bin(const BIGNUM *a, unsigned char *to);
-int BN_bn2binpad(const BIGNUM *a, unsigned char *to, int tolen);
-BIGNUM *BN_lebin2bn(const unsigned char *s, int len, BIGNUM *ret);
-int BN_bn2lebinpad(const BIGNUM *a, unsigned char *to, int tolen);
-BIGNUM *BN_mpi2bn(const unsigned char *s, int len, BIGNUM *ret);
-int BN_bn2mpi(const BIGNUM *a, unsigned char *to);
-int BN_sub(BIGNUM *r, const BIGNUM *a, const BIGNUM *b);
-int BN_usub(BIGNUM *r, const BIGNUM *a, const BIGNUM *b);
-int BN_uadd(BIGNUM *r, const BIGNUM *a, const BIGNUM *b);
-int BN_add(BIGNUM *r, const BIGNUM *a, const BIGNUM *b);
-int BN_mul(BIGNUM *r, const BIGNUM *a, const BIGNUM *b, BN_CTX *ctx);
-int BN_sqr(BIGNUM *r, const BIGNUM *a, BN_CTX *ctx);
+const BIGNUM * __cdecl BN_value_one(void);
+char * __cdecl BN_options(void);
+BN_CTX * __cdecl BN_CTX_new(void);
+BN_CTX * __cdecl BN_CTX_secure_new(void);
+void __cdecl BN_CTX_free(BN_CTX *c);
+void __cdecl BN_CTX_start(BN_CTX *ctx);
+BIGNUM * __cdecl BN_CTX_get(BN_CTX *ctx);
+void __cdecl BN_CTX_end(BN_CTX *ctx);
+int __cdecl BN_rand(BIGNUM *rnd, int bits, int top, int bottom);
+int __cdecl BN_priv_rand(BIGNUM *rnd, int bits, int top, int bottom);
+int __cdecl BN_rand_range(BIGNUM *rnd, const BIGNUM *range);
+int __cdecl BN_priv_rand_range(BIGNUM *rnd, const BIGNUM *range);
+int __cdecl BN_pseudo_rand(BIGNUM *rnd, int bits, int top, int bottom);
+int __cdecl BN_pseudo_rand_range(BIGNUM *rnd, const BIGNUM *range);
+int __cdecl BN_num_bits(const BIGNUM *a);
+int __cdecl BN_num_bits_word(BN_ULONG l);
+int __cdecl BN_security_bits(int L, int N);
+BIGNUM * __cdecl BN_new(void);
+BIGNUM * __cdecl BN_secure_new(void);
+void __cdecl BN_clear_free(BIGNUM *a);
+BIGNUM * __cdecl BN_copy(BIGNUM *a, const BIGNUM *b);
+void __cdecl BN_swap(BIGNUM *a, BIGNUM *b);
+BIGNUM * __cdecl BN_bin2bn(const unsigned char *s, int len, BIGNUM *ret);
+int __cdecl BN_bn2bin(const BIGNUM *a, unsigned char *to);
+int __cdecl BN_bn2binpad(const BIGNUM *a, unsigned char *to, int tolen);
+BIGNUM * __cdecl BN_lebin2bn(const unsigned char *s, int len, BIGNUM *ret);
+int __cdecl BN_bn2lebinpad(const BIGNUM *a, unsigned char *to, int tolen);
+BIGNUM * __cdecl BN_mpi2bn(const unsigned char *s, int len, BIGNUM *ret);
+int __cdecl BN_bn2mpi(const BIGNUM *a, unsigned char *to);
+int __cdecl BN_sub(BIGNUM *r, const BIGNUM *a, const BIGNUM *b);
+int __cdecl BN_usub(BIGNUM *r, const BIGNUM *a, const BIGNUM *b);
+int __cdecl BN_uadd(BIGNUM *r, const BIGNUM *a, const BIGNUM *b);
+int __cdecl BN_add(BIGNUM *r, const BIGNUM *a, const BIGNUM *b);
+int __cdecl BN_mul(BIGNUM *r, const BIGNUM *a, const BIGNUM *b, BN_CTX *ctx);
+int __cdecl BN_sqr(BIGNUM *r, const BIGNUM *a, BN_CTX *ctx);
 /** BN_set_negative sets sign of a BIGNUM
  * \param  b  pointer to the BIGNUM object
  * \param  n  0 if the BIGNUM b should be positive and a value != 0 otherwise
  */
-void BN_set_negative(BIGNUM *b, int n);
+void __cdecl BN_set_negative(BIGNUM *b, int n);
 /** BN_is_negative returns 1 if the BIGNUM is negative
  * \param  b  pointer to the BIGNUM object
  * \return 1 if a < 0 and 0 otherwise
  */
-int BN_is_negative(const BIGNUM *b);
+int __cdecl BN_is_negative(const BIGNUM *b);
 
-int BN_div(BIGNUM *dv, BIGNUM *rem, const BIGNUM *m, const BIGNUM *d,
+int __cdecl BN_div(BIGNUM *dv, BIGNUM *rem, const BIGNUM *m, const BIGNUM *d,
            BN_CTX *ctx);
 # define BN_mod(rem,m,d,ctx) BN_div(NULL,(rem),(m),(d),(ctx))
-int BN_nnmod(BIGNUM *r, const BIGNUM *m, const BIGNUM *d, BN_CTX *ctx);
-int BN_mod_add(BIGNUM *r, const BIGNUM *a, const BIGNUM *b, const BIGNUM *m,
+int __cdecl BN_nnmod(BIGNUM *r, const BIGNUM *m, const BIGNUM *d, BN_CTX *ctx);
+int __cdecl BN_mod_add(BIGNUM *r, const BIGNUM *a, const BIGNUM *b, const BIGNUM *m,
                BN_CTX *ctx);
-int BN_mod_add_quick(BIGNUM *r, const BIGNUM *a, const BIGNUM *b,
+int __cdecl BN_mod_add_quick(BIGNUM *r, const BIGNUM *a, const BIGNUM *b,
                      const BIGNUM *m);
-int BN_mod_sub(BIGNUM *r, const BIGNUM *a, const BIGNUM *b, const BIGNUM *m,
+int __cdecl BN_mod_sub(BIGNUM *r, const BIGNUM *a, const BIGNUM *b, const BIGNUM *m,
                BN_CTX *ctx);
-int BN_mod_sub_quick(BIGNUM *r, const BIGNUM *a, const BIGNUM *b,
+int __cdecl BN_mod_sub_quick(BIGNUM *r, const BIGNUM *a, const BIGNUM *b,
                      const BIGNUM *m);
-int BN_mod_mul(BIGNUM *r, const BIGNUM *a, const BIGNUM *b, const BIGNUM *m,
+int __cdecl BN_mod_mul(BIGNUM *r, const BIGNUM *a, const BIGNUM *b, const BIGNUM *m,
                BN_CTX *ctx);
-int BN_mod_sqr(BIGNUM *r, const BIGNUM *a, const BIGNUM *m, BN_CTX *ctx);
-int BN_mod_lshift1(BIGNUM *r, const BIGNUM *a, const BIGNUM *m, BN_CTX *ctx);
-int BN_mod_lshift1_quick(BIGNUM *r, const BIGNUM *a, const BIGNUM *m);
-int BN_mod_lshift(BIGNUM *r, const BIGNUM *a, int n, const BIGNUM *m,
+int __cdecl BN_mod_sqr(BIGNUM *r, const BIGNUM *a, const BIGNUM *m, BN_CTX *ctx);
+int __cdecl BN_mod_lshift1(BIGNUM *r, const BIGNUM *a, const BIGNUM *m, BN_CTX *ctx);
+int __cdecl BN_mod_lshift1_quick(BIGNUM *r, const BIGNUM *a, const BIGNUM *m);
+int __cdecl BN_mod_lshift(BIGNUM *r, const BIGNUM *a, int n, const BIGNUM *m,
                   BN_CTX *ctx);
-int BN_mod_lshift_quick(BIGNUM *r, const BIGNUM *a, int n, const BIGNUM *m);
-
-BN_ULONG BN_mod_word(const BIGNUM *a, BN_ULONG w);
-BN_ULONG BN_div_word(BIGNUM *a, BN_ULONG w);
-int BN_mul_word(BIGNUM *a, BN_ULONG w);
-int BN_add_word(BIGNUM *a, BN_ULONG w);
-int BN_sub_word(BIGNUM *a, BN_ULONG w);
-int BN_set_word(BIGNUM *a, BN_ULONG w);
-BN_ULONG BN_get_word(const BIGNUM *a);
-
-int BN_cmp(const BIGNUM *a, const BIGNUM *b);
-void BN_free(BIGNUM *a);
-int BN_is_bit_set(const BIGNUM *a, int n);
-int BN_lshift(BIGNUM *r, const BIGNUM *a, int n);
-int BN_lshift1(BIGNUM *r, const BIGNUM *a);
-int BN_exp(BIGNUM *r, const BIGNUM *a, const BIGNUM *p, BN_CTX *ctx);
-
-int BN_mod_exp(BIGNUM *r, const BIGNUM *a, const BIGNUM *p,
+int __cdecl BN_mod_lshift_quick(BIGNUM *r, const BIGNUM *a, int n, const BIGNUM *m);
+
+BN_ULONG __cdecl BN_mod_word(const BIGNUM *a, BN_ULONG w);
+BN_ULONG __cdecl BN_div_word(BIGNUM *a, BN_ULONG w);
+int __cdecl BN_mul_word(BIGNUM *a, BN_ULONG w);
+int __cdecl BN_add_word(BIGNUM *a, BN_ULONG w);
+int __cdecl BN_sub_word(BIGNUM *a, BN_ULONG w);
+int __cdecl BN_set_word(BIGNUM *a, BN_ULONG w);
+BN_ULONG __cdecl BN_get_word(const BIGNUM *a);
+
+int __cdecl BN_cmp(const BIGNUM *a, const BIGNUM *b);
+void __cdecl BN_free(BIGNUM *a);
+int __cdecl BN_is_bit_set(const BIGNUM *a, int n);
+int __cdecl BN_lshift(BIGNUM *r, const BIGNUM *a, int n);
+int __cdecl BN_lshift1(BIGNUM *r, const BIGNUM *a);
+int __cdecl BN_exp(BIGNUM *r, const BIGNUM *a, const BIGNUM *p, BN_CTX *ctx);
+
+int __cdecl BN_mod_exp(BIGNUM *r, const BIGNUM *a, const BIGNUM *p,
                const BIGNUM *m, BN_CTX *ctx);
-int BN_mod_exp_mont(BIGNUM *r, const BIGNUM *a, const BIGNUM *p,
+int __cdecl BN_mod_exp_mont(BIGNUM *r, const BIGNUM *a, const BIGNUM *p,
                     const BIGNUM *m, BN_CTX *ctx, BN_MONT_CTX *m_ctx);
-int BN_mod_exp_mont_consttime(BIGNUM *rr, const BIGNUM *a, const BIGNUM *p,
+int __cdecl BN_mod_exp_mont_consttime(BIGNUM *rr, const BIGNUM *a, const BIGNUM *p,
                               const BIGNUM *m, BN_CTX *ctx,
                               BN_MONT_CTX *in_mont);
-int BN_mod_exp_mont_word(BIGNUM *r, BN_ULONG a, const BIGNUM *p,
+int __cdecl BN_mod_exp_mont_word(BIGNUM *r, BN_ULONG a, const BIGNUM *p,
                          const BIGNUM *m, BN_CTX *ctx, BN_MONT_CTX *m_ctx);
-int BN_mod_exp2_mont(BIGNUM *r, const BIGNUM *a1, const BIGNUM *p1,
+int __cdecl BN_mod_exp2_mont(BIGNUM *r, const BIGNUM *a1, const BIGNUM *p1,
                      const BIGNUM *a2, const BIGNUM *p2, const BIGNUM *m,
                      BN_CTX *ctx, BN_MONT_CTX *m_ctx);
-int BN_mod_exp_simple(BIGNUM *r, const BIGNUM *a, const BIGNUM *p,
+int __cdecl BN_mod_exp_simple(BIGNUM *r, const BIGNUM *a, const BIGNUM *p,
                       const BIGNUM *m, BN_CTX *ctx);
 
-int BN_mask_bits(BIGNUM *a, int n);
+int __cdecl BN_mask_bits(BIGNUM *a, int n);
 # ifndef OPENSSL_NO_STDIO
-int BN_print_fp(FILE *fp, const BIGNUM *a);
+int __cdecl BN_print_fp(FILE *fp, const BIGNUM *a);
 # endif
-int BN_print(BIO *bio, const BIGNUM *a);
-int BN_reciprocal(BIGNUM *r, const BIGNUM *m, int len, BN_CTX *ctx);
-int BN_rshift(BIGNUM *r, const BIGNUM *a, int n);
-int BN_rshift1(BIGNUM *r, const BIGNUM *a);
-void BN_clear(BIGNUM *a);
-BIGNUM *BN_dup(const BIGNUM *a);
-int BN_ucmp(const BIGNUM *a, const BIGNUM *b);
-int BN_set_bit(BIGNUM *a, int n);
-int BN_clear_bit(BIGNUM *a, int n);
-char *BN_bn2hex(const BIGNUM *a);
-char *BN_bn2dec(const BIGNUM *a);
-int BN_hex2bn(BIGNUM **a, const char *str);
-int BN_dec2bn(BIGNUM **a, const char *str);
-int BN_asc2bn(BIGNUM **a, const char *str);
-int BN_gcd(BIGNUM *r, const BIGNUM *a, const BIGNUM *b, BN_CTX *ctx);
-int BN_kronecker(const BIGNUM *a, const BIGNUM *b, BN_CTX *ctx); /* returns
+int __cdecl BN_print(BIO *bio, const BIGNUM *a);
+int __cdecl BN_reciprocal(BIGNUM *r, const BIGNUM *m, int len, BN_CTX *ctx);
+int __cdecl BN_rshift(BIGNUM *r, const BIGNUM *a, int n);
+int __cdecl BN_rshift1(BIGNUM *r, const BIGNUM *a);
+void __cdecl BN_clear(BIGNUM *a);
+BIGNUM * __cdecl BN_dup(const BIGNUM *a);
+int __cdecl BN_ucmp(const BIGNUM *a, const BIGNUM *b);
+int __cdecl BN_set_bit(BIGNUM *a, int n);
+int __cdecl BN_clear_bit(BIGNUM *a, int n);
+char * __cdecl BN_bn2hex(const BIGNUM *a);
+char * __cdecl BN_bn2dec(const BIGNUM *a);
+int __cdecl BN_hex2bn(BIGNUM **a, const char *str);
+int __cdecl BN_dec2bn(BIGNUM **a, const char *str);
+int __cdecl BN_asc2bn(BIGNUM **a, const char *str);
+int __cdecl BN_gcd(BIGNUM *r, const BIGNUM *a, const BIGNUM *b, BN_CTX *ctx);
+int __cdecl BN_kronecker(const BIGNUM *a, const BIGNUM *b, BN_CTX *ctx); /* returns
                                                                   * -2 for
                                                                   * error */
-BIGNUM *BN_mod_inverse(BIGNUM *ret,
+BIGNUM * __cdecl BN_mod_inverse(BIGNUM *ret,
                        const BIGNUM *a, const BIGNUM *n, BN_CTX *ctx);
-BIGNUM *BN_mod_sqrt(BIGNUM *ret,
+BIGNUM * __cdecl BN_mod_sqrt(BIGNUM *ret,
                     const BIGNUM *a, const BIGNUM *n, BN_CTX *ctx);
 
-void BN_consttime_swap(BN_ULONG swap, BIGNUM *a, BIGNUM *b, int nwords);
+void __cdecl BN_consttime_swap(BN_ULONG swap, BIGNUM *a, BIGNUM *b, int nwords);
 
 /* Deprecated versions */
 DEPRECATEDIN_0_9_8(BIGNUM *BN_generate_prime(BIGNUM *ret, int bits, int safe,
@@ -340,58 +340,58 @@ DEPRECATEDIN_0_9_8(int
                                         int do_trial_division))
 
 /* Newer versions */
-int BN_generate_prime_ex(BIGNUM *ret, int bits, int safe, const BIGNUM *add,
+int __cdecl BN_generate_prime_ex(BIGNUM *ret, int bits, int safe, const BIGNUM *add,
                          const BIGNUM *rem, BN_GENCB *cb);
-int BN_is_prime_ex(const BIGNUM *p, int nchecks, BN_CTX *ctx, BN_GENCB *cb);
-int BN_is_prime_fasttest_ex(const BIGNUM *p, int nchecks, BN_CTX *ctx,
+int __cdecl BN_is_prime_ex(const BIGNUM *p, int nchecks, BN_CTX *ctx, BN_GENCB *cb);
+int __cdecl BN_is_prime_fasttest_ex(const BIGNUM *p, int nchecks, BN_CTX *ctx,
                             int do_trial_division, BN_GENCB *cb);
 
-int BN_X931_generate_Xpq(BIGNUM *Xp, BIGNUM *Xq, int nbits, BN_CTX *ctx);
+int __cdecl BN_X931_generate_Xpq(BIGNUM *Xp, BIGNUM *Xq, int nbits, BN_CTX *ctx);
 
-int BN_X931_derive_prime_ex(BIGNUM *p, BIGNUM *p1, BIGNUM *p2,
+int __cdecl BN_X931_derive_prime_ex(BIGNUM *p, BIGNUM *p1, BIGNUM *p2,
                             const BIGNUM *Xp, const BIGNUM *Xp1,
                             const BIGNUM *Xp2, const BIGNUM *e, BN_CTX *ctx,
                             BN_GENCB *cb);
-int BN_X931_generate_prime_ex(BIGNUM *p, BIGNUM *p1, BIGNUM *p2, BIGNUM *Xp1,
+int __cdecl BN_X931_generate_prime_ex(BIGNUM *p, BIGNUM *p1, BIGNUM *p2, BIGNUM *Xp1,
                               BIGNUM *Xp2, const BIGNUM *Xp, const BIGNUM *e,
                               BN_CTX *ctx, BN_GENCB *cb);
 
-BN_MONT_CTX *BN_MONT_CTX_new(void);
-int BN_mod_mul_montgomery(BIGNUM *r, const BIGNUM *a, const BIGNUM *b,
+BN_MONT_CTX * __cdecl BN_MONT_CTX_new(void);
+int __cdecl BN_mod_mul_montgomery(BIGNUM *r, const BIGNUM *a, const BIGNUM *b,
                           BN_MONT_CTX *mont, BN_CTX *ctx);
-int BN_to_montgomery(BIGNUM *r, const BIGNUM *a, BN_MONT_CTX *mont,
+int __cdecl BN_to_montgomery(BIGNUM *r, const BIGNUM *a, BN_MONT_CTX *mont,
                      BN_CTX *ctx);
-int BN_from_montgomery(BIGNUM *r, const BIGNUM *a, BN_MONT_CTX *mont,
+int __cdecl BN_from_montgomery(BIGNUM *r, const BIGNUM *a, BN_MONT_CTX *mont,
                        BN_CTX *ctx);
-void BN_MONT_CTX_free(BN_MONT_CTX *mont);
-int BN_MONT_CTX_set(BN_MONT_CTX *mont, const BIGNUM *mod, BN_CTX *ctx);
-BN_MONT_CTX *BN_MONT_CTX_copy(BN_MONT_CTX *to, BN_MONT_CTX *from);
-BN_MONT_CTX *BN_MONT_CTX_set_locked(BN_MONT_CTX **pmont, CRYPTO_RWLOCK *lock,
+void __cdecl BN_MONT_CTX_free(BN_MONT_CTX *mont);
+int __cdecl BN_MONT_CTX_set(BN_MONT_CTX *mont, const BIGNUM *mod, BN_CTX *ctx);
+BN_MONT_CTX * __cdecl BN_MONT_CTX_copy(BN_MONT_CTX *to, BN_MONT_CTX *from);
+BN_MONT_CTX * __cdecl BN_MONT_CTX_set_locked(BN_MONT_CTX **pmont, CRYPTO_RWLOCK *lock,
                                     const BIGNUM *mod, BN_CTX *ctx);
 
 /* BN_BLINDING flags */
 # define BN_BLINDING_NO_UPDATE   0x00000001
 # define BN_BLINDING_NO_RECREATE 0x00000002
 
-BN_BLINDING *BN_BLINDING_new(const BIGNUM *A, const BIGNUM *Ai, BIGNUM *mod);
-void BN_BLINDING_free(BN_BLINDING *b);
-int BN_BLINDING_update(BN_BLINDING *b, BN_CTX *ctx);
-int BN_BLINDING_convert(BIGNUM *n, BN_BLINDING *b, BN_CTX *ctx);
-int BN_BLINDING_invert(BIGNUM *n, BN_BLINDING *b, BN_CTX *ctx);
-int BN_BLINDING_convert_ex(BIGNUM *n, BIGNUM *r, BN_BLINDING *b, BN_CTX *);
-int BN_BLINDING_invert_ex(BIGNUM *n, const BIGNUM *r, BN_BLINDING *b,
+BN_BLINDING * __cdecl BN_BLINDING_new(const BIGNUM *A, const BIGNUM *Ai, BIGNUM *mod);
+void __cdecl BN_BLINDING_free(BN_BLINDING *b);
+int __cdecl BN_BLINDING_update(BN_BLINDING *b, BN_CTX *ctx);
+int __cdecl BN_BLINDING_convert(BIGNUM *n, BN_BLINDING *b, BN_CTX *ctx);
+int __cdecl BN_BLINDING_invert(BIGNUM *n, BN_BLINDING *b, BN_CTX *ctx);
+int __cdecl BN_BLINDING_convert_ex(BIGNUM *n, BIGNUM *r, BN_BLINDING *b, BN_CTX *);
+int __cdecl BN_BLINDING_invert_ex(BIGNUM *n, const BIGNUM *r, BN_BLINDING *b,
                           BN_CTX *);
 
-int BN_BLINDING_is_current_thread(BN_BLINDING *b);
-void BN_BLINDING_set_current_thread(BN_BLINDING *b);
-int BN_BLINDING_lock(BN_BLINDING *b);
-int BN_BLINDING_unlock(BN_BLINDING *b);
+int __cdecl BN_BLINDING_is_current_thread(BN_BLINDING *b);
+void __cdecl BN_BLINDING_set_current_thread(BN_BLINDING *b);
+int __cdecl BN_BLINDING_lock(BN_BLINDING *b);
+int __cdecl BN_BLINDING_unlock(BN_BLINDING *b);
 
-unsigned long BN_BLINDING_get_flags(const BN_BLINDING *);
-void BN_BLINDING_set_flags(BN_BLINDING *, unsigned long);
-BN_BLINDING *BN_BLINDING_create_param(BN_BLINDING *b,
+unsigned long __cdecl BN_BLINDING_get_flags(const BN_BLINDING *);
+void __cdecl BN_BLINDING_set_flags(BN_BLINDING *, unsigned long);
+BN_BLINDING * __cdecl BN_BLINDING_create_param(BN_BLINDING *b,
                                       const BIGNUM *e, BIGNUM *m, BN_CTX *ctx,
-                                      int (*bn_mod_exp) (BIGNUM *r,
+                                      int (__cdecl *bn_mod_exp) (BIGNUM *r,
                                                          const BIGNUM *a,
                                                          const BIGNUM *p,
                                                          const BIGNUM *m,
@@ -403,14 +403,14 @@ DEPRECATEDIN_0_9_8(void BN_set_params(int mul, int high, int low, int mont))
 DEPRECATEDIN_0_9_8(int BN_get_params(int which)) /* 0, mul, 1 high, 2 low, 3
                                                   * mont */
 
-BN_RECP_CTX *BN_RECP_CTX_new(void);
-void BN_RECP_CTX_free(BN_RECP_CTX *recp);
-int BN_RECP_CTX_set(BN_RECP_CTX *recp, const BIGNUM *rdiv, BN_CTX *ctx);
-int BN_mod_mul_reciprocal(BIGNUM *r, const BIGNUM *x, const BIGNUM *y,
+BN_RECP_CTX * __cdecl BN_RECP_CTX_new(void);
+void __cdecl BN_RECP_CTX_free(BN_RECP_CTX *recp);
+int __cdecl BN_RECP_CTX_set(BN_RECP_CTX *recp, const BIGNUM *rdiv, BN_CTX *ctx);
+int __cdecl BN_mod_mul_reciprocal(BIGNUM *r, const BIGNUM *x, const BIGNUM *y,
                           BN_RECP_CTX *recp, BN_CTX *ctx);
-int BN_mod_exp_recp(BIGNUM *r, const BIGNUM *a, const BIGNUM *p,
+int __cdecl BN_mod_exp_recp(BIGNUM *r, const BIGNUM *a, const BIGNUM *p,
                     const BIGNUM *m, BN_CTX *ctx);
-int BN_div_recp(BIGNUM *dv, BIGNUM *rem, const BIGNUM *m,
+int __cdecl BN_div_recp(BIGNUM *dv, BIGNUM *rem, const BIGNUM *m,
                 BN_RECP_CTX *recp, BN_CTX *ctx);
 
 # ifndef OPENSSL_NO_EC2M
@@ -425,30 +425,30 @@ int BN_div_recp(BIGNUM *dv, BIGNUM *rem, const BIGNUM *m,
 /*
  * r = a + b
  */
-int BN_GF2m_add(BIGNUM *r, const BIGNUM *a, const BIGNUM *b);
+int __cdecl BN_GF2m_add(BIGNUM *r, const BIGNUM *a, const BIGNUM *b);
 #  define BN_GF2m_sub(r, a, b) BN_GF2m_add(r, a, b)
 /*
  * r=a mod p
  */
-int BN_GF2m_mod(BIGNUM *r, const BIGNUM *a, const BIGNUM *p);
+int __cdecl BN_GF2m_mod(BIGNUM *r, const BIGNUM *a, const BIGNUM *p);
 /* r = (a * b) mod p */
-int BN_GF2m_mod_mul(BIGNUM *r, const BIGNUM *a, const BIGNUM *b,
+int __cdecl BN_GF2m_mod_mul(BIGNUM *r, const BIGNUM *a, const BIGNUM *b,
                     const BIGNUM *p, BN_CTX *ctx);
 /* r = (a * a) mod p */
-int BN_GF2m_mod_sqr(BIGNUM *r, const BIGNUM *a, const BIGNUM *p, BN_CTX *ctx);
+int __cdecl BN_GF2m_mod_sqr(BIGNUM *r, const BIGNUM *a, const BIGNUM *p, BN_CTX *ctx);
 /* r = (1 / b) mod p */
-int BN_GF2m_mod_inv(BIGNUM *r, const BIGNUM *b, const BIGNUM *p, BN_CTX *ctx);
+int __cdecl BN_GF2m_mod_inv(BIGNUM *r, const BIGNUM *b, const BIGNUM *p, BN_CTX *ctx);
 /* r = (a / b) mod p */
-int BN_GF2m_mod_div(BIGNUM *r, const BIGNUM *a, const BIGNUM *b,
+int __cdecl BN_GF2m_mod_div(BIGNUM *r, const BIGNUM *a, const BIGNUM *b,
                     const BIGNUM *p, BN_CTX *ctx);
 /* r = (a ^ b) mod p */
-int BN_GF2m_mod_exp(BIGNUM *r, const BIGNUM *a, const BIGNUM *b,
+int __cdecl BN_GF2m_mod_exp(BIGNUM *r, const BIGNUM *a, const BIGNUM *b,
                     const BIGNUM *p, BN_CTX *ctx);
 /* r = sqrt(a) mod p */
-int BN_GF2m_mod_sqrt(BIGNUM *r, const BIGNUM *a, const BIGNUM *p,
+int __cdecl BN_GF2m_mod_sqrt(BIGNUM *r, const BIGNUM *a, const BIGNUM *p,
                      BN_CTX *ctx);
 /* r^2 + r = a mod p */
-int BN_GF2m_mod_solve_quad(BIGNUM *r, const BIGNUM *a, const BIGNUM *p,
+int __cdecl BN_GF2m_mod_solve_quad(BIGNUM *r, const BIGNUM *a, const BIGNUM *p,
                            BN_CTX *ctx);
 #  define BN_GF2m_cmp(a, b) BN_ucmp((a), (b))
 /*-
@@ -458,66 +458,66 @@ int BN_GF2m_mod_solve_quad(BIGNUM *r, const BIGNUM *a, const BIGNUM *p,
  * where m = p[0] > p[1] > ... > p[k] = 0.
  */
 /* r = a mod p */
-int BN_GF2m_mod_arr(BIGNUM *r, const BIGNUM *a, const int p[]);
+int __cdecl BN_GF2m_mod_arr(BIGNUM *r, const BIGNUM *a, const int p[]);
 /* r = (a * b) mod p */
-int BN_GF2m_mod_mul_arr(BIGNUM *r, const BIGNUM *a, const BIGNUM *b,
+int __cdecl BN_GF2m_mod_mul_arr(BIGNUM *r, const BIGNUM *a, const BIGNUM *b,
                         const int p[], BN_CTX *ctx);
 /* r = (a * a) mod p */
-int BN_GF2m_mod_sqr_arr(BIGNUM *r, const BIGNUM *a, const int p[],
+int __cdecl BN_GF2m_mod_sqr_arr(BIGNUM *r, const BIGNUM *a, const int p[],
                         BN_CTX *ctx);
 /* r = (1 / b) mod p */
-int BN_GF2m_mod_inv_arr(BIGNUM *r, const BIGNUM *b, const int p[],
+int __cdecl BN_GF2m_mod_inv_arr(BIGNUM *r, const BIGNUM *b, const int p[],
                         BN_CTX *ctx);
 /* r = (a / b) mod p */
-int BN_GF2m_mod_div_arr(BIGNUM *r, const BIGNUM *a, const BIGNUM *b,
+int __cdecl BN_GF2m_mod_div_arr(BIGNUM *r, const BIGNUM *a, const BIGNUM *b,
                         const int p[], BN_CTX *ctx);
 /* r = (a ^ b) mod p */
-int BN_GF2m_mod_exp_arr(BIGNUM *r, const BIGNUM *a, const BIGNUM *b,
+int __cdecl BN_GF2m_mod_exp_arr(BIGNUM *r, const BIGNUM *a, const BIGNUM *b,
                         const int p[], BN_CTX *ctx);
 /* r = sqrt(a) mod p */
-int BN_GF2m_mod_sqrt_arr(BIGNUM *r, const BIGNUM *a,
+int __cdecl BN_GF2m_mod_sqrt_arr(BIGNUM *r, const BIGNUM *a,
                          const int p[], BN_CTX *ctx);
 /* r^2 + r = a mod p */
-int BN_GF2m_mod_solve_quad_arr(BIGNUM *r, const BIGNUM *a,
+int __cdecl BN_GF2m_mod_solve_quad_arr(BIGNUM *r, const BIGNUM *a,
                                const int p[], BN_CTX *ctx);
-int BN_GF2m_poly2arr(const BIGNUM *a, int p[], int max);
-int BN_GF2m_arr2poly(const int p[], BIGNUM *a);
+int __cdecl BN_GF2m_poly2arr(const BIGNUM *a, int p[], int max);
+int __cdecl BN_GF2m_arr2poly(const int p[], BIGNUM *a);
 
 # endif
 
 /*
  * faster mod functions for the 'NIST primes' 0 <= a < p^2
  */
-int BN_nist_mod_192(BIGNUM *r, const BIGNUM *a, const BIGNUM *p, BN_CTX *ctx);
-int BN_nist_mod_224(BIGNUM *r, const BIGNUM *a, const BIGNUM *p, BN_CTX *ctx);
-int BN_nist_mod_256(BIGNUM *r, const BIGNUM *a, const BIGNUM *p, BN_CTX *ctx);
-int BN_nist_mod_384(BIGNUM *r, const BIGNUM *a, const BIGNUM *p, BN_CTX *ctx);
-int BN_nist_mod_521(BIGNUM *r, const BIGNUM *a, const BIGNUM *p, BN_CTX *ctx);
-
-const BIGNUM *BN_get0_nist_prime_192(void);
-const BIGNUM *BN_get0_nist_prime_224(void);
-const BIGNUM *BN_get0_nist_prime_256(void);
-const BIGNUM *BN_get0_nist_prime_384(void);
-const BIGNUM *BN_get0_nist_prime_521(void);
-
-int (*BN_nist_mod_func(const BIGNUM *p)) (BIGNUM *r, const BIGNUM *a,
+int __cdecl BN_nist_mod_192(BIGNUM *r, const BIGNUM *a, const BIGNUM *p, BN_CTX *ctx);
+int __cdecl BN_nist_mod_224(BIGNUM *r, const BIGNUM *a, const BIGNUM *p, BN_CTX *ctx);
+int __cdecl BN_nist_mod_256(BIGNUM *r, const BIGNUM *a, const BIGNUM *p, BN_CTX *ctx);
+int __cdecl BN_nist_mod_384(BIGNUM *r, const BIGNUM *a, const BIGNUM *p, BN_CTX *ctx);
+int __cdecl BN_nist_mod_521(BIGNUM *r, const BIGNUM *a, const BIGNUM *p, BN_CTX *ctx);
+
+const BIGNUM * __cdecl BN_get0_nist_prime_192(void);
+const BIGNUM * __cdecl BN_get0_nist_prime_224(void);
+const BIGNUM * __cdecl BN_get0_nist_prime_256(void);
+const BIGNUM * __cdecl BN_get0_nist_prime_384(void);
+const BIGNUM * __cdecl BN_get0_nist_prime_521(void);
+
+int (__cdecl *BN_nist_mod_func(const BIGNUM *p)) (BIGNUM *r, const BIGNUM *a,
                                           const BIGNUM *field, BN_CTX *ctx);
 
-int BN_generate_dsa_nonce(BIGNUM *out, const BIGNUM *range,
+int __cdecl BN_generate_dsa_nonce(BIGNUM *out, const BIGNUM *range,
                           const BIGNUM *priv, const unsigned char *message,
                           size_t message_len, BN_CTX *ctx);
 
 /* Primes from RFC 2409 */
-BIGNUM *BN_get_rfc2409_prime_768(BIGNUM *bn);
-BIGNUM *BN_get_rfc2409_prime_1024(BIGNUM *bn);
+BIGNUM * __cdecl BN_get_rfc2409_prime_768(BIGNUM *bn);
+BIGNUM * __cdecl BN_get_rfc2409_prime_1024(BIGNUM *bn);
 
 /* Primes from RFC 3526 */
-BIGNUM *BN_get_rfc3526_prime_1536(BIGNUM *bn);
-BIGNUM *BN_get_rfc3526_prime_2048(BIGNUM *bn);
-BIGNUM *BN_get_rfc3526_prime_3072(BIGNUM *bn);
-BIGNUM *BN_get_rfc3526_prime_4096(BIGNUM *bn);
-BIGNUM *BN_get_rfc3526_prime_6144(BIGNUM *bn);
-BIGNUM *BN_get_rfc3526_prime_8192(BIGNUM *bn);
+BIGNUM * __cdecl BN_get_rfc3526_prime_1536(BIGNUM *bn);
+BIGNUM * __cdecl BN_get_rfc3526_prime_2048(BIGNUM *bn);
+BIGNUM * __cdecl BN_get_rfc3526_prime_3072(BIGNUM *bn);
+BIGNUM * __cdecl BN_get_rfc3526_prime_4096(BIGNUM *bn);
+BIGNUM * __cdecl BN_get_rfc3526_prime_6144(BIGNUM *bn);
+BIGNUM * __cdecl BN_get_rfc3526_prime_8192(BIGNUM *bn);
 
 # if OPENSSL_API_COMPAT < 0x10100000L
 #  define get_rfc2409_prime_768 BN_get_rfc2409_prime_768
@@ -530,7 +530,7 @@ BIGNUM *BN_get_rfc3526_prime_8192(BIGNUM *bn);
 #  define get_rfc3526_prime_8192 BN_get_rfc3526_prime_8192
 # endif
 
-int BN_bntest_rand(BIGNUM *rnd, int bits, int top, int bottom);
+int __cdecl BN_bntest_rand(BIGNUM *rnd, int bits, int top, int bottom);
 
 
 # ifdef  __cplusplus
diff --git a/include/openssl/bnerr.h b/include/openssl/bnerr.h
index 9f3c7cfaab..0cd520583b 100644
--- a/include/openssl/bnerr.h
+++ b/include/openssl/bnerr.h
@@ -18,7 +18,7 @@
 # ifdef  __cplusplus
 extern "C"
 # endif
-int ERR_load_BN_strings(void);
+int __cdecl ERR_load_BN_strings(void);
 
 /*
  * BN function codes.
diff --git a/include/openssl/buffer.h b/include/openssl/buffer.h
index d2765766b7..951f045fc3 100644
--- a/include/openssl/buffer.h
+++ b/include/openssl/buffer.h
@@ -44,12 +44,12 @@ struct buf_mem_st {
 
 # define BUF_MEM_FLAG_SECURE  0x01
 
-BUF_MEM *BUF_MEM_new(void);
-BUF_MEM *BUF_MEM_new_ex(unsigned long flags);
-void BUF_MEM_free(BUF_MEM *a);
-size_t BUF_MEM_grow(BUF_MEM *str, size_t len);
-size_t BUF_MEM_grow_clean(BUF_MEM *str, size_t len);
-void BUF_reverse(unsigned char *out, const unsigned char *in, size_t siz);
+BUF_MEM * __cdecl BUF_MEM_new(void);
+BUF_MEM * __cdecl BUF_MEM_new_ex(unsigned long flags);
+void __cdecl BUF_MEM_free(BUF_MEM *a);
+size_t __cdecl BUF_MEM_grow(BUF_MEM *str, size_t len);
+size_t __cdecl BUF_MEM_grow_clean(BUF_MEM *str, size_t len);
+void __cdecl BUF_reverse(unsigned char *out, const unsigned char *in, size_t siz);
 
 
 # ifdef  __cplusplus
diff --git a/include/openssl/buffererr.h b/include/openssl/buffererr.h
index 04f6ff7a83..0a3c910d10 100644
--- a/include/openssl/buffererr.h
+++ b/include/openssl/buffererr.h
@@ -18,7 +18,7 @@
 # ifdef  __cplusplus
 extern "C"
 # endif
-int ERR_load_BUF_strings(void);
+int __cdecl ERR_load_BUF_strings(void);
 
 /*
  * BUF function codes.
diff --git a/include/openssl/camellia.h b/include/openssl/camellia.h
index 151f3c1349..c4d15f7db7 100644
--- a/include/openssl/camellia.h
+++ b/include/openssl/camellia.h
@@ -44,32 +44,32 @@ struct camellia_key_st {
 };
 typedef struct camellia_key_st CAMELLIA_KEY;
 
-int Camellia_set_key(const unsigned char *userKey, const int bits,
+int __cdecl Camellia_set_key(const unsigned char *userKey, const int bits,
                      CAMELLIA_KEY *key);
 
-void Camellia_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl Camellia_encrypt(const unsigned char *in, unsigned char *out,
                       const CAMELLIA_KEY *key);
-void Camellia_decrypt(const unsigned char *in, unsigned char *out,
+void __cdecl Camellia_decrypt(const unsigned char *in, unsigned char *out,
                       const CAMELLIA_KEY *key);
 
-void Camellia_ecb_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl Camellia_ecb_encrypt(const unsigned char *in, unsigned char *out,
                           const CAMELLIA_KEY *key, const int enc);
-void Camellia_cbc_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl Camellia_cbc_encrypt(const unsigned char *in, unsigned char *out,
                           size_t length, const CAMELLIA_KEY *key,
                           unsigned char *ivec, const int enc);
-void Camellia_cfb128_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl Camellia_cfb128_encrypt(const unsigned char *in, unsigned char *out,
                              size_t length, const CAMELLIA_KEY *key,
                              unsigned char *ivec, int *num, const int enc);
-void Camellia_cfb1_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl Camellia_cfb1_encrypt(const unsigned char *in, unsigned char *out,
                            size_t length, const CAMELLIA_KEY *key,
                            unsigned char *ivec, int *num, const int enc);
-void Camellia_cfb8_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl Camellia_cfb8_encrypt(const unsigned char *in, unsigned char *out,
                            size_t length, const CAMELLIA_KEY *key,
                            unsigned char *ivec, int *num, const int enc);
-void Camellia_ofb128_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl Camellia_ofb128_encrypt(const unsigned char *in, unsigned char *out,
                              size_t length, const CAMELLIA_KEY *key,
                              unsigned char *ivec, int *num);
-void Camellia_ctr128_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl Camellia_ctr128_encrypt(const unsigned char *in, unsigned char *out,
                              size_t length, const CAMELLIA_KEY *key,
                              unsigned char ivec[CAMELLIA_BLOCK_SIZE],
                              unsigned char ecount_buf[CAMELLIA_BLOCK_SIZE],
diff --git a/include/openssl/cast.h b/include/openssl/cast.h
index 2cc89ae013..095dc41b85 100644
--- a/include/openssl/cast.h
+++ b/include/openssl/cast.h
@@ -30,18 +30,18 @@ typedef struct cast_key_st {
     int short_key;              /* Use reduced rounds for short key */
 } CAST_KEY;
 
-void CAST_set_key(CAST_KEY *key, int len, const unsigned char *data);
-void CAST_ecb_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl CAST_set_key(CAST_KEY *key, int len, const unsigned char *data);
+void __cdecl CAST_ecb_encrypt(const unsigned char *in, unsigned char *out,
                       const CAST_KEY *key, int enc);
-void CAST_encrypt(CAST_LONG *data, const CAST_KEY *key);
-void CAST_decrypt(CAST_LONG *data, const CAST_KEY *key);
-void CAST_cbc_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl CAST_encrypt(CAST_LONG *data, const CAST_KEY *key);
+void __cdecl CAST_decrypt(CAST_LONG *data, const CAST_KEY *key);
+void __cdecl CAST_cbc_encrypt(const unsigned char *in, unsigned char *out,
                       long length, const CAST_KEY *ks, unsigned char *iv,
                       int enc);
-void CAST_cfb64_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl CAST_cfb64_encrypt(const unsigned char *in, unsigned char *out,
                         long length, const CAST_KEY *schedule,
                         unsigned char *ivec, int *num, int enc);
-void CAST_ofb64_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl CAST_ofb64_encrypt(const unsigned char *in, unsigned char *out,
                         long length, const CAST_KEY *schedule,
                         unsigned char *ivec, int *num);
 
diff --git a/include/openssl/cmac.h b/include/openssl/cmac.h
index 3535a9abf7..0e390a4e5d 100644
--- a/include/openssl/cmac.h
+++ b/include/openssl/cmac.h
@@ -21,17 +21,17 @@ extern "C" {
 /* Opaque */
 typedef struct CMAC_CTX_st CMAC_CTX;
 
-CMAC_CTX *CMAC_CTX_new(void);
-void CMAC_CTX_cleanup(CMAC_CTX *ctx);
-void CMAC_CTX_free(CMAC_CTX *ctx);
-EVP_CIPHER_CTX *CMAC_CTX_get0_cipher_ctx(CMAC_CTX *ctx);
-int CMAC_CTX_copy(CMAC_CTX *out, const CMAC_CTX *in);
+CMAC_CTX * __cdecl CMAC_CTX_new(void);
+void __cdecl CMAC_CTX_cleanup(CMAC_CTX *ctx);
+void __cdecl CMAC_CTX_free(CMAC_CTX *ctx);
+EVP_CIPHER_CTX * __cdecl CMAC_CTX_get0_cipher_ctx(CMAC_CTX *ctx);
+int __cdecl CMAC_CTX_copy(CMAC_CTX *out, const CMAC_CTX *in);
 
-int CMAC_Init(CMAC_CTX *ctx, const void *key, size_t keylen,
+int __cdecl CMAC_Init(CMAC_CTX *ctx, const void *key, size_t keylen,
               const EVP_CIPHER *cipher, ENGINE *impl);
-int CMAC_Update(CMAC_CTX *ctx, const void *data, size_t dlen);
-int CMAC_Final(CMAC_CTX *ctx, unsigned char *out, size_t *poutlen);
-int CMAC_resume(CMAC_CTX *ctx);
+int __cdecl CMAC_Update(CMAC_CTX *ctx, const void *data, size_t dlen);
+int __cdecl CMAC_Final(CMAC_CTX *ctx, unsigned char *out, size_t *poutlen);
+int __cdecl CMAC_resume(CMAC_CTX *ctx);
 
 #ifdef  __cplusplus
 }
diff --git a/include/openssl/cms.h b/include/openssl/cms.h
index c7627968c7..53350de147 100644
--- a/include/openssl/cms.h
+++ b/include/openssl/cms.h
@@ -74,257 +74,257 @@ DECLARE_ASN1_PRINT_FUNCTION(CMS_ContentInfo)
 # define CMS_KEY_PARAM                   0x40000
 # define CMS_ASCIICRLF                   0x80000
 
-const ASN1_OBJECT *CMS_get0_type(const CMS_ContentInfo *cms);
+const ASN1_OBJECT * __cdecl CMS_get0_type(const CMS_ContentInfo *cms);
 
-BIO *CMS_dataInit(CMS_ContentInfo *cms, BIO *icont);
-int CMS_dataFinal(CMS_ContentInfo *cms, BIO *bio);
+BIO * __cdecl CMS_dataInit(CMS_ContentInfo *cms, BIO *icont);
+int __cdecl CMS_dataFinal(CMS_ContentInfo *cms, BIO *bio);
 
-ASN1_OCTET_STRING **CMS_get0_content(CMS_ContentInfo *cms);
-int CMS_is_detached(CMS_ContentInfo *cms);
-int CMS_set_detached(CMS_ContentInfo *cms, int detached);
+ASN1_OCTET_STRING ** __cdecl CMS_get0_content(CMS_ContentInfo *cms);
+int __cdecl CMS_is_detached(CMS_ContentInfo *cms);
+int __cdecl CMS_set_detached(CMS_ContentInfo *cms, int detached);
 
 # ifdef HEADER_PEM_H
 DECLARE_PEM_rw_const(CMS, CMS_ContentInfo)
 # endif
-int CMS_stream(unsigned char ***boundary, CMS_ContentInfo *cms);
-CMS_ContentInfo *d2i_CMS_bio(BIO *bp, CMS_ContentInfo **cms);
-int i2d_CMS_bio(BIO *bp, CMS_ContentInfo *cms);
+int __cdecl CMS_stream(unsigned char ***boundary, CMS_ContentInfo *cms);
+CMS_ContentInfo * __cdecl d2i_CMS_bio(BIO *bp, CMS_ContentInfo **cms);
+int __cdecl i2d_CMS_bio(BIO *bp, CMS_ContentInfo *cms);
 
-BIO *BIO_new_CMS(BIO *out, CMS_ContentInfo *cms);
-int i2d_CMS_bio_stream(BIO *out, CMS_ContentInfo *cms, BIO *in, int flags);
-int PEM_write_bio_CMS_stream(BIO *out, CMS_ContentInfo *cms, BIO *in,
+BIO * __cdecl BIO_new_CMS(BIO *out, CMS_ContentInfo *cms);
+int __cdecl i2d_CMS_bio_stream(BIO *out, CMS_ContentInfo *cms, BIO *in, int flags);
+int __cdecl PEM_write_bio_CMS_stream(BIO *out, CMS_ContentInfo *cms, BIO *in,
                              int flags);
-CMS_ContentInfo *SMIME_read_CMS(BIO *bio, BIO **bcont);
-int SMIME_write_CMS(BIO *bio, CMS_ContentInfo *cms, BIO *data, int flags);
+CMS_ContentInfo * __cdecl SMIME_read_CMS(BIO *bio, BIO **bcont);
+int __cdecl SMIME_write_CMS(BIO *bio, CMS_ContentInfo *cms, BIO *data, int flags);
 
-int CMS_final(CMS_ContentInfo *cms, BIO *data, BIO *dcont,
+int __cdecl CMS_final(CMS_ContentInfo *cms, BIO *data, BIO *dcont,
               unsigned int flags);
 
-CMS_ContentInfo *CMS_sign(X509 *signcert, EVP_PKEY *pkey,
+CMS_ContentInfo * __cdecl CMS_sign(X509 *signcert, EVP_PKEY *pkey,
                           STACK_OF(X509) *certs, BIO *data,
                           unsigned int flags);
 
-CMS_ContentInfo *CMS_sign_receipt(CMS_SignerInfo *si,
+CMS_ContentInfo * __cdecl CMS_sign_receipt(CMS_SignerInfo *si,
                                   X509 *signcert, EVP_PKEY *pkey,
                                   STACK_OF(X509) *certs, unsigned int flags);
 
-int CMS_data(CMS_ContentInfo *cms, BIO *out, unsigned int flags);
-CMS_ContentInfo *CMS_data_create(BIO *in, unsigned int flags);
+int __cdecl CMS_data(CMS_ContentInfo *cms, BIO *out, unsigned int flags);
+CMS_ContentInfo * __cdecl CMS_data_create(BIO *in, unsigned int flags);
 
-int CMS_digest_verify(CMS_ContentInfo *cms, BIO *dcont, BIO *out,
+int __cdecl CMS_digest_verify(CMS_ContentInfo *cms, BIO *dcont, BIO *out,
                       unsigned int flags);
-CMS_ContentInfo *CMS_digest_create(BIO *in, const EVP_MD *md,
+CMS_ContentInfo * __cdecl CMS_digest_create(BIO *in, const EVP_MD *md,
                                    unsigned int flags);
 
-int CMS_EncryptedData_decrypt(CMS_ContentInfo *cms,
+int __cdecl CMS_EncryptedData_decrypt(CMS_ContentInfo *cms,
                               const unsigned char *key, size_t keylen,
                               BIO *dcont, BIO *out, unsigned int flags);
 
-CMS_ContentInfo *CMS_EncryptedData_encrypt(BIO *in, const EVP_CIPHER *cipher,
+CMS_ContentInfo * __cdecl CMS_EncryptedData_encrypt(BIO *in, const EVP_CIPHER *cipher,
                                            const unsigned char *key,
                                            size_t keylen, unsigned int flags);
 
-int CMS_EncryptedData_set1_key(CMS_ContentInfo *cms, const EVP_CIPHER *ciph,
+int __cdecl CMS_EncryptedData_set1_key(CMS_ContentInfo *cms, const EVP_CIPHER *ciph,
                                const unsigned char *key, size_t keylen);
 
-int CMS_verify(CMS_ContentInfo *cms, STACK_OF(X509) *certs,
+int __cdecl CMS_verify(CMS_ContentInfo *cms, STACK_OF(X509) *certs,
                X509_STORE *store, BIO *dcont, BIO *out, unsigned int flags);
 
-int CMS_verify_receipt(CMS_ContentInfo *rcms, CMS_ContentInfo *ocms,
+int __cdecl CMS_verify_receipt(CMS_ContentInfo *rcms, CMS_ContentInfo *ocms,
                        STACK_OF(X509) *certs,
                        X509_STORE *store, unsigned int flags);
 
-STACK_OF(X509) *CMS_get0_signers(CMS_ContentInfo *cms);
+STACK_OF(X509) * __cdecl CMS_get0_signers(CMS_ContentInfo *cms);
 
-CMS_ContentInfo *CMS_encrypt(STACK_OF(X509) *certs, BIO *in,
+CMS_ContentInfo * __cdecl CMS_encrypt(STACK_OF(X509) *certs, BIO *in,
                              const EVP_CIPHER *cipher, unsigned int flags);
 
-int CMS_decrypt(CMS_ContentInfo *cms, EVP_PKEY *pkey, X509 *cert,
+int __cdecl CMS_decrypt(CMS_ContentInfo *cms, EVP_PKEY *pkey, X509 *cert,
                 BIO *dcont, BIO *out, unsigned int flags);
 
-int CMS_decrypt_set1_pkey(CMS_ContentInfo *cms, EVP_PKEY *pk, X509 *cert);
-int CMS_decrypt_set1_key(CMS_ContentInfo *cms,
+int __cdecl CMS_decrypt_set1_pkey(CMS_ContentInfo *cms, EVP_PKEY *pk, X509 *cert);
+int __cdecl CMS_decrypt_set1_key(CMS_ContentInfo *cms,
                          unsigned char *key, size_t keylen,
                          const unsigned char *id, size_t idlen);
-int CMS_decrypt_set1_password(CMS_ContentInfo *cms,
+int __cdecl CMS_decrypt_set1_password(CMS_ContentInfo *cms,
                               unsigned char *pass, ossl_ssize_t passlen);
 
-STACK_OF(CMS_RecipientInfo) *CMS_get0_RecipientInfos(CMS_ContentInfo *cms);
-int CMS_RecipientInfo_type(CMS_RecipientInfo *ri);
-EVP_PKEY_CTX *CMS_RecipientInfo_get0_pkey_ctx(CMS_RecipientInfo *ri);
-CMS_ContentInfo *CMS_EnvelopedData_create(const EVP_CIPHER *cipher);
-CMS_RecipientInfo *CMS_add1_recipient_cert(CMS_ContentInfo *cms,
+STACK_OF(CMS_RecipientInfo) * __cdecl CMS_get0_RecipientInfos(CMS_ContentInfo *cms);
+int __cdecl CMS_RecipientInfo_type(CMS_RecipientInfo *ri);
+EVP_PKEY_CTX * __cdecl CMS_RecipientInfo_get0_pkey_ctx(CMS_RecipientInfo *ri);
+CMS_ContentInfo * __cdecl CMS_EnvelopedData_create(const EVP_CIPHER *cipher);
+CMS_RecipientInfo * __cdecl CMS_add1_recipient_cert(CMS_ContentInfo *cms,
                                            X509 *recip, unsigned int flags);
-int CMS_RecipientInfo_set0_pkey(CMS_RecipientInfo *ri, EVP_PKEY *pkey);
-int CMS_RecipientInfo_ktri_cert_cmp(CMS_RecipientInfo *ri, X509 *cert);
-int CMS_RecipientInfo_ktri_get0_algs(CMS_RecipientInfo *ri,
+int __cdecl CMS_RecipientInfo_set0_pkey(CMS_RecipientInfo *ri, EVP_PKEY *pkey);
+int __cdecl CMS_RecipientInfo_ktri_cert_cmp(CMS_RecipientInfo *ri, X509 *cert);
+int __cdecl CMS_RecipientInfo_ktri_get0_algs(CMS_RecipientInfo *ri,
                                      EVP_PKEY **pk, X509 **recip,
                                      X509_ALGOR **palg);
-int CMS_RecipientInfo_ktri_get0_signer_id(CMS_RecipientInfo *ri,
+int __cdecl CMS_RecipientInfo_ktri_get0_signer_id(CMS_RecipientInfo *ri,
                                           ASN1_OCTET_STRING **keyid,
                                           X509_NAME **issuer,
                                           ASN1_INTEGER **sno);
 
-CMS_RecipientInfo *CMS_add0_recipient_key(CMS_ContentInfo *cms, int nid,
+CMS_RecipientInfo * __cdecl CMS_add0_recipient_key(CMS_ContentInfo *cms, int nid,
                                           unsigned char *key, size_t keylen,
                                           unsigned char *id, size_t idlen,
                                           ASN1_GENERALIZEDTIME *date,
                                           ASN1_OBJECT *otherTypeId,
                                           ASN1_TYPE *otherType);
 
-int CMS_RecipientInfo_kekri_get0_id(CMS_RecipientInfo *ri,
+int __cdecl CMS_RecipientInfo_kekri_get0_id(CMS_RecipientInfo *ri,
                                     X509_ALGOR **palg,
                                     ASN1_OCTET_STRING **pid,
                                     ASN1_GENERALIZEDTIME **pdate,
                                     ASN1_OBJECT **potherid,
                                     ASN1_TYPE **pothertype);
 
-int CMS_RecipientInfo_set0_key(CMS_RecipientInfo *ri,
+int __cdecl CMS_RecipientInfo_set0_key(CMS_RecipientInfo *ri,
                                unsigned char *key, size_t keylen);
 
-int CMS_RecipientInfo_kekri_id_cmp(CMS_RecipientInfo *ri,
+int __cdecl CMS_RecipientInfo_kekri_id_cmp(CMS_RecipientInfo *ri,
                                    const unsigned char *id, size_t idlen);
 
-int CMS_RecipientInfo_set0_password(CMS_RecipientInfo *ri,
+int __cdecl CMS_RecipientInfo_set0_password(CMS_RecipientInfo *ri,
                                     unsigned char *pass,
                                     ossl_ssize_t passlen);
 
-CMS_RecipientInfo *CMS_add0_recipient_password(CMS_ContentInfo *cms,
+CMS_RecipientInfo * __cdecl CMS_add0_recipient_password(CMS_ContentInfo *cms,
                                                int iter, int wrap_nid,
                                                int pbe_nid,
                                                unsigned char *pass,
                                                ossl_ssize_t passlen,
                                                const EVP_CIPHER *kekciph);
 
-int CMS_RecipientInfo_decrypt(CMS_ContentInfo *cms, CMS_RecipientInfo *ri);
-int CMS_RecipientInfo_encrypt(CMS_ContentInfo *cms, CMS_RecipientInfo *ri);
+int __cdecl CMS_RecipientInfo_decrypt(CMS_ContentInfo *cms, CMS_RecipientInfo *ri);
+int __cdecl CMS_RecipientInfo_encrypt(CMS_ContentInfo *cms, CMS_RecipientInfo *ri);
 
-int CMS_uncompress(CMS_ContentInfo *cms, BIO *dcont, BIO *out,
+int __cdecl CMS_uncompress(CMS_ContentInfo *cms, BIO *dcont, BIO *out,
                    unsigned int flags);
-CMS_ContentInfo *CMS_compress(BIO *in, int comp_nid, unsigned int flags);
+CMS_ContentInfo * __cdecl CMS_compress(BIO *in, int comp_nid, unsigned int flags);
 
-int CMS_set1_eContentType(CMS_ContentInfo *cms, const ASN1_OBJECT *oid);
-const ASN1_OBJECT *CMS_get0_eContentType(CMS_ContentInfo *cms);
+int __cdecl CMS_set1_eContentType(CMS_ContentInfo *cms, const ASN1_OBJECT *oid);
+const ASN1_OBJECT * __cdecl CMS_get0_eContentType(CMS_ContentInfo *cms);
 
-CMS_CertificateChoices *CMS_add0_CertificateChoices(CMS_ContentInfo *cms);
-int CMS_add0_cert(CMS_ContentInfo *cms, X509 *cert);
-int CMS_add1_cert(CMS_ContentInfo *cms, X509 *cert);
-STACK_OF(X509) *CMS_get1_certs(CMS_ContentInfo *cms);
+CMS_CertificateChoices * __cdecl CMS_add0_CertificateChoices(CMS_ContentInfo *cms);
+int __cdecl CMS_add0_cert(CMS_ContentInfo *cms, X509 *cert);
+int __cdecl CMS_add1_cert(CMS_ContentInfo *cms, X509 *cert);
+STACK_OF(X509) * __cdecl CMS_get1_certs(CMS_ContentInfo *cms);
 
-CMS_RevocationInfoChoice *CMS_add0_RevocationInfoChoice(CMS_ContentInfo *cms);
-int CMS_add0_crl(CMS_ContentInfo *cms, X509_CRL *crl);
-int CMS_add1_crl(CMS_ContentInfo *cms, X509_CRL *crl);
-STACK_OF(X509_CRL) *CMS_get1_crls(CMS_ContentInfo *cms);
+CMS_RevocationInfoChoice * __cdecl CMS_add0_RevocationInfoChoice(CMS_ContentInfo *cms);
+int __cdecl CMS_add0_crl(CMS_ContentInfo *cms, X509_CRL *crl);
+int __cdecl CMS_add1_crl(CMS_ContentInfo *cms, X509_CRL *crl);
+STACK_OF(X509_CRL) * __cdecl CMS_get1_crls(CMS_ContentInfo *cms);
 
-int CMS_SignedData_init(CMS_ContentInfo *cms);
-CMS_SignerInfo *CMS_add1_signer(CMS_ContentInfo *cms,
+int __cdecl CMS_SignedData_init(CMS_ContentInfo *cms);
+CMS_SignerInfo * __cdecl CMS_add1_signer(CMS_ContentInfo *cms,
                                 X509 *signer, EVP_PKEY *pk, const EVP_MD *md,
                                 unsigned int flags);
-EVP_PKEY_CTX *CMS_SignerInfo_get0_pkey_ctx(CMS_SignerInfo *si);
-EVP_MD_CTX *CMS_SignerInfo_get0_md_ctx(CMS_SignerInfo *si);
-STACK_OF(CMS_SignerInfo) *CMS_get0_SignerInfos(CMS_ContentInfo *cms);
+EVP_PKEY_CTX * __cdecl CMS_SignerInfo_get0_pkey_ctx(CMS_SignerInfo *si);
+EVP_MD_CTX * __cdecl CMS_SignerInfo_get0_md_ctx(CMS_SignerInfo *si);
+STACK_OF(CMS_SignerInfo) * __cdecl CMS_get0_SignerInfos(CMS_ContentInfo *cms);
 
-void CMS_SignerInfo_set1_signer_cert(CMS_SignerInfo *si, X509 *signer);
-int CMS_SignerInfo_get0_signer_id(CMS_SignerInfo *si,
+void __cdecl CMS_SignerInfo_set1_signer_cert(CMS_SignerInfo *si, X509 *signer);
+int __cdecl CMS_SignerInfo_get0_signer_id(CMS_SignerInfo *si,
                                   ASN1_OCTET_STRING **keyid,
                                   X509_NAME **issuer, ASN1_INTEGER **sno);
-int CMS_SignerInfo_cert_cmp(CMS_SignerInfo *si, X509 *cert);
-int CMS_set1_signers_certs(CMS_ContentInfo *cms, STACK_OF(X509) *certs,
+int __cdecl CMS_SignerInfo_cert_cmp(CMS_SignerInfo *si, X509 *cert);
+int __cdecl CMS_set1_signers_certs(CMS_ContentInfo *cms, STACK_OF(X509) *certs,
                            unsigned int flags);
-void CMS_SignerInfo_get0_algs(CMS_SignerInfo *si, EVP_PKEY **pk,
+void __cdecl CMS_SignerInfo_get0_algs(CMS_SignerInfo *si, EVP_PKEY **pk,
                               X509 **signer, X509_ALGOR **pdig,
                               X509_ALGOR **psig);
-ASN1_OCTET_STRING *CMS_SignerInfo_get0_signature(CMS_SignerInfo *si);
-int CMS_SignerInfo_sign(CMS_SignerInfo *si);
-int CMS_SignerInfo_verify(CMS_SignerInfo *si);
-int CMS_SignerInfo_verify_content(CMS_SignerInfo *si, BIO *chain);
+ASN1_OCTET_STRING * __cdecl CMS_SignerInfo_get0_signature(CMS_SignerInfo *si);
+int __cdecl CMS_SignerInfo_sign(CMS_SignerInfo *si);
+int __cdecl CMS_SignerInfo_verify(CMS_SignerInfo *si);
+int __cdecl CMS_SignerInfo_verify_content(CMS_SignerInfo *si, BIO *chain);
 
-int CMS_add_smimecap(CMS_SignerInfo *si, STACK_OF(X509_ALGOR) *algs);
-int CMS_add_simple_smimecap(STACK_OF(X509_ALGOR) **algs,
+int __cdecl CMS_add_smimecap(CMS_SignerInfo *si, STACK_OF(X509_ALGOR) *algs);
+int __cdecl CMS_add_simple_smimecap(STACK_OF(X509_ALGOR) **algs,
                             int algnid, int keysize);
-int CMS_add_standard_smimecap(STACK_OF(X509_ALGOR) **smcap);
+int __cdecl CMS_add_standard_smimecap(STACK_OF(X509_ALGOR) **smcap);
 
-int CMS_signed_get_attr_count(const CMS_SignerInfo *si);
-int CMS_signed_get_attr_by_NID(const CMS_SignerInfo *si, int nid,
+int __cdecl CMS_signed_get_attr_count(const CMS_SignerInfo *si);
+int __cdecl CMS_signed_get_attr_by_NID(const CMS_SignerInfo *si, int nid,
                                int lastpos);
-int CMS_signed_get_attr_by_OBJ(const CMS_SignerInfo *si, const ASN1_OBJECT *obj,
+int __cdecl CMS_signed_get_attr_by_OBJ(const CMS_SignerInfo *si, const ASN1_OBJECT *obj,
                                int lastpos);
-X509_ATTRIBUTE *CMS_signed_get_attr(const CMS_SignerInfo *si, int loc);
-X509_ATTRIBUTE *CMS_signed_delete_attr(CMS_SignerInfo *si, int loc);
-int CMS_signed_add1_attr(CMS_SignerInfo *si, X509_ATTRIBUTE *attr);
-int CMS_signed_add1_attr_by_OBJ(CMS_SignerInfo *si,
+X509_ATTRIBUTE * __cdecl CMS_signed_get_attr(const CMS_SignerInfo *si, int loc);
+X509_ATTRIBUTE * __cdecl CMS_signed_delete_attr(CMS_SignerInfo *si, int loc);
+int __cdecl CMS_signed_add1_attr(CMS_SignerInfo *si, X509_ATTRIBUTE *attr);
+int __cdecl CMS_signed_add1_attr_by_OBJ(CMS_SignerInfo *si,
                                 const ASN1_OBJECT *obj, int type,
                                 const void *bytes, int len);
-int CMS_signed_add1_attr_by_NID(CMS_SignerInfo *si,
+int __cdecl CMS_signed_add1_attr_by_NID(CMS_SignerInfo *si,
                                 int nid, int type,
                                 const void *bytes, int len);
-int CMS_signed_add1_attr_by_txt(CMS_SignerInfo *si,
+int __cdecl CMS_signed_add1_attr_by_txt(CMS_SignerInfo *si,
                                 const char *attrname, int type,
                                 const void *bytes, int len);
-void *CMS_signed_get0_data_by_OBJ(CMS_SignerInfo *si, const ASN1_OBJECT *oid,
+void * __cdecl CMS_signed_get0_data_by_OBJ(CMS_SignerInfo *si, const ASN1_OBJECT *oid,
                                   int lastpos, int type);
 
-int CMS_unsigned_get_attr_count(const CMS_SignerInfo *si);
-int CMS_unsigned_get_attr_by_NID(const CMS_SignerInfo *si, int nid,
+int __cdecl CMS_unsigned_get_attr_count(const CMS_SignerInfo *si);
+int __cdecl CMS_unsigned_get_attr_by_NID(const CMS_SignerInfo *si, int nid,
                                  int lastpos);
-int CMS_unsigned_get_attr_by_OBJ(const CMS_SignerInfo *si,
+int __cdecl CMS_unsigned_get_attr_by_OBJ(const CMS_SignerInfo *si,
                                  const ASN1_OBJECT *obj, int lastpos);
-X509_ATTRIBUTE *CMS_unsigned_get_attr(const CMS_SignerInfo *si, int loc);
-X509_ATTRIBUTE *CMS_unsigned_delete_attr(CMS_SignerInfo *si, int loc);
-int CMS_unsigned_add1_attr(CMS_SignerInfo *si, X509_ATTRIBUTE *attr);
-int CMS_unsigned_add1_attr_by_OBJ(CMS_SignerInfo *si,
+X509_ATTRIBUTE * __cdecl CMS_unsigned_get_attr(const CMS_SignerInfo *si, int loc);
+X509_ATTRIBUTE * __cdecl CMS_unsigned_delete_attr(CMS_SignerInfo *si, int loc);
+int __cdecl CMS_unsigned_add1_attr(CMS_SignerInfo *si, X509_ATTRIBUTE *attr);
+int __cdecl CMS_unsigned_add1_attr_by_OBJ(CMS_SignerInfo *si,
                                   const ASN1_OBJECT *obj, int type,
                                   const void *bytes, int len);
-int CMS_unsigned_add1_attr_by_NID(CMS_SignerInfo *si,
+int __cdecl CMS_unsigned_add1_attr_by_NID(CMS_SignerInfo *si,
                                   int nid, int type,
                                   const void *bytes, int len);
-int CMS_unsigned_add1_attr_by_txt(CMS_SignerInfo *si,
+int __cdecl CMS_unsigned_add1_attr_by_txt(CMS_SignerInfo *si,
                                   const char *attrname, int type,
                                   const void *bytes, int len);
-void *CMS_unsigned_get0_data_by_OBJ(CMS_SignerInfo *si, ASN1_OBJECT *oid,
+void * __cdecl CMS_unsigned_get0_data_by_OBJ(CMS_SignerInfo *si, ASN1_OBJECT *oid,
                                     int lastpos, int type);
 
-int CMS_get1_ReceiptRequest(CMS_SignerInfo *si, CMS_ReceiptRequest **prr);
-CMS_ReceiptRequest *CMS_ReceiptRequest_create0(unsigned char *id, int idlen,
+int __cdecl CMS_get1_ReceiptRequest(CMS_SignerInfo *si, CMS_ReceiptRequest **prr);
+CMS_ReceiptRequest * __cdecl CMS_ReceiptRequest_create0(unsigned char *id, int idlen,
                                                int allorfirst,
                                                STACK_OF(GENERAL_NAMES)
                                                *receiptList, STACK_OF(GENERAL_NAMES)
                                                *receiptsTo);
-int CMS_add1_ReceiptRequest(CMS_SignerInfo *si, CMS_ReceiptRequest *rr);
-void CMS_ReceiptRequest_get0_values(CMS_ReceiptRequest *rr,
+int __cdecl CMS_add1_ReceiptRequest(CMS_SignerInfo *si, CMS_ReceiptRequest *rr);
+void __cdecl CMS_ReceiptRequest_get0_values(CMS_ReceiptRequest *rr,
                                     ASN1_STRING **pcid,
                                     int *pallorfirst,
                                     STACK_OF(GENERAL_NAMES) **plist,
                                     STACK_OF(GENERAL_NAMES) **prto);
-int CMS_RecipientInfo_kari_get0_alg(CMS_RecipientInfo *ri,
+int __cdecl CMS_RecipientInfo_kari_get0_alg(CMS_RecipientInfo *ri,
                                     X509_ALGOR **palg,
                                     ASN1_OCTET_STRING **pukm);
 STACK_OF(CMS_RecipientEncryptedKey)
-*CMS_RecipientInfo_kari_get0_reks(CMS_RecipientInfo *ri);
+* __cdecl CMS_RecipientInfo_kari_get0_reks(CMS_RecipientInfo *ri);
 
-int CMS_RecipientInfo_kari_get0_orig_id(CMS_RecipientInfo *ri,
+int __cdecl CMS_RecipientInfo_kari_get0_orig_id(CMS_RecipientInfo *ri,
                                         X509_ALGOR **pubalg,
                                         ASN1_BIT_STRING **pubkey,
                                         ASN1_OCTET_STRING **keyid,
                                         X509_NAME **issuer,
                                         ASN1_INTEGER **sno);
 
-int CMS_RecipientInfo_kari_orig_id_cmp(CMS_RecipientInfo *ri, X509 *cert);
+int __cdecl CMS_RecipientInfo_kari_orig_id_cmp(CMS_RecipientInfo *ri, X509 *cert);
 
-int CMS_RecipientEncryptedKey_get0_id(CMS_RecipientEncryptedKey *rek,
+int __cdecl CMS_RecipientEncryptedKey_get0_id(CMS_RecipientEncryptedKey *rek,
                                       ASN1_OCTET_STRING **keyid,
                                       ASN1_GENERALIZEDTIME **tm,
                                       CMS_OtherKeyAttribute **other,
                                       X509_NAME **issuer, ASN1_INTEGER **sno);
-int CMS_RecipientEncryptedKey_cert_cmp(CMS_RecipientEncryptedKey *rek,
+int __cdecl CMS_RecipientEncryptedKey_cert_cmp(CMS_RecipientEncryptedKey *rek,
                                        X509 *cert);
-int CMS_RecipientInfo_kari_set0_pkey(CMS_RecipientInfo *ri, EVP_PKEY *pk);
-EVP_CIPHER_CTX *CMS_RecipientInfo_kari_get0_ctx(CMS_RecipientInfo *ri);
-int CMS_RecipientInfo_kari_decrypt(CMS_ContentInfo *cms,
+int __cdecl CMS_RecipientInfo_kari_set0_pkey(CMS_RecipientInfo *ri, EVP_PKEY *pk);
+EVP_CIPHER_CTX * __cdecl CMS_RecipientInfo_kari_get0_ctx(CMS_RecipientInfo *ri);
+int __cdecl CMS_RecipientInfo_kari_decrypt(CMS_ContentInfo *cms,
                                    CMS_RecipientInfo *ri,
                                    CMS_RecipientEncryptedKey *rek);
 
-int CMS_SharedInfo_encode(unsigned char **pder, X509_ALGOR *kekalg,
+int __cdecl CMS_SharedInfo_encode(unsigned char **pder, X509_ALGOR *kekalg,
                           ASN1_OCTET_STRING *ukm, int keylen);
 
 /* Backward compatibility for spelling errors. */
diff --git a/include/openssl/cmserr.h b/include/openssl/cmserr.h
index 7dbc13dc93..1e794ee703 100644
--- a/include/openssl/cmserr.h
+++ b/include/openssl/cmserr.h
@@ -22,7 +22,7 @@
 #  ifdef  __cplusplus
 extern "C"
 #  endif
-int ERR_load_CMS_strings(void);
+int __cdecl ERR_load_CMS_strings(void);
 
 /*
  * CMS function codes.
diff --git a/include/openssl/comp.h b/include/openssl/comp.h
index d814d3cf25..d2806578e1 100644
--- a/include/openssl/comp.h
+++ b/include/openssl/comp.h
@@ -21,19 +21,19 @@ extern "C" {
 
 
 
-COMP_CTX *COMP_CTX_new(COMP_METHOD *meth);
-const COMP_METHOD *COMP_CTX_get_method(const COMP_CTX *ctx);
-int COMP_CTX_get_type(const COMP_CTX* comp);
-int COMP_get_type(const COMP_METHOD *meth);
-const char *COMP_get_name(const COMP_METHOD *meth);
-void COMP_CTX_free(COMP_CTX *ctx);
-
-int COMP_compress_block(COMP_CTX *ctx, unsigned char *out, int olen,
+COMP_CTX * __cdecl COMP_CTX_new(COMP_METHOD *meth);
+const COMP_METHOD * __cdecl COMP_CTX_get_method(const COMP_CTX *ctx);
+int __cdecl COMP_CTX_get_type(const COMP_CTX* comp);
+int __cdecl COMP_get_type(const COMP_METHOD *meth);
+const char * __cdecl COMP_get_name(const COMP_METHOD *meth);
+void __cdecl COMP_CTX_free(COMP_CTX *ctx);
+
+int __cdecl COMP_compress_block(COMP_CTX *ctx, unsigned char *out, int olen,
                         unsigned char *in, int ilen);
-int COMP_expand_block(COMP_CTX *ctx, unsigned char *out, int olen,
+int __cdecl COMP_expand_block(COMP_CTX *ctx, unsigned char *out, int olen,
                       unsigned char *in, int ilen);
 
-COMP_METHOD *COMP_zlib(void);
+COMP_METHOD * __cdecl COMP_zlib(void);
 
 #if OPENSSL_API_COMPAT < 0x10100000L
 #define COMP_zlib_cleanup() while(0) continue
@@ -41,7 +41,7 @@ COMP_METHOD *COMP_zlib(void);
 
 # ifdef HEADER_BIO_H
 #  ifdef ZLIB
-const BIO_METHOD *BIO_f_zlib(void);
+const BIO_METHOD * __cdecl BIO_f_zlib(void);
 #  endif
 # endif
 
diff --git a/include/openssl/comperr.h b/include/openssl/comperr.h
index 90231e9aa3..134ee4cfce 100644
--- a/include/openssl/comperr.h
+++ b/include/openssl/comperr.h
@@ -22,7 +22,7 @@
 #  ifdef  __cplusplus
 extern "C"
 #  endif
-int ERR_load_COMP_strings(void);
+int __cdecl ERR_load_COMP_strings(void);
 
 /*
  * COMP function codes.
diff --git a/include/openssl/conf.h b/include/openssl/conf.h
index 7336cd2f1d..de9fe93f0f 100644
--- a/include/openssl/conf.h
+++ b/include/openssl/conf.h
@@ -66,27 +66,27 @@ typedef void conf_finish_func (CONF_IMODULE *md);
 # define CONF_MFLAGS_IGNORE_MISSING_FILE 0x10
 # define CONF_MFLAGS_DEFAULT_SECTION     0x20
 
-int CONF_set_default_method(CONF_METHOD *meth);
-void CONF_set_nconf(CONF *conf, LHASH_OF(CONF_VALUE) *hash);
-LHASH_OF(CONF_VALUE) *CONF_load(LHASH_OF(CONF_VALUE) *conf, const char *file,
+int __cdecl CONF_set_default_method(CONF_METHOD *meth);
+void __cdecl CONF_set_nconf(CONF *conf, LHASH_OF(CONF_VALUE) *hash);
+LHASH_OF(CONF_VALUE) * __cdecl CONF_load(LHASH_OF(CONF_VALUE) *conf, const char *file,
                                 long *eline);
 # ifndef OPENSSL_NO_STDIO
-LHASH_OF(CONF_VALUE) *CONF_load_fp(LHASH_OF(CONF_VALUE) *conf, FILE *fp,
+LHASH_OF(CONF_VALUE) * __cdecl CONF_load_fp(LHASH_OF(CONF_VALUE) *conf, FILE *fp,
                                    long *eline);
 # endif
-LHASH_OF(CONF_VALUE) *CONF_load_bio(LHASH_OF(CONF_VALUE) *conf, BIO *bp,
+LHASH_OF(CONF_VALUE) * __cdecl CONF_load_bio(LHASH_OF(CONF_VALUE) *conf, BIO *bp,
                                     long *eline);
-STACK_OF(CONF_VALUE) *CONF_get_section(LHASH_OF(CONF_VALUE) *conf,
+STACK_OF(CONF_VALUE) * __cdecl CONF_get_section(LHASH_OF(CONF_VALUE) *conf,
                                        const char *section);
-char *CONF_get_string(LHASH_OF(CONF_VALUE) *conf, const char *group,
+char * __cdecl CONF_get_string(LHASH_OF(CONF_VALUE) *conf, const char *group,
                       const char *name);
-long CONF_get_number(LHASH_OF(CONF_VALUE) *conf, const char *group,
+long __cdecl CONF_get_number(LHASH_OF(CONF_VALUE) *conf, const char *group,
                      const char *name);
-void CONF_free(LHASH_OF(CONF_VALUE) *conf);
+void __cdecl CONF_free(LHASH_OF(CONF_VALUE) *conf);
 #ifndef OPENSSL_NO_STDIO
-int CONF_dump_fp(LHASH_OF(CONF_VALUE) *conf, FILE *out);
+int __cdecl CONF_dump_fp(LHASH_OF(CONF_VALUE) *conf, FILE *out);
 #endif
-int CONF_dump_bio(LHASH_OF(CONF_VALUE) *conf, BIO *out);
+int __cdecl CONF_dump_bio(LHASH_OF(CONF_VALUE) *conf, BIO *out);
 
 DEPRECATEDIN_1_1_0(void OPENSSL_config(const char *config_name))
 
@@ -106,60 +106,60 @@ struct conf_st {
     LHASH_OF(CONF_VALUE) *data;
 };
 
-CONF *NCONF_new(CONF_METHOD *meth);
-CONF_METHOD *NCONF_default(void);
-CONF_METHOD *NCONF_WIN32(void);
-void NCONF_free(CONF *conf);
-void NCONF_free_data(CONF *conf);
+CONF * __cdecl NCONF_new(CONF_METHOD *meth);
+CONF_METHOD * __cdecl NCONF_default(void);
+CONF_METHOD * __cdecl NCONF_WIN32(void);
+void __cdecl NCONF_free(CONF *conf);
+void __cdecl NCONF_free_data(CONF *conf);
 
-int NCONF_load(CONF *conf, const char *file, long *eline);
+int __cdecl NCONF_load(CONF *conf, const char *file, long *eline);
 # ifndef OPENSSL_NO_STDIO
-int NCONF_load_fp(CONF *conf, FILE *fp, long *eline);
+int __cdecl NCONF_load_fp(CONF *conf, FILE *fp, long *eline);
 # endif
-int NCONF_load_bio(CONF *conf, BIO *bp, long *eline);
-STACK_OF(CONF_VALUE) *NCONF_get_section(const CONF *conf,
+int __cdecl NCONF_load_bio(CONF *conf, BIO *bp, long *eline);
+STACK_OF(CONF_VALUE) * __cdecl NCONF_get_section(const CONF *conf,
                                         const char *section);
-char *NCONF_get_string(const CONF *conf, const char *group, const char *name);
-int NCONF_get_number_e(const CONF *conf, const char *group, const char *name,
+char * __cdecl NCONF_get_string(const CONF *conf, const char *group, const char *name);
+int __cdecl NCONF_get_number_e(const CONF *conf, const char *group, const char *name,
                        long *result);
 #ifndef OPENSSL_NO_STDIO
-int NCONF_dump_fp(const CONF *conf, FILE *out);
+int __cdecl NCONF_dump_fp(const CONF *conf, FILE *out);
 #endif
-int NCONF_dump_bio(const CONF *conf, BIO *out);
+int __cdecl NCONF_dump_bio(const CONF *conf, BIO *out);
 
 #define NCONF_get_number(c,g,n,r) NCONF_get_number_e(c,g,n,r)
 
 /* Module functions */
 
-int CONF_modules_load(const CONF *cnf, const char *appname,
+int __cdecl CONF_modules_load(const CONF *cnf, const char *appname,
                       unsigned long flags);
-int CONF_modules_load_file(const char *filename, const char *appname,
+int __cdecl CONF_modules_load_file(const char *filename, const char *appname,
                            unsigned long flags);
-void CONF_modules_unload(int all);
-void CONF_modules_finish(void);
+void __cdecl CONF_modules_unload(int all);
+void __cdecl CONF_modules_finish(void);
 #if OPENSSL_API_COMPAT < 0x10100000L
 # define CONF_modules_free() while(0) continue
 #endif
-int CONF_module_add(const char *name, conf_init_func *ifunc,
+int __cdecl CONF_module_add(const char *name, conf_init_func *ifunc,
                     conf_finish_func *ffunc);
 
-const char *CONF_imodule_get_name(const CONF_IMODULE *md);
-const char *CONF_imodule_get_value(const CONF_IMODULE *md);
-void *CONF_imodule_get_usr_data(const CONF_IMODULE *md);
-void CONF_imodule_set_usr_data(CONF_IMODULE *md, void *usr_data);
-CONF_MODULE *CONF_imodule_get_module(const CONF_IMODULE *md);
-unsigned long CONF_imodule_get_flags(const CONF_IMODULE *md);
-void CONF_imodule_set_flags(CONF_IMODULE *md, unsigned long flags);
-void *CONF_module_get_usr_data(CONF_MODULE *pmod);
-void CONF_module_set_usr_data(CONF_MODULE *pmod, void *usr_data);
+const char * __cdecl CONF_imodule_get_name(const CONF_IMODULE *md);
+const char * __cdecl CONF_imodule_get_value(const CONF_IMODULE *md);
+void * __cdecl CONF_imodule_get_usr_data(const CONF_IMODULE *md);
+void __cdecl CONF_imodule_set_usr_data(CONF_IMODULE *md, void *usr_data);
+CONF_MODULE * __cdecl CONF_imodule_get_module(const CONF_IMODULE *md);
+unsigned long __cdecl CONF_imodule_get_flags(const CONF_IMODULE *md);
+void __cdecl CONF_imodule_set_flags(CONF_IMODULE *md, unsigned long flags);
+void * __cdecl CONF_module_get_usr_data(CONF_MODULE *pmod);
+void __cdecl CONF_module_set_usr_data(CONF_MODULE *pmod, void *usr_data);
 
-char *CONF_get1_default_config_file(void);
+char * __cdecl CONF_get1_default_config_file(void);
 
-int CONF_parse_list(const char *list, int sep, int nospc,
+int __cdecl CONF_parse_list(const char *list, int sep, int nospc,
                     int (*list_cb) (const char *elem, int len, void *usr),
                     void *arg);
 
-void OPENSSL_load_builtin_modules(void);
+void __cdecl OPENSSL_load_builtin_modules(void);
 
 
 # ifdef  __cplusplus
diff --git a/include/openssl/conf_api.h b/include/openssl/conf_api.h
index a0275ad79b..093a9d4825 100644
--- a/include/openssl/conf_api.h
+++ b/include/openssl/conf_api.h
@@ -18,21 +18,21 @@ extern "C" {
 #endif
 
 /* Up until OpenSSL 0.9.5a, this was new_section */
-CONF_VALUE *_CONF_new_section(CONF *conf, const char *section);
+CONF_VALUE * __cdecl _CONF_new_section(CONF *conf, const char *section);
 /* Up until OpenSSL 0.9.5a, this was get_section */
-CONF_VALUE *_CONF_get_section(const CONF *conf, const char *section);
+CONF_VALUE * __cdecl _CONF_get_section(const CONF *conf, const char *section);
 /* Up until OpenSSL 0.9.5a, this was CONF_get_section */
-STACK_OF(CONF_VALUE) *_CONF_get_section_values(const CONF *conf,
+STACK_OF(CONF_VALUE) * __cdecl _CONF_get_section_values(const CONF *conf,
                                                const char *section);
 
-int _CONF_add_string(CONF *conf, CONF_VALUE *section, CONF_VALUE *value);
-char *_CONF_get_string(const CONF *conf, const char *section,
+int __cdecl _CONF_add_string(CONF *conf, CONF_VALUE *section, CONF_VALUE *value);
+char * __cdecl _CONF_get_string(const CONF *conf, const char *section,
                        const char *name);
-long _CONF_get_number(const CONF *conf, const char *section,
+long __cdecl _CONF_get_number(const CONF *conf, const char *section,
                       const char *name);
 
-int _CONF_new_data(CONF *conf);
-void _CONF_free_data(CONF *conf);
+int __cdecl _CONF_new_data(CONF *conf);
+void __cdecl _CONF_free_data(CONF *conf);
 
 #ifdef  __cplusplus
 }
diff --git a/include/openssl/conferr.h b/include/openssl/conferr.h
index 32b9229185..4bd6d6a051 100644
--- a/include/openssl/conferr.h
+++ b/include/openssl/conferr.h
@@ -18,7 +18,7 @@
 # ifdef  __cplusplus
 extern "C"
 # endif
-int ERR_load_CONF_strings(void);
+int __cdecl ERR_load_CONF_strings(void);
 
 /*
  * CONF function codes.
diff --git a/include/openssl/crypto.h b/include/openssl/crypto.h
index 7d0b526236..ca4497e209 100644
--- a/include/openssl/crypto.h
+++ b/include/openssl/crypto.h
@@ -66,13 +66,13 @@ typedef struct {
 
 typedef void CRYPTO_RWLOCK;
 
-CRYPTO_RWLOCK *CRYPTO_THREAD_lock_new(void);
-int CRYPTO_THREAD_read_lock(CRYPTO_RWLOCK *lock);
-int CRYPTO_THREAD_write_lock(CRYPTO_RWLOCK *lock);
-int CRYPTO_THREAD_unlock(CRYPTO_RWLOCK *lock);
-void CRYPTO_THREAD_lock_free(CRYPTO_RWLOCK *lock);
+CRYPTO_RWLOCK * __cdecl CRYPTO_THREAD_lock_new(void);
+int __cdecl CRYPTO_THREAD_read_lock(CRYPTO_RWLOCK *lock);
+int __cdecl CRYPTO_THREAD_write_lock(CRYPTO_RWLOCK *lock);
+int __cdecl CRYPTO_THREAD_unlock(CRYPTO_RWLOCK *lock);
+void __cdecl CRYPTO_THREAD_lock_free(CRYPTO_RWLOCK *lock);
 
-int CRYPTO_atomic_add(int *val, int amount, int *ret, CRYPTO_RWLOCK *lock);
+int __cdecl CRYPTO_atomic_add(int *val, int amount, int *ret, CRYPTO_RWLOCK *lock);
 
 /*
  * The following can be used to detect memory leaks in the library. If
@@ -112,7 +112,7 @@ DEFINE_STACK_OF(void)
 /* No longer needed, so this is a no-op */
 #define OPENSSL_malloc_init() while(0) continue
 
-int CRYPTO_mem_ctrl(int mode);
+int __cdecl CRYPTO_mem_ctrl(int mode);
 
 # define OPENSSL_malloc(num) \
         CRYPTO_malloc(num, OPENSSL_FILE, OPENSSL_LINE)
@@ -143,17 +143,17 @@ int CRYPTO_mem_ctrl(int mode);
 # define OPENSSL_secure_actual_size(ptr) \
         CRYPTO_secure_actual_size(ptr)
 
-size_t OPENSSL_strlcpy(char *dst, const char *src, size_t siz);
-size_t OPENSSL_strlcat(char *dst, const char *src, size_t siz);
-size_t OPENSSL_strnlen(const char *str, size_t maxlen);
-char *OPENSSL_buf2hexstr(const unsigned char *buffer, long len);
-unsigned char *OPENSSL_hexstr2buf(const char *str, long *len);
-int OPENSSL_hexchar2int(unsigned char c);
+size_t __cdecl OPENSSL_strlcpy(char *dst, const char *src, size_t siz);
+size_t __cdecl OPENSSL_strlcat(char *dst, const char *src, size_t siz);
+size_t __cdecl OPENSSL_strnlen(const char *str, size_t maxlen);
+char * __cdecl OPENSSL_buf2hexstr(const unsigned char *buffer, long len);
+unsigned char * __cdecl OPENSSL_hexstr2buf(const char *str, long *len);
+int __cdecl OPENSSL_hexchar2int(unsigned char c);
 
 # define OPENSSL_MALLOC_MAX_NELEMS(type)  (((1U<<(sizeof(int)*8-1))-1)/sizeof(type))
 
-unsigned long OpenSSL_version_num(void);
-const char *OpenSSL_version(int type);
+unsigned long __cdecl OpenSSL_version_num(void);
+const char * __cdecl OpenSSL_version(int type);
 # define OPENSSL_VERSION          0
 # define OPENSSL_CFLAGS           1
 # define OPENSSL_BUILT_ON         2
@@ -161,7 +161,7 @@ const char *OpenSSL_version(int type);
 # define OPENSSL_DIR              4
 # define OPENSSL_ENGINES_DIR      5
 
-int OPENSSL_issetugid(void);
+int __cdecl OPENSSL_issetugid(void);
 
 typedef void CRYPTO_EX_new (void *parent, void *ptr, CRYPTO_EX_DATA *ad,
                            int idx, long argl, void *argp);
@@ -169,28 +169,28 @@ typedef void CRYPTO_EX_free (void *parent, void *ptr, CRYPTO_EX_DATA *ad,
                              int idx, long argl, void *argp);
 typedef int CRYPTO_EX_dup (CRYPTO_EX_DATA *to, const CRYPTO_EX_DATA *from,
                            void *from_d, int idx, long argl, void *argp);
-__owur int CRYPTO_get_ex_new_index(int class_index, long argl, void *argp,
+__owur int __cdecl CRYPTO_get_ex_new_index(int class_index, long argl, void *argp,
                             CRYPTO_EX_new *new_func, CRYPTO_EX_dup *dup_func,
                             CRYPTO_EX_free *free_func);
 /* No longer use an index. */
-int CRYPTO_free_ex_index(int class_index, int idx);
+int __cdecl CRYPTO_free_ex_index(int class_index, int idx);
 
 /*
  * Initialise/duplicate/free CRYPTO_EX_DATA variables corresponding to a
  * given class (invokes whatever per-class callbacks are applicable)
  */
-int CRYPTO_new_ex_data(int class_index, void *obj, CRYPTO_EX_DATA *ad);
-int CRYPTO_dup_ex_data(int class_index, CRYPTO_EX_DATA *to,
+int __cdecl CRYPTO_new_ex_data(int class_index, void *obj, CRYPTO_EX_DATA *ad);
+int __cdecl CRYPTO_dup_ex_data(int class_index, CRYPTO_EX_DATA *to,
                        const CRYPTO_EX_DATA *from);
 
-void CRYPTO_free_ex_data(int class_index, void *obj, CRYPTO_EX_DATA *ad);
+void __cdecl CRYPTO_free_ex_data(int class_index, void *obj, CRYPTO_EX_DATA *ad);
 
 /*
  * Get/set data in a CRYPTO_EX_DATA variable corresponding to a particular
  * index (relative to the class type involved)
  */
-int CRYPTO_set_ex_data(CRYPTO_EX_DATA *ad, int idx, void *val);
-void *CRYPTO_get_ex_data(const CRYPTO_EX_DATA *ad, int idx);
+int __cdecl CRYPTO_set_ex_data(CRYPTO_EX_DATA *ad, int idx, void *val);
+void * __cdecl CRYPTO_get_ex_data(const CRYPTO_EX_DATA *ad, int idx);
 
 # if OPENSSL_API_COMPAT < 0x10100000L
 /*
@@ -253,49 +253,49 @@ typedef struct crypto_threadid_st {
 #  define CRYPTO_get_dynlock_destroy_callback()         (NULL)
 # endif /* OPENSSL_API_COMPAT < 0x10100000L */
 
-int CRYPTO_set_mem_functions(
-        void *(*m) (size_t, const char *, int),
-        void *(*r) (void *, size_t, const char *, int),
-        void (*f) (void *, const char *, int));
-int CRYPTO_set_mem_debug(int flag);
-void CRYPTO_get_mem_functions(
-        void *(**m) (size_t, const char *, int),
-        void *(**r) (void *, size_t, const char *, int),
-        void (**f) (void *, const char *, int));
-
-void *CRYPTO_malloc(size_t num, const char *file, int line);
-void *CRYPTO_zalloc(size_t num, const char *file, int line);
-void *CRYPTO_memdup(const void *str, size_t siz, const char *file, int line);
-char *CRYPTO_strdup(const char *str, const char *file, int line);
-char *CRYPTO_strndup(const char *str, size_t s, const char *file, int line);
-void CRYPTO_free(void *ptr, const char *file, int line);
-void CRYPTO_clear_free(void *ptr, size_t num, const char *file, int line);
-void *CRYPTO_realloc(void *addr, size_t num, const char *file, int line);
-void *CRYPTO_clear_realloc(void *addr, size_t old_num, size_t num,
+int __cdecl CRYPTO_set_mem_functions(
+        void *(__cdecl *m) (size_t, const char *, int),
+        void *(__cdecl *r) (void *, size_t, const char *, int),
+        void (__cdecl *f) (void *, const char *, int));
+int __cdecl CRYPTO_set_mem_debug(int flag);
+void __cdecl CRYPTO_get_mem_functions(
+        void *(__cdecl **m) (size_t, const char *, int),
+        void *(__cdecl **r) (void *, size_t, const char *, int),
+        void (__cdecl **f) (void *, const char *, int));
+
+void * __cdecl CRYPTO_malloc(size_t num, const char *file, int line);
+void * __cdecl CRYPTO_zalloc(size_t num, const char *file, int line);
+void * __cdecl CRYPTO_memdup(const void *str, size_t siz, const char *file, int line);
+char * __cdecl CRYPTO_strdup(const char *str, const char *file, int line);
+char * __cdecl CRYPTO_strndup(const char *str, size_t s, const char *file, int line);
+void __cdecl CRYPTO_free(void *ptr, const char *file, int line);
+void __cdecl CRYPTO_clear_free(void *ptr, size_t num, const char *file, int line);
+void * __cdecl CRYPTO_realloc(void *addr, size_t num, const char *file, int line);
+void * __cdecl CRYPTO_clear_realloc(void *addr, size_t old_num, size_t num,
                            const char *file, int line);
 
-int CRYPTO_secure_malloc_init(size_t sz, int minsize);
-int CRYPTO_secure_malloc_done(void);
-void *CRYPTO_secure_malloc(size_t num, const char *file, int line);
-void *CRYPTO_secure_zalloc(size_t num, const char *file, int line);
-void CRYPTO_secure_free(void *ptr, const char *file, int line);
-void CRYPTO_secure_clear_free(void *ptr, size_t num,
+int __cdecl CRYPTO_secure_malloc_init(size_t sz, int minsize);
+int __cdecl CRYPTO_secure_malloc_done(void);
+void * __cdecl CRYPTO_secure_malloc(size_t num, const char *file, int line);
+void * __cdecl CRYPTO_secure_zalloc(size_t num, const char *file, int line);
+void __cdecl CRYPTO_secure_free(void *ptr, const char *file, int line);
+void __cdecl CRYPTO_secure_clear_free(void *ptr, size_t num,
                               const char *file, int line);
-int CRYPTO_secure_allocated(const void *ptr);
-int CRYPTO_secure_malloc_initialized(void);
-size_t CRYPTO_secure_actual_size(void *ptr);
-size_t CRYPTO_secure_used(void);
+int __cdecl CRYPTO_secure_allocated(const void *ptr);
+int __cdecl CRYPTO_secure_malloc_initialized(void);
+size_t __cdecl CRYPTO_secure_actual_size(void *ptr);
+size_t __cdecl CRYPTO_secure_used(void);
 
-void OPENSSL_cleanse(void *ptr, size_t len);
+void __cdecl OPENSSL_cleanse(void *ptr, size_t len);
 
 # ifndef OPENSSL_NO_CRYPTO_MDEBUG
 #  define OPENSSL_mem_debug_push(info) \
         CRYPTO_mem_debug_push(info, OPENSSL_FILE, OPENSSL_LINE)
 #  define OPENSSL_mem_debug_pop() \
         CRYPTO_mem_debug_pop()
-int CRYPTO_mem_debug_push(const char *info, const char *file, int line);
-int CRYPTO_mem_debug_pop(void);
-void CRYPTO_get_alloc_counts(int *mcount, int *rcount, int *fcount);
+int __cdecl CRYPTO_mem_debug_push(const char *info, const char *file, int line);
+int __cdecl CRYPTO_mem_debug_pop(void);
+void __cdecl CRYPTO_get_alloc_counts(int *mcount, int *rcount, int *fcount);
 
 /*-
  * Debugging functions (enabled by CRYPTO_set_mem_debug(1))
@@ -303,44 +303,44 @@ void CRYPTO_get_alloc_counts(int *mcount, int *rcount, int *fcount);
  *   0:   called before the actual memory allocation has taken place
  *   1:   called after the actual memory allocation has taken place
  */
-void CRYPTO_mem_debug_malloc(void *addr, size_t num, int flag,
+void __cdecl CRYPTO_mem_debug_malloc(void *addr, size_t num, int flag,
         const char *file, int line);
-void CRYPTO_mem_debug_realloc(void *addr1, void *addr2, size_t num, int flag,
+void __cdecl CRYPTO_mem_debug_realloc(void *addr1, void *addr2, size_t num, int flag,
         const char *file, int line);
-void CRYPTO_mem_debug_free(void *addr, int flag,
+void __cdecl CRYPTO_mem_debug_free(void *addr, int flag,
         const char *file, int line);
 
-int CRYPTO_mem_leaks_cb(int (*cb) (const char *str, size_t len, void *u),
+int __cdecl CRYPTO_mem_leaks_cb(int (*cb) (const char *str, size_t len, void *u),
                         void *u);
 #  ifndef OPENSSL_NO_STDIO
-int CRYPTO_mem_leaks_fp(FILE *);
+int __cdecl CRYPTO_mem_leaks_fp(FILE *);
 #  endif
-int CRYPTO_mem_leaks(BIO *bio);
+int __cdecl CRYPTO_mem_leaks(BIO *bio);
 # endif
 
 /* die if we have to */
-ossl_noreturn void OPENSSL_die(const char *assertion, const char *file, int line);
+ossl_noreturn void __cdecl OPENSSL_die(const char *assertion, const char *file, int line);
 # if OPENSSL_API_COMPAT < 0x10100000L
 #  define OpenSSLDie(f,l,a) OPENSSL_die((a),(f),(l))
 # endif
 # define OPENSSL_assert(e) \
     (void)((e) ? 0 : (OPENSSL_die("assertion failed: " #e, OPENSSL_FILE, OPENSSL_LINE), 1))
 
-int OPENSSL_isservice(void);
+int __cdecl OPENSSL_isservice(void);
 
-int FIPS_mode(void);
-int FIPS_mode_set(int r);
+int __cdecl FIPS_mode(void);
+int __cdecl FIPS_mode_set(int r);
 
-void OPENSSL_init(void);
+void __cdecl OPENSSL_init(void);
 # ifdef OPENSSL_SYS_UNIX
-void OPENSSL_fork_prepare(void);
-void OPENSSL_fork_parent(void);
-void OPENSSL_fork_child(void);
+void __cdecl OPENSSL_fork_prepare(void);
+void __cdecl OPENSSL_fork_parent(void);
+void __cdecl OPENSSL_fork_child(void);
 # endif
 
-struct tm *OPENSSL_gmtime(const time_t *timer, struct tm *result);
-int OPENSSL_gmtime_adj(struct tm *tm, int offset_day, long offset_sec);
-int OPENSSL_gmtime_diff(int *pday, int *psec,
+struct tm * __cdecl OPENSSL_gmtime(const time_t *timer, struct tm *result);
+int __cdecl OPENSSL_gmtime_adj(struct tm *tm, int offset_day, long offset_sec);
+int __cdecl OPENSSL_gmtime_diff(int *pday, int *psec,
                         const struct tm *from, const struct tm *to);
 
 /*
@@ -350,7 +350,7 @@ int OPENSSL_gmtime_diff(int *pday, int *psec,
  * into a defined order as the return value when a != b is undefined, other
  * than to be non-zero.
  */
-int CRYPTO_memcmp(const void * in_a, const void * in_b, size_t len);
+int __cdecl CRYPTO_memcmp(const void * in_a, const void * in_b, size_t len);
 
 /* Standard initialisation options */
 # define OPENSSL_INIT_NO_LOAD_CRYPTO_STRINGS 0x00000001L
@@ -384,22 +384,22 @@ int CRYPTO_memcmp(const void * in_a, const void * in_b, size_t len);
 
 
 /* Library initialisation functions */
-void OPENSSL_cleanup(void);
-int OPENSSL_init_crypto(uint64_t opts, const OPENSSL_INIT_SETTINGS *settings);
-int OPENSSL_atexit(void (*handler)(void));
-void OPENSSL_thread_stop(void);
+void __cdecl OPENSSL_cleanup(void);
+int __cdecl OPENSSL_init_crypto(uint64_t opts, const OPENSSL_INIT_SETTINGS *settings);
+int __cdecl OPENSSL_atexit(void (*handler)(void));
+void __cdecl OPENSSL_thread_stop(void);
 
 /* Low-level control of initialization */
-OPENSSL_INIT_SETTINGS *OPENSSL_INIT_new(void);
+OPENSSL_INIT_SETTINGS * __cdecl OPENSSL_INIT_new(void);
 # ifndef OPENSSL_NO_STDIO
-int OPENSSL_INIT_set_config_filename(OPENSSL_INIT_SETTINGS *settings,
+int __cdecl OPENSSL_INIT_set_config_filename(OPENSSL_INIT_SETTINGS *settings,
                                      const char *config_filename);
-void OPENSSL_INIT_set_config_file_flags(OPENSSL_INIT_SETTINGS *settings,
+void __cdecl OPENSSL_INIT_set_config_file_flags(OPENSSL_INIT_SETTINGS *settings,
                                         unsigned long flags);
-int OPENSSL_INIT_set_config_appname(OPENSSL_INIT_SETTINGS *settings,
+int __cdecl OPENSSL_INIT_set_config_appname(OPENSSL_INIT_SETTINGS *settings,
                                     const char *config_appname);
 # endif
-void OPENSSL_INIT_free(OPENSSL_INIT_SETTINGS *settings);
+void __cdecl OPENSSL_INIT_free(OPENSSL_INIT_SETTINGS *settings);
 
 # if defined(OPENSSL_THREADS) && !defined(CRYPTO_TDEBUG)
 #  if defined(_WIN32)
@@ -428,15 +428,15 @@ typedef unsigned int CRYPTO_THREAD_ID;
 #  define CRYPTO_ONCE_STATIC_INIT 0
 # endif
 
-int CRYPTO_THREAD_run_once(CRYPTO_ONCE *once, void (*init)(void));
+int __cdecl CRYPTO_THREAD_run_once(CRYPTO_ONCE *once, void (*init)(void));
 
-int CRYPTO_THREAD_init_local(CRYPTO_THREAD_LOCAL *key, void (*cleanup)(void *));
-void *CRYPTO_THREAD_get_local(CRYPTO_THREAD_LOCAL *key);
-int CRYPTO_THREAD_set_local(CRYPTO_THREAD_LOCAL *key, void *val);
-int CRYPTO_THREAD_cleanup_local(CRYPTO_THREAD_LOCAL *key);
+int __cdecl CRYPTO_THREAD_init_local(CRYPTO_THREAD_LOCAL *key, void (*cleanup)(void *));
+void * __cdecl CRYPTO_THREAD_get_local(CRYPTO_THREAD_LOCAL *key);
+int __cdecl CRYPTO_THREAD_set_local(CRYPTO_THREAD_LOCAL *key, void *val);
+int __cdecl CRYPTO_THREAD_cleanup_local(CRYPTO_THREAD_LOCAL *key);
 
-CRYPTO_THREAD_ID CRYPTO_THREAD_get_current_id(void);
-int CRYPTO_THREAD_compare_id(CRYPTO_THREAD_ID a, CRYPTO_THREAD_ID b);
+CRYPTO_THREAD_ID __cdecl CRYPTO_THREAD_get_current_id(void);
+int __cdecl CRYPTO_THREAD_compare_id(CRYPTO_THREAD_ID a, CRYPTO_THREAD_ID b);
 
 
 # ifdef  __cplusplus
diff --git a/include/openssl/cryptoerr.h b/include/openssl/cryptoerr.h
index 3db5a4ee99..ec1f1e5d1a 100644
--- a/include/openssl/cryptoerr.h
+++ b/include/openssl/cryptoerr.h
@@ -18,7 +18,7 @@
 # ifdef  __cplusplus
 extern "C"
 # endif
-int ERR_load_CRYPTO_strings(void);
+int __cdecl ERR_load_CRYPTO_strings(void);
 
 /*
  * CRYPTO function codes.
diff --git a/include/openssl/ct.h b/include/openssl/ct.h
index d4262fa048..6b778647c3 100644
--- a/include/openssl/ct.h
+++ b/include/openssl/ct.h
@@ -67,36 +67,36 @@ DEFINE_STACK_OF(CTLOG)
  * The caller is responsible for calling CT_POLICY_EVAL_CTX_free when finished
  * with the CT_POLICY_EVAL_CTX.
  */
-CT_POLICY_EVAL_CTX *CT_POLICY_EVAL_CTX_new(void);
+CT_POLICY_EVAL_CTX * __cdecl CT_POLICY_EVAL_CTX_new(void);
 
 /* Deletes a policy evaluation context and anything it owns. */
-void CT_POLICY_EVAL_CTX_free(CT_POLICY_EVAL_CTX *ctx);
+void __cdecl CT_POLICY_EVAL_CTX_free(CT_POLICY_EVAL_CTX *ctx);
 
 /* Gets the peer certificate that the SCTs are for */
-X509* CT_POLICY_EVAL_CTX_get0_cert(const CT_POLICY_EVAL_CTX *ctx);
+X509* __cdecl CT_POLICY_EVAL_CTX_get0_cert(const CT_POLICY_EVAL_CTX *ctx);
 
 /*
  * Sets the certificate associated with the received SCTs.
  * Increments the reference count of cert.
  * Returns 1 on success, 0 otherwise.
  */
-int CT_POLICY_EVAL_CTX_set1_cert(CT_POLICY_EVAL_CTX *ctx, X509 *cert);
+int __cdecl CT_POLICY_EVAL_CTX_set1_cert(CT_POLICY_EVAL_CTX *ctx, X509 *cert);
 
 /* Gets the issuer of the aforementioned certificate */
-X509* CT_POLICY_EVAL_CTX_get0_issuer(const CT_POLICY_EVAL_CTX *ctx);
+X509* __cdecl CT_POLICY_EVAL_CTX_get0_issuer(const CT_POLICY_EVAL_CTX *ctx);
 
 /*
  * Sets the issuer of the certificate associated with the received SCTs.
  * Increments the reference count of issuer.
  * Returns 1 on success, 0 otherwise.
  */
-int CT_POLICY_EVAL_CTX_set1_issuer(CT_POLICY_EVAL_CTX *ctx, X509 *issuer);
+int __cdecl CT_POLICY_EVAL_CTX_set1_issuer(CT_POLICY_EVAL_CTX *ctx, X509 *issuer);
 
 /* Gets the CT logs that are trusted sources of SCTs */
-const CTLOG_STORE *CT_POLICY_EVAL_CTX_get0_log_store(const CT_POLICY_EVAL_CTX *ctx);
+const CTLOG_STORE * __cdecl CT_POLICY_EVAL_CTX_get0_log_store(const CT_POLICY_EVAL_CTX *ctx);
 
 /* Sets the log store that is in use. It must outlive the CT_POLICY_EVAL_CTX. */
-void CT_POLICY_EVAL_CTX_set_shared_CTLOG_STORE(CT_POLICY_EVAL_CTX *ctx,
+void __cdecl CT_POLICY_EVAL_CTX_set_shared_CTLOG_STORE(CT_POLICY_EVAL_CTX *ctx,
                                                CTLOG_STORE *log_store);
 
 /*
@@ -104,7 +104,7 @@ void CT_POLICY_EVAL_CTX_set_shared_CTLOG_STORE(CT_POLICY_EVAL_CTX *ctx,
  * current time when checking whether an SCT was issued in the future.
  * Such SCTs will fail validation, as required by RFC6962.
  */
-uint64_t CT_POLICY_EVAL_CTX_get_time(const CT_POLICY_EVAL_CTX *ctx);
+uint64_t __cdecl CT_POLICY_EVAL_CTX_get_time(const CT_POLICY_EVAL_CTX *ctx);
 
 /*
  * Sets the time to evaluate SCTs against, in milliseconds since the Unix epoch.
@@ -112,7 +112,7 @@ uint64_t CT_POLICY_EVAL_CTX_get_time(const CT_POLICY_EVAL_CTX *ctx);
  * been issued in the future. RFC6962 states that "TLS clients MUST reject SCTs
  * whose timestamp is in the future", so an SCT will not validate in this case.
  */
-void CT_POLICY_EVAL_CTX_set_time(CT_POLICY_EVAL_CTX *ctx, uint64_t time_in_ms);
+void __cdecl CT_POLICY_EVAL_CTX_set_time(CT_POLICY_EVAL_CTX *ctx, uint64_t time_in_ms);
 
 /*****************
  * SCT functions *
@@ -122,13 +122,13 @@ void CT_POLICY_EVAL_CTX_set_time(CT_POLICY_EVAL_CTX *ctx, uint64_t time_in_ms);
  * Creates a new, blank SCT.
  * The caller is responsible for calling SCT_free when finished with the SCT.
  */
-SCT *SCT_new(void);
+SCT * __cdecl SCT_new(void);
 
 /*
  * Creates a new SCT from some base64-encoded strings.
  * The caller is responsible for calling SCT_free when finished with the SCT.
  */
-SCT *SCT_new_from_base64(unsigned char version,
+SCT * __cdecl SCT_new_from_base64(unsigned char version,
                          const char *logid_base64,
                          ct_log_entry_type_t entry_type,
                          uint64_t timestamp,
@@ -138,74 +138,74 @@ SCT *SCT_new_from_base64(unsigned char version,
 /*
  * Frees the SCT and the underlying data structures.
  */
-void SCT_free(SCT *sct);
+void __cdecl SCT_free(SCT *sct);
 
 /*
  * Free a stack of SCTs, and the underlying SCTs themselves.
  * Intended to be compatible with X509V3_EXT_FREE.
  */
-void SCT_LIST_free(STACK_OF(SCT) *a);
+void __cdecl SCT_LIST_free(STACK_OF(SCT) *a);
 
 /*
  * Returns the version of the SCT.
  */
-sct_version_t SCT_get_version(const SCT *sct);
+sct_version_t __cdecl SCT_get_version(const SCT *sct);
 
 /*
  * Set the version of an SCT.
  * Returns 1 on success, 0 if the version is unrecognized.
  */
-__owur int SCT_set_version(SCT *sct, sct_version_t version);
+__owur int __cdecl SCT_set_version(SCT *sct, sct_version_t version);
 
 /*
  * Returns the log entry type of the SCT.
  */
-ct_log_entry_type_t SCT_get_log_entry_type(const SCT *sct);
+ct_log_entry_type_t __cdecl SCT_get_log_entry_type(const SCT *sct);
 
 /*
  * Set the log entry type of an SCT.
  * Returns 1 on success, 0 otherwise.
  */
-__owur int SCT_set_log_entry_type(SCT *sct, ct_log_entry_type_t entry_type);
+__owur int __cdecl SCT_set_log_entry_type(SCT *sct, ct_log_entry_type_t entry_type);
 
 /*
  * Gets the ID of the log that an SCT came from.
  * Ownership of the log ID remains with the SCT.
  * Returns the length of the log ID.
  */
-size_t SCT_get0_log_id(const SCT *sct, unsigned char **log_id);
+size_t __cdecl SCT_get0_log_id(const SCT *sct, unsigned char **log_id);
 
 /*
  * Set the log ID of an SCT to point directly to the *log_id specified.
  * The SCT takes ownership of the specified pointer.
  * Returns 1 on success, 0 otherwise.
  */
-__owur int SCT_set0_log_id(SCT *sct, unsigned char *log_id, size_t log_id_len);
+__owur int __cdecl SCT_set0_log_id(SCT *sct, unsigned char *log_id, size_t log_id_len);
 
 /*
  * Set the log ID of an SCT.
  * This makes a copy of the log_id.
  * Returns 1 on success, 0 otherwise.
  */
-__owur int SCT_set1_log_id(SCT *sct, const unsigned char *log_id,
+__owur int __cdecl SCT_set1_log_id(SCT *sct, const unsigned char *log_id,
                            size_t log_id_len);
 
 /*
  * Returns the timestamp for the SCT (epoch time in milliseconds).
  */
-uint64_t SCT_get_timestamp(const SCT *sct);
+uint64_t __cdecl SCT_get_timestamp(const SCT *sct);
 
 /*
  * Set the timestamp of an SCT (epoch time in milliseconds).
  */
-void SCT_set_timestamp(SCT *sct, uint64_t timestamp);
+void __cdecl SCT_set_timestamp(SCT *sct, uint64_t timestamp);
 
 /*
  * Return the NID for the signature used by the SCT.
  * For CT v1, this will be either NID_sha256WithRSAEncryption or
  * NID_ecdsa_with_SHA256 (or NID_undef if incorrect/unset).
  */
-int SCT_get_signature_nid(const SCT *sct);
+int __cdecl SCT_get_signature_nid(const SCT *sct);
 
 /*
  * Set the signature type of an SCT
@@ -213,27 +213,27 @@ int SCT_get_signature_nid(const SCT *sct);
  * NID_ecdsa_with_SHA256.
  * Returns 1 on success, 0 otherwise.
  */
-__owur int SCT_set_signature_nid(SCT *sct, int nid);
+__owur int __cdecl SCT_set_signature_nid(SCT *sct, int nid);
 
 /*
  * Set *ext to point to the extension data for the SCT. ext must not be NULL.
  * The SCT retains ownership of this pointer.
  * Returns length of the data pointed to.
  */
-size_t SCT_get0_extensions(const SCT *sct, unsigned char **ext);
+size_t __cdecl SCT_get0_extensions(const SCT *sct, unsigned char **ext);
 
 /*
  * Set the extensions of an SCT to point directly to the *ext specified.
  * The SCT takes ownership of the specified pointer.
  */
-void SCT_set0_extensions(SCT *sct, unsigned char *ext, size_t ext_len);
+void __cdecl SCT_set0_extensions(SCT *sct, unsigned char *ext, size_t ext_len);
 
 /*
  * Set the extensions of an SCT.
  * This takes a copy of the ext.
  * Returns 1 on success, 0 otherwise.
  */
-__owur int SCT_set1_extensions(SCT *sct, const unsigned char *ext,
+__owur int __cdecl SCT_set1_extensions(SCT *sct, const unsigned char *ext,
                                size_t ext_len);
 
 /*
@@ -241,36 +241,36 @@ __owur int SCT_set1_extensions(SCT *sct, const unsigned char *ext,
  * The SCT retains ownership of this pointer.
  * Returns length of the data pointed to.
  */
-size_t SCT_get0_signature(const SCT *sct, unsigned char **sig);
+size_t __cdecl SCT_get0_signature(const SCT *sct, unsigned char **sig);
 
 /*
  * Set the signature of an SCT to point directly to the *sig specified.
  * The SCT takes ownership of the specified pointer.
  */
-void SCT_set0_signature(SCT *sct, unsigned char *sig, size_t sig_len);
+void __cdecl SCT_set0_signature(SCT *sct, unsigned char *sig, size_t sig_len);
 
 /*
  * Set the signature of an SCT to be a copy of the *sig specified.
  * Returns 1 on success, 0 otherwise.
  */
-__owur int SCT_set1_signature(SCT *sct, const unsigned char *sig,
+__owur int __cdecl SCT_set1_signature(SCT *sct, const unsigned char *sig,
                               size_t sig_len);
 
 /*
  * The origin of this SCT, e.g. TLS extension, OCSP response, etc.
  */
-sct_source_t SCT_get_source(const SCT *sct);
+sct_source_t __cdecl SCT_get_source(const SCT *sct);
 
 /*
  * Set the origin of this SCT, e.g. TLS extension, OCSP response, etc.
  * Returns 1 on success, 0 otherwise.
  */
-__owur int SCT_set_source(SCT *sct, sct_source_t source);
+__owur int __cdecl SCT_set_source(SCT *sct, sct_source_t source);
 
 /*
  * Returns a text string describing the validation status of |sct|.
  */
-const char *SCT_validation_status_string(const SCT *sct);
+const char * __cdecl SCT_validation_status_string(const SCT *sct);
 
 /*
  * Pretty-prints an |sct| to |out|.
@@ -278,7 +278,7 @@ const char *SCT_validation_status_string(const SCT *sct);
  * If |logs| is not NULL, it will be used to lookup the CT log that the SCT came
  * from, so that the log name can be printed.
  */
-void SCT_print(const SCT *sct, BIO *out, int indent, const CTLOG_STORE *logs);
+void __cdecl SCT_print(const SCT *sct, BIO *out, int indent, const CTLOG_STORE *logs);
 
 /*
  * Pretty-prints an |sct_list| to |out|.
@@ -287,14 +287,14 @@ void SCT_print(const SCT *sct, BIO *out, int indent, const CTLOG_STORE *logs);
  * If |logs| is not NULL, it will be used to lookup the CT log that each SCT
  * came from, so that the log names can be printed.
  */
-void SCT_LIST_print(const STACK_OF(SCT) *sct_list, BIO *out, int indent,
+void __cdecl SCT_LIST_print(const STACK_OF(SCT) *sct_list, BIO *out, int indent,
                     const char *separator, const CTLOG_STORE *logs);
 
 /*
  * Gets the last result of validating this SCT.
  * If it has not been validated yet, returns SCT_VALIDATION_STATUS_NOT_SET.
  */
-sct_validation_status_t SCT_get_validation_status(const SCT *sct);
+sct_validation_status_t __cdecl SCT_get_validation_status(const SCT *sct);
 
 /*
  * Validates the given SCT with the provided context.
@@ -303,7 +303,7 @@ sct_validation_status_t SCT_get_validation_status(const SCT *sct);
  * Returns 0 if the SCT is invalid or could not be verified.
  * Returns -1 if an error occurs.
  */
-__owur int SCT_validate(SCT *sct, const CT_POLICY_EVAL_CTX *ctx);
+__owur int __cdecl SCT_validate(SCT *sct, const CT_POLICY_EVAL_CTX *ctx);
 
 /*
  * Validates the given list of SCTs with the provided context.
@@ -312,7 +312,7 @@ __owur int SCT_validate(SCT *sct, const CT_POLICY_EVAL_CTX *ctx);
  * Returns 0 if at least one SCT is invalid or could not be verified.
  * Returns a negative integer if an error occurs.
  */
-__owur int SCT_LIST_validate(const STACK_OF(SCT) *scts,
+__owur int __cdecl SCT_LIST_validate(const STACK_OF(SCT) *scts,
                              CT_POLICY_EVAL_CTX *ctx);
 
 
@@ -332,7 +332,7 @@ __owur int SCT_LIST_validate(const STACK_OF(SCT) *scts,
  * Returns < 0 on error, >= 0 indicating bytes written (or would have been)
  * on success.
  */
-__owur int i2o_SCT_LIST(const STACK_OF(SCT) *a, unsigned char **pp);
+__owur int __cdecl i2o_SCT_LIST(const STACK_OF(SCT) *a, unsigned char **pp);
 
 /*
  * Convert TLS format SCT list to a stack of SCTs.
@@ -344,7 +344,7 @@ __owur int i2o_SCT_LIST(const STACK_OF(SCT) *a, unsigned char **pp);
  * Upon failure, a NULL pointer will be returned, and the position of "*pp" is
  * not defined.
  */
-STACK_OF(SCT) *o2i_SCT_LIST(STACK_OF(SCT) **a, const unsigned char **pp,
+STACK_OF(SCT) * __cdecl o2i_SCT_LIST(STACK_OF(SCT) **a, const unsigned char **pp,
                             size_t len);
 
 /*
@@ -359,7 +359,7 @@ STACK_OF(SCT) *o2i_SCT_LIST(STACK_OF(SCT) **a, const unsigned char **pp,
  * Returns < 0 on error, >= 0 indicating bytes written (or would have been)
  * on success.
  */
-__owur int i2d_SCT_LIST(const STACK_OF(SCT) *a, unsigned char **pp);
+__owur int __cdecl i2d_SCT_LIST(const STACK_OF(SCT) *a, unsigned char **pp);
 
 /*
  * Parses an SCT list in DER format and returns it.
@@ -371,7 +371,7 @@ __owur int i2d_SCT_LIST(const STACK_OF(SCT) *a, unsigned char **pp);
  * Upon failure, a NULL pointer will be returned, and the position of "*pp" is
  * not defined.
  */
-STACK_OF(SCT) *d2i_SCT_LIST(STACK_OF(SCT) **a, const unsigned char **pp,
+STACK_OF(SCT) * __cdecl d2i_SCT_LIST(STACK_OF(SCT) **a, const unsigned char **pp,
                             long len);
 
 /*
@@ -383,7 +383,7 @@ STACK_OF(SCT) *d2i_SCT_LIST(STACK_OF(SCT) **a, const unsigned char **pp,
  * to it.
  * The length of the SCT in TLS format will be returned.
  */
-__owur int i2o_SCT(const SCT *sct, unsigned char **out);
+__owur int __cdecl i2o_SCT(const SCT *sct, unsigned char **out);
 
 /*
  * Parses an SCT in TLS format and returns it.
@@ -396,7 +396,7 @@ __owur int i2o_SCT(const SCT *sct, unsigned char **out);
  * If the SCT is an unsupported version, only the SCT's 'sct' and 'sct_len'
  * fields will be populated (with |in| and |len| respectively).
  */
-SCT *o2i_SCT(SCT **psct, const unsigned char **in, size_t len);
+SCT * __cdecl o2i_SCT(SCT **psct, const unsigned char **in, size_t len);
 
 /********************
  * CT log functions *
@@ -408,7 +408,7 @@ SCT *o2i_SCT(SCT **psct, const unsigned char **in, size_t len);
  * Returns NULL if malloc fails or if |public_key| cannot be converted to DER.
  * Should be deleted by the caller using CTLOG_free when no longer needed.
  */
-CTLOG *CTLOG_new(EVP_PKEY *public_key, const char *name);
+CTLOG * __cdecl CTLOG_new(EVP_PKEY *public_key, const char *name);
 
 /*
  * Creates a new CTLOG instance with the base64-encoded SubjectPublicKeyInfo DER
@@ -416,21 +416,21 @@ CTLOG *CTLOG_new(EVP_PKEY *public_key, const char *name);
  * Returns 1 on success, 0 on failure.
  * Should be deleted by the caller using CTLOG_free when no longer needed.
  */
-int CTLOG_new_from_base64(CTLOG ** ct_log,
+int __cdecl CTLOG_new_from_base64(CTLOG ** ct_log,
                           const char *pkey_base64, const char *name);
 
 /*
  * Deletes a CT log instance and its fields.
  */
-void CTLOG_free(CTLOG *log);
+void __cdecl CTLOG_free(CTLOG *log);
 
 /* Gets the name of the CT log */
-const char *CTLOG_get0_name(const CTLOG *log);
+const char * __cdecl CTLOG_get0_name(const CTLOG *log);
 /* Gets the ID of the CT log */
-void CTLOG_get0_log_id(const CTLOG *log, const uint8_t **log_id,
+void __cdecl CTLOG_get0_log_id(const CTLOG *log, const uint8_t **log_id,
                        size_t *log_id_len);
 /* Gets the public key of the CT log */
-EVP_PKEY *CTLOG_get0_public_key(const CTLOG *log);
+EVP_PKEY * __cdecl CTLOG_get0_public_key(const CTLOG *log);
 
 /**************************
  * CT log store functions *
@@ -440,18 +440,18 @@ EVP_PKEY *CTLOG_get0_public_key(const CTLOG *log);
  * Creates a new CT log store.
  * Should be deleted by the caller using CTLOG_STORE_free when no longer needed.
  */
-CTLOG_STORE *CTLOG_STORE_new(void);
+CTLOG_STORE * __cdecl CTLOG_STORE_new(void);
 
 /*
  * Deletes a CT log store and all of the CT log instances held within.
  */
-void CTLOG_STORE_free(CTLOG_STORE *store);
+void __cdecl CTLOG_STORE_free(CTLOG_STORE *store);
 
 /*
  * Finds a CT log in the store based on its log ID.
  * Returns the CT log, or NULL if no match is found.
  */
-const CTLOG *CTLOG_STORE_get0_log_by_id(const CTLOG_STORE *store,
+const CTLOG * __cdecl CTLOG_STORE_get0_log_by_id(const CTLOG_STORE *store,
                                         const uint8_t *log_id,
                                         size_t log_id_len);
 
@@ -459,7 +459,7 @@ const CTLOG *CTLOG_STORE_get0_log_by_id(const CTLOG_STORE *store,
  * Loads a CT log list into a |store| from a |file|.
  * Returns 1 if loading is successful, or 0 otherwise.
  */
-__owur int CTLOG_STORE_load_file(CTLOG_STORE *store, const char *file);
+__owur int __cdecl CTLOG_STORE_load_file(CTLOG_STORE *store, const char *file);
 
 /*
  * Loads the default CT log list into a |store|.
@@ -467,7 +467,7 @@ __owur int CTLOG_STORE_load_file(CTLOG_STORE *store, const char *file);
  * consulted to find the default file.
  * Returns 1 if loading is successful, or 0 otherwise.
  */
-__owur int CTLOG_STORE_load_default_file(CTLOG_STORE *store);
+__owur int __cdecl CTLOG_STORE_load_default_file(CTLOG_STORE *store);
 
 #  ifdef  __cplusplus
 }
diff --git a/include/openssl/cterr.h b/include/openssl/cterr.h
index feb7bc5663..a5cfb116bc 100644
--- a/include/openssl/cterr.h
+++ b/include/openssl/cterr.h
@@ -22,7 +22,7 @@
 #  ifdef  __cplusplus
 extern "C"
 #  endif
-int ERR_load_CT_strings(void);
+int __cdecl ERR_load_CT_strings(void);
 
 /*
  * CT function codes.
diff --git a/include/openssl/des.h b/include/openssl/des.h
index be4abbdfd0..e684a43b34 100644
--- a/include/openssl/des.h
+++ b/include/openssl/des.h
@@ -66,28 +66,28 @@ typedef struct DES_ks {
 OPENSSL_DECLARE_GLOBAL(int, DES_check_key); /* defaults to false */
 # define DES_check_key OPENSSL_GLOBAL_REF(DES_check_key)
 
-const char *DES_options(void);
-void DES_ecb3_encrypt(const_DES_cblock *input, DES_cblock *output,
+const char * __cdecl DES_options(void);
+void __cdecl DES_ecb3_encrypt(const_DES_cblock *input, DES_cblock *output,
                       DES_key_schedule *ks1, DES_key_schedule *ks2,
                       DES_key_schedule *ks3, int enc);
-DES_LONG DES_cbc_cksum(const unsigned char *input, DES_cblock *output,
+DES_LONG __cdecl DES_cbc_cksum(const unsigned char *input, DES_cblock *output,
                        long length, DES_key_schedule *schedule,
                        const_DES_cblock *ivec);
 /* DES_cbc_encrypt does not update the IV!  Use DES_ncbc_encrypt instead. */
-void DES_cbc_encrypt(const unsigned char *input, unsigned char *output,
+void __cdecl DES_cbc_encrypt(const unsigned char *input, unsigned char *output,
                      long length, DES_key_schedule *schedule,
                      DES_cblock *ivec, int enc);
-void DES_ncbc_encrypt(const unsigned char *input, unsigned char *output,
+void __cdecl DES_ncbc_encrypt(const unsigned char *input, unsigned char *output,
                       long length, DES_key_schedule *schedule,
                       DES_cblock *ivec, int enc);
-void DES_xcbc_encrypt(const unsigned char *input, unsigned char *output,
+void __cdecl DES_xcbc_encrypt(const unsigned char *input, unsigned char *output,
                       long length, DES_key_schedule *schedule,
                       DES_cblock *ivec, const_DES_cblock *inw,
                       const_DES_cblock *outw, int enc);
-void DES_cfb_encrypt(const unsigned char *in, unsigned char *out, int numbits,
+void __cdecl DES_cfb_encrypt(const unsigned char *in, unsigned char *out, int numbits,
                      long length, DES_key_schedule *schedule,
                      DES_cblock *ivec, int enc);
-void DES_ecb_encrypt(const_DES_cblock *input, DES_cblock *output,
+void __cdecl DES_ecb_encrypt(const_DES_cblock *input, DES_cblock *output,
                      DES_key_schedule *ks, int enc);
 
 /*
@@ -100,7 +100,7 @@ void DES_ecb_encrypt(const_DES_cblock *input, DES_cblock *output,
  * long's and ks is the DES_key_schedule to use.  enc, is non zero specifies
  * encryption, zero if decryption.
  */
-void DES_encrypt1(DES_LONG *data, DES_key_schedule *ks, int enc);
+void __cdecl DES_encrypt1(DES_LONG *data, DES_key_schedule *ks, int enc);
 
 /*
  * This functions is the same as DES_encrypt1() except that the DES initial
@@ -110,57 +110,57 @@ void DES_encrypt1(DES_LONG *data, DES_key_schedule *ks, int enc);
  * DES_encrypt2() DES_encrypt2() FP() is the same as DES_encrypt1()
  * DES_encrypt1() DES_encrypt1() except faster :-).
  */
-void DES_encrypt2(DES_LONG *data, DES_key_schedule *ks, int enc);
+void __cdecl DES_encrypt2(DES_LONG *data, DES_key_schedule *ks, int enc);
 
-void DES_encrypt3(DES_LONG *data, DES_key_schedule *ks1,
+void __cdecl DES_encrypt3(DES_LONG *data, DES_key_schedule *ks1,
                   DES_key_schedule *ks2, DES_key_schedule *ks3);
-void DES_decrypt3(DES_LONG *data, DES_key_schedule *ks1,
+void __cdecl DES_decrypt3(DES_LONG *data, DES_key_schedule *ks1,
                   DES_key_schedule *ks2, DES_key_schedule *ks3);
-void DES_ede3_cbc_encrypt(const unsigned char *input, unsigned char *output,
+void __cdecl DES_ede3_cbc_encrypt(const unsigned char *input, unsigned char *output,
                           long length,
                           DES_key_schedule *ks1, DES_key_schedule *ks2,
                           DES_key_schedule *ks3, DES_cblock *ivec, int enc);
-void DES_ede3_cfb64_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl DES_ede3_cfb64_encrypt(const unsigned char *in, unsigned char *out,
                             long length, DES_key_schedule *ks1,
                             DES_key_schedule *ks2, DES_key_schedule *ks3,
                             DES_cblock *ivec, int *num, int enc);
-void DES_ede3_cfb_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl DES_ede3_cfb_encrypt(const unsigned char *in, unsigned char *out,
                           int numbits, long length, DES_key_schedule *ks1,
                           DES_key_schedule *ks2, DES_key_schedule *ks3,
                           DES_cblock *ivec, int enc);
-void DES_ede3_ofb64_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl DES_ede3_ofb64_encrypt(const unsigned char *in, unsigned char *out,
                             long length, DES_key_schedule *ks1,
                             DES_key_schedule *ks2, DES_key_schedule *ks3,
                             DES_cblock *ivec, int *num);
-char *DES_fcrypt(const char *buf, const char *salt, char *ret);
-char *DES_crypt(const char *buf, const char *salt);
-void DES_ofb_encrypt(const unsigned char *in, unsigned char *out, int numbits,
+char * __cdecl DES_fcrypt(const char *buf, const char *salt, char *ret);
+char * __cdecl DES_crypt(const char *buf, const char *salt);
+void __cdecl DES_ofb_encrypt(const unsigned char *in, unsigned char *out, int numbits,
                      long length, DES_key_schedule *schedule,
                      DES_cblock *ivec);
-void DES_pcbc_encrypt(const unsigned char *input, unsigned char *output,
+void __cdecl DES_pcbc_encrypt(const unsigned char *input, unsigned char *output,
                       long length, DES_key_schedule *schedule,
                       DES_cblock *ivec, int enc);
-DES_LONG DES_quad_cksum(const unsigned char *input, DES_cblock output[],
+DES_LONG __cdecl DES_quad_cksum(const unsigned char *input, DES_cblock output[],
                         long length, int out_count, DES_cblock *seed);
-int DES_random_key(DES_cblock *ret);
-void DES_set_odd_parity(DES_cblock *key);
-int DES_check_key_parity(const_DES_cblock *key);
-int DES_is_weak_key(const_DES_cblock *key);
+int __cdecl DES_random_key(DES_cblock *ret);
+void __cdecl DES_set_odd_parity(DES_cblock *key);
+int __cdecl DES_check_key_parity(const_DES_cblock *key);
+int __cdecl DES_is_weak_key(const_DES_cblock *key);
 /*
  * DES_set_key (= set_key = DES_key_sched = key_sched) calls
  * DES_set_key_checked if global variable DES_check_key is set,
  * DES_set_key_unchecked otherwise.
  */
-int DES_set_key(const_DES_cblock *key, DES_key_schedule *schedule);
-int DES_key_sched(const_DES_cblock *key, DES_key_schedule *schedule);
-int DES_set_key_checked(const_DES_cblock *key, DES_key_schedule *schedule);
-void DES_set_key_unchecked(const_DES_cblock *key, DES_key_schedule *schedule);
-void DES_string_to_key(const char *str, DES_cblock *key);
-void DES_string_to_2keys(const char *str, DES_cblock *key1, DES_cblock *key2);
-void DES_cfb64_encrypt(const unsigned char *in, unsigned char *out,
+int __cdecl DES_set_key(const_DES_cblock *key, DES_key_schedule *schedule);
+int __cdecl DES_key_sched(const_DES_cblock *key, DES_key_schedule *schedule);
+int __cdecl DES_set_key_checked(const_DES_cblock *key, DES_key_schedule *schedule);
+void __cdecl DES_set_key_unchecked(const_DES_cblock *key, DES_key_schedule *schedule);
+void __cdecl DES_string_to_key(const char *str, DES_cblock *key);
+void __cdecl DES_string_to_2keys(const char *str, DES_cblock *key1, DES_cblock *key2);
+void __cdecl DES_cfb64_encrypt(const unsigned char *in, unsigned char *out,
                        long length, DES_key_schedule *schedule,
                        DES_cblock *ivec, int *num, int enc);
-void DES_ofb64_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl DES_ofb64_encrypt(const unsigned char *in, unsigned char *out,
                        long length, DES_key_schedule *schedule,
                        DES_cblock *ivec, int *num);
 
diff --git a/include/openssl/dh.h b/include/openssl/dh.h
index 3527540cdd..2177cc3c4e 100644
--- a/include/openssl/dh.h
+++ b/include/openssl/dh.h
@@ -112,25 +112,25 @@ DECLARE_ASN1_ITEM(DHparams)
 # define i2d_DHxparams_bio(bp,x) \
     ASN1_i2d_bio_of_const(DH, i2d_DHxparams, bp, x)
 
-DH *DHparams_dup(DH *);
+DH * __cdecl DHparams_dup(DH *);
 
-const DH_METHOD *DH_OpenSSL(void);
+const DH_METHOD * __cdecl DH_OpenSSL(void);
 
-void DH_set_default_method(const DH_METHOD *meth);
-const DH_METHOD *DH_get_default_method(void);
-int DH_set_method(DH *dh, const DH_METHOD *meth);
-DH *DH_new_method(ENGINE *engine);
+void __cdecl DH_set_default_method(const DH_METHOD *meth);
+const DH_METHOD * __cdecl DH_get_default_method(void);
+int __cdecl DH_set_method(DH *dh, const DH_METHOD *meth);
+DH * __cdecl DH_new_method(ENGINE *engine);
 
-DH *DH_new(void);
-void DH_free(DH *dh);
-int DH_up_ref(DH *dh);
-int DH_bits(const DH *dh);
-int DH_size(const DH *dh);
-int DH_security_bits(const DH *dh);
+DH * __cdecl DH_new(void);
+void __cdecl DH_free(DH *dh);
+int __cdecl DH_up_ref(DH *dh);
+int __cdecl DH_bits(const DH *dh);
+int __cdecl DH_size(const DH *dh);
+int __cdecl DH_security_bits(const DH *dh);
 #define DH_get_ex_new_index(l, p, newf, dupf, freef) \
     CRYPTO_get_ex_new_index(CRYPTO_EX_INDEX_DH, l, p, newf, dupf, freef)
-int DH_set_ex_data(DH *d, int idx, void *arg);
-void *DH_get_ex_data(DH *d, int idx);
+int __cdecl DH_set_ex_data(DH *d, int idx, void *arg);
+void * __cdecl DH_get_ex_data(DH *d, int idx);
 
 /* Deprecated version */
 DEPRECATEDIN_0_9_8(DH *DH_generate_parameters(int prime_len, int generator,
@@ -139,90 +139,90 @@ DEPRECATEDIN_0_9_8(DH *DH_generate_parameters(int prime_len, int generator,
                                               void *cb_arg))
 
 /* New version */
-int DH_generate_parameters_ex(DH *dh, int prime_len, int generator,
+int __cdecl DH_generate_parameters_ex(DH *dh, int prime_len, int generator,
                               BN_GENCB *cb);
 
-int DH_check_params_ex(const DH *dh);
-int DH_check_ex(const DH *dh);
-int DH_check_pub_key_ex(const DH *dh, const BIGNUM *pub_key);
-int DH_check_params(const DH *dh, int *ret);
-int DH_check(const DH *dh, int *codes);
-int DH_check_pub_key(const DH *dh, const BIGNUM *pub_key, int *codes);
-int DH_generate_key(DH *dh);
-int DH_compute_key(unsigned char *key, const BIGNUM *pub_key, DH *dh);
-int DH_compute_key_padded(unsigned char *key, const BIGNUM *pub_key, DH *dh);
-DH *d2i_DHparams(DH **a, const unsigned char **pp, long length);
-int i2d_DHparams(const DH *a, unsigned char **pp);
-DH *d2i_DHxparams(DH **a, const unsigned char **pp, long length);
-int i2d_DHxparams(const DH *a, unsigned char **pp);
+int __cdecl DH_check_params_ex(const DH *dh);
+int __cdecl DH_check_ex(const DH *dh);
+int __cdecl DH_check_pub_key_ex(const DH *dh, const BIGNUM *pub_key);
+int __cdecl DH_check_params(const DH *dh, int *ret);
+int __cdecl DH_check(const DH *dh, int *codes);
+int __cdecl DH_check_pub_key(const DH *dh, const BIGNUM *pub_key, int *codes);
+int __cdecl DH_generate_key(DH *dh);
+int __cdecl DH_compute_key(unsigned char *key, const BIGNUM *pub_key, DH *dh);
+int __cdecl DH_compute_key_padded(unsigned char *key, const BIGNUM *pub_key, DH *dh);
+DH * __cdecl d2i_DHparams(DH **a, const unsigned char **pp, long length);
+int __cdecl i2d_DHparams(const DH *a, unsigned char **pp);
+DH * __cdecl d2i_DHxparams(DH **a, const unsigned char **pp, long length);
+int __cdecl i2d_DHxparams(const DH *a, unsigned char **pp);
 # ifndef OPENSSL_NO_STDIO
-int DHparams_print_fp(FILE *fp, const DH *x);
+int __cdecl DHparams_print_fp(FILE *fp, const DH *x);
 # endif
-int DHparams_print(BIO *bp, const DH *x);
+int __cdecl DHparams_print(BIO *bp, const DH *x);
 
 /* RFC 5114 parameters */
-DH *DH_get_1024_160(void);
-DH *DH_get_2048_224(void);
-DH *DH_get_2048_256(void);
+DH * __cdecl DH_get_1024_160(void);
+DH * __cdecl DH_get_2048_224(void);
+DH * __cdecl DH_get_2048_256(void);
 
 /* Named parameters, currently RFC7919 */
-DH *DH_new_by_nid(int nid);
-int DH_get_nid(const DH *dh);
+DH * __cdecl DH_new_by_nid(int nid);
+int __cdecl DH_get_nid(const DH *dh);
 
 # ifndef OPENSSL_NO_CMS
 /* RFC2631 KDF */
-int DH_KDF_X9_42(unsigned char *out, size_t outlen,
+int __cdecl DH_KDF_X9_42(unsigned char *out, size_t outlen,
                  const unsigned char *Z, size_t Zlen,
                  ASN1_OBJECT *key_oid,
                  const unsigned char *ukm, size_t ukmlen, const EVP_MD *md);
 # endif
 
-void DH_get0_pqg(const DH *dh,
+void __cdecl DH_get0_pqg(const DH *dh,
                  const BIGNUM **p, const BIGNUM **q, const BIGNUM **g);
-int DH_set0_pqg(DH *dh, BIGNUM *p, BIGNUM *q, BIGNUM *g);
-void DH_get0_key(const DH *dh,
+int __cdecl DH_set0_pqg(DH *dh, BIGNUM *p, BIGNUM *q, BIGNUM *g);
+void __cdecl DH_get0_key(const DH *dh,
                  const BIGNUM **pub_key, const BIGNUM **priv_key);
-int DH_set0_key(DH *dh, BIGNUM *pub_key, BIGNUM *priv_key);
-const BIGNUM *DH_get0_p(const DH *dh);
-const BIGNUM *DH_get0_q(const DH *dh);
-const BIGNUM *DH_get0_g(const DH *dh);
-const BIGNUM *DH_get0_priv_key(const DH *dh);
-const BIGNUM *DH_get0_pub_key(const DH *dh);
-void DH_clear_flags(DH *dh, int flags);
-int DH_test_flags(const DH *dh, int flags);
-void DH_set_flags(DH *dh, int flags);
-ENGINE *DH_get0_engine(DH *d);
-long DH_get_length(const DH *dh);
-int DH_set_length(DH *dh, long length);
-
-DH_METHOD *DH_meth_new(const char *name, int flags);
-void DH_meth_free(DH_METHOD *dhm);
-DH_METHOD *DH_meth_dup(const DH_METHOD *dhm);
-const char *DH_meth_get0_name(const DH_METHOD *dhm);
-int DH_meth_set1_name(DH_METHOD *dhm, const char *name);
-int DH_meth_get_flags(const DH_METHOD *dhm);
-int DH_meth_set_flags(DH_METHOD *dhm, int flags);
-void *DH_meth_get0_app_data(const DH_METHOD *dhm);
-int DH_meth_set0_app_data(DH_METHOD *dhm, void *app_data);
-int (*DH_meth_get_generate_key(const DH_METHOD *dhm)) (DH *);
-int DH_meth_set_generate_key(DH_METHOD *dhm, int (*generate_key) (DH *));
-int (*DH_meth_get_compute_key(const DH_METHOD *dhm))
+int __cdecl DH_set0_key(DH *dh, BIGNUM *pub_key, BIGNUM *priv_key);
+const BIGNUM * __cdecl DH_get0_p(const DH *dh);
+const BIGNUM * __cdecl DH_get0_q(const DH *dh);
+const BIGNUM * __cdecl DH_get0_g(const DH *dh);
+const BIGNUM * __cdecl DH_get0_priv_key(const DH *dh);
+const BIGNUM * __cdecl DH_get0_pub_key(const DH *dh);
+void __cdecl DH_clear_flags(DH *dh, int flags);
+int __cdecl DH_test_flags(const DH *dh, int flags);
+void __cdecl DH_set_flags(DH *dh, int flags);
+ENGINE * __cdecl DH_get0_engine(DH *d);
+long __cdecl DH_get_length(const DH *dh);
+int __cdecl DH_set_length(DH *dh, long length);
+
+DH_METHOD * __cdecl DH_meth_new(const char *name, int flags);
+void __cdecl DH_meth_free(DH_METHOD *dhm);
+DH_METHOD * __cdecl DH_meth_dup(const DH_METHOD *dhm);
+const char * __cdecl DH_meth_get0_name(const DH_METHOD *dhm);
+int __cdecl DH_meth_set1_name(DH_METHOD *dhm, const char *name);
+int __cdecl DH_meth_get_flags(const DH_METHOD *dhm);
+int __cdecl DH_meth_set_flags(DH_METHOD *dhm, int flags);
+void * __cdecl DH_meth_get0_app_data(const DH_METHOD *dhm);
+int __cdecl DH_meth_set0_app_data(DH_METHOD *dhm, void *app_data);
+int (* __cdecl DH_meth_get_generate_key(const DH_METHOD *dhm)) (DH *);
+int __cdecl DH_meth_set_generate_key(DH_METHOD *dhm, int (*generate_key) (DH *));
+int (* __cdecl DH_meth_get_compute_key(const DH_METHOD *dhm))
         (unsigned char *key, const BIGNUM *pub_key, DH *dh);
-int DH_meth_set_compute_key(DH_METHOD *dhm,
+int __cdecl DH_meth_set_compute_key(DH_METHOD *dhm,
         int (*compute_key) (unsigned char *key, const BIGNUM *pub_key, DH *dh));
-int (*DH_meth_get_bn_mod_exp(const DH_METHOD *dhm))
+int (* __cdecl DH_meth_get_bn_mod_exp(const DH_METHOD *dhm))
     (const DH *, BIGNUM *, const BIGNUM *, const BIGNUM *, const BIGNUM *,
      BN_CTX *, BN_MONT_CTX *);
-int DH_meth_set_bn_mod_exp(DH_METHOD *dhm,
+int __cdecl DH_meth_set_bn_mod_exp(DH_METHOD *dhm,
     int (*bn_mod_exp) (const DH *, BIGNUM *, const BIGNUM *, const BIGNUM *,
                        const BIGNUM *, BN_CTX *, BN_MONT_CTX *));
-int (*DH_meth_get_init(const DH_METHOD *dhm))(DH *);
-int DH_meth_set_init(DH_METHOD *dhm, int (*init)(DH *));
-int (*DH_meth_get_finish(const DH_METHOD *dhm)) (DH *);
-int DH_meth_set_finish(DH_METHOD *dhm, int (*finish) (DH *));
-int (*DH_meth_get_generate_params(const DH_METHOD *dhm))
+int (* __cdecl DH_meth_get_init(const DH_METHOD *dhm))(DH *);
+int __cdecl DH_meth_set_init(DH_METHOD *dhm, int (*init)(DH *));
+int (* __cdecl DH_meth_get_finish(const DH_METHOD *dhm)) (DH *);
+int __cdecl DH_meth_set_finish(DH_METHOD *dhm, int (*finish) (DH *));
+int (* __cdecl DH_meth_get_generate_params(const DH_METHOD *dhm))
         (DH *, int, int, BN_GENCB *);
-int DH_meth_set_generate_params(DH_METHOD *dhm,
+int __cdecl DH_meth_set_generate_params(DH_METHOD *dhm,
         int (*generate_params) (DH *, int, int, BN_GENCB *));
 
 
diff --git a/include/openssl/dherr.h b/include/openssl/dherr.h
index 916b3bed0b..7b3098fe06 100644
--- a/include/openssl/dherr.h
+++ b/include/openssl/dherr.h
@@ -22,7 +22,7 @@
 #  ifdef  __cplusplus
 extern "C"
 #  endif
-int ERR_load_DH_strings(void);
+int __cdecl ERR_load_DH_strings(void);
 
 /*
  * DH function codes.
diff --git a/include/openssl/dsa.h b/include/openssl/dsa.h
index 822eff347a..8ac92c3c88 100644
--- a/include/openssl/dsa.h
+++ b/include/openssl/dsa.h
@@ -74,8 +74,8 @@ typedef struct DSA_SIG_st DSA_SIG;
 DSA *DSAparams_dup(DSA *x);
 DSA_SIG *DSA_SIG_new(void);
 void DSA_SIG_free(DSA_SIG *a);
-int i2d_DSA_SIG(const DSA_SIG *a, unsigned char **pp);
-DSA_SIG *d2i_DSA_SIG(DSA_SIG **v, const unsigned char **pp, long length);
+int __cdecl i2d_DSA_SIG(const DSA_SIG *a, unsigned char **pp);
+DSA_SIG * __cdecl d2i_DSA_SIG(DSA_SIG **v, const unsigned char **pp, long length);
 void DSA_SIG_get0(const DSA_SIG *sig, const BIGNUM **pr, const BIGNUM **ps);
 int DSA_SIG_set0(DSA_SIG *sig, BIGNUM *r, BIGNUM *s);
 
@@ -90,7 +90,7 @@ const DSA_METHOD *DSA_get_default_method(void);
 int DSA_set_method(DSA *dsa, const DSA_METHOD *);
 const DSA_METHOD *DSA_get_method(DSA *d);
 
-DSA *DSA_new(void);
+DSA * __cdecl DSA_new(void);
 DSA *DSA_new_method(ENGINE *engine);
 void DSA_free(DSA *r);
 /* "up" the DSA object's reference count */
@@ -109,9 +109,9 @@ int DSA_verify(int type, const unsigned char *dgst, int dgst_len,
 int DSA_set_ex_data(DSA *d, int idx, void *arg);
 void *DSA_get_ex_data(DSA *d, int idx);
 
-DSA *d2i_DSAPublicKey(DSA **a, const unsigned char **pp, long length);
-DSA *d2i_DSAPrivateKey(DSA **a, const unsigned char **pp, long length);
-DSA *d2i_DSAparams(DSA **a, const unsigned char **pp, long length);
+DSA * __cdecl d2i_DSAPublicKey(DSA **a, const unsigned char **pp, long length);
+DSA * __cdecl d2i_DSAPrivateKey(DSA **a, const unsigned char **pp, long length);
+DSA * __cdecl d2i_DSAparams(DSA **a, const unsigned char **pp, long length);
 
 /* Deprecated version */
 DEPRECATEDIN_0_9_8(DSA *DSA_generate_parameters(int bits,
@@ -130,9 +130,9 @@ int DSA_generate_parameters_ex(DSA *dsa, int bits,
                                BN_GENCB *cb);
 
 int DSA_generate_key(DSA *a);
-int i2d_DSAPublicKey(const DSA *a, unsigned char **pp);
-int i2d_DSAPrivateKey(const DSA *a, unsigned char **pp);
-int i2d_DSAparams(const DSA *a, unsigned char **pp);
+int __cdecl i2d_DSAPublicKey(const DSA *a, unsigned char **pp);
+int __cdecl i2d_DSAPrivateKey(const DSA *a, unsigned char **pp);
+int __cdecl i2d_DSAparams(const DSA *a, unsigned char **pp);
 
 int DSAparams_print(BIO *bp, const DSA *x);
 int DSA_print(BIO *bp, const DSA *x, int off);
diff --git a/include/openssl/dsaerr.h b/include/openssl/dsaerr.h
index 495a1ac89d..c5e5fd2fe9 100644
--- a/include/openssl/dsaerr.h
+++ b/include/openssl/dsaerr.h
@@ -22,7 +22,7 @@
 #  ifdef  __cplusplus
 extern "C"
 #  endif
-int ERR_load_DSA_strings(void);
+int __cdecl ERR_load_DSA_strings(void);
 
 /*
  * DSA function codes.
diff --git a/include/openssl/ec.h b/include/openssl/ec.h
index 5af9ebdc7f..0cf364a219 100644
--- a/include/openssl/ec.h
+++ b/include/openssl/ec.h
@@ -790,8 +790,8 @@ int EC_GROUP_get_pentanomial_basis(const EC_GROUP *, unsigned int *k1,
 # define OPENSSL_EC_EXPLICIT_CURVE  0x000
 # define OPENSSL_EC_NAMED_CURVE     0x001
 
-EC_GROUP *d2i_ECPKParameters(EC_GROUP **, const unsigned char **in, long len);
-int i2d_ECPKParameters(const EC_GROUP *, unsigned char **out);
+EC_GROUP * __cdecl d2i_ECPKParameters(EC_GROUP **, const unsigned char **in, long len);
+int __cdecl i2d_ECPKParameters(const EC_GROUP *, unsigned char **out);
 
 # define d2i_ECPKParameters_bio(bp,x) ASN1_d2i_bio_of(EC_GROUP,NULL,d2i_ECPKParameters,bp,x)
 # define i2d_ECPKParameters_bio(bp,x) ASN1_i2d_bio_of_const(EC_GROUP,i2d_ECPKParameters,bp,x)
@@ -821,7 +821,7 @@ int ECPKParameters_print_fp(FILE *fp, const EC_GROUP *x, int off);
 /** Creates a new EC_KEY object.
  *  \return EC_KEY object or NULL if an error occurred.
  */
-EC_KEY *EC_KEY_new(void);
+EC_KEY * __cdecl EC_KEY_new(void);
 
 int EC_KEY_get_flags(const EC_KEY *key);
 
@@ -1014,7 +1014,7 @@ size_t EC_KEY_priv2buf(const EC_KEY *eckey, unsigned char **pbuf);
  *  \param  len  length of the DER encoded private key
  *  \return the decoded private key or NULL if an error occurred.
  */
-EC_KEY *d2i_ECPrivateKey(EC_KEY **key, const unsigned char **in, long len);
+EC_KEY * __cdecl d2i_ECPrivateKey(EC_KEY **key, const unsigned char **in, long len);
 
 /** Encodes a private key object and stores the result in a buffer.
  *  \param  key  the EC_KEY object to encode
@@ -1022,7 +1022,7 @@ EC_KEY *d2i_ECPrivateKey(EC_KEY **key, const unsigned char **in, long len);
  *               of bytes needed).
  *  \return 1 on success and 0 if an error occurred.
  */
-int i2d_ECPrivateKey(EC_KEY *key, unsigned char **out);
+int __cdecl i2d_ECPrivateKey(EC_KEY *key, unsigned char **out);
 
 /********************************************************************/
 /*        de- and encoding functions for EC parameters              */
@@ -1127,12 +1127,12 @@ typedef struct ECDSA_SIG_st ECDSA_SIG;
 /** Allocates and initialize a ECDSA_SIG structure
  *  \return pointer to a ECDSA_SIG structure or NULL if an error occurred
  */
-ECDSA_SIG *ECDSA_SIG_new(void);
+ECDSA_SIG * __cdecl ECDSA_SIG_new(void);
 
 /** frees a ECDSA_SIG structure
  *  \param  sig  pointer to the ECDSA_SIG structure
  */
-void ECDSA_SIG_free(ECDSA_SIG *sig);
+void __cdecl ECDSA_SIG_free(ECDSA_SIG *sig);
 
 /** DER encode content of ECDSA_SIG object (note: this function modifies *pp
  *  (*pp += length of the DER encoded signature)).
@@ -1141,7 +1141,7 @@ void ECDSA_SIG_free(ECDSA_SIG *sig);
  *  \return the length of the DER encoded ECDSA_SIG object or a negative value
  *          on error
  */
-int i2d_ECDSA_SIG(const ECDSA_SIG *sig, unsigned char **pp);
+int __cdecl i2d_ECDSA_SIG(const ECDSA_SIG *sig, unsigned char **pp);
 
 /** Decodes a DER encoded ECDSA signature (note: this function changes *pp
  *  (*pp += len)).
@@ -1150,7 +1150,7 @@ int i2d_ECDSA_SIG(const ECDSA_SIG *sig, unsigned char **pp);
  *  \param  len  length of the buffer
  *  \return pointer to the decoded ECDSA_SIG structure (or NULL)
  */
-ECDSA_SIG *d2i_ECDSA_SIG(ECDSA_SIG **sig, const unsigned char **pp, long len);
+ECDSA_SIG * __cdecl d2i_ECDSA_SIG(ECDSA_SIG **sig, const unsigned char **pp, long len);
 
 /** Accessor for r and s fields of ECDSA_SIG
  *  \param  sig  pointer to ECDSA_SIG structure
diff --git a/include/openssl/engine.h b/include/openssl/engine.h
index 0780f0fb5f..226277635a 100644
--- a/include/openssl/engine.h
+++ b/include/openssl/engine.h
@@ -656,9 +656,9 @@ void ENGINE_add_conf_module(void);
  * same static data as the calling application (or library), and thus whether
  * these callbacks need to be set or not.
  */
-typedef void *(*dyn_MEM_malloc_fn) (size_t, const char *, int);
-typedef void *(*dyn_MEM_realloc_fn) (void *, size_t, const char *, int);
-typedef void (*dyn_MEM_free_fn) (void *, const char *, int);
+typedef void *(__cdecl *dyn_MEM_malloc_fn) (size_t, const char *, int);
+typedef void *(__cdecl *dyn_MEM_realloc_fn) (void *, size_t, const char *, int);
+typedef void (__cdecl *dyn_MEM_free_fn) (void *, const char *, int);
 typedef struct st_dynamic_MEM_fns {
     dyn_MEM_malloc_fn malloc_fn;
     dyn_MEM_realloc_fn realloc_fn;
diff --git a/include/openssl/err.h b/include/openssl/err.h
index b49f88129e..d4eec4ffcf 100644
--- a/include/openssl/err.h
+++ b/include/openssl/err.h
@@ -232,24 +232,24 @@ unsigned long ERR_peek_last_error(void);
 unsigned long ERR_peek_last_error_line(const char **file, int *line);
 unsigned long ERR_peek_last_error_line_data(const char **file, int *line,
                                             const char **data, int *flags);
-void ERR_clear_error(void);
-char *ERR_error_string(unsigned long e, char *buf);
-void ERR_error_string_n(unsigned long e, char *buf, size_t len);
-const char *ERR_lib_error_string(unsigned long e);
-const char *ERR_func_error_string(unsigned long e);
-const char *ERR_reason_error_string(unsigned long e);
-void ERR_print_errors_cb(int (*cb) (const char *str, size_t len, void *u),
+void __cdecl ERR_clear_error(void);
+char *__cdecl ERR_error_string(unsigned long e, char *buf);
+void __cdecl ERR_error_string_n(unsigned long e, char *buf, size_t len);
+const char * __cdecl ERR_lib_error_string(unsigned long e);
+const char * __cdecl ERR_func_error_string(unsigned long e);
+const char * __cdecl ERR_reason_error_string(unsigned long e);
+void __cdecl ERR_print_errors_cb(int (*cb) (const char *str, size_t len, void *u),
                          void *u);
 # ifndef OPENSSL_NO_STDIO
-void ERR_print_errors_fp(FILE *fp);
+void __cdecl ERR_print_errors_fp(FILE *fp);
 # endif
-void ERR_print_errors(BIO *bp);
-void ERR_add_error_data(int num, ...);
-void ERR_add_error_vdata(int num, va_list args);
-int ERR_load_strings(int lib, ERR_STRING_DATA *str);
-int ERR_load_strings_const(const ERR_STRING_DATA *str);
-int ERR_unload_strings(int lib, ERR_STRING_DATA *str);
-int ERR_load_ERR_strings(void);
+void __cdecl ERR_print_errors(BIO *bp);
+void __cdecl ERR_add_error_data(int num, ...);
+void __cdecl ERR_add_error_vdata(int num, va_list args);
+int __cdecl ERR_load_strings(int lib, ERR_STRING_DATA *str);
+int __cdecl ERR_load_strings_const(const ERR_STRING_DATA *str);
+int __cdecl ERR_unload_strings(int lib, ERR_STRING_DATA *str);
+int __cdecl ERR_load_ERR_strings(void);
 
 #if OPENSSL_API_COMPAT < 0x10100000L
 # define ERR_load_crypto_strings() \
@@ -259,7 +259,7 @@ int ERR_load_ERR_strings(void);
 
 DEPRECATEDIN_1_1_0(void ERR_remove_thread_state(void *))
 DEPRECATEDIN_1_0_0(void ERR_remove_state(unsigned long pid))
-ERR_STATE *ERR_get_state(void);
+ERR_STATE * __cdecl ERR_get_state(void);
 
 int ERR_get_next_error_library(void);
 
diff --git a/include/openssl/evp.h b/include/openssl/evp.h
index 545654a98b..2df94c4d66 100644
--- a/include/openssl/evp.h
+++ b/include/openssl/evp.h
@@ -1036,7 +1036,7 @@ struct ec_key_st *EVP_PKEY_get0_EC_KEY(EVP_PKEY *pkey);
 struct ec_key_st *EVP_PKEY_get1_EC_KEY(EVP_PKEY *pkey);
 # endif
 
-EVP_PKEY *EVP_PKEY_new(void);
+EVP_PKEY * __cdecl EVP_PKEY_new(void);
 int EVP_PKEY_up_ref(EVP_PKEY *pkey);
 void EVP_PKEY_free(EVP_PKEY *pkey);
 
@@ -1046,9 +1046,9 @@ int i2d_PublicKey(EVP_PKEY *a, unsigned char **pp);
 
 EVP_PKEY *d2i_PrivateKey(int type, EVP_PKEY **a, const unsigned char **pp,
                          long length);
-EVP_PKEY *d2i_AutoPrivateKey(EVP_PKEY **a, const unsigned char **pp,
+EVP_PKEY * __cdecl d2i_AutoPrivateKey(EVP_PKEY **a, const unsigned char **pp,
                              long length);
-int i2d_PrivateKey(EVP_PKEY *a, unsigned char **pp);
+int __cdecl i2d_PrivateKey(EVP_PKEY *a, unsigned char **pp);
 
 int EVP_PKEY_copy_parameters(EVP_PKEY *to, const EVP_PKEY *from);
 int EVP_PKEY_missing_parameters(const EVP_PKEY *pkey);
@@ -1329,7 +1329,7 @@ EVP_PKEY_METHOD *EVP_PKEY_meth_new(int id, int flags);
 void EVP_PKEY_meth_get0_info(int *ppkey_id, int *pflags,
                              const EVP_PKEY_METHOD *meth);
 void EVP_PKEY_meth_copy(EVP_PKEY_METHOD *dst, const EVP_PKEY_METHOD *src);
-void EVP_PKEY_meth_free(EVP_PKEY_METHOD *pmeth);
+void __cdecl EVP_PKEY_meth_free(EVP_PKEY_METHOD *pmeth);
 int EVP_PKEY_meth_add0(const EVP_PKEY_METHOD *pmeth);
 int EVP_PKEY_meth_remove(const EVP_PKEY_METHOD *pmeth);
 size_t EVP_PKEY_meth_get_count(void);
diff --git a/include/openssl/lhash.h b/include/openssl/lhash.h
index 47b99d17fb..e37335400e 100644
--- a/include/openssl/lhash.h
+++ b/include/openssl/lhash.h
@@ -72,7 +72,7 @@ typedef struct lhash_st OPENSSL_LHASH;
 int OPENSSL_LH_error(OPENSSL_LHASH *lh);
 OPENSSL_LHASH *OPENSSL_LH_new(OPENSSL_LH_HASHFUNC h, OPENSSL_LH_COMPFUNC c);
 void OPENSSL_LH_free(OPENSSL_LHASH *lh);
-void *OPENSSL_LH_insert(OPENSSL_LHASH *lh, void *data);
+void * __cdecl OPENSSL_LH_insert(OPENSSL_LHASH *lh, void *data);
 void *OPENSSL_LH_delete(OPENSSL_LHASH *lh, const void *data);
 void *OPENSSL_LH_retrieve(OPENSSL_LHASH *lh, const void *data);
 void OPENSSL_LH_doall(OPENSSL_LHASH *lh, OPENSSL_LH_DOALL_FUNC func);
@@ -122,7 +122,7 @@ void OPENSSL_LH_node_usage_stats_bio(const OPENSSL_LHASH *lh, BIO *out);
     LHASH_OF(type) { union lh_##type##_dummy { void* d1; unsigned long d2; int d3; } dummy; }; \
     static ossl_inline LHASH_OF(type) * \
         lh_##type##_new(unsigned long (*hfn)(const type *), \
-                        int (*cfn)(const type *, const type *)) \
+                        int (__cdecl *cfn)(const type *, const type *)) \
     { \
         return (LHASH_OF(type) *) \
             OPENSSL_LH_new((OPENSSL_LH_HASHFUNC)hfn, (OPENSSL_LH_COMPFUNC)cfn); \
diff --git a/include/openssl/objects.h b/include/openssl/objects.h
index 5e8b5762f8..c7e8ce2d0d 100644
--- a/include/openssl/objects.h
+++ b/include/openssl/objects.h
@@ -43,7 +43,7 @@ typedef struct obj_name_st {
 
 int OBJ_NAME_init(void);
 int OBJ_NAME_new_index(unsigned long (*hash_func) (const char *),
-                       int (*cmp_func) (const char *, const char *),
+                       int (__cdecl *cmp_func) (const char *, const char *),
                        void (*free_func) (const char *, int, const char *));
 const char *OBJ_NAME_get(const char *name, int type);
 int OBJ_NAME_add(const char *name, int type, const char *data);
@@ -67,15 +67,15 @@ int OBJ_ln2nid(const char *s);
 int OBJ_sn2nid(const char *s);
 int OBJ_cmp(const ASN1_OBJECT *a, const ASN1_OBJECT *b);
 const void *OBJ_bsearch_(const void *key, const void *base, int num, int size,
-                         int (*cmp) (const void *, const void *));
+                         int (__cdecl *cmp) (const void *, const void *));
 const void *OBJ_bsearch_ex_(const void *key, const void *base, int num,
                             int size,
-                            int (*cmp) (const void *, const void *),
+                            int (__cdecl *cmp) (const void *, const void *),
                             int flags);
 
 # define _DECLARE_OBJ_BSEARCH_CMP_FN(scope, type1, type2, nm)    \
-  static int nm##_cmp_BSEARCH_CMP_FN(const void *, const void *); \
-  static int nm##_cmp(type1 const *, type2 const *); \
+  static int __cdecl nm##_cmp_BSEARCH_CMP_FN(const void *, const void *); \
+  static int __cdecl nm##_cmp(type1 const *, type2 const *); \
   scope type2 * OBJ_bsearch_##nm(type1 *key, type2 const *base, int num)
 
 # define DECLARE_OBJ_BSEARCH_CMP_FN(type1, type2, cmp)   \
@@ -111,7 +111,7 @@ const void *OBJ_bsearch_ex_(const void *key, const void *base, int num,
  */
 
 # define IMPLEMENT_OBJ_BSEARCH_CMP_FN(type1, type2, nm)  \
-  static int nm##_cmp_BSEARCH_CMP_FN(const void *a_, const void *b_)    \
+  static int __cdecl nm##_cmp_BSEARCH_CMP_FN(const void *a_, const void *b_)    \
       { \
       type1 const *a = a_; \
       type2 const *b = b_; \
@@ -125,7 +125,7 @@ const void *OBJ_bsearch_ex_(const void *key, const void *base, int num,
       extern void dummy_prototype(void)
 
 # define IMPLEMENT_OBJ_BSEARCH_GLOBAL_CMP_FN(type1, type2, nm)   \
-  static int nm##_cmp_BSEARCH_CMP_FN(const void *a_, const void *b_)    \
+  static int __cdecl nm##_cmp_BSEARCH_CMP_FN(const void *a_, const void *b_)    \
       { \
       type1 const *a = a_; \
       type2 const *b = b_; \
diff --git a/include/openssl/ocsp.h b/include/openssl/ocsp.h
index 8582fe1ee1..c0accac758 100644
--- a/include/openssl/ocsp.h
+++ b/include/openssl/ocsp.h
@@ -146,7 +146,7 @@ typedef struct ocsp_service_locator_st OCSP_SERVICELOC;
                 (OCSP_CERTSTATUS*)ASN1_dup((int(*)())i2d_OCSP_CERTSTATUS,\
                 (char *(*)())d2i_OCSP_CERTSTATUS,(char *)(cs))
 
-OCSP_CERTID *OCSP_CERTID_dup(OCSP_CERTID *id);
+OCSP_CERTID * __cdecl OCSP_CERTID_dup(OCSP_CERTID *id);
 
 OCSP_RESPONSE *OCSP_sendreq_bio(BIO *b, const char *path, OCSP_REQUEST *req);
 OCSP_REQ_CTX *OCSP_sendreq_new(BIO *io, const char *path, OCSP_REQUEST *req,
diff --git a/include/openssl/pkcs7.h b/include/openssl/pkcs7.h
index 9b66e002d2..6aa4a89a01 100644
--- a/include/openssl/pkcs7.h
+++ b/include/openssl/pkcs7.h
@@ -210,7 +210,7 @@ int PKCS7_ISSUER_AND_SERIAL_digest(PKCS7_ISSUER_AND_SERIAL *data,
 PKCS7 *d2i_PKCS7_fp(FILE *fp, PKCS7 **p7);
 int i2d_PKCS7_fp(FILE *fp, PKCS7 *p7);
 # endif
-PKCS7 *PKCS7_dup(PKCS7 *p7);
+PKCS7 * __cdecl PKCS7_dup(PKCS7 *p7);
 PKCS7 *d2i_PKCS7_bio(BIO *bp, PKCS7 **p7);
 int i2d_PKCS7_bio(BIO *bp, PKCS7 *p7);
 int i2d_PKCS7_bio_stream(BIO *out, PKCS7 *p7, BIO *in, int flags);
diff --git a/include/openssl/rsa.h b/include/openssl/rsa.h
index cdce1264eb..037bf42a88 100644
--- a/include/openssl/rsa.h
+++ b/include/openssl/rsa.h
@@ -195,7 +195,7 @@ extern "C" {
 # define RSA_set_app_data(s,arg)         RSA_set_ex_data(s,0,arg)
 # define RSA_get_app_data(s)             RSA_get_ex_data(s,0)
 
-RSA *RSA_new(void);
+RSA * __cdecl RSA_new(void);
 RSA *RSA_new_method(ENGINE *engine);
 int RSA_bits(const RSA *rsa);
 int RSA_size(const RSA *rsa);
@@ -427,81 +427,81 @@ int RSA_meth_get_flags(const RSA_METHOD *meth);
 int RSA_meth_set_flags(RSA_METHOD *meth, int flags);
 void *RSA_meth_get0_app_data(const RSA_METHOD *meth);
 int RSA_meth_set0_app_data(RSA_METHOD *meth, void *app_data);
-int (*RSA_meth_get_pub_enc(const RSA_METHOD *meth))
+int (__cdecl *RSA_meth_get_pub_enc(const RSA_METHOD *meth))
     (int flen, const unsigned char *from,
      unsigned char *to, RSA *rsa, int padding);
-int RSA_meth_set_pub_enc(RSA_METHOD *rsa,
-                         int (*pub_enc) (int flen, const unsigned char *from,
+int __cdecl RSA_meth_set_pub_enc(RSA_METHOD *rsa,
+                         int (__cdecl *pub_enc) (int flen, const unsigned char *from,
                                          unsigned char *to, RSA *rsa,
                                          int padding));
-int (*RSA_meth_get_pub_dec(const RSA_METHOD *meth))
+int (__cdecl *RSA_meth_get_pub_dec(const RSA_METHOD *meth))
     (int flen, const unsigned char *from,
      unsigned char *to, RSA *rsa, int padding);
-int RSA_meth_set_pub_dec(RSA_METHOD *rsa,
-                         int (*pub_dec) (int flen, const unsigned char *from,
+int __cdecl RSA_meth_set_pub_dec(RSA_METHOD *rsa,
+                         int (__cdecl *pub_dec) (int flen, const unsigned char *from,
                                          unsigned char *to, RSA *rsa,
                                          int padding));
-int (*RSA_meth_get_priv_enc(const RSA_METHOD *meth))
+int (__cdecl *RSA_meth_get_priv_enc(const RSA_METHOD *meth))
     (int flen, const unsigned char *from,
      unsigned char *to, RSA *rsa, int padding);
-int RSA_meth_set_priv_enc(RSA_METHOD *rsa,
-                          int (*priv_enc) (int flen, const unsigned char *from,
+int __cdecl RSA_meth_set_priv_enc(RSA_METHOD *rsa,
+                          int (__cdecl *priv_enc) (int flen, const unsigned char *from,
                                            unsigned char *to, RSA *rsa,
                                            int padding));
-int (*RSA_meth_get_priv_dec(const RSA_METHOD *meth))
+int (__cdecl *RSA_meth_get_priv_dec(const RSA_METHOD *meth))
     (int flen, const unsigned char *from,
      unsigned char *to, RSA *rsa, int padding);
-int RSA_meth_set_priv_dec(RSA_METHOD *rsa,
-                          int (*priv_dec) (int flen, const unsigned char *from,
+int __cdecl RSA_meth_set_priv_dec(RSA_METHOD *rsa,
+                          int (__cdecl *priv_dec) (int flen, const unsigned char *from,
                                            unsigned char *to, RSA *rsa,
                                            int padding));
-int (*RSA_meth_get_mod_exp(const RSA_METHOD *meth))
+int (__cdecl *RSA_meth_get_mod_exp(const RSA_METHOD *meth))
     (BIGNUM *r0, const BIGNUM *i, RSA *rsa, BN_CTX *ctx);
-int RSA_meth_set_mod_exp(RSA_METHOD *rsa,
-                         int (*mod_exp) (BIGNUM *r0, const BIGNUM *i, RSA *rsa,
+int __cdecl RSA_meth_set_mod_exp(RSA_METHOD *rsa,
+                         int (__cdecl *mod_exp) (BIGNUM *r0, const BIGNUM *i, RSA *rsa,
                                          BN_CTX *ctx));
-int (*RSA_meth_get_bn_mod_exp(const RSA_METHOD *meth))
+int (__cdecl *RSA_meth_get_bn_mod_exp(const RSA_METHOD *meth))
     (BIGNUM *r, const BIGNUM *a, const BIGNUM *p,
      const BIGNUM *m, BN_CTX *ctx, BN_MONT_CTX *m_ctx);
-int RSA_meth_set_bn_mod_exp(RSA_METHOD *rsa,
-                            int (*bn_mod_exp) (BIGNUM *r,
+int __cdecl RSA_meth_set_bn_mod_exp(RSA_METHOD *rsa,
+                            int (__cdecl *bn_mod_exp) (BIGNUM *r,
                                                const BIGNUM *a,
                                                const BIGNUM *p,
                                                const BIGNUM *m,
                                                BN_CTX *ctx,
                                                BN_MONT_CTX *m_ctx));
-int (*RSA_meth_get_init(const RSA_METHOD *meth)) (RSA *rsa);
-int RSA_meth_set_init(RSA_METHOD *rsa, int (*init) (RSA *rsa));
-int (*RSA_meth_get_finish(const RSA_METHOD *meth)) (RSA *rsa);
-int RSA_meth_set_finish(RSA_METHOD *rsa, int (*finish) (RSA *rsa));
-int (*RSA_meth_get_sign(const RSA_METHOD *meth))
+int (__cdecl *RSA_meth_get_init(const RSA_METHOD *meth)) (RSA *rsa);
+int __cdecl RSA_meth_set_init(RSA_METHOD *rsa, int (__cdecl *init) (RSA *rsa));
+int (__cdecl *RSA_meth_get_finish(const RSA_METHOD *meth)) (RSA *rsa);
+int __cdecl RSA_meth_set_finish(RSA_METHOD *rsa, int (__cdecl *finish) (RSA *rsa));
+int (__cdecl *RSA_meth_get_sign(const RSA_METHOD *meth))
     (int type,
      const unsigned char *m, unsigned int m_length,
      unsigned char *sigret, unsigned int *siglen,
      const RSA *rsa);
-int RSA_meth_set_sign(RSA_METHOD *rsa,
-                      int (*sign) (int type, const unsigned char *m,
+int __cdecl RSA_meth_set_sign(RSA_METHOD *rsa,
+                      int (__cdecl *sign) (int type, const unsigned char *m,
                                    unsigned int m_length,
                                    unsigned char *sigret, unsigned int *siglen,
                                    const RSA *rsa));
-int (*RSA_meth_get_verify(const RSA_METHOD *meth))
+int (__cdecl *RSA_meth_get_verify(const RSA_METHOD *meth))
     (int dtype, const unsigned char *m,
      unsigned int m_length, const unsigned char *sigbuf,
      unsigned int siglen, const RSA *rsa);
-int RSA_meth_set_verify(RSA_METHOD *rsa,
-                        int (*verify) (int dtype, const unsigned char *m,
+int __cdecl RSA_meth_set_verify(RSA_METHOD *rsa,
+                        int (__cdecl *verify) (int dtype, const unsigned char *m,
                                        unsigned int m_length,
                                        const unsigned char *sigbuf,
                                        unsigned int siglen, const RSA *rsa));
-int (*RSA_meth_get_keygen(const RSA_METHOD *meth))
+int (__cdecl *RSA_meth_get_keygen(const RSA_METHOD *meth))
     (RSA *rsa, int bits, BIGNUM *e, BN_GENCB *cb);
-int RSA_meth_set_keygen(RSA_METHOD *rsa,
-                        int (*keygen) (RSA *rsa, int bits, BIGNUM *e,
+int __cdecl RSA_meth_set_keygen(RSA_METHOD *rsa,
+                        int (__cdecl *keygen) (RSA *rsa, int bits, BIGNUM *e,
                                        BN_GENCB *cb));
-int (*RSA_meth_get_multi_prime_keygen(const RSA_METHOD *meth))
+int (__cdecl *RSA_meth_get_multi_prime_keygen(const RSA_METHOD *meth))
     (RSA *rsa, int bits, int primes, BIGNUM *e, BN_GENCB *cb);
-int RSA_meth_set_multi_prime_keygen(RSA_METHOD *meth,
-                                    int (*keygen) (RSA *rsa, int bits,
+int __cdecl RSA_meth_set_multi_prime_keygen(RSA_METHOD *meth,
+                                    int (__cdecl *keygen) (RSA *rsa, int bits,
                                                    int primes, BIGNUM *e,
                                                    BN_GENCB *cb));
 
diff --git a/include/openssl/safestack.h b/include/openssl/safestack.h
index 38b5578978..0d317b8a56 100644
--- a/include/openssl/safestack.h
+++ b/include/openssl/safestack.h
@@ -21,9 +21,9 @@ extern "C" {
 
 # define SKM_DEFINE_STACK_OF(t1, t2, t3) \
     STACK_OF(t1); \
-    typedef int (*sk_##t1##_compfunc)(const t3 * const *a, const t3 *const *b); \
-    typedef void (*sk_##t1##_freefunc)(t3 *a); \
-    typedef t3 * (*sk_##t1##_copyfunc)(const t3 *a); \
+    typedef int (__cdecl *sk_##t1##_compfunc)(const t3 * const *a, const t3 *const *b); \
+    typedef void (__cdecl *sk_##t1##_freefunc)(t3 *a); \
+    typedef t3 * (__cdecl *sk_##t1##_copyfunc)(const t3 *a); \
     static ossl_unused ossl_inline int sk_##t1##_num(const STACK_OF(t1) *sk) \
     { \
         return OPENSSL_sk_num((const OPENSSL_STACK *)sk); \
diff --git a/include/openssl/srp.h b/include/openssl/srp.h
index aaf13558e3..6fbf8aee4d 100644
--- a/include/openssl/srp.h
+++ b/include/openssl/srp.h
@@ -47,7 +47,7 @@ typedef struct SRP_user_pwd_st {
     char *info;
 } SRP_user_pwd;
 
-void SRP_user_pwd_free(SRP_user_pwd *user_pwd);
+void __cdecl SRP_user_pwd_free(SRP_user_pwd *user_pwd);
 
 DEFINE_STACK_OF(SRP_user_pwd)
 
diff --git a/include/openssl/ssl.h b/include/openssl/ssl.h
index 6724ccf2d2..d6717a06d4 100644
--- a/include/openssl/ssl.h
+++ b/include/openssl/ssl.h
@@ -1648,7 +1648,7 @@ __owur int SSL_SESSION_set1_id(SSL_SESSION *s, const unsigned char *sid,
                                unsigned int sid_len);
 __owur int SSL_SESSION_is_resumable(const SSL_SESSION *s);
 
-__owur SSL_SESSION *SSL_SESSION_new(void);
+__owur SSL_SESSION * __cdecl SSL_SESSION_new(void);
 __owur SSL_SESSION *SSL_SESSION_dup(SSL_SESSION *src);
 const unsigned char *SSL_SESSION_get_id(const SSL_SESSION *s,
                                         unsigned int *len);
@@ -1662,7 +1662,7 @@ int SSL_SESSION_print(BIO *fp, const SSL_SESSION *ses);
 int SSL_SESSION_print_keylog(BIO *bp, const SSL_SESSION *x);
 int SSL_SESSION_up_ref(SSL_SESSION *ses);
 void SSL_SESSION_free(SSL_SESSION *ses);
-__owur int i2d_SSL_SESSION(SSL_SESSION *in, unsigned char **pp);
+__owur int __cdecl i2d_SSL_SESSION(SSL_SESSION *in, unsigned char **pp);
 __owur int SSL_set_session(SSL *to, SSL_SESSION *session);
 int SSL_CTX_add_session(SSL_CTX *ctx, SSL_SESSION *session);
 int SSL_CTX_remove_session(SSL_CTX *ctx, SSL_SESSION *session);
@@ -1671,7 +1671,7 @@ __owur int SSL_set_generate_session_id(SSL *s, GEN_SESSION_CB cb);
 __owur int SSL_has_matching_session_id(const SSL *s,
                                        const unsigned char *id,
                                        unsigned int id_len);
-SSL_SESSION *d2i_SSL_SESSION(SSL_SESSION **a, const unsigned char **pp,
+SSL_SESSION * __cdecl d2i_SSL_SESSION(SSL_SESSION **a, const unsigned char **pp,
                              long length);
 
 # ifdef HEADER_X509_H
diff --git a/include/openssl/stack.h b/include/openssl/stack.h
index cfc075057a..e71b68d81a 100644
--- a/include/openssl/stack.h
+++ b/include/openssl/stack.h
@@ -16,12 +16,12 @@ extern "C" {
 
 typedef struct stack_st OPENSSL_STACK; /* Use STACK_OF(...) instead */
 
-typedef int (*OPENSSL_sk_compfunc)(const void *, const void *);
-typedef void (*OPENSSL_sk_freefunc)(void *);
-typedef void *(*OPENSSL_sk_copyfunc)(const void *);
+typedef int (__cdecl *OPENSSL_sk_compfunc)(const void *, const void *);
+typedef void (__cdecl *OPENSSL_sk_freefunc)(void *);
+typedef void *(__cdecl *OPENSSL_sk_copyfunc)(const void *);
 
-int OPENSSL_sk_num(const OPENSSL_STACK *);
-void *OPENSSL_sk_value(const OPENSSL_STACK *, int);
+int __cdecl OPENSSL_sk_num(const OPENSSL_STACK *);
+void * __cdecl OPENSSL_sk_value(const OPENSSL_STACK *, int);
 
 void *OPENSSL_sk_set(OPENSSL_STACK *st, int i, const void *data);
 
@@ -30,7 +30,7 @@ OPENSSL_STACK *OPENSSL_sk_new_null(void);
 OPENSSL_STACK *OPENSSL_sk_new_reserve(OPENSSL_sk_compfunc c, int n);
 int OPENSSL_sk_reserve(OPENSSL_STACK *st, int n);
 void OPENSSL_sk_free(OPENSSL_STACK *);
-void OPENSSL_sk_pop_free(OPENSSL_STACK *st, void (*func) (void *));
+void __cdecl OPENSSL_sk_pop_free(OPENSSL_STACK *st, void (__cdecl *func) (void *));
 OPENSSL_STACK *OPENSSL_sk_deep_copy(const OPENSSL_STACK *,
                                     OPENSSL_sk_copyfunc c,
                                     OPENSSL_sk_freefunc f);
diff --git a/include/openssl/store.h b/include/openssl/store.h
index a40a7339e6..00b9ad2a3a 100644
--- a/include/openssl/store.h
+++ b/include/openssl/store.h
@@ -149,7 +149,7 @@ const char *OSSL_STORE_INFO_type_string(int type);
 /*
  * Free the OSSL_STORE_INFO
  */
-void OSSL_STORE_INFO_free(OSSL_STORE_INFO *info);
+void __cdecl OSSL_STORE_INFO_free(OSSL_STORE_INFO *info);
 
 
 /*-
diff --git a/include/openssl/ts.h b/include/openssl/ts.h
index 3b58aa527e..2fa90dbfea 100644
--- a/include/openssl/ts.h
+++ b/include/openssl/ts.h
@@ -68,216 +68,216 @@ DEFINE_STACK_OF(ESS_CERT_ID_V2)
 
 typedef struct TS_resp_st TS_RESP;
 
-TS_REQ *TS_REQ_new(void);
-void TS_REQ_free(TS_REQ *a);
-int i2d_TS_REQ(const TS_REQ *a, unsigned char **pp);
-TS_REQ *d2i_TS_REQ(TS_REQ **a, const unsigned char **pp, long length);
+TS_REQ * __cdecl TS_REQ_new(void);
+void __cdecl TS_REQ_free(TS_REQ *a);
+int __cdecl i2d_TS_REQ(const TS_REQ *a, unsigned char **pp);
+TS_REQ * __cdecl d2i_TS_REQ(TS_REQ **a, const unsigned char **pp, long length);
 
-TS_REQ *TS_REQ_dup(TS_REQ *a);
+TS_REQ * __cdecl TS_REQ_dup(TS_REQ *a);
 
 #ifndef OPENSSL_NO_STDIO
-TS_REQ *d2i_TS_REQ_fp(FILE *fp, TS_REQ **a);
-int i2d_TS_REQ_fp(FILE *fp, TS_REQ *a);
+TS_REQ * __cdecl d2i_TS_REQ_fp(FILE *fp, TS_REQ **a);
+int __cdecl i2d_TS_REQ_fp(FILE *fp, TS_REQ *a);
 #endif
-TS_REQ *d2i_TS_REQ_bio(BIO *fp, TS_REQ **a);
-int i2d_TS_REQ_bio(BIO *fp, TS_REQ *a);
+TS_REQ * __cdecl d2i_TS_REQ_bio(BIO *fp, TS_REQ **a);
+int __cdecl i2d_TS_REQ_bio(BIO *fp, TS_REQ *a);
 
-TS_MSG_IMPRINT *TS_MSG_IMPRINT_new(void);
-void TS_MSG_IMPRINT_free(TS_MSG_IMPRINT *a);
-int i2d_TS_MSG_IMPRINT(const TS_MSG_IMPRINT *a, unsigned char **pp);
-TS_MSG_IMPRINT *d2i_TS_MSG_IMPRINT(TS_MSG_IMPRINT **a,
+TS_MSG_IMPRINT * __cdecl TS_MSG_IMPRINT_new(void);
+void __cdecl TS_MSG_IMPRINT_free(TS_MSG_IMPRINT *a);
+int __cdecl i2d_TS_MSG_IMPRINT(const TS_MSG_IMPRINT *a, unsigned char **pp);
+TS_MSG_IMPRINT * __cdecl d2i_TS_MSG_IMPRINT(TS_MSG_IMPRINT **a,
                                    const unsigned char **pp, long length);
 
-TS_MSG_IMPRINT *TS_MSG_IMPRINT_dup(TS_MSG_IMPRINT *a);
+TS_MSG_IMPRINT * __cdecl TS_MSG_IMPRINT_dup(TS_MSG_IMPRINT *a);
 
 #ifndef OPENSSL_NO_STDIO
-TS_MSG_IMPRINT *d2i_TS_MSG_IMPRINT_fp(FILE *fp, TS_MSG_IMPRINT **a);
-int i2d_TS_MSG_IMPRINT_fp(FILE *fp, TS_MSG_IMPRINT *a);
+TS_MSG_IMPRINT * __cdecl d2i_TS_MSG_IMPRINT_fp(FILE *fp, TS_MSG_IMPRINT **a);
+int __cdecl i2d_TS_MSG_IMPRINT_fp(FILE *fp, TS_MSG_IMPRINT *a);
 #endif
-TS_MSG_IMPRINT *d2i_TS_MSG_IMPRINT_bio(BIO *bio, TS_MSG_IMPRINT **a);
-int i2d_TS_MSG_IMPRINT_bio(BIO *bio, TS_MSG_IMPRINT *a);
+TS_MSG_IMPRINT * __cdecl d2i_TS_MSG_IMPRINT_bio(BIO *bio, TS_MSG_IMPRINT **a);
+int __cdecl i2d_TS_MSG_IMPRINT_bio(BIO *bio, TS_MSG_IMPRINT *a);
 
-TS_RESP *TS_RESP_new(void);
-void TS_RESP_free(TS_RESP *a);
-int i2d_TS_RESP(const TS_RESP *a, unsigned char **pp);
-TS_RESP *d2i_TS_RESP(TS_RESP **a, const unsigned char **pp, long length);
-TS_TST_INFO *PKCS7_to_TS_TST_INFO(PKCS7 *token);
-TS_RESP *TS_RESP_dup(TS_RESP *a);
+TS_RESP * __cdecl TS_RESP_new(void);
+void __cdecl TS_RESP_free(TS_RESP *a);
+int __cdecl i2d_TS_RESP(const TS_RESP *a, unsigned char **pp);
+TS_RESP * __cdecl d2i_TS_RESP(TS_RESP **a, const unsigned char **pp, long length);
+TS_TST_INFO * __cdecl PKCS7_to_TS_TST_INFO(PKCS7 *token);
+TS_RESP * __cdecl TS_RESP_dup(TS_RESP *a);
 
 #ifndef OPENSSL_NO_STDIO
-TS_RESP *d2i_TS_RESP_fp(FILE *fp, TS_RESP **a);
-int i2d_TS_RESP_fp(FILE *fp, TS_RESP *a);
+TS_RESP * __cdecl d2i_TS_RESP_fp(FILE *fp, TS_RESP **a);
+int __cdecl i2d_TS_RESP_fp(FILE *fp, TS_RESP *a);
 #endif
-TS_RESP *d2i_TS_RESP_bio(BIO *bio, TS_RESP **a);
-int i2d_TS_RESP_bio(BIO *bio, TS_RESP *a);
+TS_RESP * __cdecl d2i_TS_RESP_bio(BIO *bio, TS_RESP **a);
+int __cdecl i2d_TS_RESP_bio(BIO *bio, TS_RESP *a);
 
-TS_STATUS_INFO *TS_STATUS_INFO_new(void);
-void TS_STATUS_INFO_free(TS_STATUS_INFO *a);
-int i2d_TS_STATUS_INFO(const TS_STATUS_INFO *a, unsigned char **pp);
-TS_STATUS_INFO *d2i_TS_STATUS_INFO(TS_STATUS_INFO **a,
+TS_STATUS_INFO * __cdecl TS_STATUS_INFO_new(void);
+void __cdecl TS_STATUS_INFO_free(TS_STATUS_INFO *a);
+int __cdecl i2d_TS_STATUS_INFO(const TS_STATUS_INFO *a, unsigned char **pp);
+TS_STATUS_INFO * __cdecl d2i_TS_STATUS_INFO(TS_STATUS_INFO **a,
                                    const unsigned char **pp, long length);
-TS_STATUS_INFO *TS_STATUS_INFO_dup(TS_STATUS_INFO *a);
+TS_STATUS_INFO * __cdecl TS_STATUS_INFO_dup(TS_STATUS_INFO *a);
 
-TS_TST_INFO *TS_TST_INFO_new(void);
-void TS_TST_INFO_free(TS_TST_INFO *a);
-int i2d_TS_TST_INFO(const TS_TST_INFO *a, unsigned char **pp);
-TS_TST_INFO *d2i_TS_TST_INFO(TS_TST_INFO **a, const unsigned char **pp,
+TS_TST_INFO * __cdecl TS_TST_INFO_new(void);
+void __cdecl TS_TST_INFO_free(TS_TST_INFO *a);
+int __cdecl i2d_TS_TST_INFO(const TS_TST_INFO *a, unsigned char **pp);
+TS_TST_INFO * __cdecl d2i_TS_TST_INFO(TS_TST_INFO **a, const unsigned char **pp,
                              long length);
-TS_TST_INFO *TS_TST_INFO_dup(TS_TST_INFO *a);
+TS_TST_INFO * __cdecl TS_TST_INFO_dup(TS_TST_INFO *a);
 
 #ifndef OPENSSL_NO_STDIO
-TS_TST_INFO *d2i_TS_TST_INFO_fp(FILE *fp, TS_TST_INFO **a);
-int i2d_TS_TST_INFO_fp(FILE *fp, TS_TST_INFO *a);
+TS_TST_INFO * __cdecl d2i_TS_TST_INFO_fp(FILE *fp, TS_TST_INFO **a);
+int __cdecl i2d_TS_TST_INFO_fp(FILE *fp, TS_TST_INFO *a);
 #endif
-TS_TST_INFO *d2i_TS_TST_INFO_bio(BIO *bio, TS_TST_INFO **a);
-int i2d_TS_TST_INFO_bio(BIO *bio, TS_TST_INFO *a);
+TS_TST_INFO * __cdecl d2i_TS_TST_INFO_bio(BIO *bio, TS_TST_INFO **a);
+int __cdecl i2d_TS_TST_INFO_bio(BIO *bio, TS_TST_INFO *a);
 
-TS_ACCURACY *TS_ACCURACY_new(void);
-void TS_ACCURACY_free(TS_ACCURACY *a);
-int i2d_TS_ACCURACY(const TS_ACCURACY *a, unsigned char **pp);
-TS_ACCURACY *d2i_TS_ACCURACY(TS_ACCURACY **a, const unsigned char **pp,
+TS_ACCURACY * __cdecl TS_ACCURACY_new(void);
+void __cdecl TS_ACCURACY_free(TS_ACCURACY *a);
+int __cdecl i2d_TS_ACCURACY(const TS_ACCURACY *a, unsigned char **pp);
+TS_ACCURACY * __cdecl d2i_TS_ACCURACY(TS_ACCURACY **a, const unsigned char **pp,
                              long length);
-TS_ACCURACY *TS_ACCURACY_dup(TS_ACCURACY *a);
+TS_ACCURACY * __cdecl TS_ACCURACY_dup(TS_ACCURACY *a);
 
-ESS_ISSUER_SERIAL *ESS_ISSUER_SERIAL_new(void);
-void ESS_ISSUER_SERIAL_free(ESS_ISSUER_SERIAL *a);
-int i2d_ESS_ISSUER_SERIAL(const ESS_ISSUER_SERIAL *a, unsigned char **pp);
-ESS_ISSUER_SERIAL *d2i_ESS_ISSUER_SERIAL(ESS_ISSUER_SERIAL **a,
+ESS_ISSUER_SERIAL * __cdecl ESS_ISSUER_SERIAL_new(void);
+void __cdecl ESS_ISSUER_SERIAL_free(ESS_ISSUER_SERIAL *a);
+int __cdecl i2d_ESS_ISSUER_SERIAL(const ESS_ISSUER_SERIAL *a, unsigned char **pp);
+ESS_ISSUER_SERIAL * __cdecl d2i_ESS_ISSUER_SERIAL(ESS_ISSUER_SERIAL **a,
                                          const unsigned char **pp,
                                          long length);
-ESS_ISSUER_SERIAL *ESS_ISSUER_SERIAL_dup(ESS_ISSUER_SERIAL *a);
+ESS_ISSUER_SERIAL * __cdecl ESS_ISSUER_SERIAL_dup(ESS_ISSUER_SERIAL *a);
 
-ESS_CERT_ID *ESS_CERT_ID_new(void);
-void ESS_CERT_ID_free(ESS_CERT_ID *a);
-int i2d_ESS_CERT_ID(const ESS_CERT_ID *a, unsigned char **pp);
-ESS_CERT_ID *d2i_ESS_CERT_ID(ESS_CERT_ID **a, const unsigned char **pp,
+ESS_CERT_ID * __cdecl ESS_CERT_ID_new(void);
+void __cdecl ESS_CERT_ID_free(ESS_CERT_ID *a);
+int __cdecl i2d_ESS_CERT_ID(const ESS_CERT_ID *a, unsigned char **pp);
+ESS_CERT_ID * __cdecl d2i_ESS_CERT_ID(ESS_CERT_ID **a, const unsigned char **pp,
                              long length);
-ESS_CERT_ID *ESS_CERT_ID_dup(ESS_CERT_ID *a);
+ESS_CERT_ID * __cdecl ESS_CERT_ID_dup(ESS_CERT_ID *a);
 
-ESS_SIGNING_CERT *ESS_SIGNING_CERT_new(void);
-void ESS_SIGNING_CERT_free(ESS_SIGNING_CERT *a);
-int i2d_ESS_SIGNING_CERT(const ESS_SIGNING_CERT *a, unsigned char **pp);
-ESS_SIGNING_CERT *d2i_ESS_SIGNING_CERT(ESS_SIGNING_CERT **a,
+ESS_SIGNING_CERT * __cdecl ESS_SIGNING_CERT_new(void);
+void __cdecl ESS_SIGNING_CERT_free(ESS_SIGNING_CERT *a);
+int __cdecl i2d_ESS_SIGNING_CERT(const ESS_SIGNING_CERT *a, unsigned char **pp);
+ESS_SIGNING_CERT * __cdecl d2i_ESS_SIGNING_CERT(ESS_SIGNING_CERT **a,
                                        const unsigned char **pp, long length);
-ESS_SIGNING_CERT *ESS_SIGNING_CERT_dup(ESS_SIGNING_CERT *a);
+ESS_SIGNING_CERT * __cdecl ESS_SIGNING_CERT_dup(ESS_SIGNING_CERT *a);
 
-ESS_CERT_ID_V2 *ESS_CERT_ID_V2_new(void);
-void ESS_CERT_ID_V2_free(ESS_CERT_ID_V2 *a);
-int i2d_ESS_CERT_ID_V2(const ESS_CERT_ID_V2 *a, unsigned char **pp);
-ESS_CERT_ID_V2 *d2i_ESS_CERT_ID_V2(ESS_CERT_ID_V2 **a,
+ESS_CERT_ID_V2 * __cdecl ESS_CERT_ID_V2_new(void);
+void __cdecl ESS_CERT_ID_V2_free(ESS_CERT_ID_V2 *a);
+int __cdecl i2d_ESS_CERT_ID_V2(const ESS_CERT_ID_V2 *a, unsigned char **pp);
+ESS_CERT_ID_V2 * __cdecl d2i_ESS_CERT_ID_V2(ESS_CERT_ID_V2 **a,
                                    const unsigned char **pp, long length);
-ESS_CERT_ID_V2 *ESS_CERT_ID_V2_dup(ESS_CERT_ID_V2 *a);
+ESS_CERT_ID_V2 * __cdecl ESS_CERT_ID_V2_dup(ESS_CERT_ID_V2 *a);
 
-ESS_SIGNING_CERT_V2 *ESS_SIGNING_CERT_V2_new(void);
-void ESS_SIGNING_CERT_V2_free(ESS_SIGNING_CERT_V2 *a);
-int i2d_ESS_SIGNING_CERT_V2(const ESS_SIGNING_CERT_V2 *a, unsigned char **pp);
-ESS_SIGNING_CERT_V2 *d2i_ESS_SIGNING_CERT_V2(ESS_SIGNING_CERT_V2 **a,
+ESS_SIGNING_CERT_V2 * __cdecl ESS_SIGNING_CERT_V2_new(void);
+void __cdecl ESS_SIGNING_CERT_V2_free(ESS_SIGNING_CERT_V2 *a);
+int __cdecl i2d_ESS_SIGNING_CERT_V2(const ESS_SIGNING_CERT_V2 *a, unsigned char **pp);
+ESS_SIGNING_CERT_V2 * __cdecl d2i_ESS_SIGNING_CERT_V2(ESS_SIGNING_CERT_V2 **a,
                                              const unsigned char **pp,
                                              long length);
-ESS_SIGNING_CERT_V2 *ESS_SIGNING_CERT_V2_dup(ESS_SIGNING_CERT_V2 *a);
+ESS_SIGNING_CERT_V2 * __cdecl ESS_SIGNING_CERT_V2_dup(ESS_SIGNING_CERT_V2 *a);
 
-int TS_REQ_set_version(TS_REQ *a, long version);
-long TS_REQ_get_version(const TS_REQ *a);
+int __cdecl TS_REQ_set_version(TS_REQ *a, long version);
+long __cdecl TS_REQ_get_version(const TS_REQ *a);
 
-int TS_STATUS_INFO_set_status(TS_STATUS_INFO *a, int i);
-const ASN1_INTEGER *TS_STATUS_INFO_get0_status(const TS_STATUS_INFO *a);
+int __cdecl TS_STATUS_INFO_set_status(TS_STATUS_INFO *a, int i);
+const ASN1_INTEGER * __cdecl TS_STATUS_INFO_get0_status(const TS_STATUS_INFO *a);
 
 const STACK_OF(ASN1_UTF8STRING) *
-TS_STATUS_INFO_get0_text(const TS_STATUS_INFO *a);
+__cdecl TS_STATUS_INFO_get0_text(const TS_STATUS_INFO *a);
 
 const ASN1_BIT_STRING *
-TS_STATUS_INFO_get0_failure_info(const TS_STATUS_INFO *a);
+__cdecl TS_STATUS_INFO_get0_failure_info(const TS_STATUS_INFO *a);
 
-int TS_REQ_set_msg_imprint(TS_REQ *a, TS_MSG_IMPRINT *msg_imprint);
-TS_MSG_IMPRINT *TS_REQ_get_msg_imprint(TS_REQ *a);
+int __cdecl TS_REQ_set_msg_imprint(TS_REQ *a, TS_MSG_IMPRINT *msg_imprint);
+TS_MSG_IMPRINT * __cdecl TS_REQ_get_msg_imprint(TS_REQ *a);
 
-int TS_MSG_IMPRINT_set_algo(TS_MSG_IMPRINT *a, X509_ALGOR *alg);
-X509_ALGOR *TS_MSG_IMPRINT_get_algo(TS_MSG_IMPRINT *a);
+int __cdecl TS_MSG_IMPRINT_set_algo(TS_MSG_IMPRINT *a, X509_ALGOR *alg);
+X509_ALGOR * __cdecl TS_MSG_IMPRINT_get_algo(TS_MSG_IMPRINT *a);
 
-int TS_MSG_IMPRINT_set_msg(TS_MSG_IMPRINT *a, unsigned char *d, int len);
-ASN1_OCTET_STRING *TS_MSG_IMPRINT_get_msg(TS_MSG_IMPRINT *a);
+int __cdecl TS_MSG_IMPRINT_set_msg(TS_MSG_IMPRINT *a, unsigned char *d, int len);
+ASN1_OCTET_STRING * __cdecl TS_MSG_IMPRINT_get_msg(TS_MSG_IMPRINT *a);
 
-int TS_REQ_set_policy_id(TS_REQ *a, const ASN1_OBJECT *policy);
-ASN1_OBJECT *TS_REQ_get_policy_id(TS_REQ *a);
+int __cdecl TS_REQ_set_policy_id(TS_REQ *a, const ASN1_OBJECT *policy);
+ASN1_OBJECT * __cdecl TS_REQ_get_policy_id(TS_REQ *a);
 
-int TS_REQ_set_nonce(TS_REQ *a, const ASN1_INTEGER *nonce);
-const ASN1_INTEGER *TS_REQ_get_nonce(const TS_REQ *a);
+int __cdecl TS_REQ_set_nonce(TS_REQ *a, const ASN1_INTEGER *nonce);
+const ASN1_INTEGER * __cdecl TS_REQ_get_nonce(const TS_REQ *a);
 
-int TS_REQ_set_cert_req(TS_REQ *a, int cert_req);
-int TS_REQ_get_cert_req(const TS_REQ *a);
+int __cdecl TS_REQ_set_cert_req(TS_REQ *a, int cert_req);
+int __cdecl TS_REQ_get_cert_req(const TS_REQ *a);
 
-STACK_OF(X509_EXTENSION) *TS_REQ_get_exts(TS_REQ *a);
-void TS_REQ_ext_free(TS_REQ *a);
-int TS_REQ_get_ext_count(TS_REQ *a);
-int TS_REQ_get_ext_by_NID(TS_REQ *a, int nid, int lastpos);
-int TS_REQ_get_ext_by_OBJ(TS_REQ *a, const ASN1_OBJECT *obj, int lastpos);
-int TS_REQ_get_ext_by_critical(TS_REQ *a, int crit, int lastpos);
-X509_EXTENSION *TS_REQ_get_ext(TS_REQ *a, int loc);
-X509_EXTENSION *TS_REQ_delete_ext(TS_REQ *a, int loc);
-int TS_REQ_add_ext(TS_REQ *a, X509_EXTENSION *ex, int loc);
-void *TS_REQ_get_ext_d2i(TS_REQ *a, int nid, int *crit, int *idx);
+STACK_OF(X509_EXTENSION) * __cdecl TS_REQ_get_exts(TS_REQ *a);
+void __cdecl TS_REQ_ext_free(TS_REQ *a);
+int __cdecl TS_REQ_get_ext_count(TS_REQ *a);
+int __cdecl TS_REQ_get_ext_by_NID(TS_REQ *a, int nid, int lastpos);
+int __cdecl TS_REQ_get_ext_by_OBJ(TS_REQ *a, const ASN1_OBJECT *obj, int lastpos);
+int __cdecl TS_REQ_get_ext_by_critical(TS_REQ *a, int crit, int lastpos);
+X509_EXTENSION * __cdecl TS_REQ_get_ext(TS_REQ *a, int loc);
+X509_EXTENSION * __cdecl TS_REQ_delete_ext(TS_REQ *a, int loc);
+int __cdecl TS_REQ_add_ext(TS_REQ *a, X509_EXTENSION *ex, int loc);
+void * __cdecl TS_REQ_get_ext_d2i(TS_REQ *a, int nid, int *crit, int *idx);
 
 /* Function declarations for TS_REQ defined in ts/ts_req_print.c */
 
-int TS_REQ_print_bio(BIO *bio, TS_REQ *a);
+int __cdecl TS_REQ_print_bio(BIO *bio, TS_REQ *a);
 
 /* Function declarations for TS_RESP defined in ts/ts_resp_utils.c */
 
-int TS_RESP_set_status_info(TS_RESP *a, TS_STATUS_INFO *info);
-TS_STATUS_INFO *TS_RESP_get_status_info(TS_RESP *a);
+int __cdecl TS_RESP_set_status_info(TS_RESP *a, TS_STATUS_INFO *info);
+TS_STATUS_INFO * __cdecl TS_RESP_get_status_info(TS_RESP *a);
 
 /* Caller loses ownership of PKCS7 and TS_TST_INFO objects. */
-void TS_RESP_set_tst_info(TS_RESP *a, PKCS7 *p7, TS_TST_INFO *tst_info);
-PKCS7 *TS_RESP_get_token(TS_RESP *a);
-TS_TST_INFO *TS_RESP_get_tst_info(TS_RESP *a);
+void __cdecl TS_RESP_set_tst_info(TS_RESP *a, PKCS7 *p7, TS_TST_INFO *tst_info);
+PKCS7 * __cdecl TS_RESP_get_token(TS_RESP *a);
+TS_TST_INFO * __cdecl TS_RESP_get_tst_info(TS_RESP *a);
 
-int TS_TST_INFO_set_version(TS_TST_INFO *a, long version);
-long TS_TST_INFO_get_version(const TS_TST_INFO *a);
+int __cdecl TS_TST_INFO_set_version(TS_TST_INFO *a, long version);
+long __cdecl TS_TST_INFO_get_version(const TS_TST_INFO *a);
 
-int TS_TST_INFO_set_policy_id(TS_TST_INFO *a, ASN1_OBJECT *policy_id);
-ASN1_OBJECT *TS_TST_INFO_get_policy_id(TS_TST_INFO *a);
+int __cdecl TS_TST_INFO_set_policy_id(TS_TST_INFO *a, ASN1_OBJECT *policy_id);
+ASN1_OBJECT * __cdecl TS_TST_INFO_get_policy_id(TS_TST_INFO *a);
 
-int TS_TST_INFO_set_msg_imprint(TS_TST_INFO *a, TS_MSG_IMPRINT *msg_imprint);
-TS_MSG_IMPRINT *TS_TST_INFO_get_msg_imprint(TS_TST_INFO *a);
+int __cdecl TS_TST_INFO_set_msg_imprint(TS_TST_INFO *a, TS_MSG_IMPRINT *msg_imprint);
+TS_MSG_IMPRINT * __cdecl TS_TST_INFO_get_msg_imprint(TS_TST_INFO *a);
 
-int TS_TST_INFO_set_serial(TS_TST_INFO *a, const ASN1_INTEGER *serial);
-const ASN1_INTEGER *TS_TST_INFO_get_serial(const TS_TST_INFO *a);
+int __cdecl TS_TST_INFO_set_serial(TS_TST_INFO *a, const ASN1_INTEGER *serial);
+const ASN1_INTEGER * __cdecl TS_TST_INFO_get_serial(const TS_TST_INFO *a);
 
-int TS_TST_INFO_set_time(TS_TST_INFO *a, const ASN1_GENERALIZEDTIME *gtime);
-const ASN1_GENERALIZEDTIME *TS_TST_INFO_get_time(const TS_TST_INFO *a);
+int __cdecl TS_TST_INFO_set_time(TS_TST_INFO *a, const ASN1_GENERALIZEDTIME *gtime);
+const ASN1_GENERALIZEDTIME * __cdecl TS_TST_INFO_get_time(const TS_TST_INFO *a);
 
-int TS_TST_INFO_set_accuracy(TS_TST_INFO *a, TS_ACCURACY *accuracy);
-TS_ACCURACY *TS_TST_INFO_get_accuracy(TS_TST_INFO *a);
+int __cdecl TS_TST_INFO_set_accuracy(TS_TST_INFO *a, TS_ACCURACY *accuracy);
+TS_ACCURACY * __cdecl TS_TST_INFO_get_accuracy(TS_TST_INFO *a);
 
-int TS_ACCURACY_set_seconds(TS_ACCURACY *a, const ASN1_INTEGER *seconds);
-const ASN1_INTEGER *TS_ACCURACY_get_seconds(const TS_ACCURACY *a);
+int __cdecl TS_ACCURACY_set_seconds(TS_ACCURACY *a, const ASN1_INTEGER *seconds);
+const ASN1_INTEGER * __cdecl TS_ACCURACY_get_seconds(const TS_ACCURACY *a);
 
-int TS_ACCURACY_set_millis(TS_ACCURACY *a, const ASN1_INTEGER *millis);
-const ASN1_INTEGER *TS_ACCURACY_get_millis(const TS_ACCURACY *a);
+int __cdecl TS_ACCURACY_set_millis(TS_ACCURACY *a, const ASN1_INTEGER *millis);
+const ASN1_INTEGER * __cdecl TS_ACCURACY_get_millis(const TS_ACCURACY *a);
 
-int TS_ACCURACY_set_micros(TS_ACCURACY *a, const ASN1_INTEGER *micros);
-const ASN1_INTEGER *TS_ACCURACY_get_micros(const TS_ACCURACY *a);
+int __cdecl TS_ACCURACY_set_micros(TS_ACCURACY *a, const ASN1_INTEGER *micros);
+const ASN1_INTEGER * __cdecl TS_ACCURACY_get_micros(const TS_ACCURACY *a);
 
-int TS_TST_INFO_set_ordering(TS_TST_INFO *a, int ordering);
-int TS_TST_INFO_get_ordering(const TS_TST_INFO *a);
+int __cdecl TS_TST_INFO_set_ordering(TS_TST_INFO *a, int ordering);
+int __cdecl TS_TST_INFO_get_ordering(const TS_TST_INFO *a);
 
-int TS_TST_INFO_set_nonce(TS_TST_INFO *a, const ASN1_INTEGER *nonce);
-const ASN1_INTEGER *TS_TST_INFO_get_nonce(const TS_TST_INFO *a);
+int __cdecl TS_TST_INFO_set_nonce(TS_TST_INFO *a, const ASN1_INTEGER *nonce);
+const ASN1_INTEGER * __cdecl TS_TST_INFO_get_nonce(const TS_TST_INFO *a);
 
-int TS_TST_INFO_set_tsa(TS_TST_INFO *a, GENERAL_NAME *tsa);
-GENERAL_NAME *TS_TST_INFO_get_tsa(TS_TST_INFO *a);
+int __cdecl TS_TST_INFO_set_tsa(TS_TST_INFO *a, GENERAL_NAME *tsa);
+GENERAL_NAME * __cdecl TS_TST_INFO_get_tsa(TS_TST_INFO *a);
 
-STACK_OF(X509_EXTENSION) *TS_TST_INFO_get_exts(TS_TST_INFO *a);
-void TS_TST_INFO_ext_free(TS_TST_INFO *a);
-int TS_TST_INFO_get_ext_count(TS_TST_INFO *a);
-int TS_TST_INFO_get_ext_by_NID(TS_TST_INFO *a, int nid, int lastpos);
-int TS_TST_INFO_get_ext_by_OBJ(TS_TST_INFO *a, const ASN1_OBJECT *obj,
+STACK_OF(X509_EXTENSION) * __cdecl TS_TST_INFO_get_exts(TS_TST_INFO *a);
+void __cdecl TS_TST_INFO_ext_free(TS_TST_INFO *a);
+int __cdecl TS_TST_INFO_get_ext_count(TS_TST_INFO *a);
+int __cdecl TS_TST_INFO_get_ext_by_NID(TS_TST_INFO *a, int nid, int lastpos);
+int __cdecl TS_TST_INFO_get_ext_by_OBJ(TS_TST_INFO *a, const ASN1_OBJECT *obj,
                                int lastpos);
-int TS_TST_INFO_get_ext_by_critical(TS_TST_INFO *a, int crit, int lastpos);
-X509_EXTENSION *TS_TST_INFO_get_ext(TS_TST_INFO *a, int loc);
-X509_EXTENSION *TS_TST_INFO_delete_ext(TS_TST_INFO *a, int loc);
-int TS_TST_INFO_add_ext(TS_TST_INFO *a, X509_EXTENSION *ex, int loc);
-void *TS_TST_INFO_get_ext_d2i(TS_TST_INFO *a, int nid, int *crit, int *idx);
+int __cdecl TS_TST_INFO_get_ext_by_critical(TS_TST_INFO *a, int crit, int lastpos);
+X509_EXTENSION * __cdecl TS_TST_INFO_get_ext(TS_TST_INFO *a, int loc);
+X509_EXTENSION * __cdecl TS_TST_INFO_delete_ext(TS_TST_INFO *a, int loc);
+int __cdecl TS_TST_INFO_add_ext(TS_TST_INFO *a, X509_EXTENSION *ex, int loc);
+void * __cdecl TS_TST_INFO_get_ext_d2i(TS_TST_INFO *a, int nid, int *crit, int *idx);
 
 /*
  * Declarations related to response generation, defined in ts/ts_resp_sign.c.
@@ -325,46 +325,46 @@ typedef struct TS_resp_ctx TS_RESP_CTX;
 DEFINE_STACK_OF_CONST(EVP_MD)
 
 /* Creates a response context that can be used for generating responses. */
-TS_RESP_CTX *TS_RESP_CTX_new(void);
-void TS_RESP_CTX_free(TS_RESP_CTX *ctx);
+TS_RESP_CTX * __cdecl TS_RESP_CTX_new(void);
+void __cdecl TS_RESP_CTX_free(TS_RESP_CTX *ctx);
 
 /* This parameter must be set. */
-int TS_RESP_CTX_set_signer_cert(TS_RESP_CTX *ctx, X509 *signer);
+int __cdecl TS_RESP_CTX_set_signer_cert(TS_RESP_CTX *ctx, X509 *signer);
 
 /* This parameter must be set. */
-int TS_RESP_CTX_set_signer_key(TS_RESP_CTX *ctx, EVP_PKEY *key);
+int __cdecl TS_RESP_CTX_set_signer_key(TS_RESP_CTX *ctx, EVP_PKEY *key);
 
-int TS_RESP_CTX_set_signer_digest(TS_RESP_CTX *ctx,
+int __cdecl TS_RESP_CTX_set_signer_digest(TS_RESP_CTX *ctx,
                                   const EVP_MD *signer_digest);
-int TS_RESP_CTX_set_ess_cert_id_digest(TS_RESP_CTX *ctx, const EVP_MD *md);
+int __cdecl TS_RESP_CTX_set_ess_cert_id_digest(TS_RESP_CTX *ctx, const EVP_MD *md);
 
 /* This parameter must be set. */
-int TS_RESP_CTX_set_def_policy(TS_RESP_CTX *ctx, const ASN1_OBJECT *def_policy);
+int __cdecl TS_RESP_CTX_set_def_policy(TS_RESP_CTX *ctx, const ASN1_OBJECT *def_policy);
 
 /* No additional certs are included in the response by default. */
-int TS_RESP_CTX_set_certs(TS_RESP_CTX *ctx, STACK_OF(X509) *certs);
+int __cdecl TS_RESP_CTX_set_certs(TS_RESP_CTX *ctx, STACK_OF(X509) *certs);
 
 /*
  * Adds a new acceptable policy, only the default policy is accepted by
  * default.
  */
-int TS_RESP_CTX_add_policy(TS_RESP_CTX *ctx, const ASN1_OBJECT *policy);
+int __cdecl TS_RESP_CTX_add_policy(TS_RESP_CTX *ctx, const ASN1_OBJECT *policy);
 
 /*
  * Adds a new acceptable message digest. Note that no message digests are
  * accepted by default. The md argument is shared with the caller.
  */
-int TS_RESP_CTX_add_md(TS_RESP_CTX *ctx, const EVP_MD *md);
+int __cdecl TS_RESP_CTX_add_md(TS_RESP_CTX *ctx, const EVP_MD *md);
 
 /* Accuracy is not included by default. */
-int TS_RESP_CTX_set_accuracy(TS_RESP_CTX *ctx,
+int __cdecl TS_RESP_CTX_set_accuracy(TS_RESP_CTX *ctx,
                              int secs, int millis, int micros);
 
 /*
  * Clock precision digits, i.e. the number of decimal digits: '0' means sec,
  * '3' msec, '6' usec, and so on. Default is 0.
  */
-int TS_RESP_CTX_set_clock_precision_digits(TS_RESP_CTX *ctx,
+int __cdecl TS_RESP_CTX_set_clock_precision_digits(TS_RESP_CTX *ctx,
                                            unsigned clock_precision_digits);
 /* At most we accept usec precision. */
 # define TS_MAX_CLOCK_PRECISION_DIGITS   6
@@ -373,50 +373,50 @@ int TS_RESP_CTX_set_clock_precision_digits(TS_RESP_CTX *ctx,
 # define TS_MAX_STATUS_LENGTH   (1024 * 1024)
 
 /* No flags are set by default. */
-void TS_RESP_CTX_add_flags(TS_RESP_CTX *ctx, int flags);
+void __cdecl TS_RESP_CTX_add_flags(TS_RESP_CTX *ctx, int flags);
 
 /* Default callback always returns a constant. */
-void TS_RESP_CTX_set_serial_cb(TS_RESP_CTX *ctx, TS_serial_cb cb, void *data);
+void __cdecl TS_RESP_CTX_set_serial_cb(TS_RESP_CTX *ctx, TS_serial_cb cb, void *data);
 
 /* Default callback uses the gettimeofday() and gmtime() system calls. */
-void TS_RESP_CTX_set_time_cb(TS_RESP_CTX *ctx, TS_time_cb cb, void *data);
+void __cdecl TS_RESP_CTX_set_time_cb(TS_RESP_CTX *ctx, TS_time_cb cb, void *data);
 
 /*
  * Default callback rejects all extensions. The extension callback is called
  * when the TS_TST_INFO object is already set up and not signed yet.
  */
 /* FIXME: extension handling is not tested yet. */
-void TS_RESP_CTX_set_extension_cb(TS_RESP_CTX *ctx,
+void __cdecl TS_RESP_CTX_set_extension_cb(TS_RESP_CTX *ctx,
                                   TS_extension_cb cb, void *data);
 
 /* The following methods can be used in the callbacks. */
-int TS_RESP_CTX_set_status_info(TS_RESP_CTX *ctx,
+int __cdecl TS_RESP_CTX_set_status_info(TS_RESP_CTX *ctx,
                                 int status, const char *text);
 
 /* Sets the status info only if it is still TS_STATUS_GRANTED. */
-int TS_RESP_CTX_set_status_info_cond(TS_RESP_CTX *ctx,
+int __cdecl TS_RESP_CTX_set_status_info_cond(TS_RESP_CTX *ctx,
                                      int status, const char *text);
 
-int TS_RESP_CTX_add_failure_info(TS_RESP_CTX *ctx, int failure);
+int __cdecl TS_RESP_CTX_add_failure_info(TS_RESP_CTX *ctx, int failure);
 
 /* The get methods below can be used in the extension callback. */
-TS_REQ *TS_RESP_CTX_get_request(TS_RESP_CTX *ctx);
+TS_REQ * __cdecl TS_RESP_CTX_get_request(TS_RESP_CTX *ctx);
 
-TS_TST_INFO *TS_RESP_CTX_get_tst_info(TS_RESP_CTX *ctx);
+TS_TST_INFO * __cdecl TS_RESP_CTX_get_tst_info(TS_RESP_CTX *ctx);
 
 /*
  * Creates the signed TS_TST_INFO and puts it in TS_RESP.
  * In case of errors it sets the status info properly.
  * Returns NULL only in case of memory allocation/fatal error.
  */
-TS_RESP *TS_RESP_create_response(TS_RESP_CTX *ctx, BIO *req_bio);
+TS_RESP * __cdecl TS_RESP_create_response(TS_RESP_CTX *ctx, BIO *req_bio);
 
 /*
  * Declarations related to response verification,
  * they are defined in ts/ts_resp_verify.c.
  */
 
-int TS_RESP_verify_signature(PKCS7 *token, STACK_OF(X509) *certs,
+int __cdecl TS_RESP_verify_signature(PKCS7 *token, STACK_OF(X509) *certs,
                              X509_STORE *store, X509 **signer_out);
 
 /* Context structure for the generic verify method. */
@@ -463,23 +463,23 @@ int TS_RESP_verify_signature(PKCS7 *token, STACK_OF(X509) *certs,
 
 typedef struct TS_verify_ctx TS_VERIFY_CTX;
 
-int TS_RESP_verify_response(TS_VERIFY_CTX *ctx, TS_RESP *response);
-int TS_RESP_verify_token(TS_VERIFY_CTX *ctx, PKCS7 *token);
+int __cdecl TS_RESP_verify_response(TS_VERIFY_CTX *ctx, TS_RESP *response);
+int __cdecl TS_RESP_verify_token(TS_VERIFY_CTX *ctx, PKCS7 *token);
 
 /*
  * Declarations related to response verification context,
  */
-TS_VERIFY_CTX *TS_VERIFY_CTX_new(void);
-void TS_VERIFY_CTX_init(TS_VERIFY_CTX *ctx);
-void TS_VERIFY_CTX_free(TS_VERIFY_CTX *ctx);
-void TS_VERIFY_CTX_cleanup(TS_VERIFY_CTX *ctx);
-int TS_VERIFY_CTX_set_flags(TS_VERIFY_CTX *ctx, int f);
-int TS_VERIFY_CTX_add_flags(TS_VERIFY_CTX *ctx, int f);
-BIO *TS_VERIFY_CTX_set_data(TS_VERIFY_CTX *ctx, BIO *b);
-unsigned char *TS_VERIFY_CTX_set_imprint(TS_VERIFY_CTX *ctx,
+TS_VERIFY_CTX * __cdecl TS_VERIFY_CTX_new(void);
+void __cdecl TS_VERIFY_CTX_init(TS_VERIFY_CTX *ctx);
+void __cdecl TS_VERIFY_CTX_free(TS_VERIFY_CTX *ctx);
+void __cdecl TS_VERIFY_CTX_cleanup(TS_VERIFY_CTX *ctx);
+int __cdecl TS_VERIFY_CTX_set_flags(TS_VERIFY_CTX *ctx, int f);
+int __cdecl TS_VERIFY_CTX_add_flags(TS_VERIFY_CTX *ctx, int f);
+BIO * __cdecl TS_VERIFY_CTX_set_data(TS_VERIFY_CTX *ctx, BIO *b);
+unsigned char * __cdecl TS_VERIFY_CTX_set_imprint(TS_VERIFY_CTX *ctx,
                                          unsigned char *hexstr, long len);
-X509_STORE *TS_VERIFY_CTX_set_store(TS_VERIFY_CTX *ctx, X509_STORE *s);
-STACK_OF(X509) *TS_VERIFY_CTS_set_certs(TS_VERIFY_CTX *ctx, STACK_OF(X509) *certs);
+X509_STORE * __cdecl TS_VERIFY_CTX_set_store(TS_VERIFY_CTX *ctx, X509_STORE *s);
+STACK_OF(X509) * __cdecl TS_VERIFY_CTS_set_certs(TS_VERIFY_CTX *ctx, STACK_OF(X509) *certs);
 
 /*-
  * If ctx is NULL, it allocates and returns a new object, otherwise
@@ -497,59 +497,59 @@ STACK_OF(X509) *TS_VERIFY_CTS_set_certs(TS_VERIFY_CTX *ctx, STACK_OF(X509) *cert
  * tsa_name = NULL
  * Important: after calling this method TS_VFY_SIGNATURE should be added!
  */
-TS_VERIFY_CTX *TS_REQ_to_TS_VERIFY_CTX(TS_REQ *req, TS_VERIFY_CTX *ctx);
+TS_VERIFY_CTX * __cdecl TS_REQ_to_TS_VERIFY_CTX(TS_REQ *req, TS_VERIFY_CTX *ctx);
 
 /* Function declarations for TS_RESP defined in ts/ts_resp_print.c */
 
-int TS_RESP_print_bio(BIO *bio, TS_RESP *a);
-int TS_STATUS_INFO_print_bio(BIO *bio, TS_STATUS_INFO *a);
-int TS_TST_INFO_print_bio(BIO *bio, TS_TST_INFO *a);
+int __cdecl TS_RESP_print_bio(BIO *bio, TS_RESP *a);
+int __cdecl TS_STATUS_INFO_print_bio(BIO *bio, TS_STATUS_INFO *a);
+int __cdecl TS_TST_INFO_print_bio(BIO *bio, TS_TST_INFO *a);
 
 /* Common utility functions defined in ts/ts_lib.c */
 
-int TS_ASN1_INTEGER_print_bio(BIO *bio, const ASN1_INTEGER *num);
-int TS_OBJ_print_bio(BIO *bio, const ASN1_OBJECT *obj);
-int TS_ext_print_bio(BIO *bio, const STACK_OF(X509_EXTENSION) *extensions);
-int TS_X509_ALGOR_print_bio(BIO *bio, const X509_ALGOR *alg);
-int TS_MSG_IMPRINT_print_bio(BIO *bio, TS_MSG_IMPRINT *msg);
+int __cdecl TS_ASN1_INTEGER_print_bio(BIO *bio, const ASN1_INTEGER *num);
+int __cdecl TS_OBJ_print_bio(BIO *bio, const ASN1_OBJECT *obj);
+int __cdecl TS_ext_print_bio(BIO *bio, const STACK_OF(X509_EXTENSION) *extensions);
+int __cdecl TS_X509_ALGOR_print_bio(BIO *bio, const X509_ALGOR *alg);
+int __cdecl TS_MSG_IMPRINT_print_bio(BIO *bio, TS_MSG_IMPRINT *msg);
 
 /*
  * Function declarations for handling configuration options, defined in
  * ts/ts_conf.c
  */
 
-X509 *TS_CONF_load_cert(const char *file);
-STACK_OF(X509) *TS_CONF_load_certs(const char *file);
-EVP_PKEY *TS_CONF_load_key(const char *file, const char *pass);
-const char *TS_CONF_get_tsa_section(CONF *conf, const char *section);
-int TS_CONF_set_serial(CONF *conf, const char *section, TS_serial_cb cb,
+X509 * __cdecl TS_CONF_load_cert(const char *file);
+STACK_OF(X509) * __cdecl TS_CONF_load_certs(const char *file);
+EVP_PKEY * __cdecl TS_CONF_load_key(const char *file, const char *pass);
+const char * __cdecl TS_CONF_get_tsa_section(CONF *conf, const char *section);
+int __cdecl TS_CONF_set_serial(CONF *conf, const char *section, TS_serial_cb cb,
                        TS_RESP_CTX *ctx);
 #ifndef OPENSSL_NO_ENGINE
-int TS_CONF_set_crypto_device(CONF *conf, const char *section,
+int __cdecl TS_CONF_set_crypto_device(CONF *conf, const char *section,
                               const char *device);
-int TS_CONF_set_default_engine(const char *name);
+int __cdecl TS_CONF_set_default_engine(const char *name);
 #endif
-int TS_CONF_set_signer_cert(CONF *conf, const char *section,
+int __cdecl TS_CONF_set_signer_cert(CONF *conf, const char *section,
                             const char *cert, TS_RESP_CTX *ctx);
-int TS_CONF_set_certs(CONF *conf, const char *section, const char *certs,
+int __cdecl TS_CONF_set_certs(CONF *conf, const char *section, const char *certs,
                       TS_RESP_CTX *ctx);
-int TS_CONF_set_signer_key(CONF *conf, const char *section,
+int __cdecl TS_CONF_set_signer_key(CONF *conf, const char *section,
                            const char *key, const char *pass,
                            TS_RESP_CTX *ctx);
-int TS_CONF_set_signer_digest(CONF *conf, const char *section,
+int __cdecl TS_CONF_set_signer_digest(CONF *conf, const char *section,
                                const char *md, TS_RESP_CTX *ctx);
-int TS_CONF_set_def_policy(CONF *conf, const char *section,
+int __cdecl TS_CONF_set_def_policy(CONF *conf, const char *section,
                            const char *policy, TS_RESP_CTX *ctx);
-int TS_CONF_set_policies(CONF *conf, const char *section, TS_RESP_CTX *ctx);
-int TS_CONF_set_digests(CONF *conf, const char *section, TS_RESP_CTX *ctx);
-int TS_CONF_set_accuracy(CONF *conf, const char *section, TS_RESP_CTX *ctx);
-int TS_CONF_set_clock_precision_digits(CONF *conf, const char *section,
+int __cdecl TS_CONF_set_policies(CONF *conf, const char *section, TS_RESP_CTX *ctx);
+int __cdecl TS_CONF_set_digests(CONF *conf, const char *section, TS_RESP_CTX *ctx);
+int __cdecl TS_CONF_set_accuracy(CONF *conf, const char *section, TS_RESP_CTX *ctx);
+int __cdecl TS_CONF_set_clock_precision_digits(CONF *conf, const char *section,
                                        TS_RESP_CTX *ctx);
-int TS_CONF_set_ordering(CONF *conf, const char *section, TS_RESP_CTX *ctx);
-int TS_CONF_set_tsa_name(CONF *conf, const char *section, TS_RESP_CTX *ctx);
-int TS_CONF_set_ess_cert_id_chain(CONF *conf, const char *section,
+int __cdecl TS_CONF_set_ordering(CONF *conf, const char *section, TS_RESP_CTX *ctx);
+int __cdecl TS_CONF_set_tsa_name(CONF *conf, const char *section, TS_RESP_CTX *ctx);
+int __cdecl TS_CONF_set_ess_cert_id_chain(CONF *conf, const char *section,
                                   TS_RESP_CTX *ctx);
-int TS_CONF_set_ess_cert_id_digest(CONF *conf, const char *section,
+int __cdecl TS_CONF_set_ess_cert_id_digest(CONF *conf, const char *section,
                                       TS_RESP_CTX *ctx);
 
 #  ifdef  __cplusplus
diff --git a/include/openssl/x509.h b/include/openssl/x509.h
index 39ca0ba575..d2b7862f63 100644
--- a/include/openssl/x509.h
+++ b/include/openssl/x509.h
@@ -401,19 +401,19 @@ RSA *d2i_RSAPrivateKey_fp(FILE *fp, RSA **rsa);
 int i2d_RSAPrivateKey_fp(FILE *fp, RSA *rsa);
 RSA *d2i_RSAPublicKey_fp(FILE *fp, RSA **rsa);
 int i2d_RSAPublicKey_fp(FILE *fp, RSA *rsa);
-RSA *d2i_RSA_PUBKEY_fp(FILE *fp, RSA **rsa);
+RSA * __cdecl d2i_RSA_PUBKEY_fp(FILE *fp, RSA **rsa);
 int i2d_RSA_PUBKEY_fp(FILE *fp, RSA *rsa);
 #  endif
 #  ifndef OPENSSL_NO_DSA
-DSA *d2i_DSA_PUBKEY_fp(FILE *fp, DSA **dsa);
+DSA * __cdecl d2i_DSA_PUBKEY_fp(FILE *fp, DSA **dsa);
 int i2d_DSA_PUBKEY_fp(FILE *fp, DSA *dsa);
-DSA *d2i_DSAPrivateKey_fp(FILE *fp, DSA **dsa);
+DSA * __cdecl d2i_DSAPrivateKey_fp(FILE *fp, DSA **dsa);
 int i2d_DSAPrivateKey_fp(FILE *fp, DSA *dsa);
 #  endif
 #  ifndef OPENSSL_NO_EC
-EC_KEY *d2i_EC_PUBKEY_fp(FILE *fp, EC_KEY **eckey);
+EC_KEY * __cdecl d2i_EC_PUBKEY_fp(FILE *fp, EC_KEY **eckey);
 int i2d_EC_PUBKEY_fp(FILE *fp, EC_KEY *eckey);
-EC_KEY *d2i_ECPrivateKey_fp(FILE *fp, EC_KEY **eckey);
+EC_KEY * __cdecl d2i_ECPrivateKey_fp(FILE *fp, EC_KEY **eckey);
 int i2d_ECPrivateKey_fp(FILE *fp, EC_KEY *eckey);
 #  endif
 X509_SIG *d2i_PKCS8_fp(FILE *fp, X509_SIG **p8);
@@ -423,9 +423,9 @@ PKCS8_PRIV_KEY_INFO *d2i_PKCS8_PRIV_KEY_INFO_fp(FILE *fp,
 int i2d_PKCS8_PRIV_KEY_INFO_fp(FILE *fp, PKCS8_PRIV_KEY_INFO *p8inf);
 int i2d_PKCS8PrivateKeyInfo_fp(FILE *fp, EVP_PKEY *key);
 int i2d_PrivateKey_fp(FILE *fp, EVP_PKEY *pkey);
-EVP_PKEY *d2i_PrivateKey_fp(FILE *fp, EVP_PKEY **a);
+EVP_PKEY * __cdecl d2i_PrivateKey_fp(FILE *fp, EVP_PKEY **a);
 int i2d_PUBKEY_fp(FILE *fp, EVP_PKEY *pkey);
-EVP_PKEY *d2i_PUBKEY_fp(FILE *fp, EVP_PKEY **a);
+EVP_PKEY * __cdecl d2i_PUBKEY_fp(FILE *fp, EVP_PKEY **a);
 # endif
 
 X509 *d2i_X509_bio(BIO *bp, X509 **x509);
@@ -439,19 +439,19 @@ RSA *d2i_RSAPrivateKey_bio(BIO *bp, RSA **rsa);
 int i2d_RSAPrivateKey_bio(BIO *bp, RSA *rsa);
 RSA *d2i_RSAPublicKey_bio(BIO *bp, RSA **rsa);
 int i2d_RSAPublicKey_bio(BIO *bp, RSA *rsa);
-RSA *d2i_RSA_PUBKEY_bio(BIO *bp, RSA **rsa);
+RSA * __cdecl d2i_RSA_PUBKEY_bio(BIO *bp, RSA **rsa);
 int i2d_RSA_PUBKEY_bio(BIO *bp, RSA *rsa);
 #  endif
 #  ifndef OPENSSL_NO_DSA
-DSA *d2i_DSA_PUBKEY_bio(BIO *bp, DSA **dsa);
+DSA * __cdecl d2i_DSA_PUBKEY_bio(BIO *bp, DSA **dsa);
 int i2d_DSA_PUBKEY_bio(BIO *bp, DSA *dsa);
-DSA *d2i_DSAPrivateKey_bio(BIO *bp, DSA **dsa);
+DSA * __cdecl d2i_DSAPrivateKey_bio(BIO *bp, DSA **dsa);
 int i2d_DSAPrivateKey_bio(BIO *bp, DSA *dsa);
 #  endif
 #  ifndef OPENSSL_NO_EC
-EC_KEY *d2i_EC_PUBKEY_bio(BIO *bp, EC_KEY **eckey);
+EC_KEY * __cdecl d2i_EC_PUBKEY_bio(BIO *bp, EC_KEY **eckey);
 int i2d_EC_PUBKEY_bio(BIO *bp, EC_KEY *eckey);
-EC_KEY *d2i_ECPrivateKey_bio(BIO *bp, EC_KEY **eckey);
+EC_KEY * __cdecl d2i_ECPrivateKey_bio(BIO *bp, EC_KEY **eckey);
 int i2d_ECPrivateKey_bio(BIO *bp, EC_KEY *eckey);
 #  endif
 X509_SIG *d2i_PKCS8_bio(BIO *bp, X509_SIG **p8);
@@ -461,17 +461,17 @@ PKCS8_PRIV_KEY_INFO *d2i_PKCS8_PRIV_KEY_INFO_bio(BIO *bp,
 int i2d_PKCS8_PRIV_KEY_INFO_bio(BIO *bp, PKCS8_PRIV_KEY_INFO *p8inf);
 int i2d_PKCS8PrivateKeyInfo_bio(BIO *bp, EVP_PKEY *key);
 int i2d_PrivateKey_bio(BIO *bp, EVP_PKEY *pkey);
-EVP_PKEY *d2i_PrivateKey_bio(BIO *bp, EVP_PKEY **a);
+EVP_PKEY * __cdecl d2i_PrivateKey_bio(BIO *bp, EVP_PKEY **a);
 int i2d_PUBKEY_bio(BIO *bp, EVP_PKEY *pkey);
-EVP_PKEY *d2i_PUBKEY_bio(BIO *bp, EVP_PKEY **a);
-
-X509 *X509_dup(X509 *x509);
-X509_ATTRIBUTE *X509_ATTRIBUTE_dup(X509_ATTRIBUTE *xa);
-X509_EXTENSION *X509_EXTENSION_dup(X509_EXTENSION *ex);
-X509_CRL *X509_CRL_dup(X509_CRL *crl);
-X509_REVOKED *X509_REVOKED_dup(X509_REVOKED *rev);
-X509_REQ *X509_REQ_dup(X509_REQ *req);
-X509_ALGOR *X509_ALGOR_dup(X509_ALGOR *xn);
+EVP_PKEY * __cdecl d2i_PUBKEY_bio(BIO *bp, EVP_PKEY **a);
+
+X509 * __cdecl X509_dup(X509 *x509);
+X509_ATTRIBUTE * __cdecl X509_ATTRIBUTE_dup(X509_ATTRIBUTE *xa);
+X509_EXTENSION * __cdecl X509_EXTENSION_dup(X509_EXTENSION *ex);
+X509_CRL * __cdecl X509_CRL_dup(X509_CRL *crl);
+X509_REVOKED * __cdecl X509_REVOKED_dup(X509_REVOKED *rev);
+X509_REQ * __cdecl X509_REQ_dup(X509_REQ *req);
+X509_ALGOR * __cdecl X509_ALGOR_dup(X509_ALGOR *xn);
 int X509_ALGOR_set0(X509_ALGOR *alg, ASN1_OBJECT *aobj, int ptype,
                     void *pval);
 void X509_ALGOR_get0(const ASN1_OBJECT **paobj, int *pptype,
@@ -479,8 +479,8 @@ void X509_ALGOR_get0(const ASN1_OBJECT **paobj, int *pptype,
 void X509_ALGOR_set_md(X509_ALGOR *alg, const EVP_MD *md);
 int X509_ALGOR_cmp(const X509_ALGOR *a, const X509_ALGOR *b);
 
-X509_NAME *X509_NAME_dup(X509_NAME *xn);
-X509_NAME_ENTRY *X509_NAME_ENTRY_dup(X509_NAME_ENTRY *ne);
+X509_NAME * __cdecl X509_NAME_dup(X509_NAME *xn);
+X509_NAME_ENTRY * __cdecl X509_NAME_ENTRY_dup(X509_NAME_ENTRY *ne);
 
 int X509_cmp_time(const ASN1_TIME *s, time_t *t);
 int X509_cmp_current_time(const ASN1_TIME *s);
@@ -510,19 +510,19 @@ EVP_PKEY *X509_PUBKEY_get0(X509_PUBKEY *key);
 EVP_PKEY *X509_PUBKEY_get(X509_PUBKEY *key);
 int X509_get_pubkey_parameters(EVP_PKEY *pkey, STACK_OF(X509) *chain);
 long X509_get_pathlen(X509 *x);
-int i2d_PUBKEY(EVP_PKEY *a, unsigned char **pp);
-EVP_PKEY *d2i_PUBKEY(EVP_PKEY **a, const unsigned char **pp, long length);
+int __cdecl i2d_PUBKEY(EVP_PKEY *a, unsigned char **pp);
+EVP_PKEY * __cdecl d2i_PUBKEY(EVP_PKEY **a, const unsigned char **pp, long length);
 # ifndef OPENSSL_NO_RSA
-int i2d_RSA_PUBKEY(RSA *a, unsigned char **pp);
-RSA *d2i_RSA_PUBKEY(RSA **a, const unsigned char **pp, long length);
+int __cdecl i2d_RSA_PUBKEY(RSA *a, unsigned char **pp);
+RSA * __cdecl d2i_RSA_PUBKEY(RSA **a, const unsigned char **pp, long length);
 # endif
 # ifndef OPENSSL_NO_DSA
-int i2d_DSA_PUBKEY(DSA *a, unsigned char **pp);
-DSA *d2i_DSA_PUBKEY(DSA **a, const unsigned char **pp, long length);
+int __cdecl i2d_DSA_PUBKEY(DSA *a, unsigned char **pp);
+DSA * __cdecl d2i_DSA_PUBKEY(DSA **a, const unsigned char **pp, long length);
 # endif
 # ifndef OPENSSL_NO_EC
-int i2d_EC_PUBKEY(EC_KEY *a, unsigned char **pp);
-EC_KEY *d2i_EC_PUBKEY(EC_KEY **a, const unsigned char **pp, long length);
+int __cdecl i2d_EC_PUBKEY(EC_KEY *a, unsigned char **pp);
+EC_KEY * __cdecl d2i_EC_PUBKEY(EC_KEY **a, const unsigned char **pp, long length);
 # endif
 
 DECLARE_ASN1_FUNCTIONS(X509_SIG)
@@ -555,8 +555,8 @@ DECLARE_ASN1_FUNCTIONS(X509_CERT_AUX)
     CRYPTO_get_ex_new_index(CRYPTO_EX_INDEX_X509, l, p, newf, dupf, freef)
 int X509_set_ex_data(X509 *r, int idx, void *arg);
 void *X509_get_ex_data(X509 *r, int idx);
-int i2d_X509_AUX(X509 *a, unsigned char **pp);
-X509 *d2i_X509_AUX(X509 **a, const unsigned char **pp, long length);
+int __cdecl i2d_X509_AUX(X509 *a, unsigned char **pp);
+X509 * __cdecl d2i_X509_AUX(X509 **a, const unsigned char **pp, long length);
 
 int i2d_re_X509_tbs(X509 *x, unsigned char **pp);
 
@@ -605,7 +605,7 @@ DECLARE_ASN1_FUNCTIONS(NETSCAPE_SPKAC)
 DECLARE_ASN1_FUNCTIONS(NETSCAPE_CERT_SEQUENCE)
 
 X509_INFO *X509_INFO_new(void);
-void X509_INFO_free(X509_INFO *a);
+void __cdecl X509_INFO_free(X509_INFO *a);
 char *X509_NAME_oneline(const X509_NAME *a, char *buf, int size);
 
 int ASN1_verify(i2d_of_void *i2d, X509_ALGOR *algor1,
diff --git a/include/openssl/x509_vfy.h b/include/openssl/x509_vfy.h
index adb8bce7cb..42f28f2ef7 100644
--- a/include/openssl/x509_vfy.h
+++ b/include/openssl/x509_vfy.h
@@ -258,7 +258,7 @@ X509_OBJECT *X509_OBJECT_retrieve_match(STACK_OF(X509_OBJECT) *h,
                                         X509_OBJECT *x);
 int X509_OBJECT_up_ref_count(X509_OBJECT *a);
 X509_OBJECT *X509_OBJECT_new(void);
-void X509_OBJECT_free(X509_OBJECT *a);
+void __cdecl X509_OBJECT_free(X509_OBJECT *a);
 X509_LOOKUP_TYPE X509_OBJECT_get_type(const X509_OBJECT *a);
 X509 *X509_OBJECT_get0_X509(const X509_OBJECT *a);
 int X509_OBJECT_set1_X509(X509_OBJECT *a, X509 *obj);
@@ -526,7 +526,7 @@ void X509_STORE_CTX_set0_dane(X509_STORE_CTX *ctx, SSL_DANE *dane);
 /* X509_VERIFY_PARAM functions */
 
 X509_VERIFY_PARAM *X509_VERIFY_PARAM_new(void);
-void X509_VERIFY_PARAM_free(X509_VERIFY_PARAM *param);
+void __cdecl X509_VERIFY_PARAM_free(X509_VERIFY_PARAM *param);
 int X509_VERIFY_PARAM_inherit(X509_VERIFY_PARAM *to,
                               const X509_VERIFY_PARAM *from);
 int X509_VERIFY_PARAM_set1(X509_VERIFY_PARAM *to,
diff --git a/include/openssl/x509v3.h b/include/openssl/x509v3.h
index 6c6eca38a5..3713882f86 100644
--- a/include/openssl/x509v3.h
+++ b/include/openssl/x509v3.h
@@ -557,7 +557,7 @@ GENERAL_NAME *v2i_GENERAL_NAME_ex(GENERAL_NAME *out,
                                   const X509V3_EXT_METHOD *method,
                                   X509V3_CTX *ctx, CONF_VALUE *cnf,
                                   int is_nc);
-void X509V3_conf_free(CONF_VALUE *val);
+void __cdecl X509V3_conf_free(CONF_VALUE *val);
 
 X509_EXTENSION *X509V3_EXT_nconf_nid(CONF *conf, X509V3_CTX *ctx, int ext_nid,
                                      const char *value);
diff --git a/ms/applink.c b/ms/applink.c
index 238dbff35b..52cb19477b 100644
--- a/ms/applink.c
+++ b/ms/applink.c
@@ -38,42 +38,42 @@
 # include <io.h>
 # include <fcntl.h>
 
-static void *app_stdin(void)
+static void * __cdecl app_stdin(void)
 {
     return stdin;
 }
 
-static void *app_stdout(void)
+static void * __cdecl app_stdout(void)
 {
     return stdout;
 }
 
-static void *app_stderr(void)
+static void * __cdecl app_stderr(void)
 {
     return stderr;
 }
 
-static int app_feof(FILE *fp)
+static int __cdecl app_feof(FILE *fp)
 {
     return feof(fp);
 }
 
-static int app_ferror(FILE *fp)
+static int __cdecl app_ferror(FILE *fp)
 {
     return ferror(fp);
 }
 
-static void app_clearerr(FILE *fp)
+static void __cdecl app_clearerr(FILE *fp)
 {
     clearerr(fp);
 }
 
-static int app_fileno(FILE *fp)
+static int __cdecl app_fileno(FILE *fp)
 {
     return _fileno(fp);
 }
 
-static int app_fsetmod(FILE *fp, char mod)
+static int __cdecl app_fsetmod(FILE *fp, char mod)
 {
     return _setmode(_fileno(fp), mod == 'b' ? _O_BINARY : _O_TEXT);
 }
diff --git a/ms/uplink.c b/ms/uplink.c
index cd4e96b780..8156952d93 100644
--- a/ms/uplink.c
+++ b/ms/uplink.c
@@ -31,7 +31,7 @@ static void unimplemented(void)
     TerminateProcess(GetCurrentProcess(), 1);
 }
 
-void OPENSSL_Uplink(volatile void **table, int index)
+void __cdecl OPENSSL_Uplink(volatile void **table, int index)
 {
     static HMODULE volatile apphandle = NULL;
     static void **volatile applinktable = NULL;
diff --git a/ms/uplink.h b/ms/uplink.h
index f6cd0380ae..1f0d75cc55 100644
--- a/ms/uplink.h
+++ b/ms/uplink.h
@@ -12,27 +12,27 @@
 
 extern void *OPENSSL_UplinkTable[];
 
-#define UP_stdin  (*(void *(*)(void))OPENSSL_UplinkTable[APPLINK_STDIN])()
-#define UP_stdout (*(void *(*)(void))OPENSSL_UplinkTable[APPLINK_STDOUT])()
-#define UP_stderr (*(void *(*)(void))OPENSSL_UplinkTable[APPLINK_STDERR])()
-#define UP_fprintf (*(int (*)(void *,const char *,...))OPENSSL_UplinkTable[APPLINK_FPRINTF])
-#define UP_fgets  (*(char *(*)(char *,int,void *))OPENSSL_UplinkTable[APPLINK_FGETS])
-#define UP_fread  (*(size_t (*)(void *,size_t,size_t,void *))OPENSSL_UplinkTable[APPLINK_FREAD])
-#define UP_fwrite (*(size_t (*)(const void *,size_t,size_t,void *))OPENSSL_UplinkTable[APPLINK_FWRITE])
-#define UP_fsetmod (*(int (*)(void *,char))OPENSSL_UplinkTable[APPLINK_FSETMOD])
-#define UP_feof   (*(int (*)(void *))OPENSSL_UplinkTable[APPLINK_FEOF])
-#define UP_fclose (*(int (*)(void *))OPENSSL_UplinkTable[APPLINK_FCLOSE])
+#define UP_stdin  (*(void *(__cdecl *)(void))OPENSSL_UplinkTable[APPLINK_STDIN])()
+#define UP_stdout (*(void *(__cdecl *)(void))OPENSSL_UplinkTable[APPLINK_STDOUT])()
+#define UP_stderr (*(void *(__cdecl *)(void))OPENSSL_UplinkTable[APPLINK_STDERR])()
+#define UP_fprintf (*(int (__cdecl *)(void *,const char *,...))OPENSSL_UplinkTable[APPLINK_FPRINTF])
+#define UP_fgets  (*(char *(__cdecl *)(char *,int,void *))OPENSSL_UplinkTable[APPLINK_FGETS])
+#define UP_fread  (*(size_t (__cdecl *)(void *,size_t,size_t,void *))OPENSSL_UplinkTable[APPLINK_FREAD])
+#define UP_fwrite (*(size_t (__cdecl *)(const void *,size_t,size_t,void *))OPENSSL_UplinkTable[APPLINK_FWRITE])
+#define UP_fsetmod (*(int (__cdecl *)(void *,char))OPENSSL_UplinkTable[APPLINK_FSETMOD])
+#define UP_feof   (*(int (__cdecl *)(void *))OPENSSL_UplinkTable[APPLINK_FEOF])
+#define UP_fclose (*(int (__cdecl *)(void *))OPENSSL_UplinkTable[APPLINK_FCLOSE])
 
-#define UP_fopen  (*(void *(*)(const char *,const char *))OPENSSL_UplinkTable[APPLINK_FOPEN])
-#define UP_fseek  (*(int (*)(void *,long,int))OPENSSL_UplinkTable[APPLINK_FSEEK])
-#define UP_ftell  (*(long (*)(void *))OPENSSL_UplinkTable[APPLINK_FTELL])
-#define UP_fflush (*(int (*)(void *))OPENSSL_UplinkTable[APPLINK_FFLUSH])
-#define UP_ferror (*(int (*)(void *))OPENSSL_UplinkTable[APPLINK_FERROR])
-#define UP_clearerr (*(void (*)(void *))OPENSSL_UplinkTable[APPLINK_CLEARERR])
-#define UP_fileno (*(int (*)(void *))OPENSSL_UplinkTable[APPLINK_FILENO])
+#define UP_fopen  (*(void *(__cdecl *)(const char *,const char *))OPENSSL_UplinkTable[APPLINK_FOPEN])
+#define UP_fseek  (*(int (__cdecl *)(void *,long,int))OPENSSL_UplinkTable[APPLINK_FSEEK])
+#define UP_ftell  (*(long (__cdecl *)(void *))OPENSSL_UplinkTable[APPLINK_FTELL])
+#define UP_fflush (*(int (__cdecl *)(void *))OPENSSL_UplinkTable[APPLINK_FFLUSH])
+#define UP_ferror (*(int (__cdecl *)(void *))OPENSSL_UplinkTable[APPLINK_FERROR])
+#define UP_clearerr (*(void (__cdecl *)(void *))OPENSSL_UplinkTable[APPLINK_CLEARERR])
+#define UP_fileno (*(int (__cdecl *)(void *))OPENSSL_UplinkTable[APPLINK_FILENO])
 
-#define UP_open   (*(int (*)(const char *,int,...))OPENSSL_UplinkTable[APPLINK_OPEN])
-#define UP_read   (*(ossl_ssize_t (*)(int,void *,size_t))OPENSSL_UplinkTable[APPLINK_READ])
-#define UP_write  (*(ossl_ssize_t (*)(int,const void *,size_t))OPENSSL_UplinkTable[APPLINK_WRITE])
-#define UP_lseek  (*(long (*)(int,long,int))OPENSSL_UplinkTable[APPLINK_LSEEK])
-#define UP_close  (*(int (*)(int))OPENSSL_UplinkTable[APPLINK_CLOSE])
+#define UP_open   (*(int (__cdecl *)(const char *,int,...))OPENSSL_UplinkTable[APPLINK_OPEN])
+#define UP_read   (*(ossl_ssize_t (__cdecl *)(int,void *,size_t))OPENSSL_UplinkTable[APPLINK_READ])
+#define UP_write  (*(ossl_ssize_t (__cdecl *)(int,const void *,size_t))OPENSSL_UplinkTable[APPLINK_WRITE])
+#define UP_lseek  (*(long (__cdecl *)(int,long,int))OPENSSL_UplinkTable[APPLINK_LSEEK])
+#define UP_close  (*(int (__cdecl *)(int))OPENSSL_UplinkTable[APPLINK_CLOSE])
diff --git a/ssl/s3_lib.c b/ssl/s3_lib.c
index 066bf47221..0162fa70af 100644
--- a/ssl/s3_lib.c
+++ b/ssl/s3_lib.c
@@ -3198,7 +3198,7 @@ static SSL_CIPHER ssl3_scsvs[] = {
     },
 };
 
-static int cipher_compare(const void *a, const void *b)
+static int __cdecl cipher_compare(const void *a, const void *b)
 {
     const SSL_CIPHER *ap = (const SSL_CIPHER *)a;
     const SSL_CIPHER *bp = (const SSL_CIPHER *)b;
diff --git a/ssl/ssl_asn1.c b/ssl/ssl_asn1.c
index b56c5e96c5..0b1371d60b 100644
--- a/ssl/ssl_asn1.c
+++ b/ssl/ssl_asn1.c
@@ -101,7 +101,7 @@ static void ssl_session_sinit(ASN1_OCTET_STRING **dest, ASN1_OCTET_STRING *os,
         *dest = NULL;
 }
 
-int i2d_SSL_SESSION(SSL_SESSION *in, unsigned char **pp)
+int __cdecl i2d_SSL_SESSION(SSL_SESSION *in, unsigned char **pp)
 {
 
     SSL_SESSION_ASN1 as;
@@ -236,7 +236,7 @@ static int ssl_session_memcpy(unsigned char *dst, size_t *pdstlen,
     return 1;
 }
 
-SSL_SESSION *d2i_SSL_SESSION(SSL_SESSION **a, const unsigned char **pp,
+SSL_SESSION * __cdecl d2i_SSL_SESSION(SSL_SESSION **a, const unsigned char **pp,
                              long length)
 {
     long id;
diff --git a/ssl/ssl_cert.c b/ssl/ssl_cert.c
index 9df9fb9677..a704f5ed41 100644
--- a/ssl/ssl_cert.c
+++ b/ssl/ssl_cert.c
@@ -567,7 +567,7 @@ int SSL_CTX_add_client_CA(SSL_CTX *ctx, X509 *x)
     return add_ca_name(&ctx->client_ca_names, x);
 }
 
-static int xname_cmp(const X509_NAME *a, const X509_NAME *b)
+static int __cdecl xname_cmp(const X509_NAME *a, const X509_NAME *b)
 {
     unsigned char *abuf = NULL, *bbuf = NULL;
     int alen, blen, ret;
@@ -591,7 +591,7 @@ static int xname_cmp(const X509_NAME *a, const X509_NAME *b)
     return ret;
 }
 
-static int xname_sk_cmp(const X509_NAME *const *a, const X509_NAME *const *b)
+static int __cdecl xname_sk_cmp(const X509_NAME *const *a, const X509_NAME *const *b)
 {
     return xname_cmp(*a, *b);
 }
@@ -682,7 +682,7 @@ int SSL_add_file_cert_subjects_to_stack(STACK_OF(X509_NAME) *stack,
     X509 *x = NULL;
     X509_NAME *xn = NULL;
     int ret = 1;
-    int (*oldcmp) (const X509_NAME *const *a, const X509_NAME *const *b);
+    int (__cdecl *oldcmp) (const X509_NAME *const *a, const X509_NAME *const *b);
 
     oldcmp = sk_X509_NAME_set_cmp_func(stack, xname_sk_cmp);
 
diff --git a/ssl/ssl_ciph.c b/ssl/ssl_ciph.c
index 27a1b2ec68..1263b04638 100644
--- a/ssl/ssl_ciph.c
+++ b/ssl/ssl_ciph.c
@@ -450,7 +450,7 @@ int ssl_load_ciphers(void)
 
 #ifndef OPENSSL_NO_COMP
 
-static int sk_comp_cmp(const SSL_COMP *const *a, const SSL_COMP *const *b)
+static int __cdecl sk_comp_cmp(const SSL_COMP *const *a, const SSL_COMP *const *b)
 {
     return ((*a)->id - (*b)->id);
 }
@@ -1946,7 +1946,7 @@ STACK_OF(SSL_COMP) *SSL_COMP_set0_compression_methods(STACK_OF(SSL_COMP)
     return old_meths;
 }
 
-static void cmeth_free(SSL_COMP *cm)
+static void __cdecl cmeth_free(SSL_COMP *cm)
 {
     OPENSSL_free(cm);
 }
diff --git a/ssl/ssl_lib.c b/ssl/ssl_lib.c
index ac820cf9fe..a5d417fc31 100644
--- a/ssl/ssl_lib.c
+++ b/ssl/ssl_lib.c
@@ -179,7 +179,7 @@ static void dane_ctx_final(struct dane_ctx_st *dctx)
     dctx->mdmax = 0;
 }
 
-static void tlsa_free(danetls_record *t)
+static void __cdecl tlsa_free(danetls_record *t)
 {
     if (t == NULL)
         return;
@@ -2411,7 +2411,7 @@ long SSL_CTX_callback_ctrl(SSL_CTX *ctx, int cmd, void (*fp) (void))
     }
 }
 
-int ssl_cipher_id_cmp(const SSL_CIPHER *a, const SSL_CIPHER *b)
+int __cdecl ssl_cipher_id_cmp(const SSL_CIPHER *a, const SSL_CIPHER *b)
 {
     if (a->id > b->id)
         return 1;
@@ -2420,7 +2420,7 @@ int ssl_cipher_id_cmp(const SSL_CIPHER *a, const SSL_CIPHER *b)
     return 0;
 }
 
-int ssl_cipher_ptr_id_cmp(const SSL_CIPHER *const *ap,
+int __cdecl ssl_cipher_ptr_id_cmp(const SSL_CIPHER *const *ap,
                           const SSL_CIPHER *const *bp)
 {
     if ((*ap)->id > (*bp)->id)
@@ -2888,7 +2888,7 @@ static unsigned long ssl_session_hash(const SSL_SESSION *a)
  * being able to construct an SSL_SESSION that will collide with any existing
  * session with a matching session ID.
  */
-static int ssl_session_cmp(const SSL_SESSION *a, const SSL_SESSION *b)
+static int __cdecl ssl_session_cmp(const SSL_SESSION *a, const SSL_SESSION *b)
 {
     if (a->ssl_version != b->ssl_version)
         return 1;
diff --git a/ssl/ssl_locl.h b/ssl/ssl_locl.h
index 25875c9f6d..d49523aee1 100644
--- a/ssl/ssl_locl.h
+++ b/ssl/ssl_locl.h
@@ -2263,9 +2263,9 @@ __owur SSL_SESSION *lookup_sess_in_cache(SSL *s, const unsigned char *sess_id,
                                          size_t sess_id_len);
 __owur int ssl_get_prev_session(SSL *s, CLIENTHELLO_MSG *hello);
 __owur SSL_SESSION *ssl_session_dup(SSL_SESSION *src, int ticket);
-__owur int ssl_cipher_id_cmp(const SSL_CIPHER *a, const SSL_CIPHER *b);
+__owur int __cdecl ssl_cipher_id_cmp(const SSL_CIPHER *a, const SSL_CIPHER *b);
 DECLARE_OBJ_BSEARCH_GLOBAL_CMP_FN(SSL_CIPHER, SSL_CIPHER, ssl_cipher_id);
-__owur int ssl_cipher_ptr_id_cmp(const SSL_CIPHER *const *ap,
+__owur int __cdecl ssl_cipher_ptr_id_cmp(const SSL_CIPHER *const *ap,
                                  const SSL_CIPHER *const *bp);
 __owur STACK_OF(SSL_CIPHER) *ssl_create_cipher_list(const SSL_METHOD *ssl_method,
                                                     STACK_OF(SSL_CIPHER) *tls13_ciphersuites,
diff --git a/ssl/ssl_sess.c b/ssl/ssl_sess.c
index 52cfa7ef6d..243dff6c56 100644
--- a/ssl/ssl_sess.c
+++ b/ssl/ssl_sess.c
@@ -62,7 +62,7 @@ void *SSL_SESSION_get_ex_data(const SSL_SESSION *s, int idx)
     return CRYPTO_get_ex_data(&s->ex_data, idx);
 }
 
-SSL_SESSION *SSL_SESSION_new(void)
+SSL_SESSION * __cdecl SSL_SESSION_new(void)
 {
     SSL_SESSION *ss;
 
diff --git a/ssl/statem/statem_lib.c b/ssl/statem/statem_lib.c
index 22e9f0490e..1c9ed9b9cf 100644
--- a/ssl/statem/statem_lib.c
+++ b/ssl/statem/statem_lib.c
@@ -2218,7 +2218,7 @@ int create_synthetic_message_hash(SSL *s, const unsigned char *hashval,
     return 1;
 }
 
-static int ca_dn_cmp(const X509_NAME *const *a, const X509_NAME *const *b)
+static int __cdecl ca_dn_cmp(const X509_NAME *const *a, const X509_NAME *const *b)
 {
     return X509_NAME_cmp(*a, *b);
 }
diff --git a/test/aborttest.c b/test/aborttest.c
index ba5055edff..885734d4bf 100644
--- a/test/aborttest.c
+++ b/test/aborttest.c
@@ -9,7 +9,7 @@
 
 #include <openssl/crypto.h>
 
-int main(int argc, char **argv)
+int __cdecl main(int argc, char **argv)
 {
     OPENSSL_die("Voluntary abort", __FILE__, __LINE__);
     return 0;
diff --git a/test/asynctest.c b/test/asynctest.c
index 9728a37911..2061b76020 100644
--- a/test/asynctest.c
+++ b/test/asynctest.c
@@ -269,7 +269,7 @@ static int test_ASYNC_block_pause(void)
     return 1;
 }
 
-int main(int argc, char **argv)
+int __cdecl main(int argc, char **argv)
 {
     if (!ASYNC_is_capable()) {
         fprintf(stderr,
diff --git a/test/bio_callback_test.c b/test/bio_callback_test.c
index 8a17602d79..6928f40587 100644
--- a/test/bio_callback_test.c
+++ b/test/bio_callback_test.c
@@ -21,7 +21,7 @@ static int         my_param_argi[MAXCOUNT];
 static long        my_param_argl[MAXCOUNT];
 static long        my_param_ret[MAXCOUNT];
 
-static long my_bio_callback(BIO *b, int oper, const char *argp, int argi,
+static long __cdecl my_bio_callback(BIO *b, int oper, const char *argp, int argi,
                             long argl, long ret)
 {
     if (my_param_count >= MAXCOUNT)
diff --git a/test/danetest.c b/test/danetest.c
index 54a79ab51f..ba6ad6fb57 100644
--- a/test/danetest.c
+++ b/test/danetest.c
@@ -100,7 +100,7 @@ static STACK_OF(X509) *load_chain(BIO *fp, int nelem)
     long len;
     char *errtype = 0;                /* if error: cert or pkey? */
     STACK_OF(X509) *chain;
-    typedef X509 *(*d2i_X509_t)(X509 **, const unsigned char **, long);
+    typedef X509 *(__cdecl * d2i_X509_t)(X509 **, const unsigned char **, long);
 
     if (!TEST_ptr(chain = sk_X509_new_null()))
         goto err;
diff --git a/test/dhtest.c b/test/dhtest.c
index 9d5609b943..35606f58a7 100644
--- a/test/dhtest.c
+++ b/test/dhtest.c
@@ -484,7 +484,7 @@ static const unsigned char dhtest_rfc5114_2048_224_bad_y[] = {
 };
 
 typedef struct {
-    DH *(*get_param) (void);
+    DH *(__cdecl *get_param) (void);
     const unsigned char *xA;
     size_t xA_len;
     const unsigned char *yA;
diff --git a/test/evp_test.c b/test/evp_test.c
index abb51384e8..b9e084eb41 100644
--- a/test/evp_test.c
+++ b/test/evp_test.c
@@ -106,7 +106,7 @@ struct evp_test_buffer_st {
     int count_set;
 };
 
-static void evp_test_buffer_free(EVP_TEST_BUFFER *db)
+static void __cdecl evp_test_buffer_free(EVP_TEST_BUFFER *db)
 {
     if (db != NULL) {
         OPENSSL_free(db->buf);
@@ -919,7 +919,7 @@ static int mac_test_init(EVP_TEST *t, const char *alg)
 }
 
 /* Because OPENSSL_free is a macro, it can't be passed as a function pointer */
-static void openssl_free(char *m)
+static void __cdecl openssl_free(char *m)
 {
     OPENSSL_free(m);
 }
diff --git a/test/generate_buildtest.pl b/test/generate_buildtest.pl
index f9a663bea6..dff61939c1 100644
--- a/test/generate_buildtest.pl
+++ b/test/generate_buildtest.pl
@@ -27,7 +27,7 @@ print <<"_____";
 # include <openssl/$name.h>
 #endif
 
-int main(void)
+int __cdecl main(void)
 {
     return 0;
 }
diff --git a/test/lhash_test.c b/test/lhash_test.c
index 162286b7cd..3740062220 100644
--- a/test/lhash_test.c
+++ b/test/lhash_test.c
@@ -39,7 +39,7 @@ static unsigned long int int_hash(const int *p)
     return 3 & *p;      /* To force collisions */
 }
 
-static int int_cmp(const int *p, const int *q)
+static int __cdecl int_cmp(const int *p, const int *q)
 {
     return *p != *q;
 }
diff --git a/test/memleaktest.c b/test/memleaktest.c
index d239bd23b8..6179fa76ed 100644
--- a/test/memleaktest.c
+++ b/test/memleaktest.c
@@ -23,7 +23,7 @@
  * but that is worse than avoiding the test framework's main.
  */
 
-int main(int argc, char *argv[])
+int __cdecl main(int argc, char *argv[])
 {
 #ifndef OPENSSL_NO_CRYPTO_MDEBUG
     char *p;
diff --git a/test/ossl_shim/ossl_shim.cc b/test/ossl_shim/ossl_shim.cc
index 90d1f1ef40..a38fe0fdc9 100644
--- a/test/ossl_shim/ossl_shim.cc
+++ b/test/ossl_shim/ossl_shim.cc
@@ -1295,6 +1295,6 @@ static int Main(int argc, char **argv) {
 
 }  // namespace bssl
 
-int main(int argc, char **argv) {
+int __cdecl main(int argc, char **argv) {
   return bssl::Main(argc, argv);
 }
diff --git a/test/rsa_complex.c b/test/rsa_complex.c
index fac581254a..55564a2d0a 100644
--- a/test/rsa_complex.c
+++ b/test/rsa_complex.c
@@ -20,7 +20,7 @@
 #include <openssl/rsa.h>
 #include <stdlib.h>
 
-int main(int argc, char *argv[])
+int __cdecl main(int argc, char *argv[])
 {
     /* There are explicitly no run time checks for this one */
     return EXIT_SUCCESS;
diff --git a/test/shlibloadtest.c b/test/shlibloadtest.c
index 86bbfcd849..a4ca1ae484 100644
--- a/test/shlibloadtest.c
+++ b/test/shlibloadtest.c
@@ -294,7 +294,7 @@ end:
  * it to link against libcrypto (which the framework uses). The point of the
  * test is to check dynamic loading and unloading of libcrypto/libssl.
  */
-int main(int argc, char *argv[])
+int __cdecl main(int argc, char *argv[])
 {
     const char *p;
 
diff --git a/test/ssltest_old.c b/test/ssltest_old.c
index 36e6031f3a..4d97ea7bb9 100644
--- a/test/ssltest_old.c
+++ b/test/ssltest_old.c
@@ -872,7 +872,7 @@ static int set_protocol_version(const char *version, SSL *ssl, int setting)
     return 1;
 }
 
-int main(int argc, char *argv[])
+int __cdecl main(int argc, char *argv[])
 {
     const char *CApath = NULL, *CAfile = NULL;
     int badop = 0;
diff --git a/test/ssltestlib.c b/test/ssltestlib.c
index 456afdf471..aec9b1d7f7 100644
--- a/test/ssltestlib.c
+++ b/test/ssltestlib.c
@@ -279,7 +279,7 @@ struct mempacket_st {
     unsigned int type;
 };
 
-static void mempacket_free(MEMPACKET *pkt)
+static void __cdecl mempacket_free(MEMPACKET *pkt)
 {
     if (pkt->data != NULL)
         OPENSSL_free(pkt->data);
diff --git a/test/stack_test.c b/test/stack_test.c
index 680f68d60e..3f8e4f96f5 100644
--- a/test/stack_test.c
+++ b/test/stack_test.c
@@ -41,7 +41,7 @@ DEFINE_SPECIAL_STACK_OF_CONST(uchar, unsigned char)
 DEFINE_STACK_OF(SS)
 DEFINE_STACK_OF_CONST(SU)
 
-static int int_compare(const int *const *a, const int *const *b)
+static int __cdecl int_compare(const int *const *a, const int *const *b)
 {
     if (**a < **b)
         return -1;
@@ -165,7 +165,7 @@ end:
     return testresult;
 }
 
-static int uchar_compare(const unsigned char *const *a,
+static int __cdecl uchar_compare(const unsigned char *const *a,
                          const unsigned char *const *b)
 {
     return **a - (signed int)**b;
@@ -251,7 +251,7 @@ end:
     return testresult;
 }
 
-static SS *SS_copy(const SS *p)
+static SS * __cdecl SS_copy(const SS *p)
 {
     SS *q = OPENSSL_malloc(sizeof(*q));
 
@@ -260,7 +260,7 @@ static SS *SS_copy(const SS *p)
     return q;
 }
 
-static void SS_free(SS *p) {
+static void __cdecl SS_free(SS *p) {
     OPENSSL_free(p);
 }
 
diff --git a/test/testutil/main.c b/test/testutil/main.c
index d3ccdda391..f86bc5dbc5 100644
--- a/test/testutil/main.c
+++ b/test/testutil/main.c
@@ -31,7 +31,7 @@ static void check_arg_usage(void)
         test_printf_stderr("Warning arguments %zu and later unchecked\n", i);
 }
 
-int main(int argc, char *argv[])
+int __cdecl main(int argc, char *argv[])
 {
     int ret = EXIT_FAILURE;
 
diff --git a/test/versions.c b/test/versions.c
index 3ab05ec35d..c9e32f6793 100644
--- a/test/versions.c
+++ b/test/versions.c
@@ -12,7 +12,7 @@
 #include <openssl/crypto.h>
 
 /* A simple helper for the perl function OpenSSL::Test::openssl_versions */
-int main(void)
+int __cdecl main(void)
 {
     printf("Build version: 0x%08lX\n", OPENSSL_VERSION_NUMBER);
     printf("Library version: 0x%08lX\n", OpenSSL_version_num());
diff --git a/test/x509aux.c b/test/x509aux.c
index e41f1f6809..7b80c58e3a 100644
--- a/test/x509aux.c
+++ b/test/x509aux.c
@@ -26,8 +26,8 @@ static int test_certs(int num)
     char *header = 0;
     unsigned char *data = 0;
     long len;
-    typedef X509 *(*d2i_X509_t)(X509 **, const unsigned char **, long);
-    typedef int (*i2d_X509_t)(X509 *, unsigned char **);
+    typedef X509 *(__cdecl * d2i_X509_t)(X509 **, const unsigned char **, long);
+    typedef int (__cdecl * i2d_X509_t)(X509 *, unsigned char **);
     int err = 0;
     BIO *fp = BIO_new_file(test_get_argument(num), "r");
     X509 *reuse = NULL;
diff --git a/util/mkdef.pl b/util/mkdef.pl
index 3ac79821b0..ed05e5584d 100755
--- a/util/mkdef.pl
+++ b/util/mkdef.pl
@@ -297,7 +297,7 @@ if($do_crypto == 1) {
  * to link to all of them. This is *not* intended to be run!
  */
 
-int main()
+int __cdecl main()
 {
 EOF
 	&print_test_file(*STDOUT,"LIBSSL",*ssl_list,$do_ctestall,@ssl_symbols)
diff --git a/crypto/dsa/dsa_asn1.c b/crypto/dsa/dsa_asn1.c
index 6499e87ef3..6212c3abae 100644
--- a/crypto/dsa/dsa_asn1.c
+++ b/crypto/dsa/dsa_asn1.c
@@ -21,7 +21,7 @@ ASN1_SEQUENCE(DSA_SIG) = {
 
 IMPLEMENT_ASN1_ENCODE_FUNCTIONS_const_fname(DSA_SIG, DSA_SIG, DSA_SIG)
 
-DSA_SIG *DSA_SIG_new(void)
+DSA_SIG * __cdecl DSA_SIG_new(void)
 {
     DSA_SIG *sig = OPENSSL_zalloc(sizeof(*sig));
     if (sig == NULL)
@@ -29,7 +29,7 @@ DSA_SIG *DSA_SIG_new(void)
     return sig;
 }
 
-void DSA_SIG_free(DSA_SIG *sig)
+void __cdecl DSA_SIG_free(DSA_SIG *sig)
 {
     if (sig == NULL)
         return;
@@ -38,7 +38,7 @@ void DSA_SIG_free(DSA_SIG *sig)
     OPENSSL_free(sig);
 }
 
-void DSA_SIG_get0(const DSA_SIG *sig, const BIGNUM **pr, const BIGNUM **ps)
+void __cdecl DSA_SIG_get0(const DSA_SIG *sig, const BIGNUM **pr, const BIGNUM **ps)
 {
     if (pr != NULL)
         *pr = sig->r;
@@ -46,7 +46,7 @@ void DSA_SIG_get0(const DSA_SIG *sig, const BIGNUM **pr, const BIGNUM **ps)
         *ps = sig->s;
 }
 
-int DSA_SIG_set0(DSA_SIG *sig, BIGNUM *r, BIGNUM *s)
+int __cdecl DSA_SIG_set0(DSA_SIG *sig, BIGNUM *r, BIGNUM *s)
 {
     if (r == NULL || s == NULL)
         return 0;
@@ -102,12 +102,12 @@ ASN1_SEQUENCE_cb(DSAPublicKey, dsa_cb) = {
 
 IMPLEMENT_ASN1_ENCODE_FUNCTIONS_const_fname(DSA, DSAPublicKey, DSAPublicKey)
 
-DSA *DSAparams_dup(DSA *dsa)
+DSA * __cdecl DSAparams_dup(DSA *dsa)
 {
     return ASN1_item_dup(ASN1_ITEM_rptr(DSAparams), dsa);
 }
 
-int DSA_sign(int type, const unsigned char *dgst, int dlen,
+int __cdecl DSA_sign(int type, const unsigned char *dgst, int dlen,
              unsigned char *sig, unsigned int *siglen, DSA *dsa)
 {
     DSA_SIG *s;
@@ -129,7 +129,7 @@ int DSA_sign(int type, const unsigned char *dgst, int dlen,
  *      0: incorrect signature
  *     -1: error
  */
-int DSA_verify(int type, const unsigned char *dgst, int dgst_len,
+int __cdecl DSA_verify(int type, const unsigned char *dgst, int dgst_len,
                const unsigned char *sigbuf, int siglen, DSA *dsa)
 {
     DSA_SIG *s;
diff --git a/crypto/dsa/dsa_gen.c b/crypto/dsa/dsa_gen.c
index af59a582b5..adf6d55561 100644
--- a/crypto/dsa/dsa_gen.c
+++ b/crypto/dsa/dsa_gen.c
@@ -23,7 +23,7 @@
 #include <openssl/sha.h>
 #include "dsa_locl.h"
 
-int DSA_generate_parameters_ex(DSA *ret, int bits,
+int __cdecl DSA_generate_parameters_ex(DSA *ret, int bits,
                                const unsigned char *seed_in, int seed_len,
                                int *counter_ret, unsigned long *h_ret,
                                BN_GENCB *cb)
diff --git a/crypto/dsa/dsa_key.c b/crypto/dsa/dsa_key.c
index a48af58492..7e5140c1bf 100644
--- a/crypto/dsa/dsa_key.c
+++ b/crypto/dsa/dsa_key.c
@@ -15,7 +15,7 @@
 
 static int dsa_builtin_keygen(DSA *dsa);
 
-int DSA_generate_key(DSA *dsa)
+int __cdecl DSA_generate_key(DSA *dsa)
 {
     if (dsa->meth->dsa_keygen)
         return dsa->meth->dsa_keygen(dsa);
diff --git a/crypto/dsa/dsa_lib.c b/crypto/dsa/dsa_lib.c
index 85919db19f..686d1c6532 100644
--- a/crypto/dsa/dsa_lib.c
+++ b/crypto/dsa/dsa_lib.c
@@ -21,7 +21,7 @@ DSA * __cdecl DSA_new(void)
     return DSA_new_method(NULL);
 }
 
-int DSA_set_method(DSA *dsa, const DSA_METHOD *meth)
+int __cdecl DSA_set_method(DSA *dsa, const DSA_METHOD *meth)
 {
     /*
      * NB: The caller is specifically setting a method, so it's not up to us
@@ -41,12 +41,12 @@ int DSA_set_method(DSA *dsa, const DSA_METHOD *meth)
     return 1;
 }
 
-const DSA_METHOD *DSA_get_method(DSA *d)
+const DSA_METHOD * __cdecl DSA_get_method(DSA *d)
 {
     return d->meth;
 }
 
-DSA *DSA_new_method(ENGINE *engine)
+DSA * __cdecl DSA_new_method(ENGINE *engine)
 {
     DSA *ret = OPENSSL_zalloc(sizeof(*ret));
 
@@ -100,7 +100,7 @@ DSA *DSA_new_method(ENGINE *engine)
     return NULL;
 }
 
-void DSA_free(DSA *r)
+void __cdecl DSA_free(DSA *r)
 {
     int i;
 
@@ -131,7 +131,7 @@ void DSA_free(DSA *r)
     OPENSSL_free(r);
 }
 
-int DSA_up_ref(DSA *r)
+int __cdecl DSA_up_ref(DSA *r)
 {
     int i;
 
@@ -143,7 +143,7 @@ int DSA_up_ref(DSA *r)
     return ((i > 1) ? 1 : 0);
 }
 
-int DSA_size(const DSA *r)
+int __cdecl DSA_size(const DSA *r)
 {
     int ret, i;
     ASN1_INTEGER bs;
@@ -165,17 +165,17 @@ int DSA_size(const DSA *r)
     return ret;
 }
 
-int DSA_set_ex_data(DSA *d, int idx, void *arg)
+int __cdecl DSA_set_ex_data(DSA *d, int idx, void *arg)
 {
     return CRYPTO_set_ex_data(&d->ex_data, idx, arg);
 }
 
-void *DSA_get_ex_data(DSA *d, int idx)
+void * __cdecl DSA_get_ex_data(DSA *d, int idx)
 {
     return CRYPTO_get_ex_data(&d->ex_data, idx);
 }
 
-int DSA_security_bits(const DSA *d)
+int __cdecl DSA_security_bits(const DSA *d)
 {
     if (d->p && d->q)
         return BN_security_bits(BN_num_bits(d->p), BN_num_bits(d->q));
@@ -183,7 +183,7 @@ int DSA_security_bits(const DSA *d)
 }
 
 #ifndef OPENSSL_NO_DH
-DH *DSA_dup_DH(const DSA *r)
+DH * __cdecl DSA_dup_DH(const DSA *r)
 {
     /*
      * DSA has p, q, g, optional pub_key, optional priv_key. DH has p,
@@ -240,7 +240,7 @@ DH *DSA_dup_DH(const DSA *r)
 }
 #endif
 
-void DSA_get0_pqg(const DSA *d,
+void __cdecl DSA_get0_pqg(const DSA *d,
                   const BIGNUM **p, const BIGNUM **q, const BIGNUM **g)
 {
     if (p != NULL)
@@ -251,7 +251,7 @@ void DSA_get0_pqg(const DSA *d,
         *g = d->g;
 }
 
-int DSA_set0_pqg(DSA *d, BIGNUM *p, BIGNUM *q, BIGNUM *g)
+int __cdecl DSA_set0_pqg(DSA *d, BIGNUM *p, BIGNUM *q, BIGNUM *g)
 {
     /* If the fields p, q and g in d are NULL, the corresponding input
      * parameters MUST be non-NULL.
@@ -277,7 +277,7 @@ int DSA_set0_pqg(DSA *d, BIGNUM *p, BIGNUM *q, BIGNUM *g)
     return 1;
 }
 
-void DSA_get0_key(const DSA *d,
+void __cdecl DSA_get0_key(const DSA *d,
                   const BIGNUM **pub_key, const BIGNUM **priv_key)
 {
     if (pub_key != NULL)
@@ -286,7 +286,7 @@ void DSA_get0_key(const DSA *d,
         *priv_key = d->priv_key;
 }
 
-int DSA_set0_key(DSA *d, BIGNUM *pub_key, BIGNUM *priv_key)
+int __cdecl DSA_set0_key(DSA *d, BIGNUM *pub_key, BIGNUM *priv_key)
 {
     /* If the field pub_key in d is NULL, the corresponding input
      * parameters MUST be non-NULL.  The priv_key field may
@@ -307,52 +307,52 @@ int DSA_set0_key(DSA *d, BIGNUM *pub_key, BIGNUM *priv_key)
     return 1;
 }
 
-const BIGNUM *DSA_get0_p(const DSA *d)
+const BIGNUM * __cdecl DSA_get0_p(const DSA *d)
 {
     return d->p;
 }
 
-const BIGNUM *DSA_get0_q(const DSA *d)
+const BIGNUM * __cdecl DSA_get0_q(const DSA *d)
 {
     return d->q;
 }
 
-const BIGNUM *DSA_get0_g(const DSA *d)
+const BIGNUM * __cdecl DSA_get0_g(const DSA *d)
 {
     return d->g;
 }
 
-const BIGNUM *DSA_get0_pub_key(const DSA *d)
+const BIGNUM * __cdecl DSA_get0_pub_key(const DSA *d)
 {
     return d->pub_key;
 }
 
-const BIGNUM *DSA_get0_priv_key(const DSA *d)
+const BIGNUM * __cdecl DSA_get0_priv_key(const DSA *d)
 {
     return d->priv_key;
 }
 
-void DSA_clear_flags(DSA *d, int flags)
+void __cdecl DSA_clear_flags(DSA *d, int flags)
 {
     d->flags &= ~flags;
 }
 
-int DSA_test_flags(const DSA *d, int flags)
+int __cdecl DSA_test_flags(const DSA *d, int flags)
 {
     return d->flags & flags;
 }
 
-void DSA_set_flags(DSA *d, int flags)
+void __cdecl DSA_set_flags(DSA *d, int flags)
 {
     d->flags |= flags;
 }
 
-ENGINE *DSA_get0_engine(DSA *d)
+ENGINE * __cdecl DSA_get0_engine(DSA *d)
 {
     return d->engine;
 }
 
-int DSA_bits(const DSA *dsa)
+int __cdecl DSA_bits(const DSA *dsa)
 {
     return BN_num_bits(dsa->p);
 }
diff --git a/crypto/dsa/dsa_locl.h b/crypto/dsa/dsa_locl.h
index a81a4b4978..96310a6585 100644
--- a/crypto/dsa/dsa_locl.h
+++ b/crypto/dsa/dsa_locl.h
@@ -40,7 +40,7 @@ struct DSA_SIG_st {
 
 struct dsa_method {
     char *name;
-    DSA_SIG *(*dsa_do_sign) (const unsigned char *dgst, int dlen, DSA *dsa);
+    DSA_SIG *(__cdecl *dsa_do_sign) (const unsigned char *dgst, int dlen, DSA *dsa);
     int (*dsa_sign_setup) (DSA *dsa, BN_CTX *ctx_in, BIGNUM **kinvp,
                            BIGNUM **rp);
     int (*dsa_do_verify) (const unsigned char *dgst, int dgst_len,
diff --git a/crypto/dsa/dsa_meth.c b/crypto/dsa/dsa_meth.c
index ff4fae44a7..c7c5eae75d 100644
--- a/crypto/dsa/dsa_meth.c
+++ b/crypto/dsa/dsa_meth.c
@@ -19,7 +19,7 @@
 #include <string.h>
 #include <openssl/err.h>
 
-DSA_METHOD *DSA_meth_new(const char *name, int flags)
+DSA_METHOD * __cdecl DSA_meth_new(const char *name, int flags)
 {
     DSA_METHOD *dsam = OPENSSL_zalloc(sizeof(*dsam));
 
@@ -37,7 +37,7 @@ DSA_METHOD *DSA_meth_new(const char *name, int flags)
     return NULL;
 }
 
-void DSA_meth_free(DSA_METHOD *dsam)
+void __cdecl DSA_meth_free(DSA_METHOD *dsam)
 {
     if (dsam != NULL) {
         OPENSSL_free(dsam->name);
@@ -45,7 +45,7 @@ void DSA_meth_free(DSA_METHOD *dsam)
     }
 }
 
-DSA_METHOD *DSA_meth_dup(const DSA_METHOD *dsam)
+DSA_METHOD * __cdecl DSA_meth_dup(const DSA_METHOD *dsam)
 {
     DSA_METHOD *ret = OPENSSL_malloc(sizeof(*ret));
 
@@ -63,12 +63,12 @@ DSA_METHOD *DSA_meth_dup(const DSA_METHOD *dsam)
     return NULL;
 }
 
-const char *DSA_meth_get0_name(const DSA_METHOD *dsam)
+const char * __cdecl DSA_meth_get0_name(const DSA_METHOD *dsam)
 {
     return dsam->name;
 }
 
-int DSA_meth_set1_name(DSA_METHOD *dsam, const char *name)
+int __cdecl DSA_meth_set1_name(DSA_METHOD *dsam, const char *name)
 {
     char *tmpname = OPENSSL_strdup(name);
 
@@ -83,75 +83,75 @@ int DSA_meth_set1_name(DSA_METHOD *dsam, const char *name)
     return 1;
 }
 
-int DSA_meth_get_flags(const DSA_METHOD *dsam)
+int __cdecl DSA_meth_get_flags(const DSA_METHOD *dsam)
 {
     return dsam->flags;
 }
 
-int DSA_meth_set_flags(DSA_METHOD *dsam, int flags)
+int __cdecl DSA_meth_set_flags(DSA_METHOD *dsam, int flags)
 {
     dsam->flags = flags;
     return 1;
 }
 
-void *DSA_meth_get0_app_data(const DSA_METHOD *dsam)
+void * __cdecl DSA_meth_get0_app_data(const DSA_METHOD *dsam)
 {
     return dsam->app_data;
 }
 
-int DSA_meth_set0_app_data(DSA_METHOD *dsam, void *app_data)
+int __cdecl DSA_meth_set0_app_data(DSA_METHOD *dsam, void *app_data)
 {
     dsam->app_data = app_data;
     return 1;
 }
 
-DSA_SIG *(*DSA_meth_get_sign(const DSA_METHOD *dsam))
+DSA_SIG *(__cdecl *DSA_meth_get_sign(const DSA_METHOD *dsam))
         (const unsigned char *, int, DSA *)
 {
     return dsam->dsa_do_sign;
 }
 
-int DSA_meth_set_sign(DSA_METHOD *dsam,
-                       DSA_SIG *(*sign) (const unsigned char *, int, DSA *))
+int __cdecl DSA_meth_set_sign(DSA_METHOD *dsam,
+                       DSA_SIG *(__cdecl *sign) (const unsigned char *, int, DSA *))
 {
     dsam->dsa_do_sign = sign;
     return 1;
 }
 
-int (*DSA_meth_get_sign_setup(const DSA_METHOD *dsam))
+int (* __cdecl DSA_meth_get_sign_setup(const DSA_METHOD *dsam))
         (DSA *, BN_CTX *, BIGNUM **, BIGNUM **)
 {
     return dsam->dsa_sign_setup;
 }
 
-int DSA_meth_set_sign_setup(DSA_METHOD *dsam,
+int __cdecl DSA_meth_set_sign_setup(DSA_METHOD *dsam,
         int (*sign_setup) (DSA *, BN_CTX *, BIGNUM **, BIGNUM **))
 {
     dsam->dsa_sign_setup = sign_setup;
     return 1;
 }
 
-int (*DSA_meth_get_verify(const DSA_METHOD *dsam))
+int (* __cdecl DSA_meth_get_verify(const DSA_METHOD *dsam))
         (const unsigned char *, int, DSA_SIG *, DSA *)
 {
     return dsam->dsa_do_verify;
 }
 
-int DSA_meth_set_verify(DSA_METHOD *dsam,
+int __cdecl DSA_meth_set_verify(DSA_METHOD *dsam,
     int (*verify) (const unsigned char *, int, DSA_SIG *, DSA *))
 {
     dsam->dsa_do_verify = verify;
     return 1;
 }
 
-int (*DSA_meth_get_mod_exp(const DSA_METHOD *dsam))
+int (* __cdecl DSA_meth_get_mod_exp(const DSA_METHOD *dsam))
         (DSA *, BIGNUM *, const BIGNUM *, const BIGNUM *, const BIGNUM *,
          const BIGNUM *, const BIGNUM *, BN_CTX *, BN_MONT_CTX *)
 {
     return dsam->dsa_mod_exp;
 }
 
-int DSA_meth_set_mod_exp(DSA_METHOD *dsam,
+int __cdecl DSA_meth_set_mod_exp(DSA_METHOD *dsam,
     int (*mod_exp) (DSA *, BIGNUM *, const BIGNUM *, const BIGNUM *,
                     const BIGNUM *, const BIGNUM *, const BIGNUM *, BN_CTX *,
                     BN_MONT_CTX *))
@@ -160,14 +160,14 @@ int DSA_meth_set_mod_exp(DSA_METHOD *dsam,
     return 1;
 }
 
-int (*DSA_meth_get_bn_mod_exp(const DSA_METHOD *dsam))
+int (* __cdecl DSA_meth_get_bn_mod_exp(const DSA_METHOD *dsam))
     (DSA *, BIGNUM *, const BIGNUM *, const BIGNUM *, const BIGNUM *, BN_CTX *,
      BN_MONT_CTX *)
 {
     return dsam->bn_mod_exp;
 }
 
-int DSA_meth_set_bn_mod_exp(DSA_METHOD *dsam,
+int __cdecl DSA_meth_set_bn_mod_exp(DSA_METHOD *dsam,
     int (*bn_mod_exp) (DSA *, BIGNUM *, const BIGNUM *, const BIGNUM *,
                        const BIGNUM *, BN_CTX *, BN_MONT_CTX *))
 {
@@ -175,36 +175,36 @@ int DSA_meth_set_bn_mod_exp(DSA_METHOD *dsam,
     return 1;
 }
 
-int (*DSA_meth_get_init(const DSA_METHOD *dsam))(DSA *)
+int (* __cdecl DSA_meth_get_init(const DSA_METHOD *dsam))(DSA *)
 {
     return dsam->init;
 }
 
-int DSA_meth_set_init(DSA_METHOD *dsam, int (*init)(DSA *))
+int __cdecl DSA_meth_set_init(DSA_METHOD *dsam, int (*init)(DSA *))
 {
     dsam->init = init;
     return 1;
 }
 
-int (*DSA_meth_get_finish(const DSA_METHOD *dsam)) (DSA *)
+int (* __cdecl DSA_meth_get_finish(const DSA_METHOD *dsam)) (DSA *)
 {
     return dsam->finish;
 }
 
-int DSA_meth_set_finish(DSA_METHOD *dsam, int (*finish) (DSA *))
+int __cdecl DSA_meth_set_finish(DSA_METHOD *dsam, int (*finish) (DSA *))
 {
     dsam->finish = finish;
     return 1;
 }
 
-int (*DSA_meth_get_paramgen(const DSA_METHOD *dsam))
+int (* __cdecl DSA_meth_get_paramgen(const DSA_METHOD *dsam))
         (DSA *, int, const unsigned char *, int, int *, unsigned long *,
          BN_GENCB *)
 {
     return dsam->dsa_paramgen;
 }
 
-int DSA_meth_set_paramgen(DSA_METHOD *dsam,
+int __cdecl DSA_meth_set_paramgen(DSA_METHOD *dsam,
         int (*paramgen) (DSA *, int, const unsigned char *, int, int *,
                          unsigned long *, BN_GENCB *))
 {
@@ -212,12 +212,12 @@ int DSA_meth_set_paramgen(DSA_METHOD *dsam,
     return 1;
 }
 
-int (*DSA_meth_get_keygen(const DSA_METHOD *dsam)) (DSA *)
+int (* __cdecl DSA_meth_get_keygen(const DSA_METHOD *dsam)) (DSA *)
 {
     return dsam->dsa_keygen;
 }
 
-int DSA_meth_set_keygen(DSA_METHOD *dsam, int (*keygen) (DSA *))
+int __cdecl DSA_meth_set_keygen(DSA_METHOD *dsam, int (*keygen) (DSA *))
 {
     dsam->dsa_keygen = keygen;
     return 1;
diff --git a/crypto/dsa/dsa_ossl.c b/crypto/dsa/dsa_ossl.c
index 16161dcadf..3eb1be20c7 100644
--- a/crypto/dsa/dsa_ossl.c
+++ b/crypto/dsa/dsa_ossl.c
@@ -15,7 +15,7 @@
 #include "dsa_locl.h"
 #include <openssl/asn1.h>
 
-static DSA_SIG *dsa_do_sign(const unsigned char *dgst, int dlen, DSA *dsa);
+static DSA_SIG * __cdecl dsa_do_sign(const unsigned char *dgst, int dlen, DSA *dsa);
 static int dsa_sign_setup_no_digest(DSA *dsa, BN_CTX *ctx_in, BIGNUM **kinvp,
                                     BIGNUM **rp);
 static int dsa_sign_setup(DSA *dsa, BN_CTX *ctx_in, BIGNUM **kinvp,
@@ -44,22 +44,22 @@ static DSA_METHOD openssl_dsa_meth = {
 
 static const DSA_METHOD *default_DSA_method = &openssl_dsa_meth;
 
-void DSA_set_default_method(const DSA_METHOD *meth)
+void __cdecl DSA_set_default_method(const DSA_METHOD *meth)
 {
     default_DSA_method = meth;
 }
 
-const DSA_METHOD *DSA_get_default_method(void)
+const DSA_METHOD * __cdecl DSA_get_default_method(void)
 {
     return default_DSA_method;
 }
 
-const DSA_METHOD *DSA_OpenSSL(void)
+const DSA_METHOD * __cdecl DSA_OpenSSL(void)
 {
     return &openssl_dsa_meth;
 }
 
-static DSA_SIG *dsa_do_sign(const unsigned char *dgst, int dlen, DSA *dsa)
+static DSA_SIG * __cdecl dsa_do_sign(const unsigned char *dgst, int dlen, DSA *dsa)
 {
     BIGNUM *kinv = NULL;
     BIGNUM *m, *blind, *blindm, *tmp;
diff --git a/crypto/dsa/dsa_prn.c b/crypto/dsa/dsa_prn.c
index a4a1fd5650..da9213c59d 100644
--- a/crypto/dsa/dsa_prn.c
+++ b/crypto/dsa/dsa_prn.c
@@ -13,7 +13,7 @@
 #include <openssl/dsa.h>
 
 #ifndef OPENSSL_NO_STDIO
-int DSA_print_fp(FILE *fp, const DSA *x, int off)
+int __cdecl DSA_print_fp(FILE *fp, const DSA *x, int off)
 {
     BIO *b;
     int ret;
@@ -28,7 +28,7 @@ int DSA_print_fp(FILE *fp, const DSA *x, int off)
     return ret;
 }
 
-int DSAparams_print_fp(FILE *fp, const DSA *x)
+int __cdecl DSAparams_print_fp(FILE *fp, const DSA *x)
 {
     BIO *b;
     int ret;
@@ -44,7 +44,7 @@ int DSAparams_print_fp(FILE *fp, const DSA *x)
 }
 #endif
 
-int DSA_print(BIO *bp, const DSA *x, int off)
+int __cdecl DSA_print(BIO *bp, const DSA *x, int off)
 {
     EVP_PKEY *pk;
     int ret;
@@ -56,7 +56,7 @@ int DSA_print(BIO *bp, const DSA *x, int off)
     return ret;
 }
 
-int DSAparams_print(BIO *bp, const DSA *x)
+int __cdecl DSAparams_print(BIO *bp, const DSA *x)
 {
     EVP_PKEY *pk;
     int ret;
diff --git a/crypto/dsa/dsa_sign.c b/crypto/dsa/dsa_sign.c
index e9466b29f1..ab7988119e 100644
--- a/crypto/dsa/dsa_sign.c
+++ b/crypto/dsa/dsa_sign.c
@@ -11,13 +11,13 @@
 #include "dsa_locl.h"
 #include <openssl/bn.h>
 
-DSA_SIG *DSA_do_sign(const unsigned char *dgst, int dlen, DSA *dsa)
+DSA_SIG * __cdecl DSA_do_sign(const unsigned char *dgst, int dlen, DSA *dsa)
 {
     return dsa->meth->dsa_do_sign(dgst, dlen, dsa);
 }
 
 #if OPENSSL_API_COMPAT < 0x10200000L
-int DSA_sign_setup(DSA *dsa, BN_CTX *ctx_in, BIGNUM **kinvp, BIGNUM **rp)
+int __cdecl DSA_sign_setup(DSA *dsa, BN_CTX *ctx_in, BIGNUM **kinvp, BIGNUM **rp)
 {
     return dsa->meth->dsa_sign_setup(dsa, ctx_in, kinvp, rp);
 }
diff --git a/crypto/dsa/dsa_vrf.c b/crypto/dsa/dsa_vrf.c
index 21f98cd94e..fb1091ffb4 100644
--- a/crypto/dsa/dsa_vrf.c
+++ b/crypto/dsa/dsa_vrf.c
@@ -10,7 +10,7 @@
 #include "internal/cryptlib.h"
 #include "dsa_locl.h"
 
-int DSA_do_verify(const unsigned char *dgst, int dgst_len, DSA_SIG *sig,
+int __cdecl DSA_do_verify(const unsigned char *dgst, int dgst_len, DSA_SIG *sig,
                   DSA *dsa)
 {
     return dsa->meth->dsa_do_verify(dgst, dgst_len, sig, dsa);
diff --git a/engines/e_capi.c b/engines/e_capi.c
index 7e466dc279..d2c1fd145d 100644
--- a/engines/e_capi.c
+++ b/engines/e_capi.c
@@ -132,7 +132,7 @@ static int __cdecl capi_rsa_priv_dec(int flen, const unsigned char *from,
 static int __cdecl capi_rsa_free(RSA *rsa);
 
 # ifndef OPENSSL_NO_DSA
-static DSA_SIG *capi_dsa_do_sign(const unsigned char *digest, int dlen,
+static DSA_SIG * __cdecl capi_dsa_do_sign(const unsigned char *digest, int dlen,
                                  DSA *dsa);
 static int capi_dsa_free(DSA *dsa);
 # endif
@@ -989,7 +989,7 @@ static int __cdecl capi_rsa_free(RSA *rsa)
 # ifndef OPENSSL_NO_DSA
 /* CryptoAPI DSA operations */
 
-static DSA_SIG *capi_dsa_do_sign(const unsigned char *digest, int dlen,
+static DSA_SIG * __cdecl capi_dsa_do_sign(const unsigned char *digest, int dlen,
                                  DSA *dsa)
 {
     HCRYPTHASH hash;
diff --git a/include/openssl/dsa.h b/include/openssl/dsa.h
index 8ac92c3c88..396c1f12e8 100644
--- a/include/openssl/dsa.h
+++ b/include/openssl/dsa.h
@@ -71,43 +71,43 @@ typedef struct DSA_SIG_st DSA_SIG;
 # define d2i_DSAparams_bio(bp,x) ASN1_d2i_bio_of(DSA,DSA_new,d2i_DSAparams,bp,x)
 # define i2d_DSAparams_bio(bp,x) ASN1_i2d_bio_of_const(DSA,i2d_DSAparams,bp,x)
 
-DSA *DSAparams_dup(DSA *x);
-DSA_SIG *DSA_SIG_new(void);
-void DSA_SIG_free(DSA_SIG *a);
+DSA * __cdecl DSAparams_dup(DSA *x);
+DSA_SIG * __cdecl DSA_SIG_new(void);
+void __cdecl DSA_SIG_free(DSA_SIG *a);
 int __cdecl i2d_DSA_SIG(const DSA_SIG *a, unsigned char **pp);
 DSA_SIG * __cdecl d2i_DSA_SIG(DSA_SIG **v, const unsigned char **pp, long length);
-void DSA_SIG_get0(const DSA_SIG *sig, const BIGNUM **pr, const BIGNUM **ps);
-int DSA_SIG_set0(DSA_SIG *sig, BIGNUM *r, BIGNUM *s);
+void __cdecl DSA_SIG_get0(const DSA_SIG *sig, const BIGNUM **pr, const BIGNUM **ps);
+int __cdecl DSA_SIG_set0(DSA_SIG *sig, BIGNUM *r, BIGNUM *s);
 
-DSA_SIG *DSA_do_sign(const unsigned char *dgst, int dlen, DSA *dsa);
-int DSA_do_verify(const unsigned char *dgst, int dgst_len,
+DSA_SIG * __cdecl DSA_do_sign(const unsigned char *dgst, int dlen, DSA *dsa);
+int __cdecl DSA_do_verify(const unsigned char *dgst, int dgst_len,
                   DSA_SIG *sig, DSA *dsa);
 
-const DSA_METHOD *DSA_OpenSSL(void);
+const DSA_METHOD * __cdecl DSA_OpenSSL(void);
 
-void DSA_set_default_method(const DSA_METHOD *);
-const DSA_METHOD *DSA_get_default_method(void);
-int DSA_set_method(DSA *dsa, const DSA_METHOD *);
-const DSA_METHOD *DSA_get_method(DSA *d);
+void __cdecl DSA_set_default_method(const DSA_METHOD *);
+const DSA_METHOD * __cdecl DSA_get_default_method(void);
+int __cdecl DSA_set_method(DSA *dsa, const DSA_METHOD *);
+const DSA_METHOD * __cdecl DSA_get_method(DSA *d);
 
 DSA * __cdecl DSA_new(void);
-DSA *DSA_new_method(ENGINE *engine);
-void DSA_free(DSA *r);
+DSA * __cdecl DSA_new_method(ENGINE *engine);
+void __cdecl DSA_free(DSA *r);
 /* "up" the DSA object's reference count */
-int DSA_up_ref(DSA *r);
-int DSA_size(const DSA *);
-int DSA_bits(const DSA *d);
-int DSA_security_bits(const DSA *d);
+int __cdecl DSA_up_ref(DSA *r);
+int __cdecl DSA_size(const DSA *);
+int __cdecl DSA_bits(const DSA *d);
+int __cdecl DSA_security_bits(const DSA *d);
         /* next 4 return -1 on error */
-DEPRECATEDIN_1_2_0(int DSA_sign_setup(DSA *dsa, BN_CTX *ctx_in, BIGNUM **kinvp, BIGNUM **rp))
-int DSA_sign(int type, const unsigned char *dgst, int dlen,
+DEPRECATEDIN_1_2_0(int __cdecl DSA_sign_setup(DSA *dsa, BN_CTX *ctx_in, BIGNUM **kinvp, BIGNUM **rp))
+int __cdecl DSA_sign(int type, const unsigned char *dgst, int dlen,
              unsigned char *sig, unsigned int *siglen, DSA *dsa);
-int DSA_verify(int type, const unsigned char *dgst, int dgst_len,
+int __cdecl DSA_verify(int type, const unsigned char *dgst, int dgst_len,
                const unsigned char *sigbuf, int siglen, DSA *dsa);
 #define DSA_get_ex_new_index(l, p, newf, dupf, freef) \
     CRYPTO_get_ex_new_index(CRYPTO_EX_INDEX_DSA, l, p, newf, dupf, freef)
-int DSA_set_ex_data(DSA *d, int idx, void *arg);
-void *DSA_get_ex_data(DSA *d, int idx);
+int __cdecl DSA_set_ex_data(DSA *d, int idx, void *arg);
+void * __cdecl DSA_get_ex_data(DSA *d, int idx);
 
 DSA * __cdecl d2i_DSAPublicKey(DSA **a, const unsigned char **pp, long length);
 DSA * __cdecl d2i_DSAPrivateKey(DSA **a, const unsigned char **pp, long length);
@@ -124,21 +124,21 @@ DEPRECATEDIN_0_9_8(DSA *DSA_generate_parameters(int bits,
                                                 void *cb_arg))
 
 /* New version */
-int DSA_generate_parameters_ex(DSA *dsa, int bits,
+int __cdecl DSA_generate_parameters_ex(DSA *dsa, int bits,
                                const unsigned char *seed, int seed_len,
                                int *counter_ret, unsigned long *h_ret,
                                BN_GENCB *cb);
 
-int DSA_generate_key(DSA *a);
+int __cdecl DSA_generate_key(DSA *a);
 int __cdecl i2d_DSAPublicKey(const DSA *a, unsigned char **pp);
 int __cdecl i2d_DSAPrivateKey(const DSA *a, unsigned char **pp);
 int __cdecl i2d_DSAparams(const DSA *a, unsigned char **pp);
 
-int DSAparams_print(BIO *bp, const DSA *x);
-int DSA_print(BIO *bp, const DSA *x, int off);
+int __cdecl DSAparams_print(BIO *bp, const DSA *x);
+int __cdecl DSA_print(BIO *bp, const DSA *x, int off);
 # ifndef OPENSSL_NO_STDIO
-int DSAparams_print_fp(FILE *fp, const DSA *x);
-int DSA_print_fp(FILE *bp, const DSA *x, int off);
+int __cdecl DSAparams_print_fp(FILE *fp, const DSA *x);
+int __cdecl DSA_print_fp(FILE *bp, const DSA *x, int off);
 # endif
 
 # define DSS_prime_checks 64
@@ -156,7 +156,7 @@ int DSA_print_fp(FILE *bp, const DSA *x, int off);
  * Convert DSA structure (key or just parameters) into DH structure (be
  * careful to avoid small subgroup attacks when using this!)
  */
-DH *DSA_dup_DH(const DSA *r);
+DH * __cdecl DSA_dup_DH(const DSA *r);
 # endif
 
 # define EVP_PKEY_CTX_set_dsa_paramgen_bits(ctx, nbits) \
@@ -167,68 +167,68 @@ DH *DSA_dup_DH(const DSA *r);
 # define EVP_PKEY_CTRL_DSA_PARAMGEN_Q_BITS       (EVP_PKEY_ALG_CTRL + 2)
 # define EVP_PKEY_CTRL_DSA_PARAMGEN_MD           (EVP_PKEY_ALG_CTRL + 3)
 
-void DSA_get0_pqg(const DSA *d,
+void __cdecl DSA_get0_pqg(const DSA *d,
                   const BIGNUM **p, const BIGNUM **q, const BIGNUM **g);
-int DSA_set0_pqg(DSA *d, BIGNUM *p, BIGNUM *q, BIGNUM *g);
-void DSA_get0_key(const DSA *d,
+int __cdecl DSA_set0_pqg(DSA *d, BIGNUM *p, BIGNUM *q, BIGNUM *g);
+void __cdecl DSA_get0_key(const DSA *d,
                   const BIGNUM **pub_key, const BIGNUM **priv_key);
-int DSA_set0_key(DSA *d, BIGNUM *pub_key, BIGNUM *priv_key);
-const BIGNUM *DSA_get0_p(const DSA *d);
-const BIGNUM *DSA_get0_q(const DSA *d);
-const BIGNUM *DSA_get0_g(const DSA *d);
-const BIGNUM *DSA_get0_pub_key(const DSA *d);
-const BIGNUM *DSA_get0_priv_key(const DSA *d);
-void DSA_clear_flags(DSA *d, int flags);
-int DSA_test_flags(const DSA *d, int flags);
-void DSA_set_flags(DSA *d, int flags);
-ENGINE *DSA_get0_engine(DSA *d);
-
-DSA_METHOD *DSA_meth_new(const char *name, int flags);
-void DSA_meth_free(DSA_METHOD *dsam);
-DSA_METHOD *DSA_meth_dup(const DSA_METHOD *dsam);
-const char *DSA_meth_get0_name(const DSA_METHOD *dsam);
-int DSA_meth_set1_name(DSA_METHOD *dsam, const char *name);
-int DSA_meth_get_flags(const DSA_METHOD *dsam);
-int DSA_meth_set_flags(DSA_METHOD *dsam, int flags);
-void *DSA_meth_get0_app_data(const DSA_METHOD *dsam);
-int DSA_meth_set0_app_data(DSA_METHOD *dsam, void *app_data);
-DSA_SIG *(*DSA_meth_get_sign(const DSA_METHOD *dsam))
+int __cdecl DSA_set0_key(DSA *d, BIGNUM *pub_key, BIGNUM *priv_key);
+const BIGNUM * __cdecl DSA_get0_p(const DSA *d);
+const BIGNUM * __cdecl DSA_get0_q(const DSA *d);
+const BIGNUM * __cdecl DSA_get0_g(const DSA *d);
+const BIGNUM * __cdecl DSA_get0_pub_key(const DSA *d);
+const BIGNUM * __cdecl DSA_get0_priv_key(const DSA *d);
+void __cdecl DSA_clear_flags(DSA *d, int flags);
+int __cdecl DSA_test_flags(const DSA *d, int flags);
+void __cdecl DSA_set_flags(DSA *d, int flags);
+ENGINE * __cdecl DSA_get0_engine(DSA *d);
+
+DSA_METHOD * __cdecl DSA_meth_new(const char *name, int flags);
+void __cdecl DSA_meth_free(DSA_METHOD *dsam);
+DSA_METHOD * __cdecl DSA_meth_dup(const DSA_METHOD *dsam);
+const char * __cdecl DSA_meth_get0_name(const DSA_METHOD *dsam);
+int __cdecl DSA_meth_set1_name(DSA_METHOD *dsam, const char *name);
+int __cdecl DSA_meth_get_flags(const DSA_METHOD *dsam);
+int __cdecl DSA_meth_set_flags(DSA_METHOD *dsam, int flags);
+void * __cdecl DSA_meth_get0_app_data(const DSA_METHOD *dsam);
+int __cdecl DSA_meth_set0_app_data(DSA_METHOD *dsam, void *app_data);
+DSA_SIG *(__cdecl *DSA_meth_get_sign(const DSA_METHOD *dsam))
         (const unsigned char *, int, DSA *);
-int DSA_meth_set_sign(DSA_METHOD *dsam,
-                       DSA_SIG *(*sign) (const unsigned char *, int, DSA *));
-int (*DSA_meth_get_sign_setup(const DSA_METHOD *dsam))
+int __cdecl DSA_meth_set_sign(DSA_METHOD *dsam,
+                       DSA_SIG *(__cdecl *sign) (const unsigned char *, int, DSA *));
+int (* __cdecl DSA_meth_get_sign_setup(const DSA_METHOD *dsam))
         (DSA *, BN_CTX *, BIGNUM **, BIGNUM **);
-int DSA_meth_set_sign_setup(DSA_METHOD *dsam,
+int __cdecl DSA_meth_set_sign_setup(DSA_METHOD *dsam,
         int (*sign_setup) (DSA *, BN_CTX *, BIGNUM **, BIGNUM **));
-int (*DSA_meth_get_verify(const DSA_METHOD *dsam))
+int (* __cdecl DSA_meth_get_verify(const DSA_METHOD *dsam))
         (const unsigned char *, int, DSA_SIG *, DSA *);
-int DSA_meth_set_verify(DSA_METHOD *dsam,
+int __cdecl DSA_meth_set_verify(DSA_METHOD *dsam,
     int (*verify) (const unsigned char *, int, DSA_SIG *, DSA *));
-int (*DSA_meth_get_mod_exp(const DSA_METHOD *dsam))
+int (* __cdecl DSA_meth_get_mod_exp(const DSA_METHOD *dsam))
         (DSA *, BIGNUM *, const BIGNUM *, const BIGNUM *, const BIGNUM *,
          const BIGNUM *, const BIGNUM *, BN_CTX *, BN_MONT_CTX *);
-int DSA_meth_set_mod_exp(DSA_METHOD *dsam,
+int __cdecl DSA_meth_set_mod_exp(DSA_METHOD *dsam,
     int (*mod_exp) (DSA *, BIGNUM *, const BIGNUM *, const BIGNUM *,
                     const BIGNUM *, const BIGNUM *, const BIGNUM *, BN_CTX *,
                     BN_MONT_CTX *));
-int (*DSA_meth_get_bn_mod_exp(const DSA_METHOD *dsam))
+int (* __cdecl DSA_meth_get_bn_mod_exp(const DSA_METHOD *dsam))
     (DSA *, BIGNUM *, const BIGNUM *, const BIGNUM *, const BIGNUM *,
      BN_CTX *, BN_MONT_CTX *);
-int DSA_meth_set_bn_mod_exp(DSA_METHOD *dsam,
+int __cdecl DSA_meth_set_bn_mod_exp(DSA_METHOD *dsam,
     int (*bn_mod_exp) (DSA *, BIGNUM *, const BIGNUM *, const BIGNUM *,
                        const BIGNUM *, BN_CTX *, BN_MONT_CTX *));
-int (*DSA_meth_get_init(const DSA_METHOD *dsam))(DSA *);
-int DSA_meth_set_init(DSA_METHOD *dsam, int (*init)(DSA *));
-int (*DSA_meth_get_finish(const DSA_METHOD *dsam)) (DSA *);
-int DSA_meth_set_finish(DSA_METHOD *dsam, int (*finish) (DSA *));
-int (*DSA_meth_get_paramgen(const DSA_METHOD *dsam))
+int (* __cdecl DSA_meth_get_init(const DSA_METHOD *dsam))(DSA *);
+int __cdecl DSA_meth_set_init(DSA_METHOD *dsam, int (*init)(DSA *));
+int (* __cdecl DSA_meth_get_finish(const DSA_METHOD *dsam)) (DSA *);
+int __cdecl DSA_meth_set_finish(DSA_METHOD *dsam, int (*finish) (DSA *));
+int (* __cdecl DSA_meth_get_paramgen(const DSA_METHOD *dsam))
         (DSA *, int, const unsigned char *, int, int *, unsigned long *,
          BN_GENCB *);
-int DSA_meth_set_paramgen(DSA_METHOD *dsam,
+int __cdecl DSA_meth_set_paramgen(DSA_METHOD *dsam,
         int (*paramgen) (DSA *, int, const unsigned char *, int, int *,
                          unsigned long *, BN_GENCB *));
-int (*DSA_meth_get_keygen(const DSA_METHOD *dsam)) (DSA *);
-int DSA_meth_set_keygen(DSA_METHOD *dsam, int (*keygen) (DSA *));
+int (* __cdecl DSA_meth_get_keygen(const DSA_METHOD *dsam)) (DSA *);
+int __cdecl DSA_meth_set_keygen(DSA_METHOD *dsam, int (*keygen) (DSA *));
 
 
 #  ifdef  __cplusplus
