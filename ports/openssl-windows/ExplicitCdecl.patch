diff --git a/Configurations/windows-makefile.tmpl b/Configurations/windows-makefile.tmpl
index 8ef70b8699..ad33ae3021 100644
--- a/Configurations/windows-makefile.tmpl
+++ b/Configurations/windows-makefile.tmpl
@@ -353,7 +353,8 @@ list-tests:
 	@$(ECHO) "Tests are not supported with your chosen Configure options"
 	@{- output_on() if !$disabled{tests}; "" -}
 
-install: install_sw install_ssldirs install_docs
+#install: install_sw install_ssldirs install_docs
+install: install_sw install_ssldirs
 
 uninstall: uninstall_docs uninstall_sw
 
diff --git a/apps/apps.c b/apps/apps.c
index 7177c5d982..c6b32d3916 100644
--- a/apps/apps.c
+++ b/apps/apps.c
@@ -180,18 +180,18 @@ int dump_cert_text(BIO *out, X509 *x)
     return 0;
 }
 
-static int ui_open(UI *ui)
+static int __cdecl ui_open(UI *ui)
 {
-    int (*opener)(UI *ui) = UI_method_get_opener(ui_fallback_method);
+    int (__cdecl *opener)(UI *ui) = UI_method_get_opener(ui_fallback_method);
 
     if (opener)
         return opener(ui);
     return 1;
 }
 
-static int ui_read(UI *ui, UI_STRING *uis)
+static int __cdecl ui_read(UI *ui, UI_STRING *uis)
 {
-    int (*reader)(UI *ui, UI_STRING *uis) = NULL;
+    int (__cdecl *reader)(UI *ui, UI_STRING *uis) = NULL;
 
     if (UI_get_input_flags(uis) & UI_INPUT_FLAG_DEFAULT_PWD
         && UI_get0_user_data(ui)) {
@@ -221,9 +221,9 @@ static int ui_read(UI *ui, UI_STRING *uis)
     return 1;
 }
 
-static int ui_write(UI *ui, UI_STRING *uis)
+static int __cdecl ui_write(UI *ui, UI_STRING *uis)
 {
-    int (*writer)(UI *ui, UI_STRING *uis) = NULL;
+    int (__cdecl *writer)(UI *ui, UI_STRING *uis) = NULL;
 
     if (UI_get_input_flags(uis) & UI_INPUT_FLAG_DEFAULT_PWD
         && UI_get0_user_data(ui)) {
@@ -251,9 +251,9 @@ static int ui_write(UI *ui, UI_STRING *uis)
     return 1;
 }
 
-static int ui_close(UI *ui)
+static int __cdecl ui_close(UI *ui)
 {
-    int (*closer)(UI *ui) = UI_method_get_closer(ui_fallback_method);
+    int (__cdecl *closer)(UI *ui) = UI_method_get_closer(ui_fallback_method);
 
     if (closer)
         return closer(ui);
@@ -2057,7 +2057,7 @@ static X509_CRL *load_crl_crldp(STACK_OF(DIST_POINT) *crldp)
  * anything.
  */
 
-static STACK_OF(X509_CRL) *crls_http_cb(X509_STORE_CTX *ctx, X509_NAME *nm)
+static STACK_OF(X509_CRL) * __cdecl crls_http_cb(X509_STORE_CTX *ctx, X509_NAME *nm)
 {
     X509 *x;
     STACK_OF(X509_CRL) *crls = NULL;
diff --git a/apps/bf_prefix.c b/apps/bf_prefix.c
index bae3c91bf8..b9d7381b9d 100644
--- a/apps/bf_prefix.c
+++ b/apps/bf_prefix.c
@@ -13,15 +13,15 @@
 #include <openssl/bio.h>
 #include "apps.h"
 
-static int prefix_write(BIO *b, const char *out, size_t outl,
+static int __cdecl prefix_write(BIO *b, const char *out, size_t outl,
                         size_t *numwritten);
-static int prefix_read(BIO *b, char *buf, size_t size, size_t *numread);
-static int prefix_puts(BIO *b, const char *str);
-static int prefix_gets(BIO *b, char *str, int size);
-static long prefix_ctrl(BIO *b, int cmd, long arg1, void *arg2);
-static int prefix_create(BIO *b);
-static int prefix_destroy(BIO *b);
-static long prefix_callback_ctrl(BIO *b, int cmd, BIO_info_cb *fp);
+static int __cdecl prefix_read(BIO *b, char *buf, size_t size, size_t *numread);
+static int __cdecl prefix_puts(BIO *b, const char *str);
+static int __cdecl prefix_gets(BIO *b, char *str, int size);
+static long __cdecl prefix_ctrl(BIO *b, int cmd, long arg1, void *arg2);
+static int __cdecl prefix_create(BIO *b);
+static int __cdecl prefix_destroy(BIO *b);
+static long __cdecl prefix_callback_ctrl(BIO *b, int cmd, BIO_info_cb *fp);
 
 static BIO_METHOD *prefix_meth = NULL;
 
@@ -50,7 +50,7 @@ typedef struct prefix_ctx_st {
     int linestart;               /* flag to indicate we're at the line start */
 } PREFIX_CTX;
 
-static int prefix_create(BIO *b)
+static int __cdecl prefix_create(BIO *b)
 {
     PREFIX_CTX *ctx = OPENSSL_zalloc(sizeof(*ctx));
 
@@ -64,7 +64,7 @@ static int prefix_create(BIO *b)
     return 1;
 }
 
-static int prefix_destroy(BIO *b)
+static int __cdecl prefix_destroy(BIO *b)
 {
     PREFIX_CTX *ctx = BIO_get_data(b);
 
@@ -73,12 +73,12 @@ static int prefix_destroy(BIO *b)
     return 1;
 }
 
-static int prefix_read(BIO *b, char *in, size_t size, size_t *numread)
+static int __cdecl prefix_read(BIO *b, char *in, size_t size, size_t *numread)
 {
     return BIO_read_ex(BIO_next(b), in, size, numread);
 }
 
-static int prefix_write(BIO *b, const char *out, size_t outl,
+static int __cdecl prefix_write(BIO *b, const char *out, size_t outl,
                         size_t *numwritten)
 {
     PREFIX_CTX *ctx = BIO_get_data(b);
@@ -136,7 +136,7 @@ static int prefix_write(BIO *b, const char *out, size_t outl,
     return 1;
 }
 
-static long prefix_ctrl(BIO *b, int cmd, long num, void *ptr)
+static long __cdecl prefix_ctrl(BIO *b, int cmd, long num, void *ptr)
 {
     long ret = 0;
 
@@ -161,17 +161,17 @@ static long prefix_ctrl(BIO *b, int cmd, long num, void *ptr)
     return ret;
 }
 
-static long prefix_callback_ctrl(BIO *b, int cmd, BIO_info_cb *fp)
+static long __cdecl prefix_callback_ctrl(BIO *b, int cmd, BIO_info_cb *fp)
 {
     return BIO_callback_ctrl(BIO_next(b), cmd, fp);
 }
 
-static int prefix_gets(BIO *b, char *buf, int size)
+static int __cdecl prefix_gets(BIO *b, char *buf, int size)
 {
     return BIO_gets(BIO_next(b), buf, size);
 }
 
-static int prefix_puts(BIO *b, const char *str)
+static int __cdecl prefix_puts(BIO *b, const char *str)
 {
     return BIO_write(b, str, strlen(str));
 }
diff --git a/apps/ciphers.c b/apps/ciphers.c
index 0bb33a4aca..4b7ba869b0 100644
--- a/apps/ciphers.c
+++ b/apps/ciphers.c
@@ -64,7 +64,7 @@ const OPTIONS ciphers_options[] = {
 };
 
 #ifndef OPENSSL_NO_PSK
-static unsigned int dummy_psk(SSL *ssl, const char *hint, char *identity,
+static unsigned int __cdecl dummy_psk(SSL *ssl, const char *hint, char *identity,
                               unsigned int max_identity_len,
                               unsigned char *psk,
                               unsigned int max_psk_len)
@@ -73,7 +73,7 @@ static unsigned int dummy_psk(SSL *ssl, const char *hint, char *identity,
 }
 #endif
 #ifndef OPENSSL_NO_SRP
-static char *dummy_srp(SSL *ssl, void *arg)
+static char * __cdecl dummy_srp(SSL *ssl, void *arg)
 {
     return "";
 }
diff --git a/apps/dhparam.c b/apps/dhparam.c
index 13f76754d2..4a52a5fda6 100644
--- a/apps/dhparam.c
+++ b/apps/dhparam.c
@@ -31,7 +31,7 @@ NON_EMPTY_TRANSLATION_UNIT
 
 # define DEFBITS 2048
 
-static int dh_cb(int p, int n, BN_GENCB *cb);
+static int __cdecl dh_cb(int p, int n, BN_GENCB *cb);
 
 typedef enum OPTION_choice {
     OPT_ERR = -1, OPT_EOF = 0, OPT_HELP,
@@ -367,7 +367,7 @@ int dhparam_main(int argc, char **argv)
     return ret;
 }
 
-static int dh_cb(int p, int n, BN_GENCB *cb)
+static int __cdecl dh_cb(int p, int n, BN_GENCB *cb)
 {
     static const char symbols[] = ".+*\n";
     char c = (p >= 0 && (size_t)p < sizeof(symbols) - 1) ? symbols[p] : '?';
diff --git a/apps/dsaparam.c b/apps/dsaparam.c
index b227b76a37..6bcdd31b05 100644
--- a/apps/dsaparam.c
+++ b/apps/dsaparam.c
@@ -25,7 +25,7 @@ NON_EMPTY_TRANSLATION_UNIT
 # include <openssl/x509.h>
 # include <openssl/pem.h>
 
-static int dsa_cb(int p, int n, BN_GENCB *cb);
+static int __cdecl dsa_cb(int p, int n, BN_GENCB *cb);
 
 typedef enum OPTION_choice {
     OPT_ERR = -1, OPT_EOF = 0, OPT_HELP,
@@ -246,7 +246,7 @@ int dsaparam_main(int argc, char **argv)
     return ret;
 }
 
-static int dsa_cb(int p, int n, BN_GENCB *cb)
+static int __cdecl dsa_cb(int p, int n, BN_GENCB *cb)
 {
     static const char symbols[] = ".+*\n";
     char c = (p >= 0 && (size_t)p < sizeof(symbols) - 1) ? symbols[p] : '?';
diff --git a/apps/genrsa.c b/apps/genrsa.c
index c17cd14715..98a3e23c4c 100644
--- a/apps/genrsa.c
+++ b/apps/genrsa.c
@@ -30,7 +30,7 @@ NON_EMPTY_TRANSLATION_UNIT
 # define DEFBITS 2048
 # define DEFPRIMES 2
 
-static int genrsa_cb(int p, int n, BN_GENCB *cb);
+static int __cdecl genrsa_cb(int p, int n, BN_GENCB *cb);
 
 typedef enum OPTION_choice {
     OPT_ERR = -1, OPT_EOF = 0, OPT_HELP,
@@ -182,7 +182,7 @@ opthelp:
     return ret;
 }
 
-static int genrsa_cb(int p, int n, BN_GENCB *cb)
+static int __cdecl genrsa_cb(int p, int n, BN_GENCB *cb)
 {
     char c = '*';
 
diff --git a/apps/openssl.c b/apps/openssl.c
index 9648f35b02..7294c2c8af 100644
--- a/apps/openssl.c
+++ b/apps/openssl.c
@@ -48,18 +48,18 @@ typedef struct {
  * macro-generated wrapper functions.
  */
 static LHASH_OF(FUNCTION) *prog_init(void);
-static int do_cmd(LHASH_OF(FUNCTION) *prog, int argc, char *argv[]);
-static void list_pkey(void);
-static void list_pkey_meth(void);
-static void list_type(FUNC_TYPE ft, int one);
-static void list_disabled(void);
+static int __cdecl do_cmd(LHASH_OF(FUNCTION) *prog, int argc, char *argv[]);
+static void __cdecl list_pkey(void);
+static void __cdecl list_pkey_meth(void);
+static void __cdecl list_type(FUNC_TYPE ft, int one);
+static void __cdecl list_disabled(void);
 char *default_config_file = NULL;
 
 BIO *bio_in = NULL;
 BIO *bio_out = NULL;
 BIO *bio_err = NULL;
 
-static void calculate_columns(DISPLAY_COLUMNS *dc)
+static void __cdecl calculate_columns(DISPLAY_COLUMNS *dc)
 {
     FUNCTION *f;
     int len, maxlen = 0;
@@ -73,7 +73,7 @@ static void calculate_columns(DISPLAY_COLUMNS *dc)
     dc->columns = (80 - 1) / dc->width;
 }
 
-static int apps_startup(void)
+static int __cdecl apps_startup(void)
 {
 #ifdef SIGPIPE
     signal(SIGPIPE, SIG_IGN);
@@ -89,7 +89,7 @@ static int apps_startup(void)
     return 1;
 }
 
-static void apps_shutdown(void)
+static void __cdecl apps_shutdown(void)
 {
     destroy_ui_method();
     destroy_prefix_method();
@@ -116,7 +116,7 @@ static char *make_config_name(void)
     return p;
 }
 
-int main(int argc, char *argv[])
+int __cdecl main(int argc, char *argv[])
 {
     FUNCTION f, *fp;
     LHASH_OF(FUNCTION) *prog = NULL;
@@ -268,7 +268,7 @@ int main(int argc, char *argv[])
     EXIT(ret);
 }
 
-static void list_cipher_fn(const EVP_CIPHER *c,
+static void __cdecl list_cipher_fn(const EVP_CIPHER *c,
                            const char *from, const char *to, void *arg)
 {
     if (c != NULL) {
@@ -282,7 +282,7 @@ static void list_cipher_fn(const EVP_CIPHER *c,
     }
 }
 
-static void list_md_fn(const EVP_MD *m,
+static void __cdecl list_md_fn(const EVP_MD *m,
                        const char *from, const char *to, void *arg)
 {
     if (m != NULL) {
@@ -296,7 +296,7 @@ static void list_md_fn(const EVP_MD *m,
     }
 }
 
-static void list_missing_help(void)
+static void __cdecl list_missing_help(void)
 {
     const FUNCTION *fp;
     const OPTIONS *o;
@@ -315,7 +315,7 @@ static void list_missing_help(void)
     }
 }
 
-static void list_options_for_command(const char *command)
+static void __cdecl list_options_for_command(const char *command)
 {
     const FUNCTION *fp;
     const OPTIONS *o;
@@ -515,7 +515,7 @@ int help_main(int argc, char **argv)
     return 0;
 }
 
-static void list_type(FUNC_TYPE ft, int one)
+static void __cdecl list_type(FUNC_TYPE ft, int one)
 {
     FUNCTION *fp;
     int i = 0;
@@ -540,7 +540,7 @@ static void list_type(FUNC_TYPE ft, int one)
         BIO_printf(bio_out, "\n\n");
 }
 
-static int do_cmd(LHASH_OF(FUNCTION) *prog, int argc, char *argv[])
+static int __cdecl do_cmd(LHASH_OF(FUNCTION) *prog, int argc, char *argv[])
 {
     FUNCTION f, *fp;
 
@@ -585,7 +585,7 @@ static int do_cmd(LHASH_OF(FUNCTION) *prog, int argc, char *argv[])
     return 1;
 }
 
-static void list_pkey(void)
+static void __cdecl list_pkey(void)
 {
     int i;
 
@@ -614,7 +614,7 @@ static void list_pkey(void)
     }
 }
 
-static void list_pkey_meth(void)
+static void __cdecl list_pkey_meth(void)
 {
     size_t i;
     size_t meth_count = EVP_PKEY_meth_get_count();
@@ -630,17 +630,17 @@ static void list_pkey_meth(void)
     }
 }
 
-static int function_cmp(const FUNCTION * a, const FUNCTION * b)
+static int __cdecl function_cmp(const FUNCTION * a, const FUNCTION * b)
 {
     return strncmp(a->name, b->name, 8);
 }
 
-static unsigned long function_hash(const FUNCTION * a)
+static unsigned long __cdecl function_hash(const FUNCTION * a)
 {
     return OPENSSL_LH_strhash(a->name);
 }
 
-static int SortFnByName(const void *_f1, const void *_f2)
+static int __cdecl SortFnByName(const void *_f1, const void *_f2)
 {
     const FUNCTION *f1 = _f1;
     const FUNCTION *f2 = _f2;
@@ -650,7 +650,7 @@ static int SortFnByName(const void *_f1, const void *_f2)
     return strcmp(f1->name, f2->name);
 }
 
-static void list_disabled(void)
+static void __cdecl list_disabled(void)
 {
     BIO_puts(bio_out, "Disabled algorithms:\n");
 #ifdef OPENSSL_NO_ARIA
diff --git a/apps/req.c b/apps/req.c
index f9d6fba109..2b515672d0 100644
--- a/apps/req.c
+++ b/apps/req.c
@@ -153,12 +153,12 @@ const OPTIONS req_options[] = {
 /*
  * An LHASH of strings, where each string is an extension name.
  */
-static unsigned long ext_name_hash(const OPENSSL_STRING *a)
+static unsigned long __cdecl ext_name_hash(const OPENSSL_STRING *a)
 {
     return OPENSSL_LH_strhash((const char *)a);
 }
 
-static int ext_name_cmp(const OPENSSL_STRING *a, const OPENSSL_STRING *b)
+static int __cdecl ext_name_cmp(const OPENSSL_STRING *a, const OPENSSL_STRING *b)
 {
     return strcmp((const char *)a, (const char *)b);
 }
diff --git a/apps/s_apps.h b/apps/s_apps.h
index f94e659e71..15888d13e5 100644
--- a/apps/s_apps.h
+++ b/apps/s_apps.h
@@ -14,7 +14,7 @@
 #define PORT            "4433"
 #define PROTOCOL        "tcp"
 
-typedef int (*do_server_cb)(int s, int stype, int prot, unsigned char *context);
+typedef int (__cdecl *do_server_cb)(int s, int stype, int prot, unsigned char *context);
 int do_server(int *accept_sock, const char *host, const char *port,
               int family, int type, int protocol, do_server_cb cb,
               unsigned char *context, int naccept, BIO *bio_s_out);
@@ -33,18 +33,18 @@ int init_client(int *sock, const char *host, const char *port,
                 int family, int type, int protocol);
 int should_retry(int i);
 
-long bio_dump_callback(BIO *bio, int cmd, const char *argp,
+long __cdecl bio_dump_callback(BIO *bio, int cmd, const char *argp,
                        int argi, long argl, long ret);
 
-void apps_ssl_info_callback(const SSL *s, int where, int ret);
-void msg_cb(int write_p, int version, int content_type, const void *buf,
+void __cdecl apps_ssl_info_callback(const SSL *s, int where, int ret);
+void __cdecl msg_cb(int write_p, int version, int content_type, const void *buf,
             size_t len, SSL *ssl, void *arg);
-void tlsext_cb(SSL *s, int client_server, int type, const unsigned char *data,
+void __cdecl tlsext_cb(SSL *s, int client_server, int type, const unsigned char *data,
                int len, void *arg);
 
-int generate_cookie_callback(SSL *ssl, unsigned char *cookie,
+int __cdecl generate_cookie_callback(SSL *ssl, unsigned char *cookie,
                              unsigned int *cookie_len);
-int verify_cookie_callback(SSL *ssl, const unsigned char *cookie,
+int __cdecl verify_cookie_callback(SSL *ssl, const unsigned char *cookie,
                            unsigned int cookie_len);
 
 #ifdef __VMS                     /* 31 char symbol name limit */
@@ -52,9 +52,9 @@ int verify_cookie_callback(SSL *ssl, const unsigned char *cookie,
 # define verify_stateless_cookie_callback        verify_stateless_cookie_cb
 #endif
 
-int generate_stateless_cookie_callback(SSL *ssl, unsigned char *cookie,
+int __cdecl generate_stateless_cookie_callback(SSL *ssl, unsigned char *cookie,
                                        size_t *cookie_len);
-int verify_stateless_cookie_callback(SSL *ssl, const unsigned char *cookie,
+int __cdecl verify_stateless_cookie_callback(SSL *ssl, const unsigned char *cookie,
                                      size_t cookie_len);
 
 typedef struct ssl_excert_st SSL_EXCERT;
diff --git a/apps/s_cb.c b/apps/s_cb.c
index 5dc1d03f28..c90566e39a 100644
--- a/apps/s_cb.c
+++ b/apps/s_cb.c
@@ -429,7 +429,7 @@ int ssl_print_tmp_key(BIO *out, SSL *s)
     return 1;
 }
 
-long bio_dump_callback(BIO *bio, int cmd, const char *argp,
+long __cdecl bio_dump_callback(BIO *bio, int cmd, const char *argp,
                        int argi, long argl, long ret)
 {
     BIO *out;
@@ -451,7 +451,7 @@ long bio_dump_callback(BIO *bio, int cmd, const char *argp,
     return ret;
 }
 
-void apps_ssl_info_callback(const SSL *s, int where, int ret)
+void __cdecl apps_ssl_info_callback(const SSL *s, int where, int ret)
 {
     const char *str;
     int w;
@@ -557,7 +557,7 @@ static STRINT_PAIR handshakes[] = {
     {NULL}
 };
 
-void msg_cb(int write_p, int version, int content_type, const void *buf,
+void __cdecl msg_cb(int write_p, int version, int content_type, const void *buf,
             size_t len, SSL *ssl, void *arg)
 {
     BIO *bio = arg;
@@ -730,7 +730,7 @@ static STRINT_PAIR signature_tls12_hash_list[] = {
     {NULL}
 };
 
-void tlsext_cb(SSL *s, int client_server, int type,
+void __cdecl tlsext_cb(SSL *s, int client_server, int type,
                const unsigned char *data, int len, void *arg)
 {
     BIO *bio = arg;
@@ -743,7 +743,7 @@ void tlsext_cb(SSL *s, int client_server, int type,
 }
 
 #ifndef OPENSSL_NO_SOCK
-int generate_cookie_callback(SSL *ssl, unsigned char *cookie,
+int __cdecl generate_cookie_callback(SSL *ssl, unsigned char *cookie,
                              unsigned int *cookie_len)
 {
     unsigned char *buffer;
@@ -796,7 +796,7 @@ int generate_cookie_callback(SSL *ssl, unsigned char *cookie,
     return 1;
 }
 
-int verify_cookie_callback(SSL *ssl, const unsigned char *cookie,
+int __cdecl verify_cookie_callback(SSL *ssl, const unsigned char *cookie,
                            unsigned int cookie_len)
 {
     unsigned char result[EVP_MAX_MD_SIZE];
@@ -813,7 +813,7 @@ int verify_cookie_callback(SSL *ssl, const unsigned char *cookie,
     return 0;
 }
 
-int generate_stateless_cookie_callback(SSL *ssl, unsigned char *cookie,
+int __cdecl generate_stateless_cookie_callback(SSL *ssl, unsigned char *cookie,
                                        size_t *cookie_len)
 {
     unsigned int temp;
@@ -822,7 +822,7 @@ int generate_stateless_cookie_callback(SSL *ssl, unsigned char *cookie,
     return res;
 }
 
-int verify_stateless_cookie_callback(SSL *ssl, const unsigned char *cookie,
+int __cdecl verify_stateless_cookie_callback(SSL *ssl, const unsigned char *cookie,
                                      size_t cookie_len)
 {
     return verify_cookie_callback(ssl, cookie, cookie_len);
@@ -864,7 +864,7 @@ static STRINT_PAIR chain_flags[] = {
     {NULL}
 };
 
-static void print_chain_flags(SSL *s, int flags)
+static void __cdecl print_chain_flags(SSL *s, int flags)
 {
     STRINT_PAIR *pp;
 
@@ -883,7 +883,7 @@ static void print_chain_flags(SSL *s, int flags)
  * Very basic selection callback: just use any certificate chain reported as
  * valid. More sophisticated could prioritise according to local policy.
  */
-static int set_cert_cb(SSL *ssl, void *arg)
+static int __cdecl set_cert_cb(SSL *ssl, void *arg)
 {
     int i, rv;
     SSL_EXCERT *exc = arg;
@@ -1315,7 +1315,7 @@ int ssl_load_stores(SSL_CTX *ctx,
 typedef struct {
     BIO *out;
     int verbose;
-    int (*old_cb) (const SSL *s, const SSL_CTX *ctx, int op, int bits, int nid,
+    int (__cdecl *old_cb) (const SSL *s, const SSL_CTX *ctx, int op, int bits, int nid,
                    void *other, void *ex);
 } security_debug_ex;
 
@@ -1344,7 +1344,7 @@ static STRINT_PAIR callback_types[] = {
     {NULL}
 };
 
-static int security_callback_debug(const SSL *s, const SSL_CTX *ctx,
+static int __cdecl security_callback_debug(const SSL *s, const SSL_CTX *ctx,
                                    int op, int bits, int nid,
                                    void *other, void *ex)
 {
@@ -1471,7 +1471,7 @@ void ssl_ctx_security_debug(SSL_CTX *ctx, int verbose)
     SSL_CTX_set0_security_ex_data(ctx, &sdb);
 }
 
-static void keylog_callback(const SSL *ssl, const char *line)
+static void __cdecl keylog_callback(const SSL *ssl, const char *line)
 {
     if (bio_keylog == NULL) {
         BIO_printf(bio_err, "Keylog callback is invoked without valid file!\n");
diff --git a/apps/s_client.c b/apps/s_client.c
index 26a6789d81..8d921976f0 100644
--- a/apps/s_client.c
+++ b/apps/s_client.c
@@ -71,10 +71,10 @@ static SSL_SESSION *psksess = NULL;
 
 static void print_stuff(BIO *berr, SSL *con, int full);
 #ifndef OPENSSL_NO_OCSP
-static int ocsp_resp_cb(SSL *s, void *arg);
+static int __cdecl ocsp_resp_cb(SSL *s, void *arg);
 #endif
-static int ldap_ExtendedResponse_parse(const char *buf, long rem);
-static int is_dNS_name(const char *host);
+static int __cdecl ldap_ExtendedResponse_parse(const char *buf, long rem);
+static int __cdecl is_dNS_name(const char *host);
 
 static int saved_errno;
 
@@ -84,7 +84,7 @@ static void save_errno(void)
     errno = 0;
 }
 
-static int restore_errno(void)
+static int __cdecl restore_errno(void)
 {
     int ret = errno;
     errno = saved_errno;
@@ -116,7 +116,7 @@ static void do_ssl_shutdown(SSL *ssl)
 static char *psk_identity = "Client_identity";
 
 #ifndef OPENSSL_NO_PSK
-static unsigned int psk_client_cb(SSL *ssl, const char *hint, char *identity,
+static unsigned int __cdecl psk_client_cb(SSL *ssl, const char *hint, char *identity,
                                   unsigned int max_identity_len,
                                   unsigned char *psk,
                                   unsigned int max_psk_len)
@@ -178,7 +178,7 @@ static unsigned int psk_client_cb(SSL *ssl, const char *hint, char *identity,
 const unsigned char tls13_aes128gcmsha256_id[] = { 0x13, 0x01 };
 const unsigned char tls13_aes256gcmsha384_id[] = { 0x13, 0x02 };
 
-static int psk_use_session_cb(SSL *s, const EVP_MD *md,
+static int __cdecl psk_use_session_cb(SSL *s, const EVP_MD *md,
                               const unsigned char **id, size_t *idlen,
                               SSL_SESSION **sess)
 {
@@ -246,7 +246,7 @@ typedef struct tlsextctx_st {
     int ack;
 } tlsextctx;
 
-static int ssl_servername_cb(SSL *s, int *ad, void *arg)
+static int __cdecl ssl_servername_cb(SSL *s, int *ad, void *arg)
 {
     tlsextctx *p = (tlsextctx *) arg;
     const char *hn = SSL_get_servername(s, TLSEXT_NAMETYPE_host_name);
@@ -272,7 +272,7 @@ typedef struct srp_arg_st {
 
 # define SRP_NUMBER_ITERATIONS_FOR_PRIME 64
 
-static int srp_Verify_N_and_g(const BIGNUM *N, const BIGNUM *g)
+static int __cdecl srp_Verify_N_and_g(const BIGNUM *N, const BIGNUM *g)
 {
     BN_CTX *bn_ctx = BN_CTX_new();
     BIGNUM *p = BN_new();
@@ -310,7 +310,7 @@ static int srp_Verify_N_and_g(const BIGNUM *N, const BIGNUM *g)
  * primality tests are rather cpu consuming.
  */
 
-static int ssl_srp_verify_param_cb(SSL *s, void *arg)
+static int __cdecl ssl_srp_verify_param_cb(SSL *s, void *arg)
 {
     SRP_ARG *srp_arg = (SRP_ARG *)arg;
     BIGNUM *N = NULL, *g = NULL;
@@ -348,7 +348,7 @@ static int ssl_srp_verify_param_cb(SSL *s, void *arg)
 
 # define PWD_STRLEN 1024
 
-static char *ssl_give_srp_client_pwd_cb(SSL *s, void *arg)
+static char * __cdecl ssl_give_srp_client_pwd_cb(SSL *s, void *arg)
 {
     SRP_ARG *srp_arg = (SRP_ARG *)arg;
     char *pass = app_malloc(PWD_STRLEN + 1, "SRP password buffer");
@@ -379,7 +379,7 @@ typedef struct tlsextnextprotoctx_st {
 
 static tlsextnextprotoctx next_proto;
 
-static int next_proto_cb(SSL *s, unsigned char **out, unsigned char *outlen,
+static int __cdecl next_proto_cb(SSL *s, unsigned char **out, unsigned char *outlen,
                          const unsigned char *in, unsigned int inlen,
                          void *arg)
 {
@@ -404,7 +404,7 @@ static int next_proto_cb(SSL *s, unsigned char **out, unsigned char *outlen,
 }
 #endif                         /* ndef OPENSSL_NO_NEXTPROTONEG */
 
-static int serverinfo_cli_parse_cb(SSL *s, unsigned int ext_type,
+static int __cdecl serverinfo_cli_parse_cb(SSL *s, unsigned int ext_type,
                                    const unsigned char *in, size_t inlen,
                                    int *al, void *arg)
 {
@@ -502,7 +502,7 @@ struct tlsa_field {
     ossl_ssize_t (*parser)(const char **, void *);
 };
 
-static int tlsa_import_rr(SSL *con, const char *rrdata)
+static int __cdecl tlsa_import_rr(SSL *con, const char *rrdata)
 {
     /* Not necessary to re-init these values; the "parsers" do that. */
     static uint8_t usage;
@@ -548,7 +548,7 @@ static int tlsa_import_rr(SSL *con, const char *rrdata)
     return ret;
 }
 
-static int tlsa_import_rrset(SSL *con, STACK_OF(OPENSSL_STRING) *rrset)
+static int __cdecl tlsa_import_rrset(SSL *con, STACK_OF(OPENSSL_STRING) *rrset)
 {
     int num = sk_OPENSSL_STRING_num(rrset);
     int count = 0;
@@ -847,7 +847,7 @@ static void freeandcopy(char **dest, const char *source)
         *dest = OPENSSL_strdup(source);
 }
 
-static int new_session_cb(SSL *s, SSL_SESSION *sess)
+static int __cdecl new_session_cb(SSL *s, SSL_SESSION *sess)
 {
 
     if (sess_out != NULL) {
@@ -3367,7 +3367,7 @@ static void print_stuff(BIO *bio, SSL *s, int full)
 }
 
 # ifndef OPENSSL_NO_OCSP
-static int ocsp_resp_cb(SSL *s, void *arg)
+static int __cdecl ocsp_resp_cb(SSL *s, void *arg)
 {
     const unsigned char *p;
     int len;
@@ -3392,7 +3392,7 @@ static int ocsp_resp_cb(SSL *s, void *arg)
 }
 # endif
 
-static int ldap_ExtendedResponse_parse(const char *buf, long rem)
+static int __cdecl ldap_ExtendedResponse_parse(const char *buf, long rem)
 {
     const unsigned char *cur, *end;
     long len;
@@ -3480,7 +3480,7 @@ static int ldap_ExtendedResponse_parse(const char *buf, long rem)
  * Host dNS Name verifier: used for checking that the hostname is in dNS format 
  * before setting it as SNI
  */
-static int is_dNS_name(const char *host)
+static int __cdecl is_dNS_name(const char *host)
 {
     const size_t MAX_LABEL_LENGTH = 63;
     size_t i;
diff --git a/apps/s_server.c b/apps/s_server.c
index 929a08bd85..4927f5b31a 100644
--- a/apps/s_server.c
+++ b/apps/s_server.c
@@ -60,21 +60,21 @@ typedef unsigned int u_int;
 #endif
 #include "internal/sockets.h"
 
-static int not_resumable_sess_cb(SSL *s, int is_forward_secure);
-static int sv_body(int s, int stype, int prot, unsigned char *context);
-static int www_body(int s, int stype, int prot, unsigned char *context);
-static int rev_body(int s, int stype, int prot, unsigned char *context);
-static void close_accept_socket(void);
-static int init_ssl_connection(SSL *s);
-static void print_stats(BIO *bp, SSL_CTX *ctx);
-static int generate_session_id(SSL *ssl, unsigned char *id,
+static int __cdecl not_resumable_sess_cb(SSL *s, int is_forward_secure);
+static int __cdecl sv_body(int s, int stype, int prot, unsigned char *context);
+static int __cdecl www_body(int s, int stype, int prot, unsigned char *context);
+static int __cdecl rev_body(int s, int stype, int prot, unsigned char *context);
+static void __cdecl close_accept_socket(void);
+static int __cdecl init_ssl_connection(SSL *s);
+static void __cdecl print_stats(BIO *bp, SSL_CTX *ctx);
+static int __cdecl generate_session_id(SSL *ssl, unsigned char *id,
                                unsigned int *id_len);
-static void init_session_cache_ctx(SSL_CTX *sctx);
-static void free_sessions(void);
+static void __cdecl init_session_cache_ctx(SSL_CTX *sctx);
+static void __cdecl free_sessions(void);
 #ifndef OPENSSL_NO_DH
 static DH *load_dh_param(const char *dhfile);
 #endif
-static void print_connection_info(SSL *con);
+static void __cdecl print_connection_info(SSL *con);
 
 static const int bufsize = 16 * 1024;
 static int accept_socket = -1;
@@ -124,7 +124,7 @@ static char *psk_identity = "Client_identity";
 char *psk_key = NULL;           /* by default PSK is not used */
 
 #ifndef OPENSSL_NO_PSK
-static unsigned int psk_server_cb(SSL *ssl, const char *identity,
+static unsigned int __cdecl psk_server_cb(SSL *ssl, const char *identity,
                                   unsigned char *psk,
                                   unsigned int max_psk_len)
 {
@@ -183,7 +183,7 @@ static unsigned int psk_server_cb(SSL *ssl, const char *identity,
 #define TLS13_AES_128_GCM_SHA256_BYTES  ((const unsigned char *)"\x13\x01")
 #define TLS13_AES_256_GCM_SHA384_BYTES  ((const unsigned char *)"\x13\x02")
 
-static int psk_find_session_cb(SSL *ssl, const unsigned char *identity,
+static int __cdecl psk_find_session_cb(SSL *ssl, const unsigned char *identity,
                                size_t identity_len, SSL_SESSION **sess)
 {
     SSL_SESSION *tmpsess = NULL;
@@ -249,7 +249,7 @@ static srpsrvparm srp_callback_parm;
  * (which would normally occur after a worker has finished) and we set the
  * user parameters.
  */
-static int ssl_srp_server_param_cb(SSL *s, int *ad, void *arg)
+static int __cdecl ssl_srp_server_param_cb(SSL *s, int *ad, void *arg)
 {
     srpsrvparm *p = (srpsrvparm *) arg;
     int ret = SSL3_AL_FATAL;
@@ -289,13 +289,13 @@ static int local_argc = 0;
 static char **local_argv;
 
 #ifdef CHARSET_EBCDIC
-static int ebcdic_new(BIO *bi);
-static int ebcdic_free(BIO *a);
-static int ebcdic_read(BIO *b, char *out, int outl);
-static int ebcdic_write(BIO *b, const char *in, int inl);
-static long ebcdic_ctrl(BIO *b, int cmd, long num, void *ptr);
-static int ebcdic_gets(BIO *bp, char *buf, int size);
-static int ebcdic_puts(BIO *bp, const char *str);
+static int __cdecl ebcdic_new(BIO *bi);
+static int __cdecl ebcdic_free(BIO *a);
+static int __cdecl ebcdic_read(BIO *b, char *out, int outl);
+static int __cdecl ebcdic_write(BIO *b, const char *in, int inl);
+static long __cdecl ebcdic_ctrl(BIO *b, int cmd, long num, void *ptr);
+static int __cdecl ebcdic_gets(BIO *bp, char *buf, int size);
+static int __cdecl ebcdic_puts(BIO *bp, const char *str);
 
 # define BIO_TYPE_EBCDIC_FILTER  (18|0x0200)
 static BIO_METHOD *methods_ebcdic = NULL;
@@ -324,7 +324,7 @@ static const BIO_METHOD *BIO_f_ebcdic_filter()
     return methods_ebcdic;
 }
 
-static int ebcdic_new(BIO *bi)
+static int __cdecl ebcdic_new(BIO *bi)
 {
     EBCDIC_OUTBUFF *wbuf;
 
@@ -337,7 +337,7 @@ static int ebcdic_new(BIO *bi)
     return 1;
 }
 
-static int ebcdic_free(BIO *a)
+static int __cdecl ebcdic_free(BIO *a)
 {
     EBCDIC_OUTBUFF *wbuf;
 
@@ -351,7 +351,7 @@ static int ebcdic_free(BIO *a)
     return 1;
 }
 
-static int ebcdic_read(BIO *b, char *out, int outl)
+static int __cdecl ebcdic_read(BIO *b, char *out, int outl)
 {
     int ret = 0;
     BIO *next = BIO_next(b);
@@ -367,7 +367,7 @@ static int ebcdic_read(BIO *b, char *out, int outl)
     return ret;
 }
 
-static int ebcdic_write(BIO *b, const char *in, int inl)
+static int __cdecl ebcdic_write(BIO *b, const char *in, int inl)
 {
     EBCDIC_OUTBUFF *wbuf;
     BIO *next = BIO_next(b);
@@ -401,7 +401,7 @@ static int ebcdic_write(BIO *b, const char *in, int inl)
     return ret;
 }
 
-static long ebcdic_ctrl(BIO *b, int cmd, long num, void *ptr)
+static long __cdecl ebcdic_ctrl(BIO *b, int cmd, long num, void *ptr)
 {
     long ret;
     BIO *next = BIO_next(b);
@@ -419,7 +419,7 @@ static long ebcdic_ctrl(BIO *b, int cmd, long num, void *ptr)
     return ret;
 }
 
-static int ebcdic_gets(BIO *bp, char *buf, int size)
+static int __cdecl ebcdic_gets(BIO *bp, char *buf, int size)
 {
     int i, ret = 0;
     BIO *next = BIO_next(bp);
@@ -441,7 +441,7 @@ static int ebcdic_gets(BIO *bp, char *buf, int size)
     return (ret < 0 && i == 0) ? ret : i;
 }
 
-static int ebcdic_puts(BIO *bp, const char *str)
+static int __cdecl ebcdic_puts(BIO *bp, const char *str)
 {
     if (BIO_next(bp) == NULL)
         return 0;
@@ -456,7 +456,7 @@ typedef struct tlsextctx_st {
     int extension_error;
 } tlsextctx;
 
-static int ssl_servername_cb(SSL *s, int *ad, void *arg)
+static int __cdecl ssl_servername_cb(SSL *s, int *ad, void *arg)
 {
     tlsextctx *p = (tlsextctx *) arg;
     const char *servername = SSL_get_servername(s, TLSEXT_NAMETYPE_host_name);
@@ -508,7 +508,7 @@ static tlsextstatusctx tlscstatp = { -1 };
  * the OCSP certificate IDs and minimise the number of OCSP responses by caching
  * them until they were considered "expired".
  */
-static int get_ocsp_resp_from_responder(SSL *s, tlsextstatusctx *srctx,
+static int __cdecl get_ocsp_resp_from_responder(SSL *s, tlsextstatusctx *srctx,
                                         OCSP_RESPONSE **resp)
 {
     char *host = NULL, *port = NULL, *path = NULL;
@@ -611,7 +611,7 @@ static int get_ocsp_resp_from_responder(SSL *s, tlsextstatusctx *srctx,
  * certificate status request extension. The response is either obtained from a
  * file, or from an OCSP responder.
  */
-static int cert_status_cb(SSL *s, void *arg)
+static int __cdecl cert_status_cb(SSL *s, void *arg)
 {
     tlsextstatusctx *srctx = arg;
     OCSP_RESPONSE *resp = NULL;
@@ -669,7 +669,7 @@ typedef struct tlsextnextprotoctx_st {
     size_t len;
 } tlsextnextprotoctx;
 
-static int next_proto_cb(SSL *s, const unsigned char **data,
+static int __cdecl next_proto_cb(SSL *s, const unsigned char **data,
                          unsigned int *len, void *arg)
 {
     tlsextnextprotoctx *next_proto = arg;
@@ -687,7 +687,7 @@ typedef struct tlsextalpnctx_st {
     size_t len;
 } tlsextalpnctx;
 
-static int alpn_cb(SSL *s, const unsigned char **out, unsigned char *outlen,
+static int __cdecl alpn_cb(SSL *s, const unsigned char **out, unsigned char *outlen,
                    const unsigned char *in, unsigned int inlen, void *arg)
 {
     tlsextalpnctx *alpn_ctx = arg;
@@ -720,7 +720,7 @@ static int alpn_cb(SSL *s, const unsigned char **out, unsigned char *outlen,
     return SSL_TLSEXT_ERR_OK;
 }
 
-static int not_resumable_sess_cb(SSL *s, int is_forward_secure)
+static int __cdecl not_resumable_sess_cb(SSL *s, int is_forward_secure)
 {
     /* disable resumption for sessions with forward secure ciphers */
     return is_forward_secure;
@@ -2200,7 +2200,7 @@ int s_server_main(int argc, char *argv[])
     return ret;
 }
 
-static void print_stats(BIO *bio, SSL_CTX *ssl_ctx)
+static void __cdecl print_stats(BIO *bio, SSL_CTX *ssl_ctx)
 {
     BIO_printf(bio, "%4ld items in the session cache\n",
                SSL_CTX_sess_number(ssl_ctx));
@@ -2228,7 +2228,7 @@ static void print_stats(BIO *bio, SSL_CTX *ssl_ctx)
                SSL_CTX_sess_get_cache_size(ssl_ctx));
 }
 
-static int sv_body(int s, int stype, int prot, unsigned char *context)
+static int __cdecl sv_body(int s, int stype, int prot, unsigned char *context)
 {
     char *buf = NULL;
     fd_set readfds;
@@ -2718,7 +2718,7 @@ static int sv_body(int s, int stype, int prot, unsigned char *context)
     return ret;
 }
 
-static void close_accept_socket(void)
+static void __cdecl close_accept_socket(void)
 {
     BIO_printf(bio_err, "shutdown accept socket\n");
     if (accept_socket >= 0) {
@@ -2726,7 +2726,7 @@ static void close_accept_socket(void)
     }
 }
 
-static int is_retryable(SSL *con, int i)
+static int __cdecl is_retryable(SSL *con, int i)
 {
     int err = SSL_get_error(con, i);
 
@@ -2736,7 +2736,7 @@ static int is_retryable(SSL *con, int i)
            && (err != SSL_ERROR_ZERO_RETURN);
 }
 
-static int init_ssl_connection(SSL *con)
+static int __cdecl init_ssl_connection(SSL *con)
 {
     int i;
     long verify_err;
@@ -2845,7 +2845,7 @@ static int init_ssl_connection(SSL *con)
     return 1;
 }
 
-static void print_connection_info(SSL *con)
+static void __cdecl print_connection_info(SSL *con)
 {
     const char *str;
     X509 *peer;
@@ -2945,7 +2945,7 @@ static DH *load_dh_param(const char *dhfile)
 }
 #endif
 
-static int www_body(int s, int stype, int prot, unsigned char *context)
+static int __cdecl www_body(int s, int stype, int prot, unsigned char *context)
 {
     char *buf = NULL;
     int ret = 1;
@@ -3332,7 +3332,7 @@ static int www_body(int s, int stype, int prot, unsigned char *context)
     return ret;
 }
 
-static int rev_body(int s, int stype, int prot, unsigned char *context)
+static int __cdecl rev_body(int s, int stype, int prot, unsigned char *context)
 {
     char *buf = NULL;
     int i;
@@ -3488,7 +3488,7 @@ static int rev_body(int s, int stype, int prot, unsigned char *context)
 }
 
 #define MAX_SESSION_ID_ATTEMPTS 10
-static int generate_session_id(SSL *ssl, unsigned char *id,
+static int __cdecl generate_session_id(SSL *ssl, unsigned char *id,
                                unsigned int *id_len)
 {
     unsigned int count = 0;
@@ -3530,7 +3530,7 @@ typedef struct simple_ssl_session_st {
 
 static simple_ssl_session *first = NULL;
 
-static int add_session(SSL *ssl, SSL_SESSION *session)
+static int __cdecl add_session(SSL *ssl, SSL_SESSION *session)
 {
     simple_ssl_session *sess = app_malloc(sizeof(*sess), "get session");
     unsigned char *p;
@@ -3569,7 +3569,7 @@ static int add_session(SSL *ssl, SSL_SESSION *session)
     return 0;
 }
 
-static SSL_SESSION *get_session(SSL *ssl, const unsigned char *id, int idlen,
+static SSL_SESSION * __cdecl get_session(SSL *ssl, const unsigned char *id, int idlen,
                                 int *do_copy)
 {
     simple_ssl_session *sess;
@@ -3585,7 +3585,7 @@ static SSL_SESSION *get_session(SSL *ssl, const unsigned char *id, int idlen,
     return NULL;
 }
 
-static void del_session(SSL_CTX *sctx, SSL_SESSION *session)
+static void __cdecl del_session(SSL_CTX *sctx, SSL_SESSION *session)
 {
     simple_ssl_session *sess, *prev = NULL;
     const unsigned char *id;
@@ -3606,7 +3606,7 @@ static void del_session(SSL_CTX *sctx, SSL_SESSION *session)
     }
 }
 
-static void init_session_cache_ctx(SSL_CTX *sctx)
+static void __cdecl init_session_cache_ctx(SSL_CTX *sctx)
 {
     SSL_CTX_set_session_cache_mode(sctx,
                                    SSL_SESS_CACHE_NO_INTERNAL |
@@ -3616,7 +3616,7 @@ static void init_session_cache_ctx(SSL_CTX *sctx)
     SSL_CTX_sess_set_remove_cb(sctx, del_session);
 }
 
-static void free_sessions(void)
+static void __cdecl free_sessions(void)
 {
     simple_ssl_session *sess, *tsess;
     for (sess = first; sess;) {
diff --git a/apps/speed.c b/apps/speed.c
index 20149506cc..883df205ee 100644
--- a/apps/speed.c
+++ b/apps/speed.c
@@ -132,60 +132,60 @@ static int mr = 0;
 static int usertime = 1;
 
 #ifndef OPENSSL_NO_MD2
-static int EVP_Digest_MD2_loop(void *args);
+static int __cdecl EVP_Digest_MD2_loop(void *args);
 #endif
 
 #ifndef OPENSSL_NO_MDC2
-static int EVP_Digest_MDC2_loop(void *args);
+static int __cdecl EVP_Digest_MDC2_loop(void *args);
 #endif
 #ifndef OPENSSL_NO_MD4
-static int EVP_Digest_MD4_loop(void *args);
+static int __cdecl EVP_Digest_MD4_loop(void *args);
 #endif
 #ifndef OPENSSL_NO_MD5
-static int MD5_loop(void *args);
-static int HMAC_loop(void *args);
+static int __cdecl MD5_loop(void *args);
+static int __cdecl HMAC_loop(void *args);
 #endif
-static int SHA1_loop(void *args);
-static int SHA256_loop(void *args);
-static int SHA512_loop(void *args);
+static int __cdecl SHA1_loop(void *args);
+static int __cdecl SHA256_loop(void *args);
+static int __cdecl SHA512_loop(void *args);
 #ifndef OPENSSL_NO_WHIRLPOOL
-static int WHIRLPOOL_loop(void *args);
+static int __cdecl WHIRLPOOL_loop(void *args);
 #endif
 #ifndef OPENSSL_NO_RMD160
-static int EVP_Digest_RMD160_loop(void *args);
+static int __cdecl EVP_Digest_RMD160_loop(void *args);
 #endif
 #ifndef OPENSSL_NO_RC4
-static int RC4_loop(void *args);
+static int __cdecl RC4_loop(void *args);
 #endif
 #ifndef OPENSSL_NO_DES
-static int DES_ncbc_encrypt_loop(void *args);
-static int DES_ede3_cbc_encrypt_loop(void *args);
-#endif
-static int AES_cbc_128_encrypt_loop(void *args);
-static int AES_cbc_192_encrypt_loop(void *args);
-static int AES_ige_128_encrypt_loop(void *args);
-static int AES_cbc_256_encrypt_loop(void *args);
-static int AES_ige_192_encrypt_loop(void *args);
-static int AES_ige_256_encrypt_loop(void *args);
-static int CRYPTO_gcm128_aad_loop(void *args);
-static int RAND_bytes_loop(void *args);
-static int EVP_Update_loop(void *args);
-static int EVP_Update_loop_ccm(void *args);
-static int EVP_Update_loop_aead(void *args);
-static int EVP_Digest_loop(void *args);
+static int __cdecl DES_ncbc_encrypt_loop(void *args);
+static int __cdecl DES_ede3_cbc_encrypt_loop(void *args);
+#endif
+static int __cdecl AES_cbc_128_encrypt_loop(void *args);
+static int __cdecl AES_cbc_192_encrypt_loop(void *args);
+static int __cdecl AES_ige_128_encrypt_loop(void *args);
+static int __cdecl AES_cbc_256_encrypt_loop(void *args);
+static int __cdecl AES_ige_192_encrypt_loop(void *args);
+static int __cdecl AES_ige_256_encrypt_loop(void *args);
+static int __cdecl CRYPTO_gcm128_aad_loop(void *args);
+static int __cdecl RAND_bytes_loop(void *args);
+static int __cdecl EVP_Update_loop(void *args);
+static int __cdecl EVP_Update_loop_ccm(void *args);
+static int __cdecl EVP_Update_loop_aead(void *args);
+static int __cdecl EVP_Digest_loop(void *args);
 #ifndef OPENSSL_NO_RSA
-static int RSA_sign_loop(void *args);
-static int RSA_verify_loop(void *args);
+static int __cdecl RSA_sign_loop(void *args);
+static int __cdecl RSA_verify_loop(void *args);
 #endif
 #ifndef OPENSSL_NO_DSA
-static int DSA_sign_loop(void *args);
-static int DSA_verify_loop(void *args);
+static int __cdecl DSA_sign_loop(void *args);
+static int __cdecl DSA_verify_loop(void *args);
 #endif
 #ifndef OPENSSL_NO_EC
-static int ECDSA_sign_loop(void *args);
-static int ECDSA_verify_loop(void *args);
-static int EdDSA_sign_loop(void *args);
-static int EdDSA_verify_loop(void *args);
+static int __cdecl ECDSA_sign_loop(void *args);
+static int __cdecl ECDSA_verify_loop(void *args);
+static int __cdecl EdDSA_sign_loop(void *args);
+static int __cdecl EdDSA_verify_loop(void *args);
 #endif
 
 static double Time_F(int s);
@@ -194,7 +194,7 @@ static void pkey_print_message(const char *str, const char *str2,
                                long num, unsigned int bits, int sec);
 static void print_result(int alg, int run_no, int count, double time_used);
 #ifndef NO_FORK
-static int do_multi(int multi, int size_num);
+static int __cdecl do_multi(int multi, int size_num);
 #endif
 
 static const int lengths_list[] = {
@@ -283,7 +283,7 @@ static void multiblock_speed(const EVP_CIPHER *evp_cipher, int lengths_single,
 
 #define found(value, pairs, result)\
     opt_found(value, result, pairs, OSSL_NELEM(pairs))
-static int opt_found(const char *name, unsigned int *result,
+static int __cdecl opt_found(const char *name, unsigned int *result,
                      const OPT_PAIR pairs[], unsigned int nbelem)
 {
     unsigned int idx;
@@ -628,7 +628,7 @@ typedef struct loopargs_st {
     HMAC_CTX *hctx;
     GCM128_CONTEXT *gcm_ctx;
 } loopargs_t;
-static int run_benchmark(int async_jobs, int (*loop_function) (void *),
+static int __cdecl run_benchmark(int async_jobs, int (__cdecl *loop_function) (void *),
                          loopargs_t * loopargs);
 
 static unsigned int testnum;
@@ -637,7 +637,7 @@ static unsigned int testnum;
 static long c[ALGOR_NUM][OSSL_NELEM(lengths_list)];
 
 #ifndef OPENSSL_NO_MD2
-static int EVP_Digest_MD2_loop(void *args)
+static int __cdecl EVP_Digest_MD2_loop(void *args)
 {
     loopargs_t *tempargs = *(loopargs_t **) args;
     unsigned char *buf = tempargs->buf;
@@ -654,7 +654,7 @@ static int EVP_Digest_MD2_loop(void *args)
 #endif
 
 #ifndef OPENSSL_NO_MDC2
-static int EVP_Digest_MDC2_loop(void *args)
+static int __cdecl EVP_Digest_MDC2_loop(void *args)
 {
     loopargs_t *tempargs = *(loopargs_t **) args;
     unsigned char *buf = tempargs->buf;
@@ -671,7 +671,7 @@ static int EVP_Digest_MDC2_loop(void *args)
 #endif
 
 #ifndef OPENSSL_NO_MD4
-static int EVP_Digest_MD4_loop(void *args)
+static int __cdecl EVP_Digest_MD4_loop(void *args)
 {
     loopargs_t *tempargs = *(loopargs_t **) args;
     unsigned char *buf = tempargs->buf;
@@ -688,7 +688,7 @@ static int EVP_Digest_MD4_loop(void *args)
 #endif
 
 #ifndef OPENSSL_NO_MD5
-static int MD5_loop(void *args)
+static int __cdecl MD5_loop(void *args)
 {
     loopargs_t *tempargs = *(loopargs_t **) args;
     unsigned char *buf = tempargs->buf;
@@ -699,7 +699,7 @@ static int MD5_loop(void *args)
     return count;
 }
 
-static int HMAC_loop(void *args)
+static int __cdecl HMAC_loop(void *args)
 {
     loopargs_t *tempargs = *(loopargs_t **) args;
     unsigned char *buf = tempargs->buf;
@@ -716,7 +716,7 @@ static int HMAC_loop(void *args)
 }
 #endif
 
-static int SHA1_loop(void *args)
+static int __cdecl SHA1_loop(void *args)
 {
     loopargs_t *tempargs = *(loopargs_t **) args;
     unsigned char *buf = tempargs->buf;
@@ -727,7 +727,7 @@ static int SHA1_loop(void *args)
     return count;
 }
 
-static int SHA256_loop(void *args)
+static int __cdecl SHA256_loop(void *args)
 {
     loopargs_t *tempargs = *(loopargs_t **) args;
     unsigned char *buf = tempargs->buf;
@@ -738,7 +738,7 @@ static int SHA256_loop(void *args)
     return count;
 }
 
-static int SHA512_loop(void *args)
+static int __cdecl SHA512_loop(void *args)
 {
     loopargs_t *tempargs = *(loopargs_t **) args;
     unsigned char *buf = tempargs->buf;
@@ -750,7 +750,7 @@ static int SHA512_loop(void *args)
 }
 
 #ifndef OPENSSL_NO_WHIRLPOOL
-static int WHIRLPOOL_loop(void *args)
+static int __cdecl WHIRLPOOL_loop(void *args)
 {
     loopargs_t *tempargs = *(loopargs_t **) args;
     unsigned char *buf = tempargs->buf;
@@ -763,7 +763,7 @@ static int WHIRLPOOL_loop(void *args)
 #endif
 
 #ifndef OPENSSL_NO_RMD160
-static int EVP_Digest_RMD160_loop(void *args)
+static int __cdecl EVP_Digest_RMD160_loop(void *args)
 {
     loopargs_t *tempargs = *(loopargs_t **) args;
     unsigned char *buf = tempargs->buf;
@@ -780,7 +780,7 @@ static int EVP_Digest_RMD160_loop(void *args)
 
 #ifndef OPENSSL_NO_RC4
 static RC4_KEY rc4_ks;
-static int RC4_loop(void *args)
+static int __cdecl RC4_loop(void *args)
 {
     loopargs_t *tempargs = *(loopargs_t **) args;
     unsigned char *buf = tempargs->buf;
@@ -796,7 +796,7 @@ static unsigned char DES_iv[8];
 static DES_key_schedule sch;
 static DES_key_schedule sch2;
 static DES_key_schedule sch3;
-static int DES_ncbc_encrypt_loop(void *args)
+static int __cdecl DES_ncbc_encrypt_loop(void *args)
 {
     loopargs_t *tempargs = *(loopargs_t **) args;
     unsigned char *buf = tempargs->buf;
@@ -807,7 +807,7 @@ static int DES_ncbc_encrypt_loop(void *args)
     return count;
 }
 
-static int DES_ede3_cbc_encrypt_loop(void *args)
+static int __cdecl DES_ede3_cbc_encrypt_loop(void *args)
 {
     loopargs_t *tempargs = *(loopargs_t **) args;
     unsigned char *buf = tempargs->buf;
@@ -823,7 +823,7 @@ static int DES_ede3_cbc_encrypt_loop(void *args)
 
 static unsigned char iv[2 * MAX_BLOCK_SIZE / 8];
 static AES_KEY aes_ks1, aes_ks2, aes_ks3;
-static int AES_cbc_128_encrypt_loop(void *args)
+static int __cdecl AES_cbc_128_encrypt_loop(void *args)
 {
     loopargs_t *tempargs = *(loopargs_t **) args;
     unsigned char *buf = tempargs->buf;
@@ -834,7 +834,7 @@ static int AES_cbc_128_encrypt_loop(void *args)
     return count;
 }
 
-static int AES_cbc_192_encrypt_loop(void *args)
+static int __cdecl AES_cbc_192_encrypt_loop(void *args)
 {
     loopargs_t *tempargs = *(loopargs_t **) args;
     unsigned char *buf = tempargs->buf;
@@ -845,7 +845,7 @@ static int AES_cbc_192_encrypt_loop(void *args)
     return count;
 }
 
-static int AES_cbc_256_encrypt_loop(void *args)
+static int __cdecl AES_cbc_256_encrypt_loop(void *args)
 {
     loopargs_t *tempargs = *(loopargs_t **) args;
     unsigned char *buf = tempargs->buf;
@@ -856,7 +856,7 @@ static int AES_cbc_256_encrypt_loop(void *args)
     return count;
 }
 
-static int AES_ige_128_encrypt_loop(void *args)
+static int __cdecl AES_ige_128_encrypt_loop(void *args)
 {
     loopargs_t *tempargs = *(loopargs_t **) args;
     unsigned char *buf = tempargs->buf;
@@ -868,7 +868,7 @@ static int AES_ige_128_encrypt_loop(void *args)
     return count;
 }
 
-static int AES_ige_192_encrypt_loop(void *args)
+static int __cdecl AES_ige_192_encrypt_loop(void *args)
 {
     loopargs_t *tempargs = *(loopargs_t **) args;
     unsigned char *buf = tempargs->buf;
@@ -880,7 +880,7 @@ static int AES_ige_192_encrypt_loop(void *args)
     return count;
 }
 
-static int AES_ige_256_encrypt_loop(void *args)
+static int __cdecl AES_ige_256_encrypt_loop(void *args)
 {
     loopargs_t *tempargs = *(loopargs_t **) args;
     unsigned char *buf = tempargs->buf;
@@ -892,7 +892,7 @@ static int AES_ige_256_encrypt_loop(void *args)
     return count;
 }
 
-static int CRYPTO_gcm128_aad_loop(void *args)
+static int __cdecl CRYPTO_gcm128_aad_loop(void *args)
 {
     loopargs_t *tempargs = *(loopargs_t **) args;
     unsigned char *buf = tempargs->buf;
@@ -903,7 +903,7 @@ static int CRYPTO_gcm128_aad_loop(void *args)
     return count;
 }
 
-static int RAND_bytes_loop(void *args)
+static int __cdecl RAND_bytes_loop(void *args)
 {
     loopargs_t *tempargs = *(loopargs_t **) args;
     unsigned char *buf = tempargs->buf;
@@ -916,7 +916,7 @@ static int RAND_bytes_loop(void *args)
 
 static long save_count = 0;
 static int decrypt = 0;
-static int EVP_Update_loop(void *args)
+static int __cdecl EVP_Update_loop(void *args)
 {
     loopargs_t *tempargs = *(loopargs_t **) args;
     unsigned char *buf = tempargs->buf;
@@ -954,7 +954,7 @@ static int EVP_Update_loop(void *args)
  * each message is encrypted using the same (key,iv)-pair. Do not use this
  * code in your application.
  */
-static int EVP_Update_loop_ccm(void *args)
+static int __cdecl EVP_Update_loop_ccm(void *args)
 {
     loopargs_t *tempargs = *(loopargs_t **) args;
     unsigned char *buf = tempargs->buf;
@@ -992,7 +992,7 @@ static int EVP_Update_loop_ccm(void *args)
  * 13-byte AAD followed by payload. But don't use TLS-formatted AAD, as
  * payload length is not actually limited by 16KB...
  */
-static int EVP_Update_loop_aead(void *args)
+static int __cdecl EVP_Update_loop_aead(void *args)
 {
     loopargs_t *tempargs = *(loopargs_t **) args;
     unsigned char *buf = tempargs->buf;
@@ -1024,7 +1024,7 @@ static int EVP_Update_loop_aead(void *args)
 }
 
 static const EVP_MD *evp_md = NULL;
-static int EVP_Digest_loop(void *args)
+static int __cdecl EVP_Digest_loop(void *args)
 {
     loopargs_t *tempargs = *(loopargs_t **) args;
     unsigned char *buf = tempargs->buf;
@@ -1044,7 +1044,7 @@ static int EVP_Digest_loop(void *args)
 #ifndef OPENSSL_NO_RSA
 static long rsa_c[RSA_NUM][2];  /* # RSA iteration test */
 
-static int RSA_sign_loop(void *args)
+static int __cdecl RSA_sign_loop(void *args)
 {
     loopargs_t *tempargs = *(loopargs_t **) args;
     unsigned char *buf = tempargs->buf;
@@ -1064,7 +1064,7 @@ static int RSA_sign_loop(void *args)
     return count;
 }
 
-static int RSA_verify_loop(void *args)
+static int __cdecl RSA_verify_loop(void *args)
 {
     loopargs_t *tempargs = *(loopargs_t **) args;
     unsigned char *buf = tempargs->buf;
@@ -1088,7 +1088,7 @@ static int RSA_verify_loop(void *args)
 
 #ifndef OPENSSL_NO_DSA
 static long dsa_c[DSA_NUM][2];
-static int DSA_sign_loop(void *args)
+static int __cdecl DSA_sign_loop(void *args)
 {
     loopargs_t *tempargs = *(loopargs_t **) args;
     unsigned char *buf = tempargs->buf;
@@ -1108,7 +1108,7 @@ static int DSA_sign_loop(void *args)
     return count;
 }
 
-static int DSA_verify_loop(void *args)
+static int __cdecl DSA_verify_loop(void *args)
 {
     loopargs_t *tempargs = *(loopargs_t **) args;
     unsigned char *buf = tempargs->buf;
@@ -1131,7 +1131,7 @@ static int DSA_verify_loop(void *args)
 
 #ifndef OPENSSL_NO_EC
 static long ecdsa_c[ECDSA_NUM][2];
-static int ECDSA_sign_loop(void *args)
+static int __cdecl ECDSA_sign_loop(void *args)
 {
     loopargs_t *tempargs = *(loopargs_t **) args;
     unsigned char *buf = tempargs->buf;
@@ -1151,7 +1151,7 @@ static int ECDSA_sign_loop(void *args)
     return count;
 }
 
-static int ECDSA_verify_loop(void *args)
+static int __cdecl ECDSA_verify_loop(void *args)
 {
     loopargs_t *tempargs = *(loopargs_t **) args;
     unsigned char *buf = tempargs->buf;
@@ -1174,7 +1174,7 @@ static int ECDSA_verify_loop(void *args)
 /* ******************************************************************** */
 static long ecdh_c[EC_NUM][1];
 
-static int ECDH_EVP_derive_key_loop(void *args)
+static int __cdecl ECDH_EVP_derive_key_loop(void *args)
 {
     loopargs_t *tempargs = *(loopargs_t **) args;
     EVP_PKEY_CTX *ctx = tempargs->ecdh_ctx[testnum];
@@ -1189,7 +1189,7 @@ static int ECDH_EVP_derive_key_loop(void *args)
 }
 
 static long eddsa_c[EdDSA_NUM][2];
-static int EdDSA_sign_loop(void *args)
+static int __cdecl EdDSA_sign_loop(void *args)
 {
     loopargs_t *tempargs = *(loopargs_t **) args;
     unsigned char *buf = tempargs->buf;
@@ -1210,7 +1210,7 @@ static int EdDSA_sign_loop(void *args)
     return count;
 }
 
-static int EdDSA_verify_loop(void *args)
+static int __cdecl EdDSA_verify_loop(void *args)
 {
     loopargs_t *tempargs = *(loopargs_t **) args;
     unsigned char *buf = tempargs->buf;
@@ -1232,8 +1232,8 @@ static int EdDSA_verify_loop(void *args)
 }
 #endif                          /* OPENSSL_NO_EC */
 
-static int run_benchmark(int async_jobs,
-                         int (*loop_function) (void *), loopargs_t * loopargs)
+static int __cdecl run_benchmark(int async_jobs,
+                         int (__cdecl *loop_function) (void *), loopargs_t * loopargs)
 {
     int job_op_count = 0;
     int total_op_count = 0;
@@ -2601,7 +2601,7 @@ int speed_main(int argc, char **argv)
 
     if (doit[D_EVP]) {
         if (evp_cipher != NULL) {
-            int (*loopfunc)(void *args) = EVP_Update_loop;
+            int (__cdecl *loopfunc)(void *args) = EVP_Update_loop;
 
             if (multiblock && (EVP_CIPHER_flags(evp_cipher) &
                                EVP_CIPH_FLAG_TLS1_1_MULTIBLOCK)) {
@@ -3462,7 +3462,7 @@ static char *sstrsep(char **string, const char *delim)
     return token;
 }
 
-static int do_multi(int multi, int size_num)
+static int __cdecl do_multi(int multi, int size_num)
 {
     int n;
     int fd[2];
diff --git a/apps/win32_init.c b/apps/win32_init.c
index df4bff41a2..b8436cc54f 100644
--- a/apps/win32_init.c
+++ b/apps/win32_init.c
@@ -18,7 +18,7 @@ static UINT saved_cp;
 static int newargc;
 static char **newargv;
 
-static void cleanup(void)
+static void __cdecl cleanup(void)
 {
     int i;
 
diff --git a/crypto/LPdir_win.c b/crypto/LPdir_win.c
index 1dc1ef122c..820e44a580 100644
--- a/crypto/LPdir_win.c
+++ b/crypto/LPdir_win.c
@@ -71,7 +71,7 @@ struct LP_dir_context_st {
     char entry_name[NAME_MAX + 1];
 };
 
-const char *LP_find_file(LP_DIR_CTX **ctx, const char *directory)
+const char * __cdecl LP_find_file(LP_DIR_CTX **ctx, const char *directory)
 {
     if (ctx == NULL || directory == NULL) {
         errno = EINVAL;
@@ -201,7 +201,7 @@ const char *LP_find_file(LP_DIR_CTX **ctx, const char *directory)
     return (*ctx)->entry_name;
 }
 
-int LP_find_file_end(LP_DIR_CTX **ctx)
+int __cdecl LP_find_file_end(LP_DIR_CTX **ctx)
 {
     if (ctx != NULL && *ctx != NULL) {
         FindClose((*ctx)->handle);
diff --git a/crypto/aes/aes_cbc.c b/crypto/aes/aes_cbc.c
index 342841fc4f..01061c06f4 100644
--- a/crypto/aes/aes_cbc.c
+++ b/crypto/aes/aes_cbc.c
@@ -10,7 +10,7 @@
 #include <openssl/aes.h>
 #include <openssl/modes.h>
 
-void AES_cbc_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl AES_cbc_encrypt(const unsigned char *in, unsigned char *out,
                      size_t len, const AES_KEY *key,
                      unsigned char *ivec, const int enc)
 {
diff --git a/crypto/aes/aes_cfb.c b/crypto/aes/aes_cfb.c
index f010e3c4ea..c0e0fd4f13 100644
--- a/crypto/aes/aes_cfb.c
+++ b/crypto/aes/aes_cfb.c
@@ -16,7 +16,7 @@
  * used is contained in *num;
  */
 
-void AES_cfb128_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl AES_cfb128_encrypt(const unsigned char *in, unsigned char *out,
                         size_t length, const AES_KEY *key,
                         unsigned char *ivec, int *num, const int enc)
 {
@@ -26,7 +26,7 @@ void AES_cfb128_encrypt(const unsigned char *in, unsigned char *out,
 }
 
 /* N.B. This expects the input to be packed, MS bit first */
-void AES_cfb1_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl AES_cfb1_encrypt(const unsigned char *in, unsigned char *out,
                       size_t length, const AES_KEY *key,
                       unsigned char *ivec, int *num, const int enc)
 {
@@ -34,7 +34,7 @@ void AES_cfb1_encrypt(const unsigned char *in, unsigned char *out,
                             (block128_f) AES_encrypt);
 }
 
-void AES_cfb8_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl AES_cfb8_encrypt(const unsigned char *in, unsigned char *out,
                       size_t length, const AES_KEY *key,
                       unsigned char *ivec, int *num, const int enc)
 {
diff --git a/crypto/aes/aes_core.c b/crypto/aes/aes_core.c
index f1f11fd8de..8f7d611751 100644
--- a/crypto/aes/aes_core.c
+++ b/crypto/aes/aes_core.c
@@ -629,7 +629,7 @@ static const u32 rcon[] = {
 /**
  * Expand the cipher key into the encryption key schedule.
  */
-int AES_set_encrypt_key(const unsigned char *userKey, const int bits,
+int __cdecl AES_set_encrypt_key(const unsigned char *userKey, const int bits,
                         AES_KEY *key)
 {
 
@@ -731,7 +731,7 @@ int AES_set_encrypt_key(const unsigned char *userKey, const int bits,
 /**
  * Expand the cipher key into the decryption key schedule.
  */
-int AES_set_decrypt_key(const unsigned char *userKey, const int bits,
+int __cdecl AES_set_decrypt_key(const unsigned char *userKey, const int bits,
                         AES_KEY *key)
 {
 
@@ -784,7 +784,7 @@ int AES_set_decrypt_key(const unsigned char *userKey, const int bits,
  * Encrypt a single block
  * in and out can overlap
  */
-void AES_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl AES_encrypt(const unsigned char *in, unsigned char *out,
                  const AES_KEY *key) {
 
     const u32 *rk;
@@ -975,7 +975,7 @@ void AES_encrypt(const unsigned char *in, unsigned char *out,
  * Decrypt a single block
  * in and out can overlap
  */
-void AES_decrypt(const unsigned char *in, unsigned char *out,
+void __cdecl AES_decrypt(const unsigned char *in, unsigned char *out,
                  const AES_KEY *key)
 {
 
@@ -1208,7 +1208,7 @@ static const u32 rcon[] = {
 /**
  * Expand the cipher key into the encryption key schedule.
  */
-int AES_set_encrypt_key(const unsigned char *userKey, const int bits,
+int __cdecl AES_set_encrypt_key(const unsigned char *userKey, const int bits,
                         AES_KEY *key)
 {
     u32 *rk;
@@ -1309,7 +1309,7 @@ int AES_set_encrypt_key(const unsigned char *userKey, const int bits,
 /**
  * Expand the cipher key into the decryption key schedule.
  */
-int AES_set_decrypt_key(const unsigned char *userKey, const int bits,
+int __cdecl AES_set_decrypt_key(const unsigned char *userKey, const int bits,
                         AES_KEY *key)
 {
 
diff --git a/crypto/aes/aes_ecb.c b/crypto/aes/aes_ecb.c
index 29bfc1ad66..fa432af6d3 100644
--- a/crypto/aes/aes_ecb.c
+++ b/crypto/aes/aes_ecb.c
@@ -12,7 +12,7 @@
 #include <openssl/aes.h>
 #include "aes_locl.h"
 
-void AES_ecb_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl AES_ecb_encrypt(const unsigned char *in, unsigned char *out,
                      const AES_KEY *key, const int enc)
 {
 
diff --git a/crypto/aes/aes_ige.c b/crypto/aes/aes_ige.c
index 75f796cf3b..f46b21a191 100644
--- a/crypto/aes/aes_ige.c
+++ b/crypto/aes/aes_ige.c
@@ -34,7 +34,7 @@ typedef struct {
 
 /* N.B. The IV for this mode is _twice_ the block size */
 
-void AES_ige_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl AES_ige_encrypt(const unsigned char *in, unsigned char *out,
                      size_t length, const AES_KEY *key,
                      unsigned char *ivec, const int enc)
 {
@@ -166,7 +166,7 @@ void AES_ige_encrypt(const unsigned char *in, unsigned char *out,
 
 /* N.B. The IV for this mode is _four times_ the block size */
 
-void AES_bi_ige_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl AES_bi_ige_encrypt(const unsigned char *in, unsigned char *out,
                         size_t length, const AES_KEY *key,
                         const AES_KEY *key2, const unsigned char *ivec,
                         const int enc)
diff --git a/crypto/aes/aes_misc.c b/crypto/aes/aes_misc.c
index 7403c84f82..59c4c04e2f 100644
--- a/crypto/aes/aes_misc.c
+++ b/crypto/aes/aes_misc.c
@@ -11,7 +11,7 @@
 #include <openssl/aes.h>
 #include "aes_locl.h"
 
-const char *AES_options(void)
+const char * __cdecl AES_options(void)
 {
 #ifdef FULL_UNROLL
     return "aes(full)";
diff --git a/crypto/aes/aes_ofb.c b/crypto/aes/aes_ofb.c
index 215b53858e..8b0686d37d 100644
--- a/crypto/aes/aes_ofb.c
+++ b/crypto/aes/aes_ofb.c
@@ -10,7 +10,7 @@
 #include <openssl/aes.h>
 #include <openssl/modes.h>
 
-void AES_ofb128_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl AES_ofb128_encrypt(const unsigned char *in, unsigned char *out,
                         size_t length, const AES_KEY *key,
                         unsigned char *ivec, int *num)
 {
diff --git a/crypto/aes/aes_wrap.c b/crypto/aes/aes_wrap.c
index cae0b21229..d9932d89d0 100644
--- a/crypto/aes/aes_wrap.c
+++ b/crypto/aes/aes_wrap.c
@@ -11,14 +11,14 @@
 #include <openssl/aes.h>
 #include <openssl/modes.h>
 
-int AES_wrap_key(AES_KEY *key, const unsigned char *iv,
+int __cdecl AES_wrap_key(AES_KEY *key, const unsigned char *iv,
                  unsigned char *out,
                  const unsigned char *in, unsigned int inlen)
 {
     return CRYPTO_128_wrap(key, iv, out, in, inlen, (block128_f) AES_encrypt);
 }
 
-int AES_unwrap_key(AES_KEY *key, const unsigned char *iv,
+int __cdecl AES_unwrap_key(AES_KEY *key, const unsigned char *iv,
                    unsigned char *out,
                    const unsigned char *in, unsigned int inlen)
 {
diff --git a/crypto/aes/aes_x86core.c b/crypto/aes/aes_x86core.c
index 1b660d716d..f7b176169a 100644
--- a/crypto/aes/aes_x86core.c
+++ b/crypto/aes/aes_x86core.c
@@ -471,7 +471,7 @@ static const u32 rcon[] = {
 /**
  * Expand the cipher key into the encryption key schedule.
  */
-int AES_set_encrypt_key(const unsigned char *userKey, const int bits,
+int __cdecl AES_set_encrypt_key(const unsigned char *userKey, const int bits,
                         AES_KEY *key)
 {
 
@@ -573,7 +573,7 @@ int AES_set_encrypt_key(const unsigned char *userKey, const int bits,
 /**
  * Expand the cipher key into the decryption key schedule.
  */
-int AES_set_decrypt_key(const unsigned char *userKey, const int bits,
+int __cdecl AES_set_decrypt_key(const unsigned char *userKey, const int bits,
                         AES_KEY *key)
 {
 
@@ -655,7 +655,7 @@ int AES_set_decrypt_key(const unsigned char *userKey, const int bits,
  * Encrypt a single block
  * in and out can overlap
  */
-void AES_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl AES_encrypt(const unsigned char *in, unsigned char *out,
                  const AES_KEY *key)
 {
 
@@ -869,7 +869,7 @@ void AES_encrypt(const unsigned char *in, unsigned char *out,
  * Decrypt a single block
  * in and out can overlap
  */
-void AES_decrypt(const unsigned char *in, unsigned char *out,
+void __cdecl AES_decrypt(const unsigned char *in, unsigned char *out,
                  const AES_KEY *key)
 {
 
diff --git a/crypto/aria/aria.c b/crypto/aria/aria.c
index 293bcc72bd..b62cfb3e23 100644
--- a/crypto/aria/aria.c
+++ b/crypto/aria/aria.c
@@ -468,7 +468,7 @@ static const uint32_t X2[256] = {
         (Y) = (TMP2) ^ rotr32((TMP) ^ (TMP2), 16);  \
     } while(0)
 
-void aria_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl aria_encrypt(const unsigned char *in, unsigned char *out,
                   const ARIA_KEY *key)
 {
     register uint32_t reg0, reg1, reg2, reg3;
@@ -535,7 +535,7 @@ void aria_encrypt(const unsigned char *in, unsigned char *out,
     PUT_U32_BE(out, 3, reg3);
 }
 
-int aria_set_encrypt_key(const unsigned char *userKey, const int bits,
+int __cdecl aria_set_encrypt_key(const unsigned char *userKey, const int bits,
                          ARIA_KEY *key)
 {
     register uint32_t reg0, reg1, reg2, reg3;
@@ -667,7 +667,7 @@ int aria_set_encrypt_key(const unsigned char *userKey, const int bits,
     return 0;
 }
 
-int aria_set_decrypt_key(const unsigned char *userKey, const int bits,
+int __cdecl aria_set_decrypt_key(const unsigned char *userKey, const int bits,
                          ARIA_KEY *key)
 {
     ARIA_u128 *rk_head;
@@ -1106,7 +1106,7 @@ static void do_encrypt(unsigned char *o, const unsigned char *pin,
  * Encrypt a single block
  * in and out can overlap
  */
-void aria_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl aria_encrypt(const unsigned char *in, unsigned char *out,
                   const ARIA_KEY *key)
 {
     assert(in != NULL && out != NULL && key != NULL);
@@ -1119,7 +1119,7 @@ void aria_encrypt(const unsigned char *in, unsigned char *out,
  * We short circuit execution of the last two
  * or four rotations based on the key size.
  */
-int aria_set_encrypt_key(const unsigned char *userKey, const int bits,
+int __cdecl aria_set_encrypt_key(const unsigned char *userKey, const int bits,
                          ARIA_KEY *key)
 {
     const ARIA_u128 *ck1, *ck2, *ck3;
@@ -1192,7 +1192,7 @@ int aria_set_encrypt_key(const unsigned char *userKey, const int bits,
 /*
  * Expand the cipher key into the decryption key schedule.
  */
-int aria_set_decrypt_key(const unsigned char *userKey, const int bits,
+int __cdecl aria_set_decrypt_key(const unsigned char *userKey, const int bits,
                          ARIA_KEY *key)
 {
     ARIA_KEY ek;
diff --git a/crypto/armcap.c b/crypto/armcap.c
index 58e54f0da2..e7f3981a05 100644
--- a/crypto/armcap.c
+++ b/crypto/armcap.c
@@ -24,7 +24,7 @@ void OPENSSL_cpuid_setup(void)
 {
 }
 
-uint32_t OPENSSL_rdtsc(void)
+uint32_t __cdecl OPENSSL_rdtsc(void)
 {
     return 0;
 }
@@ -51,7 +51,7 @@ void _armv8_sha512_probe(void);
 # endif
 uint32_t _armv7_tick(void);
 
-uint32_t OPENSSL_rdtsc(void)
+uint32_t __cdecl OPENSSL_rdtsc(void)
 {
     if (OPENSSL_armcap_P & ARMV7_TICK)
         return _armv7_tick();
diff --git a/crypto/asn1/a_bitstr.c b/crypto/asn1/a_bitstr.c
index bffbd160a2..7f8e703c1a 100644
--- a/crypto/asn1/a_bitstr.c
+++ b/crypto/asn1/a_bitstr.c
@@ -13,7 +13,7 @@
 #include <openssl/asn1.h>
 #include "asn1_locl.h"
 
-int ASN1_BIT_STRING_set(ASN1_BIT_STRING *x, unsigned char *d, int len)
+int __cdecl ASN1_BIT_STRING_set(ASN1_BIT_STRING *x, unsigned char *d, int len)
 {
     return ASN1_STRING_set(x, d, len);
 }
@@ -143,7 +143,7 @@ ASN1_BIT_STRING *c2i_ASN1_BIT_STRING(ASN1_BIT_STRING **a,
 /*
  * These next 2 functions from Goetz Babin-Ebell.
  */
-int ASN1_BIT_STRING_set_bit(ASN1_BIT_STRING *a, int n, int value)
+int __cdecl ASN1_BIT_STRING_set_bit(ASN1_BIT_STRING *a, int n, int value)
 {
     int w, v, iv;
     unsigned char *c;
@@ -178,7 +178,7 @@ int ASN1_BIT_STRING_set_bit(ASN1_BIT_STRING *a, int n, int value)
     return 1;
 }
 
-int ASN1_BIT_STRING_get_bit(const ASN1_BIT_STRING *a, int n)
+int __cdecl ASN1_BIT_STRING_get_bit(const ASN1_BIT_STRING *a, int n)
 {
     int w, v;
 
@@ -195,7 +195,7 @@ int ASN1_BIT_STRING_get_bit(const ASN1_BIT_STRING *a, int n)
  * which is not specified in 'flags', 1 otherwise.
  * 'len' is the length of 'flags'.
  */
-int ASN1_BIT_STRING_check(const ASN1_BIT_STRING *a,
+int __cdecl ASN1_BIT_STRING_check(const ASN1_BIT_STRING *a,
                           const unsigned char *flags, int flags_len)
 {
     int i, ok;
diff --git a/crypto/asn1/a_d2i_fp.c b/crypto/asn1/a_d2i_fp.c
index a1a17901b8..15072e3787 100644
--- a/crypto/asn1/a_d2i_fp.c
+++ b/crypto/asn1/a_d2i_fp.c
@@ -18,7 +18,7 @@
 #ifndef NO_OLD_ASN1
 # ifndef OPENSSL_NO_STDIO
 
-void *ASN1_d2i_fp(void *(*xnew) (void), d2i_of_void *d2i, FILE *in, void **x)
+void * __cdecl ASN1_d2i_fp(void *(__cdecl *xnew) (void), d2i_of_void *d2i, FILE *in, void **x)
 {
     BIO *b;
     void *ret;
@@ -34,7 +34,7 @@ void *ASN1_d2i_fp(void *(*xnew) (void), d2i_of_void *d2i, FILE *in, void **x)
 }
 # endif
 
-void *ASN1_d2i_bio(void *(*xnew) (void), d2i_of_void *d2i, BIO *in, void **x)
+void * __cdecl ASN1_d2i_bio(void * (__cdecl *xnew) (void), d2i_of_void *d2i, BIO *in, void **x)
 {
     BUF_MEM *b = NULL;
     const unsigned char *p;
@@ -54,7 +54,7 @@ void *ASN1_d2i_bio(void *(*xnew) (void), d2i_of_void *d2i, BIO *in, void **x)
 
 #endif
 
-void *ASN1_item_d2i_bio(const ASN1_ITEM *it, BIO *in, void *x)
+void * __cdecl ASN1_item_d2i_bio(const ASN1_ITEM *it, BIO *in, void *x)
 {
     BUF_MEM *b = NULL;
     const unsigned char *p;
@@ -73,7 +73,7 @@ void *ASN1_item_d2i_bio(const ASN1_ITEM *it, BIO *in, void *x)
 }
 
 #ifndef OPENSSL_NO_STDIO
-void *ASN1_item_d2i_fp(const ASN1_ITEM *it, FILE *in, void *x)
+void * __cdecl ASN1_item_d2i_fp(const ASN1_ITEM *it, FILE *in, void *x)
 {
     BIO *b;
     char *ret;
diff --git a/crypto/asn1/a_digest.c b/crypto/asn1/a_digest.c
index cc3532ea7d..f2cd622ef0 100644
--- a/crypto/asn1/a_digest.c
+++ b/crypto/asn1/a_digest.c
@@ -20,7 +20,7 @@
 
 #ifndef NO_ASN1_OLD
 
-int ASN1_digest(i2d_of_void *i2d, const EVP_MD *type, char *data,
+int __cdecl ASN1_digest(i2d_of_void *i2d, const EVP_MD *type, char *data,
                 unsigned char *md, unsigned int *len)
 {
     int inl;
@@ -48,7 +48,7 @@ int ASN1_digest(i2d_of_void *i2d, const EVP_MD *type, char *data,
 
 #endif
 
-int ASN1_item_digest(const ASN1_ITEM *it, const EVP_MD *type, void *asn,
+int __cdecl ASN1_item_digest(const ASN1_ITEM *it, const EVP_MD *type, void *asn,
                      unsigned char *md, unsigned int *len)
 {
     int i;
diff --git a/crypto/asn1/a_dup.c b/crypto/asn1/a_dup.c
index 50af6b0006..a9ae2ba142 100644
--- a/crypto/asn1/a_dup.c
+++ b/crypto/asn1/a_dup.c
@@ -13,7 +13,7 @@
 
 #ifndef NO_OLD_ASN1
 
-void *ASN1_dup(i2d_of_void *i2d, d2i_of_void *d2i, void *x)
+void * __cdecl ASN1_dup(i2d_of_void *i2d, d2i_of_void *d2i, void *x)
 {
     unsigned char *b, *p;
     const unsigned char *p2;
@@ -46,7 +46,7 @@ void *ASN1_dup(i2d_of_void *i2d, d2i_of_void *d2i, void *x)
  * decode.
  */
 
-void *ASN1_item_dup(const ASN1_ITEM *it, void *x)
+void * __cdecl ASN1_item_dup(const ASN1_ITEM *it, void *x)
 {
     unsigned char *b = NULL;
     const unsigned char *p;
diff --git a/crypto/asn1/a_gentm.c b/crypto/asn1/a_gentm.c
index d3878d6e57..bd1ea790e2 100644
--- a/crypto/asn1/a_gentm.c
+++ b/crypto/asn1/a_gentm.c
@@ -26,12 +26,12 @@ int asn1_generalizedtime_to_tm(struct tm *tm, const ASN1_GENERALIZEDTIME *d)
     return asn1_time_to_tm(tm, d);
 }
 
-int ASN1_GENERALIZEDTIME_check(const ASN1_GENERALIZEDTIME *d)
+int __cdecl ASN1_GENERALIZEDTIME_check(const ASN1_GENERALIZEDTIME *d)
 {
     return asn1_generalizedtime_to_tm(NULL, d);
 }
 
-int ASN1_GENERALIZEDTIME_set_string(ASN1_GENERALIZEDTIME *s, const char *str)
+int __cdecl ASN1_GENERALIZEDTIME_set_string(ASN1_GENERALIZEDTIME *s, const char *str)
 {
     ASN1_GENERALIZEDTIME t;
 
@@ -49,13 +49,13 @@ int ASN1_GENERALIZEDTIME_set_string(ASN1_GENERALIZEDTIME *s, const char *str)
     return 1;
 }
 
-ASN1_GENERALIZEDTIME *ASN1_GENERALIZEDTIME_set(ASN1_GENERALIZEDTIME *s,
+ASN1_GENERALIZEDTIME * __cdecl ASN1_GENERALIZEDTIME_set(ASN1_GENERALIZEDTIME *s,
                                                time_t t)
 {
     return ASN1_GENERALIZEDTIME_adj(s, t, 0, 0);
 }
 
-ASN1_GENERALIZEDTIME *ASN1_GENERALIZEDTIME_adj(ASN1_GENERALIZEDTIME *s,
+ASN1_GENERALIZEDTIME * __cdecl ASN1_GENERALIZEDTIME_adj(ASN1_GENERALIZEDTIME *s,
                                                time_t t, int offset_day,
                                                long offset_sec)
 {
@@ -74,7 +74,7 @@ ASN1_GENERALIZEDTIME *ASN1_GENERALIZEDTIME_adj(ASN1_GENERALIZEDTIME *s,
     return asn1_time_from_tm(s, ts, V_ASN1_GENERALIZEDTIME);
 }
 
-int ASN1_GENERALIZEDTIME_print(BIO *bp, const ASN1_GENERALIZEDTIME *tm)
+int __cdecl ASN1_GENERALIZEDTIME_print(BIO *bp, const ASN1_GENERALIZEDTIME *tm)
 {
     if (tm->type != V_ASN1_GENERALIZEDTIME)
         return 0;
diff --git a/crypto/asn1/a_i2d_fp.c b/crypto/asn1/a_i2d_fp.c
index 980c65a25d..fe553ffe6c 100644
--- a/crypto/asn1/a_i2d_fp.c
+++ b/crypto/asn1/a_i2d_fp.c
@@ -15,7 +15,7 @@
 #ifndef NO_OLD_ASN1
 
 # ifndef OPENSSL_NO_STDIO
-int ASN1_i2d_fp(i2d_of_void *i2d, FILE *out, void *x)
+int __cdecl ASN1_i2d_fp(i2d_of_void *i2d, FILE *out, void *x)
 {
     BIO *b;
     int ret;
@@ -31,7 +31,7 @@ int ASN1_i2d_fp(i2d_of_void *i2d, FILE *out, void *x)
 }
 # endif
 
-int ASN1_i2d_bio(i2d_of_void *i2d, BIO *out, unsigned char *x)
+int __cdecl ASN1_i2d_bio(i2d_of_void *i2d, BIO *out, unsigned char *x)
 {
     char *b;
     unsigned char *p;
@@ -68,7 +68,7 @@ int ASN1_i2d_bio(i2d_of_void *i2d, BIO *out, unsigned char *x)
 #endif
 
 #ifndef OPENSSL_NO_STDIO
-int ASN1_item_i2d_fp(const ASN1_ITEM *it, FILE *out, void *x)
+int __cdecl ASN1_item_i2d_fp(const ASN1_ITEM *it, FILE *out, void *x)
 {
     BIO *b;
     int ret;
@@ -84,7 +84,7 @@ int ASN1_item_i2d_fp(const ASN1_ITEM *it, FILE *out, void *x)
 }
 #endif
 
-int ASN1_item_i2d_bio(const ASN1_ITEM *it, BIO *out, void *x)
+int __cdecl ASN1_item_i2d_bio(const ASN1_ITEM *it, BIO *out, void *x)
 {
     unsigned char *b = NULL;
     int i, j = 0, n, ret = 1;
diff --git a/crypto/asn1/a_int.c b/crypto/asn1/a_int.c
index 70a45cb3cc..4386180ac0 100644
--- a/crypto/asn1/a_int.c
+++ b/crypto/asn1/a_int.c
@@ -15,12 +15,12 @@
 #include <openssl/bn.h>
 #include "asn1_locl.h"
 
-ASN1_INTEGER *ASN1_INTEGER_dup(const ASN1_INTEGER *x)
+ASN1_INTEGER * __cdecl ASN1_INTEGER_dup(const ASN1_INTEGER *x)
 {
     return ASN1_STRING_dup(x);
 }
 
-int ASN1_INTEGER_cmp(const ASN1_INTEGER *x, const ASN1_INTEGER *y)
+int __cdecl ASN1_INTEGER_cmp(const ASN1_INTEGER *x, const ASN1_INTEGER *y)
 {
     int neg, ret;
     /* Compare signs */
@@ -384,7 +384,7 @@ static int asn1_string_set_uint64(ASN1_STRING *a, uint64_t r, int itype)
  * set as negative (it doesn't add a padding zero).
  */
 
-ASN1_INTEGER *d2i_ASN1_UINTEGER(ASN1_INTEGER **a, const unsigned char **pp,
+ASN1_INTEGER * __cdecl d2i_ASN1_UINTEGER(ASN1_INTEGER **a, const unsigned char **pp,
                                 long length)
 {
     ASN1_INTEGER *ret = NULL;
@@ -510,32 +510,32 @@ static BIGNUM *asn1_string_to_bn(const ASN1_INTEGER *ai, BIGNUM *bn,
     return ret;
 }
 
-int ASN1_INTEGER_get_int64(int64_t *pr, const ASN1_INTEGER *a)
+int __cdecl ASN1_INTEGER_get_int64(int64_t *pr, const ASN1_INTEGER *a)
 {
     return asn1_string_get_int64(pr, a, V_ASN1_INTEGER);
 }
 
-int ASN1_INTEGER_set_int64(ASN1_INTEGER *a, int64_t r)
+int __cdecl ASN1_INTEGER_set_int64(ASN1_INTEGER *a, int64_t r)
 {
     return asn1_string_set_int64(a, r, V_ASN1_INTEGER);
 }
 
-int ASN1_INTEGER_get_uint64(uint64_t *pr, const ASN1_INTEGER *a)
+int __cdecl ASN1_INTEGER_get_uint64(uint64_t *pr, const ASN1_INTEGER *a)
 {
     return asn1_string_get_uint64(pr, a, V_ASN1_INTEGER);
 }
 
-int ASN1_INTEGER_set_uint64(ASN1_INTEGER *a, uint64_t r)
+int __cdecl ASN1_INTEGER_set_uint64(ASN1_INTEGER *a, uint64_t r)
 {
     return asn1_string_set_uint64(a, r, V_ASN1_INTEGER);
 }
 
-int ASN1_INTEGER_set(ASN1_INTEGER *a, long v)
+int __cdecl ASN1_INTEGER_set(ASN1_INTEGER *a, long v)
 {
     return ASN1_INTEGER_set_int64(a, v);
 }
 
-long ASN1_INTEGER_get(const ASN1_INTEGER *a)
+long __cdecl ASN1_INTEGER_get(const ASN1_INTEGER *a)
 {
     int i;
     int64_t r;
@@ -549,32 +549,32 @@ long ASN1_INTEGER_get(const ASN1_INTEGER *a)
     return (long)r;
 }
 
-ASN1_INTEGER *BN_to_ASN1_INTEGER(const BIGNUM *bn, ASN1_INTEGER *ai)
+ASN1_INTEGER * __cdecl BN_to_ASN1_INTEGER(const BIGNUM *bn, ASN1_INTEGER *ai)
 {
     return bn_to_asn1_string(bn, ai, V_ASN1_INTEGER);
 }
 
-BIGNUM *ASN1_INTEGER_to_BN(const ASN1_INTEGER *ai, BIGNUM *bn)
+BIGNUM * __cdecl ASN1_INTEGER_to_BN(const ASN1_INTEGER *ai, BIGNUM *bn)
 {
     return asn1_string_to_bn(ai, bn, V_ASN1_INTEGER);
 }
 
-int ASN1_ENUMERATED_get_int64(int64_t *pr, const ASN1_ENUMERATED *a)
+int __cdecl ASN1_ENUMERATED_get_int64(int64_t *pr, const ASN1_ENUMERATED *a)
 {
     return asn1_string_get_int64(pr, a, V_ASN1_ENUMERATED);
 }
 
-int ASN1_ENUMERATED_set_int64(ASN1_ENUMERATED *a, int64_t r)
+int __cdecl ASN1_ENUMERATED_set_int64(ASN1_ENUMERATED *a, int64_t r)
 {
     return asn1_string_set_int64(a, r, V_ASN1_ENUMERATED);
 }
 
-int ASN1_ENUMERATED_set(ASN1_ENUMERATED *a, long v)
+int __cdecl ASN1_ENUMERATED_set(ASN1_ENUMERATED *a, long v)
 {
     return ASN1_ENUMERATED_set_int64(a, v);
 }
 
-long ASN1_ENUMERATED_get(const ASN1_ENUMERATED *a)
+long __cdecl ASN1_ENUMERATED_get(const ASN1_ENUMERATED *a)
 {
     int i;
     int64_t r;
@@ -592,12 +592,12 @@ long ASN1_ENUMERATED_get(const ASN1_ENUMERATED *a)
     return (long)r;
 }
 
-ASN1_ENUMERATED *BN_to_ASN1_ENUMERATED(const BIGNUM *bn, ASN1_ENUMERATED *ai)
+ASN1_ENUMERATED * __cdecl BN_to_ASN1_ENUMERATED(const BIGNUM *bn, ASN1_ENUMERATED *ai)
 {
     return bn_to_asn1_string(bn, ai, V_ASN1_ENUMERATED);
 }
 
-BIGNUM *ASN1_ENUMERATED_to_BN(const ASN1_ENUMERATED *ai, BIGNUM *bn)
+BIGNUM * __cdecl ASN1_ENUMERATED_to_BN(const ASN1_ENUMERATED *ai, BIGNUM *bn)
 {
     return asn1_string_to_bn(ai, bn, V_ASN1_ENUMERATED);
 }
diff --git a/crypto/asn1/a_mbstr.c b/crypto/asn1/a_mbstr.c
index 949fe6c161..5023259261 100644
--- a/crypto/asn1/a_mbstr.c
+++ b/crypto/asn1/a_mbstr.c
@@ -32,13 +32,13 @@ static int cpy_utf8(unsigned long value, void *arg);
  * size limits too.
  */
 
-int ASN1_mbstring_copy(ASN1_STRING **out, const unsigned char *in, int len,
+int __cdecl ASN1_mbstring_copy(ASN1_STRING **out, const unsigned char *in, int len,
                        int inform, unsigned long mask)
 {
     return ASN1_mbstring_ncopy(out, in, len, inform, mask, 0, 0);
 }
 
-int ASN1_mbstring_ncopy(ASN1_STRING **out, const unsigned char *in, int len,
+int __cdecl ASN1_mbstring_ncopy(ASN1_STRING **out, const unsigned char *in, int len,
                         int inform, unsigned long mask,
                         long minsize, long maxsize)
 {
diff --git a/crypto/asn1/a_object.c b/crypto/asn1/a_object.c
index 5e1424a806..54f8e51525 100644
--- a/crypto/asn1/a_object.c
+++ b/crypto/asn1/a_object.c
@@ -18,7 +18,7 @@
 #include "internal/asn1_int.h"
 #include "asn1_locl.h"
 
-int i2d_ASN1_OBJECT(const ASN1_OBJECT *a, unsigned char **pp)
+int __cdecl i2d_ASN1_OBJECT(const ASN1_OBJECT *a, unsigned char **pp)
 {
     unsigned char *p, *allocated = NULL;
     int objsize;
@@ -50,7 +50,7 @@ int i2d_ASN1_OBJECT(const ASN1_OBJECT *a, unsigned char **pp)
     return objsize;
 }
 
-int a2d_ASN1_OBJECT(unsigned char *out, int olen, const char *buf, int num)
+int __cdecl a2d_ASN1_OBJECT(unsigned char *out, int olen, const char *buf, int num)
 {
     int i, first, len = 0, c, use_bn;
     char ftmp[24], *tmp = ftmp;
@@ -177,12 +177,12 @@ int a2d_ASN1_OBJECT(unsigned char *out, int olen, const char *buf, int num)
     return 0;
 }
 
-int i2t_ASN1_OBJECT(char *buf, int buf_len, const ASN1_OBJECT *a)
+int __cdecl i2t_ASN1_OBJECT(char *buf, int buf_len, const ASN1_OBJECT *a)
 {
     return OBJ_obj2txt(buf, buf_len, a, 0);
 }
 
-int i2a_ASN1_OBJECT(BIO *bp, const ASN1_OBJECT *a)
+int __cdecl i2a_ASN1_OBJECT(BIO *bp, const ASN1_OBJECT *a)
 {
     char buf[80], *p = buf;
     int i;
@@ -208,7 +208,7 @@ int i2a_ASN1_OBJECT(BIO *bp, const ASN1_OBJECT *a)
     return i;
 }
 
-ASN1_OBJECT *d2i_ASN1_OBJECT(ASN1_OBJECT **a, const unsigned char **pp,
+ASN1_OBJECT * __cdecl d2i_ASN1_OBJECT(ASN1_OBJECT **a, const unsigned char **pp,
                              long length)
 {
     const unsigned char *p;
@@ -332,7 +332,7 @@ ASN1_OBJECT *c2i_ASN1_OBJECT(ASN1_OBJECT **a, const unsigned char **pp,
     return NULL;
 }
 
-ASN1_OBJECT *ASN1_OBJECT_new(void)
+ASN1_OBJECT * __cdecl ASN1_OBJECT_new(void)
 {
     ASN1_OBJECT *ret;
 
@@ -345,7 +345,7 @@ ASN1_OBJECT *ASN1_OBJECT_new(void)
     return ret;
 }
 
-void ASN1_OBJECT_free(ASN1_OBJECT *a)
+void __cdecl ASN1_OBJECT_free(ASN1_OBJECT *a)
 {
     if (a == NULL)
         return;
@@ -367,7 +367,7 @@ void ASN1_OBJECT_free(ASN1_OBJECT *a)
         OPENSSL_free(a);
 }
 
-ASN1_OBJECT *ASN1_OBJECT_create(int nid, unsigned char *data, int len,
+ASN1_OBJECT * __cdecl ASN1_OBJECT_create(int nid, unsigned char *data, int len,
                                 const char *sn, const char *ln)
 {
     ASN1_OBJECT o;
diff --git a/crypto/asn1/a_octet.c b/crypto/asn1/a_octet.c
index 2e1205caea..3ee70e8745 100644
--- a/crypto/asn1/a_octet.c
+++ b/crypto/asn1/a_octet.c
@@ -11,18 +11,18 @@
 #include "internal/cryptlib.h"
 #include <openssl/asn1.h>
 
-ASN1_OCTET_STRING *ASN1_OCTET_STRING_dup(const ASN1_OCTET_STRING *x)
+ASN1_OCTET_STRING * __cdecl ASN1_OCTET_STRING_dup(const ASN1_OCTET_STRING *x)
 {
     return ASN1_STRING_dup(x);
 }
 
-int ASN1_OCTET_STRING_cmp(const ASN1_OCTET_STRING *a,
+int __cdecl ASN1_OCTET_STRING_cmp(const ASN1_OCTET_STRING *a,
                           const ASN1_OCTET_STRING *b)
 {
     return ASN1_STRING_cmp(a, b);
 }
 
-int ASN1_OCTET_STRING_set(ASN1_OCTET_STRING *x, const unsigned char *d,
+int __cdecl ASN1_OCTET_STRING_set(ASN1_OCTET_STRING *x, const unsigned char *d,
                           int len)
 {
     return ASN1_STRING_set(x, d, len);
diff --git a/crypto/asn1/a_print.c b/crypto/asn1/a_print.c
index 8a373d9da9..f25605a0a3 100644
--- a/crypto/asn1/a_print.c
+++ b/crypto/asn1/a_print.c
@@ -12,7 +12,7 @@
 #include "internal/cryptlib.h"
 #include <openssl/asn1.h>
 
-int ASN1_PRINTABLE_type(const unsigned char *s, int len)
+int __cdecl ASN1_PRINTABLE_type(const unsigned char *s, int len)
 {
     int c;
     int ia5 = 0;
@@ -37,7 +37,7 @@ int ASN1_PRINTABLE_type(const unsigned char *s, int len)
     return V_ASN1_PRINTABLESTRING;
 }
 
-int ASN1_UNIVERSALSTRING_to_string(ASN1_UNIVERSALSTRING *s)
+int __cdecl ASN1_UNIVERSALSTRING_to_string(ASN1_UNIVERSALSTRING *s)
 {
     int i;
     unsigned char *p;
@@ -65,7 +65,7 @@ int ASN1_UNIVERSALSTRING_to_string(ASN1_UNIVERSALSTRING *s)
     return 1;
 }
 
-int ASN1_STRING_print(BIO *bp, const ASN1_STRING *v)
+int __cdecl ASN1_STRING_print(BIO *bp, const ASN1_STRING *v)
 {
     int i, n;
     char buf[80];
diff --git a/crypto/asn1/a_sign.c b/crypto/asn1/a_sign.c
index 146fdb9626..339b00e9d2 100644
--- a/crypto/asn1/a_sign.c
+++ b/crypto/asn1/a_sign.c
@@ -23,7 +23,7 @@
 
 #ifndef NO_ASN1_OLD
 
-int ASN1_sign(i2d_of_void *i2d, X509_ALGOR *algor1, X509_ALGOR *algor2,
+int __cdecl ASN1_sign(i2d_of_void *i2d, X509_ALGOR *algor1, X509_ALGOR *algor2,
               ASN1_BIT_STRING *signature, char *data, EVP_PKEY *pkey,
               const EVP_MD *type)
 {
@@ -114,7 +114,7 @@ int ASN1_sign(i2d_of_void *i2d, X509_ALGOR *algor1, X509_ALGOR *algor2,
 
 #endif
 
-int ASN1_item_sign(const ASN1_ITEM *it, X509_ALGOR *algor1,
+int __cdecl ASN1_item_sign(const ASN1_ITEM *it, X509_ALGOR *algor1,
                    X509_ALGOR *algor2, ASN1_BIT_STRING *signature, void *asn,
                    EVP_PKEY *pkey, const EVP_MD *type)
 {
@@ -136,7 +136,7 @@ int ASN1_item_sign(const ASN1_ITEM *it, X509_ALGOR *algor1,
     return rv;
 }
 
-int ASN1_item_sign_ctx(const ASN1_ITEM *it,
+int __cdecl ASN1_item_sign_ctx(const ASN1_ITEM *it,
                        X509_ALGOR *algor1, X509_ALGOR *algor2,
                        ASN1_BIT_STRING *signature, void *asn, EVP_MD_CTX *ctx)
 {
diff --git a/crypto/asn1/a_strex.c b/crypto/asn1/a_strex.c
index ea4dd1c5b1..15abe3c86d 100644
--- a/crypto/asn1/a_strex.c
+++ b/crypto/asn1/a_strex.c
@@ -557,7 +557,7 @@ static int do_name_ex(char_io *io_ch, void *arg, const X509_NAME *n,
 
 /* Wrappers round the main functions */
 
-int X509_NAME_print_ex(BIO *out, const X509_NAME *nm, int indent,
+int __cdecl X509_NAME_print_ex(BIO *out, const X509_NAME *nm, int indent,
                        unsigned long flags)
 {
     if (flags == XN_FLAG_COMPAT)
@@ -566,7 +566,7 @@ int X509_NAME_print_ex(BIO *out, const X509_NAME *nm, int indent,
 }
 
 #ifndef OPENSSL_NO_STDIO
-int X509_NAME_print_ex_fp(FILE *fp, const X509_NAME *nm, int indent,
+int __cdecl X509_NAME_print_ex_fp(FILE *fp, const X509_NAME *nm, int indent,
                           unsigned long flags)
 {
     if (flags == XN_FLAG_COMPAT) {
@@ -583,13 +583,13 @@ int X509_NAME_print_ex_fp(FILE *fp, const X509_NAME *nm, int indent,
 }
 #endif
 
-int ASN1_STRING_print_ex(BIO *out, const ASN1_STRING *str, unsigned long flags)
+int __cdecl ASN1_STRING_print_ex(BIO *out, const ASN1_STRING *str, unsigned long flags)
 {
     return do_print_ex(send_bio_chars, out, flags, str);
 }
 
 #ifndef OPENSSL_NO_STDIO
-int ASN1_STRING_print_ex_fp(FILE *fp, const ASN1_STRING *str, unsigned long flags)
+int __cdecl ASN1_STRING_print_ex_fp(FILE *fp, const ASN1_STRING *str, unsigned long flags)
 {
     return do_print_ex(send_fp_chars, fp, flags, str);
 }
@@ -600,7 +600,7 @@ int ASN1_STRING_print_ex_fp(FILE *fp, const ASN1_STRING *str, unsigned long flag
  * in output string or a negative error code
  */
 
-int ASN1_STRING_to_UTF8(unsigned char **out, const ASN1_STRING *in)
+int __cdecl ASN1_STRING_to_UTF8(unsigned char **out, const ASN1_STRING *in)
 {
     ASN1_STRING stmp, *str = &stmp;
     int mbflag, type, ret;
diff --git a/crypto/asn1/a_strnid.c b/crypto/asn1/a_strnid.c
index f19a9de647..712b31a65f 100644
--- a/crypto/asn1/a_strnid.c
+++ b/crypto/asn1/a_strnid.c
@@ -13,8 +13,8 @@
 #include <openssl/objects.h>
 
 static STACK_OF(ASN1_STRING_TABLE) *stable = NULL;
-static void st_free(ASN1_STRING_TABLE *tbl);
-static int sk_table_cmp(const ASN1_STRING_TABLE *const *a,
+static void __cdecl st_free(ASN1_STRING_TABLE *tbl);
+static int __cdecl sk_table_cmp(const ASN1_STRING_TABLE *const *a,
                         const ASN1_STRING_TABLE *const *b);
 
 /*
@@ -25,12 +25,12 @@ static int sk_table_cmp(const ASN1_STRING_TABLE *const *a,
 
 static unsigned long global_mask = B_ASN1_UTF8STRING;
 
-void ASN1_STRING_set_default_mask(unsigned long mask)
+void __cdecl ASN1_STRING_set_default_mask(unsigned long mask)
 {
     global_mask = mask;
 }
 
-unsigned long ASN1_STRING_get_default_mask(void)
+unsigned long __cdecl ASN1_STRING_get_default_mask(void)
 {
     return global_mask;
 }
@@ -45,7 +45,7 @@ unsigned long ASN1_STRING_get_default_mask(void)
  * default:   the default value, Printable, T61, BMP.
  */
 
-int ASN1_STRING_set_default_mask_asc(const char *p)
+int __cdecl ASN1_STRING_set_default_mask_asc(const char *p)
 {
     unsigned long mask;
     char *end;
@@ -76,7 +76,7 @@ int ASN1_STRING_set_default_mask_asc(const char *p)
  * a corresponding OID. For example certificates and certificate requests.
  */
 
-ASN1_STRING *ASN1_STRING_set_by_NID(ASN1_STRING **out,
+ASN1_STRING * __cdecl ASN1_STRING_set_by_NID(ASN1_STRING **out,
                                     const unsigned char *in, int inlen,
                                     int inform, int nid)
 {
@@ -109,7 +109,7 @@ ASN1_STRING *ASN1_STRING_set_by_NID(ASN1_STRING **out,
 
 #include "tbl_standard.h"
 
-static int sk_table_cmp(const ASN1_STRING_TABLE *const *a,
+static int __cdecl sk_table_cmp(const ASN1_STRING_TABLE *const *a,
                         const ASN1_STRING_TABLE *const *b)
 {
     return (*a)->nid - (*b)->nid;
@@ -117,14 +117,14 @@ static int sk_table_cmp(const ASN1_STRING_TABLE *const *a,
 
 DECLARE_OBJ_BSEARCH_CMP_FN(ASN1_STRING_TABLE, ASN1_STRING_TABLE, table);
 
-static int table_cmp(const ASN1_STRING_TABLE *a, const ASN1_STRING_TABLE *b)
+static int __cdecl table_cmp(const ASN1_STRING_TABLE *a, const ASN1_STRING_TABLE *b)
 {
     return a->nid - b->nid;
 }
 
 IMPLEMENT_OBJ_BSEARCH_CMP_FN(ASN1_STRING_TABLE, ASN1_STRING_TABLE, table);
 
-ASN1_STRING_TABLE *ASN1_STRING_TABLE_get(int nid)
+ASN1_STRING_TABLE * __cdecl ASN1_STRING_TABLE_get(int nid)
 {
     int idx;
     ASN1_STRING_TABLE fnd;
@@ -179,7 +179,7 @@ static ASN1_STRING_TABLE *stable_get(int nid)
     return rv;
 }
 
-int ASN1_STRING_TABLE_add(int nid,
+int __cdecl ASN1_STRING_TABLE_add(int nid,
                           long minsize, long maxsize, unsigned long mask,
                           unsigned long flags)
 {
@@ -201,7 +201,7 @@ int ASN1_STRING_TABLE_add(int nid,
     return 1;
 }
 
-void ASN1_STRING_TABLE_cleanup(void)
+void __cdecl ASN1_STRING_TABLE_cleanup(void)
 {
     STACK_OF(ASN1_STRING_TABLE) *tmp;
 
@@ -212,7 +212,7 @@ void ASN1_STRING_TABLE_cleanup(void)
     sk_ASN1_STRING_TABLE_pop_free(tmp, st_free);
 }
 
-static void st_free(ASN1_STRING_TABLE *tbl)
+static void __cdecl st_free(ASN1_STRING_TABLE *tbl)
 {
     if (tbl->flags & STABLE_FLAGS_MALLOC)
         OPENSSL_free(tbl);
diff --git a/crypto/asn1/a_time.c b/crypto/asn1/a_time.c
index c36dd95001..bca171433a 100644
--- a/crypto/asn1/a_time.c
+++ b/crypto/asn1/a_time.c
@@ -314,12 +314,12 @@ ASN1_TIME *asn1_time_from_tm(ASN1_TIME *s, struct tm *ts, int type)
     return NULL;
 }
 
-ASN1_TIME *ASN1_TIME_set(ASN1_TIME *s, time_t t)
+ASN1_TIME * __cdecl ASN1_TIME_set(ASN1_TIME *s, time_t t)
 {
     return ASN1_TIME_adj(s, t, 0, 0);
 }
 
-ASN1_TIME *ASN1_TIME_adj(ASN1_TIME *s, time_t t,
+ASN1_TIME * __cdecl ASN1_TIME_adj(ASN1_TIME *s, time_t t,
                          int offset_day, long offset_sec)
 {
     struct tm *ts;
@@ -337,7 +337,7 @@ ASN1_TIME *ASN1_TIME_adj(ASN1_TIME *s, time_t t,
     return asn1_time_from_tm(s, ts, V_ASN1_UNDEF);
 }
 
-int ASN1_TIME_check(const ASN1_TIME *t)
+int __cdecl ASN1_TIME_check(const ASN1_TIME *t)
 {
     if (t->type == V_ASN1_GENERALIZEDTIME)
         return ASN1_GENERALIZEDTIME_check(t);
@@ -347,7 +347,7 @@ int ASN1_TIME_check(const ASN1_TIME *t)
 }
 
 /* Convert an ASN1_TIME structure to GeneralizedTime */
-ASN1_GENERALIZEDTIME *ASN1_TIME_to_generalizedtime(const ASN1_TIME *t,
+ASN1_GENERALIZEDTIME * __cdecl ASN1_TIME_to_generalizedtime(const ASN1_TIME *t,
                                                    ASN1_GENERALIZEDTIME **out)
 {
     ASN1_GENERALIZEDTIME *ret = NULL;
@@ -367,7 +367,7 @@ ASN1_GENERALIZEDTIME *ASN1_TIME_to_generalizedtime(const ASN1_TIME *t,
     return ret;
 }
 
-int ASN1_TIME_set_string(ASN1_TIME *s, const char *str)
+int __cdecl ASN1_TIME_set_string(ASN1_TIME *s, const char *str)
 {
     /* Try UTC, if that fails, try GENERALIZED */
     if (ASN1_UTCTIME_set_string(s, str))
@@ -375,7 +375,7 @@ int ASN1_TIME_set_string(ASN1_TIME *s, const char *str)
     return ASN1_GENERALIZEDTIME_set_string(s, str);
 }
 
-int ASN1_TIME_set_string_X509(ASN1_TIME *s, const char *str)
+int __cdecl ASN1_TIME_set_string_X509(ASN1_TIME *s, const char *str)
 {
     ASN1_TIME t;
     struct tm tm;
@@ -434,7 +434,7 @@ out:
     return rv;
 }
 
-int ASN1_TIME_to_tm(const ASN1_TIME *s, struct tm *tm)
+int __cdecl ASN1_TIME_to_tm(const ASN1_TIME *s, struct tm *tm)
 {
     if (s == NULL) {
         time_t now_t;
@@ -449,7 +449,7 @@ int ASN1_TIME_to_tm(const ASN1_TIME *s, struct tm *tm)
     return asn1_time_to_tm(tm, s);
 }
 
-int ASN1_TIME_diff(int *pday, int *psec,
+int __cdecl ASN1_TIME_diff(int *pday, int *psec,
                    const ASN1_TIME *from, const ASN1_TIME *to)
 {
     struct tm tm_from, tm_to;
@@ -466,7 +466,7 @@ static const char _asn1_mon[12][4] = {
     "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"
 };
 
-int ASN1_TIME_print(BIO *bp, const ASN1_TIME *tm)
+int __cdecl ASN1_TIME_print(BIO *bp, const ASN1_TIME *tm)
 {
     char *v;
     int gmt = 0, l;
@@ -513,7 +513,7 @@ int ASN1_TIME_print(BIO *bp, const ASN1_TIME *tm)
     return 0;
 }
 
-int ASN1_TIME_cmp_time_t(const ASN1_TIME *s, time_t t)
+int __cdecl ASN1_TIME_cmp_time_t(const ASN1_TIME *s, time_t t)
 {
     struct tm stm, ttm;
     int day, sec;
@@ -534,7 +534,7 @@ int ASN1_TIME_cmp_time_t(const ASN1_TIME *s, time_t t)
     return 0;
 }
 
-int ASN1_TIME_normalize(ASN1_TIME *t)
+int __cdecl ASN1_TIME_normalize(ASN1_TIME *t)
 {
     struct tm tm;
 
@@ -544,7 +544,7 @@ int ASN1_TIME_normalize(ASN1_TIME *t)
     return asn1_time_from_tm(t, &tm, V_ASN1_UNDEF) != NULL;
 }
 
-int ASN1_TIME_compare(const ASN1_TIME *a, const ASN1_TIME *b)
+int __cdecl ASN1_TIME_compare(const ASN1_TIME *a, const ASN1_TIME *b)
 {
     int day, sec;
 
diff --git a/crypto/asn1/a_type.c b/crypto/asn1/a_type.c
index 732328e050..51f4490837 100644
--- a/crypto/asn1/a_type.c
+++ b/crypto/asn1/a_type.c
@@ -13,7 +13,7 @@
 #include <openssl/objects.h>
 #include "asn1_locl.h"
 
-int ASN1_TYPE_get(const ASN1_TYPE *a)
+int __cdecl ASN1_TYPE_get(const ASN1_TYPE *a)
 {
     if (a->type == V_ASN1_BOOLEAN
             || a->type == V_ASN1_NULL
@@ -23,7 +23,7 @@ int ASN1_TYPE_get(const ASN1_TYPE *a)
         return 0;
 }
 
-void ASN1_TYPE_set(ASN1_TYPE *a, int type, void *value)
+void __cdecl ASN1_TYPE_set(ASN1_TYPE *a, int type, void *value)
 {
     if (a->type != V_ASN1_BOOLEAN
             && a->type != V_ASN1_NULL
@@ -38,7 +38,7 @@ void ASN1_TYPE_set(ASN1_TYPE *a, int type, void *value)
         a->value.ptr = value;
 }
 
-int ASN1_TYPE_set1(ASN1_TYPE *a, int type, const void *value)
+int __cdecl ASN1_TYPE_set1(ASN1_TYPE *a, int type, const void *value)
 {
     if (!value || (type == V_ASN1_BOOLEAN)) {
         void *p = (void *)value;
@@ -60,7 +60,7 @@ int ASN1_TYPE_set1(ASN1_TYPE *a, int type, const void *value)
 }
 
 /* Returns 0 if they are equal, != 0 otherwise. */
-int ASN1_TYPE_cmp(const ASN1_TYPE *a, const ASN1_TYPE *b)
+int __cdecl ASN1_TYPE_cmp(const ASN1_TYPE *a, const ASN1_TYPE *b)
 {
     int result = -1;
 
@@ -106,7 +106,7 @@ int ASN1_TYPE_cmp(const ASN1_TYPE *a, const ASN1_TYPE *b)
     return result;
 }
 
-ASN1_TYPE *ASN1_TYPE_pack_sequence(const ASN1_ITEM *it, void *s, ASN1_TYPE **t)
+ASN1_TYPE * __cdecl ASN1_TYPE_pack_sequence(const ASN1_ITEM *it, void *s, ASN1_TYPE **t)
 {
     ASN1_OCTET_STRING *oct;
     ASN1_TYPE *rt;
@@ -130,7 +130,7 @@ ASN1_TYPE *ASN1_TYPE_pack_sequence(const ASN1_ITEM *it, void *s, ASN1_TYPE **t)
     return rt;
 }
 
-void *ASN1_TYPE_unpack_sequence(const ASN1_ITEM *it, const ASN1_TYPE *t)
+void * __cdecl ASN1_TYPE_unpack_sequence(const ASN1_ITEM *it, const ASN1_TYPE *t)
 {
     if (t == NULL || t->type != V_ASN1_SEQUENCE || t->value.sequence == NULL)
         return NULL;
diff --git a/crypto/asn1/a_utctm.c b/crypto/asn1/a_utctm.c
index b224991aa3..c5284ad11c 100644
--- a/crypto/asn1/a_utctm.c
+++ b/crypto/asn1/a_utctm.c
@@ -22,13 +22,13 @@ int asn1_utctime_to_tm(struct tm *tm, const ASN1_UTCTIME *d)
     return asn1_time_to_tm(tm, d);
 }
 
-int ASN1_UTCTIME_check(const ASN1_UTCTIME *d)
+int __cdecl ASN1_UTCTIME_check(const ASN1_UTCTIME *d)
 {
     return asn1_utctime_to_tm(NULL, d);
 }
 
 /* Sets the string via simple copy without cleaning it up */
-int ASN1_UTCTIME_set_string(ASN1_UTCTIME *s, const char *str)
+int __cdecl ASN1_UTCTIME_set_string(ASN1_UTCTIME *s, const char *str)
 {
     ASN1_UTCTIME t;
 
@@ -46,12 +46,12 @@ int ASN1_UTCTIME_set_string(ASN1_UTCTIME *s, const char *str)
     return 1;
 }
 
-ASN1_UTCTIME *ASN1_UTCTIME_set(ASN1_UTCTIME *s, time_t t)
+ASN1_UTCTIME * __cdecl ASN1_UTCTIME_set(ASN1_UTCTIME *s, time_t t)
 {
     return ASN1_UTCTIME_adj(s, t, 0, 0);
 }
 
-ASN1_UTCTIME *ASN1_UTCTIME_adj(ASN1_UTCTIME *s, time_t t,
+ASN1_UTCTIME * __cdecl ASN1_UTCTIME_adj(ASN1_UTCTIME *s, time_t t,
                                int offset_day, long offset_sec)
 {
     struct tm *ts;
@@ -69,7 +69,7 @@ ASN1_UTCTIME *ASN1_UTCTIME_adj(ASN1_UTCTIME *s, time_t t,
     return asn1_time_from_tm(s, ts, V_ASN1_UTCTIME);
 }
 
-int ASN1_UTCTIME_cmp_time_t(const ASN1_UTCTIME *s, time_t t)
+int __cdecl ASN1_UTCTIME_cmp_time_t(const ASN1_UTCTIME *s, time_t t)
 {
     struct tm stm, ttm;
     int day, sec;
@@ -90,7 +90,7 @@ int ASN1_UTCTIME_cmp_time_t(const ASN1_UTCTIME *s, time_t t)
     return 0;
 }
 
-int ASN1_UTCTIME_print(BIO *bp, const ASN1_UTCTIME *tm)
+int __cdecl ASN1_UTCTIME_print(BIO *bp, const ASN1_UTCTIME *tm)
 {
     if (tm->type != V_ASN1_UTCTIME)
         return 0;
diff --git a/crypto/asn1/a_utf8.c b/crypto/asn1/a_utf8.c
index e2dc09f6ae..1f8508f7a6 100644
--- a/crypto/asn1/a_utf8.c
+++ b/crypto/asn1/a_utf8.c
@@ -24,7 +24,7 @@
  * -4 = character encoded incorrectly (not minimal length).
  */
 
-int UTF8_getc(const unsigned char *str, int len, unsigned long *val)
+int __cdecl UTF8_getc(const unsigned char *str, int len, unsigned long *val)
 {
     const unsigned char *p;
     unsigned long value;
@@ -121,7 +121,7 @@ int UTF8_getc(const unsigned char *str, int len, unsigned long *val)
  * most 6 characters.
  */
 
-int UTF8_putc(unsigned char *str, int len, unsigned long value)
+int __cdecl UTF8_putc(unsigned char *str, int len, unsigned long value)
 {
     if (!str)
         len = 6;                /* Maximum we will need */
diff --git a/crypto/asn1/a_verify.c b/crypto/asn1/a_verify.c
index cdaf17c3cb..0a22f30fd4 100644
--- a/crypto/asn1/a_verify.c
+++ b/crypto/asn1/a_verify.c
@@ -23,7 +23,7 @@
 
 #ifndef NO_ASN1_OLD
 
-int ASN1_verify(i2d_of_void *i2d, X509_ALGOR *a, ASN1_BIT_STRING *signature,
+int __cdecl ASN1_verify(i2d_of_void *i2d, X509_ALGOR *a, ASN1_BIT_STRING *signature,
                 char *data, EVP_PKEY *pkey)
 {
     EVP_MD_CTX *ctx = EVP_MD_CTX_new();
@@ -85,7 +85,7 @@ int ASN1_verify(i2d_of_void *i2d, X509_ALGOR *a, ASN1_BIT_STRING *signature,
 
 #endif
 
-int ASN1_item_verify(const ASN1_ITEM *it, X509_ALGOR *a,
+int __cdecl ASN1_item_verify(const ASN1_ITEM *it, X509_ALGOR *a,
                      ASN1_BIT_STRING *signature, void *asn, EVP_PKEY *pkey)
 {
     EVP_MD_CTX *ctx = NULL;
diff --git a/crypto/asn1/ameth_lib.c b/crypto/asn1/ameth_lib.c
index d7d270dbb5..eefa84c8bb 100644
--- a/crypto/asn1/ameth_lib.c
+++ b/crypto/asn1/ameth_lib.c
@@ -18,13 +18,13 @@
 
 #include "standard_methods.h"
 
-typedef int sk_cmp_fn_type(const char *const *a, const char *const *b);
+typedef int __cdecl sk_cmp_fn_type(const char *const *a, const char *const *b);
 static STACK_OF(EVP_PKEY_ASN1_METHOD) *app_methods = NULL;
 
 DECLARE_OBJ_BSEARCH_CMP_FN(const EVP_PKEY_ASN1_METHOD *,
                            const EVP_PKEY_ASN1_METHOD *, ameth);
 
-static int ameth_cmp(const EVP_PKEY_ASN1_METHOD *const *a,
+static int __cdecl ameth_cmp(const EVP_PKEY_ASN1_METHOD *const *a,
                      const EVP_PKEY_ASN1_METHOD *const *b)
 {
     return ((*a)->pkey_id - (*b)->pkey_id);
@@ -33,7 +33,7 @@ static int ameth_cmp(const EVP_PKEY_ASN1_METHOD *const *a,
 IMPLEMENT_OBJ_BSEARCH_CMP_FN(const EVP_PKEY_ASN1_METHOD *,
                              const EVP_PKEY_ASN1_METHOD *, ameth);
 
-int EVP_PKEY_asn1_get_count(void)
+int __cdecl EVP_PKEY_asn1_get_count(void)
 {
     int num = OSSL_NELEM(standard_methods);
     if (app_methods)
@@ -41,7 +41,7 @@ int EVP_PKEY_asn1_get_count(void)
     return num;
 }
 
-const EVP_PKEY_ASN1_METHOD *EVP_PKEY_asn1_get0(int idx)
+const EVP_PKEY_ASN1_METHOD * __cdecl EVP_PKEY_asn1_get0(int idx)
 {
     int num = OSSL_NELEM(standard_methods);
     if (idx < 0)
@@ -75,7 +75,7 @@ static const EVP_PKEY_ASN1_METHOD *pkey_asn1_find(int type)
  * implementing 'type' or NULL if no engine implements it.
  */
 
-const EVP_PKEY_ASN1_METHOD *EVP_PKEY_asn1_find(ENGINE **pe, int type)
+const EVP_PKEY_ASN1_METHOD * __cdecl EVP_PKEY_asn1_find(ENGINE **pe, int type)
 {
     const EVP_PKEY_ASN1_METHOD *t;
 
@@ -100,7 +100,7 @@ const EVP_PKEY_ASN1_METHOD *EVP_PKEY_asn1_find(ENGINE **pe, int type)
     return t;
 }
 
-const EVP_PKEY_ASN1_METHOD *EVP_PKEY_asn1_find_str(ENGINE **pe,
+const EVP_PKEY_ASN1_METHOD * __cdecl EVP_PKEY_asn1_find_str(ENGINE **pe,
                                                    const char *str, int len)
 {
     int i;
@@ -136,7 +136,7 @@ const EVP_PKEY_ASN1_METHOD *EVP_PKEY_asn1_find_str(ENGINE **pe,
     return NULL;
 }
 
-int EVP_PKEY_asn1_add0(const EVP_PKEY_ASN1_METHOD *ameth)
+int __cdecl EVP_PKEY_asn1_add0(const EVP_PKEY_ASN1_METHOD *ameth)
 {
     EVP_PKEY_ASN1_METHOD tmp = { 0, };
 
@@ -175,7 +175,7 @@ int EVP_PKEY_asn1_add0(const EVP_PKEY_ASN1_METHOD *ameth)
     return 1;
 }
 
-int EVP_PKEY_asn1_add_alias(int to, int from)
+int __cdecl EVP_PKEY_asn1_add_alias(int to, int from)
 {
     EVP_PKEY_ASN1_METHOD *ameth;
     ameth = EVP_PKEY_asn1_new(from, ASN1_PKEY_ALIAS, NULL, NULL);
@@ -189,7 +189,7 @@ int EVP_PKEY_asn1_add_alias(int to, int from)
     return 1;
 }
 
-int EVP_PKEY_asn1_get0_info(int *ppkey_id, int *ppkey_base_id,
+int __cdecl EVP_PKEY_asn1_get0_info(int *ppkey_id, int *ppkey_base_id,
                             int *ppkey_flags, const char **pinfo,
                             const char **ppem_str,
                             const EVP_PKEY_ASN1_METHOD *ameth)
@@ -209,12 +209,12 @@ int EVP_PKEY_asn1_get0_info(int *ppkey_id, int *ppkey_base_id,
     return 1;
 }
 
-const EVP_PKEY_ASN1_METHOD *EVP_PKEY_get0_asn1(const EVP_PKEY *pkey)
+const EVP_PKEY_ASN1_METHOD * __cdecl EVP_PKEY_get0_asn1(const EVP_PKEY *pkey)
 {
     return pkey->ameth;
 }
 
-EVP_PKEY_ASN1_METHOD *EVP_PKEY_asn1_new(int id, int flags,
+EVP_PKEY_ASN1_METHOD * __cdecl EVP_PKEY_asn1_new(int id, int flags,
                                         const char *pem_str, const char *info)
 {
     EVP_PKEY_ASN1_METHOD *ameth = OPENSSL_zalloc(sizeof(*ameth));
@@ -246,7 +246,7 @@ EVP_PKEY_ASN1_METHOD *EVP_PKEY_asn1_new(int id, int flags,
 
 }
 
-void EVP_PKEY_asn1_copy(EVP_PKEY_ASN1_METHOD *dst,
+void __cdecl EVP_PKEY_asn1_copy(EVP_PKEY_ASN1_METHOD *dst,
                         const EVP_PKEY_ASN1_METHOD *src)
 {
 
@@ -284,7 +284,7 @@ void EVP_PKEY_asn1_copy(EVP_PKEY_ASN1_METHOD *dst,
 
 }
 
-void EVP_PKEY_asn1_free(EVP_PKEY_ASN1_METHOD *ameth)
+void __cdecl EVP_PKEY_asn1_free(EVP_PKEY_ASN1_METHOD *ameth)
 {
     if (ameth && (ameth->pkey_flags & ASN1_PKEY_DYNAMIC)) {
         OPENSSL_free(ameth->pem_str);
@@ -293,18 +293,18 @@ void EVP_PKEY_asn1_free(EVP_PKEY_ASN1_METHOD *ameth)
     }
 }
 
-void EVP_PKEY_asn1_set_public(EVP_PKEY_ASN1_METHOD *ameth,
-                              int (*pub_decode) (EVP_PKEY *pk,
+void __cdecl EVP_PKEY_asn1_set_public(EVP_PKEY_ASN1_METHOD *ameth,
+                              int (__cdecl *pub_decode) (EVP_PKEY *pk,
                                                  X509_PUBKEY *pub),
-                              int (*pub_encode) (X509_PUBKEY *pub,
+                              int (__cdecl *pub_encode) (X509_PUBKEY *pub,
                                                  const EVP_PKEY *pk),
-                              int (*pub_cmp) (const EVP_PKEY *a,
+                              int (__cdecl *pub_cmp) (const EVP_PKEY *a,
                                               const EVP_PKEY *b),
-                              int (*pub_print) (BIO *out,
+                              int (__cdecl *pub_print) (BIO *out,
                                                 const EVP_PKEY *pkey,
                                                 int indent, ASN1_PCTX *pctx),
-                              int (*pkey_size) (const EVP_PKEY *pk),
-                              int (*pkey_bits) (const EVP_PKEY *pk))
+                              int (__cdecl *pkey_size) (const EVP_PKEY *pk),
+                              int (__cdecl *pkey_bits) (const EVP_PKEY *pk))
 {
     ameth->pub_decode = pub_decode;
     ameth->pub_encode = pub_encode;
@@ -314,13 +314,13 @@ void EVP_PKEY_asn1_set_public(EVP_PKEY_ASN1_METHOD *ameth,
     ameth->pkey_bits = pkey_bits;
 }
 
-void EVP_PKEY_asn1_set_private(EVP_PKEY_ASN1_METHOD *ameth,
-                               int (*priv_decode) (EVP_PKEY *pk,
+void __cdecl EVP_PKEY_asn1_set_private(EVP_PKEY_ASN1_METHOD *ameth,
+                               int (__cdecl *priv_decode) (EVP_PKEY *pk,
                                                    const PKCS8_PRIV_KEY_INFO
                                                    *p8inf),
-                               int (*priv_encode) (PKCS8_PRIV_KEY_INFO *p8,
+                               int (__cdecl *priv_encode) (PKCS8_PRIV_KEY_INFO *p8,
                                                    const EVP_PKEY *pk),
-                               int (*priv_print) (BIO *out,
+                               int (__cdecl *priv_print) (BIO *out,
                                                   const EVP_PKEY *pkey,
                                                   int indent,
                                                   ASN1_PCTX *pctx))
@@ -330,18 +330,18 @@ void EVP_PKEY_asn1_set_private(EVP_PKEY_ASN1_METHOD *ameth,
     ameth->priv_print = priv_print;
 }
 
-void EVP_PKEY_asn1_set_param(EVP_PKEY_ASN1_METHOD *ameth,
-                             int (*param_decode) (EVP_PKEY *pkey,
+void __cdecl EVP_PKEY_asn1_set_param(EVP_PKEY_ASN1_METHOD *ameth,
+                             int (__cdecl *param_decode) (EVP_PKEY *pkey,
                                                   const unsigned char **pder,
                                                   int derlen),
-                             int (*param_encode) (const EVP_PKEY *pkey,
+                             int (__cdecl *param_encode) (const EVP_PKEY *pkey,
                                                   unsigned char **pder),
-                             int (*param_missing) (const EVP_PKEY *pk),
-                             int (*param_copy) (EVP_PKEY *to,
+                             int (__cdecl *param_missing) (const EVP_PKEY *pk),
+                             int (__cdecl *param_copy) (EVP_PKEY *to,
                                                 const EVP_PKEY *from),
-                             int (*param_cmp) (const EVP_PKEY *a,
+                             int (__cdecl *param_cmp) (const EVP_PKEY *a,
                                                const EVP_PKEY *b),
-                             int (*param_print) (BIO *out,
+                             int (__cdecl *param_print) (BIO *out,
                                                  const EVP_PKEY *pkey,
                                                  int indent, ASN1_PCTX *pctx))
 {
@@ -353,34 +353,34 @@ void EVP_PKEY_asn1_set_param(EVP_PKEY_ASN1_METHOD *ameth,
     ameth->param_print = param_print;
 }
 
-void EVP_PKEY_asn1_set_free(EVP_PKEY_ASN1_METHOD *ameth,
-                            void (*pkey_free) (EVP_PKEY *pkey))
+void __cdecl EVP_PKEY_asn1_set_free(EVP_PKEY_ASN1_METHOD *ameth,
+                            void (__cdecl *pkey_free) (EVP_PKEY *pkey))
 {
     ameth->pkey_free = pkey_free;
 }
 
-void EVP_PKEY_asn1_set_ctrl(EVP_PKEY_ASN1_METHOD *ameth,
-                            int (*pkey_ctrl) (EVP_PKEY *pkey, int op,
+void __cdecl EVP_PKEY_asn1_set_ctrl(EVP_PKEY_ASN1_METHOD *ameth,
+                            int (__cdecl *pkey_ctrl) (EVP_PKEY *pkey, int op,
                                               long arg1, void *arg2))
 {
     ameth->pkey_ctrl = pkey_ctrl;
 }
 
-void EVP_PKEY_asn1_set_security_bits(EVP_PKEY_ASN1_METHOD *ameth,
-                                     int (*pkey_security_bits) (const EVP_PKEY
+void __cdecl EVP_PKEY_asn1_set_security_bits(EVP_PKEY_ASN1_METHOD *ameth,
+                                     int (__cdecl *pkey_security_bits) (const EVP_PKEY
                                                                 *pk))
 {
     ameth->pkey_security_bits = pkey_security_bits;
 }
 
-void EVP_PKEY_asn1_set_item(EVP_PKEY_ASN1_METHOD *ameth,
-                            int (*item_verify) (EVP_MD_CTX *ctx,
+void __cdecl EVP_PKEY_asn1_set_item(EVP_PKEY_ASN1_METHOD *ameth,
+                            int (__cdecl *item_verify) (EVP_MD_CTX *ctx,
                                                 const ASN1_ITEM *it,
                                                 void *asn,
                                                 X509_ALGOR *a,
                                                 ASN1_BIT_STRING *sig,
                                                 EVP_PKEY *pkey),
-                            int (*item_sign) (EVP_MD_CTX *ctx,
+                            int (__cdecl *item_sign) (EVP_MD_CTX *ctx,
                                               const ASN1_ITEM *it,
                                               void *asn,
                                               X509_ALGOR *alg1,
@@ -391,34 +391,34 @@ void EVP_PKEY_asn1_set_item(EVP_PKEY_ASN1_METHOD *ameth,
     ameth->item_verify = item_verify;
 }
 
-void EVP_PKEY_asn1_set_siginf(EVP_PKEY_ASN1_METHOD *ameth,
-                              int (*siginf_set) (X509_SIG_INFO *siginf,
+void __cdecl EVP_PKEY_asn1_set_siginf(EVP_PKEY_ASN1_METHOD *ameth,
+                              int (__cdecl *siginf_set) (X509_SIG_INFO *siginf,
                                                  const X509_ALGOR *alg,
                                                  const ASN1_STRING *sig))
 {
     ameth->siginf_set = siginf_set;
 }
 
-void EVP_PKEY_asn1_set_check(EVP_PKEY_ASN1_METHOD *ameth,
-                             int (*pkey_check) (const EVP_PKEY *pk))
+void __cdecl EVP_PKEY_asn1_set_check(EVP_PKEY_ASN1_METHOD *ameth,
+                             int (__cdecl *pkey_check) (const EVP_PKEY *pk))
 {
     ameth->pkey_check = pkey_check;
 }
 
-void EVP_PKEY_asn1_set_public_check(EVP_PKEY_ASN1_METHOD *ameth,
-                                    int (*pkey_pub_check) (const EVP_PKEY *pk))
+void __cdecl EVP_PKEY_asn1_set_public_check(EVP_PKEY_ASN1_METHOD *ameth,
+                                    int (__cdecl *pkey_pub_check) (const EVP_PKEY *pk))
 {
     ameth->pkey_public_check = pkey_pub_check;
 }
 
-void EVP_PKEY_asn1_set_param_check(EVP_PKEY_ASN1_METHOD *ameth,
-                                   int (*pkey_param_check) (const EVP_PKEY *pk))
+void __cdecl EVP_PKEY_asn1_set_param_check(EVP_PKEY_ASN1_METHOD *ameth,
+                                   int (__cdecl *pkey_param_check) (const EVP_PKEY *pk))
 {
     ameth->pkey_param_check = pkey_param_check;
 }
 
-void EVP_PKEY_asn1_set_set_priv_key(EVP_PKEY_ASN1_METHOD *ameth,
-                                    int (*set_priv_key) (EVP_PKEY *pk,
+void __cdecl EVP_PKEY_asn1_set_set_priv_key(EVP_PKEY_ASN1_METHOD *ameth,
+                                    int (__cdecl *set_priv_key) (EVP_PKEY *pk,
                                                          const unsigned char
                                                             *priv,
                                                          size_t len))
@@ -426,24 +426,24 @@ void EVP_PKEY_asn1_set_set_priv_key(EVP_PKEY_ASN1_METHOD *ameth,
     ameth->set_priv_key = set_priv_key;
 }
 
-void EVP_PKEY_asn1_set_set_pub_key(EVP_PKEY_ASN1_METHOD *ameth,
-                                   int (*set_pub_key) (EVP_PKEY *pk,
+void __cdecl EVP_PKEY_asn1_set_set_pub_key(EVP_PKEY_ASN1_METHOD *ameth,
+                                   int (__cdecl *set_pub_key) (EVP_PKEY *pk,
                                                        const unsigned char *pub,
                                                        size_t len))
 {
     ameth->set_pub_key = set_pub_key;
 }
 
-void EVP_PKEY_asn1_set_get_priv_key(EVP_PKEY_ASN1_METHOD *ameth,
-                                    int (*get_priv_key) (const EVP_PKEY *pk,
+void __cdecl EVP_PKEY_asn1_set_get_priv_key(EVP_PKEY_ASN1_METHOD *ameth,
+                                    int (__cdecl *get_priv_key) (const EVP_PKEY *pk,
                                                          unsigned char *priv,
                                                          size_t *len))
 {
     ameth->get_priv_key = get_priv_key;
 }
 
-void EVP_PKEY_asn1_set_get_pub_key(EVP_PKEY_ASN1_METHOD *ameth,
-                                   int (*get_pub_key) (const EVP_PKEY *pk,
+void __cdecl EVP_PKEY_asn1_set_get_pub_key(EVP_PKEY_ASN1_METHOD *ameth,
+                                   int (__cdecl *get_pub_key) (const EVP_PKEY *pk,
                                                        unsigned char *pub,
                                                        size_t *len))
 {
diff --git a/crypto/asn1/asn1_err.c b/crypto/asn1/asn1_err.c
index 613f9ae713..0e5c0d8562 100644
--- a/crypto/asn1/asn1_err.c
+++ b/crypto/asn1/asn1_err.c
@@ -338,7 +338,7 @@ static const ERR_STRING_DATA ASN1_str_reasons[] = {
 
 #endif
 
-int ERR_load_ASN1_strings(void)
+int __cdecl ERR_load_ASN1_strings(void)
 {
 #ifndef OPENSSL_NO_ERR
     if (ERR_func_error_string(ASN1_str_functs[0].error) == NULL) {
diff --git a/crypto/asn1/asn1_gen.c b/crypto/asn1/asn1_gen.c
index 493a693aa3..d1fa076297 100644
--- a/crypto/asn1/asn1_gen.c
+++ b/crypto/asn1/asn1_gen.c
@@ -75,7 +75,7 @@ static ASN1_TYPE *asn1_multi(int utype, const char *section, X509V3_CTX *cnf,
 static ASN1_TYPE *asn1_str2type(const char *str, int format, int utype);
 static int asn1_str2tag(const char *tagstr, int len);
 
-ASN1_TYPE *ASN1_generate_nconf(const char *str, CONF *nconf)
+ASN1_TYPE * __cdecl ASN1_generate_nconf(const char *str, CONF *nconf)
 {
     X509V3_CTX cnf;
 
@@ -86,7 +86,7 @@ ASN1_TYPE *ASN1_generate_nconf(const char *str, CONF *nconf)
     return ASN1_generate_v3(str, &cnf);
 }
 
-ASN1_TYPE *ASN1_generate_v3(const char *str, X509V3_CTX *cnf)
+ASN1_TYPE * __cdecl ASN1_generate_v3(const char *str, X509V3_CTX *cnf)
 {
     int err = 0;
     ASN1_TYPE *ret = generate_v3(str, cnf, 0, &err);
@@ -782,7 +782,7 @@ static int mask_cb(const char *elem, int len, void *arg)
     return 1;
 }
 
-int ASN1_str2mask(const char *str, unsigned long *pmask)
+int __cdecl ASN1_str2mask(const char *str, unsigned long *pmask)
 {
     *pmask = 0;
     return CONF_parse_list(str, '|', 1, mask_cb, pmask);
diff --git a/crypto/asn1/asn1_item_list.c b/crypto/asn1/asn1_item_list.c
index 9798192f4b..74c5f9f395 100644
--- a/crypto/asn1/asn1_item_list.c
+++ b/crypto/asn1/asn1_item_list.c
@@ -21,7 +21,7 @@
 
 #include "asn1_item_list.h"
 
-const ASN1_ITEM *ASN1_ITEM_lookup(const char *name)
+const ASN1_ITEM * __cdecl ASN1_ITEM_lookup(const char *name)
 {
     size_t i;
 
@@ -34,7 +34,7 @@ const ASN1_ITEM *ASN1_ITEM_lookup(const char *name)
     return NULL;
 }
 
-const ASN1_ITEM *ASN1_ITEM_get(size_t i)
+const ASN1_ITEM * __cdecl ASN1_ITEM_get(size_t i)
 {
     if (i >= OSSL_NELEM(asn1_item_list))
         return NULL;
diff --git a/crypto/asn1/asn1_lib.c b/crypto/asn1/asn1_lib.c
index 88c4b53918..a2d58d0074 100644
--- a/crypto/asn1/asn1_lib.c
+++ b/crypto/asn1/asn1_lib.c
@@ -31,17 +31,17 @@ static int _asn1_check_infinite_end(const unsigned char **p, long len)
     return 0;
 }
 
-int ASN1_check_infinite_end(unsigned char **p, long len)
+int __cdecl ASN1_check_infinite_end(unsigned char **p, long len)
 {
     return _asn1_check_infinite_end((const unsigned char **)p, len);
 }
 
-int ASN1_const_check_infinite_end(const unsigned char **p, long len)
+int __cdecl ASN1_const_check_infinite_end(const unsigned char **p, long len)
 {
     return _asn1_check_infinite_end(p, len);
 }
 
-int ASN1_get_object(const unsigned char **pp, long *plength, int *ptag,
+int __cdecl ASN1_get_object(const unsigned char **pp, long *plength, int *ptag,
                     int *pclass, long omax)
 {
     int i, ret;
@@ -152,7 +152,7 @@ static int asn1_get_length(const unsigned char **pp, int *inf, long *rl,
 /*
  * class 0 is constructed constructed == 2 for indefinite length constructed
  */
-void ASN1_put_object(unsigned char **pp, int constructed, int length, int tag,
+void __cdecl ASN1_put_object(unsigned char **pp, int constructed, int length, int tag,
                      int xclass)
 {
     unsigned char *p = *pp;
@@ -182,7 +182,7 @@ void ASN1_put_object(unsigned char **pp, int constructed, int length, int tag,
     *pp = p;
 }
 
-int ASN1_put_eoc(unsigned char **pp)
+int __cdecl ASN1_put_eoc(unsigned char **pp)
 {
     unsigned char *p = *pp;
     *p++ = 0;
@@ -212,7 +212,7 @@ static void asn1_put_length(unsigned char **pp, int length)
     *pp = p;
 }
 
-int ASN1_object_size(int constructed, int length, int tag)
+int __cdecl ASN1_object_size(int constructed, int length, int tag)
 {
     int ret = 1;
     if (length < 0)
@@ -240,7 +240,7 @@ int ASN1_object_size(int constructed, int length, int tag)
     return ret + length;
 }
 
-int ASN1_STRING_copy(ASN1_STRING *dst, const ASN1_STRING *str)
+int __cdecl ASN1_STRING_copy(ASN1_STRING *dst, const ASN1_STRING *str)
 {
     if (str == NULL)
         return 0;
@@ -253,7 +253,7 @@ int ASN1_STRING_copy(ASN1_STRING *dst, const ASN1_STRING *str)
     return 1;
 }
 
-ASN1_STRING *ASN1_STRING_dup(const ASN1_STRING *str)
+ASN1_STRING * __cdecl ASN1_STRING_dup(const ASN1_STRING *str)
 {
     ASN1_STRING *ret;
     if (!str)
@@ -268,7 +268,7 @@ ASN1_STRING *ASN1_STRING_dup(const ASN1_STRING *str)
     return ret;
 }
 
-int ASN1_STRING_set(ASN1_STRING *str, const void *_data, int len)
+int __cdecl ASN1_STRING_set(ASN1_STRING *str, const void *_data, int len)
 {
     unsigned char *c;
     const char *data = _data;
@@ -297,19 +297,19 @@ int ASN1_STRING_set(ASN1_STRING *str, const void *_data, int len)
     return 1;
 }
 
-void ASN1_STRING_set0(ASN1_STRING *str, void *data, int len)
+void __cdecl ASN1_STRING_set0(ASN1_STRING *str, void *data, int len)
 {
     OPENSSL_free(str->data);
     str->data = data;
     str->length = len;
 }
 
-ASN1_STRING *ASN1_STRING_new(void)
+ASN1_STRING * __cdecl ASN1_STRING_new(void)
 {
     return ASN1_STRING_type_new(V_ASN1_OCTET_STRING);
 }
 
-ASN1_STRING *ASN1_STRING_type_new(int type)
+ASN1_STRING * __cdecl ASN1_STRING_type_new(int type)
 {
     ASN1_STRING *ret;
 
@@ -332,14 +332,14 @@ void asn1_string_embed_free(ASN1_STRING *a, int embed)
         OPENSSL_free(a);
 }
 
-void ASN1_STRING_free(ASN1_STRING *a)
+void __cdecl ASN1_STRING_free(ASN1_STRING *a)
 {
     if (a == NULL)
         return;
     asn1_string_embed_free(a, a->flags & ASN1_STRING_FLAG_EMBED);
 }
 
-void ASN1_STRING_clear_free(ASN1_STRING *a)
+void __cdecl ASN1_STRING_clear_free(ASN1_STRING *a)
 {
     if (a == NULL)
         return;
@@ -348,7 +348,7 @@ void ASN1_STRING_clear_free(ASN1_STRING *a)
     ASN1_STRING_free(a);
 }
 
-int ASN1_STRING_cmp(const ASN1_STRING *a, const ASN1_STRING *b)
+int __cdecl ASN1_STRING_cmp(const ASN1_STRING *a, const ASN1_STRING *b)
 {
     int i;
 
@@ -363,22 +363,22 @@ int ASN1_STRING_cmp(const ASN1_STRING *a, const ASN1_STRING *b)
         return i;
 }
 
-int ASN1_STRING_length(const ASN1_STRING *x)
+int __cdecl ASN1_STRING_length(const ASN1_STRING *x)
 {
     return x->length;
 }
 
-void ASN1_STRING_length_set(ASN1_STRING *x, int len)
+void __cdecl ASN1_STRING_length_set(ASN1_STRING *x, int len)
 {
     x->length = len;
 }
 
-int ASN1_STRING_type(const ASN1_STRING *x)
+int __cdecl ASN1_STRING_type(const ASN1_STRING *x)
 {
     return x->type;
 }
 
-const unsigned char *ASN1_STRING_get0_data(const ASN1_STRING *x)
+const unsigned char * __cdecl ASN1_STRING_get0_data(const ASN1_STRING *x)
 {
     return x->data;
 }
diff --git a/crypto/asn1/asn1_par.c b/crypto/asn1/asn1_par.c
index 4b60c615de..2749b7f9fd 100644
--- a/crypto/asn1/asn1_par.c
+++ b/crypto/asn1/asn1_par.c
@@ -55,12 +55,12 @@ static int asn1_print_info(BIO *bp, int tag, int xclass, int constructed,
     return 0;
 }
 
-int ASN1_parse(BIO *bp, const unsigned char *pp, long len, int indent)
+int __cdecl ASN1_parse(BIO *bp, const unsigned char *pp, long len, int indent)
 {
     return asn1_parse2(bp, &pp, len, 0, 0, indent, 0);
 }
 
-int ASN1_parse_dump(BIO *bp, const unsigned char *pp, long len, int indent,
+int __cdecl ASN1_parse_dump(BIO *bp, const unsigned char *pp, long len, int indent,
                     int dump)
 {
     return asn1_parse2(bp, &pp, len, 0, 0, indent, dump);
@@ -345,7 +345,7 @@ static int asn1_parse2(BIO *bp, const unsigned char **pp, long length,
     return ret;
 }
 
-const char *ASN1_tag2str(int tag)
+const char * __cdecl ASN1_tag2str(int tag)
 {
     static const char *const tag2str[] = {
         /* 0-4 */
diff --git a/crypto/asn1/asn_mime.c b/crypto/asn1/asn_mime.c
index dfd5be6347..0604e1827a 100644
--- a/crypto/asn1/asn_mime.c
+++ b/crypto/asn1/asn_mime.c
@@ -47,24 +47,24 @@ static char *strip_end(char *name);
 static MIME_HEADER *mime_hdr_new(const char *name, const char *value);
 static int mime_hdr_addparam(MIME_HEADER *mhdr, const char *name, const char *value);
 static STACK_OF(MIME_HEADER) *mime_parse_hdr(BIO *bio);
-static int mime_hdr_cmp(const MIME_HEADER *const *a,
+static int __cdecl mime_hdr_cmp(const MIME_HEADER *const *a,
                         const MIME_HEADER *const *b);
-static int mime_param_cmp(const MIME_PARAM *const *a,
+static int __cdecl mime_param_cmp(const MIME_PARAM *const *a,
                           const MIME_PARAM *const *b);
-static void mime_param_free(MIME_PARAM *param);
+static void __cdecl mime_param_free(MIME_PARAM *param);
 static int mime_bound_check(char *line, int linelen, const char *bound, int blen);
 static int multi_split(BIO *bio, const char *bound, STACK_OF(BIO) **ret);
 static int strip_eol(char *linebuf, int *plen, int flags);
 static MIME_HEADER *mime_hdr_find(STACK_OF(MIME_HEADER) *hdrs, const char *name);
 static MIME_PARAM *mime_param_find(MIME_HEADER *hdr, const char *name);
-static void mime_hdr_free(MIME_HEADER *hdr);
+static void __cdecl mime_hdr_free(MIME_HEADER *hdr);
 
 #define MAX_SMLEN 1024
 #define mime_debug(x)           /* x */
 
 /* Output an ASN1 structure in BER format streaming if necessary */
 
-int i2d_ASN1_bio_stream(BIO *out, ASN1_VALUE *val, BIO *in, int flags,
+int __cdecl i2d_ASN1_bio_stream(BIO *out, ASN1_VALUE *val, BIO *in, int flags,
                         const ASN1_ITEM *it)
 {
     /* If streaming create stream BIO and copy all content through it */
@@ -118,7 +118,7 @@ static int B64_write_ASN1(BIO *out, ASN1_VALUE *val, BIO *in, int flags,
 
 /* Streaming ASN1 PEM write */
 
-int PEM_write_bio_ASN1_stream(BIO *out, ASN1_VALUE *val, BIO *in, int flags,
+int __cdecl PEM_write_bio_ASN1_stream(BIO *out, ASN1_VALUE *val, BIO *in, int flags,
                               const char *hdr, const ASN1_ITEM *it)
 {
     int r;
@@ -219,7 +219,7 @@ static int asn1_write_micalg(BIO *out, STACK_OF(X509_ALGOR) *mdalgs)
 
 /* SMIME sender */
 
-int SMIME_write_ASN1(BIO *bio, ASN1_VALUE *val, BIO *data, int flags,
+int __cdecl SMIME_write_ASN1(BIO *bio, ASN1_VALUE *val, BIO *data, int flags,
                      int ctype_nid, int econt_nid,
                      STACK_OF(X509_ALGOR) *mdalgs, const ASN1_ITEM *it)
 {
@@ -367,7 +367,7 @@ static int asn1_output_data(BIO *out, BIO *data, ASN1_VALUE *val, int flags,
  * opaque this is set to NULL
  */
 
-ASN1_VALUE *SMIME_read_ASN1(BIO *bio, BIO **bcont, const ASN1_ITEM *it)
+ASN1_VALUE * __cdecl SMIME_read_ASN1(BIO *bio, BIO **bcont, const ASN1_ITEM *it)
 {
     BIO *asnin;
     STACK_OF(MIME_HEADER) *headers = NULL;
@@ -475,7 +475,7 @@ ASN1_VALUE *SMIME_read_ASN1(BIO *bio, BIO **bcont, const ASN1_ITEM *it)
 }
 
 /* Copy text from one BIO to another making the output CRLF at EOL */
-int SMIME_crlf_copy(BIO *in, BIO *out, int flags)
+int __cdecl SMIME_crlf_copy(BIO *in, BIO *out, int flags)
 {
     BIO *bf;
     char eol;
@@ -522,7 +522,7 @@ int SMIME_crlf_copy(BIO *in, BIO *out, int flags)
 }
 
 /* Strip off headers if they are text/plain */
-int SMIME_text(BIO *in, BIO *out)
+int __cdecl SMIME_text(BIO *in, BIO *out)
 {
     char iobuf[4096];
     int len;
@@ -854,7 +854,7 @@ static int mime_hdr_addparam(MIME_HEADER *mhdr, const char *name, const char *va
     return 0;
 }
 
-static int mime_hdr_cmp(const MIME_HEADER *const *a,
+static int __cdecl mime_hdr_cmp(const MIME_HEADER *const *a,
                         const MIME_HEADER *const *b)
 {
     if (!(*a)->name || !(*b)->name)
@@ -863,7 +863,7 @@ static int mime_hdr_cmp(const MIME_HEADER *const *a,
     return strcmp((*a)->name, (*b)->name);
 }
 
-static int mime_param_cmp(const MIME_PARAM *const *a,
+static int __cdecl mime_param_cmp(const MIME_PARAM *const *a,
                           const MIME_PARAM *const *b)
 {
     if (!(*a)->param_name || !(*b)->param_name)
@@ -897,7 +897,7 @@ static MIME_PARAM *mime_param_find(MIME_HEADER *hdr, const char *name)
     return sk_MIME_PARAM_value(hdr->params, idx);
 }
 
-static void mime_hdr_free(MIME_HEADER *hdr)
+static void __cdecl mime_hdr_free(MIME_HEADER *hdr)
 {
     if (hdr == NULL)
         return;
@@ -908,7 +908,7 @@ static void mime_hdr_free(MIME_HEADER *hdr)
     OPENSSL_free(hdr);
 }
 
-static void mime_param_free(MIME_PARAM *param)
+static void __cdecl mime_param_free(MIME_PARAM *param)
 {
     OPENSSL_free(param->param_name);
     OPENSSL_free(param->param_value);
diff --git a/crypto/asn1/asn_moid.c b/crypto/asn1/asn_moid.c
index 68a01f3117..937722f0ce 100644
--- a/crypto/asn1/asn_moid.c
+++ b/crypto/asn1/asn_moid.c
@@ -46,7 +46,7 @@ static void oid_module_finish(CONF_IMODULE *md)
 {
 }
 
-void ASN1_add_oid_module(void)
+void __cdecl ASN1_add_oid_module(void)
 {
     CONF_module_add("oid_section", oid_module_init, oid_module_finish);
 }
diff --git a/crypto/asn1/asn_mstbl.c b/crypto/asn1/asn_mstbl.c
index ddcbcd07fe..6ee31f0cd2 100644
--- a/crypto/asn1/asn_mstbl.c
+++ b/crypto/asn1/asn_mstbl.c
@@ -44,7 +44,7 @@ static void stbl_module_finish(CONF_IMODULE *md)
     ASN1_STRING_TABLE_cleanup();
 }
 
-void ASN1_add_stable_module(void)
+void __cdecl ASN1_add_stable_module(void)
 {
     CONF_module_add("stbl_section", stbl_module_init, stbl_module_finish);
 }
diff --git a/crypto/asn1/asn_pack.c b/crypto/asn1/asn_pack.c
index 63bc306756..18866ccbc9 100644
--- a/crypto/asn1/asn_pack.c
+++ b/crypto/asn1/asn_pack.c
@@ -13,7 +13,7 @@
 
 /* ASN1 packing and unpacking functions */
 
-ASN1_STRING *ASN1_item_pack(void *obj, const ASN1_ITEM *it, ASN1_STRING **oct)
+ASN1_STRING * __cdecl ASN1_item_pack(void *obj, const ASN1_ITEM *it, ASN1_STRING **oct)
 {
     ASN1_STRING *octmp;
 
@@ -50,7 +50,7 @@ ASN1_STRING *ASN1_item_pack(void *obj, const ASN1_ITEM *it, ASN1_STRING **oct)
 
 /* Extract an ASN1 object from an ASN1_STRING */
 
-void *ASN1_item_unpack(const ASN1_STRING *oct, const ASN1_ITEM *it)
+void * __cdecl ASN1_item_unpack(const ASN1_STRING *oct, const ASN1_ITEM *it)
 {
     const unsigned char *p;
     void *ret;
diff --git a/crypto/asn1/bio_asn1.c b/crypto/asn1/bio_asn1.c
index 86ee566323..cb70eec443 100644
--- a/crypto/asn1/bio_asn1.c
+++ b/crypto/asn1/bio_asn1.c
@@ -59,19 +59,19 @@ typedef struct BIO_ASN1_BUF_CTX_t {
     void *ex_arg;
 } BIO_ASN1_BUF_CTX;
 
-static int asn1_bio_write(BIO *h, const char *buf, int num);
-static int asn1_bio_read(BIO *h, char *buf, int size);
-static int asn1_bio_puts(BIO *h, const char *str);
-static int asn1_bio_gets(BIO *h, char *str, int size);
-static long asn1_bio_ctrl(BIO *h, int cmd, long arg1, void *arg2);
-static int asn1_bio_new(BIO *h);
-static int asn1_bio_free(BIO *data);
-static long asn1_bio_callback_ctrl(BIO *h, int cmd, BIO_info_cb *fp);
-
-static int asn1_bio_init(BIO_ASN1_BUF_CTX *ctx, int size);
-static int asn1_bio_flush_ex(BIO *b, BIO_ASN1_BUF_CTX *ctx,
+static int __cdecl asn1_bio_write(BIO *h, const char *buf, int num);
+static int __cdecl asn1_bio_read(BIO *h, char *buf, int size);
+static int __cdecl asn1_bio_puts(BIO *h, const char *str);
+static int __cdecl asn1_bio_gets(BIO *h, char *str, int size);
+static long __cdecl asn1_bio_ctrl(BIO *h, int cmd, long arg1, void *arg2);
+static int __cdecl asn1_bio_new(BIO *h);
+static int __cdecl asn1_bio_free(BIO *data);
+static long __cdecl asn1_bio_callback_ctrl(BIO *h, int cmd, BIO_info_cb *fp);
+
+static int __cdecl asn1_bio_init(BIO_ASN1_BUF_CTX *ctx, int size);
+static int __cdecl asn1_bio_flush_ex(BIO *b, BIO_ASN1_BUF_CTX *ctx,
                              asn1_ps_func *cleanup, asn1_bio_state_t next);
-static int asn1_bio_setup_ex(BIO *b, BIO_ASN1_BUF_CTX *ctx,
+static int __cdecl asn1_bio_setup_ex(BIO *b, BIO_ASN1_BUF_CTX *ctx,
                              asn1_ps_func *setup,
                              asn1_bio_state_t ex_state,
                              asn1_bio_state_t other_state);
@@ -93,12 +93,12 @@ static const BIO_METHOD methods_asn1 = {
     asn1_bio_callback_ctrl,
 };
 
-const BIO_METHOD *BIO_f_asn1(void)
+const BIO_METHOD * __cdecl BIO_f_asn1(void)
 {
     return &methods_asn1;
 }
 
-static int asn1_bio_new(BIO *b)
+static int __cdecl asn1_bio_new(BIO *b)
 {
     BIO_ASN1_BUF_CTX *ctx = OPENSSL_zalloc(sizeof(*ctx));
 
@@ -114,7 +114,7 @@ static int asn1_bio_new(BIO *b)
     return 1;
 }
 
-static int asn1_bio_init(BIO_ASN1_BUF_CTX *ctx, int size)
+static int __cdecl asn1_bio_init(BIO_ASN1_BUF_CTX *ctx, int size)
 {
     if ((ctx->buf = OPENSSL_malloc(size)) == NULL) {
         ASN1err(ASN1_F_ASN1_BIO_INIT, ERR_R_MALLOC_FAILURE);
@@ -127,7 +127,7 @@ static int asn1_bio_init(BIO_ASN1_BUF_CTX *ctx, int size)
     return 1;
 }
 
-static int asn1_bio_free(BIO *b)
+static int __cdecl asn1_bio_free(BIO *b)
 {
     BIO_ASN1_BUF_CTX *ctx;
 
@@ -146,7 +146,7 @@ static int asn1_bio_free(BIO *b)
     return 1;
 }
 
-static int asn1_bio_write(BIO *b, const char *in, int inl)
+static int __cdecl asn1_bio_write(BIO *b, const char *in, int inl)
 {
     BIO_ASN1_BUF_CTX *ctx;
     int wrmax, wrlen, ret;
@@ -246,7 +246,7 @@ static int asn1_bio_write(BIO *b, const char *in, int inl)
 
 }
 
-static int asn1_bio_flush_ex(BIO *b, BIO_ASN1_BUF_CTX *ctx,
+static int __cdecl asn1_bio_flush_ex(BIO *b, BIO_ASN1_BUF_CTX *ctx,
                              asn1_ps_func *cleanup, asn1_bio_state_t next)
 {
     int ret;
@@ -271,7 +271,7 @@ static int asn1_bio_flush_ex(BIO *b, BIO_ASN1_BUF_CTX *ctx,
     return ret;
 }
 
-static int asn1_bio_setup_ex(BIO *b, BIO_ASN1_BUF_CTX *ctx,
+static int __cdecl asn1_bio_setup_ex(BIO *b, BIO_ASN1_BUF_CTX *ctx,
                              asn1_ps_func *setup,
                              asn1_bio_state_t ex_state,
                              asn1_bio_state_t other_state)
@@ -287,7 +287,7 @@ static int asn1_bio_setup_ex(BIO *b, BIO_ASN1_BUF_CTX *ctx,
     return 1;
 }
 
-static int asn1_bio_read(BIO *b, char *in, int inl)
+static int __cdecl asn1_bio_read(BIO *b, char *in, int inl)
 {
     BIO *next = BIO_next(b);
     if (next == NULL)
@@ -295,12 +295,12 @@ static int asn1_bio_read(BIO *b, char *in, int inl)
     return BIO_read(next, in, inl);
 }
 
-static int asn1_bio_puts(BIO *b, const char *str)
+static int __cdecl asn1_bio_puts(BIO *b, const char *str)
 {
     return asn1_bio_write(b, str, strlen(str));
 }
 
-static int asn1_bio_gets(BIO *b, char *str, int size)
+static int __cdecl asn1_bio_gets(BIO *b, char *str, int size)
 {
     BIO *next = BIO_next(b);
     if (next == NULL)
@@ -308,7 +308,7 @@ static int asn1_bio_gets(BIO *b, char *str, int size)
     return BIO_gets(next, str, size);
 }
 
-static long asn1_bio_callback_ctrl(BIO *b, int cmd, BIO_info_cb *fp)
+static long __cdecl asn1_bio_callback_ctrl(BIO *b, int cmd, BIO_info_cb *fp)
 {
     BIO *next = BIO_next(b);
     if (next == NULL)
@@ -316,7 +316,7 @@ static long asn1_bio_callback_ctrl(BIO *b, int cmd, BIO_info_cb *fp)
     return BIO_callback_ctrl(next, cmd, fp);
 }
 
-static long asn1_bio_ctrl(BIO *b, int cmd, long arg1, void *arg2)
+static long __cdecl asn1_bio_ctrl(BIO *b, int cmd, long arg1, void *arg2)
 {
     BIO_ASN1_BUF_CTX *ctx;
     BIO_ASN1_EX_FUNCS *ex_func;
@@ -419,25 +419,25 @@ static int asn1_bio_get_ex(BIO *b, int cmd,
     return ret;
 }
 
-int BIO_asn1_set_prefix(BIO *b, asn1_ps_func *prefix,
+int __cdecl BIO_asn1_set_prefix(BIO *b, asn1_ps_func *prefix,
                         asn1_ps_func *prefix_free)
 {
     return asn1_bio_set_ex(b, BIO_C_SET_PREFIX, prefix, prefix_free);
 }
 
-int BIO_asn1_get_prefix(BIO *b, asn1_ps_func **pprefix,
+int __cdecl BIO_asn1_get_prefix(BIO *b, asn1_ps_func **pprefix,
                         asn1_ps_func **pprefix_free)
 {
     return asn1_bio_get_ex(b, BIO_C_GET_PREFIX, pprefix, pprefix_free);
 }
 
-int BIO_asn1_set_suffix(BIO *b, asn1_ps_func *suffix,
+int __cdecl BIO_asn1_set_suffix(BIO *b, asn1_ps_func *suffix,
                         asn1_ps_func *suffix_free)
 {
     return asn1_bio_set_ex(b, BIO_C_SET_SUFFIX, suffix, suffix_free);
 }
 
-int BIO_asn1_get_suffix(BIO *b, asn1_ps_func **psuffix,
+int __cdecl BIO_asn1_get_suffix(BIO *b, asn1_ps_func **psuffix,
                         asn1_ps_func **psuffix_free)
 {
     return asn1_bio_get_ex(b, BIO_C_GET_SUFFIX, psuffix, psuffix_free);
diff --git a/crypto/asn1/bio_ndef.c b/crypto/asn1/bio_ndef.c
index 6222c99074..fbc2b8a0cb 100644
--- a/crypto/asn1/bio_ndef.c
+++ b/crypto/asn1/bio_ndef.c
@@ -42,14 +42,14 @@ typedef struct ndef_aux_st {
     unsigned char *derbuf;
 } NDEF_SUPPORT;
 
-static int ndef_prefix(BIO *b, unsigned char **pbuf, int *plen, void *parg);
-static int ndef_prefix_free(BIO *b, unsigned char **pbuf, int *plen,
+static int __cdecl ndef_prefix(BIO *b, unsigned char **pbuf, int *plen, void *parg);
+static int __cdecl ndef_prefix_free(BIO *b, unsigned char **pbuf, int *plen,
                             void *parg);
-static int ndef_suffix(BIO *b, unsigned char **pbuf, int *plen, void *parg);
-static int ndef_suffix_free(BIO *b, unsigned char **pbuf, int *plen,
+static int __cdecl ndef_suffix(BIO *b, unsigned char **pbuf, int *plen, void *parg);
+static int __cdecl ndef_suffix_free(BIO *b, unsigned char **pbuf, int *plen,
                             void *parg);
 
-BIO *BIO_new_NDEF(BIO *out, ASN1_VALUE *val, const ASN1_ITEM *it)
+BIO * __cdecl BIO_new_NDEF(BIO *out, ASN1_VALUE *val, const ASN1_ITEM *it)
 {
     NDEF_SUPPORT *ndef_aux = NULL;
     BIO *asn_bio = NULL;
@@ -101,7 +101,7 @@ BIO *BIO_new_NDEF(BIO *out, ASN1_VALUE *val, const ASN1_ITEM *it)
     return NULL;
 }
 
-static int ndef_prefix(BIO *b, unsigned char **pbuf, int *plen, void *parg)
+static int __cdecl ndef_prefix(BIO *b, unsigned char **pbuf, int *plen, void *parg)
 {
     NDEF_SUPPORT *ndef_aux;
     unsigned char *p;
@@ -130,7 +130,7 @@ static int ndef_prefix(BIO *b, unsigned char **pbuf, int *plen, void *parg)
     return 1;
 }
 
-static int ndef_prefix_free(BIO *b, unsigned char **pbuf, int *plen,
+static int __cdecl ndef_prefix_free(BIO *b, unsigned char **pbuf, int *plen,
                             void *parg)
 {
     NDEF_SUPPORT *ndef_aux;
@@ -148,7 +148,7 @@ static int ndef_prefix_free(BIO *b, unsigned char **pbuf, int *plen,
     return 1;
 }
 
-static int ndef_suffix_free(BIO *b, unsigned char **pbuf, int *plen,
+static int __cdecl ndef_suffix_free(BIO *b, unsigned char **pbuf, int *plen,
                             void *parg)
 {
     NDEF_SUPPORT **pndef_aux = (NDEF_SUPPORT **)parg;
@@ -159,7 +159,7 @@ static int ndef_suffix_free(BIO *b, unsigned char **pbuf, int *plen,
     return 1;
 }
 
-static int ndef_suffix(BIO *b, unsigned char **pbuf, int *plen, void *parg)
+static int __cdecl ndef_suffix(BIO *b, unsigned char **pbuf, int *plen, void *parg)
 {
     NDEF_SUPPORT *ndef_aux;
     unsigned char *p;
diff --git a/crypto/asn1/d2i_pr.c b/crypto/asn1/d2i_pr.c
index aa0d6ad6ae..070ba42f4b 100644
--- a/crypto/asn1/d2i_pr.c
+++ b/crypto/asn1/d2i_pr.c
@@ -18,7 +18,7 @@
 #include "internal/asn1_int.h"
 #include "internal/evp_int.h"
 
-EVP_PKEY *d2i_PrivateKey(int type, EVP_PKEY **a, const unsigned char **pp,
+EVP_PKEY * __cdecl d2i_PrivateKey(int type, EVP_PKEY **a, const unsigned char **pp,
                          long length)
 {
     EVP_PKEY *ret;
@@ -76,7 +76,7 @@ EVP_PKEY *d2i_PrivateKey(int type, EVP_PKEY **a, const unsigned char **pp,
  * type
  */
 
-EVP_PKEY *d2i_AutoPrivateKey(EVP_PKEY **a, const unsigned char **pp,
+EVP_PKEY * __cdecl d2i_AutoPrivateKey(EVP_PKEY **a, const unsigned char **pp,
                              long length)
 {
     STACK_OF(ASN1_TYPE) *inkey;
diff --git a/crypto/asn1/d2i_pu.c b/crypto/asn1/d2i_pu.c
index 7bc16c7bce..6ebe84f288 100644
--- a/crypto/asn1/d2i_pu.c
+++ b/crypto/asn1/d2i_pu.c
@@ -19,7 +19,7 @@
 
 #include "internal/evp_int.h"
 
-EVP_PKEY *d2i_PublicKey(int type, EVP_PKEY **a, const unsigned char **pp,
+EVP_PKEY * __cdecl d2i_PublicKey(int type, EVP_PKEY **a, const unsigned char **pp,
                         long length)
 {
     EVP_PKEY *ret;
diff --git a/crypto/asn1/evp_asn1.c b/crypto/asn1/evp_asn1.c
index 895085a520..0dfb92e346 100644
--- a/crypto/asn1/evp_asn1.c
+++ b/crypto/asn1/evp_asn1.c
@@ -12,7 +12,7 @@
 #include <openssl/asn1.h>
 #include <openssl/asn1t.h>
 
-int ASN1_TYPE_set_octetstring(ASN1_TYPE *a, unsigned char *data, int len)
+int __cdecl ASN1_TYPE_set_octetstring(ASN1_TYPE *a, unsigned char *data, int len)
 {
     ASN1_STRING *os;
 
@@ -27,7 +27,7 @@ int ASN1_TYPE_set_octetstring(ASN1_TYPE *a, unsigned char *data, int len)
 }
 
 /* int max_len:  for returned value    */
-int ASN1_TYPE_get_octetstring(const ASN1_TYPE *a, unsigned char *data, int max_len)
+int __cdecl ASN1_TYPE_get_octetstring(const ASN1_TYPE *a, unsigned char *data, int max_len)
 {
     int ret, num;
     const unsigned char *p;
@@ -58,7 +58,7 @@ ASN1_SEQUENCE(asn1_int_oct) = {
 
 DECLARE_ASN1_ITEM(asn1_int_oct)
 
-int ASN1_TYPE_set_int_octetstring(ASN1_TYPE *a, long num, unsigned char *data,
+int __cdecl ASN1_TYPE_set_int_octetstring(ASN1_TYPE *a, long num, unsigned char *data,
                                   int len)
 {
     asn1_int_oct atmp;
@@ -80,7 +80,7 @@ int ASN1_TYPE_set_int_octetstring(ASN1_TYPE *a, long num, unsigned char *data,
  * we return the actual length...
  */
 /* int max_len:  for returned value    */
-int ASN1_TYPE_get_int_octetstring(const ASN1_TYPE *a, long *num,
+int __cdecl ASN1_TYPE_get_int_octetstring(const ASN1_TYPE *a, long *num,
                                   unsigned char *data, int max_len)
 {
     asn1_int_oct *atmp = NULL;
diff --git a/crypto/asn1/f_int.c b/crypto/asn1/f_int.c
index 6d6bddc651..bc7d6d73ea 100644
--- a/crypto/asn1/f_int.c
+++ b/crypto/asn1/f_int.c
@@ -13,7 +13,7 @@
 #include <openssl/buffer.h>
 #include <openssl/asn1.h>
 
-int i2a_ASN1_INTEGER(BIO *bp, const ASN1_INTEGER *a)
+int __cdecl i2a_ASN1_INTEGER(BIO *bp, const ASN1_INTEGER *a)
 {
     int i, n = 0;
     static const char *h = "0123456789ABCDEF";
@@ -51,7 +51,7 @@ int i2a_ASN1_INTEGER(BIO *bp, const ASN1_INTEGER *a)
     return -1;
 }
 
-int a2i_ASN1_INTEGER(BIO *bp, ASN1_INTEGER *bs, char *buf, int size)
+int __cdecl a2i_ASN1_INTEGER(BIO *bp, ASN1_INTEGER *bs, char *buf, int size)
 {
     int i, j, k, m, n, again, bufsize;
     unsigned char *s = NULL, *sp;
@@ -142,12 +142,12 @@ int a2i_ASN1_INTEGER(BIO *bp, ASN1_INTEGER *bs, char *buf, int size)
     return 0;
 }
 
-int i2a_ASN1_ENUMERATED(BIO *bp, const ASN1_ENUMERATED *a)
+int __cdecl i2a_ASN1_ENUMERATED(BIO *bp, const ASN1_ENUMERATED *a)
 {
     return i2a_ASN1_INTEGER(bp, a);
 }
 
-int a2i_ASN1_ENUMERATED(BIO *bp, ASN1_ENUMERATED *bs, char *buf, int size)
+int __cdecl a2i_ASN1_ENUMERATED(BIO *bp, ASN1_ENUMERATED *bs, char *buf, int size)
 {
     int rv = a2i_ASN1_INTEGER(bp, bs, buf, size);
     if (rv == 1)
diff --git a/crypto/asn1/f_string.c b/crypto/asn1/f_string.c
index f893489a67..68ee2f8324 100644
--- a/crypto/asn1/f_string.c
+++ b/crypto/asn1/f_string.c
@@ -13,7 +13,7 @@
 #include <openssl/buffer.h>
 #include <openssl/asn1.h>
 
-int i2a_ASN1_STRING(BIO *bp, const ASN1_STRING *a, int type)
+int __cdecl i2a_ASN1_STRING(BIO *bp, const ASN1_STRING *a, int type)
 {
     int i, n = 0;
     static const char *h = "0123456789ABCDEF";
@@ -45,7 +45,7 @@ int i2a_ASN1_STRING(BIO *bp, const ASN1_STRING *a, int type)
     return -1;
 }
 
-int a2i_ASN1_STRING(BIO *bp, ASN1_STRING *bs, char *buf, int size)
+int __cdecl a2i_ASN1_STRING(BIO *bp, ASN1_STRING *bs, char *buf, int size)
 {
     int i, j, k, m, n, again, bufsize;
     unsigned char *s = NULL, *sp;
diff --git a/crypto/asn1/i2d_pr.c b/crypto/asn1/i2d_pr.c
index 445b0c8425..748901dbc0 100644
--- a/crypto/asn1/i2d_pr.c
+++ b/crypto/asn1/i2d_pr.c
@@ -14,7 +14,7 @@
 #include "internal/asn1_int.h"
 #include "internal/evp_int.h"
 
-int i2d_PrivateKey(EVP_PKEY *a, unsigned char **pp)
+int __cdecl i2d_PrivateKey(EVP_PKEY *a, unsigned char **pp)
 {
     if (a->ameth && a->ameth->old_priv_encode) {
         return a->ameth->old_priv_encode(a, pp);
diff --git a/crypto/asn1/i2d_pu.c b/crypto/asn1/i2d_pu.c
index 8986c43cbe..a78958ab52 100644
--- a/crypto/asn1/i2d_pu.c
+++ b/crypto/asn1/i2d_pu.c
@@ -16,7 +16,7 @@
 #include <openssl/dsa.h>
 #include <openssl/ec.h>
 
-int i2d_PublicKey(EVP_PKEY *a, unsigned char **pp)
+int __cdecl i2d_PublicKey(EVP_PKEY *a, unsigned char **pp)
 {
     switch (EVP_PKEY_id(a)) {
 #ifndef OPENSSL_NO_RSA
diff --git a/crypto/asn1/p5_pbe.c b/crypto/asn1/p5_pbe.c
index ab7e16898f..a6a1194909 100644
--- a/crypto/asn1/p5_pbe.c
+++ b/crypto/asn1/p5_pbe.c
@@ -24,7 +24,7 @@ IMPLEMENT_ASN1_FUNCTIONS(PBEPARAM)
 
 /* Set an algorithm identifier for a PKCS#5 PBE algorithm */
 
-int PKCS5_pbe_set0_algor(X509_ALGOR *algor, int alg, int iter,
+int __cdecl PKCS5_pbe_set0_algor(X509_ALGOR *algor, int alg, int iter,
                          const unsigned char *salt, int saltlen)
 {
     PBEPARAM *pbe = NULL;
@@ -78,7 +78,7 @@ int PKCS5_pbe_set0_algor(X509_ALGOR *algor, int alg, int iter,
 
 /* Return an algorithm identifier for a PKCS#5 PBE algorithm */
 
-X509_ALGOR *PKCS5_pbe_set(int alg, int iter,
+X509_ALGOR * __cdecl PKCS5_pbe_set(int alg, int iter,
                           const unsigned char *salt, int saltlen)
 {
     X509_ALGOR *ret;
diff --git a/crypto/asn1/p5_pbev2.c b/crypto/asn1/p5_pbev2.c
index f91ba08f1e..4a2f09a3e0 100644
--- a/crypto/asn1/p5_pbev2.c
+++ b/crypto/asn1/p5_pbev2.c
@@ -37,7 +37,7 @@ IMPLEMENT_ASN1_FUNCTIONS(PBKDF2PARAM)
  * and IV.
  */
 
-X509_ALGOR *PKCS5_pbe2_set_iv(const EVP_CIPHER *cipher, int iter,
+X509_ALGOR * __cdecl PKCS5_pbe2_set_iv(const EVP_CIPHER *cipher, int iter,
                               unsigned char *salt, int saltlen,
                               unsigned char *aiv, int prf_nid)
 {
@@ -140,13 +140,13 @@ X509_ALGOR *PKCS5_pbe2_set_iv(const EVP_CIPHER *cipher, int iter,
     return NULL;
 }
 
-X509_ALGOR *PKCS5_pbe2_set(const EVP_CIPHER *cipher, int iter,
+X509_ALGOR * __cdecl PKCS5_pbe2_set(const EVP_CIPHER *cipher, int iter,
                            unsigned char *salt, int saltlen)
 {
     return PKCS5_pbe2_set_iv(cipher, iter, salt, saltlen, NULL, -1);
 }
 
-X509_ALGOR *PKCS5_pbkdf2_set(int iter, unsigned char *salt, int saltlen,
+X509_ALGOR * __cdecl PKCS5_pbkdf2_set(int iter, unsigned char *salt, int saltlen,
                              int prf_nid, int keylen)
 {
     X509_ALGOR *keyfunc = NULL;
diff --git a/crypto/asn1/p5_scrypt.c b/crypto/asn1/p5_scrypt.c
index 1491d96ec8..5df288d9b3 100644
--- a/crypto/asn1/p5_scrypt.c
+++ b/crypto/asn1/p5_scrypt.c
@@ -36,7 +36,7 @@ static X509_ALGOR *pkcs5_scrypt_set(const unsigned char *salt, size_t saltlen,
  * Return an algorithm identifier for a PKCS#5 v2.0 PBE algorithm using scrypt
  */
 
-X509_ALGOR *PKCS5_pbe2_set_scrypt(const EVP_CIPHER *cipher,
+X509_ALGOR * __cdecl PKCS5_pbe2_set_scrypt(const EVP_CIPHER *cipher,
                                   const unsigned char *salt, int saltlen,
                                   unsigned char *aiv, uint64_t N, uint64_t r,
                                   uint64_t p)
@@ -209,7 +209,7 @@ static X509_ALGOR *pkcs5_scrypt_set(const unsigned char *salt, size_t saltlen,
     return NULL;
 }
 
-int PKCS5_v2_scrypt_keyivgen(EVP_CIPHER_CTX *ctx, const char *pass,
+int __cdecl PKCS5_v2_scrypt_keyivgen(EVP_CIPHER_CTX *ctx, const char *pass,
                              int passlen, ASN1_TYPE *param,
                              const EVP_CIPHER *c, const EVP_MD *md, int en_de)
 {
diff --git a/crypto/asn1/p8_pkey.c b/crypto/asn1/p8_pkey.c
index dbee827e0d..3055c547d5 100644
--- a/crypto/asn1/p8_pkey.c
+++ b/crypto/asn1/p8_pkey.c
@@ -35,7 +35,7 @@ ASN1_SEQUENCE_cb(PKCS8_PRIV_KEY_INFO, pkey_cb) = {
 
 IMPLEMENT_ASN1_FUNCTIONS(PKCS8_PRIV_KEY_INFO)
 
-int PKCS8_pkey_set0(PKCS8_PRIV_KEY_INFO *priv, ASN1_OBJECT *aobj,
+int __cdecl PKCS8_pkey_set0(PKCS8_PRIV_KEY_INFO *priv, ASN1_OBJECT *aobj,
                     int version,
                     int ptype, void *pval, unsigned char *penc, int penclen)
 {
@@ -50,7 +50,7 @@ int PKCS8_pkey_set0(PKCS8_PRIV_KEY_INFO *priv, ASN1_OBJECT *aobj,
     return 1;
 }
 
-int PKCS8_pkey_get0(const ASN1_OBJECT **ppkalg,
+int __cdecl PKCS8_pkey_get0(const ASN1_OBJECT **ppkalg,
                     const unsigned char **pk, int *ppklen,
                     const X509_ALGOR **pa, const PKCS8_PRIV_KEY_INFO *p8)
 {
@@ -66,12 +66,12 @@ int PKCS8_pkey_get0(const ASN1_OBJECT **ppkalg,
 }
 
 const STACK_OF(X509_ATTRIBUTE) *
-PKCS8_pkey_get0_attrs(const PKCS8_PRIV_KEY_INFO *p8)
+__cdecl PKCS8_pkey_get0_attrs(const PKCS8_PRIV_KEY_INFO *p8)
 {
     return p8->attributes;
 }
 
-int PKCS8_pkey_add1_attr_by_NID(PKCS8_PRIV_KEY_INFO *p8, int nid, int type,
+int __cdecl PKCS8_pkey_add1_attr_by_NID(PKCS8_PRIV_KEY_INFO *p8, int nid, int type,
                                 const unsigned char *bytes, int len)
 {
     if (X509at_add1_attr_by_NID(&p8->attributes, nid, type, bytes, len) != NULL)
diff --git a/crypto/asn1/t_bitst.c b/crypto/asn1/t_bitst.c
index c0aeca4c78..0faad36e59 100644
--- a/crypto/asn1/t_bitst.c
+++ b/crypto/asn1/t_bitst.c
@@ -12,7 +12,7 @@
 #include <openssl/conf.h>
 #include <openssl/x509v3.h>
 
-int ASN1_BIT_STRING_name_print(BIO *out, ASN1_BIT_STRING *bs,
+int __cdecl ASN1_BIT_STRING_name_print(BIO *out, ASN1_BIT_STRING *bs,
                                BIT_STRING_BITNAME *tbl, int indent)
 {
     BIT_STRING_BITNAME *bnam;
@@ -30,7 +30,7 @@ int ASN1_BIT_STRING_name_print(BIO *out, ASN1_BIT_STRING *bs,
     return 1;
 }
 
-int ASN1_BIT_STRING_set_asc(ASN1_BIT_STRING *bs, const char *name, int value,
+int __cdecl ASN1_BIT_STRING_set_asc(ASN1_BIT_STRING *bs, const char *name, int value,
                             BIT_STRING_BITNAME *tbl)
 {
     int bitnum;
@@ -44,7 +44,7 @@ int ASN1_BIT_STRING_set_asc(ASN1_BIT_STRING *bs, const char *name, int value,
     return 1;
 }
 
-int ASN1_BIT_STRING_num_asc(const char *name, BIT_STRING_BITNAME *tbl)
+int __cdecl ASN1_BIT_STRING_num_asc(const char *name, BIT_STRING_BITNAME *tbl)
 {
     BIT_STRING_BITNAME *bnam;
     for (bnam = tbl; bnam->lname; bnam++) {
diff --git a/crypto/asn1/t_pkey.c b/crypto/asn1/t_pkey.c
index 3b2c9df891..ab3d27644d 100644
--- a/crypto/asn1/t_pkey.c
+++ b/crypto/asn1/t_pkey.c
@@ -18,7 +18,7 @@
 /* Maximum indent */
 #define ASN1_PRINT_MAX_INDENT 128
 
-int ASN1_buf_print(BIO *bp, const unsigned char *buf, size_t buflen, int indent)
+int __cdecl ASN1_buf_print(BIO *bp, const unsigned char *buf, size_t buflen, int indent)
 {
     size_t i;
 
@@ -42,7 +42,7 @@ int ASN1_buf_print(BIO *bp, const unsigned char *buf, size_t buflen, int indent)
     return 1;
 }
 
-int ASN1_bn_print(BIO *bp, const char *number, const BIGNUM *num,
+int __cdecl ASN1_bn_print(BIO *bp, const char *number, const BIGNUM *num,
                   unsigned char *ign, int indent)
 {
     int n, rv = 0;
diff --git a/crypto/asn1/t_spki.c b/crypto/asn1/t_spki.c
index 51b56d0aa9..4ae85db363 100644
--- a/crypto/asn1/t_spki.c
+++ b/crypto/asn1/t_spki.c
@@ -17,7 +17,7 @@
 
 /* Print out an SPKI */
 
-int NETSCAPE_SPKI_print(BIO *out, NETSCAPE_SPKI *spki)
+int __cdecl NETSCAPE_SPKI_print(BIO *out, NETSCAPE_SPKI *spki)
 {
     EVP_PKEY *pkey;
     ASN1_IA5STRING *chal;
diff --git a/crypto/asn1/tasn_dec.c b/crypto/asn1/tasn_dec.c
index c2a521ed51..1cf4f1067d 100644
--- a/crypto/asn1/tasn_dec.c
+++ b/crypto/asn1/tasn_dec.c
@@ -82,7 +82,7 @@ static const unsigned long tag2bit[32] = {
     B_ASN1_UNIVERSALSTRING, B_ASN1_UNKNOWN, B_ASN1_BMPSTRING, B_ASN1_UNKNOWN,
 };
 
-unsigned long ASN1_tag2bit(int tag)
+unsigned long __cdecl ASN1_tag2bit(int tag)
 {
     if ((tag < 0) || (tag > 30))
         return 0;
@@ -102,7 +102,7 @@ unsigned long ASN1_tag2bit(int tag)
  * this will simply be a special case.
  */
 
-ASN1_VALUE *ASN1_item_d2i(ASN1_VALUE **pval,
+ASN1_VALUE * __cdecl ASN1_item_d2i(ASN1_VALUE **pval,
                           const unsigned char **in, long len,
                           const ASN1_ITEM *it)
 {
@@ -116,7 +116,7 @@ ASN1_VALUE *ASN1_item_d2i(ASN1_VALUE **pval,
     return NULL;
 }
 
-int ASN1_item_ex_d2i(ASN1_VALUE **pval, const unsigned char **in, long len,
+int __cdecl ASN1_item_ex_d2i(ASN1_VALUE **pval, const unsigned char **in, long len,
                      const ASN1_ITEM *it,
                      int tag, int aclass, char opt, ASN1_TLC *ctx)
 {
diff --git a/crypto/asn1/tasn_enc.c b/crypto/asn1/tasn_enc.c
index 30be314ff9..67028de15d 100644
--- a/crypto/asn1/tasn_enc.c
+++ b/crypto/asn1/tasn_enc.c
@@ -33,13 +33,13 @@ static int asn1_ex_i2c(ASN1_VALUE **pval, unsigned char *cout, int *putype,
  * indefinite length constructed encoding, where appropriate
  */
 
-int ASN1_item_ndef_i2d(ASN1_VALUE *val, unsigned char **out,
+int __cdecl ASN1_item_ndef_i2d(ASN1_VALUE *val, unsigned char **out,
                        const ASN1_ITEM *it)
 {
     return asn1_item_flags_i2d(val, out, it, ASN1_TFLG_NDEF);
 }
 
-int ASN1_item_i2d(ASN1_VALUE *val, unsigned char **out, const ASN1_ITEM *it)
+int __cdecl ASN1_item_i2d(ASN1_VALUE *val, unsigned char **out, const ASN1_ITEM *it)
 {
     return asn1_item_flags_i2d(val, out, it, 0);
 }
@@ -79,7 +79,7 @@ static int asn1_item_flags_i2d(ASN1_VALUE *val, unsigned char **out,
  * performs the normal item handling: it can be used in external types.
  */
 
-int ASN1_item_ex_i2d(ASN1_VALUE **pval, unsigned char **out,
+int __cdecl ASN1_item_ex_i2d(ASN1_VALUE **pval, unsigned char **out,
                      const ASN1_ITEM *it, int tag, int aclass)
 {
     const ASN1_TEMPLATE *tt = NULL;
@@ -354,7 +354,7 @@ typedef struct {
     ASN1_VALUE *field;
 } DER_ENC;
 
-static int der_cmp(const void *a, const void *b)
+static int __cdecl der_cmp(const void *a, const void *b)
 {
     const DER_ENC *d1 = a, *d2 = b;
     int cmplen, i;
diff --git a/crypto/asn1/tasn_fre.c b/crypto/asn1/tasn_fre.c
index bbce489fe0..d59a6519cc 100644
--- a/crypto/asn1/tasn_fre.c
+++ b/crypto/asn1/tasn_fre.c
@@ -15,12 +15,12 @@
 
 /* Free up an ASN1 structure */
 
-void ASN1_item_free(ASN1_VALUE *val, const ASN1_ITEM *it)
+void __cdecl ASN1_item_free(ASN1_VALUE *val, const ASN1_ITEM *it)
 {
     asn1_item_embed_free(&val, it, 0);
 }
 
-void ASN1_item_ex_free(ASN1_VALUE **pval, const ASN1_ITEM *it)
+void __cdecl ASN1_item_ex_free(ASN1_VALUE **pval, const ASN1_ITEM *it)
 {
     asn1_item_embed_free(pval, it, 0);
 }
diff --git a/crypto/asn1/tasn_new.c b/crypto/asn1/tasn_new.c
index 6b8ea8ddd7..6c35cb2443 100644
--- a/crypto/asn1/tasn_new.c
+++ b/crypto/asn1/tasn_new.c
@@ -24,7 +24,7 @@ static int asn1_template_new(ASN1_VALUE **pval, const ASN1_TEMPLATE *tt);
 static void asn1_template_clear(ASN1_VALUE **pval, const ASN1_TEMPLATE *tt);
 static void asn1_primitive_clear(ASN1_VALUE **pval, const ASN1_ITEM *it);
 
-ASN1_VALUE *ASN1_item_new(const ASN1_ITEM *it)
+ASN1_VALUE * __cdecl ASN1_item_new(const ASN1_ITEM *it)
 {
     ASN1_VALUE *ret = NULL;
     if (ASN1_item_ex_new(&ret, it) > 0)
@@ -34,7 +34,7 @@ ASN1_VALUE *ASN1_item_new(const ASN1_ITEM *it)
 
 /* Allocate an ASN1 structure */
 
-int ASN1_item_ex_new(ASN1_VALUE **pval, const ASN1_ITEM *it)
+int __cdecl ASN1_item_ex_new(ASN1_VALUE **pval, const ASN1_ITEM *it)
 {
     return asn1_item_embed_new(pval, it, 0);
 }
diff --git a/crypto/asn1/tasn_prn.c b/crypto/asn1/tasn_prn.c
index 1fb66f1062..ca8babb602 100644
--- a/crypto/asn1/tasn_prn.c
+++ b/crypto/asn1/tasn_prn.c
@@ -32,7 +32,7 @@ static ASN1_PCTX default_pctx = {
     0                           /* str_flags */
 };
 
-ASN1_PCTX *ASN1_PCTX_new(void)
+ASN1_PCTX * __cdecl ASN1_PCTX_new(void)
 {
     ASN1_PCTX *ret;
 
@@ -44,57 +44,57 @@ ASN1_PCTX *ASN1_PCTX_new(void)
     return ret;
 }
 
-void ASN1_PCTX_free(ASN1_PCTX *p)
+void __cdecl ASN1_PCTX_free(ASN1_PCTX *p)
 {
     OPENSSL_free(p);
 }
 
-unsigned long ASN1_PCTX_get_flags(const ASN1_PCTX *p)
+unsigned long __cdecl ASN1_PCTX_get_flags(const ASN1_PCTX *p)
 {
     return p->flags;
 }
 
-void ASN1_PCTX_set_flags(ASN1_PCTX *p, unsigned long flags)
+void __cdecl ASN1_PCTX_set_flags(ASN1_PCTX *p, unsigned long flags)
 {
     p->flags = flags;
 }
 
-unsigned long ASN1_PCTX_get_nm_flags(const ASN1_PCTX *p)
+unsigned long __cdecl ASN1_PCTX_get_nm_flags(const ASN1_PCTX *p)
 {
     return p->nm_flags;
 }
 
-void ASN1_PCTX_set_nm_flags(ASN1_PCTX *p, unsigned long flags)
+void __cdecl ASN1_PCTX_set_nm_flags(ASN1_PCTX *p, unsigned long flags)
 {
     p->nm_flags = flags;
 }
 
-unsigned long ASN1_PCTX_get_cert_flags(const ASN1_PCTX *p)
+unsigned long __cdecl ASN1_PCTX_get_cert_flags(const ASN1_PCTX *p)
 {
     return p->cert_flags;
 }
 
-void ASN1_PCTX_set_cert_flags(ASN1_PCTX *p, unsigned long flags)
+void __cdecl ASN1_PCTX_set_cert_flags(ASN1_PCTX *p, unsigned long flags)
 {
     p->cert_flags = flags;
 }
 
-unsigned long ASN1_PCTX_get_oid_flags(const ASN1_PCTX *p)
+unsigned long __cdecl ASN1_PCTX_get_oid_flags(const ASN1_PCTX *p)
 {
     return p->oid_flags;
 }
 
-void ASN1_PCTX_set_oid_flags(ASN1_PCTX *p, unsigned long flags)
+void __cdecl ASN1_PCTX_set_oid_flags(ASN1_PCTX *p, unsigned long flags)
 {
     p->oid_flags = flags;
 }
 
-unsigned long ASN1_PCTX_get_str_flags(const ASN1_PCTX *p)
+unsigned long __cdecl ASN1_PCTX_get_str_flags(const ASN1_PCTX *p)
 {
     return p->str_flags;
 }
 
-void ASN1_PCTX_set_str_flags(ASN1_PCTX *p, unsigned long flags)
+void __cdecl ASN1_PCTX_set_str_flags(ASN1_PCTX *p, unsigned long flags)
 {
     p->str_flags = flags;
 }
@@ -118,7 +118,7 @@ static int asn1_print_fsname(BIO *out, int indent,
                              const char *fname, const char *sname,
                              const ASN1_PCTX *pctx);
 
-int ASN1_item_print(BIO *out, ASN1_VALUE *ifld, int indent,
+int __cdecl ASN1_item_print(BIO *out, ASN1_VALUE *ifld, int indent,
                     const ASN1_ITEM *it, const ASN1_PCTX *pctx)
 {
     const char *sname;
diff --git a/crypto/asn1/tasn_scn.c b/crypto/asn1/tasn_scn.c
index e1df2cfcae..312fc05033 100644
--- a/crypto/asn1/tasn_scn.c
+++ b/crypto/asn1/tasn_scn.c
@@ -22,7 +22,7 @@
  * passing details to a callback.
  */
 
-ASN1_SCTX *ASN1_SCTX_new(int (*scan_cb) (ASN1_SCTX *ctx))
+ASN1_SCTX * __cdecl ASN1_SCTX_new(int (*scan_cb) (ASN1_SCTX *ctx))
 {
     ASN1_SCTX *ret = OPENSSL_zalloc(sizeof(*ret));
 
@@ -34,32 +34,32 @@ ASN1_SCTX *ASN1_SCTX_new(int (*scan_cb) (ASN1_SCTX *ctx))
     return ret;
 }
 
-void ASN1_SCTX_free(ASN1_SCTX *p)
+void __cdecl ASN1_SCTX_free(ASN1_SCTX *p)
 {
     OPENSSL_free(p);
 }
 
-const ASN1_ITEM *ASN1_SCTX_get_item(ASN1_SCTX *p)
+const ASN1_ITEM * __cdecl ASN1_SCTX_get_item(ASN1_SCTX *p)
 {
     return p->it;
 }
 
-const ASN1_TEMPLATE *ASN1_SCTX_get_template(ASN1_SCTX *p)
+const ASN1_TEMPLATE * __cdecl ASN1_SCTX_get_template(ASN1_SCTX *p)
 {
     return p->tt;
 }
 
-unsigned long ASN1_SCTX_get_flags(ASN1_SCTX *p)
+unsigned long __cdecl ASN1_SCTX_get_flags(ASN1_SCTX *p)
 {
     return p->flags;
 }
 
-void ASN1_SCTX_set_app_data(ASN1_SCTX *p, void *data)
+void __cdecl ASN1_SCTX_set_app_data(ASN1_SCTX *p, void *data)
 {
     p->app_data = data;
 }
 
-void *ASN1_SCTX_get_app_data(ASN1_SCTX *p)
+void * __cdecl ASN1_SCTX_get_app_data(ASN1_SCTX *p)
 {
     return p->app_data;
 }
diff --git a/crypto/asn1/tasn_typ.c b/crypto/asn1/tasn_typ.c
index 98d9879014..727d912a49 100644
--- a/crypto/asn1/tasn_typ.c
+++ b/crypto/asn1/tasn_typ.c
@@ -16,11 +16,11 @@
 #define IMPLEMENT_ASN1_STRING_FUNCTIONS(sname) \
     IMPLEMENT_ASN1_TYPE(sname) \
     IMPLEMENT_ASN1_ENCODE_FUNCTIONS_fname(sname, sname, sname) \
-sname *sname##_new(void) \
+sname * __cdecl sname##_new(void) \
 { \
     return ASN1_STRING_type_new(V_##sname); \
 } \
-void sname##_free(sname *x) \
+void __cdecl sname##_free(sname *x) \
 { \
     ASN1_STRING_free(x); \
 }
diff --git a/crypto/asn1/x_algor.c b/crypto/asn1/x_algor.c
index 853d45b8bc..79d9b62220 100644
--- a/crypto/asn1/x_algor.c
+++ b/crypto/asn1/x_algor.c
@@ -26,7 +26,7 @@ IMPLEMENT_ASN1_FUNCTIONS(X509_ALGOR)
 IMPLEMENT_ASN1_ENCODE_FUNCTIONS_fname(X509_ALGORS, X509_ALGORS, X509_ALGORS)
 IMPLEMENT_ASN1_DUP_FUNCTION(X509_ALGOR)
 
-int X509_ALGOR_set0(X509_ALGOR *alg, ASN1_OBJECT *aobj, int ptype, void *pval)
+int __cdecl X509_ALGOR_set0(X509_ALGOR *alg, ASN1_OBJECT *aobj, int ptype, void *pval)
 {
     if (alg == NULL)
         return 0;
@@ -51,7 +51,7 @@ int X509_ALGOR_set0(X509_ALGOR *alg, ASN1_OBJECT *aobj, int ptype, void *pval)
     return 1;
 }
 
-void X509_ALGOR_get0(const ASN1_OBJECT **paobj, int *pptype,
+void __cdecl X509_ALGOR_get0(const ASN1_OBJECT **paobj, int *pptype,
                      const void **ppval, const X509_ALGOR *algor)
 {
     if (paobj)
@@ -69,7 +69,7 @@ void X509_ALGOR_get0(const ASN1_OBJECT **paobj, int *pptype,
 
 /* Set up an X509_ALGOR DigestAlgorithmIdentifier from an EVP_MD */
 
-void X509_ALGOR_set_md(X509_ALGOR *alg, const EVP_MD *md)
+void __cdecl X509_ALGOR_set_md(X509_ALGOR *alg, const EVP_MD *md)
 {
     int param_type;
 
@@ -82,7 +82,7 @@ void X509_ALGOR_set_md(X509_ALGOR *alg, const EVP_MD *md)
 
 }
 
-int X509_ALGOR_cmp(const X509_ALGOR *a, const X509_ALGOR *b)
+int __cdecl X509_ALGOR_cmp(const X509_ALGOR *a, const X509_ALGOR *b)
 {
     int rv;
     rv = OBJ_cmp(a->algorithm, b->algorithm);
diff --git a/crypto/asn1/x_info.c b/crypto/asn1/x_info.c
index 8d99f07c63..3340ba6e7b 100644
--- a/crypto/asn1/x_info.c
+++ b/crypto/asn1/x_info.c
@@ -13,7 +13,7 @@
 #include <openssl/asn1.h>
 #include <openssl/x509.h>
 
-X509_INFO *X509_INFO_new(void)
+X509_INFO * __cdecl X509_INFO_new(void)
 {
     X509_INFO *ret;
 
@@ -26,7 +26,7 @@ X509_INFO *X509_INFO_new(void)
     return ret;
 }
 
-void X509_INFO_free(X509_INFO *x)
+void __cdecl X509_INFO_free(X509_INFO *x)
 {
     if (x == NULL)
         return;
diff --git a/crypto/asn1/x_pkey.c b/crypto/asn1/x_pkey.c
index 593049f0f2..c5b07e854d 100644
--- a/crypto/asn1/x_pkey.c
+++ b/crypto/asn1/x_pkey.c
@@ -13,7 +13,7 @@
 #include <openssl/objects.h>
 #include <openssl/x509.h>
 
-X509_PKEY *X509_PKEY_new(void)
+X509_PKEY * __cdecl X509_PKEY_new(void)
 {
     X509_PKEY *ret = NULL;
 
@@ -33,7 +33,7 @@ err:
     return NULL;
 }
 
-void X509_PKEY_free(X509_PKEY *x)
+void __cdecl X509_PKEY_free(X509_PKEY *x)
 {
     if (x == NULL)
         return;
diff --git a/crypto/asn1/x_sig.c b/crypto/asn1/x_sig.c
index e465cf2d4d..2e6ec464ad 100644
--- a/crypto/asn1/x_sig.c
+++ b/crypto/asn1/x_sig.c
@@ -20,7 +20,7 @@ ASN1_SEQUENCE(X509_SIG) = {
 
 IMPLEMENT_ASN1_FUNCTIONS(X509_SIG)
 
-void X509_SIG_get0(const X509_SIG *sig, const X509_ALGOR **palg,
+void __cdecl X509_SIG_get0(const X509_SIG *sig, const X509_ALGOR **palg,
                    const ASN1_OCTET_STRING **pdigest)
 {
     if (palg)
@@ -29,7 +29,7 @@ void X509_SIG_get0(const X509_SIG *sig, const X509_ALGOR **palg,
         *pdigest = sig->digest;
 }
 
-void X509_SIG_getm(X509_SIG *sig, X509_ALGOR **palg,
+void __cdecl X509_SIG_getm(X509_SIG *sig, X509_ALGOR **palg,
                    ASN1_OCTET_STRING **pdigest)
 {
     if (palg)
diff --git a/crypto/async/arch/async_null.c b/crypto/async/arch/async_null.c
index 3eaf170f2e..642fcd3534 100644
--- a/crypto/async/arch/async_null.c
+++ b/crypto/async/arch/async_null.c
@@ -11,7 +11,7 @@
 #include "../async_locl.h"
 
 #ifdef ASYNC_NULL
-int ASYNC_is_capable(void)
+int __cdecl ASYNC_is_capable(void)
 {
     return 0;
 }
diff --git a/crypto/async/arch/async_posix.c b/crypto/async/arch/async_posix.c
index 02c342d3df..b91ee1a13b 100644
--- a/crypto/async/arch/async_posix.c
+++ b/crypto/async/arch/async_posix.c
@@ -17,7 +17,7 @@
 
 #define STACKSIZE       32768
 
-int ASYNC_is_capable(void)
+int __cdecl ASYNC_is_capable(void)
 {
     ucontext_t ctx;
 
diff --git a/crypto/async/arch/async_win.c b/crypto/async/arch/async_win.c
index 077d56ced0..d2f30908bd 100644
--- a/crypto/async/arch/async_win.c
+++ b/crypto/async/arch/async_win.c
@@ -15,7 +15,7 @@
 # include <windows.h>
 # include "internal/cryptlib.h"
 
-int ASYNC_is_capable(void)
+int __cdecl ASYNC_is_capable(void)
 {
     return 1;
 }
diff --git a/crypto/async/async.c b/crypto/async/async.c
index 1d83e4576f..3ac0de3ffc 100644
--- a/crypto/async/async.c
+++ b/crypto/async/async.c
@@ -164,8 +164,8 @@ void async_start_func(void)
     }
 }
 
-int ASYNC_start_job(ASYNC_JOB **job, ASYNC_WAIT_CTX *wctx, int *ret,
-                    int (*func)(void *), void *args, size_t size)
+int __cdecl ASYNC_start_job(ASYNC_JOB **job, ASYNC_WAIT_CTX *wctx, int *ret,
+                    int (__cdecl *func)(void *), void *args, size_t size)
 {
     async_ctx *ctx;
 
@@ -252,7 +252,7 @@ err:
     return ASYNC_ERR;
 }
 
-int ASYNC_pause_job(void)
+int __cdecl ASYNC_pause_job(void)
 {
     ASYNC_JOB *job;
     async_ctx *ctx = async_get_ctx();
@@ -313,7 +313,7 @@ void async_deinit(void)
     CRYPTO_THREAD_cleanup_local(&poolkey);
 }
 
-int ASYNC_init_thread(size_t max_size, size_t init_size)
+int __cdecl ASYNC_init_thread(size_t max_size, size_t init_size)
 {
     async_pool *pool;
     size_t curr_size = 0;
@@ -388,7 +388,7 @@ void async_delete_thread_state(void)
     async_ctx_free();
 }
 
-void ASYNC_cleanup_thread(void)
+void __cdecl ASYNC_cleanup_thread(void)
 {
     if (!OPENSSL_init_crypto(OPENSSL_INIT_ASYNC, NULL))
         return;
@@ -396,7 +396,7 @@ void ASYNC_cleanup_thread(void)
     async_delete_thread_state();
 }
 
-ASYNC_JOB *ASYNC_get_current_job(void)
+ASYNC_JOB * __cdecl ASYNC_get_current_job(void)
 {
     async_ctx *ctx;
 
@@ -410,12 +410,12 @@ ASYNC_JOB *ASYNC_get_current_job(void)
     return ctx->currjob;
 }
 
-ASYNC_WAIT_CTX *ASYNC_get_wait_ctx(ASYNC_JOB *job)
+ASYNC_WAIT_CTX * __cdecl ASYNC_get_wait_ctx(ASYNC_JOB *job)
 {
     return job->waitctx;
 }
 
-void ASYNC_block_pause(void)
+void __cdecl ASYNC_block_pause(void)
 {
     async_ctx *ctx;
 
@@ -432,7 +432,7 @@ void ASYNC_block_pause(void)
     ctx->blocked++;
 }
 
-void ASYNC_unblock_pause(void)
+void __cdecl ASYNC_unblock_pause(void)
 {
     async_ctx *ctx;
 
diff --git a/crypto/async/async_err.c b/crypto/async/async_err.c
index fd5527aae8..4b9144eadc 100644
--- a/crypto/async/async_err.c
+++ b/crypto/async/async_err.c
@@ -39,7 +39,7 @@ static const ERR_STRING_DATA ASYNC_str_reasons[] = {
 
 #endif
 
-int ERR_load_ASYNC_strings(void)
+int __cdecl ERR_load_ASYNC_strings(void)
 {
 #ifndef OPENSSL_NO_ERR
     if (ERR_func_error_string(ASYNC_str_functs[0].error) == NULL) {
diff --git a/crypto/async/async_locl.h b/crypto/async/async_locl.h
index d7790293f7..b6352377c9 100644
--- a/crypto/async/async_locl.h
+++ b/crypto/async/async_locl.h
@@ -38,7 +38,7 @@ struct async_ctx_st {
 
 struct async_job_st {
     async_fibre fibrectx;
-    int (*func) (void *);
+    int (__cdecl *func) (void *);
     void *funcargs;
     int ret;
     int status;
@@ -49,7 +49,7 @@ struct fd_lookup_st {
     const void *key;
     OSSL_ASYNC_FD fd;
     void *custom_data;
-    void (*cleanup)(ASYNC_WAIT_CTX *, const void *, OSSL_ASYNC_FD, void *);
+    void (__cdecl *cleanup)(ASYNC_WAIT_CTX *, const void *, OSSL_ASYNC_FD, void *);
     int add;
     int del;
     struct fd_lookup_st *next;
diff --git a/crypto/async/async_wait.c b/crypto/async/async_wait.c
index b23e43e8c8..36ca8f1e03 100644
--- a/crypto/async/async_wait.c
+++ b/crypto/async/async_wait.c
@@ -12,12 +12,12 @@
 
 #include <openssl/err.h>
 
-ASYNC_WAIT_CTX *ASYNC_WAIT_CTX_new(void)
+ASYNC_WAIT_CTX * __cdecl ASYNC_WAIT_CTX_new(void)
 {
     return OPENSSL_zalloc(sizeof(ASYNC_WAIT_CTX));
 }
 
-void ASYNC_WAIT_CTX_free(ASYNC_WAIT_CTX *ctx)
+void __cdecl ASYNC_WAIT_CTX_free(ASYNC_WAIT_CTX *ctx)
 {
     struct fd_lookup_st *curr;
     struct fd_lookup_st *next;
@@ -40,9 +40,9 @@ void ASYNC_WAIT_CTX_free(ASYNC_WAIT_CTX *ctx)
 
     OPENSSL_free(ctx);
 }
-int ASYNC_WAIT_CTX_set_wait_fd(ASYNC_WAIT_CTX *ctx, const void *key,
+int __cdecl ASYNC_WAIT_CTX_set_wait_fd(ASYNC_WAIT_CTX *ctx, const void *key,
                                OSSL_ASYNC_FD fd, void *custom_data,
-                               void (*cleanup)(ASYNC_WAIT_CTX *, const void *,
+                               void (__cdecl *cleanup)(ASYNC_WAIT_CTX *, const void *,
                                                OSSL_ASYNC_FD, void *))
 {
     struct fd_lookup_st *fdlookup;
@@ -63,7 +63,7 @@ int ASYNC_WAIT_CTX_set_wait_fd(ASYNC_WAIT_CTX *ctx, const void *key,
     return 1;
 }
 
-int ASYNC_WAIT_CTX_get_fd(ASYNC_WAIT_CTX *ctx, const void *key,
+int __cdecl ASYNC_WAIT_CTX_get_fd(ASYNC_WAIT_CTX *ctx, const void *key,
                           OSSL_ASYNC_FD *fd, void **custom_data)
 {
     struct fd_lookup_st *curr;
@@ -85,7 +85,7 @@ int ASYNC_WAIT_CTX_get_fd(ASYNC_WAIT_CTX *ctx, const void *key,
     return 0;
 }
 
-int ASYNC_WAIT_CTX_get_all_fds(ASYNC_WAIT_CTX *ctx, OSSL_ASYNC_FD *fd,
+int __cdecl ASYNC_WAIT_CTX_get_all_fds(ASYNC_WAIT_CTX *ctx, OSSL_ASYNC_FD *fd,
                                size_t *numfds)
 {
     struct fd_lookup_st *curr;
@@ -108,7 +108,7 @@ int ASYNC_WAIT_CTX_get_all_fds(ASYNC_WAIT_CTX *ctx, OSSL_ASYNC_FD *fd,
     return 1;
 }
 
-int ASYNC_WAIT_CTX_get_changed_fds(ASYNC_WAIT_CTX *ctx, OSSL_ASYNC_FD *addfd,
+int __cdecl ASYNC_WAIT_CTX_get_changed_fds(ASYNC_WAIT_CTX *ctx, OSSL_ASYNC_FD *addfd,
                                    size_t *numaddfds, OSSL_ASYNC_FD *delfd,
                                    size_t *numdelfds)
 {
@@ -137,7 +137,7 @@ int ASYNC_WAIT_CTX_get_changed_fds(ASYNC_WAIT_CTX *ctx, OSSL_ASYNC_FD *addfd,
     return 1;
 }
 
-int ASYNC_WAIT_CTX_clear_fd(ASYNC_WAIT_CTX *ctx, const void *key)
+int __cdecl ASYNC_WAIT_CTX_clear_fd(ASYNC_WAIT_CTX *ctx, const void *key)
 {
     struct fd_lookup_st *curr, *prev;
 
diff --git a/crypto/bf/bf_cfb64.c b/crypto/bf/bf_cfb64.c
index ce6e13b5a4..0779520ce2 100644
--- a/crypto/bf/bf_cfb64.c
+++ b/crypto/bf/bf_cfb64.c
@@ -16,7 +16,7 @@
  * used is contained in *num;
  */
 
-void BF_cfb64_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl BF_cfb64_encrypt(const unsigned char *in, unsigned char *out,
                       long length, const BF_KEY *schedule,
                       unsigned char *ivec, int *num, int encrypt)
 {
diff --git a/crypto/bf/bf_ecb.c b/crypto/bf/bf_ecb.c
index dc1becdbe4..c6800ddf33 100644
--- a/crypto/bf/bf_ecb.c
+++ b/crypto/bf/bf_ecb.c
@@ -17,12 +17,12 @@
  * SECURITY WORKSHOP, CAMBRIDGE, U.K., DECEMBER 9-11, 1993)
  */
 
-const char *BF_options(void)
+const char * __cdecl BF_options(void)
 {
     return "blowfish(ptr)";
 }
 
-void BF_ecb_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl BF_ecb_encrypt(const unsigned char *in, unsigned char *out,
                     const BF_KEY *key, int encrypt)
 {
     BF_LONG l, d[2];
diff --git a/crypto/bf/bf_enc.c b/crypto/bf/bf_enc.c
index 67c0d78aec..020ede1d18 100644
--- a/crypto/bf/bf_enc.c
+++ b/crypto/bf/bf_enc.c
@@ -21,7 +21,7 @@
 to modify the code.
 #endif
 
-void BF_encrypt(BF_LONG *data, const BF_KEY *key)
+void __cdecl BF_encrypt(BF_LONG *data, const BF_KEY *key)
 {
     register BF_LONG l, r;
     register const BF_LONG *p, *s;
@@ -60,7 +60,7 @@ void BF_encrypt(BF_LONG *data, const BF_KEY *key)
     data[0] = r & 0xffffffffU;
 }
 
-void BF_decrypt(BF_LONG *data, const BF_KEY *key)
+void __cdecl BF_decrypt(BF_LONG *data, const BF_KEY *key)
 {
     register BF_LONG l, r;
     register const BF_LONG *p, *s;
@@ -99,7 +99,7 @@ void BF_decrypt(BF_LONG *data, const BF_KEY *key)
     data[0] = r & 0xffffffffU;
 }
 
-void BF_cbc_encrypt(const unsigned char *in, unsigned char *out, long length,
+void __cdecl BF_cbc_encrypt(const unsigned char *in, unsigned char *out, long length,
                     const BF_KEY *schedule, unsigned char *ivec, int encrypt)
 {
     register BF_LONG tin0, tin1;
diff --git a/crypto/bf/bf_ofb64.c b/crypto/bf/bf_ofb64.c
index 6418217b30..36c49a5464 100644
--- a/crypto/bf/bf_ofb64.c
+++ b/crypto/bf/bf_ofb64.c
@@ -15,7 +15,7 @@
  * The extra state information to record how much of the 64bit block we have
  * used is contained in *num;
  */
-void BF_ofb64_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl BF_ofb64_encrypt(const unsigned char *in, unsigned char *out,
                       long length, const BF_KEY *schedule,
                       unsigned char *ivec, int *num)
 {
diff --git a/crypto/bf/bf_skey.c b/crypto/bf/bf_skey.c
index a4903a2a71..9855b47e0e 100644
--- a/crypto/bf/bf_skey.c
+++ b/crypto/bf/bf_skey.c
@@ -13,7 +13,7 @@
 #include "bf_locl.h"
 #include "bf_pi.h"
 
-void BF_set_key(BF_KEY *key, int len, const unsigned char *data)
+void __cdecl BF_set_key(BF_KEY *key, int len, const unsigned char *data)
 {
     int i;
     BF_LONG *p, ri, in[2];
diff --git a/crypto/bio/b_addr.c b/crypto/bio/b_addr.c
index dd5008e636..68a654319c 100644
--- a/crypto/bio/b_addr.c
+++ b/crypto/bio/b_addr.c
@@ -35,7 +35,7 @@ static CRYPTO_ONCE bio_lookup_init = CRYPTO_ONCE_STATIC_INIT;
  *
  */
 
-BIO_ADDR *BIO_ADDR_new(void)
+BIO_ADDR * __cdecl BIO_ADDR_new(void)
 {
     BIO_ADDR *ret = OPENSSL_zalloc(sizeof(*ret));
 
@@ -48,12 +48,12 @@ BIO_ADDR *BIO_ADDR_new(void)
     return ret;
 }
 
-void BIO_ADDR_free(BIO_ADDR *ap)
+void __cdecl BIO_ADDR_free(BIO_ADDR *ap)
 {
     OPENSSL_free(ap);
 }
 
-void BIO_ADDR_clear(BIO_ADDR *ap)
+void __cdecl BIO_ADDR_clear(BIO_ADDR *ap)
 {
     memset(ap, 0, sizeof(*ap));
     ap->sa.sa_family = AF_UNSPEC;
@@ -85,7 +85,7 @@ int BIO_ADDR_make(BIO_ADDR *ap, const struct sockaddr *sa)
     return 0;
 }
 
-int BIO_ADDR_rawmake(BIO_ADDR *ap, int family,
+int __cdecl BIO_ADDR_rawmake(BIO_ADDR *ap, int family,
                      const void *where, size_t wherelen,
                      unsigned short port)
 {
@@ -123,12 +123,12 @@ int BIO_ADDR_rawmake(BIO_ADDR *ap, int family,
     return 0;
 }
 
-int BIO_ADDR_family(const BIO_ADDR *ap)
+int __cdecl BIO_ADDR_family(const BIO_ADDR *ap)
 {
     return ap->sa.sa_family;
 }
 
-int BIO_ADDR_rawaddress(const BIO_ADDR *ap, void *p, size_t *l)
+int __cdecl BIO_ADDR_rawaddress(const BIO_ADDR *ap, void *p, size_t *l)
 {
     size_t len = 0;
     const void *addrptr = NULL;
@@ -162,7 +162,7 @@ int BIO_ADDR_rawaddress(const BIO_ADDR *ap, void *p, size_t *l)
     return 1;
 }
 
-unsigned short BIO_ADDR_rawport(const BIO_ADDR *ap)
+unsigned short __cdecl BIO_ADDR_rawport(const BIO_ADDR *ap)
 {
     if (ap->sa.sa_family == AF_INET)
         return ap->s_in.sin_port;
@@ -261,7 +261,7 @@ static int addr_strings(const BIO_ADDR *ap, int numeric,
     return 1;
 }
 
-char *BIO_ADDR_hostname_string(const BIO_ADDR *ap, int numeric)
+char * __cdecl BIO_ADDR_hostname_string(const BIO_ADDR *ap, int numeric)
 {
     char *hostname = NULL;
 
@@ -271,7 +271,7 @@ char *BIO_ADDR_hostname_string(const BIO_ADDR *ap, int numeric)
     return NULL;
 }
 
-char *BIO_ADDR_service_string(const BIO_ADDR *ap, int numeric)
+char * __cdecl BIO_ADDR_service_string(const BIO_ADDR *ap, int numeric)
 {
     char *service = NULL;
 
@@ -281,7 +281,7 @@ char *BIO_ADDR_service_string(const BIO_ADDR *ap, int numeric)
     return NULL;
 }
 
-char *BIO_ADDR_path_string(const BIO_ADDR *ap)
+char * __cdecl BIO_ADDR_path_string(const BIO_ADDR *ap)
 {
 #ifdef AF_UNIX
     if (ap->sa.sa_family == AF_UNIX)
@@ -338,28 +338,28 @@ socklen_t BIO_ADDR_sockaddr_size(const BIO_ADDR *ap)
  *
  */
 
-const BIO_ADDRINFO *BIO_ADDRINFO_next(const BIO_ADDRINFO *bai)
+const BIO_ADDRINFO * __cdecl BIO_ADDRINFO_next(const BIO_ADDRINFO *bai)
 {
     if (bai != NULL)
         return bai->bai_next;
     return NULL;
 }
 
-int BIO_ADDRINFO_family(const BIO_ADDRINFO *bai)
+int __cdecl BIO_ADDRINFO_family(const BIO_ADDRINFO *bai)
 {
     if (bai != NULL)
         return bai->bai_family;
     return 0;
 }
 
-int BIO_ADDRINFO_socktype(const BIO_ADDRINFO *bai)
+int __cdecl BIO_ADDRINFO_socktype(const BIO_ADDRINFO *bai)
 {
     if (bai != NULL)
         return bai->bai_socktype;
     return 0;
 }
 
-int BIO_ADDRINFO_protocol(const BIO_ADDRINFO *bai)
+int __cdecl BIO_ADDRINFO_protocol(const BIO_ADDRINFO *bai)
 {
     if (bai != NULL) {
         if (bai->bai_protocol != 0)
@@ -404,14 +404,14 @@ const struct sockaddr *BIO_ADDRINFO_sockaddr(const BIO_ADDRINFO *bai)
     return NULL;
 }
 
-const BIO_ADDR *BIO_ADDRINFO_address(const BIO_ADDRINFO *bai)
+const BIO_ADDR * __cdecl BIO_ADDRINFO_address(const BIO_ADDRINFO *bai)
 {
     if (bai != NULL)
         return (BIO_ADDR *)bai->bai_addr;
     return NULL;
 }
 
-void BIO_ADDRINFO_free(BIO_ADDRINFO *bai)
+void __cdecl BIO_ADDRINFO_free(BIO_ADDRINFO *bai)
 {
     if (bai == NULL)
         return;
@@ -464,7 +464,7 @@ void BIO_ADDRINFO_free(BIO_ADDRINFO *bai)
  * service              => *host untouched, *service = "service"
  *
  */
-int BIO_parse_hostserv(const char *hostserv, char **host, char **service,
+int __cdecl BIO_parse_hostserv(const char *hostserv, char **host, char **service,
                        enum BIO_hostserv_priorities hostserv_prio)
 {
     const char *h = NULL; size_t hl = 0;
@@ -609,7 +609,7 @@ DEFINE_RUN_ONCE_STATIC(do_bio_lookup_init)
     return bio_lookup_lock != NULL;
 }
 
-int BIO_lookup(const char *host, const char *service,
+int __cdecl BIO_lookup(const char *host, const char *service,
                enum BIO_lookup_type lookup_type,
                int family, int socktype, BIO_ADDRINFO **res)
 {
@@ -638,7 +638,7 @@ int BIO_lookup(const char *host, const char *service,
  *
  * The return value is 1 on success or 0 in case of error.
  */
-int BIO_lookup_ex(const char *host, const char *service, int lookup_type,
+int __cdecl BIO_lookup_ex(const char *host, const char *service, int lookup_type,
                   int family, int socktype, int protocol, BIO_ADDRINFO **res)
 {
     int ret = 0;                 /* Assume failure */
diff --git a/crypto/bio/b_dump.c b/crypto/bio/b_dump.c
index 0d06414e7d..b0d1c31ea0 100644
--- a/crypto/bio/b_dump.c
+++ b/crypto/bio/b_dump.c
@@ -19,13 +19,13 @@
 
 #define SPACE(buf, pos, n)   (sizeof(buf) - (pos) > (n))
 
-int BIO_dump_cb(int (*cb) (const void *data, size_t len, void *u),
+int __cdecl BIO_dump_cb(int (*cb) (const void *data, size_t len, void *u),
                 void *u, const char *s, int len)
 {
     return BIO_dump_indent_cb(cb, u, s, len, 0);
 }
 
-int BIO_dump_indent_cb(int (*cb) (const void *data, size_t len, void *u),
+int __cdecl BIO_dump_indent_cb(int (*cb) (const void *data, size_t len, void *u),
                        void *u, const char *s, int len, int indent)
 {
     int ret = 0;
@@ -96,12 +96,12 @@ static int write_fp(const void *data, size_t len, void *fp)
     return UP_fwrite(data, len, 1, fp);
 }
 
-int BIO_dump_fp(FILE *fp, const char *s, int len)
+int __cdecl BIO_dump_fp(FILE *fp, const char *s, int len)
 {
     return BIO_dump_cb(write_fp, fp, s, len);
 }
 
-int BIO_dump_indent_fp(FILE *fp, const char *s, int len, int indent)
+int __cdecl BIO_dump_indent_fp(FILE *fp, const char *s, int len, int indent)
 {
     return BIO_dump_indent_cb(write_fp, fp, s, len, indent);
 }
@@ -112,17 +112,17 @@ static int write_bio(const void *data, size_t len, void *bp)
     return BIO_write((BIO *)bp, (const char *)data, len);
 }
 
-int BIO_dump(BIO *bp, const char *s, int len)
+int __cdecl BIO_dump(BIO *bp, const char *s, int len)
 {
     return BIO_dump_cb(write_bio, bp, s, len);
 }
 
-int BIO_dump_indent(BIO *bp, const char *s, int len, int indent)
+int __cdecl BIO_dump_indent(BIO *bp, const char *s, int len, int indent)
 {
     return BIO_dump_indent_cb(write_bio, bp, s, len, indent);
 }
 
-int BIO_hex_string(BIO *out, int indent, int width, unsigned char *data,
+int __cdecl BIO_hex_string(BIO *out, int indent, int width, unsigned char *data,
                    int datalen)
 {
     int i, j = 0;
diff --git a/crypto/bio/b_print.c b/crypto/bio/b_print.c
index 9e907fcaa7..e5d4c1b52f 100644
--- a/crypto/bio/b_print.c
+++ b/crypto/bio/b_print.c
@@ -850,7 +850,7 @@ doapr_outch(char **sbuffer,
 
 /***************************************************************************/
 
-int BIO_printf(BIO *bio, const char *format, ...)
+int __cdecl BIO_printf(BIO *bio, const char *format, ...)
 {
     va_list args;
     int ret;
@@ -863,7 +863,7 @@ int BIO_printf(BIO *bio, const char *format, ...)
     return ret;
 }
 
-int BIO_vprintf(BIO *bio, const char *format, va_list args)
+int __cdecl BIO_vprintf(BIO *bio, const char *format, va_list args)
 {
     int ret;
     size_t retlen;
@@ -896,7 +896,7 @@ int BIO_vprintf(BIO *bio, const char *format, va_list args)
  * closely related to BIO_printf, and we need *some* name prefix ... (XXX the
  * function should be renamed, but to what?)
  */
-int BIO_snprintf(char *buf, size_t n, const char *format, ...)
+int __cdecl BIO_snprintf(char *buf, size_t n, const char *format, ...)
 {
     va_list args;
     int ret;
@@ -909,7 +909,7 @@ int BIO_snprintf(char *buf, size_t n, const char *format, ...)
     return ret;
 }
 
-int BIO_vsnprintf(char *buf, size_t n, const char *format, va_list args)
+int __cdecl BIO_vsnprintf(char *buf, size_t n, const char *format, va_list args)
 {
     size_t retlen;
     int truncated;
diff --git a/crypto/bio/b_sock.c b/crypto/bio/b_sock.c
index e7a24d02cb..ffa98b8041 100644
--- a/crypto/bio/b_sock.c
+++ b/crypto/bio/b_sock.c
@@ -85,7 +85,7 @@ int BIO_get_port(const char *str, unsigned short *port_ptr)
 }
 # endif
 
-int BIO_sock_error(int sock)
+int __cdecl BIO_sock_error(int sock)
 {
     int j = 0, i;
     socklen_t size = sizeof(j);
@@ -114,7 +114,7 @@ struct hostent *BIO_gethostbyname(const char *name)
 }
 # endif
 
-int BIO_sock_init(void)
+int __cdecl BIO_sock_init(void)
 {
 # ifdef OPENSSL_SYS_WINDOWS
     static struct WSAData wsa_state;
@@ -158,7 +158,7 @@ void bio_sock_cleanup_int(void)
 # endif
 }
 
-int BIO_socket_ioctl(int fd, long type, void *arg)
+int __cdecl BIO_socket_ioctl(int fd, long type, void *arg)
 {
     int i;
 
@@ -274,7 +274,7 @@ int BIO_accept(int sock, char **ip_port)
 }
 # endif
 
-int BIO_set_tcp_ndelay(int s, int on)
+int __cdecl BIO_set_tcp_ndelay(int s, int on)
 {
     int ret = 0;
 # if defined(TCP_NODELAY) && (defined(IPPROTO_TCP) || defined(SOL_TCP))
@@ -293,7 +293,7 @@ int BIO_set_tcp_ndelay(int s, int on)
     return (ret == 0);
 }
 
-int BIO_socket_nbio(int s, int mode)
+int __cdecl BIO_socket_nbio(int s, int mode)
 {
     int ret = -1;
     int l;
@@ -337,7 +337,7 @@ int BIO_socket_nbio(int s, int mode)
     return (ret == 0);
 }
 
-int BIO_sock_info(int sock,
+int __cdecl BIO_sock_info(int sock,
                   enum BIO_sock_info_type type, union BIO_sock_info_u *info)
 {
     switch (type) {
diff --git a/crypto/bio/b_sock2.c b/crypto/bio/b_sock2.c
index 5d82ab22dc..9ddc63b3e4 100644
--- a/crypto/bio/b_sock2.c
+++ b/crypto/bio/b_sock2.c
@@ -37,7 +37,7 @@
  * Returns the file descriptor on success or INVALID_SOCKET on failure.  On
  * failure errno is set, and a status is added to the OpenSSL error stack.
  */
-int BIO_socket(int domain, int socktype, int protocol, int options)
+int __cdecl BIO_socket(int domain, int socktype, int protocol, int options)
 {
     int sock = -1;
 
@@ -74,7 +74,7 @@ int BIO_socket(int domain, int socktype, int protocol, int options)
  * Returns 1 on success or 0 on failure.  On failure errno is set
  * and an error status is added to the OpenSSL error stack.
  */
-int BIO_connect(int sock, const BIO_ADDR *addr, int options)
+int __cdecl BIO_connect(int sock, const BIO_ADDR *addr, int options)
 {
     const int on = 1;
 
@@ -131,7 +131,7 @@ int BIO_connect(int sock, const BIO_ADDR *addr, int options)
  * you set to BIO_SOCK_REUSEADDR option it will try to reuse the port anyway.
  * It's recommended that you use this.
  */
-int BIO_bind(int sock, const BIO_ADDR *addr, int options)
+int __cdecl BIO_bind(int sock, const BIO_ADDR *addr, int options)
 {
 # ifndef OPENSSL_SYS_WINDOWS
     int on = 1;
@@ -203,7 +203,7 @@ int BIO_bind(int sock, const BIO_ADDR *addr, int options)
  * you set to BIO_SOCK_REUSEADDR option it will try to reuse the port anyway.
  * It's recommended that you use this.
  */
-int BIO_listen(int sock, const BIO_ADDR *addr, int options)
+int __cdecl BIO_listen(int sock, const BIO_ADDR *addr, int options)
 {
     int on = 1;
     int socktype;
@@ -278,7 +278,7 @@ int BIO_listen(int sock, const BIO_ADDR *addr, int options)
  * @options: BIO socket options, applied on the accepted socket.
  *
  */
-int BIO_accept_ex(int accept_sock, BIO_ADDR *addr_, int options)
+int __cdecl BIO_accept_ex(int accept_sock, BIO_ADDR *addr_, int options)
 {
     socklen_t len;
     int accepted_sock;
@@ -308,7 +308,7 @@ int BIO_accept_ex(int accept_sock, BIO_ADDR *addr_, int options)
  * BIO_closesocket - Close a socket
  * @sock: the socket to close
  */
-int BIO_closesocket(int sock)
+int __cdecl BIO_closesocket(int sock)
 {
     if (closesocket(sock) < 0)
         return 0;
diff --git a/crypto/bio/bf_buff.c b/crypto/bio/bf_buff.c
index 8e87a629b8..cada66c198 100644
--- a/crypto/bio/bf_buff.c
+++ b/crypto/bio/bf_buff.c
@@ -12,14 +12,14 @@
 #include "bio_lcl.h"
 #include "internal/cryptlib.h"
 
-static int buffer_write(BIO *h, const char *buf, int num);
-static int buffer_read(BIO *h, char *buf, int size);
-static int buffer_puts(BIO *h, const char *str);
-static int buffer_gets(BIO *h, char *str, int size);
-static long buffer_ctrl(BIO *h, int cmd, long arg1, void *arg2);
-static int buffer_new(BIO *h);
-static int buffer_free(BIO *data);
-static long buffer_callback_ctrl(BIO *h, int cmd, BIO_info_cb *fp);
+static int __cdecl buffer_write(BIO *h, const char *buf, int num);
+static int __cdecl buffer_read(BIO *h, char *buf, int size);
+static int __cdecl buffer_puts(BIO *h, const char *str);
+static int __cdecl buffer_gets(BIO *h, char *str, int size);
+static long __cdecl buffer_ctrl(BIO *h, int cmd, long arg1, void *arg2);
+static int __cdecl buffer_new(BIO *h);
+static int __cdecl buffer_free(BIO *data);
+static long __cdecl buffer_callback_ctrl(BIO *h, int cmd, BIO_info_cb *fp);
 #define DEFAULT_BUFFER_SIZE     4096
 
 static const BIO_METHOD methods_buffer = {
@@ -39,12 +39,12 @@ static const BIO_METHOD methods_buffer = {
     buffer_callback_ctrl,
 };
 
-const BIO_METHOD *BIO_f_buffer(void)
+const BIO_METHOD * __cdecl BIO_f_buffer(void)
 {
     return &methods_buffer;
 }
 
-static int buffer_new(BIO *bi)
+static int __cdecl buffer_new(BIO *bi)
 {
     BIO_F_BUFFER_CTX *ctx = OPENSSL_zalloc(sizeof(*ctx));
 
@@ -70,7 +70,7 @@ static int buffer_new(BIO *bi)
     return 1;
 }
 
-static int buffer_free(BIO *a)
+static int __cdecl buffer_free(BIO *a)
 {
     BIO_F_BUFFER_CTX *b;
 
@@ -86,7 +86,7 @@ static int buffer_free(BIO *a)
     return 1;
 }
 
-static int buffer_read(BIO *b, char *out, int outl)
+static int __cdecl buffer_read(BIO *b, char *out, int outl)
 {
     int i, num = 0;
     BIO_F_BUFFER_CTX *ctx;
@@ -157,7 +157,7 @@ static int buffer_read(BIO *b, char *out, int outl)
     goto start;
 }
 
-static int buffer_write(BIO *b, const char *in, int inl)
+static int __cdecl buffer_write(BIO *b, const char *in, int inl)
 {
     int i, num = 0;
     BIO_F_BUFFER_CTX *ctx;
@@ -234,7 +234,7 @@ static int buffer_write(BIO *b, const char *in, int inl)
     goto start;
 }
 
-static long buffer_ctrl(BIO *b, int cmd, long num, void *ptr)
+static long __cdecl buffer_ctrl(BIO *b, int cmd, long num, void *ptr)
 {
     BIO *dbio;
     BIO_F_BUFFER_CTX *ctx;
@@ -408,7 +408,7 @@ static long buffer_ctrl(BIO *b, int cmd, long num, void *ptr)
     return 0;
 }
 
-static long buffer_callback_ctrl(BIO *b, int cmd, BIO_info_cb *fp)
+static long __cdecl buffer_callback_ctrl(BIO *b, int cmd, BIO_info_cb *fp)
 {
     long ret = 1;
 
@@ -422,7 +422,7 @@ static long buffer_callback_ctrl(BIO *b, int cmd, BIO_info_cb *fp)
     return ret;
 }
 
-static int buffer_gets(BIO *b, char *buf, int size)
+static int __cdecl buffer_gets(BIO *b, char *buf, int size)
 {
     BIO_F_BUFFER_CTX *ctx;
     int num = 0, i, flag;
@@ -469,7 +469,7 @@ static int buffer_gets(BIO *b, char *buf, int size)
     }
 }
 
-static int buffer_puts(BIO *b, const char *str)
+static int __cdecl buffer_puts(BIO *b, const char *str)
 {
     return buffer_write(b, str, strlen(str));
 }
diff --git a/crypto/bio/bf_lbuf.c b/crypto/bio/bf_lbuf.c
index 194c7b8af7..3d902cbade 100644
--- a/crypto/bio/bf_lbuf.c
+++ b/crypto/bio/bf_lbuf.c
@@ -13,14 +13,14 @@
 #include "internal/cryptlib.h"
 #include <openssl/evp.h>
 
-static int linebuffer_write(BIO *h, const char *buf, int num);
-static int linebuffer_read(BIO *h, char *buf, int size);
-static int linebuffer_puts(BIO *h, const char *str);
-static int linebuffer_gets(BIO *h, char *str, int size);
-static long linebuffer_ctrl(BIO *h, int cmd, long arg1, void *arg2);
-static int linebuffer_new(BIO *h);
-static int linebuffer_free(BIO *data);
-static long linebuffer_callback_ctrl(BIO *h, int cmd, BIO_info_cb *fp);
+static int __cdecl linebuffer_write(BIO *h, const char *buf, int num);
+static int __cdecl linebuffer_read(BIO *h, char *buf, int size);
+static int __cdecl linebuffer_puts(BIO *h, const char *str);
+static int __cdecl linebuffer_gets(BIO *h, char *str, int size);
+static long __cdecl linebuffer_ctrl(BIO *h, int cmd, long arg1, void *arg2);
+static int __cdecl linebuffer_new(BIO *h);
+static int __cdecl linebuffer_free(BIO *data);
+static long __cdecl linebuffer_callback_ctrl(BIO *h, int cmd, BIO_info_cb *fp);
 
 /* A 10k maximum should be enough for most purposes */
 #define DEFAULT_LINEBUFFER_SIZE 1024*10
@@ -44,7 +44,7 @@ static const BIO_METHOD methods_linebuffer = {
     linebuffer_callback_ctrl,
 };
 
-const BIO_METHOD *BIO_f_linebuffer(void)
+const BIO_METHOD * __cdecl BIO_f_linebuffer(void)
 {
     return &methods_linebuffer;
 }
@@ -55,7 +55,7 @@ typedef struct bio_linebuffer_ctx_struct {
     int obuf_len;               /* how many bytes are in it */
 } BIO_LINEBUFFER_CTX;
 
-static int linebuffer_new(BIO *bi)
+static int __cdecl linebuffer_new(BIO *bi)
 {
     BIO_LINEBUFFER_CTX *ctx;
 
@@ -78,7 +78,7 @@ static int linebuffer_new(BIO *bi)
     return 1;
 }
 
-static int linebuffer_free(BIO *a)
+static int __cdecl linebuffer_free(BIO *a)
 {
     BIO_LINEBUFFER_CTX *b;
 
@@ -93,7 +93,7 @@ static int linebuffer_free(BIO *a)
     return 1;
 }
 
-static int linebuffer_read(BIO *b, char *out, int outl)
+static int __cdecl linebuffer_read(BIO *b, char *out, int outl)
 {
     int ret = 0;
 
@@ -107,7 +107,7 @@ static int linebuffer_read(BIO *b, char *out, int outl)
     return ret;
 }
 
-static int linebuffer_write(BIO *b, const char *in, int inl)
+static int __cdecl linebuffer_write(BIO *b, const char *in, int inl)
 {
     int i, num = 0, foundnl;
     BIO_LINEBUFFER_CTX *ctx;
@@ -202,7 +202,7 @@ static int linebuffer_write(BIO *b, const char *in, int inl)
     return num;
 }
 
-static long linebuffer_ctrl(BIO *b, int cmd, long num, void *ptr)
+static long __cdecl linebuffer_ctrl(BIO *b, int cmd, long num, void *ptr)
 {
     BIO *dbio;
     BIO_LINEBUFFER_CTX *ctx;
@@ -299,7 +299,7 @@ static long linebuffer_ctrl(BIO *b, int cmd, long num, void *ptr)
     return 0;
 }
 
-static long linebuffer_callback_ctrl(BIO *b, int cmd, BIO_info_cb *fp)
+static long __cdecl linebuffer_callback_ctrl(BIO *b, int cmd, BIO_info_cb *fp)
 {
     long ret = 1;
 
@@ -313,14 +313,14 @@ static long linebuffer_callback_ctrl(BIO *b, int cmd, BIO_info_cb *fp)
     return ret;
 }
 
-static int linebuffer_gets(BIO *b, char *buf, int size)
+static int __cdecl linebuffer_gets(BIO *b, char *buf, int size)
 {
     if (b->next_bio == NULL)
         return 0;
     return BIO_gets(b->next_bio, buf, size);
 }
 
-static int linebuffer_puts(BIO *b, const char *str)
+static int __cdecl linebuffer_puts(BIO *b, const char *str)
 {
     return linebuffer_write(b, str, strlen(str));
 }
diff --git a/crypto/bio/bf_nbio.c b/crypto/bio/bf_nbio.c
index 4bc84eeba6..1d4b04cf7d 100644
--- a/crypto/bio/bf_nbio.c
+++ b/crypto/bio/bf_nbio.c
@@ -17,14 +17,14 @@
  * BIO_put and BIO_get both add to the digest, BIO_gets returns the digest
  */
 
-static int nbiof_write(BIO *h, const char *buf, int num);
-static int nbiof_read(BIO *h, char *buf, int size);
-static int nbiof_puts(BIO *h, const char *str);
-static int nbiof_gets(BIO *h, char *str, int size);
-static long nbiof_ctrl(BIO *h, int cmd, long arg1, void *arg2);
-static int nbiof_new(BIO *h);
-static int nbiof_free(BIO *data);
-static long nbiof_callback_ctrl(BIO *h, int cmd, BIO_info_cb *fp);
+static int __cdecl nbiof_write(BIO *h, const char *buf, int num);
+static int __cdecl nbiof_read(BIO *h, char *buf, int size);
+static int __cdecl nbiof_puts(BIO *h, const char *str);
+static int __cdecl nbiof_gets(BIO *h, char *str, int size);
+static long __cdecl nbiof_ctrl(BIO *h, int cmd, long arg1, void *arg2);
+static int __cdecl nbiof_new(BIO *h);
+static int __cdecl nbiof_free(BIO *data);
+static long __cdecl nbiof_callback_ctrl(BIO *h, int cmd, BIO_info_cb *fp);
 typedef struct nbio_test_st {
     /* only set if we sent a 'should retry' error */
     int lrn;
@@ -48,12 +48,12 @@ static const BIO_METHOD methods_nbiof = {
     nbiof_callback_ctrl,
 };
 
-const BIO_METHOD *BIO_f_nbio_test(void)
+const BIO_METHOD * __cdecl BIO_f_nbio_test(void)
 {
     return &methods_nbiof;
 }
 
-static int nbiof_new(BIO *bi)
+static int __cdecl nbiof_new(BIO *bi)
 {
     NBIO_TEST *nt;
 
@@ -68,7 +68,7 @@ static int nbiof_new(BIO *bi)
     return 1;
 }
 
-static int nbiof_free(BIO *a)
+static int __cdecl nbiof_free(BIO *a)
 {
     if (a == NULL)
         return 0;
@@ -79,7 +79,7 @@ static int nbiof_free(BIO *a)
     return 1;
 }
 
-static int nbiof_read(BIO *b, char *out, int outl)
+static int __cdecl nbiof_read(BIO *b, char *out, int outl)
 {
     int ret = 0;
     int num;
@@ -109,7 +109,7 @@ static int nbiof_read(BIO *b, char *out, int outl)
     return ret;
 }
 
-static int nbiof_write(BIO *b, const char *in, int inl)
+static int __cdecl nbiof_write(BIO *b, const char *in, int inl)
 {
     NBIO_TEST *nt;
     int ret = 0;
@@ -149,7 +149,7 @@ static int nbiof_write(BIO *b, const char *in, int inl)
     return ret;
 }
 
-static long nbiof_ctrl(BIO *b, int cmd, long num, void *ptr)
+static long __cdecl nbiof_ctrl(BIO *b, int cmd, long num, void *ptr)
 {
     long ret;
 
@@ -171,7 +171,7 @@ static long nbiof_ctrl(BIO *b, int cmd, long num, void *ptr)
     return ret;
 }
 
-static long nbiof_callback_ctrl(BIO *b, int cmd, BIO_info_cb *fp)
+static long __cdecl nbiof_callback_ctrl(BIO *b, int cmd, BIO_info_cb *fp)
 {
     long ret = 1;
 
@@ -185,14 +185,14 @@ static long nbiof_callback_ctrl(BIO *b, int cmd, BIO_info_cb *fp)
     return ret;
 }
 
-static int nbiof_gets(BIO *bp, char *buf, int size)
+static int __cdecl nbiof_gets(BIO *bp, char *buf, int size)
 {
     if (bp->next_bio == NULL)
         return 0;
     return BIO_gets(bp->next_bio, buf, size);
 }
 
-static int nbiof_puts(BIO *bp, const char *str)
+static int __cdecl nbiof_puts(BIO *bp, const char *str)
 {
     if (bp->next_bio == NULL)
         return 0;
diff --git a/crypto/bio/bf_null.c b/crypto/bio/bf_null.c
index 613fb2e058..25e08d81e3 100644
--- a/crypto/bio/bf_null.c
+++ b/crypto/bio/bf_null.c
@@ -16,12 +16,12 @@
  * BIO_put and BIO_get both add to the digest, BIO_gets returns the digest
  */
 
-static int nullf_write(BIO *h, const char *buf, int num);
-static int nullf_read(BIO *h, char *buf, int size);
-static int nullf_puts(BIO *h, const char *str);
-static int nullf_gets(BIO *h, char *str, int size);
-static long nullf_ctrl(BIO *h, int cmd, long arg1, void *arg2);
-static long nullf_callback_ctrl(BIO *h, int cmd, BIO_info_cb *fp);
+static int __cdecl nullf_write(BIO *h, const char *buf, int num);
+static int __cdecl nullf_read(BIO *h, char *buf, int size);
+static int __cdecl nullf_puts(BIO *h, const char *str);
+static int __cdecl nullf_gets(BIO *h, char *str, int size);
+static long __cdecl nullf_ctrl(BIO *h, int cmd, long arg1, void *arg2);
+static long __cdecl nullf_callback_ctrl(BIO *h, int cmd, BIO_info_cb *fp);
 static const BIO_METHOD methods_nullf = {
     BIO_TYPE_NULL_FILTER,
     "NULL filter",
@@ -39,12 +39,12 @@ static const BIO_METHOD methods_nullf = {
     nullf_callback_ctrl,
 };
 
-const BIO_METHOD *BIO_f_null(void)
+const BIO_METHOD * __cdecl BIO_f_null(void)
 {
     return &methods_nullf;
 }
 
-static int nullf_read(BIO *b, char *out, int outl)
+static int __cdecl nullf_read(BIO *b, char *out, int outl)
 {
     int ret = 0;
 
@@ -58,7 +58,7 @@ static int nullf_read(BIO *b, char *out, int outl)
     return ret;
 }
 
-static int nullf_write(BIO *b, const char *in, int inl)
+static int __cdecl nullf_write(BIO *b, const char *in, int inl)
 {
     int ret = 0;
 
@@ -72,7 +72,7 @@ static int nullf_write(BIO *b, const char *in, int inl)
     return ret;
 }
 
-static long nullf_ctrl(BIO *b, int cmd, long num, void *ptr)
+static long __cdecl nullf_ctrl(BIO *b, int cmd, long num, void *ptr)
 {
     long ret;
 
@@ -93,7 +93,7 @@ static long nullf_ctrl(BIO *b, int cmd, long num, void *ptr)
     return ret;
 }
 
-static long nullf_callback_ctrl(BIO *b, int cmd, BIO_info_cb *fp)
+static long __cdecl nullf_callback_ctrl(BIO *b, int cmd, BIO_info_cb *fp)
 {
     long ret = 1;
 
@@ -107,14 +107,14 @@ static long nullf_callback_ctrl(BIO *b, int cmd, BIO_info_cb *fp)
     return ret;
 }
 
-static int nullf_gets(BIO *bp, char *buf, int size)
+static int __cdecl nullf_gets(BIO *bp, char *buf, int size)
 {
     if (bp->next_bio == NULL)
         return 0;
     return BIO_gets(bp->next_bio, buf, size);
 }
 
-static int nullf_puts(BIO *bp, const char *str)
+static int __cdecl nullf_puts(BIO *bp, const char *str)
 {
     if (bp->next_bio == NULL)
         return 0;
diff --git a/crypto/bio/bio_cb.c b/crypto/bio/bio_cb.c
index 1154c233af..26c0a0d41b 100644
--- a/crypto/bio/bio_cb.c
+++ b/crypto/bio/bio_cb.c
@@ -14,7 +14,7 @@
 #include "internal/cryptlib.h"
 #include <openssl/err.h>
 
-long BIO_debug_callback(BIO *bio, int cmd, const char *argp,
+long __cdecl BIO_debug_callback(BIO *bio, int cmd, const char *argp,
                         int argi, long argl, long ret)
 {
     BIO *b;
diff --git a/crypto/bio/bio_err.c b/crypto/bio/bio_err.c
index 7aa9dabb29..15986e095d 100644
--- a/crypto/bio/bio_err.c
+++ b/crypto/bio/bio_err.c
@@ -133,7 +133,7 @@ static const ERR_STRING_DATA BIO_str_reasons[] = {
 
 #endif
 
-int ERR_load_BIO_strings(void)
+int __cdecl ERR_load_BIO_strings(void)
 {
 #ifndef OPENSSL_NO_ERR
     if (ERR_func_error_string(BIO_str_functs[0].error) == NULL) {
diff --git a/crypto/bio/bio_lib.c b/crypto/bio/bio_lib.c
index ca375b911a..44b4f870d9 100644
--- a/crypto/bio/bio_lib.c
+++ b/crypto/bio/bio_lib.c
@@ -68,7 +68,7 @@ static long bio_call_callback(BIO *b, int oper, const char *argp, size_t len,
     return ret;
 }
 
-BIO *BIO_new(const BIO_METHOD *method)
+BIO * __cdecl BIO_new(const BIO_METHOD *method)
 {
     BIO *bio = OPENSSL_zalloc(sizeof(*bio));
 
@@ -107,7 +107,7 @@ err:
     return NULL;
 }
 
-int BIO_free(BIO *a)
+int __cdecl BIO_free(BIO *a)
 {
     int ret;
 
@@ -140,42 +140,42 @@ int BIO_free(BIO *a)
     return 1;
 }
 
-void BIO_set_data(BIO *a, void *ptr)
+void __cdecl BIO_set_data(BIO *a, void *ptr)
 {
     a->ptr = ptr;
 }
 
-void *BIO_get_data(BIO *a)
+void * __cdecl BIO_get_data(BIO *a)
 {
     return a->ptr;
 }
 
-void BIO_set_init(BIO *a, int init)
+void __cdecl BIO_set_init(BIO *a, int init)
 {
     a->init = init;
 }
 
-int BIO_get_init(BIO *a)
+int __cdecl BIO_get_init(BIO *a)
 {
     return a->init;
 }
 
-void BIO_set_shutdown(BIO *a, int shut)
+void __cdecl BIO_set_shutdown(BIO *a, int shut)
 {
     a->shutdown = shut;
 }
 
-int BIO_get_shutdown(BIO *a)
+int __cdecl BIO_get_shutdown(BIO *a)
 {
     return a->shutdown;
 }
 
-void BIO_vfree(BIO *a)
+void __cdecl BIO_vfree(BIO *a)
 {
     BIO_free(a);
 }
 
-int BIO_up_ref(BIO *a)
+int __cdecl BIO_up_ref(BIO *a)
 {
     int i;
 
@@ -187,17 +187,17 @@ int BIO_up_ref(BIO *a)
     return ((i > 1) ? 1 : 0);
 }
 
-void BIO_clear_flags(BIO *b, int flags)
+void __cdecl BIO_clear_flags(BIO *b, int flags)
 {
     b->flags &= ~flags;
 }
 
-int BIO_test_flags(const BIO *b, int flags)
+int __cdecl BIO_test_flags(const BIO *b, int flags)
 {
     return (b->flags & flags);
 }
 
-void BIO_set_flags(BIO *b, int flags)
+void __cdecl BIO_set_flags(BIO *b, int flags)
 {
     b->flags |= flags;
 }
@@ -207,7 +207,7 @@ BIO_callback_fn BIO_get_callback(const BIO *b)
     return b->callback;
 }
 
-void BIO_set_callback(BIO *b, BIO_callback_fn cb)
+void __cdecl BIO_set_callback(BIO *b, BIO_callback_fn cb)
 {
     b->callback = cb;
 }
@@ -217,27 +217,27 @@ BIO_callback_fn_ex BIO_get_callback_ex(const BIO *b)
     return b->callback_ex;
 }
 
-void BIO_set_callback_ex(BIO *b, BIO_callback_fn_ex cb)
+void __cdecl BIO_set_callback_ex(BIO *b, BIO_callback_fn_ex cb)
 {
     b->callback_ex = cb;
 }
 
-void BIO_set_callback_arg(BIO *b, char *arg)
+void __cdecl BIO_set_callback_arg(BIO *b, char *arg)
 {
     b->cb_arg = arg;
 }
 
-char *BIO_get_callback_arg(const BIO *b)
+char * __cdecl BIO_get_callback_arg(const BIO *b)
 {
     return b->cb_arg;
 }
 
-const char *BIO_method_name(const BIO *b)
+const char * __cdecl BIO_method_name(const BIO *b)
 {
     return b->method->name;
 }
 
-int BIO_method_type(const BIO *b)
+int __cdecl BIO_method_type(const BIO *b)
 {
     return b->method->type;
 }
@@ -285,7 +285,7 @@ static int bio_read_intern(BIO *b, void *data, size_t dlen, size_t *readbytes)
     return ret;
 }
 
-int BIO_read(BIO *b, void *data, int dlen)
+int __cdecl BIO_read(BIO *b, void *data, int dlen)
 {
     size_t readbytes;
     int ret;
@@ -303,7 +303,7 @@ int BIO_read(BIO *b, void *data, int dlen)
     return ret;
 }
 
-int BIO_read_ex(BIO *b, void *data, size_t dlen, size_t *readbytes)
+int __cdecl BIO_read_ex(BIO *b, void *data, size_t dlen, size_t *readbytes)
 {
     int ret;
 
@@ -352,7 +352,7 @@ static int bio_write_intern(BIO *b, const void *data, size_t dlen,
     return ret;
 }
 
-int BIO_write(BIO *b, const void *data, int dlen)
+int __cdecl BIO_write(BIO *b, const void *data, int dlen)
 {
     size_t written;
     int ret;
@@ -370,7 +370,7 @@ int BIO_write(BIO *b, const void *data, int dlen)
     return ret;
 }
 
-int BIO_write_ex(BIO *b, const void *data, size_t dlen, size_t *written)
+int __cdecl BIO_write_ex(BIO *b, const void *data, size_t dlen, size_t *written)
 {
     int ret;
 
@@ -384,7 +384,7 @@ int BIO_write_ex(BIO *b, const void *data, size_t dlen, size_t *written)
     return ret;
 }
 
-int BIO_puts(BIO *b, const char *buf)
+int __cdecl BIO_puts(BIO *b, const char *buf)
 {
     int ret;
     size_t written = 0;
@@ -429,7 +429,7 @@ int BIO_puts(BIO *b, const char *buf)
     return ret;
 }
 
-int BIO_gets(BIO *b, char *buf, int size)
+int __cdecl BIO_gets(BIO *b, char *buf, int size)
 {
     int ret;
     size_t readbytes = 0;
@@ -477,7 +477,7 @@ int BIO_gets(BIO *b, char *buf, int size)
     return ret;
 }
 
-int BIO_indent(BIO *b, int indent, int max)
+int __cdecl BIO_indent(BIO *b, int indent, int max)
 {
     if (indent < 0)
         indent = 0;
@@ -489,7 +489,7 @@ int BIO_indent(BIO *b, int indent, int max)
     return 1;
 }
 
-long BIO_int_ctrl(BIO *b, int cmd, long larg, int iarg)
+long __cdecl BIO_int_ctrl(BIO *b, int cmd, long larg, int iarg)
 {
     int i;
 
@@ -497,7 +497,7 @@ long BIO_int_ctrl(BIO *b, int cmd, long larg, int iarg)
     return BIO_ctrl(b, cmd, larg, (char *)&i);
 }
 
-void *BIO_ptr_ctrl(BIO *b, int cmd, long larg)
+void * __cdecl BIO_ptr_ctrl(BIO *b, int cmd, long larg)
 {
     void *p = NULL;
 
@@ -507,7 +507,7 @@ void *BIO_ptr_ctrl(BIO *b, int cmd, long larg)
         return p;
 }
 
-long BIO_ctrl(BIO *b, int cmd, long larg, void *parg)
+long __cdecl BIO_ctrl(BIO *b, int cmd, long larg, void *parg)
 {
     long ret;
 
@@ -534,7 +534,7 @@ long BIO_ctrl(BIO *b, int cmd, long larg, void *parg)
     return ret;
 }
 
-long BIO_callback_ctrl(BIO *b, int cmd, BIO_info_cb *fp)
+long __cdecl BIO_callback_ctrl(BIO *b, int cmd, BIO_info_cb *fp)
 {
     long ret;
 
@@ -568,18 +568,18 @@ long BIO_callback_ctrl(BIO *b, int cmd, BIO_info_cb *fp)
  * do; but those macros have inappropriate return type, and for interfacing
  * from other programming languages, C macros aren't much of a help anyway.
  */
-size_t BIO_ctrl_pending(BIO *bio)
+size_t __cdecl BIO_ctrl_pending(BIO *bio)
 {
     return BIO_ctrl(bio, BIO_CTRL_PENDING, 0, NULL);
 }
 
-size_t BIO_ctrl_wpending(BIO *bio)
+size_t __cdecl BIO_ctrl_wpending(BIO *bio)
 {
     return BIO_ctrl(bio, BIO_CTRL_WPENDING, 0, NULL);
 }
 
 /* put the 'bio' on the end of b's list of operators */
-BIO *BIO_push(BIO *b, BIO *bio)
+BIO * __cdecl BIO_push(BIO *b, BIO *bio)
 {
     BIO *lb;
 
@@ -597,7 +597,7 @@ BIO *BIO_push(BIO *b, BIO *bio)
 }
 
 /* Remove the first and return the rest */
-BIO *BIO_pop(BIO *b)
+BIO * __cdecl BIO_pop(BIO *b)
 {
     BIO *ret;
 
@@ -617,7 +617,7 @@ BIO *BIO_pop(BIO *b)
     return ret;
 }
 
-BIO *BIO_get_retry_BIO(BIO *bio, int *reason)
+BIO * __cdecl BIO_get_retry_BIO(BIO *bio, int *reason)
 {
     BIO *b, *last;
 
@@ -635,17 +635,17 @@ BIO *BIO_get_retry_BIO(BIO *bio, int *reason)
     return last;
 }
 
-int BIO_get_retry_reason(BIO *bio)
+int __cdecl BIO_get_retry_reason(BIO *bio)
 {
     return bio->retry_reason;
 }
 
-void BIO_set_retry_reason(BIO *bio, int reason)
+void __cdecl BIO_set_retry_reason(BIO *bio, int reason)
 {
     bio->retry_reason = reason;
 }
 
-BIO *BIO_find_type(BIO *bio, int type)
+BIO * __cdecl BIO_find_type(BIO *bio, int type)
 {
     int mt, mask;
 
@@ -667,19 +667,19 @@ BIO *BIO_find_type(BIO *bio, int type)
     return NULL;
 }
 
-BIO *BIO_next(BIO *b)
+BIO * __cdecl BIO_next(BIO *b)
 {
     if (b == NULL)
         return NULL;
     return b->next_bio;
 }
 
-void BIO_set_next(BIO *b, BIO *next)
+void __cdecl BIO_set_next(BIO *b, BIO *next)
 {
     b->next_bio = next;
 }
 
-void BIO_free_all(BIO *bio)
+void __cdecl BIO_free_all(BIO *bio)
 {
     BIO *b;
     int ref;
@@ -695,7 +695,7 @@ void BIO_free_all(BIO *bio)
     }
 }
 
-BIO *BIO_dup_chain(BIO *in)
+BIO * __cdecl BIO_dup_chain(BIO *in)
 {
     BIO *ret = NULL, *eoc = NULL, *bio, *new_bio;
 
@@ -739,42 +739,42 @@ BIO *BIO_dup_chain(BIO *in)
     return NULL;
 }
 
-void BIO_copy_next_retry(BIO *b)
+void __cdecl BIO_copy_next_retry(BIO *b)
 {
     BIO_set_flags(b, BIO_get_retry_flags(b->next_bio));
     b->retry_reason = b->next_bio->retry_reason;
 }
 
-int BIO_set_ex_data(BIO *bio, int idx, void *data)
+int __cdecl BIO_set_ex_data(BIO *bio, int idx, void *data)
 {
     return CRYPTO_set_ex_data(&(bio->ex_data), idx, data);
 }
 
-void *BIO_get_ex_data(BIO *bio, int idx)
+void * __cdecl BIO_get_ex_data(BIO *bio, int idx)
 {
     return CRYPTO_get_ex_data(&(bio->ex_data), idx);
 }
 
-uint64_t BIO_number_read(BIO *bio)
+uint64_t __cdecl BIO_number_read(BIO *bio)
 {
     if (bio)
         return bio->num_read;
     return 0;
 }
 
-uint64_t BIO_number_written(BIO *bio)
+uint64_t __cdecl BIO_number_written(BIO *bio)
 {
     if (bio)
         return bio->num_write;
     return 0;
 }
 
-void bio_free_ex_data(BIO *bio)
+void __cdecl bio_free_ex_data(BIO *bio)
 {
     CRYPTO_free_ex_data(CRYPTO_EX_INDEX_BIO, bio, &bio->ex_data);
 }
 
-void bio_cleanup(void)
+void __cdecl bio_cleanup(void)
 {
 #ifndef OPENSSL_NO_SOCK
     bio_sock_cleanup_int();
diff --git a/crypto/bio/bio_meth.c b/crypto/bio/bio_meth.c
index 493ff63a90..8f3cbf9997 100644
--- a/crypto/bio/bio_meth.c
+++ b/crypto/bio/bio_meth.c
@@ -19,7 +19,7 @@ DEFINE_RUN_ONCE_STATIC(do_bio_type_init)
     return bio_type_lock != NULL;
 }
 
-int BIO_get_new_index(void)
+int __cdecl BIO_get_new_index(void)
 {
     static CRYPTO_REF_COUNT bio_count = BIO_TYPE_START;
     int newval;
@@ -33,7 +33,7 @@ int BIO_get_new_index(void)
     return newval;
 }
 
-BIO_METHOD *BIO_meth_new(int type, const char *name)
+BIO_METHOD * __cdecl BIO_meth_new(int type, const char *name)
 {
     BIO_METHOD *biom = OPENSSL_zalloc(sizeof(BIO_METHOD));
 
@@ -47,7 +47,7 @@ BIO_METHOD *BIO_meth_new(int type, const char *name)
     return biom;
 }
 
-void BIO_meth_free(BIO_METHOD *biom)
+void __cdecl BIO_meth_free(BIO_METHOD *biom)
 {
     if (biom != NULL) {
         OPENSSL_free(biom->name);
@@ -55,19 +55,19 @@ void BIO_meth_free(BIO_METHOD *biom)
     }
 }
 
-int (*BIO_meth_get_write(const BIO_METHOD *biom)) (BIO *, const char *, int)
+int (__cdecl * BIO_meth_get_write(const BIO_METHOD *biom)) (BIO *, const char *, int)
 {
     return biom->bwrite_old;
 }
 
-int (*BIO_meth_get_write_ex(const BIO_METHOD *biom)) (BIO *, const char *, size_t,
+int (__cdecl * BIO_meth_get_write_ex(const BIO_METHOD *biom)) (BIO *, const char *, size_t,
                                                 size_t *)
 {
     return biom->bwrite;
 }
 
 /* Conversion for old style bwrite to new style */
-int bwrite_conv(BIO *bio, const char *data, size_t datal, size_t *written)
+int __cdecl bwrite_conv(BIO *bio, const char *data, size_t datal, size_t *written)
 {
     int ret;
 
@@ -86,34 +86,34 @@ int bwrite_conv(BIO *bio, const char *data, size_t datal, size_t *written)
     return 1;
 }
 
-int BIO_meth_set_write(BIO_METHOD *biom,
-                       int (*bwrite) (BIO *, const char *, int))
+int __cdecl BIO_meth_set_write(BIO_METHOD *biom,
+                       int (__cdecl *bwrite) (BIO *, const char *, int))
 {
     biom->bwrite_old = bwrite;
     biom->bwrite = bwrite_conv;
     return 1;
 }
 
-int BIO_meth_set_write_ex(BIO_METHOD *biom,
-                       int (*bwrite) (BIO *, const char *, size_t, size_t *))
+int __cdecl BIO_meth_set_write_ex(BIO_METHOD *biom,
+                       int (__cdecl *bwrite) (BIO *, const char *, size_t, size_t *))
 {
     biom->bwrite_old = NULL;
     biom->bwrite = bwrite;
     return 1;
 }
 
-int (*BIO_meth_get_read(const BIO_METHOD *biom)) (BIO *, char *, int)
+int (__cdecl * BIO_meth_get_read(const BIO_METHOD *biom)) (BIO *, char *, int)
 {
     return biom->bread_old;
 }
 
-int (*BIO_meth_get_read_ex(const BIO_METHOD *biom)) (BIO *, char *, size_t, size_t *)
+int (__cdecl * BIO_meth_get_read_ex(const BIO_METHOD *biom)) (BIO *, char *, size_t, size_t *)
 {
     return biom->bread;
 }
 
 /* Conversion for old style bread to new style */
-int bread_conv(BIO *bio, char *data, size_t datal, size_t *readbytes)
+int __cdecl bread_conv(BIO *bio, char *data, size_t datal, size_t *readbytes)
 {
     int ret;
 
@@ -132,87 +132,87 @@ int bread_conv(BIO *bio, char *data, size_t datal, size_t *readbytes)
     return 1;
 }
 
-int BIO_meth_set_read(BIO_METHOD *biom,
-                      int (*bread) (BIO *, char *, int))
+int __cdecl BIO_meth_set_read(BIO_METHOD *biom,
+                      int (__cdecl *bread) (BIO *, char *, int))
 {
     biom->bread_old = bread;
     biom->bread = bread_conv;
     return 1;
 }
 
-int BIO_meth_set_read_ex(BIO_METHOD *biom,
-                         int (*bread) (BIO *, char *, size_t, size_t *))
+int __cdecl BIO_meth_set_read_ex(BIO_METHOD *biom,
+                         int (__cdecl *bread) (BIO *, char *, size_t, size_t *))
 {
     biom->bread_old = NULL;
     biom->bread = bread;
     return 1;
 }
 
-int (*BIO_meth_get_puts(const BIO_METHOD *biom)) (BIO *, const char *)
+int (__cdecl * BIO_meth_get_puts(const BIO_METHOD *biom)) (BIO *, const char *)
 {
     return biom->bputs;
 }
 
-int BIO_meth_set_puts(BIO_METHOD *biom,
-                      int (*bputs) (BIO *, const char *))
+int __cdecl BIO_meth_set_puts(BIO_METHOD *biom,
+                      int (__cdecl *bputs) (BIO *, const char *))
 {
     biom->bputs = bputs;
     return 1;
 }
 
-int (*BIO_meth_get_gets(const BIO_METHOD *biom)) (BIO *, char *, int)
+int (__cdecl * BIO_meth_get_gets(const BIO_METHOD *biom)) (BIO *, char *, int)
 {
     return biom->bgets;
 }
 
-int BIO_meth_set_gets(BIO_METHOD *biom,
-                      int (*bgets) (BIO *, char *, int))
+int __cdecl BIO_meth_set_gets(BIO_METHOD *biom,
+                      int (__cdecl *bgets) (BIO *, char *, int))
 {
     biom->bgets = bgets;
     return 1;
 }
 
-long (*BIO_meth_get_ctrl(const BIO_METHOD *biom)) (BIO *, int, long, void *)
+long (__cdecl * BIO_meth_get_ctrl(const BIO_METHOD *biom)) (BIO *, int, long, void *)
 {
     return biom->ctrl;
 }
 
-int BIO_meth_set_ctrl(BIO_METHOD *biom,
-                      long (*ctrl) (BIO *, int, long, void *))
+int __cdecl BIO_meth_set_ctrl(BIO_METHOD *biom,
+                      long (__cdecl *ctrl) (BIO *, int, long, void *))
 {
     biom->ctrl = ctrl;
     return 1;
 }
 
-int (*BIO_meth_get_create(const BIO_METHOD *biom)) (BIO *)
+int (__cdecl * BIO_meth_get_create(const BIO_METHOD *biom)) (BIO *)
 {
     return biom->create;
 }
 
-int BIO_meth_set_create(BIO_METHOD *biom, int (*create) (BIO *))
+int __cdecl BIO_meth_set_create(BIO_METHOD *biom, int (__cdecl *create) (BIO *))
 {
     biom->create = create;
     return 1;
 }
 
-int (*BIO_meth_get_destroy(const BIO_METHOD *biom)) (BIO *)
+int (__cdecl * BIO_meth_get_destroy(const BIO_METHOD *biom)) (BIO *)
 {
     return biom->destroy;
 }
 
-int BIO_meth_set_destroy(BIO_METHOD *biom, int (*destroy) (BIO *))
+int __cdecl BIO_meth_set_destroy(BIO_METHOD *biom, int (__cdecl *destroy) (BIO *))
 {
     biom->destroy = destroy;
     return 1;
 }
 
-long (*BIO_meth_get_callback_ctrl(const BIO_METHOD *biom)) (BIO *, int, BIO_info_cb *)
+long (__cdecl * BIO_meth_get_callback_ctrl(const BIO_METHOD *biom)) (BIO *, int, BIO_info_cb *)
 {
     return biom->callback_ctrl;
 }
 
-int BIO_meth_set_callback_ctrl(BIO_METHOD *biom,
-                               long (*callback_ctrl) (BIO *, int,
+int __cdecl BIO_meth_set_callback_ctrl(BIO_METHOD *biom,
+                               long (__cdecl *callback_ctrl) (BIO *, int,
                                                       BIO_info_cb *))
 {
     biom->callback_ctrl = callback_ctrl;
diff --git a/crypto/bio/bss_acpt.c b/crypto/bio/bss_acpt.c
index 993e5903a0..ef50a86e42 100644
--- a/crypto/bio/bss_acpt.c
+++ b/crypto/bio/bss_acpt.c
@@ -33,16 +33,16 @@ typedef struct bio_accept_st {
     BIO *bio_chain;
 } BIO_ACCEPT;
 
-static int acpt_write(BIO *h, const char *buf, int num);
-static int acpt_read(BIO *h, char *buf, int size);
-static int acpt_puts(BIO *h, const char *str);
-static long acpt_ctrl(BIO *h, int cmd, long arg1, void *arg2);
-static int acpt_new(BIO *h);
-static int acpt_free(BIO *data);
-static int acpt_state(BIO *b, BIO_ACCEPT *c);
-static void acpt_close_socket(BIO *data);
-static BIO_ACCEPT *BIO_ACCEPT_new(void);
-static void BIO_ACCEPT_free(BIO_ACCEPT *a);
+static int __cdecl acpt_write(BIO *h, const char *buf, int num);
+static int __cdecl acpt_read(BIO *h, char *buf, int size);
+static int __cdecl acpt_puts(BIO *h, const char *str);
+static long __cdecl acpt_ctrl(BIO *h, int cmd, long arg1, void *arg2);
+static int __cdecl acpt_new(BIO *h);
+static int __cdecl acpt_free(BIO *data);
+static int __cdecl acpt_state(BIO *b, BIO_ACCEPT *c);
+static void __cdecl acpt_close_socket(BIO *data);
+static BIO_ACCEPT * __cdecl BIO_ACCEPT_new(void);
+static void __cdecl BIO_ACCEPT_free(BIO_ACCEPT *a);
 
 # define ACPT_S_BEFORE                   1
 # define ACPT_S_GET_ADDR                 2
@@ -68,12 +68,12 @@ static const BIO_METHOD methods_acceptp = {
     NULL,                       /* connect_callback_ctrl */
 };
 
-const BIO_METHOD *BIO_s_accept(void)
+const BIO_METHOD * __cdecl BIO_s_accept(void)
 {
     return &methods_acceptp;
 }
 
-static int acpt_new(BIO *bi)
+static int __cdecl acpt_new(BIO *bi)
 {
     BIO_ACCEPT *ba;
 
@@ -88,7 +88,7 @@ static int acpt_new(BIO *bi)
     return 1;
 }
 
-static BIO_ACCEPT *BIO_ACCEPT_new(void)
+static BIO_ACCEPT * __cdecl BIO_ACCEPT_new(void)
 {
     BIO_ACCEPT *ret;
 
@@ -101,7 +101,7 @@ static BIO_ACCEPT *BIO_ACCEPT_new(void)
     return ret;
 }
 
-static void BIO_ACCEPT_free(BIO_ACCEPT *a)
+static void __cdecl BIO_ACCEPT_free(BIO_ACCEPT *a)
 {
     if (a == NULL)
         return;
@@ -116,7 +116,7 @@ static void BIO_ACCEPT_free(BIO_ACCEPT *a)
     OPENSSL_free(a);
 }
 
-static void acpt_close_socket(BIO *bio)
+static void __cdecl acpt_close_socket(BIO *bio)
 {
     BIO_ACCEPT *c;
 
@@ -129,7 +129,7 @@ static void acpt_close_socket(BIO *bio)
     }
 }
 
-static int acpt_free(BIO *a)
+static int __cdecl acpt_free(BIO *a)
 {
     BIO_ACCEPT *data;
 
@@ -147,7 +147,7 @@ static int acpt_free(BIO *a)
     return 1;
 }
 
-static int acpt_state(BIO *b, BIO_ACCEPT *c)
+static int __cdecl acpt_state(BIO *b, BIO_ACCEPT *c)
 {
     BIO *bio = NULL, *dbio;
     int s = -1, ret = -1;
@@ -354,7 +354,7 @@ static int acpt_state(BIO *b, BIO_ACCEPT *c)
     return ret;
 }
 
-static int acpt_read(BIO *b, char *out, int outl)
+static int __cdecl acpt_read(BIO *b, char *out, int outl)
 {
     int ret = 0;
     BIO_ACCEPT *data;
@@ -373,7 +373,7 @@ static int acpt_read(BIO *b, char *out, int outl)
     return ret;
 }
 
-static int acpt_write(BIO *b, const char *in, int inl)
+static int __cdecl acpt_write(BIO *b, const char *in, int inl)
 {
     int ret;
     BIO_ACCEPT *data;
@@ -392,7 +392,7 @@ static int acpt_write(BIO *b, const char *in, int inl)
     return ret;
 }
 
-static long acpt_ctrl(BIO *b, int cmd, long num, void *ptr)
+static long __cdecl acpt_ctrl(BIO *b, int cmd, long num, void *ptr)
 {
     int *ip;
     long ret = 1;
@@ -535,7 +535,7 @@ static long acpt_ctrl(BIO *b, int cmd, long num, void *ptr)
     return ret;
 }
 
-static int acpt_puts(BIO *bp, const char *str)
+static int __cdecl acpt_puts(BIO *bp, const char *str)
 {
     int n, ret;
 
@@ -544,7 +544,7 @@ static int acpt_puts(BIO *bp, const char *str)
     return ret;
 }
 
-BIO *BIO_new_accept(const char *str)
+BIO * __cdecl BIO_new_accept(const char *str)
 {
     BIO *ret;
 
diff --git a/crypto/bio/bss_bio.c b/crypto/bio/bss_bio.c
index e34382c557..cafbf5fd61 100644
--- a/crypto/bio/bss_bio.c
+++ b/crypto/bio/bss_bio.c
@@ -25,15 +25,15 @@
 #include <openssl/err.h>
 #include <openssl/crypto.h>
 
-static int bio_new(BIO *bio);
-static int bio_free(BIO *bio);
-static int bio_read(BIO *bio, char *buf, int size);
-static int bio_write(BIO *bio, const char *buf, int num);
-static long bio_ctrl(BIO *bio, int cmd, long num, void *ptr);
-static int bio_puts(BIO *bio, const char *str);
+static int __cdecl bio_new(BIO *bio);
+static int __cdecl bio_free(BIO *bio);
+static int __cdecl bio_read(BIO *bio, char *buf, int size);
+static int __cdecl bio_write(BIO *bio, const char *buf, int num);
+static long __cdecl bio_ctrl(BIO *bio, int cmd, long num, void *ptr);
+static int __cdecl bio_puts(BIO *bio, const char *str);
 
-static int bio_make_pair(BIO *bio1, BIO *bio2);
-static void bio_destroy_pair(BIO *bio);
+static int __cdecl bio_make_pair(BIO *bio1, BIO *bio2);
+static void __cdecl bio_destroy_pair(BIO *bio);
 
 static const BIO_METHOD methods_biop = {
     BIO_TYPE_BIO,
@@ -52,7 +52,7 @@ static const BIO_METHOD methods_biop = {
     NULL                        /* no bio_callback_ctrl */
 };
 
-const BIO_METHOD *BIO_s_bio(void)
+const BIO_METHOD * __cdecl BIO_s_bio(void)
 {
     return &methods_biop;
 }
@@ -75,7 +75,7 @@ struct bio_bio_st {
                                  * warrants. */
 };
 
-static int bio_new(BIO *bio)
+static int __cdecl bio_new(BIO *bio)
 {
     struct bio_bio_st *b = OPENSSL_zalloc(sizeof(*b));
 
@@ -89,7 +89,7 @@ static int bio_new(BIO *bio)
     return 1;
 }
 
-static int bio_free(BIO *bio)
+static int __cdecl bio_free(BIO *bio)
 {
     struct bio_bio_st *b;
 
@@ -108,7 +108,7 @@ static int bio_free(BIO *bio)
     return 1;
 }
 
-static int bio_read(BIO *bio, char *buf, int size_)
+static int __cdecl bio_read(BIO *bio, char *buf, int size_)
 {
     size_t size = size_;
     size_t rest;
@@ -267,7 +267,7 @@ static ossl_ssize_t bio_nread(BIO *bio, char **buf, size_t num_)
     return num;
 }
 
-static int bio_write(BIO *bio, const char *buf, int num_)
+static int __cdecl bio_write(BIO *bio, const char *buf, int num_)
 {
     size_t num = num_;
     size_t rest;
@@ -415,7 +415,7 @@ static ossl_ssize_t bio_nwrite(BIO *bio, char **buf, size_t num_)
     return num;
 }
 
-static long bio_ctrl(BIO *bio, int cmd, long num, void *ptr)
+static long __cdecl bio_ctrl(BIO *bio, int cmd, long num, void *ptr)
 {
     long ret;
     struct bio_bio_st *b = bio->ptr;
@@ -600,12 +600,12 @@ static long bio_ctrl(BIO *bio, int cmd, long num, void *ptr)
     return ret;
 }
 
-static int bio_puts(BIO *bio, const char *str)
+static int __cdecl bio_puts(BIO *bio, const char *str)
 {
     return bio_write(bio, str, strlen(str));
 }
 
-static int bio_make_pair(BIO *bio1, BIO *bio2)
+static int __cdecl bio_make_pair(BIO *bio1, BIO *bio2)
 {
     struct bio_bio_st *b1, *b2;
 
@@ -653,7 +653,7 @@ static int bio_make_pair(BIO *bio1, BIO *bio2)
     return 1;
 }
 
-static void bio_destroy_pair(BIO *bio)
+static void __cdecl bio_destroy_pair(BIO *bio)
 {
     struct bio_bio_st *b = bio->ptr;
 
@@ -682,7 +682,7 @@ static void bio_destroy_pair(BIO *bio)
 }
 
 /* Exported convenience functions */
-int BIO_new_bio_pair(BIO **bio1_p, size_t writebuf1,
+int __cdecl BIO_new_bio_pair(BIO **bio1_p, size_t writebuf1,
                      BIO **bio2_p, size_t writebuf2)
 {
     BIO *bio1 = NULL, *bio2 = NULL;
@@ -725,17 +725,17 @@ int BIO_new_bio_pair(BIO **bio1_p, size_t writebuf1,
     return ret;
 }
 
-size_t BIO_ctrl_get_write_guarantee(BIO *bio)
+size_t __cdecl BIO_ctrl_get_write_guarantee(BIO *bio)
 {
     return BIO_ctrl(bio, BIO_C_GET_WRITE_GUARANTEE, 0, NULL);
 }
 
-size_t BIO_ctrl_get_read_request(BIO *bio)
+size_t __cdecl BIO_ctrl_get_read_request(BIO *bio)
 {
     return BIO_ctrl(bio, BIO_C_GET_READ_REQUEST, 0, NULL);
 }
 
-int BIO_ctrl_reset_read_request(BIO *bio)
+int __cdecl BIO_ctrl_reset_read_request(BIO *bio)
 {
     return (BIO_ctrl(bio, BIO_C_RESET_READ_REQUEST, 0, NULL) != 0);
 }
@@ -745,7 +745,7 @@ int BIO_ctrl_reset_read_request(BIO *bio)
  * (conceivably some other BIOs could allow non-copying reads and writes
  * too.)
  */
-int BIO_nread0(BIO *bio, char **buf)
+int __cdecl BIO_nread0(BIO *bio, char **buf)
 {
     long ret;
 
@@ -761,7 +761,7 @@ int BIO_nread0(BIO *bio, char **buf)
         return (int)ret;
 }
 
-int BIO_nread(BIO *bio, char **buf, int num)
+int __cdecl BIO_nread(BIO *bio, char **buf, int num)
 {
     int ret;
 
@@ -776,7 +776,7 @@ int BIO_nread(BIO *bio, char **buf, int num)
     return ret;
 }
 
-int BIO_nwrite0(BIO *bio, char **buf)
+int __cdecl BIO_nwrite0(BIO *bio, char **buf)
 {
     long ret;
 
@@ -792,7 +792,7 @@ int BIO_nwrite0(BIO *bio, char **buf)
         return (int)ret;
 }
 
-int BIO_nwrite(BIO *bio, char **buf, int num)
+int __cdecl BIO_nwrite(BIO *bio, char **buf, int num)
 {
     int ret;
 
diff --git a/crypto/bio/bss_conn.c b/crypto/bio/bss_conn.c
index e9673fe783..f62d4fa6ce 100644
--- a/crypto/bio/bss_conn.c
+++ b/crypto/bio/bss_conn.c
@@ -35,18 +35,18 @@ typedef struct bio_connect_st {
     BIO_info_cb *info_callback;
 } BIO_CONNECT;
 
-static int conn_write(BIO *h, const char *buf, int num);
-static int conn_read(BIO *h, char *buf, int size);
-static int conn_puts(BIO *h, const char *str);
-static long conn_ctrl(BIO *h, int cmd, long arg1, void *arg2);
-static int conn_new(BIO *h);
-static int conn_free(BIO *data);
-static long conn_callback_ctrl(BIO *h, int cmd, BIO_info_cb *);
-
-static int conn_state(BIO *b, BIO_CONNECT *c);
-static void conn_close_socket(BIO *data);
-BIO_CONNECT *BIO_CONNECT_new(void);
-void BIO_CONNECT_free(BIO_CONNECT *a);
+static int __cdecl conn_write(BIO *h, const char *buf, int num);
+static int __cdecl conn_read(BIO *h, char *buf, int size);
+static int __cdecl conn_puts(BIO *h, const char *str);
+static long __cdecl conn_ctrl(BIO *h, int cmd, long arg1, void *arg2);
+static int __cdecl conn_new(BIO *h);
+static int __cdecl conn_free(BIO *data);
+static long __cdecl conn_callback_ctrl(BIO *h, int cmd, BIO_info_cb *);
+
+static int __cdecl conn_state(BIO *b, BIO_CONNECT *c);
+static void __cdecl conn_close_socket(BIO *data);
+BIO_CONNECT * __cdecl BIO_CONNECT_new(void);
+void __cdecl BIO_CONNECT_free(BIO_CONNECT *a);
 
 #define BIO_CONN_S_BEFORE                1
 #define BIO_CONN_S_GET_ADDR              2
@@ -72,7 +72,7 @@ static const BIO_METHOD methods_connectp = {
     conn_callback_ctrl,
 };
 
-static int conn_state(BIO *b, BIO_CONNECT *c)
+static int __cdecl conn_state(BIO *b, BIO_CONNECT *c)
 {
     int ret = -1, i;
     BIO_info_cb *cb = NULL;
@@ -219,7 +219,7 @@ static int conn_state(BIO *b, BIO_CONNECT *c)
     return ret;
 }
 
-BIO_CONNECT *BIO_CONNECT_new(void)
+BIO_CONNECT * __cdecl BIO_CONNECT_new(void)
 {
     BIO_CONNECT *ret;
 
@@ -232,7 +232,7 @@ BIO_CONNECT *BIO_CONNECT_new(void)
     return ret;
 }
 
-void BIO_CONNECT_free(BIO_CONNECT *a)
+void __cdecl BIO_CONNECT_free(BIO_CONNECT *a)
 {
     if (a == NULL)
         return;
@@ -242,12 +242,12 @@ void BIO_CONNECT_free(BIO_CONNECT *a)
     OPENSSL_free(a);
 }
 
-const BIO_METHOD *BIO_s_connect(void)
+const BIO_METHOD * __cdecl BIO_s_connect(void)
 {
     return &methods_connectp;
 }
 
-static int conn_new(BIO *bi)
+static int __cdecl conn_new(BIO *bi)
 {
     bi->init = 0;
     bi->num = (int)INVALID_SOCKET;
@@ -258,7 +258,7 @@ static int conn_new(BIO *bi)
         return 1;
 }
 
-static void conn_close_socket(BIO *bio)
+static void __cdecl conn_close_socket(BIO *bio)
 {
     BIO_CONNECT *c;
 
@@ -272,7 +272,7 @@ static void conn_close_socket(BIO *bio)
     }
 }
 
-static int conn_free(BIO *a)
+static int __cdecl conn_free(BIO *a)
 {
     BIO_CONNECT *data;
 
@@ -290,7 +290,7 @@ static int conn_free(BIO *a)
     return 1;
 }
 
-static int conn_read(BIO *b, char *out, int outl)
+static int __cdecl conn_read(BIO *b, char *out, int outl)
 {
     int ret = 0;
     BIO_CONNECT *data;
@@ -314,7 +314,7 @@ static int conn_read(BIO *b, char *out, int outl)
     return ret;
 }
 
-static int conn_write(BIO *b, const char *in, int inl)
+static int __cdecl conn_write(BIO *b, const char *in, int inl)
 {
     int ret;
     BIO_CONNECT *data;
@@ -336,7 +336,7 @@ static int conn_write(BIO *b, const char *in, int inl)
     return ret;
 }
 
-static long conn_ctrl(BIO *b, int cmd, long num, void *ptr)
+static long __cdecl conn_ctrl(BIO *b, int cmd, long num, void *ptr)
 {
     BIO *dbio;
     int *ip;
@@ -495,7 +495,7 @@ static long conn_ctrl(BIO *b, int cmd, long num, void *ptr)
     return ret;
 }
 
-static long conn_callback_ctrl(BIO *b, int cmd, BIO_info_cb *fp)
+static long __cdecl conn_callback_ctrl(BIO *b, int cmd, BIO_info_cb *fp)
 {
     long ret = 1;
     BIO_CONNECT *data;
@@ -515,7 +515,7 @@ static long conn_callback_ctrl(BIO *b, int cmd, BIO_info_cb *fp)
     return ret;
 }
 
-static int conn_puts(BIO *bp, const char *str)
+static int __cdecl conn_puts(BIO *bp, const char *str)
 {
     int n, ret;
 
@@ -524,7 +524,7 @@ static int conn_puts(BIO *bp, const char *str)
     return ret;
 }
 
-BIO *BIO_new_connect(const char *str)
+BIO * __cdecl BIO_new_connect(const char *str)
 {
     BIO *ret;
 
diff --git a/crypto/bio/bss_dgram.c b/crypto/bio/bss_dgram.c
index 551821609f..80015e48b0 100644
--- a/crypto/bio/bss_dgram.c
+++ b/crypto/bio/bss_dgram.c
@@ -38,30 +38,30 @@
          ((a)->s6_addr32[2] == htonl(0x0000ffff)))
 # endif
 
-static int dgram_write(BIO *h, const char *buf, int num);
-static int dgram_read(BIO *h, char *buf, int size);
-static int dgram_puts(BIO *h, const char *str);
-static long dgram_ctrl(BIO *h, int cmd, long arg1, void *arg2);
-static int dgram_new(BIO *h);
-static int dgram_free(BIO *data);
-static int dgram_clear(BIO *bio);
+static int __cdecl dgram_write(BIO *h, const char *buf, int num);
+static int __cdecl dgram_read(BIO *h, char *buf, int size);
+static int __cdecl dgram_puts(BIO *h, const char *str);
+static long __cdecl dgram_ctrl(BIO *h, int cmd, long arg1, void *arg2);
+static int __cdecl dgram_new(BIO *h);
+static int __cdecl dgram_free(BIO *data);
+static int __cdecl dgram_clear(BIO *bio);
 
 # ifndef OPENSSL_NO_SCTP
-static int dgram_sctp_write(BIO *h, const char *buf, int num);
-static int dgram_sctp_read(BIO *h, char *buf, int size);
-static int dgram_sctp_puts(BIO *h, const char *str);
-static long dgram_sctp_ctrl(BIO *h, int cmd, long arg1, void *arg2);
-static int dgram_sctp_new(BIO *h);
-static int dgram_sctp_free(BIO *data);
+static int __cdecl dgram_sctp_write(BIO *h, const char *buf, int num);
+static int __cdecl dgram_sctp_read(BIO *h, char *buf, int size);
+static int __cdecl dgram_sctp_puts(BIO *h, const char *str);
+static long __cdecl dgram_sctp_ctrl(BIO *h, int cmd, long arg1, void *arg2);
+static int __cdecl dgram_sctp_new(BIO *h);
+static int __cdecl dgram_sctp_free(BIO *data);
 #  ifdef SCTP_AUTHENTICATION_EVENT
 static void dgram_sctp_handle_auth_free_key_event(BIO *b, union sctp_notification
                                                   *snp);
 #  endif
 # endif
 
-static int BIO_dgram_should_retry(int s);
+static int __cdecl BIO_dgram_should_retry(int s);
 
-static void get_current_time(struct timeval *t);
+static void __cdecl get_current_time(struct timeval *t);
 
 static const BIO_METHOD methods_dgramp = {
     BIO_TYPE_DGRAM,
@@ -134,12 +134,12 @@ typedef struct bio_dgram_sctp_data_st {
 } bio_dgram_sctp_data;
 # endif
 
-const BIO_METHOD *BIO_s_datagram(void)
+const BIO_METHOD * __cdecl BIO_s_datagram(void)
 {
     return &methods_dgramp;
 }
 
-BIO *BIO_new_dgram(int fd, int close_flag)
+BIO * __cdecl BIO_new_dgram(int fd, int close_flag)
 {
     BIO *ret;
 
@@ -150,7 +150,7 @@ BIO *BIO_new_dgram(int fd, int close_flag)
     return ret;
 }
 
-static int dgram_new(BIO *bi)
+static int __cdecl dgram_new(BIO *bi)
 {
     bio_dgram_data *data = OPENSSL_zalloc(sizeof(*data));
 
@@ -160,7 +160,7 @@ static int dgram_new(BIO *bi)
     return 1;
 }
 
-static int dgram_free(BIO *a)
+static int __cdecl dgram_free(BIO *a)
 {
     bio_dgram_data *data;
 
@@ -175,7 +175,7 @@ static int dgram_free(BIO *a)
     return 1;
 }
 
-static int dgram_clear(BIO *a)
+static int __cdecl dgram_clear(BIO *a)
 {
     if (a == NULL)
         return 0;
@@ -294,7 +294,7 @@ static void dgram_reset_rcv_timeout(BIO *b)
 # endif
 }
 
-static int dgram_read(BIO *b, char *out, int outl)
+static int __cdecl dgram_read(BIO *b, char *out, int outl)
 {
     int ret = 0;
     bio_dgram_data *data = (bio_dgram_data *)b->ptr;
@@ -328,7 +328,7 @@ static int dgram_read(BIO *b, char *out, int outl)
     return ret;
 }
 
-static int dgram_write(BIO *b, const char *in, int inl)
+static int __cdecl dgram_write(BIO *b, const char *in, int inl)
 {
     int ret;
     bio_dgram_data *data = (bio_dgram_data *)b->ptr;
@@ -392,7 +392,7 @@ static long dgram_get_mtu_overhead(bio_dgram_data *data)
     return ret;
 }
 
-static long dgram_ctrl(BIO *b, int cmd, long num, void *ptr)
+static long __cdecl dgram_ctrl(BIO *b, int cmd, long num, void *ptr)
 {
     long ret = 1;
     int *ip;
@@ -797,7 +797,7 @@ static long dgram_ctrl(BIO *b, int cmd, long num, void *ptr)
     return ret;
 }
 
-static int dgram_puts(BIO *bp, const char *str)
+static int __cdecl dgram_puts(BIO *bp, const char *str)
 {
     int n, ret;
 
@@ -807,12 +807,12 @@ static int dgram_puts(BIO *bp, const char *str)
 }
 
 # ifndef OPENSSL_NO_SCTP
-const BIO_METHOD *BIO_s_datagram_sctp(void)
+const BIO_METHOD * __cdecl BIO_s_datagram_sctp(void)
 {
     return &methods_dgramp_sctp;
 }
 
-BIO *BIO_new_dgram_sctp(int fd, int close_flag)
+BIO * __cdecl BIO_new_dgram_sctp(int fd, int close_flag)
 {
     BIO *bio;
     int ret, optval = 20000;
@@ -944,12 +944,12 @@ BIO *BIO_new_dgram_sctp(int fd, int close_flag)
     return bio;
 }
 
-int BIO_dgram_is_sctp(BIO *bio)
+int __cdecl BIO_dgram_is_sctp(BIO *bio)
 {
     return (BIO_method_type(bio) == BIO_TYPE_DGRAM_SCTP);
 }
 
-static int dgram_sctp_new(BIO *bi)
+static int __cdecl dgram_sctp_new(BIO *bi)
 {
     bio_dgram_sctp_data *data = NULL;
 
@@ -968,7 +968,7 @@ static int dgram_sctp_new(BIO *bi)
     return 1;
 }
 
-static int dgram_sctp_free(BIO *a)
+static int __cdecl dgram_sctp_free(BIO *a)
 {
     bio_dgram_sctp_data *data;
 
@@ -1002,7 +1002,7 @@ void dgram_sctp_handle_auth_free_key_event(BIO *b,
 }
 #  endif
 
-static int dgram_sctp_read(BIO *b, char *out, int outl)
+static int __cdecl dgram_sctp_read(BIO *b, char *out, int outl)
 {
     int ret = 0, n = 0, i, optval;
     socklen_t optlen;
@@ -1229,7 +1229,7 @@ static int dgram_sctp_read(BIO *b, char *out, int outl)
  *
  * Returns -1 on error or the sent amount of bytes on success
  */
-static int dgram_sctp_write(BIO *b, const char *in, int inl)
+static int __cdecl dgram_sctp_write(BIO *b, const char *in, int inl)
 {
     int ret;
     bio_dgram_sctp_data *data = (bio_dgram_sctp_data *) b->ptr;
@@ -1337,7 +1337,7 @@ static int dgram_sctp_write(BIO *b, const char *in, int inl)
     return ret;
 }
 
-static long dgram_sctp_ctrl(BIO *b, int cmd, long num, void *ptr)
+static long __cdecl dgram_sctp_ctrl(BIO *b, int cmd, long num, void *ptr)
 {
     long ret = 1;
     bio_dgram_sctp_data *data = NULL;
@@ -1573,7 +1573,7 @@ static long dgram_sctp_ctrl(BIO *b, int cmd, long num, void *ptr)
     return ret;
 }
 
-int BIO_dgram_sctp_notification_cb(BIO *b,
+int __cdecl BIO_dgram_sctp_notification_cb(BIO *b,
                                    void (*handle_notifications) (BIO *bio,
                                                                  void
                                                                  *context,
@@ -1604,7 +1604,7 @@ int BIO_dgram_sctp_notification_cb(BIO *b,
  *  0 when not dry yet
  *  1 when dry
  */
-int BIO_dgram_sctp_wait_for_dry(BIO *b)
+int __cdecl BIO_dgram_sctp_wait_for_dry(BIO *b)
 {
     int is_dry = 0;
     int sockflags = 0;
@@ -1762,7 +1762,7 @@ int BIO_dgram_sctp_wait_for_dry(BIO *b)
     return is_dry;
 }
 
-int BIO_dgram_sctp_msg_waiting(BIO *b)
+int __cdecl BIO_dgram_sctp_msg_waiting(BIO *b)
 {
     int n, sockflags;
     union sctp_notification snp;
@@ -1821,7 +1821,7 @@ int BIO_dgram_sctp_msg_waiting(BIO *b)
         return 0;
 }
 
-static int dgram_sctp_puts(BIO *bp, const char *str)
+static int __cdecl dgram_sctp_puts(BIO *bp, const char *str)
 {
     int n, ret;
 
@@ -1831,7 +1831,7 @@ static int dgram_sctp_puts(BIO *bp, const char *str)
 }
 # endif
 
-static int BIO_dgram_should_retry(int i)
+static int __cdecl BIO_dgram_should_retry(int i)
 {
     int err;
 
@@ -1851,7 +1851,7 @@ static int BIO_dgram_should_retry(int i)
     return 0;
 }
 
-int BIO_dgram_non_fatal_error(int err)
+int __cdecl BIO_dgram_non_fatal_error(int err)
 {
     switch (err) {
 # if defined(OPENSSL_SYS_WINDOWS)
@@ -1899,7 +1899,7 @@ int BIO_dgram_non_fatal_error(int err)
     return 0;
 }
 
-static void get_current_time(struct timeval *t)
+static void __cdecl get_current_time(struct timeval *t)
 {
 # if defined(_WIN32)
     SYSTEMTIME st;
diff --git a/crypto/bio/bss_fd.c b/crypto/bio/bss_fd.c
index 5bc539c90b..c6ba16dc78 100644
--- a/crypto/bio/bss_fd.c
+++ b/crypto/bio/bss_fd.c
@@ -16,22 +16,22 @@
 /*
  * Dummy placeholder for BIO_s_fd...
  */
-BIO *BIO_new_fd(int fd, int close_flag)
+BIO * __cdecl BIO_new_fd(int fd, int close_flag)
 {
     return NULL;
 }
 
-int BIO_fd_non_fatal_error(int err)
+int __cdecl BIO_fd_non_fatal_error(int err)
 {
     return 0;
 }
 
-int BIO_fd_should_retry(int i)
+int __cdecl BIO_fd_should_retry(int i)
 {
     return 0;
 }
 
-const BIO_METHOD *BIO_s_fd(void)
+const BIO_METHOD * __cdecl BIO_s_fd(void)
 {
     return NULL;
 }
@@ -48,14 +48,14 @@ const BIO_METHOD *BIO_s_fd(void)
  * file descriptors can only be provided by application. Therefore
  * "UPLINK" calls are due...
  */
-static int fd_write(BIO *h, const char *buf, int num);
-static int fd_read(BIO *h, char *buf, int size);
-static int fd_puts(BIO *h, const char *str);
-static int fd_gets(BIO *h, char *buf, int size);
-static long fd_ctrl(BIO *h, int cmd, long arg1, void *arg2);
-static int fd_new(BIO *h);
-static int fd_free(BIO *data);
-int BIO_fd_should_retry(int s);
+static int __cdecl fd_write(BIO *h, const char *buf, int num);
+static int __cdecl fd_read(BIO *h, char *buf, int size);
+static int __cdecl fd_puts(BIO *h, const char *str);
+static int __cdecl fd_gets(BIO *h, char *buf, int size);
+static long __cdecl fd_ctrl(BIO *h, int cmd, long arg1, void *arg2);
+static int __cdecl fd_new(BIO *h);
+static int __cdecl fd_free(BIO *data);
+int __cdecl BIO_fd_should_retry(int s);
 
 static const BIO_METHOD methods_fdp = {
     BIO_TYPE_FD,
@@ -74,12 +74,12 @@ static const BIO_METHOD methods_fdp = {
     NULL,                       /* fd_callback_ctrl */
 };
 
-const BIO_METHOD *BIO_s_fd(void)
+const BIO_METHOD * __cdecl BIO_s_fd(void)
 {
     return &methods_fdp;
 }
 
-BIO *BIO_new_fd(int fd, int close_flag)
+BIO * __cdecl BIO_new_fd(int fd, int close_flag)
 {
     BIO *ret;
     ret = BIO_new(BIO_s_fd());
@@ -89,7 +89,7 @@ BIO *BIO_new_fd(int fd, int close_flag)
     return ret;
 }
 
-static int fd_new(BIO *bi)
+static int __cdecl fd_new(BIO *bi)
 {
     bi->init = 0;
     bi->num = -1;
@@ -98,7 +98,7 @@ static int fd_new(BIO *bi)
     return 1;
 }
 
-static int fd_free(BIO *a)
+static int __cdecl fd_free(BIO *a)
 {
     if (a == NULL)
         return 0;
@@ -112,7 +112,7 @@ static int fd_free(BIO *a)
     return 1;
 }
 
-static int fd_read(BIO *b, char *out, int outl)
+static int __cdecl fd_read(BIO *b, char *out, int outl)
 {
     int ret = 0;
 
@@ -128,7 +128,7 @@ static int fd_read(BIO *b, char *out, int outl)
     return ret;
 }
 
-static int fd_write(BIO *b, const char *in, int inl)
+static int __cdecl fd_write(BIO *b, const char *in, int inl)
 {
     int ret;
     clear_sys_error();
@@ -141,7 +141,7 @@ static int fd_write(BIO *b, const char *in, int inl)
     return ret;
 }
 
-static long fd_ctrl(BIO *b, int cmd, long num, void *ptr)
+static long __cdecl fd_ctrl(BIO *b, int cmd, long num, void *ptr)
 {
     long ret = 1;
     int *ip;
@@ -193,7 +193,7 @@ static long fd_ctrl(BIO *b, int cmd, long num, void *ptr)
     return ret;
 }
 
-static int fd_puts(BIO *bp, const char *str)
+static int __cdecl fd_puts(BIO *bp, const char *str)
 {
     int n, ret;
 
@@ -202,7 +202,7 @@ static int fd_puts(BIO *bp, const char *str)
     return ret;
 }
 
-static int fd_gets(BIO *bp, char *buf, int size)
+static int __cdecl fd_gets(BIO *bp, char *buf, int size)
 {
     int ret = 0;
     char *ptr = buf;
@@ -220,7 +220,7 @@ static int fd_gets(BIO *bp, char *buf, int size)
     return ret;
 }
 
-int BIO_fd_should_retry(int i)
+int __cdecl BIO_fd_should_retry(int i)
 {
     int err;
 
@@ -232,7 +232,7 @@ int BIO_fd_should_retry(int i)
     return 0;
 }
 
-int BIO_fd_non_fatal_error(int err)
+int __cdecl BIO_fd_non_fatal_error(int err)
 {
     switch (err) {
 
diff --git a/crypto/bio/bss_file.c b/crypto/bio/bss_file.c
index a210205597..37a37632c2 100644
--- a/crypto/bio/bss_file.c
+++ b/crypto/bio/bss_file.c
@@ -32,13 +32,13 @@
 
 #if !defined(OPENSSL_NO_STDIO)
 
-static int file_write(BIO *h, const char *buf, int num);
-static int file_read(BIO *h, char *buf, int size);
-static int file_puts(BIO *h, const char *str);
-static int file_gets(BIO *h, char *str, int size);
-static long file_ctrl(BIO *h, int cmd, long arg1, void *arg2);
-static int file_new(BIO *h);
-static int file_free(BIO *data);
+static int __cdecl file_write(BIO *h, const char *buf, int num);
+static int __cdecl file_read(BIO *h, char *buf, int size);
+static int __cdecl file_puts(BIO *h, const char *str);
+static int __cdecl file_gets(BIO *h, char *str, int size);
+static long __cdecl file_ctrl(BIO *h, int cmd, long arg1, void *arg2);
+static int __cdecl file_new(BIO *h);
+static int __cdecl file_free(BIO *data);
 static const BIO_METHOD methods_filep = {
     BIO_TYPE_FILE,
     "FILE pointer",
@@ -56,7 +56,7 @@ static const BIO_METHOD methods_filep = {
     NULL,                      /* file_callback_ctrl */
 };
 
-BIO *BIO_new_file(const char *filename, const char *mode)
+BIO * __cdecl BIO_new_file(const char *filename, const char *mode)
 {
     BIO  *ret;
     FILE *file = openssl_fopen(filename, mode);
@@ -89,7 +89,7 @@ BIO *BIO_new_file(const char *filename, const char *mode)
     return ret;
 }
 
-BIO *BIO_new_fp(FILE *stream, int close_flag)
+BIO * __cdecl BIO_new_fp(FILE *stream, int close_flag)
 {
     BIO *ret;
 
@@ -102,12 +102,12 @@ BIO *BIO_new_fp(FILE *stream, int close_flag)
     return ret;
 }
 
-const BIO_METHOD *BIO_s_file(void)
+const BIO_METHOD * __cdecl BIO_s_file(void)
 {
     return &methods_filep;
 }
 
-static int file_new(BIO *bi)
+static int __cdecl file_new(BIO *bi)
 {
     bi->init = 0;
     bi->num = 0;
@@ -116,7 +116,7 @@ static int file_new(BIO *bi)
     return 1;
 }
 
-static int file_free(BIO *a)
+static int __cdecl file_free(BIO *a)
 {
     if (a == NULL)
         return 0;
@@ -134,7 +134,7 @@ static int file_free(BIO *a)
     return 1;
 }
 
-static int file_read(BIO *b, char *out, int outl)
+static int __cdecl file_read(BIO *b, char *out, int outl)
 {
     int ret = 0;
 
@@ -154,7 +154,7 @@ static int file_read(BIO *b, char *out, int outl)
     return ret;
 }
 
-static int file_write(BIO *b, const char *in, int inl)
+static int __cdecl file_write(BIO *b, const char *in, int inl)
 {
     int ret = 0;
 
@@ -175,7 +175,7 @@ static int file_write(BIO *b, const char *in, int inl)
     return ret;
 }
 
-static long file_ctrl(BIO *b, int cmd, long num, void *ptr)
+static long __cdecl file_ctrl(BIO *b, int cmd, long num, void *ptr)
 {
     long ret = 1;
     FILE *fp = (FILE *)b->ptr;
@@ -334,7 +334,7 @@ static long file_ctrl(BIO *b, int cmd, long num, void *ptr)
     return ret;
 }
 
-static int file_gets(BIO *bp, char *buf, int size)
+static int __cdecl file_gets(BIO *bp, char *buf, int size)
 {
     int ret = 0;
 
@@ -352,7 +352,7 @@ static int file_gets(BIO *bp, char *buf, int size)
     return ret;
 }
 
-static int file_puts(BIO *bp, const char *str)
+static int __cdecl file_puts(BIO *bp, const char *str)
 {
     int n, ret;
 
@@ -409,12 +409,12 @@ static const BIO_METHOD methods_filep = {
     NULL,                      /* file_callback_ctrl */
 };
 
-const BIO_METHOD *BIO_s_file(void)
+const BIO_METHOD * __cdecl BIO_s_file(void)
 {
     return &methods_filep;
 }
 
-BIO *BIO_new_file(const char *filename, const char *mode)
+BIO * __cdecl BIO_new_file(const char *filename, const char *mode)
 {
     return NULL;
 }
diff --git a/crypto/bio/bss_log.c b/crypto/bio/bss_log.c
index e9ab932ec2..631ab8875f 100644
--- a/crypto/bio/bss_log.c
+++ b/crypto/bio/bss_log.c
@@ -100,7 +100,7 @@ static const BIO_METHOD methods_slg = {
     NULL,                      /* slg_callback_ctrl */
 };
 
-const BIO_METHOD *BIO_s_log(void)
+const BIO_METHOD * __cdecl BIO_s_log(void)
 {
     return &methods_slg;
 }
@@ -409,7 +409,7 @@ static void xcloselog(BIO *bp)
 # endif                         /* Unix */
 
 #else                           /* NO_SYSLOG */
-const BIO_METHOD *BIO_s_log(void)
+const BIO_METHOD * __cdecl BIO_s_log(void)
 {
     return NULL;
 }
diff --git a/crypto/bio/bss_mem.c b/crypto/bio/bss_mem.c
index 2d536e9db0..304e6fa6ce 100644
--- a/crypto/bio/bss_mem.c
+++ b/crypto/bio/bss_mem.c
@@ -12,16 +12,16 @@
 #include "bio_lcl.h"
 #include "internal/cryptlib.h"
 
-static int mem_write(BIO *h, const char *buf, int num);
-static int mem_read(BIO *h, char *buf, int size);
-static int mem_puts(BIO *h, const char *str);
-static int mem_gets(BIO *h, char *str, int size);
-static long mem_ctrl(BIO *h, int cmd, long arg1, void *arg2);
-static int mem_new(BIO *h);
-static int secmem_new(BIO *h);
-static int mem_free(BIO *data);
-static int mem_buf_free(BIO *data);
-static int mem_buf_sync(BIO *h);
+static int __cdecl mem_write(BIO *h, const char *buf, int num);
+static int __cdecl mem_read(BIO *h, char *buf, int size);
+static int __cdecl mem_puts(BIO *h, const char *str);
+static int __cdecl mem_gets(BIO *h, char *str, int size);
+static long __cdecl mem_ctrl(BIO *h, int cmd, long arg1, void *arg2);
+static int __cdecl mem_new(BIO *h);
+static int __cdecl secmem_new(BIO *h);
+static int __cdecl mem_free(BIO *data);
+static int __cdecl mem_buf_free(BIO *data);
+static int __cdecl mem_buf_sync(BIO *h);
 
 static const BIO_METHOD mem_method = {
     BIO_TYPE_MEM,
@@ -73,17 +73,17 @@ typedef struct bio_buf_mem_st {
  * should_retry is not set
  */
 
-const BIO_METHOD *BIO_s_mem(void)
+const BIO_METHOD * __cdecl BIO_s_mem(void)
 {
     return &mem_method;
 }
 
-const BIO_METHOD *BIO_s_secmem(void)
+const BIO_METHOD * __cdecl BIO_s_secmem(void)
 {
     return(&secmem_method);
 }
 
-BIO *BIO_new_mem_buf(const void *buf, int len)
+BIO * __cdecl BIO_new_mem_buf(const void *buf, int len)
 {
     BIO *ret;
     BUF_MEM *b;
@@ -133,17 +133,17 @@ static int mem_init(BIO *bi, unsigned long flags)
     return 1;
 }
 
-static int mem_new(BIO *bi)
+static int __cdecl mem_new(BIO *bi)
 {
     return mem_init(bi, 0L);
 }
 
-static int secmem_new(BIO *bi)
+static int __cdecl secmem_new(BIO *bi)
 {
     return mem_init(bi, BUF_MEM_FLAG_SECURE);
 }
 
-static int mem_free(BIO *a)
+static int __cdecl mem_free(BIO *a)
 {
     BIO_BUF_MEM *bb;
 
@@ -158,7 +158,7 @@ static int mem_free(BIO *a)
     return 1;
 }
 
-static int mem_buf_free(BIO *a)
+static int __cdecl mem_buf_free(BIO *a)
 {
     if (a == NULL)
         return 0;
@@ -177,7 +177,7 @@ static int mem_buf_free(BIO *a)
 /*
  * Reallocate memory buffer if read pointer differs
  */
-static int mem_buf_sync(BIO *b)
+static int __cdecl mem_buf_sync(BIO *b)
 {
     if (b != NULL && b->init != 0 && b->ptr != NULL) {
         BIO_BUF_MEM *bbm = (BIO_BUF_MEM *)b->ptr;
@@ -191,7 +191,7 @@ static int mem_buf_sync(BIO *b)
     return 0;
 }
 
-static int mem_read(BIO *b, char *out, int outl)
+static int __cdecl mem_read(BIO *b, char *out, int outl)
 {
     int ret = -1;
     BIO_BUF_MEM *bbm = (BIO_BUF_MEM *)b->ptr;
@@ -214,7 +214,7 @@ static int mem_read(BIO *b, char *out, int outl)
     return ret;
 }
 
-static int mem_write(BIO *b, const char *in, int inl)
+static int __cdecl mem_write(BIO *b, const char *in, int inl)
 {
     int ret = -1;
     int blen;
@@ -242,7 +242,7 @@ static int mem_write(BIO *b, const char *in, int inl)
     return ret;
 }
 
-static long mem_ctrl(BIO *b, int cmd, long num, void *ptr)
+static long __cdecl mem_ctrl(BIO *b, int cmd, long num, void *ptr)
 {
     long ret = 1;
     char **pptr;
@@ -323,7 +323,7 @@ static long mem_ctrl(BIO *b, int cmd, long num, void *ptr)
     return ret;
 }
 
-static int mem_gets(BIO *bp, char *buf, int size)
+static int __cdecl mem_gets(BIO *bp, char *buf, int size)
 {
     int i, j;
     int ret = -1;
@@ -361,7 +361,7 @@ static int mem_gets(BIO *bp, char *buf, int size)
     return ret;
 }
 
-static int mem_puts(BIO *bp, const char *str)
+static int __cdecl mem_puts(BIO *bp, const char *str)
 {
     int n, ret;
 
diff --git a/crypto/bio/bss_null.c b/crypto/bio/bss_null.c
index 08f1d2bc98..12274d906c 100644
--- a/crypto/bio/bss_null.c
+++ b/crypto/bio/bss_null.c
@@ -12,11 +12,11 @@
 #include "bio_lcl.h"
 #include "internal/cryptlib.h"
 
-static int null_write(BIO *h, const char *buf, int num);
-static int null_read(BIO *h, char *buf, int size);
-static int null_puts(BIO *h, const char *str);
-static int null_gets(BIO *h, char *str, int size);
-static long null_ctrl(BIO *h, int cmd, long arg1, void *arg2);
+static int __cdecl null_write(BIO *h, const char *buf, int num);
+static int __cdecl null_read(BIO *h, char *buf, int size);
+static int __cdecl null_puts(BIO *h, const char *str);
+static int __cdecl null_gets(BIO *h, char *str, int size);
+static long __cdecl null_ctrl(BIO *h, int cmd, long arg1, void *arg2);
 static const BIO_METHOD null_method = {
     BIO_TYPE_NULL,
     "NULL",
@@ -34,22 +34,22 @@ static const BIO_METHOD null_method = {
     NULL,                     /* null_callback_ctrl */
 };
 
-const BIO_METHOD *BIO_s_null(void)
+const BIO_METHOD * __cdecl BIO_s_null(void)
 {
     return &null_method;
 }
 
-static int null_read(BIO *b, char *out, int outl)
+static int __cdecl null_read(BIO *b, char *out, int outl)
 {
     return 0;
 }
 
-static int null_write(BIO *b, const char *in, int inl)
+static int __cdecl null_write(BIO *b, const char *in, int inl)
 {
     return inl;
 }
 
-static long null_ctrl(BIO *b, int cmd, long num, void *ptr)
+static long __cdecl null_ctrl(BIO *b, int cmd, long num, void *ptr)
 {
     long ret = 1;
 
@@ -74,12 +74,12 @@ static long null_ctrl(BIO *b, int cmd, long num, void *ptr)
     return ret;
 }
 
-static int null_gets(BIO *bp, char *buf, int size)
+static int __cdecl null_gets(BIO *bp, char *buf, int size)
 {
     return 0;
 }
 
-static int null_puts(BIO *bp, const char *str)
+static int __cdecl null_puts(BIO *bp, const char *str)
 {
     if (str == NULL)
         return 0;
diff --git a/crypto/bio/bss_sock.c b/crypto/bio/bss_sock.c
index ad38453201..ba8cdf8c38 100644
--- a/crypto/bio/bss_sock.c
+++ b/crypto/bio/bss_sock.c
@@ -26,13 +26,13 @@
 #  define sock_puts  SockPuts
 # endif
 
-static int sock_write(BIO *h, const char *buf, int num);
-static int sock_read(BIO *h, char *buf, int size);
-static int sock_puts(BIO *h, const char *str);
-static long sock_ctrl(BIO *h, int cmd, long arg1, void *arg2);
-static int sock_new(BIO *h);
-static int sock_free(BIO *data);
-int BIO_sock_should_retry(int s);
+static int __cdecl sock_write(BIO *h, const char *buf, int num);
+static int __cdecl sock_read(BIO *h, char *buf, int size);
+static int __cdecl sock_puts(BIO *h, const char *str);
+static long __cdecl sock_ctrl(BIO *h, int cmd, long arg1, void *arg2);
+static int __cdecl sock_new(BIO *h);
+static int __cdecl sock_free(BIO *data);
+int __cdecl BIO_sock_should_retry(int s);
 
 static const BIO_METHOD methods_sockp = {
     BIO_TYPE_SOCKET,
@@ -51,12 +51,12 @@ static const BIO_METHOD methods_sockp = {
     NULL,                       /* sock_callback_ctrl */
 };
 
-const BIO_METHOD *BIO_s_socket(void)
+const BIO_METHOD * __cdecl BIO_s_socket(void)
 {
     return &methods_sockp;
 }
 
-BIO *BIO_new_socket(int fd, int close_flag)
+BIO * __cdecl BIO_new_socket(int fd, int close_flag)
 {
     BIO *ret;
 
@@ -67,7 +67,7 @@ BIO *BIO_new_socket(int fd, int close_flag)
     return ret;
 }
 
-static int sock_new(BIO *bi)
+static int __cdecl sock_new(BIO *bi)
 {
     bi->init = 0;
     bi->num = 0;
@@ -76,7 +76,7 @@ static int sock_new(BIO *bi)
     return 1;
 }
 
-static int sock_free(BIO *a)
+static int __cdecl sock_free(BIO *a)
 {
     if (a == NULL)
         return 0;
@@ -90,7 +90,7 @@ static int sock_free(BIO *a)
     return 1;
 }
 
-static int sock_read(BIO *b, char *out, int outl)
+static int __cdecl sock_read(BIO *b, char *out, int outl)
 {
     int ret = 0;
 
@@ -106,7 +106,7 @@ static int sock_read(BIO *b, char *out, int outl)
     return ret;
 }
 
-static int sock_write(BIO *b, const char *in, int inl)
+static int __cdecl sock_write(BIO *b, const char *in, int inl)
 {
     int ret;
 
@@ -120,7 +120,7 @@ static int sock_write(BIO *b, const char *in, int inl)
     return ret;
 }
 
-static long sock_ctrl(BIO *b, int cmd, long num, void *ptr)
+static long __cdecl sock_ctrl(BIO *b, int cmd, long num, void *ptr)
 {
     long ret = 1;
     int *ip;
@@ -158,7 +158,7 @@ static long sock_ctrl(BIO *b, int cmd, long num, void *ptr)
     return ret;
 }
 
-static int sock_puts(BIO *bp, const char *str)
+static int __cdecl sock_puts(BIO *bp, const char *str)
 {
     int n, ret;
 
@@ -167,7 +167,7 @@ static int sock_puts(BIO *bp, const char *str)
     return ret;
 }
 
-int BIO_sock_should_retry(int i)
+int __cdecl BIO_sock_should_retry(int i)
 {
     int err;
 
@@ -179,7 +179,7 @@ int BIO_sock_should_retry(int i)
     return 0;
 }
 
-int BIO_sock_non_fatal_error(int err)
+int __cdecl BIO_sock_non_fatal_error(int err)
 {
     switch (err) {
 # if defined(OPENSSL_SYS_WINDOWS)
diff --git a/crypto/blake2/m_blake2b.c b/crypto/blake2/m_blake2b.c
index c493648c3c..c0de4b739a 100644
--- a/crypto/blake2/m_blake2b.c
+++ b/crypto/blake2/m_blake2b.c
@@ -23,17 +23,17 @@
 # include "blake2_locl.h"
 # include "internal/evp_int.h"
 
-static int init(EVP_MD_CTX *ctx)
+static int __cdecl init(EVP_MD_CTX *ctx)
 {
     return BLAKE2b_Init(EVP_MD_CTX_md_data(ctx));
 }
 
-static int update(EVP_MD_CTX *ctx, const void *data, size_t count)
+static int __cdecl update(EVP_MD_CTX *ctx, const void *data, size_t count)
 {
     return BLAKE2b_Update(EVP_MD_CTX_md_data(ctx), data, count);
 }
 
-static int final(EVP_MD_CTX *ctx, unsigned char *md)
+static int __cdecl final(EVP_MD_CTX *ctx, unsigned char *md)
 {
     return BLAKE2b_Final(md, EVP_MD_CTX_md_data(ctx));
 }
@@ -52,7 +52,7 @@ static const EVP_MD blake2b_md = {
     sizeof(EVP_MD *) + sizeof(BLAKE2B_CTX),
 };
 
-const EVP_MD *EVP_blake2b512(void)
+const EVP_MD * __cdecl EVP_blake2b512(void)
 {
     return &blake2b_md;
 }
diff --git a/crypto/blake2/m_blake2s.c b/crypto/blake2/m_blake2s.c
index 83b2811e44..eadfe947e0 100644
--- a/crypto/blake2/m_blake2s.c
+++ b/crypto/blake2/m_blake2s.c
@@ -23,17 +23,17 @@
 # include "blake2_locl.h"
 # include "internal/evp_int.h"
 
-static int init(EVP_MD_CTX *ctx)
+static int __cdecl init(EVP_MD_CTX *ctx)
 {
     return BLAKE2s_Init(EVP_MD_CTX_md_data(ctx));
 }
 
-static int update(EVP_MD_CTX *ctx, const void *data, size_t count)
+static int __cdecl update(EVP_MD_CTX *ctx, const void *data, size_t count)
 {
     return BLAKE2s_Update(EVP_MD_CTX_md_data(ctx), data, count);
 }
 
-static int final(EVP_MD_CTX *ctx, unsigned char *md)
+static int __cdecl final(EVP_MD_CTX *ctx, unsigned char *md)
 {
     return BLAKE2s_Final(md, EVP_MD_CTX_md_data(ctx));
 }
@@ -52,7 +52,7 @@ static const EVP_MD blake2s_md = {
     sizeof(EVP_MD *) + sizeof(BLAKE2S_CTX),
 };
 
-const EVP_MD *EVP_blake2s256(void)
+const EVP_MD * __cdecl EVP_blake2s256(void)
 {
     return &blake2s_md;
 }
diff --git a/crypto/bn/bn_add.c b/crypto/bn/bn_add.c
index f2736b8f6d..ed3d53ddd6 100644
--- a/crypto/bn/bn_add.c
+++ b/crypto/bn/bn_add.c
@@ -11,7 +11,7 @@
 #include "bn_lcl.h"
 
 /* signed add of b to a. */
-int BN_add(BIGNUM *r, const BIGNUM *a, const BIGNUM *b)
+int __cdecl BN_add(BIGNUM *r, const BIGNUM *a, const BIGNUM *b)
 {
     int ret, r_neg, cmp_res;
 
@@ -42,7 +42,7 @@ int BN_add(BIGNUM *r, const BIGNUM *a, const BIGNUM *b)
 }
 
 /* signed sub of b from a. */
-int BN_sub(BIGNUM *r, const BIGNUM *a, const BIGNUM *b)
+int __cdecl BN_sub(BIGNUM *r, const BIGNUM *a, const BIGNUM *b)
 {
     int ret, r_neg, cmp_res;
 
@@ -73,7 +73,7 @@ int BN_sub(BIGNUM *r, const BIGNUM *a, const BIGNUM *b)
 }
 
 /* unsigned add of b to a, r can be equal to a or b. */
-int BN_uadd(BIGNUM *r, const BIGNUM *a, const BIGNUM *b)
+int __cdecl BN_uadd(BIGNUM *r, const BIGNUM *a, const BIGNUM *b)
 {
     int max, min, dif;
     const BN_ULONG *ap, *bp;
@@ -122,7 +122,7 @@ int BN_uadd(BIGNUM *r, const BIGNUM *a, const BIGNUM *b)
 }
 
 /* unsigned subtraction of b from a, a must be larger than b. */
-int BN_usub(BIGNUM *r, const BIGNUM *a, const BIGNUM *b)
+int __cdecl BN_usub(BIGNUM *r, const BIGNUM *a, const BIGNUM *b)
 {
     int max, min, dif;
     BN_ULONG t1, t2, borrow, *rp;
diff --git a/crypto/bn/bn_blind.c b/crypto/bn/bn_blind.c
index 450cdfb348..78def6d9ef 100644
--- a/crypto/bn/bn_blind.c
+++ b/crypto/bn/bn_blind.c
@@ -22,12 +22,12 @@ struct bn_blinding_st {
     int counter;
     unsigned long flags;
     BN_MONT_CTX *m_ctx;
-    int (*bn_mod_exp) (BIGNUM *r, const BIGNUM *a, const BIGNUM *p,
+    int (__cdecl *bn_mod_exp) (BIGNUM *r, const BIGNUM *a, const BIGNUM *p,
                        const BIGNUM *m, BN_CTX *ctx, BN_MONT_CTX *m_ctx);
     CRYPTO_RWLOCK *lock;
 };
 
-BN_BLINDING *BN_BLINDING_new(const BIGNUM *A, const BIGNUM *Ai, BIGNUM *mod)
+BN_BLINDING * __cdecl BN_BLINDING_new(const BIGNUM *A, const BIGNUM *Ai, BIGNUM *mod)
 {
     BN_BLINDING *ret = NULL;
 
@@ -78,7 +78,7 @@ BN_BLINDING *BN_BLINDING_new(const BIGNUM *A, const BIGNUM *Ai, BIGNUM *mod)
     return NULL;
 }
 
-void BN_BLINDING_free(BN_BLINDING *r)
+void __cdecl BN_BLINDING_free(BN_BLINDING *r)
 {
     if (r == NULL)
         return;
@@ -90,7 +90,7 @@ void BN_BLINDING_free(BN_BLINDING *r)
     OPENSSL_free(r);
 }
 
-int BN_BLINDING_update(BN_BLINDING *b, BN_CTX *ctx)
+int __cdecl BN_BLINDING_update(BN_BLINDING *b, BN_CTX *ctx)
 {
     int ret = 0;
 
@@ -126,12 +126,12 @@ int BN_BLINDING_update(BN_BLINDING *b, BN_CTX *ctx)
     return ret;
 }
 
-int BN_BLINDING_convert(BIGNUM *n, BN_BLINDING *b, BN_CTX *ctx)
+int __cdecl BN_BLINDING_convert(BIGNUM *n, BN_BLINDING *b, BN_CTX *ctx)
 {
     return BN_BLINDING_convert_ex(n, NULL, b, ctx);
 }
 
-int BN_BLINDING_convert_ex(BIGNUM *n, BIGNUM *r, BN_BLINDING *b, BN_CTX *ctx)
+int __cdecl BN_BLINDING_convert_ex(BIGNUM *n, BIGNUM *r, BN_BLINDING *b, BN_CTX *ctx)
 {
     int ret = 1;
 
@@ -159,12 +159,12 @@ int BN_BLINDING_convert_ex(BIGNUM *n, BIGNUM *r, BN_BLINDING *b, BN_CTX *ctx)
     return ret;
 }
 
-int BN_BLINDING_invert(BIGNUM *n, BN_BLINDING *b, BN_CTX *ctx)
+int __cdecl BN_BLINDING_invert(BIGNUM *n, BN_BLINDING *b, BN_CTX *ctx)
 {
     return BN_BLINDING_invert_ex(n, NULL, b, ctx);
 }
 
-int BN_BLINDING_invert_ex(BIGNUM *n, const BIGNUM *r, BN_BLINDING *b,
+int __cdecl BN_BLINDING_invert_ex(BIGNUM *n, const BIGNUM *r, BN_BLINDING *b,
                           BN_CTX *ctx)
 {
     int ret;
@@ -200,39 +200,39 @@ int BN_BLINDING_invert_ex(BIGNUM *n, const BIGNUM *r, BN_BLINDING *b,
     return ret;
 }
 
-int BN_BLINDING_is_current_thread(BN_BLINDING *b)
+int __cdecl BN_BLINDING_is_current_thread(BN_BLINDING *b)
 {
     return CRYPTO_THREAD_compare_id(CRYPTO_THREAD_get_current_id(), b->tid);
 }
 
-void BN_BLINDING_set_current_thread(BN_BLINDING *b)
+void __cdecl BN_BLINDING_set_current_thread(BN_BLINDING *b)
 {
     b->tid = CRYPTO_THREAD_get_current_id();
 }
 
-int BN_BLINDING_lock(BN_BLINDING *b)
+int __cdecl BN_BLINDING_lock(BN_BLINDING *b)
 {
     return CRYPTO_THREAD_write_lock(b->lock);
 }
 
-int BN_BLINDING_unlock(BN_BLINDING *b)
+int __cdecl BN_BLINDING_unlock(BN_BLINDING *b)
 {
     return CRYPTO_THREAD_unlock(b->lock);
 }
 
-unsigned long BN_BLINDING_get_flags(const BN_BLINDING *b)
+unsigned long __cdecl BN_BLINDING_get_flags(const BN_BLINDING *b)
 {
     return b->flags;
 }
 
-void BN_BLINDING_set_flags(BN_BLINDING *b, unsigned long flags)
+void __cdecl BN_BLINDING_set_flags(BN_BLINDING *b, unsigned long flags)
 {
     b->flags = flags;
 }
 
-BN_BLINDING *BN_BLINDING_create_param(BN_BLINDING *b,
+BN_BLINDING * __cdecl BN_BLINDING_create_param(BN_BLINDING *b,
                                       const BIGNUM *e, BIGNUM *m, BN_CTX *ctx,
-                                      int (*bn_mod_exp) (BIGNUM *r,
+                                      int (__cdecl *bn_mod_exp) (BIGNUM *r,
                                                          const BIGNUM *a,
                                                          const BIGNUM *p,
                                                          const BIGNUM *m,
diff --git a/crypto/bn/bn_const.c b/crypto/bn/bn_const.c
index 39dd61202a..584f77f91d 100644
--- a/crypto/bn/bn_const.c
+++ b/crypto/bn/bn_const.c
@@ -18,7 +18,7 @@
  * RFC2412 specifies a generator of of 22.
  */
 
-BIGNUM *BN_get_rfc2409_prime_768(BIGNUM *bn)
+BIGNUM * __cdecl BN_get_rfc2409_prime_768(BIGNUM *bn)
 {
     static const unsigned char RFC2409_PRIME_768[] = {
         0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
@@ -46,7 +46,7 @@ BIGNUM *BN_get_rfc2409_prime_768(BIGNUM *bn)
  * RFC2412 specifies a generator of 22.
  */
 
-BIGNUM *BN_get_rfc2409_prime_1024(BIGNUM *bn)
+BIGNUM * __cdecl BN_get_rfc2409_prime_1024(BIGNUM *bn)
 {
     static const unsigned char RFC2409_PRIME_1024[] = {
         0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
@@ -78,7 +78,7 @@ BIGNUM *BN_get_rfc2409_prime_1024(BIGNUM *bn)
  * RFC2312 specifies a generator of 22.
  */
 
-BIGNUM *BN_get_rfc3526_prime_1536(BIGNUM *bn)
+BIGNUM * __cdecl BN_get_rfc3526_prime_1536(BIGNUM *bn)
 {
     static const unsigned char RFC3526_PRIME_1536[] = {
         0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
@@ -117,7 +117,7 @@ BIGNUM *BN_get_rfc3526_prime_1536(BIGNUM *bn)
  * RFC3526 specifies a generator of 2.
  */
 
-BIGNUM *BN_get_rfc3526_prime_2048(BIGNUM *bn)
+BIGNUM * __cdecl BN_get_rfc3526_prime_2048(BIGNUM *bn)
 {
     static const unsigned char RFC3526_PRIME_2048[] = {
         0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
@@ -164,7 +164,7 @@ BIGNUM *BN_get_rfc3526_prime_2048(BIGNUM *bn)
  * RFC3526 specifies a generator of 2.
  */
 
-BIGNUM *BN_get_rfc3526_prime_3072(BIGNUM *bn)
+BIGNUM * __cdecl BN_get_rfc3526_prime_3072(BIGNUM *bn)
 {
     static const unsigned char RFC3526_PRIME_3072[] = {
         0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
@@ -227,7 +227,7 @@ BIGNUM *BN_get_rfc3526_prime_3072(BIGNUM *bn)
  * RFC3526 specifies a generator of 2.
  */
 
-BIGNUM *BN_get_rfc3526_prime_4096(BIGNUM *bn)
+BIGNUM * __cdecl BN_get_rfc3526_prime_4096(BIGNUM *bn)
 {
     static const unsigned char RFC3526_PRIME_4096[] = {
         0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
@@ -306,7 +306,7 @@ BIGNUM *BN_get_rfc3526_prime_4096(BIGNUM *bn)
  * RFC3526 specifies a generator of 2.
  */
 
-BIGNUM *BN_get_rfc3526_prime_6144(BIGNUM *bn)
+BIGNUM * __cdecl BN_get_rfc3526_prime_6144(BIGNUM *bn)
 {
     static const unsigned char RFC3526_PRIME_6144[] = {
         0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
@@ -417,7 +417,7 @@ BIGNUM *BN_get_rfc3526_prime_6144(BIGNUM *bn)
  * RFC3526 specifies a generator of 2.
  */
 
-BIGNUM *BN_get_rfc3526_prime_8192(BIGNUM *bn)
+BIGNUM * __cdecl BN_get_rfc3526_prime_8192(BIGNUM *bn)
 {
     static const unsigned char RFC3526_PRIME_8192[] = {
         0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
diff --git a/crypto/bn/bn_ctx.c b/crypto/bn/bn_ctx.c
index 90cecea2aa..30c25af63e 100644
--- a/crypto/bn/bn_ctx.c
+++ b/crypto/bn/bn_ctx.c
@@ -131,7 +131,7 @@ static void ctxdbg(BN_CTX *ctx)
 #endif
 
 
-BN_CTX *BN_CTX_new(void)
+BN_CTX * __cdecl BN_CTX_new(void)
 {
     BN_CTX *ret;
 
@@ -145,7 +145,7 @@ BN_CTX *BN_CTX_new(void)
     return ret;
 }
 
-BN_CTX *BN_CTX_secure_new(void)
+BN_CTX * __cdecl BN_CTX_secure_new(void)
 {
     BN_CTX *ret = BN_CTX_new();
 
@@ -154,7 +154,7 @@ BN_CTX *BN_CTX_secure_new(void)
     return ret;
 }
 
-void BN_CTX_free(BN_CTX *ctx)
+void __cdecl BN_CTX_free(BN_CTX *ctx)
 {
     if (ctx == NULL)
         return;
@@ -178,7 +178,7 @@ void BN_CTX_free(BN_CTX *ctx)
     OPENSSL_free(ctx);
 }
 
-void BN_CTX_start(BN_CTX *ctx)
+void __cdecl BN_CTX_start(BN_CTX *ctx)
 {
     CTXDBG_ENTRY("BN_CTX_start", ctx);
     /* If we're already overflowing ... */
@@ -192,7 +192,7 @@ void BN_CTX_start(BN_CTX *ctx)
     CTXDBG_EXIT(ctx);
 }
 
-void BN_CTX_end(BN_CTX *ctx)
+void __cdecl BN_CTX_end(BN_CTX *ctx)
 {
     if (ctx == NULL)
         return;
@@ -211,7 +211,7 @@ void BN_CTX_end(BN_CTX *ctx)
     CTXDBG_EXIT(ctx);
 }
 
-BIGNUM *BN_CTX_get(BN_CTX *ctx)
+BIGNUM * __cdecl BN_CTX_get(BN_CTX *ctx)
 {
     BIGNUM *ret;
 
diff --git a/crypto/bn/bn_depr.c b/crypto/bn/bn_depr.c
index 58bcf197a4..607db588eb 100644
--- a/crypto/bn/bn_depr.c
+++ b/crypto/bn/bn_depr.c
@@ -24,7 +24,7 @@ NON_EMPTY_TRANSLATION_UNIT
 
 BIGNUM *BN_generate_prime(BIGNUM *ret, int bits, int safe,
                           const BIGNUM *add, const BIGNUM *rem,
-                          void (*callback) (int, int, void *), void *cb_arg)
+                          void (__cdecl *callback) (int, int, void *), void *cb_arg)
 {
     BN_GENCB cb;
     BIGNUM *rnd = NULL;
@@ -47,7 +47,7 @@ BIGNUM *BN_generate_prime(BIGNUM *ret, int bits, int safe,
 }
 
 int BN_is_prime(const BIGNUM *a, int checks,
-                void (*callback) (int, int, void *), BN_CTX *ctx_passed,
+                void (__cdecl *callback) (int, int, void *), BN_CTX *ctx_passed,
                 void *cb_arg)
 {
     BN_GENCB cb;
@@ -56,7 +56,7 @@ int BN_is_prime(const BIGNUM *a, int checks,
 }
 
 int BN_is_prime_fasttest(const BIGNUM *a, int checks,
-                         void (*callback) (int, int, void *),
+                         void (__cdecl *callback) (int, int, void *),
                          BN_CTX *ctx_passed, void *cb_arg,
                          int do_trial_division)
 {
diff --git a/crypto/bn/bn_div.c b/crypto/bn/bn_div.c
index 7fc0132830..2b50a5b322 100644
--- a/crypto/bn/bn_div.c
+++ b/crypto/bn/bn_div.c
@@ -14,7 +14,7 @@
 
 /* The old slow way */
 #if 0
-int BN_div(BIGNUM *dv, BIGNUM *rem, const BIGNUM *m, const BIGNUM *d,
+int __cdecl BN_div(BIGNUM *dv, BIGNUM *rem, const BIGNUM *m, const BIGNUM *d,
            BN_CTX *ctx)
 {
     int i, nm, nd;
@@ -206,7 +206,7 @@ static int bn_left_align(BIGNUM *num)
  *     rm->neg == num->neg                 (unless the remainder is zero)
  * If 'dv' or 'rm' is NULL, the respective value is not returned.
  */
-int BN_div(BIGNUM *dv, BIGNUM *rm, const BIGNUM *num, const BIGNUM *divisor,
+int __cdecl BN_div(BIGNUM *dv, BIGNUM *rm, const BIGNUM *num, const BIGNUM *divisor,
            BN_CTX *ctx)
 {
     int ret;
diff --git a/crypto/bn/bn_err.c b/crypto/bn/bn_err.c
index dd87c152cf..fb6c82a3a4 100644
--- a/crypto/bn/bn_err.c
+++ b/crypto/bn/bn_err.c
@@ -106,7 +106,7 @@ static const ERR_STRING_DATA BN_str_reasons[] = {
 
 #endif
 
-int ERR_load_BN_strings(void)
+int __cdecl ERR_load_BN_strings(void)
 {
 #ifndef OPENSSL_NO_ERR
     if (ERR_func_error_string(BN_str_functs[0].error) == NULL) {
diff --git a/crypto/bn/bn_exp.c b/crypto/bn/bn_exp.c
index 88f2baf0e5..5eb8d7986b 100644
--- a/crypto/bn/bn_exp.c
+++ b/crypto/bn/bn_exp.c
@@ -38,7 +38,7 @@ extern unsigned int OPENSSL_sparcv9cap_P[];
 #define TABLE_SIZE      32
 
 /* this one works - simple but works */
-int BN_exp(BIGNUM *r, const BIGNUM *a, const BIGNUM *p, BN_CTX *ctx)
+int __cdecl BN_exp(BIGNUM *r, const BIGNUM *a, const BIGNUM *p, BN_CTX *ctx)
 {
     int i, bits, ret = 0;
     BIGNUM *v, *rr;
@@ -86,7 +86,7 @@ int BN_exp(BIGNUM *r, const BIGNUM *a, const BIGNUM *p, BN_CTX *ctx)
     return ret;
 }
 
-int BN_mod_exp(BIGNUM *r, const BIGNUM *a, const BIGNUM *p, const BIGNUM *m,
+int __cdecl BN_mod_exp(BIGNUM *r, const BIGNUM *a, const BIGNUM *p, const BIGNUM *m,
                BN_CTX *ctx)
 {
     int ret;
@@ -158,7 +158,7 @@ int BN_mod_exp(BIGNUM *r, const BIGNUM *a, const BIGNUM *p, const BIGNUM *m,
     return ret;
 }
 
-int BN_mod_exp_recp(BIGNUM *r, const BIGNUM *a, const BIGNUM *p,
+int __cdecl BN_mod_exp_recp(BIGNUM *r, const BIGNUM *a, const BIGNUM *p,
                     const BIGNUM *m, BN_CTX *ctx)
 {
     int i, j, bits, ret = 0, wstart, wend, window, wvalue;
@@ -293,7 +293,7 @@ int BN_mod_exp_recp(BIGNUM *r, const BIGNUM *a, const BIGNUM *p,
     return ret;
 }
 
-int BN_mod_exp_mont(BIGNUM *rr, const BIGNUM *a, const BIGNUM *p,
+int __cdecl BN_mod_exp_mont(BIGNUM *rr, const BIGNUM *a, const BIGNUM *p,
                     const BIGNUM *m, BN_CTX *ctx, BN_MONT_CTX *in_mont)
 {
     int i, j, bits, ret = 0, wstart, wend, window, wvalue;
@@ -589,7 +589,7 @@ static int MOD_EXP_CTIME_COPY_FROM_PREBUF(BIGNUM *b, int top,
  * out by Colin Percival,
  * http://www.daemonology.net/hyperthreading-considered-harmful/)
  */
-int BN_mod_exp_mont_consttime(BIGNUM *rr, const BIGNUM *a, const BIGNUM *p,
+int __cdecl BN_mod_exp_mont_consttime(BIGNUM *rr, const BIGNUM *a, const BIGNUM *p,
                               const BIGNUM *m, BN_CTX *ctx,
                               BN_MONT_CTX *in_mont)
 {
@@ -1126,7 +1126,7 @@ int BN_mod_exp_mont_consttime(BIGNUM *rr, const BIGNUM *a, const BIGNUM *p,
     return ret;
 }
 
-int BN_mod_exp_mont_word(BIGNUM *rr, BN_ULONG a, const BIGNUM *p,
+int __cdecl BN_mod_exp_mont_word(BIGNUM *rr, BN_ULONG a, const BIGNUM *p,
                          const BIGNUM *m, BN_CTX *ctx, BN_MONT_CTX *in_mont)
 {
     BN_MONT_CTX *mont = NULL;
@@ -1274,7 +1274,7 @@ int BN_mod_exp_mont_word(BIGNUM *rr, BN_ULONG a, const BIGNUM *p,
 }
 
 /* The old fallback, simple version :-) */
-int BN_mod_exp_simple(BIGNUM *r, const BIGNUM *a, const BIGNUM *p,
+int __cdecl BN_mod_exp_simple(BIGNUM *r, const BIGNUM *a, const BIGNUM *p,
                       const BIGNUM *m, BN_CTX *ctx)
 {
     int i, j, bits, ret = 0, wstart, wend, window, wvalue;
diff --git a/crypto/bn/bn_exp2.c b/crypto/bn/bn_exp2.c
index 082c9286a0..6f0b1766e3 100644
--- a/crypto/bn/bn_exp2.c
+++ b/crypto/bn/bn_exp2.c
@@ -13,7 +13,7 @@
 
 #define TABLE_SIZE      32
 
-int BN_mod_exp2_mont(BIGNUM *rr, const BIGNUM *a1, const BIGNUM *p1,
+int __cdecl BN_mod_exp2_mont(BIGNUM *rr, const BIGNUM *a1, const BIGNUM *p1,
                      const BIGNUM *a2, const BIGNUM *p2, const BIGNUM *m,
                      BN_CTX *ctx, BN_MONT_CTX *in_mont)
 {
diff --git a/crypto/bn/bn_gcd.c b/crypto/bn/bn_gcd.c
index 0091ea4e08..e1a17257cf 100644
--- a/crypto/bn/bn_gcd.c
+++ b/crypto/bn/bn_gcd.c
@@ -12,7 +12,7 @@
 
 static BIGNUM *euclid(BIGNUM *a, BIGNUM *b);
 
-int BN_gcd(BIGNUM *r, const BIGNUM *in_a, const BIGNUM *in_b, BN_CTX *ctx)
+int __cdecl BN_gcd(BIGNUM *r, const BIGNUM *in_a, const BIGNUM *in_b, BN_CTX *ctx)
 {
     BIGNUM *a, *b, *t;
     int ret = 0;
@@ -121,7 +121,7 @@ static BIGNUM *BN_mod_inverse_no_branch(BIGNUM *in,
                                         const BIGNUM *a, const BIGNUM *n,
                                         BN_CTX *ctx);
 
-BIGNUM *BN_mod_inverse(BIGNUM *in,
+BIGNUM * __cdecl BN_mod_inverse(BIGNUM *in,
                        const BIGNUM *a, const BIGNUM *n, BN_CTX *ctx)
 {
     BIGNUM *rv;
diff --git a/crypto/bn/bn_gf2m.c b/crypto/bn/bn_gf2m.c
index 34d8b69c1e..e91d7f61f2 100644
--- a/crypto/bn/bn_gf2m.c
+++ b/crypto/bn/bn_gf2m.c
@@ -249,7 +249,7 @@ void bn_GF2m_mul_2x2(BN_ULONG *r, BN_ULONG a1, BN_ULONG a0, BN_ULONG b1,
  * Add polynomials a and b and store result in r; r could be a or b, a and b
  * could be equal; r is the bitwise XOR of a and b.
  */
-int BN_GF2m_add(BIGNUM *r, const BIGNUM *a, const BIGNUM *b)
+int __cdecl BN_GF2m_add(BIGNUM *r, const BIGNUM *a, const BIGNUM *b)
 {
     int i;
     const BIGNUM *at, *bt;
@@ -289,7 +289,7 @@ int BN_GF2m_add(BIGNUM *r, const BIGNUM *a, const BIGNUM *b)
  */
 
 /* Performs modular reduction of a and store result in r.  r could be a. */
-int BN_GF2m_mod_arr(BIGNUM *r, const BIGNUM *a, const int p[])
+int __cdecl BN_GF2m_mod_arr(BIGNUM *r, const BIGNUM *a, const int p[])
 {
     int j, k;
     int n, dN, d0, d1;
@@ -387,7 +387,7 @@ int BN_GF2m_mod_arr(BIGNUM *r, const BIGNUM *a, const int p[])
  * function is only provided for convenience; for best performance, use the
  * BN_GF2m_mod_arr function.
  */
-int BN_GF2m_mod(BIGNUM *r, const BIGNUM *a, const BIGNUM *p)
+int __cdecl BN_GF2m_mod(BIGNUM *r, const BIGNUM *a, const BIGNUM *p)
 {
     int ret = 0;
     int arr[6];
@@ -407,7 +407,7 @@ int BN_GF2m_mod(BIGNUM *r, const BIGNUM *a, const BIGNUM *p)
  * Compute the product of two polynomials a and b, reduce modulo p, and store
  * the result in r.  r could be a or b; a could be b.
  */
-int BN_GF2m_mod_mul_arr(BIGNUM *r, const BIGNUM *a, const BIGNUM *b,
+int __cdecl BN_GF2m_mod_mul_arr(BIGNUM *r, const BIGNUM *a, const BIGNUM *b,
                         const int p[], BN_CTX *ctx)
 {
     int zlen, i, j, k, ret = 0;
@@ -462,7 +462,7 @@ int BN_GF2m_mod_mul_arr(BIGNUM *r, const BIGNUM *a, const BIGNUM *b,
  * only provided for convenience; for best performance, use the
  * BN_GF2m_mod_mul_arr function.
  */
-int BN_GF2m_mod_mul(BIGNUM *r, const BIGNUM *a, const BIGNUM *b,
+int __cdecl BN_GF2m_mod_mul(BIGNUM *r, const BIGNUM *a, const BIGNUM *b,
                     const BIGNUM *p, BN_CTX *ctx)
 {
     int ret = 0;
@@ -486,7 +486,7 @@ int BN_GF2m_mod_mul(BIGNUM *r, const BIGNUM *a, const BIGNUM *b,
 }
 
 /* Square a, reduce the result mod p, and store it in a.  r could be a. */
-int BN_GF2m_mod_sqr_arr(BIGNUM *r, const BIGNUM *a, const int p[],
+int __cdecl BN_GF2m_mod_sqr_arr(BIGNUM *r, const BIGNUM *a, const int p[],
                         BN_CTX *ctx)
 {
     int i, ret = 0;
@@ -521,7 +521,7 @@ int BN_GF2m_mod_sqr_arr(BIGNUM *r, const BIGNUM *a, const int p[],
  * wrapper function is only provided for convenience; for best performance,
  * use the BN_GF2m_mod_sqr_arr function.
  */
-int BN_GF2m_mod_sqr(BIGNUM *r, const BIGNUM *a, const BIGNUM *p, BN_CTX *ctx)
+int __cdecl BN_GF2m_mod_sqr(BIGNUM *r, const BIGNUM *a, const BIGNUM *p, BN_CTX *ctx)
 {
     int ret = 0;
     const int max = BN_num_bits(p) + 1;
@@ -721,7 +721,7 @@ static int BN_GF2m_mod_inv_vartime(BIGNUM *r, const BIGNUM *a,
  * This is not constant time.
  * But it does eliminate first order deduction on the input.
  */
-int BN_GF2m_mod_inv(BIGNUM *r, const BIGNUM *a, const BIGNUM *p, BN_CTX *ctx)
+int __cdecl BN_GF2m_mod_inv(BIGNUM *r, const BIGNUM *a, const BIGNUM *p, BN_CTX *ctx)
 {
     BIGNUM *b = NULL;
     int ret = 0;
@@ -762,7 +762,7 @@ int BN_GF2m_mod_inv(BIGNUM *r, const BIGNUM *a, const BIGNUM *p, BN_CTX *ctx)
  * wrapper function is only provided for convenience; for best performance,
  * use the BN_GF2m_mod_inv function.
  */
-int BN_GF2m_mod_inv_arr(BIGNUM *r, const BIGNUM *xx, const int p[],
+int __cdecl BN_GF2m_mod_inv_arr(BIGNUM *r, const BIGNUM *xx, const int p[],
                         BN_CTX *ctx)
 {
     BIGNUM *field;
@@ -787,7 +787,7 @@ int BN_GF2m_mod_inv_arr(BIGNUM *r, const BIGNUM *xx, const int p[],
  * Divide y by x, reduce modulo p, and store the result in r. r could be x
  * or y, x could equal y.
  */
-int BN_GF2m_mod_div(BIGNUM *r, const BIGNUM *y, const BIGNUM *x,
+int __cdecl BN_GF2m_mod_div(BIGNUM *r, const BIGNUM *y, const BIGNUM *x,
                     const BIGNUM *p, BN_CTX *ctx)
 {
     BIGNUM *xinv = NULL;
@@ -820,7 +820,7 @@ int BN_GF2m_mod_div(BIGNUM *r, const BIGNUM *y, const BIGNUM *x,
  * BN_GF2m_mod_div implementation; this wrapper function is only provided for
  * convenience; for best performance, use the BN_GF2m_mod_div function.
  */
-int BN_GF2m_mod_div_arr(BIGNUM *r, const BIGNUM *yy, const BIGNUM *xx,
+int __cdecl BN_GF2m_mod_div_arr(BIGNUM *r, const BIGNUM *yy, const BIGNUM *xx,
                         const int p[], BN_CTX *ctx)
 {
     BIGNUM *field;
@@ -848,7 +848,7 @@ int BN_GF2m_mod_div_arr(BIGNUM *r, const BIGNUM *yy, const BIGNUM *xx,
  * could be a. Uses simple square-and-multiply algorithm A.5.1 from IEEE
  * P1363.
  */
-int BN_GF2m_mod_exp_arr(BIGNUM *r, const BIGNUM *a, const BIGNUM *b,
+int __cdecl BN_GF2m_mod_exp_arr(BIGNUM *r, const BIGNUM *a, const BIGNUM *b,
                         const int p[], BN_CTX *ctx)
 {
     int ret = 0, i, n;
@@ -894,7 +894,7 @@ int BN_GF2m_mod_exp_arr(BIGNUM *r, const BIGNUM *a, const BIGNUM *b,
  * implementation; this wrapper function is only provided for convenience;
  * for best performance, use the BN_GF2m_mod_exp_arr function.
  */
-int BN_GF2m_mod_exp(BIGNUM *r, const BIGNUM *a, const BIGNUM *b,
+int __cdecl BN_GF2m_mod_exp(BIGNUM *r, const BIGNUM *a, const BIGNUM *b,
                     const BIGNUM *p, BN_CTX *ctx)
 {
     int ret = 0;
@@ -921,7 +921,7 @@ int BN_GF2m_mod_exp(BIGNUM *r, const BIGNUM *a, const BIGNUM *b,
  * Compute the square root of a, reduce modulo p, and store the result in r.
  * r could be a. Uses exponentiation as in algorithm A.4.1 from IEEE P1363.
  */
-int BN_GF2m_mod_sqrt_arr(BIGNUM *r, const BIGNUM *a, const int p[],
+int __cdecl BN_GF2m_mod_sqrt_arr(BIGNUM *r, const BIGNUM *a, const int p[],
                          BN_CTX *ctx)
 {
     int ret = 0;
@@ -955,7 +955,7 @@ int BN_GF2m_mod_sqrt_arr(BIGNUM *r, const BIGNUM *a, const int p[],
  * implementation; this wrapper function is only provided for convenience;
  * for best performance, use the BN_GF2m_mod_sqrt_arr function.
  */
-int BN_GF2m_mod_sqrt(BIGNUM *r, const BIGNUM *a, const BIGNUM *p, BN_CTX *ctx)
+int __cdecl BN_GF2m_mod_sqrt(BIGNUM *r, const BIGNUM *a, const BIGNUM *p, BN_CTX *ctx)
 {
     int ret = 0;
     const int max = BN_num_bits(p) + 1;
@@ -980,7 +980,7 @@ int BN_GF2m_mod_sqrt(BIGNUM *r, const BIGNUM *a, const BIGNUM *p, BN_CTX *ctx)
  * Find r such that r^2 + r = a mod p.  r could be a. If no r exists returns
  * 0. Uses algorithms A.4.7 and A.4.6 from IEEE P1363.
  */
-int BN_GF2m_mod_solve_quad_arr(BIGNUM *r, const BIGNUM *a_, const int p[],
+int __cdecl BN_GF2m_mod_solve_quad_arr(BIGNUM *r, const BIGNUM *a_, const int p[],
                                BN_CTX *ctx)
 {
     int ret = 0, count = 0, j;
@@ -1084,7 +1084,7 @@ int BN_GF2m_mod_solve_quad_arr(BIGNUM *r, const BIGNUM *a_, const int p[],
  * implementation; this wrapper function is only provided for convenience;
  * for best performance, use the BN_GF2m_mod_solve_quad_arr function.
  */
-int BN_GF2m_mod_solve_quad(BIGNUM *r, const BIGNUM *a, const BIGNUM *p,
+int __cdecl BN_GF2m_mod_solve_quad(BIGNUM *r, const BIGNUM *a, const BIGNUM *p,
                            BN_CTX *ctx)
 {
     int ret = 0;
@@ -1113,7 +1113,7 @@ int BN_GF2m_mod_solve_quad(BIGNUM *r, const BIGNUM *a, const BIGNUM *p,
  * will be filled.  Return value is total number of array elements that would
  * be filled if array was large enough.
  */
-int BN_GF2m_poly2arr(const BIGNUM *a, int p[], int max)
+int __cdecl BN_GF2m_poly2arr(const BIGNUM *a, int p[], int max)
 {
     int i, j, k = 0;
     BN_ULONG mask;
@@ -1148,7 +1148,7 @@ int BN_GF2m_poly2arr(const BIGNUM *a, int p[], int max)
  * Convert the coefficient array representation of a polynomial to a
  * bit-string.  The array must be terminated by -1.
  */
-int BN_GF2m_arr2poly(const int p[], BIGNUM *a)
+int __cdecl BN_GF2m_arr2poly(const int p[], BIGNUM *a)
 {
     int i;
 
diff --git a/crypto/bn/bn_kron.c b/crypto/bn/bn_kron.c
index b9bc6cca27..b32009b2aa 100644
--- a/crypto/bn/bn_kron.c
+++ b/crypto/bn/bn_kron.c
@@ -14,7 +14,7 @@
 #define BN_lsw(n) (((n)->top == 0) ? (BN_ULONG) 0 : (n)->d[0])
 
 /* Returns -2 for errors because both -1 and 0 are valid results. */
-int BN_kronecker(const BIGNUM *a, const BIGNUM *b, BN_CTX *ctx)
+int __cdecl BN_kronecker(const BIGNUM *a, const BIGNUM *b, BN_CTX *ctx)
 {
     int i;
     int ret = -2;               /* avoid 'uninitialized' warning */
diff --git a/crypto/bn/bn_lcl.h b/crypto/bn/bn_lcl.h
index 7f823a6178..e72df9ed52 100644
--- a/crypto/bn/bn_lcl.h
+++ b/crypto/bn/bn_lcl.h
@@ -257,9 +257,9 @@ struct bn_gencb_st {
     void *arg;                  /* callback-specific data */
     union {
         /* if (ver==1) - handles old style callbacks */
-        void (*cb_1) (int, int, void *);
+        void (__cdecl *cb_1) (int, int, void *);
         /* if (ver==2) - new callback style */
-        int (*cb_2) (int, int, BN_GENCB *);
+        int (__cdecl *cb_2) (int, int, BN_GENCB *);
     } cb;
 };
 
diff --git a/crypto/bn/bn_lib.c b/crypto/bn/bn_lib.c
index 254069ff38..dfa9cfc840 100644
--- a/crypto/bn/bn_lib.c
+++ b/crypto/bn/bn_lib.c
@@ -78,7 +78,7 @@ int BN_get_params(int which)
 }
 #endif
 
-const BIGNUM *BN_value_one(void)
+const BIGNUM * __cdecl BN_value_one(void)
 {
     static const BN_ULONG data_one = 1L;
     static const BIGNUM const_one =
@@ -87,7 +87,7 @@ const BIGNUM *BN_value_one(void)
     return &const_one;
 }
 
-int BN_num_bits_word(BN_ULONG l)
+int __cdecl BN_num_bits_word(BN_ULONG l)
 {
     BN_ULONG x, mask;
     int bits = (l != 0);
@@ -162,7 +162,7 @@ int bn_num_bits_consttime(const BIGNUM *a)
     return ret & mask;
 }
 
-int BN_num_bits(const BIGNUM *a)
+int __cdecl BN_num_bits(const BIGNUM *a)
 {
     int i = a->top - 1;
     bn_check_top(a);
@@ -197,7 +197,7 @@ static void bn_free_d(BIGNUM *a, int clear)
 }
 
 
-void BN_clear_free(BIGNUM *a)
+void __cdecl BN_clear_free(BIGNUM *a)
 {
     if (a == NULL)
         return;
@@ -209,7 +209,7 @@ void BN_clear_free(BIGNUM *a)
     }
 }
 
-void BN_free(BIGNUM *a)
+void __cdecl BN_free(BIGNUM *a)
 {
     if (a == NULL)
         return;
@@ -227,7 +227,7 @@ void bn_init(BIGNUM *a)
     bn_check_top(a);
 }
 
-BIGNUM *BN_new(void)
+BIGNUM * __cdecl BN_new(void)
 {
     BIGNUM *ret;
 
@@ -240,7 +240,7 @@ BIGNUM *BN_new(void)
     return ret;
 }
 
- BIGNUM *BN_secure_new(void)
+ BIGNUM * __cdecl BN_secure_new(void)
  {
      BIGNUM *ret = BN_new();
      if (ret != NULL)
@@ -301,7 +301,7 @@ BIGNUM *bn_expand2(BIGNUM *b, int words)
     return b;
 }
 
-BIGNUM *BN_dup(const BIGNUM *a)
+BIGNUM * __cdecl BN_dup(const BIGNUM *a)
 {
     BIGNUM *t;
 
@@ -320,7 +320,7 @@ BIGNUM *BN_dup(const BIGNUM *a)
     return t;
 }
 
-BIGNUM *BN_copy(BIGNUM *a, const BIGNUM *b)
+BIGNUM * __cdecl BN_copy(BIGNUM *a, const BIGNUM *b)
 {
     bn_check_top(b);
 
@@ -345,7 +345,7 @@ BIGNUM *BN_copy(BIGNUM *a, const BIGNUM *b)
                                     | BN_FLG_FIXED_TOP))
 #define FLAGS_STRUCT(flags) ((flags) & (BN_FLG_MALLOCED))
 
-void BN_swap(BIGNUM *a, BIGNUM *b)
+void __cdecl BN_swap(BIGNUM *a, BIGNUM *b)
 {
     int flags_old_a, flags_old_b;
     BN_ULONG *tmp_d;
@@ -378,7 +378,7 @@ void BN_swap(BIGNUM *a, BIGNUM *b)
     bn_check_top(b);
 }
 
-void BN_clear(BIGNUM *a)
+void __cdecl BN_clear(BIGNUM *a)
 {
     if (a == NULL)
         return;
@@ -390,7 +390,7 @@ void BN_clear(BIGNUM *a)
     a->flags &= ~BN_FLG_FIXED_TOP;
 }
 
-BN_ULONG BN_get_word(const BIGNUM *a)
+BN_ULONG __cdecl BN_get_word(const BIGNUM *a)
 {
     if (a->top > 1)
         return BN_MASK2;
@@ -400,7 +400,7 @@ BN_ULONG BN_get_word(const BIGNUM *a)
     return 0;
 }
 
-int BN_set_word(BIGNUM *a, BN_ULONG w)
+int __cdecl BN_set_word(BIGNUM *a, BN_ULONG w)
 {
     bn_check_top(a);
     if (bn_expand(a, (int)sizeof(BN_ULONG) * 8) == NULL)
@@ -413,7 +413,7 @@ int BN_set_word(BIGNUM *a, BN_ULONG w)
     return 1;
 }
 
-BIGNUM *BN_bin2bn(const unsigned char *s, int len, BIGNUM *ret)
+BIGNUM * __cdecl BN_bin2bn(const unsigned char *s, int len, BIGNUM *ret)
 {
     unsigned int i, m;
     unsigned int n;
@@ -511,19 +511,19 @@ int bn2binpad(const BIGNUM *a, unsigned char *to, int tolen, endianess_t endiane
     return tolen;
 }
 
-int BN_bn2binpad(const BIGNUM *a, unsigned char *to, int tolen)
+int __cdecl BN_bn2binpad(const BIGNUM *a, unsigned char *to, int tolen)
 {
     if (tolen < 0)
         return -1;
     return bn2binpad(a, to, tolen, big);
 }
 
-int BN_bn2bin(const BIGNUM *a, unsigned char *to)
+int __cdecl BN_bn2bin(const BIGNUM *a, unsigned char *to)
 {
     return bn2binpad(a, to, -1, big);
 }
 
-BIGNUM *BN_lebin2bn(const unsigned char *s, int len, BIGNUM *ret)
+BIGNUM * __cdecl BN_lebin2bn(const unsigned char *s, int len, BIGNUM *ret)
 {
     unsigned int i, m;
     unsigned int n;
@@ -570,14 +570,14 @@ BIGNUM *BN_lebin2bn(const unsigned char *s, int len, BIGNUM *ret)
     return ret;
 }
 
-int BN_bn2lebinpad(const BIGNUM *a, unsigned char *to, int tolen)
+int __cdecl BN_bn2lebinpad(const BIGNUM *a, unsigned char *to, int tolen)
 {
     if (tolen < 0)
         return -1;
     return bn2binpad(a, to, tolen, little);
 }
 
-int BN_ucmp(const BIGNUM *a, const BIGNUM *b)
+int __cdecl BN_ucmp(const BIGNUM *a, const BIGNUM *b)
 {
     int i;
     BN_ULONG t1, t2, *ap, *bp;
@@ -599,7 +599,7 @@ int BN_ucmp(const BIGNUM *a, const BIGNUM *b)
     return 0;
 }
 
-int BN_cmp(const BIGNUM *a, const BIGNUM *b)
+int __cdecl BN_cmp(const BIGNUM *a, const BIGNUM *b)
 {
     int i;
     int gt, lt;
@@ -646,7 +646,7 @@ int BN_cmp(const BIGNUM *a, const BIGNUM *b)
     return 0;
 }
 
-int BN_set_bit(BIGNUM *a, int n)
+int __cdecl BN_set_bit(BIGNUM *a, int n)
 {
     int i, j, k;
 
@@ -669,7 +669,7 @@ int BN_set_bit(BIGNUM *a, int n)
     return 1;
 }
 
-int BN_clear_bit(BIGNUM *a, int n)
+int __cdecl BN_clear_bit(BIGNUM *a, int n)
 {
     int i, j;
 
@@ -687,7 +687,7 @@ int BN_clear_bit(BIGNUM *a, int n)
     return 1;
 }
 
-int BN_is_bit_set(const BIGNUM *a, int n)
+int __cdecl BN_is_bit_set(const BIGNUM *a, int n)
 {
     int i, j;
 
@@ -701,7 +701,7 @@ int BN_is_bit_set(const BIGNUM *a, int n)
     return (int)(((a->d[i]) >> j) & ((BN_ULONG)1));
 }
 
-int BN_mask_bits(BIGNUM *a, int n)
+int __cdecl BN_mask_bits(BIGNUM *a, int n)
 {
     int b, w;
 
@@ -723,7 +723,7 @@ int BN_mask_bits(BIGNUM *a, int n)
     return 1;
 }
 
-void BN_set_negative(BIGNUM *a, int b)
+void __cdecl BN_set_negative(BIGNUM *a, int b)
 {
     if (b && !BN_is_zero(a))
         a->neg = 1;
@@ -788,7 +788,7 @@ int bn_cmp_part_words(const BN_ULONG *a, const BN_ULONG *b, int cl, int dl)
  * Assumes that at least nwords are allocated in both a and b.
  * Assumes that no more than nwords are used by either a or b.
  */
-void BN_consttime_swap(BN_ULONG condition, BIGNUM *a, BIGNUM *b, int nwords)
+void __cdecl BN_consttime_swap(BN_ULONG condition, BIGNUM *a, BIGNUM *b, int nwords)
 {
     BN_ULONG t;
     int i;
@@ -849,7 +849,7 @@ void BN_consttime_swap(BN_ULONG condition, BIGNUM *a, BIGNUM *b, int nwords)
 
 /* Bits of security, see SP800-57 */
 
-int BN_security_bits(int L, int N)
+int __cdecl BN_security_bits(int L, int N)
 {
     int secbits, bits;
     if (L >= 15360)
@@ -872,50 +872,50 @@ int BN_security_bits(int L, int N)
     return bits >= secbits ? secbits : bits;
 }
 
-void BN_zero_ex(BIGNUM *a)
+void __cdecl BN_zero_ex(BIGNUM *a)
 {
     a->neg = 0;
     a->top = 0;
     a->flags &= ~BN_FLG_FIXED_TOP;
 }
 
-int BN_abs_is_word(const BIGNUM *a, const BN_ULONG w)
+int __cdecl BN_abs_is_word(const BIGNUM *a, const BN_ULONG w)
 {
     return ((a->top == 1) && (a->d[0] == w)) || ((w == 0) && (a->top == 0));
 }
 
-int BN_is_zero(const BIGNUM *a)
+int __cdecl BN_is_zero(const BIGNUM *a)
 {
     return a->top == 0;
 }
 
-int BN_is_one(const BIGNUM *a)
+int __cdecl BN_is_one(const BIGNUM *a)
 {
     return BN_abs_is_word(a, 1) && !a->neg;
 }
 
-int BN_is_word(const BIGNUM *a, const BN_ULONG w)
+int __cdecl BN_is_word(const BIGNUM *a, const BN_ULONG w)
 {
     return BN_abs_is_word(a, w) && (!w || !a->neg);
 }
 
-int BN_is_odd(const BIGNUM *a)
+int __cdecl BN_is_odd(const BIGNUM *a)
 {
     return (a->top > 0) && (a->d[0] & 1);
 }
 
-int BN_is_negative(const BIGNUM *a)
+int __cdecl BN_is_negative(const BIGNUM *a)
 {
     return (a->neg != 0);
 }
 
-int BN_to_montgomery(BIGNUM *r, const BIGNUM *a, BN_MONT_CTX *mont,
+int __cdecl BN_to_montgomery(BIGNUM *r, const BIGNUM *a, BN_MONT_CTX *mont,
                      BN_CTX *ctx)
 {
     return BN_mod_mul_montgomery(r, a, &(mont->RR), mont, ctx);
 }
 
-void BN_with_flags(BIGNUM *dest, const BIGNUM *b, int flags)
+void __cdecl BN_with_flags(BIGNUM *dest, const BIGNUM *b, int flags)
 {
     dest->d = b->d;
     dest->top = b->top;
@@ -926,7 +926,7 @@ void BN_with_flags(BIGNUM *dest, const BIGNUM *b, int flags)
                    | BN_FLG_STATIC_DATA | flags);
 }
 
-BN_GENCB *BN_GENCB_new(void)
+BN_GENCB * __cdecl BN_GENCB_new(void)
 {
     BN_GENCB *ret;
 
@@ -938,25 +938,25 @@ BN_GENCB *BN_GENCB_new(void)
     return ret;
 }
 
-void BN_GENCB_free(BN_GENCB *cb)
+void __cdecl BN_GENCB_free(BN_GENCB *cb)
 {
     if (cb == NULL)
         return;
     OPENSSL_free(cb);
 }
 
-void BN_set_flags(BIGNUM *b, int n)
+void __cdecl BN_set_flags(BIGNUM *b, int n)
 {
     b->flags |= n;
 }
 
-int BN_get_flags(const BIGNUM *b, int n)
+int __cdecl BN_get_flags(const BIGNUM *b, int n)
 {
     return b->flags & n;
 }
 
 /* Populate a BN_GENCB structure with an "old"-style callback */
-void BN_GENCB_set_old(BN_GENCB *gencb, void (*callback) (int, int, void *),
+void __cdecl BN_GENCB_set_old(BN_GENCB *gencb, void (__cdecl *callback) (int, int, void *),
                       void *cb_arg)
 {
     BN_GENCB *tmp_gencb = gencb;
@@ -966,7 +966,7 @@ void BN_GENCB_set_old(BN_GENCB *gencb, void (*callback) (int, int, void *),
 }
 
 /* Populate a BN_GENCB structure with a "new"-style callback */
-void BN_GENCB_set(BN_GENCB *gencb, int (*callback) (int, int, BN_GENCB *),
+void __cdecl BN_GENCB_set(BN_GENCB *gencb, int (__cdecl *callback) (int, int, BN_GENCB *),
                   void *cb_arg)
 {
     BN_GENCB *tmp_gencb = gencb;
@@ -975,7 +975,7 @@ void BN_GENCB_set(BN_GENCB *gencb, int (*callback) (int, int, BN_GENCB *),
     tmp_gencb->cb.cb_2 = callback;
 }
 
-void *BN_GENCB_get_arg(BN_GENCB *cb)
+void * __cdecl BN_GENCB_get_arg(BN_GENCB *cb)
 {
     return cb->arg;
 }
diff --git a/crypto/bn/bn_mod.c b/crypto/bn/bn_mod.c
index 712fc8ac14..74f692d527 100644
--- a/crypto/bn/bn_mod.c
+++ b/crypto/bn/bn_mod.c
@@ -10,7 +10,7 @@
 #include "internal/cryptlib.h"
 #include "bn_lcl.h"
 
-int BN_nnmod(BIGNUM *r, const BIGNUM *m, const BIGNUM *d, BN_CTX *ctx)
+int __cdecl BN_nnmod(BIGNUM *r, const BIGNUM *m, const BIGNUM *d, BN_CTX *ctx)
 {
     /*
      * like BN_mod, but returns non-negative remainder (i.e., 0 <= r < |d|
@@ -25,7 +25,7 @@ int BN_nnmod(BIGNUM *r, const BIGNUM *m, const BIGNUM *d, BN_CTX *ctx)
     return (d->neg ? BN_sub : BN_add) (r, r, d);
 }
 
-int BN_mod_add(BIGNUM *r, const BIGNUM *a, const BIGNUM *b, const BIGNUM *m,
+int __cdecl BN_mod_add(BIGNUM *r, const BIGNUM *a, const BIGNUM *b, const BIGNUM *m,
                BN_CTX *ctx)
 {
     if (!BN_add(r, a, b))
@@ -92,7 +92,7 @@ int bn_mod_add_fixed_top(BIGNUM *r, const BIGNUM *a, const BIGNUM *b,
     return 1;
 }
 
-int BN_mod_add_quick(BIGNUM *r, const BIGNUM *a, const BIGNUM *b,
+int __cdecl BN_mod_add_quick(BIGNUM *r, const BIGNUM *a, const BIGNUM *b,
                      const BIGNUM *m)
 {
     int ret = bn_mod_add_fixed_top(r, a, b, m);
@@ -103,7 +103,7 @@ int BN_mod_add_quick(BIGNUM *r, const BIGNUM *a, const BIGNUM *b,
     return ret;
 }
 
-int BN_mod_sub(BIGNUM *r, const BIGNUM *a, const BIGNUM *b, const BIGNUM *m,
+int __cdecl BN_mod_sub(BIGNUM *r, const BIGNUM *a, const BIGNUM *b, const BIGNUM *m,
                BN_CTX *ctx)
 {
     if (!BN_sub(r, a, b))
@@ -179,7 +179,7 @@ int bn_mod_sub_fixed_top(BIGNUM *r, const BIGNUM *a, const BIGNUM *b,
  * BN_mod_sub variant that may be used if both a and b are non-negative and
  * less than m
  */
-int BN_mod_sub_quick(BIGNUM *r, const BIGNUM *a, const BIGNUM *b,
+int __cdecl BN_mod_sub_quick(BIGNUM *r, const BIGNUM *a, const BIGNUM *b,
                      const BIGNUM *m)
 {
     if (!BN_sub(r, a, b))
@@ -190,7 +190,7 @@ int BN_mod_sub_quick(BIGNUM *r, const BIGNUM *a, const BIGNUM *b,
 }
 
 /* slow but works */
-int BN_mod_mul(BIGNUM *r, const BIGNUM *a, const BIGNUM *b, const BIGNUM *m,
+int __cdecl BN_mod_mul(BIGNUM *r, const BIGNUM *a, const BIGNUM *b, const BIGNUM *m,
                BN_CTX *ctx)
 {
     BIGNUM *t;
@@ -219,7 +219,7 @@ int BN_mod_mul(BIGNUM *r, const BIGNUM *a, const BIGNUM *b, const BIGNUM *m,
     return ret;
 }
 
-int BN_mod_sqr(BIGNUM *r, const BIGNUM *a, const BIGNUM *m, BN_CTX *ctx)
+int __cdecl BN_mod_sqr(BIGNUM *r, const BIGNUM *a, const BIGNUM *m, BN_CTX *ctx)
 {
     if (!BN_sqr(r, a, ctx))
         return 0;
@@ -227,7 +227,7 @@ int BN_mod_sqr(BIGNUM *r, const BIGNUM *a, const BIGNUM *m, BN_CTX *ctx)
     return BN_mod(r, r, m, ctx);
 }
 
-int BN_mod_lshift1(BIGNUM *r, const BIGNUM *a, const BIGNUM *m, BN_CTX *ctx)
+int __cdecl BN_mod_lshift1(BIGNUM *r, const BIGNUM *a, const BIGNUM *m, BN_CTX *ctx)
 {
     if (!BN_lshift1(r, a))
         return 0;
@@ -239,7 +239,7 @@ int BN_mod_lshift1(BIGNUM *r, const BIGNUM *a, const BIGNUM *m, BN_CTX *ctx)
  * BN_mod_lshift1 variant that may be used if a is non-negative and less than
  * m
  */
-int BN_mod_lshift1_quick(BIGNUM *r, const BIGNUM *a, const BIGNUM *m)
+int __cdecl BN_mod_lshift1_quick(BIGNUM *r, const BIGNUM *a, const BIGNUM *m)
 {
     if (!BN_lshift1(r, a))
         return 0;
@@ -249,7 +249,7 @@ int BN_mod_lshift1_quick(BIGNUM *r, const BIGNUM *a, const BIGNUM *m)
     return 1;
 }
 
-int BN_mod_lshift(BIGNUM *r, const BIGNUM *a, int n, const BIGNUM *m,
+int __cdecl BN_mod_lshift(BIGNUM *r, const BIGNUM *a, int n, const BIGNUM *m,
                   BN_CTX *ctx)
 {
     BIGNUM *abs_m = NULL;
@@ -276,7 +276,7 @@ int BN_mod_lshift(BIGNUM *r, const BIGNUM *a, int n, const BIGNUM *m,
  * BN_mod_lshift variant that may be used if a is non-negative and less than
  * m
  */
-int BN_mod_lshift_quick(BIGNUM *r, const BIGNUM *a, int n, const BIGNUM *m)
+int __cdecl BN_mod_lshift_quick(BIGNUM *r, const BIGNUM *a, int n, const BIGNUM *m)
 {
     if (r != a) {
         if (BN_copy(r, a) == NULL)
diff --git a/crypto/bn/bn_mont.c b/crypto/bn/bn_mont.c
index 393d27c392..e7866176bb 100644
--- a/crypto/bn/bn_mont.c
+++ b/crypto/bn/bn_mont.c
@@ -23,7 +23,7 @@
 static int bn_from_montgomery_word(BIGNUM *ret, BIGNUM *r, BN_MONT_CTX *mont);
 #endif
 
-int BN_mod_mul_montgomery(BIGNUM *r, const BIGNUM *a, const BIGNUM *b,
+int __cdecl BN_mod_mul_montgomery(BIGNUM *r, const BIGNUM *a, const BIGNUM *b,
                           BN_MONT_CTX *mont, BN_CTX *ctx)
 {
     int ret = bn_mul_mont_fixed_top(r, a, b, mont, ctx);
@@ -159,7 +159,7 @@ static int bn_from_montgomery_word(BIGNUM *ret, BIGNUM *r, BN_MONT_CTX *mont)
 }
 #endif                          /* MONT_WORD */
 
-int BN_from_montgomery(BIGNUM *ret, const BIGNUM *a, BN_MONT_CTX *mont,
+int __cdecl BN_from_montgomery(BIGNUM *ret, const BIGNUM *a, BN_MONT_CTX *mont,
                        BN_CTX *ctx)
 {
     int retn;
@@ -225,7 +225,7 @@ int bn_to_mont_fixed_top(BIGNUM *r, const BIGNUM *a, BN_MONT_CTX *mont,
     return bn_mul_mont_fixed_top(r, a, &(mont->RR), mont, ctx);
 }
 
-BN_MONT_CTX *BN_MONT_CTX_new(void)
+BN_MONT_CTX * __cdecl BN_MONT_CTX_new(void)
 {
     BN_MONT_CTX *ret;
 
@@ -249,7 +249,7 @@ void BN_MONT_CTX_init(BN_MONT_CTX *ctx)
     ctx->flags = 0;
 }
 
-void BN_MONT_CTX_free(BN_MONT_CTX *mont)
+void __cdecl BN_MONT_CTX_free(BN_MONT_CTX *mont)
 {
     if (mont == NULL)
         return;
@@ -260,7 +260,7 @@ void BN_MONT_CTX_free(BN_MONT_CTX *mont)
         OPENSSL_free(mont);
 }
 
-int BN_MONT_CTX_set(BN_MONT_CTX *mont, const BIGNUM *mod, BN_CTX *ctx)
+int __cdecl BN_MONT_CTX_set(BN_MONT_CTX *mont, const BIGNUM *mod, BN_CTX *ctx)
 {
     int i, ret = 0;
     BIGNUM *Ri, *R;
@@ -408,7 +408,7 @@ int BN_MONT_CTX_set(BN_MONT_CTX *mont, const BIGNUM *mod, BN_CTX *ctx)
     return ret;
 }
 
-BN_MONT_CTX *BN_MONT_CTX_copy(BN_MONT_CTX *to, BN_MONT_CTX *from)
+BN_MONT_CTX * __cdecl BN_MONT_CTX_copy(BN_MONT_CTX *to, BN_MONT_CTX *from)
 {
     if (to == from)
         return to;
@@ -425,7 +425,7 @@ BN_MONT_CTX *BN_MONT_CTX_copy(BN_MONT_CTX *to, BN_MONT_CTX *from)
     return to;
 }
 
-BN_MONT_CTX *BN_MONT_CTX_set_locked(BN_MONT_CTX **pmont, CRYPTO_RWLOCK *lock,
+BN_MONT_CTX * __cdecl BN_MONT_CTX_set_locked(BN_MONT_CTX **pmont, CRYPTO_RWLOCK *lock,
                                     const BIGNUM *mod, BN_CTX *ctx)
 {
     BN_MONT_CTX *ret;
diff --git a/crypto/bn/bn_mpi.c b/crypto/bn/bn_mpi.c
index 043e21d26a..335e9ff56a 100644
--- a/crypto/bn/bn_mpi.c
+++ b/crypto/bn/bn_mpi.c
@@ -11,7 +11,7 @@
 #include "internal/cryptlib.h"
 #include "bn_lcl.h"
 
-int BN_bn2mpi(const BIGNUM *a, unsigned char *d)
+int __cdecl BN_bn2mpi(const BIGNUM *a, unsigned char *d)
 {
     int bits;
     int num = 0;
@@ -39,7 +39,7 @@ int BN_bn2mpi(const BIGNUM *a, unsigned char *d)
     return (num + 4 + ext);
 }
 
-BIGNUM *BN_mpi2bn(const unsigned char *d, int n, BIGNUM *ain)
+BIGNUM * __cdecl BN_mpi2bn(const unsigned char *d, int n, BIGNUM *ain)
 {
     long len;
     int neg = 0;
diff --git a/crypto/bn/bn_mul.c b/crypto/bn/bn_mul.c
index 5eda65cfbb..fb9c4345cb 100644
--- a/crypto/bn/bn_mul.c
+++ b/crypto/bn/bn_mul.c
@@ -494,7 +494,7 @@ void bn_mul_low_recursive(BN_ULONG *r, BN_ULONG *a, BN_ULONG *b, int n2,
 }
 #endif                          /* BN_RECURSION */
 
-int BN_mul(BIGNUM *r, const BIGNUM *a, const BIGNUM *b, BN_CTX *ctx)
+int __cdecl BN_mul(BIGNUM *r, const BIGNUM *a, const BIGNUM *b, BN_CTX *ctx)
 {
     int ret = bn_mul_fixed_top(r, a, b, ctx);
 
diff --git a/crypto/bn/bn_nist.c b/crypto/bn/bn_nist.c
index dcdd321c66..ad94535001 100644
--- a/crypto/bn/bn_nist.c
+++ b/crypto/bn/bn_nist.c
@@ -224,27 +224,27 @@ static const BIGNUM _bignum_nist_p_521 = {
     BN_FLG_STATIC_DATA
 };
 
-const BIGNUM *BN_get0_nist_prime_192(void)
+const BIGNUM * __cdecl BN_get0_nist_prime_192(void)
 {
     return &_bignum_nist_p_192;
 }
 
-const BIGNUM *BN_get0_nist_prime_224(void)
+const BIGNUM * __cdecl BN_get0_nist_prime_224(void)
 {
     return &_bignum_nist_p_224;
 }
 
-const BIGNUM *BN_get0_nist_prime_256(void)
+const BIGNUM * __cdecl BN_get0_nist_prime_256(void)
 {
     return &_bignum_nist_p_256;
 }
 
-const BIGNUM *BN_get0_nist_prime_384(void)
+const BIGNUM * __cdecl BN_get0_nist_prime_384(void)
 {
     return &_bignum_nist_p_384;
 }
 
-const BIGNUM *BN_get0_nist_prime_521(void)
+const BIGNUM * __cdecl BN_get0_nist_prime_521(void)
 {
     return &_bignum_nist_p_521;
 }
@@ -315,7 +315,7 @@ static void nist_cp_bn(BN_ULONG *dst, const BN_ULONG *src, int top)
         bn_cp_64(to, 2, from, (a1) - 3) \
         }
 
-int BN_nist_mod_192(BIGNUM *r, const BIGNUM *a, const BIGNUM *field,
+int __cdecl BN_nist_mod_192(BIGNUM *r, const BIGNUM *a, const BIGNUM *field,
                     BN_CTX *ctx)
 {
     int top = a->top, i;
@@ -456,7 +456,7 @@ typedef BN_ULONG (*bn_addsub_f) (BN_ULONG *, const BN_ULONG *,
         bn_cp_32(to, 6, from, (a1) - 7) \
         }
 
-int BN_nist_mod_224(BIGNUM *r, const BIGNUM *a, const BIGNUM *field,
+int __cdecl BN_nist_mod_224(BIGNUM *r, const BIGNUM *a, const BIGNUM *field,
                     BN_CTX *ctx)
 {
     int top = a->top, i;
@@ -637,7 +637,7 @@ int BN_nist_mod_224(BIGNUM *r, const BIGNUM *a, const BIGNUM *field,
         bn_cp_32(to, 7, from, (a1) - 8) \
         }
 
-int BN_nist_mod_256(BIGNUM *r, const BIGNUM *a, const BIGNUM *field,
+int __cdecl BN_nist_mod_256(BIGNUM *r, const BIGNUM *a, const BIGNUM *field,
                     BN_CTX *ctx)
 {
     int i, top = a->top;
@@ -883,7 +883,7 @@ int BN_nist_mod_256(BIGNUM *r, const BIGNUM *a, const BIGNUM *field,
         bn_cp_32(to, 11, from, (a1) - 12)  \
         }
 
-int BN_nist_mod_384(BIGNUM *r, const BIGNUM *a, const BIGNUM *field,
+int __cdecl BN_nist_mod_384(BIGNUM *r, const BIGNUM *a, const BIGNUM *field,
                     BN_CTX *ctx)
 {
     int i, top = a->top;
@@ -1152,7 +1152,7 @@ int BN_nist_mod_384(BIGNUM *r, const BIGNUM *a, const BIGNUM *field,
 #define BN_NIST_521_LSHIFT      (BN_BITS2-BN_NIST_521_RSHIFT)
 #define BN_NIST_521_TOP_MASK    ((BN_ULONG)BN_MASK2>>BN_NIST_521_LSHIFT)
 
-int BN_nist_mod_521(BIGNUM *r, const BIGNUM *a, const BIGNUM *field,
+int __cdecl BN_nist_mod_521(BIGNUM *r, const BIGNUM *a, const BIGNUM *field,
                     BN_CTX *ctx)
 {
     int top = a->top, i;
@@ -1223,7 +1223,7 @@ int BN_nist_mod_521(BIGNUM *r, const BIGNUM *a, const BIGNUM *field,
     return 1;
 }
 
-int (*BN_nist_mod_func(const BIGNUM *p)) (BIGNUM *r, const BIGNUM *a,
+int (__cdecl *BN_nist_mod_func(const BIGNUM *p)) (BIGNUM *r, const BIGNUM *a,
                                           const BIGNUM *field, BN_CTX *ctx) {
     if (BN_ucmp(&_bignum_nist_p_192, p) == 0)
         return BN_nist_mod_192;
diff --git a/crypto/bn/bn_prime.c b/crypto/bn/bn_prime.c
index 19b081f38e..860112b30c 100644
--- a/crypto/bn/bn_prime.c
+++ b/crypto/bn/bn_prime.c
@@ -27,7 +27,7 @@ static int probable_prime_dh_safe(BIGNUM *rnd, int bits,
                                   const BIGNUM *add, const BIGNUM *rem,
                                   BN_CTX *ctx);
 
-int BN_GENCB_call(BN_GENCB *cb, int a, int b)
+int __cdecl BN_GENCB_call(BN_GENCB *cb, int a, int b)
 {
     /* No callback means continue */
     if (!cb)
@@ -49,7 +49,7 @@ int BN_GENCB_call(BN_GENCB *cb, int a, int b)
     return 0;
 }
 
-int BN_generate_prime_ex(BIGNUM *ret, int bits, int safe,
+int __cdecl BN_generate_prime_ex(BIGNUM *ret, int bits, int safe,
                          const BIGNUM *add, const BIGNUM *rem, BN_GENCB *cb)
 {
     BIGNUM *t;
@@ -145,13 +145,13 @@ int BN_generate_prime_ex(BIGNUM *ret, int bits, int safe,
     return found;
 }
 
-int BN_is_prime_ex(const BIGNUM *a, int checks, BN_CTX *ctx_passed,
+int __cdecl BN_is_prime_ex(const BIGNUM *a, int checks, BN_CTX *ctx_passed,
                    BN_GENCB *cb)
 {
     return BN_is_prime_fasttest_ex(a, checks, ctx_passed, 0, cb);
 }
 
-int BN_is_prime_fasttest_ex(const BIGNUM *a, int checks, BN_CTX *ctx_passed,
+int __cdecl BN_is_prime_fasttest_ex(const BIGNUM *a, int checks, BN_CTX *ctx_passed,
                             int do_trial_division, BN_GENCB *cb)
 {
     int i, j, ret = -1;
diff --git a/crypto/bn/bn_print.c b/crypto/bn/bn_print.c
index 1853269d90..62ac640cca 100644
--- a/crypto/bn/bn_print.c
+++ b/crypto/bn/bn_print.c
@@ -17,7 +17,7 @@
 static const char Hex[] = "0123456789ABCDEF";
 
 /* Must 'OPENSSL_free' the returned data */
-char *BN_bn2hex(const BIGNUM *a)
+char * __cdecl BN_bn2hex(const BIGNUM *a)
 {
     int i, j, v, z = 0;
     char *buf;
@@ -50,7 +50,7 @@ char *BN_bn2hex(const BIGNUM *a)
 }
 
 /* Must 'OPENSSL_free' the returned data */
-char *BN_bn2dec(const BIGNUM *a)
+char * __cdecl BN_bn2dec(const BIGNUM *a)
 {
     int i = 0, num, ok = 0, n, tbytes;
     char *buf = NULL;
@@ -123,7 +123,7 @@ char *BN_bn2dec(const BIGNUM *a)
     return NULL;
 }
 
-int BN_hex2bn(BIGNUM **bn, const char *a)
+int __cdecl BN_hex2bn(BIGNUM **bn, const char *a)
 {
     BIGNUM *ret = NULL;
     BN_ULONG l = 0;
@@ -196,7 +196,7 @@ int BN_hex2bn(BIGNUM **bn, const char *a)
     return 0;
 }
 
-int BN_dec2bn(BIGNUM **bn, const char *a)
+int __cdecl BN_dec2bn(BIGNUM **bn, const char *a)
 {
     BIGNUM *ret = NULL;
     BN_ULONG l = 0;
@@ -266,7 +266,7 @@ int BN_dec2bn(BIGNUM **bn, const char *a)
     return 0;
 }
 
-int BN_asc2bn(BIGNUM **bn, const char *a)
+int __cdecl BN_asc2bn(BIGNUM **bn, const char *a)
 {
     const char *p = a;
 
@@ -287,7 +287,7 @@ int BN_asc2bn(BIGNUM **bn, const char *a)
 }
 
 # ifndef OPENSSL_NO_STDIO
-int BN_print_fp(FILE *fp, const BIGNUM *a)
+int __cdecl BN_print_fp(FILE *fp, const BIGNUM *a)
 {
     BIO *b;
     int ret;
@@ -301,7 +301,7 @@ int BN_print_fp(FILE *fp, const BIGNUM *a)
 }
 # endif
 
-int BN_print(BIO *bp, const BIGNUM *a)
+int __cdecl BN_print(BIO *bp, const BIGNUM *a)
 {
     int i, j, v, z = 0;
     int ret = 0;
@@ -326,7 +326,7 @@ int BN_print(BIO *bp, const BIGNUM *a)
     return ret;
 }
 
-char *BN_options(void)
+char * __cdecl BN_options(void)
 {
     static int init = 0;
     static char data[16];
diff --git a/crypto/bn/bn_rand.c b/crypto/bn/bn_rand.c
index 051f29e343..e43a405cb9 100644
--- a/crypto/bn/bn_rand.c
+++ b/crypto/bn/bn_rand.c
@@ -94,17 +94,17 @@ toosmall:
     return 0;
 }
 
-int BN_rand(BIGNUM *rnd, int bits, int top, int bottom)
+int __cdecl BN_rand(BIGNUM *rnd, int bits, int top, int bottom)
 {
     return bnrand(NORMAL, rnd, bits, top, bottom);
 }
 
-int BN_bntest_rand(BIGNUM *rnd, int bits, int top, int bottom)
+int __cdecl BN_bntest_rand(BIGNUM *rnd, int bits, int top, int bottom)
 {
     return bnrand(TESTING, rnd, bits, top, bottom);
 }
 
-int BN_priv_rand(BIGNUM *rnd, int bits, int top, int bottom)
+int __cdecl BN_priv_rand(BIGNUM *rnd, int bits, int top, int bottom)
 {
     return bnrand(PRIVATE, rnd, bits, top, bottom);
 }
@@ -174,22 +174,22 @@ static int bnrand_range(BNRAND_FLAG flag, BIGNUM *r, const BIGNUM *range)
     return 1;
 }
 
-int BN_rand_range(BIGNUM *r, const BIGNUM *range)
+int __cdecl BN_rand_range(BIGNUM *r, const BIGNUM *range)
 {
     return bnrand_range(NORMAL, r, range);
 }
 
-int BN_priv_rand_range(BIGNUM *r, const BIGNUM *range)
+int __cdecl BN_priv_rand_range(BIGNUM *r, const BIGNUM *range)
 {
     return bnrand_range(PRIVATE, r, range);
 }
 
-int BN_pseudo_rand(BIGNUM *rnd, int bits, int top, int bottom)
+int __cdecl BN_pseudo_rand(BIGNUM *rnd, int bits, int top, int bottom)
 {
     return BN_rand(rnd, bits, top, bottom);
 }
 
-int BN_pseudo_rand_range(BIGNUM *r, const BIGNUM *range)
+int __cdecl BN_pseudo_rand_range(BIGNUM *r, const BIGNUM *range)
 {
     return BN_rand_range(r, range);
 }
@@ -202,7 +202,7 @@ int BN_pseudo_rand_range(BIGNUM *r, const BIGNUM *range)
  * weakness leads directly to private key exposure unless this function is
  * used.
  */
-int BN_generate_dsa_nonce(BIGNUM *out, const BIGNUM *range,
+int __cdecl BN_generate_dsa_nonce(BIGNUM *out, const BIGNUM *range,
                           const BIGNUM *priv, const unsigned char *message,
                           size_t message_len, BN_CTX *ctx)
 {
diff --git a/crypto/bn/bn_recp.c b/crypto/bn/bn_recp.c
index 9ab767f42f..a2110af2c5 100644
--- a/crypto/bn/bn_recp.c
+++ b/crypto/bn/bn_recp.c
@@ -17,7 +17,7 @@ void BN_RECP_CTX_init(BN_RECP_CTX *recp)
     bn_init(&(recp->Nr));
 }
 
-BN_RECP_CTX *BN_RECP_CTX_new(void)
+BN_RECP_CTX * __cdecl BN_RECP_CTX_new(void)
 {
     BN_RECP_CTX *ret;
 
@@ -32,7 +32,7 @@ BN_RECP_CTX *BN_RECP_CTX_new(void)
     return ret;
 }
 
-void BN_RECP_CTX_free(BN_RECP_CTX *recp)
+void __cdecl BN_RECP_CTX_free(BN_RECP_CTX *recp)
 {
     if (recp == NULL)
         return;
@@ -42,7 +42,7 @@ void BN_RECP_CTX_free(BN_RECP_CTX *recp)
         OPENSSL_free(recp);
 }
 
-int BN_RECP_CTX_set(BN_RECP_CTX *recp, const BIGNUM *d, BN_CTX *ctx)
+int __cdecl BN_RECP_CTX_set(BN_RECP_CTX *recp, const BIGNUM *d, BN_CTX *ctx)
 {
     if (!BN_copy(&(recp->N), d))
         return 0;
@@ -52,7 +52,7 @@ int BN_RECP_CTX_set(BN_RECP_CTX *recp, const BIGNUM *d, BN_CTX *ctx)
     return 1;
 }
 
-int BN_mod_mul_reciprocal(BIGNUM *r, const BIGNUM *x, const BIGNUM *y,
+int __cdecl BN_mod_mul_reciprocal(BIGNUM *r, const BIGNUM *x, const BIGNUM *y,
                           BN_RECP_CTX *recp, BN_CTX *ctx)
 {
     int ret = 0;
@@ -81,7 +81,7 @@ int BN_mod_mul_reciprocal(BIGNUM *r, const BIGNUM *x, const BIGNUM *y,
     return ret;
 }
 
-int BN_div_recp(BIGNUM *dv, BIGNUM *rem, const BIGNUM *m,
+int __cdecl BN_div_recp(BIGNUM *dv, BIGNUM *rem, const BIGNUM *m,
                 BN_RECP_CTX *recp, BN_CTX *ctx)
 {
     int i, j, ret = 0;
@@ -171,7 +171,7 @@ int BN_div_recp(BIGNUM *dv, BIGNUM *rem, const BIGNUM *m,
  * required.
  */
 /* r := 2^len / m */
-int BN_reciprocal(BIGNUM *r, const BIGNUM *m, int len, BN_CTX *ctx)
+int __cdecl BN_reciprocal(BIGNUM *r, const BIGNUM *m, int len, BN_CTX *ctx)
 {
     int ret = -1;
     BIGNUM *t;
diff --git a/crypto/bn/bn_shift.c b/crypto/bn/bn_shift.c
index b7a1e0ff9a..4276529583 100644
--- a/crypto/bn/bn_shift.c
+++ b/crypto/bn/bn_shift.c
@@ -11,7 +11,7 @@
 #include "internal/cryptlib.h"
 #include "bn_lcl.h"
 
-int BN_lshift1(BIGNUM *r, const BIGNUM *a)
+int __cdecl BN_lshift1(BIGNUM *r, const BIGNUM *a)
 {
     register BN_ULONG *ap, *rp, t, c;
     int i;
@@ -44,7 +44,7 @@ int BN_lshift1(BIGNUM *r, const BIGNUM *a)
     return 1;
 }
 
-int BN_rshift1(BIGNUM *r, const BIGNUM *a)
+int __cdecl BN_rshift1(BIGNUM *r, const BIGNUM *a)
 {
     BN_ULONG *ap, *rp, t, c;
     int i, j;
@@ -81,7 +81,7 @@ int BN_rshift1(BIGNUM *r, const BIGNUM *a)
     return 1;
 }
 
-int BN_lshift(BIGNUM *r, const BIGNUM *a, int n)
+int __cdecl BN_lshift(BIGNUM *r, const BIGNUM *a, int n)
 {
     int ret;
 
@@ -150,7 +150,7 @@ int bn_lshift_fixed_top(BIGNUM *r, const BIGNUM *a, int n)
     return 1;
 }
 
-int BN_rshift(BIGNUM *r, const BIGNUM *a, int n)
+int __cdecl BN_rshift(BIGNUM *r, const BIGNUM *a, int n)
 {
     int i, j, nw, lb, rb;
     BN_ULONG *t, *f;
diff --git a/crypto/bn/bn_sqr.c b/crypto/bn/bn_sqr.c
index 0c0a590f0c..01acfc0a46 100644
--- a/crypto/bn/bn_sqr.c
+++ b/crypto/bn/bn_sqr.c
@@ -14,7 +14,7 @@
 /*
  * I've just gone over this and it is now %20 faster on x86 - eay - 27 Jun 96
  */
-int BN_sqr(BIGNUM *r, const BIGNUM *a, BN_CTX *ctx)
+int __cdecl BN_sqr(BIGNUM *r, const BIGNUM *a, BN_CTX *ctx)
 {
     int ret = bn_sqr_fixed_top(r, a, ctx);
 
diff --git a/crypto/bn/bn_sqrt.c b/crypto/bn/bn_sqrt.c
index c3e66b033b..67b8c2e9bc 100644
--- a/crypto/bn/bn_sqrt.c
+++ b/crypto/bn/bn_sqrt.c
@@ -10,7 +10,7 @@
 #include "internal/cryptlib.h"
 #include "bn_lcl.h"
 
-BIGNUM *BN_mod_sqrt(BIGNUM *in, const BIGNUM *a, const BIGNUM *p, BN_CTX *ctx)
+BIGNUM * __cdecl BN_mod_sqrt(BIGNUM *in, const BIGNUM *a, const BIGNUM *p, BN_CTX *ctx)
 /*
  * Returns 'ret' such that ret^2 == a (mod p), using the Tonelli/Shanks
  * algorithm (cf. Henri Cohen, "A Course in Algebraic Computational Number
diff --git a/crypto/bn/bn_word.c b/crypto/bn/bn_word.c
index 262d7668fc..5a69b23337 100644
--- a/crypto/bn/bn_word.c
+++ b/crypto/bn/bn_word.c
@@ -10,7 +10,7 @@
 #include "internal/cryptlib.h"
 #include "bn_lcl.h"
 
-BN_ULONG BN_mod_word(const BIGNUM *a, BN_ULONG w)
+BN_ULONG __cdecl BN_mod_word(const BIGNUM *a, BN_ULONG w)
 {
 #ifndef BN_LLONG
     BN_ULONG ret = 0;
@@ -58,7 +58,7 @@ BN_ULONG BN_mod_word(const BIGNUM *a, BN_ULONG w)
     return (BN_ULONG)ret;
 }
 
-BN_ULONG BN_div_word(BIGNUM *a, BN_ULONG w)
+BN_ULONG __cdecl BN_div_word(BIGNUM *a, BN_ULONG w)
 {
     BN_ULONG ret = 0;
     int i, j;
@@ -95,7 +95,7 @@ BN_ULONG BN_div_word(BIGNUM *a, BN_ULONG w)
     return ret;
 }
 
-int BN_add_word(BIGNUM *a, BN_ULONG w)
+int __cdecl BN_add_word(BIGNUM *a, BN_ULONG w)
 {
     BN_ULONG l;
     int i;
@@ -131,7 +131,7 @@ int BN_add_word(BIGNUM *a, BN_ULONG w)
     return 1;
 }
 
-int BN_sub_word(BIGNUM *a, BN_ULONG w)
+int __cdecl BN_sub_word(BIGNUM *a, BN_ULONG w)
 {
     int i;
 
@@ -178,7 +178,7 @@ int BN_sub_word(BIGNUM *a, BN_ULONG w)
     return 1;
 }
 
-int BN_mul_word(BIGNUM *a, BN_ULONG w)
+int __cdecl BN_mul_word(BIGNUM *a, BN_ULONG w)
 {
     BN_ULONG ll;
 
diff --git a/crypto/bn/bn_x931p.c b/crypto/bn/bn_x931p.c
index 9eb8384fde..1f909079bf 100644
--- a/crypto/bn/bn_x931p.c
+++ b/crypto/bn/bn_x931p.c
@@ -48,7 +48,7 @@ static int bn_x931_derive_pi(BIGNUM *pi, const BIGNUM *Xpi, BN_CTX *ctx,
  * will be returned too: this is needed for testing.
  */
 
-int BN_X931_derive_prime_ex(BIGNUM *p, BIGNUM *p1, BIGNUM *p2,
+int __cdecl BN_X931_derive_prime_ex(BIGNUM *p, BIGNUM *p1, BIGNUM *p2,
                             const BIGNUM *Xp, const BIGNUM *Xp1,
                             const BIGNUM *Xp2, const BIGNUM *e, BN_CTX *ctx,
                             BN_GENCB *cb)
@@ -157,7 +157,7 @@ int BN_X931_derive_prime_ex(BIGNUM *p, BIGNUM *p1, BIGNUM *p2,
  * parameter is sum of number of bits in both.
  */
 
-int BN_X931_generate_Xpq(BIGNUM *Xp, BIGNUM *Xq, int nbits, BN_CTX *ctx)
+int __cdecl BN_X931_generate_Xpq(BIGNUM *Xp, BIGNUM *Xq, int nbits, BN_CTX *ctx)
 {
     BIGNUM *t;
     int i;
@@ -212,7 +212,7 @@ int BN_X931_generate_Xpq(BIGNUM *Xp, BIGNUM *Xq, int nbits, BN_CTX *ctx)
  * previous function and supplied as input.
  */
 
-int BN_X931_generate_prime_ex(BIGNUM *p, BIGNUM *p1, BIGNUM *p2,
+int __cdecl BN_X931_generate_prime_ex(BIGNUM *p, BIGNUM *p1, BIGNUM *p2,
                               BIGNUM *Xp1, BIGNUM *Xp2,
                               const BIGNUM *Xp,
                               const BIGNUM *e, BN_CTX *ctx, BN_GENCB *cb)
diff --git a/crypto/buffer/buf_err.c b/crypto/buffer/buf_err.c
index 7e6e53226a..7980b60764 100644
--- a/crypto/buffer/buf_err.c
+++ b/crypto/buffer/buf_err.c
@@ -26,7 +26,7 @@ static const ERR_STRING_DATA BUF_str_reasons[] = {
 
 #endif
 
-int ERR_load_BUF_strings(void)
+int __cdecl ERR_load_BUF_strings(void)
 {
 #ifndef OPENSSL_NO_ERR
     if (ERR_func_error_string(BUF_str_functs[0].error) == NULL) {
diff --git a/crypto/buffer/buffer.c b/crypto/buffer/buffer.c
index 72258abb9e..d22c318e90 100644
--- a/crypto/buffer/buffer.c
+++ b/crypto/buffer/buffer.c
@@ -18,7 +18,7 @@
  */
 #define LIMIT_BEFORE_EXPANSION 0x5ffffffc
 
-BUF_MEM *BUF_MEM_new_ex(unsigned long flags)
+BUF_MEM * __cdecl BUF_MEM_new_ex(unsigned long flags)
 {
     BUF_MEM *ret;
 
@@ -28,7 +28,7 @@ BUF_MEM *BUF_MEM_new_ex(unsigned long flags)
     return ret;
 }
 
-BUF_MEM *BUF_MEM_new(void)
+BUF_MEM * __cdecl BUF_MEM_new(void)
 {
     BUF_MEM *ret;
 
@@ -40,7 +40,7 @@ BUF_MEM *BUF_MEM_new(void)
     return ret;
 }
 
-void BUF_MEM_free(BUF_MEM *a)
+void __cdecl BUF_MEM_free(BUF_MEM *a)
 {
     if (a == NULL)
         return;
@@ -70,7 +70,7 @@ static char *sec_alloc_realloc(BUF_MEM *str, size_t len)
     return ret;
 }
 
-size_t BUF_MEM_grow(BUF_MEM *str, size_t len)
+size_t __cdecl BUF_MEM_grow(BUF_MEM *str, size_t len)
 {
     char *ret;
     size_t n;
@@ -107,7 +107,7 @@ size_t BUF_MEM_grow(BUF_MEM *str, size_t len)
     return len;
 }
 
-size_t BUF_MEM_grow_clean(BUF_MEM *str, size_t len)
+size_t __cdecl BUF_MEM_grow_clean(BUF_MEM *str, size_t len)
 {
     char *ret;
     size_t n;
@@ -145,7 +145,7 @@ size_t BUF_MEM_grow_clean(BUF_MEM *str, size_t len)
     return len;
 }
 
-void BUF_reverse(unsigned char *out, const unsigned char *in, size_t size)
+void __cdecl BUF_reverse(unsigned char *out, const unsigned char *in, size_t size)
 {
     size_t i;
     if (in) {
diff --git a/crypto/camellia/cmll_cbc.c b/crypto/camellia/cmll_cbc.c
index b19171ded2..fb26318666 100644
--- a/crypto/camellia/cmll_cbc.c
+++ b/crypto/camellia/cmll_cbc.c
@@ -10,7 +10,7 @@
 #include <openssl/camellia.h>
 #include <openssl/modes.h>
 
-void Camellia_cbc_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl Camellia_cbc_encrypt(const unsigned char *in, unsigned char *out,
                           size_t len, const CAMELLIA_KEY *key,
                           unsigned char *ivec, const int enc)
 {
diff --git a/crypto/camellia/cmll_cfb.c b/crypto/camellia/cmll_cfb.c
index 4f49eaded6..cdc2301048 100644
--- a/crypto/camellia/cmll_cfb.c
+++ b/crypto/camellia/cmll_cfb.c
@@ -16,7 +16,7 @@
  * used is contained in *num;
  */
 
-void Camellia_cfb128_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl Camellia_cfb128_encrypt(const unsigned char *in, unsigned char *out,
                              size_t length, const CAMELLIA_KEY *key,
                              unsigned char *ivec, int *num, const int enc)
 {
@@ -26,7 +26,7 @@ void Camellia_cfb128_encrypt(const unsigned char *in, unsigned char *out,
 }
 
 /* N.B. This expects the input to be packed, MS bit first */
-void Camellia_cfb1_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl Camellia_cfb1_encrypt(const unsigned char *in, unsigned char *out,
                            size_t length, const CAMELLIA_KEY *key,
                            unsigned char *ivec, int *num, const int enc)
 {
@@ -34,7 +34,7 @@ void Camellia_cfb1_encrypt(const unsigned char *in, unsigned char *out,
                             (block128_f) Camellia_encrypt);
 }
 
-void Camellia_cfb8_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl Camellia_cfb8_encrypt(const unsigned char *in, unsigned char *out,
                            size_t length, const CAMELLIA_KEY *key,
                            unsigned char *ivec, int *num, const int enc)
 {
diff --git a/crypto/camellia/cmll_ctr.c b/crypto/camellia/cmll_ctr.c
index 161d1e18c1..22d866e810 100644
--- a/crypto/camellia/cmll_ctr.c
+++ b/crypto/camellia/cmll_ctr.c
@@ -10,7 +10,7 @@
 #include <openssl/camellia.h>
 #include <openssl/modes.h>
 
-void Camellia_ctr128_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl Camellia_ctr128_encrypt(const unsigned char *in, unsigned char *out,
                              size_t length, const CAMELLIA_KEY *key,
                              unsigned char ivec[CAMELLIA_BLOCK_SIZE],
                              unsigned char ecount_buf[CAMELLIA_BLOCK_SIZE],
diff --git a/crypto/camellia/cmll_ecb.c b/crypto/camellia/cmll_ecb.c
index d932f1b375..e45cf04902 100644
--- a/crypto/camellia/cmll_ecb.c
+++ b/crypto/camellia/cmll_ecb.c
@@ -10,7 +10,7 @@
 #include <openssl/camellia.h>
 #include "cmll_locl.h"
 
-void Camellia_ecb_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl Camellia_ecb_encrypt(const unsigned char *in, unsigned char *out,
                           const CAMELLIA_KEY *key, const int enc)
 {
     if (CAMELLIA_ENCRYPT == enc)
diff --git a/crypto/camellia/cmll_misc.c b/crypto/camellia/cmll_misc.c
index e5f014b79c..4179aec6b5 100644
--- a/crypto/camellia/cmll_misc.c
+++ b/crypto/camellia/cmll_misc.c
@@ -11,7 +11,7 @@
 #include <openssl/camellia.h>
 #include "cmll_locl.h"
 
-int Camellia_set_key(const unsigned char *userKey, const int bits,
+int __cdecl Camellia_set_key(const unsigned char *userKey, const int bits,
                      CAMELLIA_KEY *key)
 {
     if (!userKey || !key)
@@ -22,13 +22,13 @@ int Camellia_set_key(const unsigned char *userKey, const int bits,
     return 0;
 }
 
-void Camellia_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl Camellia_encrypt(const unsigned char *in, unsigned char *out,
                       const CAMELLIA_KEY *key)
 {
     Camellia_EncryptBlock_Rounds(key->grand_rounds, in, key->u.rd_key, out);
 }
 
-void Camellia_decrypt(const unsigned char *in, unsigned char *out,
+void __cdecl Camellia_decrypt(const unsigned char *in, unsigned char *out,
                       const CAMELLIA_KEY *key)
 {
     Camellia_DecryptBlock_Rounds(key->grand_rounds, in, key->u.rd_key, out);
diff --git a/crypto/camellia/cmll_ofb.c b/crypto/camellia/cmll_ofb.c
index b43c685c75..313e0ad165 100644
--- a/crypto/camellia/cmll_ofb.c
+++ b/crypto/camellia/cmll_ofb.c
@@ -15,7 +15,7 @@
  * The extra state information to record how much of the 128bit block we have
  * used is contained in *num;
  */
-void Camellia_ofb128_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl Camellia_ofb128_encrypt(const unsigned char *in, unsigned char *out,
                              size_t length, const CAMELLIA_KEY *key,
                              unsigned char *ivec, int *num)
 {
diff --git a/crypto/cast/c_cfb64.c b/crypto/cast/c_cfb64.c
index bd7cb2f468..1de8cafef3 100644
--- a/crypto/cast/c_cfb64.c
+++ b/crypto/cast/c_cfb64.c
@@ -16,7 +16,7 @@
  * used is contained in *num;
  */
 
-void CAST_cfb64_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl CAST_cfb64_encrypt(const unsigned char *in, unsigned char *out,
                         long length, const CAST_KEY *schedule,
                         unsigned char *ivec, int *num, int enc)
 {
diff --git a/crypto/cast/c_ecb.c b/crypto/cast/c_ecb.c
index da4179438f..35fca6cac3 100644
--- a/crypto/cast/c_ecb.c
+++ b/crypto/cast/c_ecb.c
@@ -11,7 +11,7 @@
 #include "cast_lcl.h"
 #include <openssl/opensslv.h>
 
-void CAST_ecb_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl CAST_ecb_encrypt(const unsigned char *in, unsigned char *out,
                       const CAST_KEY *ks, int enc)
 {
     CAST_LONG l, d[2];
diff --git a/crypto/cast/c_enc.c b/crypto/cast/c_enc.c
index 700b6d162a..79ef8d1d3a 100644
--- a/crypto/cast/c_enc.c
+++ b/crypto/cast/c_enc.c
@@ -10,7 +10,7 @@
 #include <openssl/cast.h>
 #include "cast_lcl.h"
 
-void CAST_encrypt(CAST_LONG *data, const CAST_KEY *key)
+void __cdecl CAST_encrypt(CAST_LONG *data, const CAST_KEY *key)
 {
     CAST_LONG l, r, t;
     const CAST_LONG *k;
@@ -42,7 +42,7 @@ void CAST_encrypt(CAST_LONG *data, const CAST_KEY *key)
     data[0] = r & 0xffffffffL;
 }
 
-void CAST_decrypt(CAST_LONG *data, const CAST_KEY *key)
+void __cdecl CAST_decrypt(CAST_LONG *data, const CAST_KEY *key)
 {
     CAST_LONG l, r, t;
     const CAST_LONG *k;
@@ -74,7 +74,7 @@ void CAST_decrypt(CAST_LONG *data, const CAST_KEY *key)
     data[0] = r & 0xffffffffL;
 }
 
-void CAST_cbc_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl CAST_cbc_encrypt(const unsigned char *in, unsigned char *out,
                       long length, const CAST_KEY *ks, unsigned char *iv,
                       int enc)
 {
diff --git a/crypto/cast/c_ofb64.c b/crypto/cast/c_ofb64.c
index dffb074762..5633b76659 100644
--- a/crypto/cast/c_ofb64.c
+++ b/crypto/cast/c_ofb64.c
@@ -15,7 +15,7 @@
  * The extra state information to record how much of the 64bit block we have
  * used is contained in *num;
  */
-void CAST_ofb64_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl CAST_ofb64_encrypt(const unsigned char *in, unsigned char *out,
                         long length, const CAST_KEY *schedule,
                         unsigned char *ivec, int *num)
 {
diff --git a/crypto/cast/c_skey.c b/crypto/cast/c_skey.c
index 962d2a60b4..16aa1b085e 100644
--- a/crypto/cast/c_skey.c
+++ b/crypto/cast/c_skey.c
@@ -23,7 +23,7 @@
 #define S6 CAST_S_table6
 #define S7 CAST_S_table7
 
-void CAST_set_key(CAST_KEY *key, int len, const unsigned char *data)
+void __cdecl CAST_set_key(CAST_KEY *key, int len, const unsigned char *data)
 {
     CAST_LONG x[16];
     CAST_LONG z[16];
diff --git a/crypto/cmac/cm_ameth.c b/crypto/cmac/cm_ameth.c
index a58454a089..2cfd80babb 100644
--- a/crypto/cmac/cm_ameth.c
+++ b/crypto/cmac/cm_ameth.c
@@ -18,12 +18,12 @@
  * length and to free up a CMAC key.
  */
 
-static int cmac_size(const EVP_PKEY *pkey)
+static int __cdecl cmac_size(const EVP_PKEY *pkey)
 {
     return EVP_MAX_BLOCK_LENGTH;
 }
 
-static void cmac_key_free(EVP_PKEY *pkey)
+static void __cdecl cmac_key_free(EVP_PKEY *pkey)
 {
     CMAC_CTX *cmctx = EVP_PKEY_get0(pkey);
     CMAC_CTX_free(cmctx);
diff --git a/crypto/cmac/cm_pmeth.c b/crypto/cmac/cm_pmeth.c
index 10748f1488..49196a9cf6 100644
--- a/crypto/cmac/cm_pmeth.c
+++ b/crypto/cmac/cm_pmeth.c
@@ -17,7 +17,7 @@
 
 /* The context structure and "key" is simply a CMAC_CTX */
 
-static int pkey_cmac_init(EVP_PKEY_CTX *ctx)
+static int __cdecl pkey_cmac_init(EVP_PKEY_CTX *ctx)
 {
     ctx->data = CMAC_CTX_new();
     if (ctx->data == NULL)
@@ -26,7 +26,7 @@ static int pkey_cmac_init(EVP_PKEY_CTX *ctx)
     return 1;
 }
 
-static int pkey_cmac_copy(EVP_PKEY_CTX *dst, EVP_PKEY_CTX *src)
+static int __cdecl pkey_cmac_copy(EVP_PKEY_CTX *dst, EVP_PKEY_CTX *src)
 {
     if (!pkey_cmac_init(dst))
         return 0;
@@ -35,12 +35,12 @@ static int pkey_cmac_copy(EVP_PKEY_CTX *dst, EVP_PKEY_CTX *src)
     return 1;
 }
 
-static void pkey_cmac_cleanup(EVP_PKEY_CTX *ctx)
+static void __cdecl pkey_cmac_cleanup(EVP_PKEY_CTX *ctx)
 {
     CMAC_CTX_free(ctx->data);
 }
 
-static int pkey_cmac_keygen(EVP_PKEY_CTX *ctx, EVP_PKEY *pkey)
+static int __cdecl pkey_cmac_keygen(EVP_PKEY_CTX *ctx, EVP_PKEY *pkey)
 {
     CMAC_CTX *cmkey = CMAC_CTX_new();
     CMAC_CTX *cmctx = ctx->data;
@@ -55,27 +55,27 @@ static int pkey_cmac_keygen(EVP_PKEY_CTX *ctx, EVP_PKEY *pkey)
     return 1;
 }
 
-static int int_update(EVP_MD_CTX *ctx, const void *data, size_t count)
+static int __cdecl int_update(EVP_MD_CTX *ctx, const void *data, size_t count)
 {
     if (!CMAC_Update(EVP_MD_CTX_pkey_ctx(ctx)->data, data, count))
         return 0;
     return 1;
 }
 
-static int cmac_signctx_init(EVP_PKEY_CTX *ctx, EVP_MD_CTX *mctx)
+static int __cdecl cmac_signctx_init(EVP_PKEY_CTX *ctx, EVP_MD_CTX *mctx)
 {
     EVP_MD_CTX_set_flags(mctx, EVP_MD_CTX_FLAG_NO_INIT);
     EVP_MD_CTX_set_update_fn(mctx, int_update);
     return 1;
 }
 
-static int cmac_signctx(EVP_PKEY_CTX *ctx, unsigned char *sig, size_t *siglen,
+static int __cdecl cmac_signctx(EVP_PKEY_CTX *ctx, unsigned char *sig, size_t *siglen,
                         EVP_MD_CTX *mctx)
 {
     return CMAC_Final(ctx->data, sig, siglen);
 }
 
-static int pkey_cmac_ctrl(EVP_PKEY_CTX *ctx, int type, int p1, void *p2)
+static int __cdecl pkey_cmac_ctrl(EVP_PKEY_CTX *ctx, int type, int p1, void *p2)
 {
     CMAC_CTX *cmctx = ctx->data;
     switch (type) {
@@ -107,7 +107,7 @@ static int pkey_cmac_ctrl(EVP_PKEY_CTX *ctx, int type, int p1, void *p2)
     return 1;
 }
 
-static int pkey_cmac_ctrl_str(EVP_PKEY_CTX *ctx,
+static int __cdecl pkey_cmac_ctrl_str(EVP_PKEY_CTX *ctx,
                               const char *type, const char *value)
 {
     if (!value) {
diff --git a/crypto/cmac/cmac.c b/crypto/cmac/cmac.c
index 6989c32d06..7bc58bb88d 100644
--- a/crypto/cmac/cmac.c
+++ b/crypto/cmac/cmac.c
@@ -43,7 +43,7 @@ static void make_kn(unsigned char *k1, const unsigned char *l, int bl)
     k1[i] = (c << 1) ^ ((0 - carry) & (bl == 16 ? 0x87 : 0x1b));
 }
 
-CMAC_CTX *CMAC_CTX_new(void)
+CMAC_CTX * __cdecl CMAC_CTX_new(void)
 {
     CMAC_CTX *ctx;
 
@@ -60,7 +60,7 @@ CMAC_CTX *CMAC_CTX_new(void)
     return ctx;
 }
 
-void CMAC_CTX_cleanup(CMAC_CTX *ctx)
+void __cdecl CMAC_CTX_cleanup(CMAC_CTX *ctx)
 {
     EVP_CIPHER_CTX_reset(ctx->cctx);
     OPENSSL_cleanse(ctx->tbl, EVP_MAX_BLOCK_LENGTH);
@@ -70,12 +70,12 @@ void CMAC_CTX_cleanup(CMAC_CTX *ctx)
     ctx->nlast_block = -1;
 }
 
-EVP_CIPHER_CTX *CMAC_CTX_get0_cipher_ctx(CMAC_CTX *ctx)
+EVP_CIPHER_CTX * __cdecl CMAC_CTX_get0_cipher_ctx(CMAC_CTX *ctx)
 {
     return ctx->cctx;
 }
 
-void CMAC_CTX_free(CMAC_CTX *ctx)
+void __cdecl CMAC_CTX_free(CMAC_CTX *ctx)
 {
     if (!ctx)
         return;
@@ -84,7 +84,7 @@ void CMAC_CTX_free(CMAC_CTX *ctx)
     OPENSSL_free(ctx);
 }
 
-int CMAC_CTX_copy(CMAC_CTX *out, const CMAC_CTX *in)
+int __cdecl CMAC_CTX_copy(CMAC_CTX *out, const CMAC_CTX *in)
 {
     int bl;
     if (in->nlast_block == -1)
@@ -100,7 +100,7 @@ int CMAC_CTX_copy(CMAC_CTX *out, const CMAC_CTX *in)
     return 1;
 }
 
-int CMAC_Init(CMAC_CTX *ctx, const void *key, size_t keylen,
+int __cdecl CMAC_Init(CMAC_CTX *ctx, const void *key, size_t keylen,
               const EVP_CIPHER *cipher, ENGINE *impl)
 {
     static const unsigned char zero_iv[EVP_MAX_BLOCK_LENGTH] = { 0 };
@@ -143,7 +143,7 @@ int CMAC_Init(CMAC_CTX *ctx, const void *key, size_t keylen,
     return 1;
 }
 
-int CMAC_Update(CMAC_CTX *ctx, const void *in, size_t dlen)
+int __cdecl CMAC_Update(CMAC_CTX *ctx, const void *in, size_t dlen)
 {
     const unsigned char *data = in;
     size_t bl;
@@ -183,7 +183,7 @@ int CMAC_Update(CMAC_CTX *ctx, const void *in, size_t dlen)
 
 }
 
-int CMAC_Final(CMAC_CTX *ctx, unsigned char *out, size_t *poutlen)
+int __cdecl CMAC_Final(CMAC_CTX *ctx, unsigned char *out, size_t *poutlen)
 {
     int i, bl, lb;
     if (ctx->nlast_block == -1)
@@ -211,7 +211,7 @@ int CMAC_Final(CMAC_CTX *ctx, unsigned char *out, size_t *poutlen)
     return 1;
 }
 
-int CMAC_resume(CMAC_CTX *ctx)
+int __cdecl CMAC_resume(CMAC_CTX *ctx)
 {
     if (ctx->nlast_block == -1)
         return 0;
diff --git a/crypto/cms/cms_asn1.c b/crypto/cms/cms_asn1.c
index 993ea6b219..1d42f1d800 100644
--- a/crypto/cms/cms_asn1.c
+++ b/crypto/cms/cms_asn1.c
@@ -372,7 +372,7 @@ ASN1_SEQUENCE(CMS_SharedInfo) = {
   ASN1_EXP_OPT(CMS_SharedInfo, suppPubInfo, ASN1_OCTET_STRING, 2),
 } static_ASN1_SEQUENCE_END(CMS_SharedInfo)
 
-int CMS_SharedInfo_encode(unsigned char **pder, X509_ALGOR *kekalg,
+int __cdecl CMS_SharedInfo_encode(unsigned char **pder, X509_ALGOR *kekalg,
                           ASN1_OCTET_STRING *ukm, int keylen)
 {
     union {
diff --git a/crypto/cms/cms_att.c b/crypto/cms/cms_att.c
index 0566019753..2354bf1b49 100644
--- a/crypto/cms/cms_att.c
+++ b/crypto/cms/cms_att.c
@@ -66,40 +66,40 @@ static const struct {
 
 /* CMS SignedData Attribute utilities */
 
-int CMS_signed_get_attr_count(const CMS_SignerInfo *si)
+int __cdecl CMS_signed_get_attr_count(const CMS_SignerInfo *si)
 {
     return X509at_get_attr_count(si->signedAttrs);
 }
 
-int CMS_signed_get_attr_by_NID(const CMS_SignerInfo *si, int nid, int lastpos)
+int __cdecl CMS_signed_get_attr_by_NID(const CMS_SignerInfo *si, int nid, int lastpos)
 {
     return X509at_get_attr_by_NID(si->signedAttrs, nid, lastpos);
 }
 
-int CMS_signed_get_attr_by_OBJ(const CMS_SignerInfo *si, const ASN1_OBJECT *obj,
+int __cdecl CMS_signed_get_attr_by_OBJ(const CMS_SignerInfo *si, const ASN1_OBJECT *obj,
                                int lastpos)
 {
     return X509at_get_attr_by_OBJ(si->signedAttrs, obj, lastpos);
 }
 
-X509_ATTRIBUTE *CMS_signed_get_attr(const CMS_SignerInfo *si, int loc)
+X509_ATTRIBUTE * __cdecl CMS_signed_get_attr(const CMS_SignerInfo *si, int loc)
 {
     return X509at_get_attr(si->signedAttrs, loc);
 }
 
-X509_ATTRIBUTE *CMS_signed_delete_attr(CMS_SignerInfo *si, int loc)
+X509_ATTRIBUTE * __cdecl CMS_signed_delete_attr(CMS_SignerInfo *si, int loc)
 {
     return X509at_delete_attr(si->signedAttrs, loc);
 }
 
-int CMS_signed_add1_attr(CMS_SignerInfo *si, X509_ATTRIBUTE *attr)
+int __cdecl CMS_signed_add1_attr(CMS_SignerInfo *si, X509_ATTRIBUTE *attr)
 {
     if (X509at_add1_attr(&si->signedAttrs, attr))
         return 1;
     return 0;
 }
 
-int CMS_signed_add1_attr_by_OBJ(CMS_SignerInfo *si,
+int __cdecl CMS_signed_add1_attr_by_OBJ(CMS_SignerInfo *si,
                                 const ASN1_OBJECT *obj, int type,
                                 const void *bytes, int len)
 {
@@ -108,7 +108,7 @@ int CMS_signed_add1_attr_by_OBJ(CMS_SignerInfo *si,
     return 0;
 }
 
-int CMS_signed_add1_attr_by_NID(CMS_SignerInfo *si,
+int __cdecl CMS_signed_add1_attr_by_NID(CMS_SignerInfo *si,
                                 int nid, int type, const void *bytes, int len)
 {
     if (X509at_add1_attr_by_NID(&si->signedAttrs, nid, type, bytes, len))
@@ -116,7 +116,7 @@ int CMS_signed_add1_attr_by_NID(CMS_SignerInfo *si,
     return 0;
 }
 
-int CMS_signed_add1_attr_by_txt(CMS_SignerInfo *si,
+int __cdecl CMS_signed_add1_attr_by_txt(CMS_SignerInfo *si,
                                 const char *attrname, int type,
                                 const void *bytes, int len)
 {
@@ -125,47 +125,47 @@ int CMS_signed_add1_attr_by_txt(CMS_SignerInfo *si,
     return 0;
 }
 
-void *CMS_signed_get0_data_by_OBJ(CMS_SignerInfo *si, const ASN1_OBJECT *oid,
+void * __cdecl CMS_signed_get0_data_by_OBJ(CMS_SignerInfo *si, const ASN1_OBJECT *oid,
                                   int lastpos, int type)
 {
     return X509at_get0_data_by_OBJ(si->signedAttrs, oid, lastpos, type);
 }
 
-int CMS_unsigned_get_attr_count(const CMS_SignerInfo *si)
+int __cdecl CMS_unsigned_get_attr_count(const CMS_SignerInfo *si)
 {
     return X509at_get_attr_count(si->unsignedAttrs);
 }
 
-int CMS_unsigned_get_attr_by_NID(const CMS_SignerInfo *si, int nid,
+int __cdecl CMS_unsigned_get_attr_by_NID(const CMS_SignerInfo *si, int nid,
                                  int lastpos)
 {
     return X509at_get_attr_by_NID(si->unsignedAttrs, nid, lastpos);
 }
 
-int CMS_unsigned_get_attr_by_OBJ(const CMS_SignerInfo *si,
+int __cdecl CMS_unsigned_get_attr_by_OBJ(const CMS_SignerInfo *si,
                                  const ASN1_OBJECT *obj, int lastpos)
 {
     return X509at_get_attr_by_OBJ(si->unsignedAttrs, obj, lastpos);
 }
 
-X509_ATTRIBUTE *CMS_unsigned_get_attr(const CMS_SignerInfo *si, int loc)
+X509_ATTRIBUTE * __cdecl CMS_unsigned_get_attr(const CMS_SignerInfo *si, int loc)
 {
     return X509at_get_attr(si->unsignedAttrs, loc);
 }
 
-X509_ATTRIBUTE *CMS_unsigned_delete_attr(CMS_SignerInfo *si, int loc)
+X509_ATTRIBUTE * __cdecl CMS_unsigned_delete_attr(CMS_SignerInfo *si, int loc)
 {
     return X509at_delete_attr(si->unsignedAttrs, loc);
 }
 
-int CMS_unsigned_add1_attr(CMS_SignerInfo *si, X509_ATTRIBUTE *attr)
+int __cdecl CMS_unsigned_add1_attr(CMS_SignerInfo *si, X509_ATTRIBUTE *attr)
 {
     if (X509at_add1_attr(&si->unsignedAttrs, attr))
         return 1;
     return 0;
 }
 
-int CMS_unsigned_add1_attr_by_OBJ(CMS_SignerInfo *si,
+int __cdecl CMS_unsigned_add1_attr_by_OBJ(CMS_SignerInfo *si,
                                   const ASN1_OBJECT *obj, int type,
                                   const void *bytes, int len)
 {
@@ -174,7 +174,7 @@ int CMS_unsigned_add1_attr_by_OBJ(CMS_SignerInfo *si,
     return 0;
 }
 
-int CMS_unsigned_add1_attr_by_NID(CMS_SignerInfo *si,
+int __cdecl CMS_unsigned_add1_attr_by_NID(CMS_SignerInfo *si,
                                   int nid, int type,
                                   const void *bytes, int len)
 {
@@ -183,7 +183,7 @@ int CMS_unsigned_add1_attr_by_NID(CMS_SignerInfo *si,
     return 0;
 }
 
-int CMS_unsigned_add1_attr_by_txt(CMS_SignerInfo *si,
+int __cdecl CMS_unsigned_add1_attr_by_txt(CMS_SignerInfo *si,
                                   const char *attrname, int type,
                                   const void *bytes, int len)
 {
@@ -193,7 +193,7 @@ int CMS_unsigned_add1_attr_by_txt(CMS_SignerInfo *si,
     return 0;
 }
 
-void *CMS_unsigned_get0_data_by_OBJ(CMS_SignerInfo *si, ASN1_OBJECT *oid,
+void * __cdecl CMS_unsigned_get0_data_by_OBJ(CMS_SignerInfo *si, ASN1_OBJECT *oid,
                                     int lastpos, int type)
 {
     return X509at_get0_data_by_OBJ(si->unsignedAttrs, oid, lastpos, type);
diff --git a/crypto/cms/cms_enc.c b/crypto/cms/cms_enc.c
index a1719830e8..d1f52954f7 100644
--- a/crypto/cms/cms_enc.c
+++ b/crypto/cms/cms_enc.c
@@ -180,7 +180,7 @@ int cms_EncryptedContent_init(CMS_EncryptedContentInfo *ec,
     return 1;
 }
 
-int CMS_EncryptedData_set1_key(CMS_ContentInfo *cms, const EVP_CIPHER *ciph,
+int __cdecl CMS_EncryptedData_set1_key(CMS_ContentInfo *cms, const EVP_CIPHER *ciph,
                                const unsigned char *key, size_t keylen)
 {
     CMS_EncryptedContentInfo *ec;
diff --git a/crypto/cms/cms_env.c b/crypto/cms/cms_env.c
index 26fb81f79a..b28624c111 100644
--- a/crypto/cms/cms_env.c
+++ b/crypto/cms/cms_env.c
@@ -78,7 +78,7 @@ int cms_env_asn1_ctrl(CMS_RecipientInfo *ri, int cmd)
     return 1;
 }
 
-STACK_OF(CMS_RecipientInfo) *CMS_get0_RecipientInfos(CMS_ContentInfo *cms)
+STACK_OF(CMS_RecipientInfo) * __cdecl CMS_get0_RecipientInfos(CMS_ContentInfo *cms)
 {
     CMS_EnvelopedData *env;
     env = cms_get0_enveloped(cms);
@@ -87,12 +87,12 @@ STACK_OF(CMS_RecipientInfo) *CMS_get0_RecipientInfos(CMS_ContentInfo *cms)
     return env->recipientInfos;
 }
 
-int CMS_RecipientInfo_type(CMS_RecipientInfo *ri)
+int __cdecl CMS_RecipientInfo_type(CMS_RecipientInfo *ri)
 {
     return ri->type;
 }
 
-EVP_PKEY_CTX *CMS_RecipientInfo_get0_pkey_ctx(CMS_RecipientInfo *ri)
+EVP_PKEY_CTX * __cdecl CMS_RecipientInfo_get0_pkey_ctx(CMS_RecipientInfo *ri)
 {
     if (ri->type == CMS_RECIPINFO_TRANS)
         return ri->d.ktri->pctx;
@@ -101,7 +101,7 @@ EVP_PKEY_CTX *CMS_RecipientInfo_get0_pkey_ctx(CMS_RecipientInfo *ri)
     return NULL;
 }
 
-CMS_ContentInfo *CMS_EnvelopedData_create(const EVP_CIPHER *cipher)
+CMS_ContentInfo *__cdecl CMS_EnvelopedData_create(const EVP_CIPHER *cipher)
 {
     CMS_ContentInfo *cms;
     CMS_EnvelopedData *env;
@@ -175,7 +175,7 @@ static int cms_RecipientInfo_ktri_init(CMS_RecipientInfo *ri, X509 *recip,
  * Add a recipient certificate using appropriate type of RecipientInfo
  */
 
-CMS_RecipientInfo *CMS_add1_recipient_cert(CMS_ContentInfo *cms,
+CMS_RecipientInfo * __cdecl CMS_add1_recipient_cert(CMS_ContentInfo *cms,
                                            X509 *recip, unsigned int flags)
 {
     CMS_RecipientInfo *ri = NULL;
@@ -228,7 +228,7 @@ CMS_RecipientInfo *CMS_add1_recipient_cert(CMS_ContentInfo *cms,
 
 }
 
-int CMS_RecipientInfo_ktri_get0_algs(CMS_RecipientInfo *ri,
+int __cdecl CMS_RecipientInfo_ktri_get0_algs(CMS_RecipientInfo *ri,
                                      EVP_PKEY **pk, X509 **recip,
                                      X509_ALGOR **palg)
 {
@@ -250,7 +250,7 @@ int CMS_RecipientInfo_ktri_get0_algs(CMS_RecipientInfo *ri,
     return 1;
 }
 
-int CMS_RecipientInfo_ktri_get0_signer_id(CMS_RecipientInfo *ri,
+int __cdecl CMS_RecipientInfo_ktri_get0_signer_id(CMS_RecipientInfo *ri,
                                           ASN1_OCTET_STRING **keyid,
                                           X509_NAME **issuer,
                                           ASN1_INTEGER **sno)
@@ -266,7 +266,7 @@ int CMS_RecipientInfo_ktri_get0_signer_id(CMS_RecipientInfo *ri,
     return cms_SignerIdentifier_get0_signer_id(ktri->rid, keyid, issuer, sno);
 }
 
-int CMS_RecipientInfo_ktri_cert_cmp(CMS_RecipientInfo *ri, X509 *cert)
+int __cdecl CMS_RecipientInfo_ktri_cert_cmp(CMS_RecipientInfo *ri, X509 *cert)
 {
     if (ri->type != CMS_RECIPINFO_TRANS) {
         CMSerr(CMS_F_CMS_RECIPIENTINFO_KTRI_CERT_CMP,
@@ -276,7 +276,7 @@ int CMS_RecipientInfo_ktri_cert_cmp(CMS_RecipientInfo *ri, X509 *cert)
     return cms_SignerIdentifier_cert_cmp(ri->d.ktri->rid, cert);
 }
 
-int CMS_RecipientInfo_set0_pkey(CMS_RecipientInfo *ri, EVP_PKEY *pkey)
+int __cdecl CMS_RecipientInfo_set0_pkey(CMS_RecipientInfo *ri, EVP_PKEY *pkey)
 {
     if (ri->type != CMS_RECIPINFO_TRANS) {
         CMSerr(CMS_F_CMS_RECIPIENTINFO_SET0_PKEY, CMS_R_NOT_KEY_TRANSPORT);
@@ -439,7 +439,7 @@ static int cms_RecipientInfo_ktri_decrypt(CMS_ContentInfo *cms,
 
 /* Key Encrypted Key (KEK) RecipientInfo routines */
 
-int CMS_RecipientInfo_kekri_id_cmp(CMS_RecipientInfo *ri,
+int __cdecl CMS_RecipientInfo_kekri_id_cmp(CMS_RecipientInfo *ri,
                                    const unsigned char *id, size_t idlen)
 {
     ASN1_OCTET_STRING tmp_os;
@@ -475,7 +475,7 @@ static size_t aes_wrap_keylen(int nid)
     }
 }
 
-CMS_RecipientInfo *CMS_add0_recipient_key(CMS_ContentInfo *cms, int nid,
+CMS_RecipientInfo * __cdecl CMS_add0_recipient_key(CMS_ContentInfo *cms, int nid,
                                           unsigned char *key, size_t keylen,
                                           unsigned char *id, size_t idlen,
                                           ASN1_GENERALIZEDTIME *date,
@@ -575,7 +575,7 @@ CMS_RecipientInfo *CMS_add0_recipient_key(CMS_ContentInfo *cms, int nid,
 
 }
 
-int CMS_RecipientInfo_kekri_get0_id(CMS_RecipientInfo *ri,
+int __cdecl CMS_RecipientInfo_kekri_get0_id(CMS_RecipientInfo *ri,
                                     X509_ALGOR **palg,
                                     ASN1_OCTET_STRING **pid,
                                     ASN1_GENERALIZEDTIME **pdate,
@@ -609,7 +609,7 @@ int CMS_RecipientInfo_kekri_get0_id(CMS_RecipientInfo *ri,
     return 1;
 }
 
-int CMS_RecipientInfo_set0_key(CMS_RecipientInfo *ri,
+int __cdecl CMS_RecipientInfo_set0_key(CMS_RecipientInfo *ri,
                                unsigned char *key, size_t keylen)
 {
     CMS_KEKRecipientInfo *kekri;
@@ -752,7 +752,7 @@ static int cms_RecipientInfo_kekri_decrypt(CMS_ContentInfo *cms,
 
 }
 
-int CMS_RecipientInfo_decrypt(CMS_ContentInfo *cms, CMS_RecipientInfo *ri)
+int __cdecl CMS_RecipientInfo_decrypt(CMS_ContentInfo *cms, CMS_RecipientInfo *ri)
 {
     switch (ri->type) {
     case CMS_RECIPINFO_TRANS:
@@ -771,7 +771,7 @@ int CMS_RecipientInfo_decrypt(CMS_ContentInfo *cms, CMS_RecipientInfo *ri)
     }
 }
 
-int CMS_RecipientInfo_encrypt(CMS_ContentInfo *cms, CMS_RecipientInfo *ri)
+int __cdecl CMS_RecipientInfo_encrypt(CMS_ContentInfo *cms, CMS_RecipientInfo *ri)
 {
     switch (ri->type) {
     case CMS_RECIPINFO_TRANS:
diff --git a/crypto/cms/cms_err.c b/crypto/cms/cms_err.c
index a211f4954c..6812833251 100644
--- a/crypto/cms/cms_err.c
+++ b/crypto/cms/cms_err.c
@@ -285,7 +285,7 @@ static const ERR_STRING_DATA CMS_str_reasons[] = {
 
 #endif
 
-int ERR_load_CMS_strings(void)
+int __cdecl ERR_load_CMS_strings(void)
 {
 #ifndef OPENSSL_NO_ERR
     if (ERR_func_error_string(CMS_str_functs[0].error) == NULL) {
diff --git a/crypto/cms/cms_ess.c b/crypto/cms/cms_ess.c
index 4780231c22..d50a5d94a4 100644
--- a/crypto/cms/cms_ess.c
+++ b/crypto/cms/cms_ess.c
@@ -20,7 +20,7 @@ IMPLEMENT_ASN1_FUNCTIONS(CMS_ReceiptRequest)
 
 /* ESS services: for now just Signed Receipt related */
 
-int CMS_get1_ReceiptRequest(CMS_SignerInfo *si, CMS_ReceiptRequest **prr)
+int __cdecl CMS_get1_ReceiptRequest(CMS_SignerInfo *si, CMS_ReceiptRequest **prr)
 {
     ASN1_STRING *str;
     CMS_ReceiptRequest *rr = NULL;
@@ -43,7 +43,7 @@ int CMS_get1_ReceiptRequest(CMS_SignerInfo *si, CMS_ReceiptRequest **prr)
     return 1;
 }
 
-CMS_ReceiptRequest *CMS_ReceiptRequest_create0(unsigned char *id, int idlen,
+CMS_ReceiptRequest * __cdecl CMS_ReceiptRequest_create0(unsigned char *id, int idlen,
                                                int allorfirst,
                                                STACK_OF(GENERAL_NAMES)
                                                *receiptList, STACK_OF(GENERAL_NAMES)
@@ -85,7 +85,7 @@ CMS_ReceiptRequest *CMS_ReceiptRequest_create0(unsigned char *id, int idlen,
 
 }
 
-int CMS_add1_ReceiptRequest(CMS_SignerInfo *si, CMS_ReceiptRequest *rr)
+int __cdecl CMS_add1_ReceiptRequest(CMS_SignerInfo *si, CMS_ReceiptRequest *rr)
 {
     unsigned char *rrder = NULL;
     int rrderlen, r = 0;
@@ -110,7 +110,7 @@ int CMS_add1_ReceiptRequest(CMS_SignerInfo *si, CMS_ReceiptRequest *rr)
 
 }
 
-void CMS_ReceiptRequest_get0_values(CMS_ReceiptRequest *rr,
+void __cdecl CMS_ReceiptRequest_get0_values(CMS_ReceiptRequest *rr,
                                     ASN1_STRING **pcid,
                                     int *pallorfirst,
                                     STACK_OF(GENERAL_NAMES) **plist,
diff --git a/crypto/cms/cms_io.c b/crypto/cms/cms_io.c
index d18f980a97..9665751f04 100644
--- a/crypto/cms/cms_io.c
+++ b/crypto/cms/cms_io.c
@@ -14,7 +14,7 @@
 #include <openssl/cms.h>
 #include "cms_lcl.h"
 
-int CMS_stream(unsigned char ***boundary, CMS_ContentInfo *cms)
+int __cdecl CMS_stream(unsigned char ***boundary, CMS_ContentInfo *cms)
 {
     ASN1_OCTET_STRING **pos;
     pos = CMS_get0_content(cms);
@@ -32,19 +32,19 @@ int CMS_stream(unsigned char ***boundary, CMS_ContentInfo *cms)
     return 0;
 }
 
-CMS_ContentInfo *d2i_CMS_bio(BIO *bp, CMS_ContentInfo **cms)
+CMS_ContentInfo * __cdecl d2i_CMS_bio(BIO *bp, CMS_ContentInfo **cms)
 {
     return ASN1_item_d2i_bio(ASN1_ITEM_rptr(CMS_ContentInfo), bp, cms);
 }
 
-int i2d_CMS_bio(BIO *bp, CMS_ContentInfo *cms)
+int __cdecl i2d_CMS_bio(BIO *bp, CMS_ContentInfo *cms)
 {
     return ASN1_item_i2d_bio(ASN1_ITEM_rptr(CMS_ContentInfo), bp, cms);
 }
 
 IMPLEMENT_PEM_rw_const(CMS, CMS_ContentInfo, PEM_STRING_CMS, CMS_ContentInfo)
 
-BIO *BIO_new_CMS(BIO *out, CMS_ContentInfo *cms)
+BIO * __cdecl BIO_new_CMS(BIO *out, CMS_ContentInfo *cms)
 {
     return BIO_new_NDEF(out, (ASN1_VALUE *)cms,
                         ASN1_ITEM_rptr(CMS_ContentInfo));
@@ -52,20 +52,20 @@ BIO *BIO_new_CMS(BIO *out, CMS_ContentInfo *cms)
 
 /* CMS wrappers round generalised stream and MIME routines */
 
-int i2d_CMS_bio_stream(BIO *out, CMS_ContentInfo *cms, BIO *in, int flags)
+int __cdecl i2d_CMS_bio_stream(BIO *out, CMS_ContentInfo *cms, BIO *in, int flags)
 {
     return i2d_ASN1_bio_stream(out, (ASN1_VALUE *)cms, in, flags,
                                ASN1_ITEM_rptr(CMS_ContentInfo));
 }
 
-int PEM_write_bio_CMS_stream(BIO *out, CMS_ContentInfo *cms, BIO *in,
+int __cdecl PEM_write_bio_CMS_stream(BIO *out, CMS_ContentInfo *cms, BIO *in,
                              int flags)
 {
     return PEM_write_bio_ASN1_stream(out, (ASN1_VALUE *)cms, in, flags,
                                      "CMS", ASN1_ITEM_rptr(CMS_ContentInfo));
 }
 
-int SMIME_write_CMS(BIO *bio, CMS_ContentInfo *cms, BIO *data, int flags)
+int __cdecl SMIME_write_CMS(BIO *bio, CMS_ContentInfo *cms, BIO *data, int flags)
 {
     STACK_OF(X509_ALGOR) *mdalgs;
     int ctype_nid = OBJ_obj2nid(cms->contentType);
@@ -80,7 +80,7 @@ int SMIME_write_CMS(BIO *bio, CMS_ContentInfo *cms, BIO *data, int flags)
                             ASN1_ITEM_rptr(CMS_ContentInfo));
 }
 
-CMS_ContentInfo *SMIME_read_CMS(BIO *bio, BIO **bcont)
+CMS_ContentInfo * __cdecl SMIME_read_CMS(BIO *bio, BIO **bcont)
 {
     return (CMS_ContentInfo *)SMIME_read_ASN1(bio, bcont,
                                               ASN1_ITEM_rptr
diff --git a/crypto/cms/cms_kari.c b/crypto/cms/cms_kari.c
index 5e83814d0f..f864155d24 100644
--- a/crypto/cms/cms_kari.c
+++ b/crypto/cms/cms_kari.c
@@ -19,7 +19,7 @@
 
 /* Key Agreement Recipient Info (KARI) routines */
 
-int CMS_RecipientInfo_kari_get0_alg(CMS_RecipientInfo *ri,
+int __cdecl CMS_RecipientInfo_kari_get0_alg(CMS_RecipientInfo *ri,
                                     X509_ALGOR **palg,
                                     ASN1_OCTET_STRING **pukm)
 {
@@ -38,7 +38,7 @@ int CMS_RecipientInfo_kari_get0_alg(CMS_RecipientInfo *ri,
 /* Retrieve recipient encrypted keys from a kari */
 
 STACK_OF(CMS_RecipientEncryptedKey)
-*CMS_RecipientInfo_kari_get0_reks(CMS_RecipientInfo *ri)
+* __cdecl CMS_RecipientInfo_kari_get0_reks(CMS_RecipientInfo *ri)
 {
     if (ri->type != CMS_RECIPINFO_AGREE) {
         CMSerr(CMS_F_CMS_RECIPIENTINFO_KARI_GET0_REKS,
@@ -48,7 +48,7 @@ STACK_OF(CMS_RecipientEncryptedKey)
     return ri->d.kari->recipientEncryptedKeys;
 }
 
-int CMS_RecipientInfo_kari_get0_orig_id(CMS_RecipientInfo *ri,
+int __cdecl CMS_RecipientInfo_kari_get0_orig_id(CMS_RecipientInfo *ri,
                                         X509_ALGOR **pubalg,
                                         ASN1_BIT_STRING **pubkey,
                                         ASN1_OCTET_STRING **keyid,
@@ -90,7 +90,7 @@ int CMS_RecipientInfo_kari_get0_orig_id(CMS_RecipientInfo *ri,
     return 1;
 }
 
-int CMS_RecipientInfo_kari_orig_id_cmp(CMS_RecipientInfo *ri, X509 *cert)
+int __cdecl CMS_RecipientInfo_kari_orig_id_cmp(CMS_RecipientInfo *ri, X509 *cert)
 {
     CMS_OriginatorIdentifierOrKey *oik;
     if (ri->type != CMS_RECIPINFO_AGREE) {
@@ -106,7 +106,7 @@ int CMS_RecipientInfo_kari_orig_id_cmp(CMS_RecipientInfo *ri, X509 *cert)
     return -1;
 }
 
-int CMS_RecipientEncryptedKey_get0_id(CMS_RecipientEncryptedKey *rek,
+int __cdecl CMS_RecipientEncryptedKey_get0_id(CMS_RecipientEncryptedKey *rek,
                                       ASN1_OCTET_STRING **keyid,
                                       ASN1_GENERALIZEDTIME **tm,
                                       CMS_OtherKeyAttribute **other,
@@ -140,7 +140,7 @@ int CMS_RecipientEncryptedKey_get0_id(CMS_RecipientEncryptedKey *rek,
     return 1;
 }
 
-int CMS_RecipientEncryptedKey_cert_cmp(CMS_RecipientEncryptedKey *rek,
+int __cdecl CMS_RecipientEncryptedKey_cert_cmp(CMS_RecipientEncryptedKey *rek,
                                        X509 *cert)
 {
     CMS_KeyAgreeRecipientIdentifier *rid = rek->rid;
@@ -152,7 +152,7 @@ int CMS_RecipientEncryptedKey_cert_cmp(CMS_RecipientEncryptedKey *rek,
         return -1;
 }
 
-int CMS_RecipientInfo_kari_set0_pkey(CMS_RecipientInfo *ri, EVP_PKEY *pk)
+int __cdecl CMS_RecipientInfo_kari_set0_pkey(CMS_RecipientInfo *ri, EVP_PKEY *pk)
 {
     EVP_PKEY_CTX *pctx;
     CMS_KeyAgreeRecipientInfo *kari = ri->d.kari;
@@ -171,7 +171,7 @@ int CMS_RecipientInfo_kari_set0_pkey(CMS_RecipientInfo *ri, EVP_PKEY *pk)
     return 0;
 }
 
-EVP_CIPHER_CTX *CMS_RecipientInfo_kari_get0_ctx(CMS_RecipientInfo *ri)
+EVP_CIPHER_CTX * __cdecl CMS_RecipientInfo_kari_get0_ctx(CMS_RecipientInfo *ri)
 {
     if (ri->type == CMS_RECIPINFO_AGREE)
         return ri->d.kari->ctx;
@@ -225,7 +225,7 @@ static int cms_kek_cipher(unsigned char **pout, size_t *poutlen,
     return rv;
 }
 
-int CMS_RecipientInfo_kari_decrypt(CMS_ContentInfo *cms,
+int __cdecl CMS_RecipientInfo_kari_decrypt(CMS_ContentInfo *cms,
                                    CMS_RecipientInfo *ri,
                                    CMS_RecipientEncryptedKey *rek)
 {
diff --git a/crypto/cms/cms_lib.c b/crypto/cms/cms_lib.c
index c2cac26010..fd8ccac1b8 100644
--- a/crypto/cms/cms_lib.c
+++ b/crypto/cms/cms_lib.c
@@ -19,7 +19,7 @@
 IMPLEMENT_ASN1_FUNCTIONS(CMS_ContentInfo)
 IMPLEMENT_ASN1_PRINT_FUNCTION(CMS_ContentInfo)
 
-const ASN1_OBJECT *CMS_get0_type(const CMS_ContentInfo *cms)
+const ASN1_OBJECT * __cdecl CMS_get0_type(const CMS_ContentInfo *cms)
 {
     return cms->contentType;
 }
@@ -53,7 +53,7 @@ BIO *cms_content_bio(CMS_ContentInfo *cms)
     return BIO_new_mem_buf((*pos)->data, (*pos)->length);
 }
 
-BIO *CMS_dataInit(CMS_ContentInfo *cms, BIO *icont)
+BIO * __cdecl CMS_dataInit(CMS_ContentInfo *cms, BIO *icont)
 {
     BIO *cmsbio, *cont;
     if (icont)
@@ -104,7 +104,7 @@ BIO *CMS_dataInit(CMS_ContentInfo *cms, BIO *icont)
 
 }
 
-int CMS_dataFinal(CMS_ContentInfo *cms, BIO *cmsbio)
+int __cdecl CMS_dataFinal(CMS_ContentInfo *cms, BIO *cmsbio)
 {
     ASN1_OCTET_STRING **pos = CMS_get0_content(cms);
     if (!pos)
@@ -153,7 +153,7 @@ int CMS_dataFinal(CMS_ContentInfo *cms, BIO *cmsbio)
  * or set later.
  */
 
-ASN1_OCTET_STRING **CMS_get0_content(CMS_ContentInfo *cms)
+ASN1_OCTET_STRING ** __cdecl CMS_get0_content(CMS_ContentInfo *cms)
 {
     switch (OBJ_obj2nid(cms->contentType)) {
 
@@ -221,7 +221,7 @@ static ASN1_OBJECT **cms_get0_econtent_type(CMS_ContentInfo *cms)
     }
 }
 
-const ASN1_OBJECT *CMS_get0_eContentType(CMS_ContentInfo *cms)
+const ASN1_OBJECT * __cdecl CMS_get0_eContentType(CMS_ContentInfo *cms)
 {
     ASN1_OBJECT **petype;
     petype = cms_get0_econtent_type(cms);
@@ -230,7 +230,7 @@ const ASN1_OBJECT *CMS_get0_eContentType(CMS_ContentInfo *cms)
     return NULL;
 }
 
-int CMS_set1_eContentType(CMS_ContentInfo *cms, const ASN1_OBJECT *oid)
+int __cdecl CMS_set1_eContentType(CMS_ContentInfo *cms, const ASN1_OBJECT *oid)
 {
     ASN1_OBJECT **petype, *etype;
     petype = cms_get0_econtent_type(cms);
@@ -246,7 +246,7 @@ int CMS_set1_eContentType(CMS_ContentInfo *cms, const ASN1_OBJECT *oid)
     return 1;
 }
 
-int CMS_is_detached(CMS_ContentInfo *cms)
+int __cdecl CMS_is_detached(CMS_ContentInfo *cms)
 {
     ASN1_OCTET_STRING **pos;
     pos = CMS_get0_content(cms);
@@ -257,7 +257,7 @@ int CMS_is_detached(CMS_ContentInfo *cms)
     return 1;
 }
 
-int CMS_set_detached(CMS_ContentInfo *cms, int detached)
+int __cdecl CMS_set_detached(CMS_ContentInfo *cms, int detached)
 {
     ASN1_OCTET_STRING **pos;
     pos = CMS_get0_content(cms);
@@ -357,7 +357,7 @@ static STACK_OF(CMS_CertificateChoices)
     }
 }
 
-CMS_CertificateChoices *CMS_add0_CertificateChoices(CMS_ContentInfo *cms)
+CMS_CertificateChoices * __cdecl CMS_add0_CertificateChoices(CMS_ContentInfo *cms)
 {
     STACK_OF(CMS_CertificateChoices) **pcerts;
     CMS_CertificateChoices *cch;
@@ -378,7 +378,7 @@ CMS_CertificateChoices *CMS_add0_CertificateChoices(CMS_ContentInfo *cms)
     return cch;
 }
 
-int CMS_add0_cert(CMS_ContentInfo *cms, X509 *cert)
+int __cdecl CMS_add0_cert(CMS_ContentInfo *cms, X509 *cert)
 {
     CMS_CertificateChoices *cch;
     STACK_OF(CMS_CertificateChoices) **pcerts;
@@ -404,7 +404,7 @@ int CMS_add0_cert(CMS_ContentInfo *cms, X509 *cert)
     return 1;
 }
 
-int CMS_add1_cert(CMS_ContentInfo *cms, X509 *cert)
+int __cdecl CMS_add1_cert(CMS_ContentInfo *cms, X509 *cert)
 {
     int r;
     r = CMS_add0_cert(cms, cert);
@@ -434,7 +434,7 @@ static STACK_OF(CMS_RevocationInfoChoice)
     }
 }
 
-CMS_RevocationInfoChoice *CMS_add0_RevocationInfoChoice(CMS_ContentInfo *cms)
+CMS_RevocationInfoChoice * __cdecl CMS_add0_RevocationInfoChoice(CMS_ContentInfo *cms)
 {
     STACK_OF(CMS_RevocationInfoChoice) **pcrls;
     CMS_RevocationInfoChoice *rch;
@@ -455,7 +455,7 @@ CMS_RevocationInfoChoice *CMS_add0_RevocationInfoChoice(CMS_ContentInfo *cms)
     return rch;
 }
 
-int CMS_add0_crl(CMS_ContentInfo *cms, X509_CRL *crl)
+int __cdecl CMS_add0_crl(CMS_ContentInfo *cms, X509_CRL *crl)
 {
     CMS_RevocationInfoChoice *rch;
     rch = CMS_add0_RevocationInfoChoice(cms);
@@ -466,7 +466,7 @@ int CMS_add0_crl(CMS_ContentInfo *cms, X509_CRL *crl)
     return 1;
 }
 
-int CMS_add1_crl(CMS_ContentInfo *cms, X509_CRL *crl)
+int __cdecl CMS_add1_crl(CMS_ContentInfo *cms, X509_CRL *crl)
 {
     int r;
     r = CMS_add0_crl(cms, crl);
@@ -475,7 +475,7 @@ int CMS_add1_crl(CMS_ContentInfo *cms, X509_CRL *crl)
     return r;
 }
 
-STACK_OF(X509) *CMS_get1_certs(CMS_ContentInfo *cms)
+STACK_OF(X509) * __cdecl CMS_get1_certs(CMS_ContentInfo *cms)
 {
     STACK_OF(X509) *certs = NULL;
     CMS_CertificateChoices *cch;
@@ -503,7 +503,7 @@ STACK_OF(X509) *CMS_get1_certs(CMS_ContentInfo *cms)
 
 }
 
-STACK_OF(X509_CRL) *CMS_get1_crls(CMS_ContentInfo *cms)
+STACK_OF(X509_CRL) * __cdecl CMS_get1_crls(CMS_ContentInfo *cms)
 {
     STACK_OF(X509_CRL) *crls = NULL;
     STACK_OF(CMS_RevocationInfoChoice) **pcrls;
diff --git a/crypto/cms/cms_pwri.c b/crypto/cms/cms_pwri.c
index 26e3bdcf9e..d23f4e9fd3 100644
--- a/crypto/cms/cms_pwri.c
+++ b/crypto/cms/cms_pwri.c
@@ -18,7 +18,7 @@
 #include "cms_lcl.h"
 #include "internal/asn1_int.h"
 
-int CMS_RecipientInfo_set0_password(CMS_RecipientInfo *ri,
+int __cdecl CMS_RecipientInfo_set0_password(CMS_RecipientInfo *ri,
                                     unsigned char *pass, ossl_ssize_t passlen)
 {
     CMS_PasswordRecipientInfo *pwri;
@@ -35,7 +35,7 @@ int CMS_RecipientInfo_set0_password(CMS_RecipientInfo *ri,
     return 1;
 }
 
-CMS_RecipientInfo *CMS_add0_recipient_password(CMS_ContentInfo *cms,
+CMS_RecipientInfo * __cdecl CMS_add0_recipient_password(CMS_ContentInfo *cms,
                                                int iter, int wrap_nid,
                                                int pbe_nid,
                                                unsigned char *pass,
diff --git a/crypto/cms/cms_sd.c b/crypto/cms/cms_sd.c
index 3841513f8b..ad291f9b50 100644
--- a/crypto/cms/cms_sd.c
+++ b/crypto/cms/cms_sd.c
@@ -50,7 +50,7 @@ static CMS_SignedData *cms_signed_data_init(CMS_ContentInfo *cms)
 
 /* Just initialise SignedData e.g. for certs only structure */
 
-int CMS_SignedData_init(CMS_ContentInfo *cms)
+int __cdecl CMS_SignedData_init(CMS_ContentInfo *cms)
 {
     if (cms_signed_data_init(cms))
         return 1;
@@ -238,7 +238,7 @@ static int cms_sd_asn1_ctrl(CMS_SignerInfo *si, int cmd)
     return 1;
 }
 
-CMS_SignerInfo *CMS_add1_signer(CMS_ContentInfo *cms,
+CMS_SignerInfo * __cdecl CMS_add1_signer(CMS_ContentInfo *cms,
                                 X509 *signer, EVP_PKEY *pk, const EVP_MD *md,
                                 unsigned int flags)
 {
@@ -422,17 +422,17 @@ static int cms_add1_signingTime(CMS_SignerInfo *si, ASN1_TIME *t)
 
 }
 
-EVP_PKEY_CTX *CMS_SignerInfo_get0_pkey_ctx(CMS_SignerInfo *si)
+EVP_PKEY_CTX * __cdecl CMS_SignerInfo_get0_pkey_ctx(CMS_SignerInfo *si)
 {
     return si->pctx;
 }
 
-EVP_MD_CTX *CMS_SignerInfo_get0_md_ctx(CMS_SignerInfo *si)
+EVP_MD_CTX * __cdecl CMS_SignerInfo_get0_md_ctx(CMS_SignerInfo *si)
 {
     return si->mctx;
 }
 
-STACK_OF(CMS_SignerInfo) *CMS_get0_SignerInfos(CMS_ContentInfo *cms)
+STACK_OF(CMS_SignerInfo) * __cdecl CMS_get0_SignerInfos(CMS_ContentInfo *cms)
 {
     CMS_SignedData *sd;
     sd = cms_get0_signed(cms);
@@ -441,7 +441,7 @@ STACK_OF(CMS_SignerInfo) *CMS_get0_SignerInfos(CMS_ContentInfo *cms)
     return sd->signerInfos;
 }
 
-STACK_OF(X509) *CMS_get0_signers(CMS_ContentInfo *cms)
+STACK_OF(X509) * __cdecl CMS_get0_signers(CMS_ContentInfo *cms)
 {
     STACK_OF(X509) *signers = NULL;
     STACK_OF(CMS_SignerInfo) *sinfos;
@@ -465,7 +465,7 @@ STACK_OF(X509) *CMS_get0_signers(CMS_ContentInfo *cms)
     return signers;
 }
 
-void CMS_SignerInfo_set1_signer_cert(CMS_SignerInfo *si, X509 *signer)
+void __cdecl CMS_SignerInfo_set1_signer_cert(CMS_SignerInfo *si, X509 *signer)
 {
     if (signer) {
         X509_up_ref(signer);
@@ -476,19 +476,19 @@ void CMS_SignerInfo_set1_signer_cert(CMS_SignerInfo *si, X509 *signer)
     si->signer = signer;
 }
 
-int CMS_SignerInfo_get0_signer_id(CMS_SignerInfo *si,
+int __cdecl CMS_SignerInfo_get0_signer_id(CMS_SignerInfo *si,
                                   ASN1_OCTET_STRING **keyid,
                                   X509_NAME **issuer, ASN1_INTEGER **sno)
 {
     return cms_SignerIdentifier_get0_signer_id(si->sid, keyid, issuer, sno);
 }
 
-int CMS_SignerInfo_cert_cmp(CMS_SignerInfo *si, X509 *cert)
+int __cdecl CMS_SignerInfo_cert_cmp(CMS_SignerInfo *si, X509 *cert)
 {
     return cms_SignerIdentifier_cert_cmp(si->sid, cert);
 }
 
-int CMS_set1_signers_certs(CMS_ContentInfo *cms, STACK_OF(X509) *scerts,
+int __cdecl CMS_set1_signers_certs(CMS_ContentInfo *cms, STACK_OF(X509) *scerts,
                            unsigned int flags)
 {
     CMS_SignedData *sd;
@@ -534,7 +534,7 @@ int CMS_set1_signers_certs(CMS_ContentInfo *cms, STACK_OF(X509) *scerts,
     return ret;
 }
 
-void CMS_SignerInfo_get0_algs(CMS_SignerInfo *si, EVP_PKEY **pk,
+void __cdecl CMS_SignerInfo_get0_algs(CMS_SignerInfo *si, EVP_PKEY **pk,
                               X509 **signer, X509_ALGOR **pdig,
                               X509_ALGOR **psig)
 {
@@ -548,7 +548,7 @@ void CMS_SignerInfo_get0_algs(CMS_SignerInfo *si, EVP_PKEY **pk,
         *psig = si->signatureAlgorithm;
 }
 
-ASN1_OCTET_STRING *CMS_SignerInfo_get0_signature(CMS_SignerInfo *si)
+ASN1_OCTET_STRING * __cdecl CMS_SignerInfo_get0_signature(CMS_SignerInfo *si)
 {
     return si->signature;
 }
@@ -653,7 +653,7 @@ int cms_SignedData_final(CMS_ContentInfo *cms, BIO *chain)
     return 1;
 }
 
-int CMS_SignerInfo_sign(CMS_SignerInfo *si)
+int __cdecl CMS_SignerInfo_sign(CMS_SignerInfo *si)
 {
     EVP_MD_CTX *mctx = si->mctx;
     EVP_PKEY_CTX *pctx = NULL;
@@ -722,7 +722,7 @@ int CMS_SignerInfo_sign(CMS_SignerInfo *si)
     return 0;
 }
 
-int CMS_SignerInfo_verify(CMS_SignerInfo *si)
+int __cdecl CMS_SignerInfo_verify(CMS_SignerInfo *si)
 {
     EVP_MD_CTX *mctx = NULL;
     unsigned char *abuf = NULL;
@@ -800,7 +800,7 @@ BIO *cms_SignedData_init_bio(CMS_ContentInfo *cms)
     return NULL;
 }
 
-int CMS_SignerInfo_verify_content(CMS_SignerInfo *si, BIO *chain)
+int __cdecl CMS_SignerInfo_verify_content(CMS_SignerInfo *si, BIO *chain)
 {
     ASN1_OCTET_STRING *os = NULL;
     EVP_MD_CTX *mctx = EVP_MD_CTX_new();
@@ -877,7 +877,7 @@ int CMS_SignerInfo_verify_content(CMS_SignerInfo *si, BIO *chain)
 
 }
 
-int CMS_add_smimecap(CMS_SignerInfo *si, STACK_OF(X509_ALGOR) *algs)
+int __cdecl CMS_add_smimecap(CMS_SignerInfo *si, STACK_OF(X509_ALGOR) *algs)
 {
     unsigned char *smder = NULL;
     int smderlen, r;
@@ -890,7 +890,7 @@ int CMS_add_smimecap(CMS_SignerInfo *si, STACK_OF(X509_ALGOR) *algs)
     return r;
 }
 
-int CMS_add_simple_smimecap(STACK_OF(X509_ALGOR) **algs,
+int __cdecl CMS_add_simple_smimecap(STACK_OF(X509_ALGOR) **algs,
                             int algnid, int keysize)
 {
     X509_ALGOR *alg;
@@ -933,7 +933,7 @@ static int cms_add_digest_smcap(STACK_OF(X509_ALGOR) **sk, int nid, int arg)
     return 1;
 }
 
-int CMS_add_standard_smimecap(STACK_OF(X509_ALGOR) **smcap)
+int __cdecl CMS_add_standard_smimecap(STACK_OF(X509_ALGOR) **smcap)
 {
     if (!cms_add_cipher_smcap(smcap, NID_aes_256_cbc, -1)
         || !cms_add_digest_smcap(smcap, NID_id_GostR3411_2012_256, -1)
diff --git a/crypto/cms/cms_smime.c b/crypto/cms/cms_smime.c
index 10815639f8..319c96e015 100644
--- a/crypto/cms/cms_smime.c
+++ b/crypto/cms/cms_smime.c
@@ -99,7 +99,7 @@ static void do_free_upto(BIO *f, BIO *upto)
         BIO_free_all(f);
 }
 
-int CMS_data(CMS_ContentInfo *cms, BIO *out, unsigned int flags)
+int __cdecl CMS_data(CMS_ContentInfo *cms, BIO *out, unsigned int flags)
 {
     BIO *cont;
     int r;
@@ -115,7 +115,7 @@ int CMS_data(CMS_ContentInfo *cms, BIO *out, unsigned int flags)
     return r;
 }
 
-CMS_ContentInfo *CMS_data_create(BIO *in, unsigned int flags)
+CMS_ContentInfo * __cdecl CMS_data_create(BIO *in, unsigned int flags)
 {
     CMS_ContentInfo *cms;
     cms = cms_Data_create();
@@ -130,7 +130,7 @@ CMS_ContentInfo *CMS_data_create(BIO *in, unsigned int flags)
     return NULL;
 }
 
-int CMS_digest_verify(CMS_ContentInfo *cms, BIO *dcont, BIO *out,
+int __cdecl CMS_digest_verify(CMS_ContentInfo *cms, BIO *dcont, BIO *out,
                       unsigned int flags)
 {
     BIO *cont;
@@ -153,7 +153,7 @@ int CMS_digest_verify(CMS_ContentInfo *cms, BIO *dcont, BIO *out,
     return r;
 }
 
-CMS_ContentInfo *CMS_digest_create(BIO *in, const EVP_MD *md,
+CMS_ContentInfo * __cdecl CMS_digest_create(BIO *in, const EVP_MD *md,
                                    unsigned int flags)
 {
     CMS_ContentInfo *cms;
@@ -173,7 +173,7 @@ CMS_ContentInfo *CMS_digest_create(BIO *in, const EVP_MD *md,
     return NULL;
 }
 
-int CMS_EncryptedData_decrypt(CMS_ContentInfo *cms,
+int __cdecl CMS_EncryptedData_decrypt(CMS_ContentInfo *cms,
                               const unsigned char *key, size_t keylen,
                               BIO *dcont, BIO *out, unsigned int flags)
 {
@@ -198,7 +198,7 @@ int CMS_EncryptedData_decrypt(CMS_ContentInfo *cms,
     return r;
 }
 
-CMS_ContentInfo *CMS_EncryptedData_encrypt(BIO *in, const EVP_CIPHER *cipher,
+CMS_ContentInfo * __cdecl CMS_EncryptedData_encrypt(BIO *in, const EVP_CIPHER *cipher,
                                            const unsigned char *key,
                                            size_t keylen, unsigned int flags)
 {
@@ -262,7 +262,7 @@ static int cms_signerinfo_verify_cert(CMS_SignerInfo *si,
 
 }
 
-int CMS_verify(CMS_ContentInfo *cms, STACK_OF(X509) *certs,
+int __cdecl CMS_verify(CMS_ContentInfo *cms, STACK_OF(X509) *certs,
                X509_STORE *store, BIO *dcont, BIO *out, unsigned int flags)
 {
     CMS_SignerInfo *si;
@@ -420,7 +420,7 @@ int CMS_verify(CMS_ContentInfo *cms, STACK_OF(X509) *certs,
     return ret;
 }
 
-int CMS_verify_receipt(CMS_ContentInfo *rcms, CMS_ContentInfo *ocms,
+int __cdecl CMS_verify_receipt(CMS_ContentInfo *rcms, CMS_ContentInfo *ocms,
                        STACK_OF(X509) *certs,
                        X509_STORE *store, unsigned int flags)
 {
@@ -432,7 +432,7 @@ int CMS_verify_receipt(CMS_ContentInfo *rcms, CMS_ContentInfo *ocms,
     return cms_Receipt_verify(rcms, ocms);
 }
 
-CMS_ContentInfo *CMS_sign(X509 *signcert, EVP_PKEY *pkey,
+CMS_ContentInfo * __cdecl CMS_sign(X509 *signcert, EVP_PKEY *pkey,
                           STACK_OF(X509) *certs, BIO *data,
                           unsigned int flags)
 {
@@ -475,7 +475,7 @@ CMS_ContentInfo *CMS_sign(X509 *signcert, EVP_PKEY *pkey,
     return NULL;
 }
 
-CMS_ContentInfo *CMS_sign_receipt(CMS_SignerInfo *si,
+CMS_ContentInfo * __cdecl CMS_sign_receipt(CMS_SignerInfo *si,
                                   X509 *signcert, EVP_PKEY *pkey,
                                   STACK_OF(X509) *certs, unsigned int flags)
 {
@@ -543,7 +543,7 @@ CMS_ContentInfo *CMS_sign_receipt(CMS_SignerInfo *si,
 
 }
 
-CMS_ContentInfo *CMS_encrypt(STACK_OF(X509) *certs, BIO *data,
+CMS_ContentInfo * __cdecl CMS_encrypt(STACK_OF(X509) *certs, BIO *data,
                              const EVP_CIPHER *cipher, unsigned int flags)
 {
     CMS_ContentInfo *cms;
@@ -598,7 +598,7 @@ static int cms_kari_set1_pkey(CMS_ContentInfo *cms, CMS_RecipientInfo *ri,
     return 0;
 }
 
-int CMS_decrypt_set1_pkey(CMS_ContentInfo *cms, EVP_PKEY *pk, X509 *cert)
+int __cdecl CMS_decrypt_set1_pkey(CMS_ContentInfo *cms, EVP_PKEY *pk, X509 *cert)
 {
     STACK_OF(CMS_RecipientInfo) *ris;
     CMS_RecipientInfo *ri;
@@ -669,7 +669,7 @@ int CMS_decrypt_set1_pkey(CMS_ContentInfo *cms, EVP_PKEY *pk, X509 *cert)
 
 }
 
-int CMS_decrypt_set1_key(CMS_ContentInfo *cms,
+int __cdecl CMS_decrypt_set1_key(CMS_ContentInfo *cms,
                          unsigned char *key, size_t keylen,
                          const unsigned char *id, size_t idlen)
 {
@@ -705,7 +705,7 @@ int CMS_decrypt_set1_key(CMS_ContentInfo *cms,
 
 }
 
-int CMS_decrypt_set1_password(CMS_ContentInfo *cms,
+int __cdecl CMS_decrypt_set1_password(CMS_ContentInfo *cms,
                               unsigned char *pass, ossl_ssize_t passlen)
 {
     STACK_OF(CMS_RecipientInfo) *ris;
@@ -728,7 +728,7 @@ int CMS_decrypt_set1_password(CMS_ContentInfo *cms,
 
 }
 
-int CMS_decrypt(CMS_ContentInfo *cms, EVP_PKEY *pk, X509 *cert,
+int __cdecl CMS_decrypt(CMS_ContentInfo *cms, EVP_PKEY *pk, X509 *cert,
                 BIO *dcont, BIO *out, unsigned int flags)
 {
     int r;
@@ -759,7 +759,7 @@ int CMS_decrypt(CMS_ContentInfo *cms, EVP_PKEY *pk, X509 *cert,
     return r;
 }
 
-int CMS_final(CMS_ContentInfo *cms, BIO *data, BIO *dcont, unsigned int flags)
+int __cdecl CMS_final(CMS_ContentInfo *cms, BIO *data, BIO *dcont, unsigned int flags)
 {
     BIO *cmsbio;
     int ret = 0;
@@ -789,7 +789,7 @@ int CMS_final(CMS_ContentInfo *cms, BIO *data, BIO *dcont, unsigned int flags)
 
 #ifdef ZLIB
 
-int CMS_uncompress(CMS_ContentInfo *cms, BIO *dcont, BIO *out,
+int __cdecl CMS_uncompress(CMS_ContentInfo *cms, BIO *dcont, BIO *out,
                    unsigned int flags)
 {
     BIO *cont;
@@ -810,7 +810,7 @@ int CMS_uncompress(CMS_ContentInfo *cms, BIO *dcont, BIO *out,
     return r;
 }
 
-CMS_ContentInfo *CMS_compress(BIO *in, int comp_nid, unsigned int flags)
+CMS_ContentInfo * __cdecl CMS_compress(BIO *in, int comp_nid, unsigned int flags)
 {
     CMS_ContentInfo *cms;
     if (comp_nid <= 0)
@@ -831,14 +831,14 @@ CMS_ContentInfo *CMS_compress(BIO *in, int comp_nid, unsigned int flags)
 
 #else
 
-int CMS_uncompress(CMS_ContentInfo *cms, BIO *dcont, BIO *out,
+int __cdecl CMS_uncompress(CMS_ContentInfo *cms, BIO *dcont, BIO *out,
                    unsigned int flags)
 {
     CMSerr(CMS_F_CMS_UNCOMPRESS, CMS_R_UNSUPPORTED_COMPRESSION_ALGORITHM);
     return 0;
 }
 
-CMS_ContentInfo *CMS_compress(BIO *in, int comp_nid, unsigned int flags)
+CMS_ContentInfo * __cdecl CMS_compress(BIO *in, int comp_nid, unsigned int flags)
 {
     CMSerr(CMS_F_CMS_COMPRESS, CMS_R_UNSUPPORTED_COMPRESSION_ALGORITHM);
     return NULL;
diff --git a/crypto/comp/c_zlib.c b/crypto/comp/c_zlib.c
index d688deee5f..26f3208ccd 100644
--- a/crypto/comp/c_zlib.c
+++ b/crypto/comp/c_zlib.c
@@ -17,7 +17,7 @@
 #include "internal/bio.h"
 #include "comp_lcl.h"
 
-COMP_METHOD *COMP_zlib(void);
+COMP_METHOD * __cdecl COMP_zlib(void);
 
 static COMP_METHOD zlib_method_nozlib = {
     NID_undef,
@@ -206,7 +206,7 @@ static int zlib_stateful_expand_block(COMP_CTX *ctx, unsigned char *out,
 
 #endif
 
-COMP_METHOD *COMP_zlib(void)
+COMP_METHOD * __cdecl COMP_zlib(void)
 {
     COMP_METHOD *meth = &zlib_method_nozlib;
 
@@ -259,7 +259,7 @@ COMP_METHOD *COMP_zlib(void)
     return meth;
 }
 
-void comp_zlib_cleanup_int(void)
+void __cdecl comp_zlib_cleanup_int(void)
 {
 #ifdef ZLIB_SHARED
     DSO_free(zlib_dso);
@@ -310,7 +310,7 @@ static const BIO_METHOD bio_meth_zlib = {
     bio_zlib_callback_ctrl
 };
 
-const BIO_METHOD *BIO_f_zlib(void)
+const BIO_METHOD * __cdecl BIO_f_zlib(void)
 {
     return &bio_meth_zlib;
 }
diff --git a/crypto/comp/comp_err.c b/crypto/comp/comp_err.c
index 2dca315cf1..9d893d52ad 100644
--- a/crypto/comp/comp_err.c
+++ b/crypto/comp/comp_err.c
@@ -34,7 +34,7 @@ static const ERR_STRING_DATA COMP_str_reasons[] = {
 
 #endif
 
-int ERR_load_COMP_strings(void)
+int __cdecl ERR_load_COMP_strings(void)
 {
 #ifndef OPENSSL_NO_ERR
     if (ERR_func_error_string(COMP_str_functs[0].error) == NULL) {
diff --git a/crypto/comp/comp_lib.c b/crypto/comp/comp_lib.c
index 6ae2114496..99169e6acd 100644
--- a/crypto/comp/comp_lib.c
+++ b/crypto/comp/comp_lib.c
@@ -15,7 +15,7 @@
 #include <openssl/err.h>
 #include "comp_lcl.h"
 
-COMP_CTX *COMP_CTX_new(COMP_METHOD *meth)
+COMP_CTX * __cdecl COMP_CTX_new(COMP_METHOD *meth)
 {
     COMP_CTX *ret;
 
@@ -31,22 +31,22 @@ COMP_CTX *COMP_CTX_new(COMP_METHOD *meth)
     return ret;
 }
 
-const COMP_METHOD *COMP_CTX_get_method(const COMP_CTX *ctx)
+const COMP_METHOD * __cdecl COMP_CTX_get_method(const COMP_CTX *ctx)
 {
     return ctx->meth;
 }
 
-int COMP_get_type(const COMP_METHOD *meth)
+int __cdecl COMP_get_type(const COMP_METHOD *meth)
 {
     return meth->type;
 }
 
-const char *COMP_get_name(const COMP_METHOD *meth)
+const char * __cdecl COMP_get_name(const COMP_METHOD *meth)
 {
     return meth->name;
 }
 
-void COMP_CTX_free(COMP_CTX *ctx)
+void __cdecl COMP_CTX_free(COMP_CTX *ctx)
 {
     if (ctx == NULL)
         return;
@@ -56,7 +56,7 @@ void COMP_CTX_free(COMP_CTX *ctx)
     OPENSSL_free(ctx);
 }
 
-int COMP_compress_block(COMP_CTX *ctx, unsigned char *out, int olen,
+int __cdecl COMP_compress_block(COMP_CTX *ctx, unsigned char *out, int olen,
                         unsigned char *in, int ilen)
 {
     int ret;
@@ -71,7 +71,7 @@ int COMP_compress_block(COMP_CTX *ctx, unsigned char *out, int olen,
     return ret;
 }
 
-int COMP_expand_block(COMP_CTX *ctx, unsigned char *out, int olen,
+int __cdecl COMP_expand_block(COMP_CTX *ctx, unsigned char *out, int olen,
                       unsigned char *in, int ilen)
 {
     int ret;
@@ -87,7 +87,7 @@ int COMP_expand_block(COMP_CTX *ctx, unsigned char *out, int olen,
     return ret;
 }
 
-int COMP_CTX_get_type(const COMP_CTX* comp)
+int __cdecl COMP_CTX_get_type(const COMP_CTX* comp)
 {
     return comp->meth ? comp->meth->type : NID_undef;
 }
diff --git a/crypto/conf/conf_api.c b/crypto/conf/conf_api.c
index 5e57d749ce..a4d4fce2a9 100644
--- a/crypto/conf/conf_api.c
+++ b/crypto/conf/conf_api.c
@@ -20,7 +20,7 @@ static void value_free_hash(const CONF_VALUE *a, LHASH_OF(CONF_VALUE) *conf);
 static void value_free_stack_doall(CONF_VALUE *a);
 
 /* Up until OpenSSL 0.9.5a, this was get_section */
-CONF_VALUE *_CONF_get_section(const CONF *conf, const char *section)
+CONF_VALUE * __cdecl _CONF_get_section(const CONF *conf, const char *section)
 {
     CONF_VALUE *v, vv;
 
@@ -33,7 +33,7 @@ CONF_VALUE *_CONF_get_section(const CONF *conf, const char *section)
 }
 
 /* Up until OpenSSL 0.9.5a, this was CONF_get_section */
-STACK_OF(CONF_VALUE) *_CONF_get_section_values(const CONF *conf,
+STACK_OF(CONF_VALUE) * __cdecl _CONF_get_section_values(const CONF *conf,
                                                const char *section)
 {
     CONF_VALUE *v;
@@ -45,7 +45,7 @@ STACK_OF(CONF_VALUE) *_CONF_get_section_values(const CONF *conf,
         return NULL;
 }
 
-int _CONF_add_string(CONF *conf, CONF_VALUE *section, CONF_VALUE *value)
+int __cdecl _CONF_add_string(CONF *conf, CONF_VALUE *section, CONF_VALUE *value)
 {
     CONF_VALUE *v = NULL;
     STACK_OF(CONF_VALUE) *ts;
@@ -67,7 +67,7 @@ int _CONF_add_string(CONF *conf, CONF_VALUE *section, CONF_VALUE *value)
     return 1;
 }
 
-char *_CONF_get_string(const CONF *conf, const char *section,
+char * __cdecl _CONF_get_string(const CONF *conf, const char *section,
                        const char *name)
 {
     CONF_VALUE *v, vv;
@@ -99,12 +99,12 @@ char *_CONF_get_string(const CONF *conf, const char *section,
         return ossl_safe_getenv(name);
 }
 
-static unsigned long conf_value_hash(const CONF_VALUE *v)
+static unsigned long __cdecl conf_value_hash(const CONF_VALUE *v)
 {
     return (OPENSSL_LH_strhash(v->section) << 2) ^ OPENSSL_LH_strhash(v->name);
 }
 
-static int conf_value_cmp(const CONF_VALUE *a, const CONF_VALUE *b)
+static int __cdecl conf_value_cmp(const CONF_VALUE *a, const CONF_VALUE *b)
 {
     int i;
 
@@ -123,7 +123,7 @@ static int conf_value_cmp(const CONF_VALUE *a, const CONF_VALUE *b)
         return ((a->name == NULL) ? -1 : 1);
 }
 
-int _CONF_new_data(CONF *conf)
+int __cdecl _CONF_new_data(CONF *conf)
 {
     if (conf == NULL) {
         return 0;
@@ -140,7 +140,7 @@ typedef LHASH_OF(CONF_VALUE) LH_CONF_VALUE;
 
 IMPLEMENT_LHASH_DOALL_ARG_CONST(CONF_VALUE, LH_CONF_VALUE);
 
-void _CONF_free_data(CONF *conf)
+void __cdecl _CONF_free_data(CONF *conf)
 {
     if (conf == NULL || conf->data == NULL)
         return;
@@ -186,7 +186,7 @@ static void value_free_stack_doall(CONF_VALUE *a)
 }
 
 /* Up until OpenSSL 0.9.5a, this was new_section */
-CONF_VALUE *_CONF_new_section(CONF *conf, const char *section)
+CONF_VALUE * __cdecl _CONF_new_section(CONF *conf, const char *section)
 {
     STACK_OF(CONF_VALUE) *sk = NULL;
     int i;
diff --git a/crypto/conf/conf_def.c b/crypto/conf/conf_def.c
index 8e3f42a0ca..5a07ccda71 100644
--- a/crypto/conf/conf_def.c
+++ b/crypto/conf/conf_def.c
@@ -89,12 +89,12 @@ static CONF_METHOD WIN32_method = {
     def_load
 };
 
-CONF_METHOD *NCONF_default(void)
+CONF_METHOD * __cdecl NCONF_default(void)
 {
     return &default_method;
 }
 
-CONF_METHOD *NCONF_WIN32(void)
+CONF_METHOD * __cdecl NCONF_WIN32(void)
 {
     return &WIN32_method;
 }
diff --git a/crypto/conf/conf_err.c b/crypto/conf/conf_err.c
index f7613584ec..a7d299e885 100644
--- a/crypto/conf/conf_err.c
+++ b/crypto/conf/conf_err.c
@@ -83,7 +83,7 @@ static const ERR_STRING_DATA CONF_str_reasons[] = {
 
 #endif
 
-int ERR_load_CONF_strings(void)
+int __cdecl ERR_load_CONF_strings(void)
 {
 #ifndef OPENSSL_NO_ERR
     if (ERR_func_error_string(CONF_str_functs[0].error) == NULL) {
diff --git a/crypto/conf/conf_lib.c b/crypto/conf/conf_lib.c
index 2d40ac97ec..21fe21c999 100644
--- a/crypto/conf/conf_lib.c
+++ b/crypto/conf/conf_lib.c
@@ -22,7 +22,7 @@ static CONF_METHOD *default_CONF_method = NULL;
 
 /* Init a 'CONF' structure from an old LHASH */
 
-void CONF_set_nconf(CONF *conf, LHASH_OF(CONF_VALUE) *hash)
+void __cdecl CONF_set_nconf(CONF *conf, LHASH_OF(CONF_VALUE) *hash)
 {
     if (default_CONF_method == NULL)
         default_CONF_method = NCONF_default();
@@ -36,13 +36,13 @@ void CONF_set_nconf(CONF *conf, LHASH_OF(CONF_VALUE) *hash)
  * terms of the new CONF interface.
  */
 
-int CONF_set_default_method(CONF_METHOD *meth)
+int __cdecl CONF_set_default_method(CONF_METHOD *meth)
 {
     default_CONF_method = meth;
     return 1;
 }
 
-LHASH_OF(CONF_VALUE) *CONF_load(LHASH_OF(CONF_VALUE) *conf, const char *file,
+LHASH_OF(CONF_VALUE) * __cdecl CONF_load(LHASH_OF(CONF_VALUE) *conf, const char *file,
                                 long *eline)
 {
     LHASH_OF(CONF_VALUE) *ltmp;
@@ -65,7 +65,7 @@ LHASH_OF(CONF_VALUE) *CONF_load(LHASH_OF(CONF_VALUE) *conf, const char *file,
 }
 
 #ifndef OPENSSL_NO_STDIO
-LHASH_OF(CONF_VALUE) *CONF_load_fp(LHASH_OF(CONF_VALUE) *conf, FILE *fp,
+LHASH_OF(CONF_VALUE) * __cdecl CONF_load_fp(LHASH_OF(CONF_VALUE) *conf, FILE *fp,
                                    long *eline)
 {
     BIO *btmp;
@@ -80,7 +80,7 @@ LHASH_OF(CONF_VALUE) *CONF_load_fp(LHASH_OF(CONF_VALUE) *conf, FILE *fp,
 }
 #endif
 
-LHASH_OF(CONF_VALUE) *CONF_load_bio(LHASH_OF(CONF_VALUE) *conf, BIO *bp,
+LHASH_OF(CONF_VALUE) * __cdecl CONF_load_bio(LHASH_OF(CONF_VALUE) *conf, BIO *bp,
                                     long *eline)
 {
     CONF ctmp;
@@ -94,7 +94,7 @@ LHASH_OF(CONF_VALUE) *CONF_load_bio(LHASH_OF(CONF_VALUE) *conf, BIO *bp,
     return NULL;
 }
 
-STACK_OF(CONF_VALUE) *CONF_get_section(LHASH_OF(CONF_VALUE) *conf,
+STACK_OF(CONF_VALUE) * __cdecl CONF_get_section(LHASH_OF(CONF_VALUE) *conf,
                                        const char *section)
 {
     if (conf == NULL) {
@@ -106,7 +106,7 @@ STACK_OF(CONF_VALUE) *CONF_get_section(LHASH_OF(CONF_VALUE) *conf,
     }
 }
 
-char *CONF_get_string(LHASH_OF(CONF_VALUE) *conf, const char *group,
+char * __cdecl CONF_get_string(LHASH_OF(CONF_VALUE) *conf, const char *group,
                       const char *name)
 {
     if (conf == NULL) {
@@ -118,7 +118,7 @@ char *CONF_get_string(LHASH_OF(CONF_VALUE) *conf, const char *group,
     }
 }
 
-long CONF_get_number(LHASH_OF(CONF_VALUE) *conf, const char *group,
+long __cdecl CONF_get_number(LHASH_OF(CONF_VALUE) *conf, const char *group,
                      const char *name)
 {
     int status;
@@ -136,7 +136,7 @@ long CONF_get_number(LHASH_OF(CONF_VALUE) *conf, const char *group,
     return status == 0 ? 0L : result;
 }
 
-void CONF_free(LHASH_OF(CONF_VALUE) *conf)
+void __cdecl CONF_free(LHASH_OF(CONF_VALUE) *conf)
 {
     CONF ctmp;
     CONF_set_nconf(&ctmp, conf);
@@ -144,7 +144,7 @@ void CONF_free(LHASH_OF(CONF_VALUE) *conf)
 }
 
 #ifndef OPENSSL_NO_STDIO
-int CONF_dump_fp(LHASH_OF(CONF_VALUE) *conf, FILE *out)
+int __cdecl CONF_dump_fp(LHASH_OF(CONF_VALUE) *conf, FILE *out)
 {
     BIO *btmp;
     int ret;
@@ -159,7 +159,7 @@ int CONF_dump_fp(LHASH_OF(CONF_VALUE) *conf, FILE *out)
 }
 #endif
 
-int CONF_dump_bio(LHASH_OF(CONF_VALUE) *conf, BIO *out)
+int __cdecl CONF_dump_bio(LHASH_OF(CONF_VALUE) *conf, BIO *out)
 {
     CONF ctmp;
     CONF_set_nconf(&ctmp, conf);
@@ -174,7 +174,7 @@ int CONF_dump_bio(LHASH_OF(CONF_VALUE) *conf, BIO *out)
  * the "CONF classic" functions, for consistency.
  */
 
-CONF *NCONF_new(CONF_METHOD *meth)
+CONF * __cdecl NCONF_new(CONF_METHOD *meth)
 {
     CONF *ret;
 
@@ -190,21 +190,21 @@ CONF *NCONF_new(CONF_METHOD *meth)
     return ret;
 }
 
-void NCONF_free(CONF *conf)
+void __cdecl NCONF_free(CONF *conf)
 {
     if (conf == NULL)
         return;
     conf->meth->destroy(conf);
 }
 
-void NCONF_free_data(CONF *conf)
+void __cdecl NCONF_free_data(CONF *conf)
 {
     if (conf == NULL)
         return;
     conf->meth->destroy_data(conf);
 }
 
-int NCONF_load(CONF *conf, const char *file, long *eline)
+int __cdecl NCONF_load(CONF *conf, const char *file, long *eline)
 {
     if (conf == NULL) {
         CONFerr(CONF_F_NCONF_LOAD, CONF_R_NO_CONF);
@@ -215,7 +215,7 @@ int NCONF_load(CONF *conf, const char *file, long *eline)
 }
 
 #ifndef OPENSSL_NO_STDIO
-int NCONF_load_fp(CONF *conf, FILE *fp, long *eline)
+int __cdecl NCONF_load_fp(CONF *conf, FILE *fp, long *eline)
 {
     BIO *btmp;
     int ret;
@@ -229,7 +229,7 @@ int NCONF_load_fp(CONF *conf, FILE *fp, long *eline)
 }
 #endif
 
-int NCONF_load_bio(CONF *conf, BIO *bp, long *eline)
+int __cdecl NCONF_load_bio(CONF *conf, BIO *bp, long *eline)
 {
     if (conf == NULL) {
         CONFerr(CONF_F_NCONF_LOAD_BIO, CONF_R_NO_CONF);
@@ -239,7 +239,7 @@ int NCONF_load_bio(CONF *conf, BIO *bp, long *eline)
     return conf->meth->load_bio(conf, bp, eline);
 }
 
-STACK_OF(CONF_VALUE) *NCONF_get_section(const CONF *conf, const char *section)
+STACK_OF(CONF_VALUE) * __cdecl NCONF_get_section(const CONF *conf, const char *section)
 {
     if (conf == NULL) {
         CONFerr(CONF_F_NCONF_GET_SECTION, CONF_R_NO_CONF);
@@ -254,7 +254,7 @@ STACK_OF(CONF_VALUE) *NCONF_get_section(const CONF *conf, const char *section)
     return _CONF_get_section_values(conf, section);
 }
 
-char *NCONF_get_string(const CONF *conf, const char *group, const char *name)
+char * __cdecl NCONF_get_string(const CONF *conf, const char *group, const char *name)
 {
     char *s = _CONF_get_string(conf, group, name);
 
@@ -285,7 +285,7 @@ static int default_to_int(const CONF *conf, char c)
     return (int)(c - '0');
 }
 
-int NCONF_get_number_e(const CONF *conf, const char *group, const char *name,
+int __cdecl NCONF_get_number_e(const CONF *conf, const char *group, const char *name,
                        long *result)
 {
     char *str;
@@ -324,7 +324,7 @@ int NCONF_get_number_e(const CONF *conf, const char *group, const char *name,
 }
 
 #ifndef OPENSSL_NO_STDIO
-int NCONF_dump_fp(const CONF *conf, FILE *out)
+int __cdecl NCONF_dump_fp(const CONF *conf, FILE *out)
 {
     BIO *btmp;
     int ret;
@@ -338,7 +338,7 @@ int NCONF_dump_fp(const CONF *conf, FILE *out)
 }
 #endif
 
-int NCONF_dump_bio(const CONF *conf, BIO *out)
+int __cdecl NCONF_dump_bio(const CONF *conf, BIO *out)
 {
     if (conf == NULL) {
         CONFerr(CONF_F_NCONF_DUMP_BIO, CONF_R_NO_CONF);
@@ -352,7 +352,7 @@ int NCONF_dump_bio(const CONF *conf, BIO *out)
  * These routines call the C malloc/free, to avoid intermixing with
  * OpenSSL function pointers before the library is initialized.
  */
-OPENSSL_INIT_SETTINGS *OPENSSL_INIT_new(void)
+OPENSSL_INIT_SETTINGS * __cdecl OPENSSL_INIT_new(void)
 {
     OPENSSL_INIT_SETTINGS *ret = malloc(sizeof(*ret));
 
@@ -365,7 +365,7 @@ OPENSSL_INIT_SETTINGS *OPENSSL_INIT_new(void)
 
 
 #ifndef OPENSSL_NO_STDIO
-int OPENSSL_INIT_set_config_filename(OPENSSL_INIT_SETTINGS *settings,
+int __cdecl OPENSSL_INIT_set_config_filename(OPENSSL_INIT_SETTINGS *settings,
                                      const char *filename)
 {
     char *newfilename = NULL;
@@ -382,13 +382,13 @@ int OPENSSL_INIT_set_config_filename(OPENSSL_INIT_SETTINGS *settings,
     return 1;
 }
 
-void OPENSSL_INIT_set_config_file_flags(OPENSSL_INIT_SETTINGS *settings,
+void __cdecl OPENSSL_INIT_set_config_file_flags(OPENSSL_INIT_SETTINGS *settings,
                                         unsigned long flags)
 {
     settings->flags = flags;
 }
 
-int OPENSSL_INIT_set_config_appname(OPENSSL_INIT_SETTINGS *settings,
+int __cdecl OPENSSL_INIT_set_config_appname(OPENSSL_INIT_SETTINGS *settings,
                                     const char *appname)
 {
     char *newappname = NULL;
@@ -406,7 +406,7 @@ int OPENSSL_INIT_set_config_appname(OPENSSL_INIT_SETTINGS *settings,
 }
 #endif
 
-void OPENSSL_INIT_free(OPENSSL_INIT_SETTINGS *settings)
+void __cdecl OPENSSL_INIT_free(OPENSSL_INIT_SETTINGS *settings)
 {
     free(settings->filename);
     free(settings->appname);
diff --git a/crypto/conf/conf_mall.c b/crypto/conf/conf_mall.c
index 7e86948e89..164e3247cc 100644
--- a/crypto/conf/conf_mall.c
+++ b/crypto/conf/conf_mall.c
@@ -18,7 +18,7 @@
 
 /* Load all OpenSSL builtin modules */
 
-void OPENSSL_load_builtin_modules(void)
+void __cdecl OPENSSL_load_builtin_modules(void)
 {
     /* Add builtin modules here */
     ASN1_add_oid_module();
diff --git a/crypto/conf/conf_mod.c b/crypto/conf/conf_mod.c
index e703d97f54..b12175bbba 100644
--- a/crypto/conf/conf_mod.c
+++ b/crypto/conf/conf_mod.c
@@ -69,7 +69,7 @@ static CONF_MODULE *module_load_dso(const CONF *cnf, const char *name,
 
 /* Main function: load modules from a CONF structure */
 
-int CONF_modules_load(const CONF *cnf, const char *appname,
+int __cdecl CONF_modules_load(const CONF *cnf, const char *appname,
                       unsigned long flags)
 {
     STACK_OF(CONF_VALUE) *values;
@@ -109,7 +109,7 @@ int CONF_modules_load(const CONF *cnf, const char *appname,
 
 }
 
-int CONF_modules_load_file(const char *filename, const char *appname,
+int __cdecl CONF_modules_load_file(const char *filename, const char *appname,
                            unsigned long flags)
 {
     char *file = NULL;
@@ -356,7 +356,7 @@ static int module_init(CONF_MODULE *pmod, const char *name, const char *value,
  * including static ones.
  */
 
-void CONF_modules_unload(int all)
+void __cdecl CONF_modules_unload(int all)
 {
     int i;
     CONF_MODULE *md;
@@ -387,7 +387,7 @@ static void module_free(CONF_MODULE *md)
 
 /* finish and free up all modules instances */
 
-void CONF_modules_finish(void)
+void __cdecl CONF_modules_finish(void)
 {
     CONF_IMODULE *imod;
     while (sk_CONF_IMODULE_num(initialized_modules) > 0) {
@@ -414,7 +414,7 @@ static void module_finish(CONF_IMODULE *imod)
 
 /* Add a static module to OpenSSL */
 
-int CONF_module_add(const char *name, conf_init_func *ifunc,
+int __cdecl CONF_module_add(const char *name, conf_init_func *ifunc,
                     conf_finish_func *ffunc)
 {
     if (module_add(NULL, name, ifunc, ffunc))
@@ -423,7 +423,7 @@ int CONF_module_add(const char *name, conf_init_func *ifunc,
         return 0;
 }
 
-void conf_modules_free_int(void)
+void __cdecl conf_modules_free_int(void)
 {
     CONF_modules_finish();
     CONF_modules_unload(1);
@@ -431,54 +431,54 @@ void conf_modules_free_int(void)
 
 /* Utility functions */
 
-const char *CONF_imodule_get_name(const CONF_IMODULE *md)
+const char * __cdecl CONF_imodule_get_name(const CONF_IMODULE *md)
 {
     return md->name;
 }
 
-const char *CONF_imodule_get_value(const CONF_IMODULE *md)
+const char * __cdecl CONF_imodule_get_value(const CONF_IMODULE *md)
 {
     return md->value;
 }
 
-void *CONF_imodule_get_usr_data(const CONF_IMODULE *md)
+void * __cdecl CONF_imodule_get_usr_data(const CONF_IMODULE *md)
 {
     return md->usr_data;
 }
 
-void CONF_imodule_set_usr_data(CONF_IMODULE *md, void *usr_data)
+void __cdecl CONF_imodule_set_usr_data(CONF_IMODULE *md, void *usr_data)
 {
     md->usr_data = usr_data;
 }
 
-CONF_MODULE *CONF_imodule_get_module(const CONF_IMODULE *md)
+CONF_MODULE * __cdecl CONF_imodule_get_module(const CONF_IMODULE *md)
 {
     return md->pmod;
 }
 
-unsigned long CONF_imodule_get_flags(const CONF_IMODULE *md)
+unsigned long __cdecl CONF_imodule_get_flags(const CONF_IMODULE *md)
 {
     return md->flags;
 }
 
-void CONF_imodule_set_flags(CONF_IMODULE *md, unsigned long flags)
+void __cdecl CONF_imodule_set_flags(CONF_IMODULE *md, unsigned long flags)
 {
     md->flags = flags;
 }
 
-void *CONF_module_get_usr_data(CONF_MODULE *pmod)
+void * __cdecl CONF_module_get_usr_data(CONF_MODULE *pmod)
 {
     return pmod->usr_data;
 }
 
-void CONF_module_set_usr_data(CONF_MODULE *pmod, void *usr_data)
+void __cdecl CONF_module_set_usr_data(CONF_MODULE *pmod, void *usr_data)
 {
     pmod->usr_data = usr_data;
 }
 
 /* Return default config file name */
 
-char *CONF_get1_default_config_file(void)
+char * __cdecl CONF_get1_default_config_file(void)
 {
     char *file, *sep = "";
     int len;
@@ -510,7 +510,7 @@ char *CONF_get1_default_config_file(void)
  * lists for example.
  */
 
-int CONF_parse_list(const char *list_, int sep, int nospc,
+int __cdecl CONF_parse_list(const char *list_, int sep, int nospc,
                     int (*list_cb) (const char *elem, int len, void *usr),
                     void *arg)
 {
diff --git a/crypto/conf/conf_sap.c b/crypto/conf/conf_sap.c
index 82105de748..ff83c7621e 100644
--- a/crypto/conf/conf_sap.c
+++ b/crypto/conf/conf_sap.c
@@ -40,7 +40,7 @@ void OPENSSL_config(const char *appname)
 }
 #endif
 
-int openssl_config_int(const OPENSSL_INIT_SETTINGS *settings)
+int __cdecl openssl_config_int(const OPENSSL_INIT_SETTINGS *settings)
 {
     int ret = 0;
     const char *filename;
@@ -72,7 +72,7 @@ int openssl_config_int(const OPENSSL_INIT_SETTINGS *settings)
     return ret;
 }
 
-void openssl_no_config_int(void)
+void __cdecl openssl_no_config_int(void)
 {
     openssl_configured = 1;
 }
diff --git a/crypto/conf/conf_ssl.c b/crypto/conf/conf_ssl.c
index 387f2cf46c..9d9a9fd512 100644
--- a/crypto/conf/conf_ssl.c
+++ b/crypto/conf/conf_ssl.c
@@ -134,7 +134,7 @@ static int ssl_module_init(CONF_IMODULE *md, const CONF *cnf)
  * conf_ssl_name_find. Also stores the name of the set of commands in |*name|
  * and the number of commands in the set in |*cnt|.
  */
-const SSL_CONF_CMD *conf_ssl_get(size_t idx, const char **name, size_t *cnt)
+const SSL_CONF_CMD * __cdecl conf_ssl_get(size_t idx, const char **name, size_t *cnt)
 {
     *name = ssl_names[idx].name;
     *cnt = ssl_names[idx].cmd_count;
@@ -146,7 +146,7 @@ const SSL_CONF_CMD *conf_ssl_get(size_t idx, const char **name, size_t *cnt)
  * index for the command set in |*idx|.
  * Returns 1 on success or 0 on failure.
  */
-int conf_ssl_name_find(const char *name, size_t *idx)
+int __cdecl conf_ssl_name_find(const char *name, size_t *idx)
 {
     size_t i;
     const struct ssl_conf_name_st *nm;
@@ -168,7 +168,7 @@ int conf_ssl_name_find(const char *name, size_t *idx)
  * conf_ssl_get). The name of the command will be returned in |*cmdstr| and the
  * argument is returned in |*arg|.
  */
-void conf_ssl_get_cmd(const SSL_CONF_CMD *cmd, size_t idx, char **cmdstr,
+void __cdecl conf_ssl_get_cmd(const SSL_CONF_CMD *cmd, size_t idx, char **cmdstr,
                       char **arg)
 {
     *cmdstr = cmd[idx].cmd;
diff --git a/crypto/cpt_err.c b/crypto/cpt_err.c
index 4147b1cb9e..e01ac49581 100644
--- a/crypto/cpt_err.c
+++ b/crypto/cpt_err.c
@@ -65,7 +65,7 @@ static const ERR_STRING_DATA CRYPTO_str_reasons[] = {
 
 #endif
 
-int ERR_load_CRYPTO_strings(void)
+int __cdecl ERR_load_CRYPTO_strings(void)
 {
 #ifndef OPENSSL_NO_ERR
     if (ERR_func_error_string(CRYPTO_str_functs[0].error) == NULL) {
diff --git a/crypto/cryptlib.c b/crypto/cryptlib.c
index 7b761a3adc..9354cda9a6 100644
--- a/crypto/cryptlib.c
+++ b/crypto/cryptlib.c
@@ -94,7 +94,7 @@ static variant_char *ossl_strchr(const variant_char *str, char srch)
 #  define OPENSSL_CPUID_SETUP
 typedef uint64_t IA32CAP;
 
-void OPENSSL_cpuid_setup(void)
+void __cdecl OPENSSL_cpuid_setup(void)
 {
     static int trigger = 0;
     IA32CAP OPENSSL_ia32_cpuid(unsigned int *);
@@ -162,7 +162,7 @@ unsigned int OPENSSL_ia32cap_P[4];
 # endif
 #endif
 #if !defined(OPENSSL_CPUID_SETUP) && !defined(OPENSSL_CPUID_OBJ)
-void OPENSSL_cpuid_setup(void)
+void __cdecl OPENSSL_cpuid_setup(void)
 {
 }
 #endif
@@ -184,13 +184,13 @@ void OPENSSL_cpuid_setup(void)
 # if defined(_WIN32_WINNT) && _WIN32_WINNT>=0x0333
 #  ifdef OPENSSL_SYS_WIN_CORE
 
-int OPENSSL_isservice(void)
+int __cdecl OPENSSL_isservice(void)
 {
     /* OneCore API cannot interact with GUI */
     return 1;
 }
 #  else
-int OPENSSL_isservice(void)
+int __cdecl OPENSSL_isservice(void)
 {
     HWINSTA h;
     DWORD len;
@@ -252,13 +252,13 @@ int OPENSSL_isservice(void)
 }
 #  endif
 # else
-int OPENSSL_isservice(void)
+int __cdecl OPENSSL_isservice(void)
 {
     return 0;
 }
 # endif
 
-void OPENSSL_showfatal(const char *fmta, ...)
+void __cdecl OPENSSL_showfatal(const char *fmta, ...)
 {
     va_list ap;
     TCHAR buf[256];
@@ -396,7 +396,7 @@ void OPENSSL_showfatal(const char *fmta, ...)
 # endif
 }
 #else
-void OPENSSL_showfatal(const char *fmta, ...)
+void __cdecl OPENSSL_showfatal(const char *fmta, ...)
 {
 #ifndef OPENSSL_NO_STDIO
     va_list ap;
@@ -407,13 +407,13 @@ void OPENSSL_showfatal(const char *fmta, ...)
 #endif
 }
 
-int OPENSSL_isservice(void)
+int __cdecl OPENSSL_isservice(void)
 {
     return 0;
 }
 #endif
 
-void OPENSSL_die(const char *message, const char *file, int line)
+void __cdecl OPENSSL_die(const char *message, const char *file, int line)
 {
     OPENSSL_showfatal("%s:%d: OpenSSL internal error: %s\n",
                       file, line, message);
@@ -440,7 +440,7 @@ void OPENSSL_die(const char *message, const char *file, int line)
  * There are also assembler versions of this function.
  */
 # undef CRYPTO_memcmp
-int CRYPTO_memcmp(const void * in_a, const void * in_b, size_t len)
+int __cdecl CRYPTO_memcmp(const void * in_a, const void * in_b, size_t len)
 {
     size_t i;
     const volatile unsigned char *a = in_a;
@@ -456,17 +456,17 @@ int CRYPTO_memcmp(const void * in_a, const void * in_b, size_t len)
 /*
  * For systems that don't provide an instruction counter register or equivalent.
  */
-uint32_t OPENSSL_rdtsc(void)
+uint32_t __cdecl OPENSSL_rdtsc(void)
 {
     return 0;
 }
 
-size_t OPENSSL_instrument_bus(unsigned int *out, size_t cnt)
+size_t __cdecl OPENSSL_instrument_bus(unsigned int *out, size_t cnt)
 {
     return 0;
 }
 
-size_t OPENSSL_instrument_bus2(unsigned int *out, size_t cnt, size_t max)
+size_t __cdecl OPENSSL_instrument_bus2(unsigned int *out, size_t cnt, size_t max)
 {
     return 0;
 }
diff --git a/crypto/ct/ct_b64.c b/crypto/ct/ct_b64.c
index 109ffcdcf2..96a0923227 100644
--- a/crypto/ct/ct_b64.c
+++ b/crypto/ct/ct_b64.c
@@ -60,7 +60,7 @@ err:
     return -1;
 }
 
-SCT *SCT_new_from_base64(unsigned char version, const char *logid_base64,
+SCT * __cdecl SCT_new_from_base64(unsigned char version, const char *logid_base64,
                          ct_log_entry_type_t entry_type, uint64_t timestamp,
                          const char *extensions_base64,
                          const char *signature_base64)
@@ -132,7 +132,7 @@ SCT *SCT_new_from_base64(unsigned char version, const char *logid_base64,
  * 0 on decoding failure, or invalid parameter if any
  * -1 on internal (malloc) failure
  */
-int CTLOG_new_from_base64(CTLOG **ct_log, const char *pkey_base64, const char *name)
+int __cdecl CTLOG_new_from_base64(CTLOG **ct_log, const char *pkey_base64, const char *name)
 {
     unsigned char *pkey_der = NULL;
     int pkey_der_len;
diff --git a/crypto/ct/ct_err.c b/crypto/ct/ct_err.c
index c0c62fee6c..6873d6869a 100644
--- a/crypto/ct/ct_err.c
+++ b/crypto/ct/ct_err.c
@@ -84,7 +84,7 @@ static const ERR_STRING_DATA CT_str_reasons[] = {
 
 #endif
 
-int ERR_load_CT_strings(void)
+int __cdecl ERR_load_CT_strings(void)
 {
 #ifndef OPENSSL_NO_ERR
     if (ERR_func_error_string(CT_str_functs[0].error) == NULL) {
diff --git a/crypto/ct/ct_log.c b/crypto/ct/ct_log.c
index c1bca3e141..b1478336c6 100644
--- a/crypto/ct/ct_log.c
+++ b/crypto/ct/ct_log.c
@@ -89,7 +89,7 @@ err:
     return ret;
 }
 
-CTLOG_STORE *CTLOG_STORE_new(void)
+CTLOG_STORE * __cdecl CTLOG_STORE_new(void)
 {
     CTLOG_STORE *ret = OPENSSL_zalloc(sizeof(*ret));
 
@@ -108,7 +108,7 @@ err:
     return NULL;
 }
 
-void CTLOG_STORE_free(CTLOG_STORE *store)
+void __cdecl CTLOG_STORE_free(CTLOG_STORE *store)
 {
     if (store != NULL) {
         sk_CTLOG_pop_free(store->logs, CTLOG_free);
@@ -135,7 +135,7 @@ static int ctlog_new_from_conf(CTLOG **ct_log, const CONF *conf, const char *sec
     return CTLOG_new_from_base64(ct_log, pkey_base64, description);
 }
 
-int CTLOG_STORE_load_default_file(CTLOG_STORE *store)
+int __cdecl CTLOG_STORE_load_default_file(CTLOG_STORE *store)
 {
     const char *fpath = ossl_safe_getenv(CTLOG_FILE_EVP);
 
@@ -192,7 +192,7 @@ mem_err:
     return -1;
 }
 
-int CTLOG_STORE_load_file(CTLOG_STORE *store, const char *file)
+int __cdecl CTLOG_STORE_load_file(CTLOG_STORE *store, const char *file)
 {
     int ret = 0;
     char *enabled_logs;
@@ -234,7 +234,7 @@ end:
  * Takes ownership of the public key.
  * Copies the name.
  */
-CTLOG *CTLOG_new(EVP_PKEY *public_key, const char *name)
+CTLOG * __cdecl CTLOG_new(EVP_PKEY *public_key, const char *name)
 {
     CTLOG *ret = OPENSSL_zalloc(sizeof(*ret));
 
@@ -260,7 +260,7 @@ err:
 }
 
 /* Frees CT log and associated structures */
-void CTLOG_free(CTLOG *log)
+void __cdecl CTLOG_free(CTLOG *log)
 {
     if (log != NULL) {
         OPENSSL_free(log->name);
@@ -269,19 +269,19 @@ void CTLOG_free(CTLOG *log)
     }
 }
 
-const char *CTLOG_get0_name(const CTLOG *log)
+const char * __cdecl CTLOG_get0_name(const CTLOG *log)
 {
     return log->name;
 }
 
-void CTLOG_get0_log_id(const CTLOG *log, const uint8_t **log_id,
+void __cdecl CTLOG_get0_log_id(const CTLOG *log, const uint8_t **log_id,
                        size_t *log_id_len)
 {
     *log_id = log->log_id;
     *log_id_len = CT_V1_HASHLEN;
 }
 
-EVP_PKEY *CTLOG_get0_public_key(const CTLOG *log)
+EVP_PKEY * __cdecl CTLOG_get0_public_key(const CTLOG *log)
 {
     return log->public_key;
 }
@@ -290,7 +290,7 @@ EVP_PKEY *CTLOG_get0_public_key(const CTLOG *log)
  * Given a log ID, finds the matching log.
  * Returns NULL if no match found.
  */
-const CTLOG *CTLOG_STORE_get0_log_by_id(const CTLOG_STORE *store,
+const CTLOG * __cdecl CTLOG_STORE_get0_log_by_id(const CTLOG_STORE *store,
                                         const uint8_t *log_id,
                                         size_t log_id_len)
 {
diff --git a/crypto/ct/ct_oct.c b/crypto/ct/ct_oct.c
index 0dd691c0f7..283c7fd229 100644
--- a/crypto/ct/ct_oct.c
+++ b/crypto/ct/ct_oct.c
@@ -67,7 +67,7 @@ int o2i_SCT_signature(SCT *sct, const unsigned char **in, size_t len)
     return len - len_remaining;
 }
 
-SCT *o2i_SCT(SCT **psct, const unsigned char **in, size_t len)
+SCT * __cdecl o2i_SCT(SCT **psct, const unsigned char **in, size_t len)
 {
     SCT *sct = NULL;
     const unsigned char *p;
@@ -197,7 +197,7 @@ err:
     return -1;
 }
 
-int i2o_SCT(const SCT *sct, unsigned char **out)
+int __cdecl i2o_SCT(const SCT *sct, unsigned char **out)
 {
     size_t len;
     unsigned char *p = NULL, *pstart = NULL;
@@ -254,7 +254,7 @@ err:
     return -1;
 }
 
-STACK_OF(SCT) *o2i_SCT_LIST(STACK_OF(SCT) **a, const unsigned char **pp,
+STACK_OF(SCT) * __cdecl o2i_SCT_LIST(STACK_OF(SCT) **a, const unsigned char **pp,
                             size_t len)
 {
     STACK_OF(SCT) *sk = NULL;
@@ -318,7 +318,7 @@ STACK_OF(SCT) *o2i_SCT_LIST(STACK_OF(SCT) **a, const unsigned char **pp,
     return NULL;
 }
 
-int i2o_SCT_LIST(const STACK_OF(SCT) *a, unsigned char **pp)
+int __cdecl i2o_SCT_LIST(const STACK_OF(SCT) *a, unsigned char **pp)
 {
     int len, sct_len, i, is_pp_new = 0;
     size_t len2;
@@ -373,7 +373,7 @@ int i2o_SCT_LIST(const STACK_OF(SCT) *a, unsigned char **pp)
     return -1;
 }
 
-STACK_OF(SCT) *d2i_SCT_LIST(STACK_OF(SCT) **a, const unsigned char **pp,
+STACK_OF(SCT) * __cdecl d2i_SCT_LIST(STACK_OF(SCT) **a, const unsigned char **pp,
                             long len)
 {
     ASN1_OCTET_STRING *oct = NULL;
@@ -392,7 +392,7 @@ STACK_OF(SCT) *d2i_SCT_LIST(STACK_OF(SCT) **a, const unsigned char **pp,
     return sk;
 }
 
-int i2d_SCT_LIST(const STACK_OF(SCT) *a, unsigned char **out)
+int __cdecl i2d_SCT_LIST(const STACK_OF(SCT) *a, unsigned char **out)
 {
     ASN1_OCTET_STRING oct;
     int len;
diff --git a/crypto/ct/ct_policy.c b/crypto/ct/ct_policy.c
index 0d7b346387..9ee70de48f 100644
--- a/crypto/ct/ct_policy.c
+++ b/crypto/ct/ct_policy.c
@@ -25,7 +25,7 @@
  */
 static const time_t SCT_CLOCK_DRIFT_TOLERANCE = 300;
 
-CT_POLICY_EVAL_CTX *CT_POLICY_EVAL_CTX_new(void)
+CT_POLICY_EVAL_CTX * __cdecl CT_POLICY_EVAL_CTX_new(void)
 {
     CT_POLICY_EVAL_CTX *ctx = OPENSSL_zalloc(sizeof(CT_POLICY_EVAL_CTX));
 
@@ -41,7 +41,7 @@ CT_POLICY_EVAL_CTX *CT_POLICY_EVAL_CTX_new(void)
     return ctx;
 }
 
-void CT_POLICY_EVAL_CTX_free(CT_POLICY_EVAL_CTX *ctx)
+void __cdecl CT_POLICY_EVAL_CTX_free(CT_POLICY_EVAL_CTX *ctx)
 {
     if (ctx == NULL)
         return;
@@ -50,7 +50,7 @@ void CT_POLICY_EVAL_CTX_free(CT_POLICY_EVAL_CTX *ctx)
     OPENSSL_free(ctx);
 }
 
-int CT_POLICY_EVAL_CTX_set1_cert(CT_POLICY_EVAL_CTX *ctx, X509 *cert)
+int __cdecl CT_POLICY_EVAL_CTX_set1_cert(CT_POLICY_EVAL_CTX *ctx, X509 *cert)
 {
     if (!X509_up_ref(cert))
         return 0;
@@ -58,7 +58,7 @@ int CT_POLICY_EVAL_CTX_set1_cert(CT_POLICY_EVAL_CTX *ctx, X509 *cert)
     return 1;
 }
 
-int CT_POLICY_EVAL_CTX_set1_issuer(CT_POLICY_EVAL_CTX *ctx, X509 *issuer)
+int __cdecl CT_POLICY_EVAL_CTX_set1_issuer(CT_POLICY_EVAL_CTX *ctx, X509 *issuer)
 {
     if (!X509_up_ref(issuer))
         return 0;
@@ -66,33 +66,33 @@ int CT_POLICY_EVAL_CTX_set1_issuer(CT_POLICY_EVAL_CTX *ctx, X509 *issuer)
     return 1;
 }
 
-void CT_POLICY_EVAL_CTX_set_shared_CTLOG_STORE(CT_POLICY_EVAL_CTX *ctx,
+void __cdecl CT_POLICY_EVAL_CTX_set_shared_CTLOG_STORE(CT_POLICY_EVAL_CTX *ctx,
                                                CTLOG_STORE *log_store)
 {
     ctx->log_store = log_store;
 }
 
-void CT_POLICY_EVAL_CTX_set_time(CT_POLICY_EVAL_CTX *ctx, uint64_t time_in_ms)
+void __cdecl CT_POLICY_EVAL_CTX_set_time(CT_POLICY_EVAL_CTX *ctx, uint64_t time_in_ms)
 {
     ctx->epoch_time_in_ms = time_in_ms;
 }
 
-X509* CT_POLICY_EVAL_CTX_get0_cert(const CT_POLICY_EVAL_CTX *ctx)
+X509* __cdecl CT_POLICY_EVAL_CTX_get0_cert(const CT_POLICY_EVAL_CTX *ctx)
 {
     return ctx->cert;
 }
 
-X509* CT_POLICY_EVAL_CTX_get0_issuer(const CT_POLICY_EVAL_CTX *ctx)
+X509* __cdecl CT_POLICY_EVAL_CTX_get0_issuer(const CT_POLICY_EVAL_CTX *ctx)
 {
     return ctx->issuer;
 }
 
-const CTLOG_STORE *CT_POLICY_EVAL_CTX_get0_log_store(const CT_POLICY_EVAL_CTX *ctx)
+const CTLOG_STORE * __cdecl CT_POLICY_EVAL_CTX_get0_log_store(const CT_POLICY_EVAL_CTX *ctx)
 {
     return ctx->log_store;
 }
 
-uint64_t CT_POLICY_EVAL_CTX_get_time(const CT_POLICY_EVAL_CTX *ctx)
+uint64_t __cdecl CT_POLICY_EVAL_CTX_get_time(const CT_POLICY_EVAL_CTX *ctx)
 {
     return ctx->epoch_time_in_ms;
 }
diff --git a/crypto/ct/ct_prn.c b/crypto/ct/ct_prn.c
index 376e04523e..1d96075d24 100644
--- a/crypto/ct/ct_prn.c
+++ b/crypto/ct/ct_prn.c
@@ -47,7 +47,7 @@ static void timestamp_print(uint64_t timestamp, BIO *out)
     ASN1_GENERALIZEDTIME_free(gen);
 }
 
-const char *SCT_validation_status_string(const SCT *sct)
+const char * __cdecl SCT_validation_status_string(const SCT *sct)
 {
 
     switch (SCT_get_validation_status(sct)) {
@@ -67,7 +67,7 @@ const char *SCT_validation_status_string(const SCT *sct)
     return "unknown status";
 }
 
-void SCT_print(const SCT *sct, BIO *out, int indent,
+void __cdecl SCT_print(const SCT *sct, BIO *out, int indent,
                const CTLOG_STORE *log_store)
 {
     const CTLOG *log = NULL;
@@ -111,7 +111,7 @@ void SCT_print(const SCT *sct, BIO *out, int indent,
     BIO_hex_string(out, indent + 16, 16, sct->sig, sct->sig_len);
 }
 
-void SCT_LIST_print(const STACK_OF(SCT) *sct_list, BIO *out, int indent,
+void __cdecl SCT_LIST_print(const STACK_OF(SCT) *sct_list, BIO *out, int indent,
                     const char *separator, const CTLOG_STORE *log_store)
 {
     int sct_count = sk_SCT_num(sct_list);
diff --git a/crypto/ct/ct_sct.c b/crypto/ct/ct_sct.c
index 1dc16857ba..7f209479ae 100644
--- a/crypto/ct/ct_sct.c
+++ b/crypto/ct/ct_sct.c
@@ -19,7 +19,7 @@
 
 #include "ct_locl.h"
 
-SCT *SCT_new(void)
+SCT * __cdecl SCT_new(void)
 {
     SCT *sct = OPENSSL_zalloc(sizeof(*sct));
 
@@ -33,7 +33,7 @@ SCT *SCT_new(void)
     return sct;
 }
 
-void SCT_free(SCT *sct)
+void __cdecl SCT_free(SCT *sct)
 {
     if (sct == NULL)
         return;
@@ -45,12 +45,12 @@ void SCT_free(SCT *sct)
     OPENSSL_free(sct);
 }
 
-void SCT_LIST_free(STACK_OF(SCT) *a)
+void __cdecl SCT_LIST_free(STACK_OF(SCT) *a)
 {
     sk_SCT_pop_free(a, SCT_free);
 }
 
-int SCT_set_version(SCT *sct, sct_version_t version)
+int __cdecl SCT_set_version(SCT *sct, sct_version_t version)
 {
     if (version != SCT_VERSION_V1) {
         CTerr(CT_F_SCT_SET_VERSION, CT_R_UNSUPPORTED_VERSION);
@@ -61,7 +61,7 @@ int SCT_set_version(SCT *sct, sct_version_t version)
     return 1;
 }
 
-int SCT_set_log_entry_type(SCT *sct, ct_log_entry_type_t entry_type)
+int __cdecl SCT_set_log_entry_type(SCT *sct, ct_log_entry_type_t entry_type)
 {
     sct->validation_status = SCT_VALIDATION_STATUS_NOT_SET;
 
@@ -77,7 +77,7 @@ int SCT_set_log_entry_type(SCT *sct, ct_log_entry_type_t entry_type)
     return 0;
 }
 
-int SCT_set0_log_id(SCT *sct, unsigned char *log_id, size_t log_id_len)
+int __cdecl SCT_set0_log_id(SCT *sct, unsigned char *log_id, size_t log_id_len)
 {
     if (sct->version == SCT_VERSION_V1 && log_id_len != CT_V1_HASHLEN) {
         CTerr(CT_F_SCT_SET0_LOG_ID, CT_R_INVALID_LOG_ID_LENGTH);
@@ -91,7 +91,7 @@ int SCT_set0_log_id(SCT *sct, unsigned char *log_id, size_t log_id_len)
     return 1;
 }
 
-int SCT_set1_log_id(SCT *sct, const unsigned char *log_id, size_t log_id_len)
+int __cdecl SCT_set1_log_id(SCT *sct, const unsigned char *log_id, size_t log_id_len)
 {
     if (sct->version == SCT_VERSION_V1 && log_id_len != CT_V1_HASHLEN) {
         CTerr(CT_F_SCT_SET1_LOG_ID, CT_R_INVALID_LOG_ID_LENGTH);
@@ -115,13 +115,13 @@ int SCT_set1_log_id(SCT *sct, const unsigned char *log_id, size_t log_id_len)
 }
 
 
-void SCT_set_timestamp(SCT *sct, uint64_t timestamp)
+void __cdecl SCT_set_timestamp(SCT *sct, uint64_t timestamp)
 {
     sct->timestamp = timestamp;
     sct->validation_status = SCT_VALIDATION_STATUS_NOT_SET;
 }
 
-int SCT_set_signature_nid(SCT *sct, int nid)
+int __cdecl SCT_set_signature_nid(SCT *sct, int nid)
 {
     switch (nid) {
     case NID_sha256WithRSAEncryption:
@@ -140,7 +140,7 @@ int SCT_set_signature_nid(SCT *sct, int nid)
     }
 }
 
-void SCT_set0_extensions(SCT *sct, unsigned char *ext, size_t ext_len)
+void __cdecl SCT_set0_extensions(SCT *sct, unsigned char *ext, size_t ext_len)
 {
     OPENSSL_free(sct->ext);
     sct->ext = ext;
@@ -148,7 +148,7 @@ void SCT_set0_extensions(SCT *sct, unsigned char *ext, size_t ext_len)
     sct->validation_status = SCT_VALIDATION_STATUS_NOT_SET;
 }
 
-int SCT_set1_extensions(SCT *sct, const unsigned char *ext, size_t ext_len)
+int __cdecl SCT_set1_extensions(SCT *sct, const unsigned char *ext, size_t ext_len)
 {
     OPENSSL_free(sct->ext);
     sct->ext = NULL;
@@ -166,7 +166,7 @@ int SCT_set1_extensions(SCT *sct, const unsigned char *ext, size_t ext_len)
     return 1;
 }
 
-void SCT_set0_signature(SCT *sct, unsigned char *sig, size_t sig_len)
+void __cdecl SCT_set0_signature(SCT *sct, unsigned char *sig, size_t sig_len)
 {
     OPENSSL_free(sct->sig);
     sct->sig = sig;
@@ -174,7 +174,7 @@ void SCT_set0_signature(SCT *sct, unsigned char *sig, size_t sig_len)
     sct->validation_status = SCT_VALIDATION_STATUS_NOT_SET;
 }
 
-int SCT_set1_signature(SCT *sct, const unsigned char *sig, size_t sig_len)
+int __cdecl SCT_set1_signature(SCT *sct, const unsigned char *sig, size_t sig_len)
 {
     OPENSSL_free(sct->sig);
     sct->sig = NULL;
@@ -192,28 +192,28 @@ int SCT_set1_signature(SCT *sct, const unsigned char *sig, size_t sig_len)
     return 1;
 }
 
-sct_version_t SCT_get_version(const SCT *sct)
+sct_version_t __cdecl SCT_get_version(const SCT *sct)
 {
     return sct->version;
 }
 
-ct_log_entry_type_t SCT_get_log_entry_type(const SCT *sct)
+ct_log_entry_type_t __cdecl SCT_get_log_entry_type(const SCT *sct)
 {
     return sct->entry_type;
 }
 
-size_t SCT_get0_log_id(const SCT *sct, unsigned char **log_id)
+size_t __cdecl SCT_get0_log_id(const SCT *sct, unsigned char **log_id)
 {
     *log_id = sct->log_id;
     return sct->log_id_len;
 }
 
-uint64_t SCT_get_timestamp(const SCT *sct)
+uint64_t __cdecl SCT_get_timestamp(const SCT *sct)
 {
     return sct->timestamp;
 }
 
-int SCT_get_signature_nid(const SCT *sct)
+int __cdecl SCT_get_signature_nid(const SCT *sct)
 {
     if (sct->version == SCT_VERSION_V1) {
         if (sct->hash_alg == TLSEXT_hash_sha256) {
@@ -230,13 +230,13 @@ int SCT_get_signature_nid(const SCT *sct)
     return NID_undef;
 }
 
-size_t SCT_get0_extensions(const SCT *sct, unsigned char **ext)
+size_t __cdecl SCT_get0_extensions(const SCT *sct, unsigned char **ext)
 {
     *ext = sct->ext;
     return sct->ext_len;
 }
 
-size_t SCT_get0_signature(const SCT *sct, unsigned char **sig)
+size_t __cdecl SCT_get0_signature(const SCT *sct, unsigned char **sig)
 {
     *sig = sct->sig;
     return sct->sig_len;
@@ -260,12 +260,12 @@ int SCT_signature_is_complete(const SCT *sct)
         sct->sig != NULL && sct->sig_len > 0;
 }
 
-sct_source_t SCT_get_source(const SCT *sct)
+sct_source_t __cdecl SCT_get_source(const SCT *sct)
 {
     return sct->source;
 }
 
-int SCT_set_source(SCT *sct, sct_source_t source)
+int __cdecl SCT_set_source(SCT *sct, sct_source_t source)
 {
     sct->source = source;
     sct->validation_status = SCT_VALIDATION_STATUS_NOT_SET;
@@ -282,12 +282,12 @@ int SCT_set_source(SCT *sct, sct_source_t source)
     return 1;
 }
 
-sct_validation_status_t SCT_get_validation_status(const SCT *sct)
+sct_validation_status_t __cdecl SCT_get_validation_status(const SCT *sct)
 {
     return sct->validation_status;
 }
 
-int SCT_validate(SCT *sct, const CT_POLICY_EVAL_CTX *ctx)
+int __cdecl SCT_validate(SCT *sct, const CT_POLICY_EVAL_CTX *ctx)
 {
     int is_sct_valid = -1;
     SCT_CTX *sctx = NULL;
@@ -373,7 +373,7 @@ err:
     return is_sct_valid;
 }
 
-int SCT_LIST_validate(const STACK_OF(SCT) *scts, CT_POLICY_EVAL_CTX *ctx)
+int __cdecl SCT_LIST_validate(const STACK_OF(SCT) *scts, CT_POLICY_EVAL_CTX *ctx)
 {
     int are_scts_valid = 1;
     int sct_count = scts != NULL ? sk_SCT_num(scts) : 0;
diff --git a/crypto/ct/ct_x509v3.c b/crypto/ct/ct_x509v3.c
index ec186d1f5b..2f321478a3 100644
--- a/crypto/ct/ct_x509v3.c
+++ b/crypto/ct/ct_x509v3.c
@@ -13,12 +13,12 @@
 
 #include "ct_locl.h"
 
-static char *i2s_poison(const X509V3_EXT_METHOD *method, void *val)
+static char * __cdecl i2s_poison(const X509V3_EXT_METHOD *method, void *val)
 {
     return OPENSSL_strdup("NULL");
 }
 
-static void *s2i_poison(const X509V3_EXT_METHOD *method, X509V3_CTX *ctx, const char *str)
+static void * __cdecl s2i_poison(const X509V3_EXT_METHOD *method, X509V3_CTX *ctx, const char *str)
 {
    return ASN1_NULL_new();
 }
diff --git a/crypto/cversion.c b/crypto/cversion.c
index 534e7eba55..dae679e43d 100644
--- a/crypto/cversion.c
+++ b/crypto/cversion.c
@@ -11,12 +11,12 @@
 
 #include "buildinf.h"
 
-unsigned long OpenSSL_version_num(void)
+unsigned long __cdecl OpenSSL_version_num(void)
 {
     return OPENSSL_VERSION_NUMBER;
 }
 
-const char *OpenSSL_version(int t)
+const char * __cdecl OpenSSL_version(int t)
 {
     switch (t) {
     case OPENSSL_VERSION:
diff --git a/crypto/des/cbc_cksm.c b/crypto/des/cbc_cksm.c
index 5a1f72f82d..08eb1daeae 100644
--- a/crypto/des/cbc_cksm.c
+++ b/crypto/des/cbc_cksm.c
@@ -9,7 +9,7 @@
 
 #include "des_locl.h"
 
-DES_LONG DES_cbc_cksum(const unsigned char *in, DES_cblock *output,
+DES_LONG __cdecl DES_cbc_cksum(const unsigned char *in, DES_cblock *output,
                        long length, DES_key_schedule *schedule,
                        const_DES_cblock *ivec)
 {
diff --git a/crypto/des/cfb64ede.c b/crypto/des/cfb64ede.c
index 21943f6143..5787e2e741 100644
--- a/crypto/des/cfb64ede.c
+++ b/crypto/des/cfb64ede.c
@@ -15,7 +15,7 @@
  * used is contained in *num;
  */
 
-void DES_ede3_cfb64_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl DES_ede3_cfb64_encrypt(const unsigned char *in, unsigned char *out,
                             long length, DES_key_schedule *ks1,
                             DES_key_schedule *ks2, DES_key_schedule *ks3,
                             DES_cblock *ivec, int *num, int enc)
@@ -82,7 +82,7 @@ void DES_ede3_cfb64_encrypt(const unsigned char *in, unsigned char *out,
  * not what EVP needs.
  */
 
-void DES_ede3_cfb_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl DES_ede3_cfb_encrypt(const unsigned char *in, unsigned char *out,
                           int numbits, long length, DES_key_schedule *ks1,
                           DES_key_schedule *ks2, DES_key_schedule *ks3,
                           DES_cblock *ivec, int enc)
diff --git a/crypto/des/cfb64enc.c b/crypto/des/cfb64enc.c
index 96de51b055..fe5494e048 100644
--- a/crypto/des/cfb64enc.c
+++ b/crypto/des/cfb64enc.c
@@ -15,7 +15,7 @@
  * used is contained in *num;
  */
 
-void DES_cfb64_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl DES_cfb64_encrypt(const unsigned char *in, unsigned char *out,
                        long length, DES_key_schedule *schedule,
                        DES_cblock *ivec, int *num, int enc)
 {
diff --git a/crypto/des/cfb_enc.c b/crypto/des/cfb_enc.c
index 544392e405..038cc0b5c2 100644
--- a/crypto/des/cfb_enc.c
+++ b/crypto/des/cfb_enc.c
@@ -21,7 +21,7 @@
  * Until Aug 1 2003 this function did not correctly implement CFB-r, so it
  * will not be compatible with any encryption prior to that date. Ben.
  */
-void DES_cfb_encrypt(const unsigned char *in, unsigned char *out, int numbits,
+void __cdecl DES_cfb_encrypt(const unsigned char *in, unsigned char *out, int numbits,
                      long length, DES_key_schedule *schedule,
                      DES_cblock *ivec, int enc)
 {
diff --git a/crypto/des/des_enc.c b/crypto/des/des_enc.c
index ed134ace8c..cc26900077 100644
--- a/crypto/des/des_enc.c
+++ b/crypto/des/des_enc.c
@@ -11,7 +11,7 @@
 #include "des_locl.h"
 #include "spr.h"
 
-void DES_encrypt1(DES_LONG *data, DES_key_schedule *ks, int enc)
+void __cdecl DES_encrypt1(DES_LONG *data, DES_key_schedule *ks, int enc)
 {
     register DES_LONG l, r, t, u;
     register DES_LONG *s;
@@ -82,7 +82,7 @@ void DES_encrypt1(DES_LONG *data, DES_key_schedule *ks, int enc)
     l = r = t = u = 0;
 }
 
-void DES_encrypt2(DES_LONG *data, DES_key_schedule *ks, int enc)
+void __cdecl DES_encrypt2(DES_LONG *data, DES_key_schedule *ks, int enc)
 {
     register DES_LONG l, r, t, u;
     register DES_LONG *s;
@@ -146,7 +146,7 @@ void DES_encrypt2(DES_LONG *data, DES_key_schedule *ks, int enc)
     l = r = t = u = 0;
 }
 
-void DES_encrypt3(DES_LONG *data, DES_key_schedule *ks1,
+void __cdecl DES_encrypt3(DES_LONG *data, DES_key_schedule *ks1,
                   DES_key_schedule *ks2, DES_key_schedule *ks3)
 {
     register DES_LONG l, r;
@@ -166,7 +166,7 @@ void DES_encrypt3(DES_LONG *data, DES_key_schedule *ks1,
     data[1] = r;
 }
 
-void DES_decrypt3(DES_LONG *data, DES_key_schedule *ks1,
+void __cdecl DES_decrypt3(DES_LONG *data, DES_key_schedule *ks1,
                   DES_key_schedule *ks2, DES_key_schedule *ks3)
 {
     register DES_LONG l, r;
@@ -191,7 +191,7 @@ void DES_decrypt3(DES_LONG *data, DES_key_schedule *ks1,
 # undef CBC_ENC_C__DONT_UPDATE_IV
 # include "ncbc_enc.c"          /* DES_ncbc_encrypt */
 
-void DES_ede3_cbc_encrypt(const unsigned char *input, unsigned char *output,
+void __cdecl DES_ede3_cbc_encrypt(const unsigned char *input, unsigned char *output,
                           long length, DES_key_schedule *ks1,
                           DES_key_schedule *ks2, DES_key_schedule *ks3,
                           DES_cblock *ivec, int enc)
diff --git a/crypto/des/ecb3_enc.c b/crypto/des/ecb3_enc.c
index 6ac89d4e78..87d36b06f2 100644
--- a/crypto/des/ecb3_enc.c
+++ b/crypto/des/ecb3_enc.c
@@ -9,7 +9,7 @@
 
 #include "des_locl.h"
 
-void DES_ecb3_encrypt(const_DES_cblock *input, DES_cblock *output,
+void __cdecl DES_ecb3_encrypt(const_DES_cblock *input, DES_cblock *output,
                       DES_key_schedule *ks1, DES_key_schedule *ks2,
                       DES_key_schedule *ks3, int enc)
 {
diff --git a/crypto/des/ecb_enc.c b/crypto/des/ecb_enc.c
index 5ed079d15f..96283d0b72 100644
--- a/crypto/des/ecb_enc.c
+++ b/crypto/des/ecb_enc.c
@@ -12,7 +12,7 @@
 #include <openssl/bio.h>
 
 
-const char *DES_options(void)
+const char * __cdecl DES_options(void)
 {
     static int init = 1;
     static char buf[12];
@@ -27,7 +27,7 @@ const char *DES_options(void)
     return buf;
 }
 
-void DES_ecb_encrypt(const_DES_cblock *input, DES_cblock *output,
+void __cdecl DES_ecb_encrypt(const_DES_cblock *input, DES_cblock *output,
                      DES_key_schedule *ks, int enc)
 {
     register DES_LONG l;
diff --git a/crypto/des/fcrypt.c b/crypto/des/fcrypt.c
index aaee4bf236..c398fcc879 100644
--- a/crypto/des/fcrypt.c
+++ b/crypto/des/fcrypt.c
@@ -55,7 +55,7 @@ static unsigned const char cov_2char[64] = {
     0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A
 };
 
-char *DES_crypt(const char *buf, const char *salt)
+char * __cdecl DES_crypt(const char *buf, const char *salt)
 {
     static char buff[14];
 
@@ -88,7 +88,7 @@ char *DES_crypt(const char *buf, const char *salt)
 #endif
 }
 
-char *DES_fcrypt(const char *buf, const char *salt, char *ret)
+char * __cdecl DES_fcrypt(const char *buf, const char *salt, char *ret)
 {
     unsigned int i, j, x, y;
     DES_LONG Eswap0, Eswap1;
diff --git a/crypto/des/ncbc_enc.c b/crypto/des/ncbc_enc.c
index 244f15ca2a..6143a3a46d 100644
--- a/crypto/des/ncbc_enc.c
+++ b/crypto/des/ncbc_enc.c
@@ -16,10 +16,10 @@
 #include "des_locl.h"
 
 #ifdef CBC_ENC_C__DONT_UPDATE_IV
-void DES_cbc_encrypt(const unsigned char *in, unsigned char *out, long length,
+void __cdecl DES_cbc_encrypt(const unsigned char *in, unsigned char *out, long length,
                      DES_key_schedule *_schedule, DES_cblock *ivec, int enc)
 #else
-void DES_ncbc_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl DES_ncbc_encrypt(const unsigned char *in, unsigned char *out,
                       long length, DES_key_schedule *_schedule,
                       DES_cblock *ivec, int enc)
 #endif
diff --git a/crypto/des/ofb64ede.c b/crypto/des/ofb64ede.c
index a551a07e0e..321c627aa3 100644
--- a/crypto/des/ofb64ede.c
+++ b/crypto/des/ofb64ede.c
@@ -14,7 +14,7 @@
  * The extra state information to record how much of the 64bit block we have
  * used is contained in *num;
  */
-void DES_ede3_ofb64_encrypt(register const unsigned char *in,
+void __cdecl DES_ede3_ofb64_encrypt(register const unsigned char *in,
                             register unsigned char *out, long length,
                             DES_key_schedule *k1, DES_key_schedule *k2,
                             DES_key_schedule *k3, DES_cblock *ivec, int *num)
diff --git a/crypto/des/ofb64enc.c b/crypto/des/ofb64enc.c
index 30976c871d..cd8bb4894a 100644
--- a/crypto/des/ofb64enc.c
+++ b/crypto/des/ofb64enc.c
@@ -14,7 +14,7 @@
  * The extra state information to record how much of the 64bit block we have
  * used is contained in *num;
  */
-void DES_ofb64_encrypt(register const unsigned char *in,
+void __cdecl DES_ofb64_encrypt(register const unsigned char *in,
                        register unsigned char *out, long length,
                        DES_key_schedule *schedule, DES_cblock *ivec, int *num)
 {
diff --git a/crypto/des/ofb_enc.c b/crypto/des/ofb_enc.c
index 65a9b8604d..03b3aa5f64 100644
--- a/crypto/des/ofb_enc.c
+++ b/crypto/des/ofb_enc.c
@@ -15,7 +15,7 @@
  * retrieved from the first byte and half the second.  The second 12 bits
  * will come from the 3rd and half the 4th byte.
  */
-void DES_ofb_encrypt(const unsigned char *in, unsigned char *out, int numbits,
+void __cdecl DES_ofb_encrypt(const unsigned char *in, unsigned char *out, int numbits,
                      long length, DES_key_schedule *schedule,
                      DES_cblock *ivec)
 {
diff --git a/crypto/des/pcbc_enc.c b/crypto/des/pcbc_enc.c
index 0fa058f03f..eef34b6503 100644
--- a/crypto/des/pcbc_enc.c
+++ b/crypto/des/pcbc_enc.c
@@ -9,7 +9,7 @@
 
 #include "des_locl.h"
 
-void DES_pcbc_encrypt(const unsigned char *input, unsigned char *output,
+void __cdecl DES_pcbc_encrypt(const unsigned char *input, unsigned char *output,
                       long length, DES_key_schedule *schedule,
                       DES_cblock *ivec, int enc)
 {
diff --git a/crypto/des/qud_cksm.c b/crypto/des/qud_cksm.c
index 81e6be8226..283914f386 100644
--- a/crypto/des/qud_cksm.c
+++ b/crypto/des/qud_cksm.c
@@ -24,7 +24,7 @@
 /* Got the value MIT uses via brute force :-) 2/10/90 eay */
 #define NOISE   ((DES_LONG)83653421L)
 
-DES_LONG DES_quad_cksum(const unsigned char *input, DES_cblock output[],
+DES_LONG __cdecl DES_quad_cksum(const unsigned char *input, DES_cblock output[],
                         long length, int out_count, DES_cblock *seed)
 {
     DES_LONG z0, z1, t0, t1;
diff --git a/crypto/des/rand_key.c b/crypto/des/rand_key.c
index fe8aefec37..1ae58a94ad 100644
--- a/crypto/des/rand_key.c
+++ b/crypto/des/rand_key.c
@@ -10,7 +10,7 @@
 #include <openssl/des.h>
 #include <openssl/rand.h>
 
-int DES_random_key(DES_cblock *ret)
+int __cdecl DES_random_key(DES_cblock *ret)
 {
     do {
         if (RAND_priv_bytes((unsigned char *)ret, sizeof(DES_cblock)) != 1)
diff --git a/crypto/des/set_key.c b/crypto/des/set_key.c
index adbad72362..bb9663f51e 100644
--- a/crypto/des/set_key.c
+++ b/crypto/des/set_key.c
@@ -50,7 +50,7 @@ static const unsigned char odd_parity[256] = {
     254
 };
 
-void DES_set_odd_parity(DES_cblock *key)
+void __cdecl DES_set_odd_parity(DES_cblock *key)
 {
     unsigned int i;
 
@@ -58,7 +58,7 @@ void DES_set_odd_parity(DES_cblock *key)
         (*key)[i] = odd_parity[(*key)[i]];
 }
 
-int DES_check_key_parity(const_DES_cblock *key)
+int __cdecl DES_check_key_parity(const_DES_cblock *key)
 {
     unsigned int i;
 
@@ -99,7 +99,7 @@ static const DES_cblock weak_keys[NUM_WEAK_KEY] = {
     {0xFE, 0xE0, 0xFE, 0xE0, 0xFE, 0xF1, 0xFE, 0xF1}
 };
 
-int DES_is_weak_key(const_DES_cblock *key)
+int __cdecl DES_is_weak_key(const_DES_cblock *key)
 {
     int i;
 
@@ -275,7 +275,7 @@ static const DES_LONG des_skb[8][64] = {
      }
 };
 
-int DES_set_key(const_DES_cblock *key, DES_key_schedule *schedule)
+int __cdecl DES_set_key(const_DES_cblock *key, DES_key_schedule *schedule)
 {
     if (DES_check_key) {
         return DES_set_key_checked(key, schedule);
@@ -290,7 +290,7 @@ int DES_set_key(const_DES_cblock *key, DES_key_schedule *schedule)
  * return -1 if key parity error,
  * return -2 if illegal weak key.
  */
-int DES_set_key_checked(const_DES_cblock *key, DES_key_schedule *schedule)
+int __cdecl DES_set_key_checked(const_DES_cblock *key, DES_key_schedule *schedule)
 {
     if (!DES_check_key_parity(key))
         return -1;
@@ -300,7 +300,7 @@ int DES_set_key_checked(const_DES_cblock *key, DES_key_schedule *schedule)
     return 0;
 }
 
-void DES_set_key_unchecked(const_DES_cblock *key, DES_key_schedule *schedule)
+void __cdecl DES_set_key_unchecked(const_DES_cblock *key, DES_key_schedule *schedule)
 {
     static const int shifts2[16] =
         { 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0 };
@@ -366,7 +366,7 @@ void DES_set_key_unchecked(const_DES_cblock *key, DES_key_schedule *schedule)
     }
 }
 
-int DES_key_sched(const_DES_cblock *key, DES_key_schedule *schedule)
+int __cdecl DES_key_sched(const_DES_cblock *key, DES_key_schedule *schedule)
 {
     return DES_set_key(key, schedule);
 }
diff --git a/crypto/des/str2key.c b/crypto/des/str2key.c
index e18d726522..0b290d9da5 100644
--- a/crypto/des/str2key.c
+++ b/crypto/des/str2key.c
@@ -10,7 +10,7 @@
 #include <openssl/crypto.h>
 #include "des_locl.h"
 
-void DES_string_to_key(const char *str, DES_cblock *key)
+void __cdecl DES_string_to_key(const char *str, DES_cblock *key)
 {
     DES_key_schedule ks;
     int i, length;
@@ -37,7 +37,7 @@ void DES_string_to_key(const char *str, DES_cblock *key)
     DES_set_odd_parity(key);
 }
 
-void DES_string_to_2keys(const char *str, DES_cblock *key1, DES_cblock *key2)
+void __cdecl DES_string_to_2keys(const char *str, DES_cblock *key1, DES_cblock *key2)
 {
     DES_key_schedule ks;
     int i, length;
diff --git a/crypto/des/xcbc_enc.c b/crypto/des/xcbc_enc.c
index c4e455d9b9..108e6d99af 100644
--- a/crypto/des/xcbc_enc.c
+++ b/crypto/des/xcbc_enc.c
@@ -11,7 +11,7 @@
 
 /* RSA's DESX */
 
-void DES_xcbc_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl DES_xcbc_encrypt(const unsigned char *in, unsigned char *out,
                       long length, DES_key_schedule *schedule,
                       DES_cblock *ivec, const_DES_cblock *inw,
                       const_DES_cblock *outw, int enc)
diff --git a/crypto/dh/dh_ameth.c b/crypto/dh/dh_ameth.c
index 05a1d4227e..2382b3e8a1 100644
--- a/crypto/dh/dh_ameth.c
+++ b/crypto/dh/dh_ameth.c
@@ -30,19 +30,19 @@ static DH *d2i_dhp(const EVP_PKEY *pkey, const unsigned char **pp,
     return d2i_DHparams(NULL, pp, length);
 }
 
-static int i2d_dhp(const EVP_PKEY *pkey, const DH *a, unsigned char **pp)
+static int __cdecl i2d_dhp(const EVP_PKEY *pkey, const DH *a, unsigned char **pp)
 {
     if (pkey->ameth == &dhx_asn1_meth)
         return i2d_DHxparams(a, pp);
     return i2d_DHparams(a, pp);
 }
 
-static void int_dh_free(EVP_PKEY *pkey)
+static void __cdecl int_dh_free(EVP_PKEY *pkey)
 {
     DH_free(pkey->pkey.dh);
 }
 
-static int dh_pub_decode(EVP_PKEY *pkey, X509_PUBKEY *pubkey)
+static int __cdecl dh_pub_decode(EVP_PKEY *pkey, X509_PUBKEY *pubkey)
 {
     const unsigned char *p, *pm;
     int pklen, pmlen;
@@ -94,7 +94,7 @@ static int dh_pub_decode(EVP_PKEY *pkey, X509_PUBKEY *pubkey)
 
 }
 
-static int dh_pub_encode(X509_PUBKEY *pk, const EVP_PKEY *pkey)
+static int __cdecl dh_pub_encode(X509_PUBKEY *pk, const EVP_PKEY *pkey)
 {
     DH *dh;
     int ptype;
@@ -147,7 +147,7 @@ static int dh_pub_encode(X509_PUBKEY *pk, const EVP_PKEY *pkey)
  * explicitly included and the pubkey must be recalculated.
  */
 
-static int dh_priv_decode(EVP_PKEY *pkey, const PKCS8_PRIV_KEY_INFO *p8)
+static int __cdecl dh_priv_decode(EVP_PKEY *pkey, const PKCS8_PRIV_KEY_INFO *p8)
 {
     const unsigned char *p, *pm;
     int pklen, pmlen;
@@ -199,7 +199,7 @@ static int dh_priv_decode(EVP_PKEY *pkey, const PKCS8_PRIV_KEY_INFO *p8)
     return 0;
 }
 
-static int dh_priv_encode(PKCS8_PRIV_KEY_INFO *p8, const EVP_PKEY *pkey)
+static int __cdecl dh_priv_encode(PKCS8_PRIV_KEY_INFO *p8, const EVP_PKEY *pkey)
 {
     ASN1_STRING *params = NULL;
     ASN1_INTEGER *prkey = NULL;
@@ -246,7 +246,7 @@ static int dh_priv_encode(PKCS8_PRIV_KEY_INFO *p8, const EVP_PKEY *pkey)
     return 0;
 }
 
-static int dh_param_decode(EVP_PKEY *pkey,
+static int __cdecl dh_param_decode(EVP_PKEY *pkey,
                            const unsigned char **pder, int derlen)
 {
     DH *dh;
@@ -259,12 +259,12 @@ static int dh_param_decode(EVP_PKEY *pkey,
     return 1;
 }
 
-static int dh_param_encode(const EVP_PKEY *pkey, unsigned char **pder)
+static int __cdecl dh_param_encode(const EVP_PKEY *pkey, unsigned char **pder)
 {
     return i2d_dhp(pkey, pkey->pkey.dh, pder);
 }
 
-static int do_dh_print(BIO *bp, const DH *x, int indent, int ptype)
+static int __cdecl do_dh_print(BIO *bp, const DH *x, int indent, int ptype)
 {
     int reason = ERR_R_BUF_LIB;
     const char *ktype = NULL;
@@ -344,22 +344,22 @@ static int do_dh_print(BIO *bp, const DH *x, int indent, int ptype)
     return 0;
 }
 
-static int int_dh_size(const EVP_PKEY *pkey)
+static int __cdecl int_dh_size(const EVP_PKEY *pkey)
 {
     return DH_size(pkey->pkey.dh);
 }
 
-static int dh_bits(const EVP_PKEY *pkey)
+static int __cdecl dh_bits(const EVP_PKEY *pkey)
 {
     return BN_num_bits(pkey->pkey.dh->p);
 }
 
-static int dh_security_bits(const EVP_PKEY *pkey)
+static int __cdecl dh_security_bits(const EVP_PKEY *pkey)
 {
     return DH_security_bits(pkey->pkey.dh);
 }
 
-static int dh_cmp_parameters(const EVP_PKEY *a, const EVP_PKEY *b)
+static int __cdecl dh_cmp_parameters(const EVP_PKEY *a, const EVP_PKEY *b)
 {
     if (BN_cmp(a->pkey.dh->p, b->pkey.dh->p) ||
         BN_cmp(a->pkey.dh->g, b->pkey.dh->g))
@@ -371,7 +371,7 @@ static int dh_cmp_parameters(const EVP_PKEY *a, const EVP_PKEY *b)
     return 1;
 }
 
-static int int_dh_bn_cpy(BIGNUM **dst, const BIGNUM *src)
+static int __cdecl int_dh_bn_cpy(BIGNUM **dst, const BIGNUM *src)
 {
     BIGNUM *a;
 
@@ -391,7 +391,7 @@ static int int_dh_bn_cpy(BIGNUM **dst, const BIGNUM *src)
     return 1;
 }
 
-static int int_dh_param_copy(DH *to, const DH *from, int is_x942)
+static int __cdecl int_dh_param_copy(DH *to, const DH *from, int is_x942)
 {
     if (is_x942 == -1)
         is_x942 = ! !from->q;
@@ -418,7 +418,7 @@ static int int_dh_param_copy(DH *to, const DH *from, int is_x942)
     return 1;
 }
 
-DH *DHparams_dup(DH *dh)
+DH * __cdecl DHparams_dup(DH *dh)
 {
     DH *ret;
     ret = DH_new();
@@ -431,7 +431,7 @@ DH *DHparams_dup(DH *dh)
     return ret;
 }
 
-static int dh_copy_parameters(EVP_PKEY *to, const EVP_PKEY *from)
+static int __cdecl dh_copy_parameters(EVP_PKEY *to, const EVP_PKEY *from)
 {
     if (to->pkey.dh == NULL) {
         to->pkey.dh = DH_new();
@@ -442,14 +442,14 @@ static int dh_copy_parameters(EVP_PKEY *to, const EVP_PKEY *from)
                              from->ameth == &dhx_asn1_meth);
 }
 
-static int dh_missing_parameters(const EVP_PKEY *a)
+static int __cdecl dh_missing_parameters(const EVP_PKEY *a)
 {
     if (a->pkey.dh == NULL || a->pkey.dh->p == NULL || a->pkey.dh->g == NULL)
         return 1;
     return 0;
 }
 
-static int dh_pub_cmp(const EVP_PKEY *a, const EVP_PKEY *b)
+static int __cdecl dh_pub_cmp(const EVP_PKEY *a, const EVP_PKEY *b)
 {
     if (dh_cmp_parameters(a, b) == 0)
         return 0;
@@ -459,35 +459,35 @@ static int dh_pub_cmp(const EVP_PKEY *a, const EVP_PKEY *b)
         return 1;
 }
 
-static int dh_param_print(BIO *bp, const EVP_PKEY *pkey, int indent,
+static int __cdecl dh_param_print(BIO *bp, const EVP_PKEY *pkey, int indent,
                           ASN1_PCTX *ctx)
 {
     return do_dh_print(bp, pkey->pkey.dh, indent, 0);
 }
 
-static int dh_public_print(BIO *bp, const EVP_PKEY *pkey, int indent,
+static int __cdecl dh_public_print(BIO *bp, const EVP_PKEY *pkey, int indent,
                            ASN1_PCTX *ctx)
 {
     return do_dh_print(bp, pkey->pkey.dh, indent, 1);
 }
 
-static int dh_private_print(BIO *bp, const EVP_PKEY *pkey, int indent,
+static int __cdecl dh_private_print(BIO *bp, const EVP_PKEY *pkey, int indent,
                             ASN1_PCTX *ctx)
 {
     return do_dh_print(bp, pkey->pkey.dh, indent, 2);
 }
 
-int DHparams_print(BIO *bp, const DH *x)
+int __cdecl DHparams_print(BIO *bp, const DH *x)
 {
     return do_dh_print(bp, x, 4, 0);
 }
 
 #ifndef OPENSSL_NO_CMS
-static int dh_cms_decrypt(CMS_RecipientInfo *ri);
-static int dh_cms_encrypt(CMS_RecipientInfo *ri);
+static int __cdecl dh_cms_decrypt(CMS_RecipientInfo *ri);
+static int __cdecl dh_cms_encrypt(CMS_RecipientInfo *ri);
 #endif
 
-static int dh_pkey_ctrl(EVP_PKEY *pkey, int op, long arg1, void *arg2)
+static int __cdecl dh_pkey_ctrl(EVP_PKEY *pkey, int op, long arg1, void *arg2)
 {
     switch (op) {
 #ifndef OPENSSL_NO_CMS
@@ -509,7 +509,7 @@ static int dh_pkey_ctrl(EVP_PKEY *pkey, int op, long arg1, void *arg2)
 
 }
 
-static int dh_pkey_public_check(const EVP_PKEY *pkey)
+static int __cdecl dh_pkey_public_check(const EVP_PKEY *pkey)
 {
     DH *dh = pkey->pkey.dh;
 
@@ -521,7 +521,7 @@ static int dh_pkey_public_check(const EVP_PKEY *pkey)
     return DH_check_pub_key_ex(dh, dh->pub_key);
 }
 
-static int dh_pkey_param_check(const EVP_PKEY *pkey)
+static int __cdecl dh_pkey_param_check(const EVP_PKEY *pkey)
 {
     DH *dh = pkey->pkey.dh;
 
@@ -608,7 +608,7 @@ const EVP_PKEY_ASN1_METHOD dhx_asn1_meth = {
 
 #ifndef OPENSSL_NO_CMS
 
-static int dh_cms_set_peerkey(EVP_PKEY_CTX *pctx,
+static int __cdecl dh_cms_set_peerkey(EVP_PKEY_CTX *pctx,
                               X509_ALGOR *alg, ASN1_BIT_STRING *pubkey)
 {
     const ASN1_OBJECT *aoid;
@@ -666,7 +666,7 @@ static int dh_cms_set_peerkey(EVP_PKEY_CTX *pctx,
     return rv;
 }
 
-static int dh_cms_set_shared_info(EVP_PKEY_CTX *pctx, CMS_RecipientInfo *ri)
+static int __cdecl dh_cms_set_shared_info(EVP_PKEY_CTX *pctx, CMS_RecipientInfo *ri)
 {
     int rv = 0;
 
@@ -743,7 +743,7 @@ static int dh_cms_set_shared_info(EVP_PKEY_CTX *pctx, CMS_RecipientInfo *ri)
     return rv;
 }
 
-static int dh_cms_decrypt(CMS_RecipientInfo *ri)
+static int __cdecl dh_cms_decrypt(CMS_RecipientInfo *ri)
 {
     EVP_PKEY_CTX *pctx;
     pctx = CMS_RecipientInfo_get0_pkey_ctx(ri);
@@ -771,7 +771,7 @@ static int dh_cms_decrypt(CMS_RecipientInfo *ri)
     return 1;
 }
 
-static int dh_cms_encrypt(CMS_RecipientInfo *ri)
+static int __cdecl dh_cms_encrypt(CMS_RecipientInfo *ri)
 {
     EVP_PKEY_CTX *pctx;
     EVP_PKEY *pkey;
diff --git a/crypto/dh/dh_asn1.c b/crypto/dh/dh_asn1.c
index 1a40633b48..812985b456 100644
--- a/crypto/dh/dh_asn1.c
+++ b/crypto/dh/dh_asn1.c
@@ -70,15 +70,15 @@ ASN1_SEQUENCE(DHxparams) = {
         ASN1_OPT(int_dhx942_dh, vparams, DHvparams),
 } static_ASN1_SEQUENCE_END_name(int_dhx942_dh, DHxparams)
 
-int_dhx942_dh *d2i_int_dhx(int_dhx942_dh **a,
+int_dhx942_dh * __cdecl d2i_int_dhx(int_dhx942_dh **a,
                            const unsigned char **pp, long length);
-int i2d_int_dhx(const int_dhx942_dh *a, unsigned char **pp);
+int __cdecl i2d_int_dhx(const int_dhx942_dh *a, unsigned char **pp);
 
 IMPLEMENT_ASN1_ENCODE_FUNCTIONS_const_fname(int_dhx942_dh, DHxparams, int_dhx)
 
 /* Application public function: read in X9.42 DH parameters into DH structure */
 
-DH *d2i_DHxparams(DH **a, const unsigned char **pp, long length)
+DH * __cdecl d2i_DHxparams(DH **a, const unsigned char **pp, long length)
 {
     int_dhx942_dh *dhx = NULL;
     DH *dh = NULL;
@@ -115,7 +115,7 @@ DH *d2i_DHxparams(DH **a, const unsigned char **pp, long length)
     return dh;
 }
 
-int i2d_DHxparams(const DH *dh, unsigned char **pp)
+int __cdecl i2d_DHxparams(const DH *dh, unsigned char **pp)
 {
     int_dhx942_dh dhx;
     int_dhvparams dhv;
diff --git a/crypto/dh/dh_check.c b/crypto/dh/dh_check.c
index d13d8206ce..6fd1ed4e24 100644
--- a/crypto/dh/dh_check.c
+++ b/crypto/dh/dh_check.c
@@ -20,7 +20,7 @@
  * p is odd
  * 1 < g < p - 1
  */
-int DH_check_params_ex(const DH *dh)
+int __cdecl DH_check_params_ex(const DH *dh)
 {
     int errflags = 0;
 
@@ -35,7 +35,7 @@ int DH_check_params_ex(const DH *dh)
     return errflags == 0;
 }
 
-int DH_check_params(const DH *dh, int *ret)
+int __cdecl DH_check_params(const DH *dh, int *ret)
 {
     int ok = 0;
     BIGNUM *tmp = NULL;
@@ -70,7 +70,7 @@ int DH_check_params(const DH *dh, int *ret)
  * Check that p is a safe prime and
  * g is a suitable generator.
  */
-int DH_check_ex(const DH *dh)
+int __cdecl DH_check_ex(const DH *dh)
 {
     int errflags = 0;
 
@@ -95,7 +95,7 @@ int DH_check_ex(const DH *dh)
     return errflags == 0;
 }
 
-int DH_check(const DH *dh, int *ret)
+int __cdecl DH_check(const DH *dh, int *ret)
 {
     int ok = 0, r;
     BN_CTX *ctx = NULL;
@@ -160,7 +160,7 @@ int DH_check(const DH *dh, int *ret)
     return ok;
 }
 
-int DH_check_pub_key_ex(const DH *dh, const BIGNUM *pub_key)
+int __cdecl DH_check_pub_key_ex(const DH *dh, const BIGNUM *pub_key)
 {
     int errflags = 0;
 
@@ -177,7 +177,7 @@ int DH_check_pub_key_ex(const DH *dh, const BIGNUM *pub_key)
     return errflags == 0;
 }
 
-int DH_check_pub_key(const DH *dh, const BIGNUM *pub_key, int *ret)
+int __cdecl DH_check_pub_key(const DH *dh, const BIGNUM *pub_key, int *ret)
 {
     int ok = 0;
     BIGNUM *tmp = NULL;
diff --git a/crypto/dh/dh_depr.c b/crypto/dh/dh_depr.c
index f8ed1b7461..6375cbf769 100644
--- a/crypto/dh/dh_depr.c
+++ b/crypto/dh/dh_depr.c
@@ -20,7 +20,7 @@ NON_EMPTY_TRANSLATION_UNIT
 # include <openssl/dh.h>
 
 DH *DH_generate_parameters(int prime_len, int generator,
-                           void (*callback) (int, int, void *), void *cb_arg)
+                           void (__cdecl *callback) (int, int, void *), void *cb_arg)
 {
     BN_GENCB *cb;
     DH *ret = NULL;
diff --git a/crypto/dh/dh_err.c b/crypto/dh/dh_err.c
index 7285587b4a..c0d1a0f856 100644
--- a/crypto/dh/dh_err.c
+++ b/crypto/dh/dh_err.c
@@ -89,7 +89,7 @@ static const ERR_STRING_DATA DH_str_reasons[] = {
 
 #endif
 
-int ERR_load_DH_strings(void)
+int __cdecl ERR_load_DH_strings(void)
 {
 #ifndef OPENSSL_NO_ERR
     if (ERR_func_error_string(DH_str_functs[0].error) == NULL) {
diff --git a/crypto/dh/dh_gen.c b/crypto/dh/dh_gen.c
index d293835eb2..20e3b0d4d7 100644
--- a/crypto/dh/dh_gen.c
+++ b/crypto/dh/dh_gen.c
@@ -20,7 +20,7 @@
 static int dh_builtin_genparams(DH *ret, int prime_len, int generator,
                                 BN_GENCB *cb);
 
-int DH_generate_parameters_ex(DH *ret, int prime_len, int generator,
+int __cdecl DH_generate_parameters_ex(DH *ret, int prime_len, int generator,
                               BN_GENCB *cb)
 {
     if (ret->meth->generate_params)
diff --git a/crypto/dh/dh_kdf.c b/crypto/dh/dh_kdf.c
index e17122bc82..1424edaa3e 100644
--- a/crypto/dh/dh_kdf.c
+++ b/crypto/dh/dh_kdf.c
@@ -95,7 +95,7 @@ static int dh_sharedinfo_encode(unsigned char **pder, unsigned char **pctr,
     return derlen;
 }
 
-int DH_KDF_X9_42(unsigned char *out, size_t outlen,
+int __cdecl DH_KDF_X9_42(unsigned char *out, size_t outlen,
                  const unsigned char *Z, size_t Zlen,
                  ASN1_OBJECT *key_oid,
                  const unsigned char *ukm, size_t ukmlen, const EVP_MD *md)
diff --git a/crypto/dh/dh_key.c b/crypto/dh/dh_key.c
index 718aa422d9..b9c2db48f2 100644
--- a/crypto/dh/dh_key.c
+++ b/crypto/dh/dh_key.c
@@ -12,25 +12,25 @@
 #include "dh_locl.h"
 #include "internal/bn_int.h"
 
-static int generate_key(DH *dh);
-static int compute_key(unsigned char *key, const BIGNUM *pub_key, DH *dh);
-static int dh_bn_mod_exp(const DH *dh, BIGNUM *r,
+static int __cdecl generate_key(DH *dh);
+static int __cdecl compute_key(unsigned char *key, const BIGNUM *pub_key, DH *dh);
+static int __cdecl dh_bn_mod_exp(const DH *dh, BIGNUM *r,
                          const BIGNUM *a, const BIGNUM *p,
                          const BIGNUM *m, BN_CTX *ctx, BN_MONT_CTX *m_ctx);
-static int dh_init(DH *dh);
-static int dh_finish(DH *dh);
+static int __cdecl dh_init(DH *dh);
+static int __cdecl dh_finish(DH *dh);
 
-int DH_generate_key(DH *dh)
+int __cdecl DH_generate_key(DH *dh)
 {
     return dh->meth->generate_key(dh);
 }
 
-int DH_compute_key(unsigned char *key, const BIGNUM *pub_key, DH *dh)
+int __cdecl DH_compute_key(unsigned char *key, const BIGNUM *pub_key, DH *dh)
 {
     return dh->meth->compute_key(key, pub_key, dh);
 }
 
-int DH_compute_key_padded(unsigned char *key, const BIGNUM *pub_key, DH *dh)
+int __cdecl DH_compute_key_padded(unsigned char *key, const BIGNUM *pub_key, DH *dh)
 {
     int rv, pad;
     rv = dh->meth->compute_key(key, pub_key, dh);
@@ -58,22 +58,22 @@ static DH_METHOD dh_ossl = {
 
 static const DH_METHOD *default_DH_method = &dh_ossl;
 
-const DH_METHOD *DH_OpenSSL(void)
+const DH_METHOD * __cdecl DH_OpenSSL(void)
 {
     return &dh_ossl;
 }
 
-void DH_set_default_method(const DH_METHOD *meth)
+void __cdecl DH_set_default_method(const DH_METHOD *meth)
 {
     default_DH_method = meth;
 }
 
-const DH_METHOD *DH_get_default_method(void)
+const DH_METHOD * __cdecl DH_get_default_method(void)
 {
     return default_DH_method;
 }
 
-static int generate_key(DH *dh)
+static int __cdecl generate_key(DH *dh)
 {
     int ok = 0;
     int generate_new_key = 0;
@@ -167,7 +167,7 @@ static int generate_key(DH *dh)
     return ok;
 }
 
-static int compute_key(unsigned char *key, const BIGNUM *pub_key, DH *dh)
+static int __cdecl compute_key(unsigned char *key, const BIGNUM *pub_key, DH *dh)
 {
     BN_CTX *ctx = NULL;
     BN_MONT_CTX *mont = NULL;
@@ -219,20 +219,20 @@ static int compute_key(unsigned char *key, const BIGNUM *pub_key, DH *dh)
     return ret;
 }
 
-static int dh_bn_mod_exp(const DH *dh, BIGNUM *r,
+static int __cdecl dh_bn_mod_exp(const DH *dh, BIGNUM *r,
                          const BIGNUM *a, const BIGNUM *p,
                          const BIGNUM *m, BN_CTX *ctx, BN_MONT_CTX *m_ctx)
 {
     return BN_mod_exp_mont(r, a, p, m, ctx, m_ctx);
 }
 
-static int dh_init(DH *dh)
+static int __cdecl dh_init(DH *dh)
 {
     dh->flags |= DH_FLAG_CACHE_MONT_P;
     return 1;
 }
 
-static int dh_finish(DH *dh)
+static int __cdecl dh_finish(DH *dh)
 {
     BN_MONT_CTX_free(dh->method_mont_p);
     return 1;
diff --git a/crypto/dh/dh_lib.c b/crypto/dh/dh_lib.c
index e7e7ef08e9..5b478956e6 100644
--- a/crypto/dh/dh_lib.c
+++ b/crypto/dh/dh_lib.c
@@ -14,7 +14,7 @@
 #include "dh_locl.h"
 #include <openssl/engine.h>
 
-int DH_set_method(DH *dh, const DH_METHOD *meth)
+int __cdecl DH_set_method(DH *dh, const DH_METHOD *meth)
 {
     /*
      * NB: The caller is specifically setting a method, so it's not up to us
@@ -34,12 +34,12 @@ int DH_set_method(DH *dh, const DH_METHOD *meth)
     return 1;
 }
 
-DH *DH_new(void)
+DH * __cdecl DH_new(void)
 {
     return DH_new_method(NULL);
 }
 
-DH *DH_new_method(ENGINE *engine)
+DH * __cdecl DH_new_method(ENGINE *engine)
 {
     DH *ret = OPENSSL_zalloc(sizeof(*ret));
 
@@ -93,7 +93,7 @@ DH *DH_new_method(ENGINE *engine)
     return NULL;
 }
 
-void DH_free(DH *r)
+void __cdecl DH_free(DH *r)
 {
     int i;
 
@@ -127,7 +127,7 @@ void DH_free(DH *r)
     OPENSSL_free(r);
 }
 
-int DH_up_ref(DH *r)
+int __cdecl DH_up_ref(DH *r)
 {
     int i;
 
@@ -139,27 +139,27 @@ int DH_up_ref(DH *r)
     return ((i > 1) ? 1 : 0);
 }
 
-int DH_set_ex_data(DH *d, int idx, void *arg)
+int __cdecl DH_set_ex_data(DH *d, int idx, void *arg)
 {
     return CRYPTO_set_ex_data(&d->ex_data, idx, arg);
 }
 
-void *DH_get_ex_data(DH *d, int idx)
+void * __cdecl DH_get_ex_data(DH *d, int idx)
 {
     return CRYPTO_get_ex_data(&d->ex_data, idx);
 }
 
-int DH_bits(const DH *dh)
+int __cdecl DH_bits(const DH *dh)
 {
     return BN_num_bits(dh->p);
 }
 
-int DH_size(const DH *dh)
+int __cdecl DH_size(const DH *dh)
 {
     return BN_num_bytes(dh->p);
 }
 
-int DH_security_bits(const DH *dh)
+int __cdecl DH_security_bits(const DH *dh)
 {
     int N;
     if (dh->q)
@@ -172,7 +172,7 @@ int DH_security_bits(const DH *dh)
 }
 
 
-void DH_get0_pqg(const DH *dh,
+void __cdecl DH_get0_pqg(const DH *dh,
                  const BIGNUM **p, const BIGNUM **q, const BIGNUM **g)
 {
     if (p != NULL)
@@ -183,7 +183,7 @@ void DH_get0_pqg(const DH *dh,
         *g = dh->g;
 }
 
-int DH_set0_pqg(DH *dh, BIGNUM *p, BIGNUM *q, BIGNUM *g)
+int __cdecl DH_set0_pqg(DH *dh, BIGNUM *p, BIGNUM *q, BIGNUM *g)
 {
     /* If the fields p and g in d are NULL, the corresponding input
      * parameters MUST be non-NULL.  q may remain NULL.
@@ -212,18 +212,18 @@ int DH_set0_pqg(DH *dh, BIGNUM *p, BIGNUM *q, BIGNUM *g)
     return 1;
 }
 
-long DH_get_length(const DH *dh)
+long __cdecl DH_get_length(const DH *dh)
 {
     return dh->length;
 }
 
-int DH_set_length(DH *dh, long length)
+int __cdecl DH_set_length(DH *dh, long length)
 {
     dh->length = length;
     return 1;
 }
 
-void DH_get0_key(const DH *dh, const BIGNUM **pub_key, const BIGNUM **priv_key)
+void __cdecl DH_get0_key(const DH *dh, const BIGNUM **pub_key, const BIGNUM **priv_key)
 {
     if (pub_key != NULL)
         *pub_key = dh->pub_key;
@@ -231,7 +231,7 @@ void DH_get0_key(const DH *dh, const BIGNUM **pub_key, const BIGNUM **priv_key)
         *priv_key = dh->priv_key;
 }
 
-int DH_set0_key(DH *dh, BIGNUM *pub_key, BIGNUM *priv_key)
+int __cdecl DH_set0_key(DH *dh, BIGNUM *pub_key, BIGNUM *priv_key)
 {
     if (pub_key != NULL) {
         BN_clear_free(dh->pub_key);
@@ -245,47 +245,47 @@ int DH_set0_key(DH *dh, BIGNUM *pub_key, BIGNUM *priv_key)
     return 1;
 }
 
-const BIGNUM *DH_get0_p(const DH *dh)
+const BIGNUM * __cdecl DH_get0_p(const DH *dh)
 {
     return dh->p;
 }
 
-const BIGNUM *DH_get0_q(const DH *dh)
+const BIGNUM * __cdecl DH_get0_q(const DH *dh)
 {
     return dh->q;
 }
 
-const BIGNUM *DH_get0_g(const DH *dh)
+const BIGNUM * __cdecl DH_get0_g(const DH *dh)
 {
     return dh->g;
 }
 
-const BIGNUM *DH_get0_priv_key(const DH *dh)
+const BIGNUM * __cdecl DH_get0_priv_key(const DH *dh)
 {
     return dh->priv_key;
 }
 
-const BIGNUM *DH_get0_pub_key(const DH *dh)
+const BIGNUM * __cdecl DH_get0_pub_key(const DH *dh)
 {
     return dh->pub_key;
 }
 
-void DH_clear_flags(DH *dh, int flags)
+void __cdecl DH_clear_flags(DH *dh, int flags)
 {
     dh->flags &= ~flags;
 }
 
-int DH_test_flags(const DH *dh, int flags)
+int __cdecl DH_test_flags(const DH *dh, int flags)
 {
     return dh->flags & flags;
 }
 
-void DH_set_flags(DH *dh, int flags)
+void __cdecl DH_set_flags(DH *dh, int flags)
 {
     dh->flags |= flags;
 }
 
-ENGINE *DH_get0_engine(DH *dh)
+ENGINE * __cdecl DH_get0_engine(DH *dh)
 {
     return dh->engine;
 }
diff --git a/crypto/dh/dh_locl.h b/crypto/dh/dh_locl.h
index 0a8391a6c0..c7474e6dc9 100644
--- a/crypto/dh/dh_locl.h
+++ b/crypto/dh/dh_locl.h
@@ -40,18 +40,18 @@ struct dh_st {
 struct dh_method {
     char *name;
     /* Methods here */
-    int (*generate_key) (DH *dh);
-    int (*compute_key) (unsigned char *key, const BIGNUM *pub_key, DH *dh);
+    int (__cdecl *generate_key) (DH *dh);
+    int (__cdecl *compute_key) (unsigned char *key, const BIGNUM *pub_key, DH *dh);
 
     /* Can be null */
-    int (*bn_mod_exp) (const DH *dh, BIGNUM *r, const BIGNUM *a,
+    int (__cdecl *bn_mod_exp) (const DH *dh, BIGNUM *r, const BIGNUM *a,
                        const BIGNUM *p, const BIGNUM *m, BN_CTX *ctx,
                        BN_MONT_CTX *m_ctx);
-    int (*init) (DH *dh);
-    int (*finish) (DH *dh);
+    int (__cdecl *init) (DH *dh);
+    int (__cdecl *finish) (DH *dh);
     int flags;
     char *app_data;
     /* If this is non-NULL, it will be used to generate parameters */
-    int (*generate_params) (DH *dh, int prime_len, int generator,
+    int (__cdecl *generate_params) (DH *dh, int prime_len, int generator,
                             BN_GENCB *cb);
 };
diff --git a/crypto/dh/dh_meth.c b/crypto/dh/dh_meth.c
index 59c4d7e967..84c955c35e 100644
--- a/crypto/dh/dh_meth.c
+++ b/crypto/dh/dh_meth.c
@@ -11,7 +11,7 @@
 #include <string.h>
 #include <openssl/err.h>
 
-DH_METHOD *DH_meth_new(const char *name, int flags)
+DH_METHOD * __cdecl DH_meth_new(const char *name, int flags)
 {
     DH_METHOD *dhm = OPENSSL_zalloc(sizeof(*dhm));
 
@@ -29,7 +29,7 @@ DH_METHOD *DH_meth_new(const char *name, int flags)
     return NULL;
 }
 
-void DH_meth_free(DH_METHOD *dhm)
+void __cdecl DH_meth_free(DH_METHOD *dhm)
 {
     if (dhm != NULL) {
         OPENSSL_free(dhm->name);
@@ -37,7 +37,7 @@ void DH_meth_free(DH_METHOD *dhm)
     }
 }
 
-DH_METHOD *DH_meth_dup(const DH_METHOD *dhm)
+DH_METHOD * __cdecl DH_meth_dup(const DH_METHOD *dhm)
 {
     DH_METHOD *ret = OPENSSL_malloc(sizeof(*ret));
 
@@ -55,12 +55,12 @@ DH_METHOD *DH_meth_dup(const DH_METHOD *dhm)
     return NULL;
 }
 
-const char *DH_meth_get0_name(const DH_METHOD *dhm)
+const char * __cdecl DH_meth_get0_name(const DH_METHOD *dhm)
 {
     return dhm->name;
 }
 
-int DH_meth_set1_name(DH_METHOD *dhm, const char *name)
+int __cdecl DH_meth_set1_name(DH_METHOD *dhm, const char *name)
 {
     char *tmpname = OPENSSL_strdup(name);
 
@@ -75,98 +75,97 @@ int DH_meth_set1_name(DH_METHOD *dhm, const char *name)
     return 1;
 }
 
-int DH_meth_get_flags(const DH_METHOD *dhm)
+int __cdecl DH_meth_get_flags(const DH_METHOD *dhm)
 {
     return dhm->flags;
 }
 
-int DH_meth_set_flags(DH_METHOD *dhm, int flags)
+int __cdecl DH_meth_set_flags(DH_METHOD *dhm, int flags)
 {
     dhm->flags = flags;
     return 1;
 }
 
-void *DH_meth_get0_app_data(const DH_METHOD *dhm)
+void * __cdecl DH_meth_get0_app_data(const DH_METHOD *dhm)
 {
     return dhm->app_data;
 }
 
-int DH_meth_set0_app_data(DH_METHOD *dhm, void *app_data)
+int __cdecl DH_meth_set0_app_data(DH_METHOD *dhm, void *app_data)
 {
     dhm->app_data = app_data;
     return 1;
 }
 
-int (*DH_meth_get_generate_key(const DH_METHOD *dhm)) (DH *)
+int (__cdecl *DH_meth_get_generate_key(const DH_METHOD *dhm)) (DH *)
 {
     return dhm->generate_key;
 }
 
-int DH_meth_set_generate_key(DH_METHOD *dhm, int (*generate_key) (DH *))
+int __cdecl DH_meth_set_generate_key(DH_METHOD *dhm, int (__cdecl *generate_key) (DH *))
 {
     dhm->generate_key = generate_key;
     return 1;
 }
 
-int (*DH_meth_get_compute_key(const DH_METHOD *dhm))
+int (__cdecl *DH_meth_get_compute_key(const DH_METHOD *dhm))
         (unsigned char *key, const BIGNUM *pub_key, DH *dh)
 {
     return dhm->compute_key;
 }
 
-int DH_meth_set_compute_key(DH_METHOD *dhm,
-        int (*compute_key) (unsigned char *key, const BIGNUM *pub_key, DH *dh))
+int __cdecl DH_meth_set_compute_key(DH_METHOD *dhm,
+        int (__cdecl *compute_key) (unsigned char *key, const BIGNUM *pub_key, DH *dh))
 {
     dhm->compute_key = compute_key;
     return 1;
 }
 
-
-int (*DH_meth_get_bn_mod_exp(const DH_METHOD *dhm))
+int (__cdecl *DH_meth_get_bn_mod_exp(const DH_METHOD *dhm))
     (const DH *, BIGNUM *, const BIGNUM *, const BIGNUM *, const BIGNUM *,
      BN_CTX *, BN_MONT_CTX *)
 {
     return dhm->bn_mod_exp;
 }
 
-int DH_meth_set_bn_mod_exp(DH_METHOD *dhm,
-    int (*bn_mod_exp) (const DH *, BIGNUM *, const BIGNUM *, const BIGNUM *,
+int __cdecl DH_meth_set_bn_mod_exp(DH_METHOD *dhm,
+    int (__cdecl *bn_mod_exp) (const DH *, BIGNUM *, const BIGNUM *, const BIGNUM *,
                        const BIGNUM *, BN_CTX *, BN_MONT_CTX *))
 {
     dhm->bn_mod_exp = bn_mod_exp;
     return 1;
 }
 
-int (*DH_meth_get_init(const DH_METHOD *dhm))(DH *)
+int (__cdecl *DH_meth_get_init(const DH_METHOD *dhm))(DH *)
 {
     return dhm->init;
 }
 
-int DH_meth_set_init(DH_METHOD *dhm, int (*init)(DH *))
+int __cdecl DH_meth_set_init(DH_METHOD *dhm, int (__cdecl *init)(DH *))
 {
     dhm->init = init;
     return 1;
 }
 
-int (*DH_meth_get_finish(const DH_METHOD *dhm)) (DH *)
+int (__cdecl *DH_meth_get_finish(const DH_METHOD *dhm)) (DH *)
 {
     return dhm->finish;
 }
 
-int DH_meth_set_finish(DH_METHOD *dhm, int (*finish) (DH *))
+int __cdecl DH_meth_set_finish(DH_METHOD *dhm, int (__cdecl *finish) (DH *))
 {
     dhm->finish = finish;
     return 1;
 }
 
-int (*DH_meth_get_generate_params(const DH_METHOD *dhm))
+int (__cdecl *DH_meth_get_generate_params(const DH_METHOD *dhm))
         (DH *, int, int, BN_GENCB *)
 {
     return dhm->generate_params;
 }
 
-int DH_meth_set_generate_params(DH_METHOD *dhm,
-        int (*generate_params) (DH *, int, int, BN_GENCB *))
+int __cdecl DH_meth_set_generate_params(DH_METHOD *dhm,
+        int (__cdecl *generate_params) (DH *, int, int, BN_GENCB *))
 {
     dhm->generate_params = generate_params;
     return 1;
diff --git a/crypto/dh/dh_pmeth.c b/crypto/dh/dh_pmeth.c
index 568831f1c2..fe1b1f63b5 100644
--- a/crypto/dh/dh_pmeth.c
+++ b/crypto/dh/dh_pmeth.c
@@ -46,7 +46,7 @@ typedef struct {
     size_t kdf_outlen;
 } DH_PKEY_CTX;
 
-static int pkey_dh_init(EVP_PKEY_CTX *ctx)
+static int __cdecl pkey_dh_init(EVP_PKEY_CTX *ctx)
 {
     DH_PKEY_CTX *dctx;
 
@@ -66,7 +66,7 @@ static int pkey_dh_init(EVP_PKEY_CTX *ctx)
     return 1;
 }
 
-static void pkey_dh_cleanup(EVP_PKEY_CTX *ctx)
+static void __cdecl pkey_dh_cleanup(EVP_PKEY_CTX *ctx)
 {
     DH_PKEY_CTX *dctx = ctx->data;
     if (dctx != NULL) {
@@ -77,7 +77,7 @@ static void pkey_dh_cleanup(EVP_PKEY_CTX *ctx)
 }
 
 
-static int pkey_dh_copy(EVP_PKEY_CTX *dst, EVP_PKEY_CTX *src)
+static int __cdecl pkey_dh_copy(EVP_PKEY_CTX *dst, EVP_PKEY_CTX *src)
 {
     DH_PKEY_CTX *dctx, *sctx;
     if (!pkey_dh_init(dst))
@@ -108,7 +108,7 @@ static int pkey_dh_copy(EVP_PKEY_CTX *dst, EVP_PKEY_CTX *src)
     return 1;
 }
 
-static int pkey_dh_ctrl(EVP_PKEY_CTX *ctx, int type, int p1, void *p2)
+static int __cdecl pkey_dh_ctrl(EVP_PKEY_CTX *ctx, int type, int p1, void *p2)
 {
     DH_PKEY_CTX *dctx = ctx->data;
     switch (type) {
@@ -219,7 +219,7 @@ static int pkey_dh_ctrl(EVP_PKEY_CTX *ctx, int type, int p1, void *p2)
     }
 }
 
-static int pkey_dh_ctrl_str(EVP_PKEY_CTX *ctx,
+static int __cdecl pkey_dh_ctrl_str(EVP_PKEY_CTX *ctx,
                             const char *type, const char *value)
 {
     if (strcmp(type, "dh_paramgen_prime_len") == 0) {
@@ -272,13 +272,13 @@ static int pkey_dh_ctrl_str(EVP_PKEY_CTX *ctx,
 
 #ifndef OPENSSL_NO_DSA
 
-extern int dsa_builtin_paramgen(DSA *ret, size_t bits, size_t qbits,
+extern int __cdecl dsa_builtin_paramgen(DSA *ret, size_t bits, size_t qbits,
                                 const EVP_MD *evpmd,
                                 const unsigned char *seed_in, size_t seed_len,
                                 unsigned char *seed_out, int *counter_ret,
                                 unsigned long *h_ret, BN_GENCB *cb);
 
-extern int dsa_builtin_paramgen2(DSA *ret, size_t L, size_t N,
+extern int __cdecl dsa_builtin_paramgen2(DSA *ret, size_t L, size_t N,
                                  const EVP_MD *evpmd,
                                  const unsigned char *seed_in,
                                  size_t seed_len, int idx,
@@ -324,7 +324,7 @@ static DSA *dsa_dh_generate(DH_PKEY_CTX *dctx, BN_GENCB *pcb)
 
 #endif
 
-static int pkey_dh_paramgen(EVP_PKEY_CTX *ctx, EVP_PKEY *pkey)
+static int __cdecl pkey_dh_paramgen(EVP_PKEY_CTX *ctx, EVP_PKEY *pkey)
 {
     DH *dh = NULL;
     DH_PKEY_CTX *dctx = ctx->data;
@@ -395,7 +395,7 @@ static int pkey_dh_paramgen(EVP_PKEY_CTX *ctx, EVP_PKEY *pkey)
     return ret;
 }
 
-static int pkey_dh_keygen(EVP_PKEY_CTX *ctx, EVP_PKEY *pkey)
+static int __cdecl pkey_dh_keygen(EVP_PKEY_CTX *ctx, EVP_PKEY *pkey)
 {
     DH_PKEY_CTX *dctx = ctx->data;
     DH *dh = NULL;
@@ -417,7 +417,7 @@ static int pkey_dh_keygen(EVP_PKEY_CTX *ctx, EVP_PKEY *pkey)
     return DH_generate_key(pkey->pkey.dh);
 }
 
-static int pkey_dh_derive(EVP_PKEY_CTX *ctx, unsigned char *key,
+static int __cdecl pkey_dh_derive(EVP_PKEY_CTX *ctx, unsigned char *key,
                           size_t *keylen)
 {
     int ret;
diff --git a/crypto/dh/dh_prn.c b/crypto/dh/dh_prn.c
index aab1733db3..a92bc8c4f0 100644
--- a/crypto/dh/dh_prn.c
+++ b/crypto/dh/dh_prn.c
@@ -13,7 +13,7 @@
 #include <openssl/dh.h>
 
 #ifndef OPENSSL_NO_STDIO
-int DHparams_print_fp(FILE *fp, const DH *x)
+int __cdecl DHparams_print_fp(FILE *fp, const DH *x)
 {
     BIO *b;
     int ret;
diff --git a/crypto/dh/dh_rfc5114.c b/crypto/dh/dh_rfc5114.c
index c4a219590e..da0aa66125 100644
--- a/crypto/dh/dh_rfc5114.c
+++ b/crypto/dh/dh_rfc5114.c
@@ -20,7 +20,7 @@
  */
 
 #define make_dh(x) \
-DH *DH_get_##x(void) \
+DH * __cdecl DH_get_##x(void) \
 { \
     DH *dh = DH_new(); \
 \
diff --git a/crypto/dh/dh_rfc7919.c b/crypto/dh/dh_rfc7919.c
index a54b468e55..1395473199 100644
--- a/crypto/dh/dh_rfc7919.c
+++ b/crypto/dh/dh_rfc7919.c
@@ -25,7 +25,7 @@ static DH *dh_param_init(const BIGNUM *p, int32_t nbits)
     return dh;
 }
 
-DH *DH_new_by_nid(int nid)
+DH * __cdecl DH_new_by_nid(int nid)
 {
     switch (nid) {
     case NID_ffdhe2048:
@@ -44,7 +44,7 @@ DH *DH_new_by_nid(int nid)
     }
 }
 
-int DH_get_nid(const DH *dh)
+int __cdecl DH_get_nid(const DH *dh)
 {
     int nid;
 
diff --git a/crypto/dsa/dsa_ameth.c b/crypto/dsa/dsa_ameth.c
index 49aa1ae23b..60e33fdd2e 100644
--- a/crypto/dsa/dsa_ameth.c
+++ b/crypto/dsa/dsa_ameth.c
@@ -17,7 +17,7 @@
 #include "internal/asn1_int.h"
 #include "internal/evp_int.h"
 
-static int dsa_pub_decode(EVP_PKEY *pkey, X509_PUBKEY *pubkey)
+static int __cdecl dsa_pub_decode(EVP_PKEY *pkey, X509_PUBKEY *pubkey)
 {
     const unsigned char *p, *pm;
     int pklen, pmlen;
@@ -74,7 +74,7 @@ static int dsa_pub_decode(EVP_PKEY *pkey, X509_PUBKEY *pubkey)
 
 }
 
-static int dsa_pub_encode(X509_PUBKEY *pk, const EVP_PKEY *pkey)
+static int __cdecl dsa_pub_encode(X509_PUBKEY *pk, const EVP_PKEY *pkey)
 {
     DSA *dsa;
     int ptype;
@@ -134,7 +134,7 @@ static int dsa_pub_encode(X509_PUBKEY *pk, const EVP_PKEY *pkey)
  * AlgorithmIdentifier the pubkey must be recalculated.
  */
 
-static int dsa_priv_decode(EVP_PKEY *pkey, const PKCS8_PRIV_KEY_INFO *p8)
+static int __cdecl dsa_priv_decode(EVP_PKEY *pkey, const PKCS8_PRIV_KEY_INFO *p8)
 {
     const unsigned char *p, *pm;
     int pklen, pmlen;
@@ -200,7 +200,7 @@ static int dsa_priv_decode(EVP_PKEY *pkey, const PKCS8_PRIV_KEY_INFO *p8)
     return ret;
 }
 
-static int dsa_priv_encode(PKCS8_PRIV_KEY_INFO *p8, const EVP_PKEY *pkey)
+static int __cdecl dsa_priv_encode(PKCS8_PRIV_KEY_INFO *p8, const EVP_PKEY *pkey)
 {
     ASN1_STRING *params = NULL;
     ASN1_INTEGER *prkey = NULL;
@@ -252,22 +252,22 @@ static int dsa_priv_encode(PKCS8_PRIV_KEY_INFO *p8, const EVP_PKEY *pkey)
     return 0;
 }
 
-static int int_dsa_size(const EVP_PKEY *pkey)
+static int __cdecl int_dsa_size(const EVP_PKEY *pkey)
 {
     return DSA_size(pkey->pkey.dsa);
 }
 
-static int dsa_bits(const EVP_PKEY *pkey)
+static int __cdecl dsa_bits(const EVP_PKEY *pkey)
 {
     return DSA_bits(pkey->pkey.dsa);
 }
 
-static int dsa_security_bits(const EVP_PKEY *pkey)
+static int __cdecl dsa_security_bits(const EVP_PKEY *pkey)
 {
     return DSA_security_bits(pkey->pkey.dsa);
 }
 
-static int dsa_missing_parameters(const EVP_PKEY *pkey)
+static int __cdecl dsa_missing_parameters(const EVP_PKEY *pkey)
 {
     DSA *dsa;
     dsa = pkey->pkey.dsa;
@@ -276,7 +276,7 @@ static int dsa_missing_parameters(const EVP_PKEY *pkey)
     return 0;
 }
 
-static int dsa_copy_parameters(EVP_PKEY *to, const EVP_PKEY *from)
+static int __cdecl dsa_copy_parameters(EVP_PKEY *to, const EVP_PKEY *from)
 {
     BIGNUM *a;
 
@@ -303,7 +303,7 @@ static int dsa_copy_parameters(EVP_PKEY *to, const EVP_PKEY *from)
     return 1;
 }
 
-static int dsa_cmp_parameters(const EVP_PKEY *a, const EVP_PKEY *b)
+static int __cdecl dsa_cmp_parameters(const EVP_PKEY *a, const EVP_PKEY *b)
 {
     if (BN_cmp(a->pkey.dsa->p, b->pkey.dsa->p) ||
         BN_cmp(a->pkey.dsa->q, b->pkey.dsa->q) ||
@@ -313,7 +313,7 @@ static int dsa_cmp_parameters(const EVP_PKEY *a, const EVP_PKEY *b)
         return 1;
 }
 
-static int dsa_pub_cmp(const EVP_PKEY *a, const EVP_PKEY *b)
+static int __cdecl dsa_pub_cmp(const EVP_PKEY *a, const EVP_PKEY *b)
 {
     if (BN_cmp(b->pkey.dsa->pub_key, a->pkey.dsa->pub_key) != 0)
         return 0;
@@ -321,12 +321,12 @@ static int dsa_pub_cmp(const EVP_PKEY *a, const EVP_PKEY *b)
         return 1;
 }
 
-static void int_dsa_free(EVP_PKEY *pkey)
+static void __cdecl int_dsa_free(EVP_PKEY *pkey)
 {
     DSA_free(pkey->pkey.dsa);
 }
 
-static int do_dsa_print(BIO *bp, const DSA *x, int off, int ptype)
+static int __cdecl do_dsa_print(BIO *bp, const DSA *x, int off, int ptype)
 {
     int ret = 0;
     const char *ktype = NULL;
@@ -372,7 +372,7 @@ static int do_dsa_print(BIO *bp, const DSA *x, int off, int ptype)
     return ret;
 }
 
-static int dsa_param_decode(EVP_PKEY *pkey,
+static int __cdecl dsa_param_decode(EVP_PKEY *pkey,
                             const unsigned char **pder, int derlen)
 {
     DSA *dsa;
@@ -385,30 +385,30 @@ static int dsa_param_decode(EVP_PKEY *pkey,
     return 1;
 }
 
-static int dsa_param_encode(const EVP_PKEY *pkey, unsigned char **pder)
+static int __cdecl dsa_param_encode(const EVP_PKEY *pkey, unsigned char **pder)
 {
     return i2d_DSAparams(pkey->pkey.dsa, pder);
 }
 
-static int dsa_param_print(BIO *bp, const EVP_PKEY *pkey, int indent,
+static int __cdecl dsa_param_print(BIO *bp, const EVP_PKEY *pkey, int indent,
                            ASN1_PCTX *ctx)
 {
     return do_dsa_print(bp, pkey->pkey.dsa, indent, 0);
 }
 
-static int dsa_pub_print(BIO *bp, const EVP_PKEY *pkey, int indent,
+static int __cdecl dsa_pub_print(BIO *bp, const EVP_PKEY *pkey, int indent,
                          ASN1_PCTX *ctx)
 {
     return do_dsa_print(bp, pkey->pkey.dsa, indent, 1);
 }
 
-static int dsa_priv_print(BIO *bp, const EVP_PKEY *pkey, int indent,
+static int __cdecl dsa_priv_print(BIO *bp, const EVP_PKEY *pkey, int indent,
                           ASN1_PCTX *ctx)
 {
     return do_dsa_print(bp, pkey->pkey.dsa, indent, 2);
 }
 
-static int old_dsa_priv_decode(EVP_PKEY *pkey,
+static int __cdecl old_dsa_priv_decode(EVP_PKEY *pkey,
                                const unsigned char **pder, int derlen)
 {
     DSA *dsa;
@@ -421,12 +421,12 @@ static int old_dsa_priv_decode(EVP_PKEY *pkey,
     return 1;
 }
 
-static int old_dsa_priv_encode(const EVP_PKEY *pkey, unsigned char **pder)
+static int __cdecl old_dsa_priv_encode(const EVP_PKEY *pkey, unsigned char **pder)
 {
     return i2d_DSAPrivateKey(pkey->pkey.dsa, pder);
 }
 
-static int dsa_sig_print(BIO *bp, const X509_ALGOR *sigalg,
+static int __cdecl dsa_sig_print(BIO *bp, const X509_ALGOR *sigalg,
                          const ASN1_STRING *sig, int indent, ASN1_PCTX *pctx)
 {
     DSA_SIG *dsa_sig;
@@ -461,7 +461,7 @@ static int dsa_sig_print(BIO *bp, const X509_ALGOR *sigalg,
     return X509_signature_dump(bp, sig, indent);
 }
 
-static int dsa_pkey_ctrl(EVP_PKEY *pkey, int op, long arg1, void *arg2)
+static int __cdecl dsa_pkey_ctrl(EVP_PKEY *pkey, int op, long arg1, void *arg2)
 {
     switch (op) {
     case ASN1_PKEY_CTRL_PKCS7_SIGN:
diff --git a/crypto/dsa/dsa_asn1.c b/crypto/dsa/dsa_asn1.c
index 6499e87ef3..6212c3abae 100644
--- a/crypto/dsa/dsa_asn1.c
+++ b/crypto/dsa/dsa_asn1.c
@@ -21,7 +21,7 @@ ASN1_SEQUENCE(DSA_SIG) = {
 
 IMPLEMENT_ASN1_ENCODE_FUNCTIONS_const_fname(DSA_SIG, DSA_SIG, DSA_SIG)
 
-DSA_SIG *DSA_SIG_new(void)
+DSA_SIG * __cdecl DSA_SIG_new(void)
 {
     DSA_SIG *sig = OPENSSL_zalloc(sizeof(*sig));
     if (sig == NULL)
@@ -29,7 +29,7 @@ DSA_SIG *DSA_SIG_new(void)
     return sig;
 }
 
-void DSA_SIG_free(DSA_SIG *sig)
+void __cdecl DSA_SIG_free(DSA_SIG *sig)
 {
     if (sig == NULL)
         return;
@@ -38,7 +38,7 @@ void DSA_SIG_free(DSA_SIG *sig)
     OPENSSL_free(sig);
 }
 
-void DSA_SIG_get0(const DSA_SIG *sig, const BIGNUM **pr, const BIGNUM **ps)
+void __cdecl DSA_SIG_get0(const DSA_SIG *sig, const BIGNUM **pr, const BIGNUM **ps)
 {
     if (pr != NULL)
         *pr = sig->r;
@@ -46,7 +46,7 @@ void DSA_SIG_get0(const DSA_SIG *sig, const BIGNUM **pr, const BIGNUM **ps)
         *ps = sig->s;
 }
 
-int DSA_SIG_set0(DSA_SIG *sig, BIGNUM *r, BIGNUM *s)
+int __cdecl DSA_SIG_set0(DSA_SIG *sig, BIGNUM *r, BIGNUM *s)
 {
     if (r == NULL || s == NULL)
         return 0;
@@ -102,12 +102,12 @@ ASN1_SEQUENCE_cb(DSAPublicKey, dsa_cb) = {
 
 IMPLEMENT_ASN1_ENCODE_FUNCTIONS_const_fname(DSA, DSAPublicKey, DSAPublicKey)
 
-DSA *DSAparams_dup(DSA *dsa)
+DSA * __cdecl DSAparams_dup(DSA *dsa)
 {
     return ASN1_item_dup(ASN1_ITEM_rptr(DSAparams), dsa);
 }
 
-int DSA_sign(int type, const unsigned char *dgst, int dlen,
+int __cdecl DSA_sign(int type, const unsigned char *dgst, int dlen,
              unsigned char *sig, unsigned int *siglen, DSA *dsa)
 {
     DSA_SIG *s;
@@ -129,7 +129,7 @@ int DSA_sign(int type, const unsigned char *dgst, int dlen,
  *      0: incorrect signature
  *     -1: error
  */
-int DSA_verify(int type, const unsigned char *dgst, int dgst_len,
+int __cdecl DSA_verify(int type, const unsigned char *dgst, int dgst_len,
                const unsigned char *sigbuf, int siglen, DSA *dsa)
 {
     DSA_SIG *s;
diff --git a/crypto/dsa/dsa_depr.c b/crypto/dsa/dsa_depr.c
index f51aea7497..1c8f8ae7dc 100644
--- a/crypto/dsa/dsa_depr.c
+++ b/crypto/dsa/dsa_depr.c
@@ -35,7 +35,7 @@ NON_EMPTY_TRANSLATION_UNIT
 DSA *DSA_generate_parameters(int bits,
                              unsigned char *seed_in, int seed_len,
                              int *counter_ret, unsigned long *h_ret,
-                             void (*callback) (int, int, void *),
+                             void (__cdecl *callback) (int, int, void *),
                              void *cb_arg)
 {
     BN_GENCB *cb;
diff --git a/crypto/dsa/dsa_err.c b/crypto/dsa/dsa_err.c
index 8dcf0548ac..5503fc2534 100644
--- a/crypto/dsa/dsa_err.c
+++ b/crypto/dsa/dsa_err.c
@@ -66,7 +66,7 @@ static const ERR_STRING_DATA DSA_str_reasons[] = {
 
 #endif
 
-int ERR_load_DSA_strings(void)
+int __cdecl ERR_load_DSA_strings(void)
 {
 #ifndef OPENSSL_NO_ERR
     if (ERR_func_error_string(DSA_str_functs[0].error) == NULL) {
diff --git a/crypto/dsa/dsa_gen.c b/crypto/dsa/dsa_gen.c
index af59a582b5..0f5f5ba182 100644
--- a/crypto/dsa/dsa_gen.c
+++ b/crypto/dsa/dsa_gen.c
@@ -23,7 +23,7 @@
 #include <openssl/sha.h>
 #include "dsa_locl.h"
 
-int DSA_generate_parameters_ex(DSA *ret, int bits,
+int __cdecl DSA_generate_parameters_ex(DSA *ret, int bits,
                                const unsigned char *seed_in, int seed_len,
                                int *counter_ret, unsigned long *h_ret,
                                BN_GENCB *cb)
@@ -41,7 +41,7 @@ int DSA_generate_parameters_ex(DSA *ret, int bits,
     }
 }
 
-int dsa_builtin_paramgen(DSA *ret, size_t bits, size_t qbits,
+int __cdecl dsa_builtin_paramgen(DSA *ret, size_t bits, size_t qbits,
                          const EVP_MD *evpmd, const unsigned char *seed_in,
                          size_t seed_len, unsigned char *seed_out,
                          int *counter_ret, unsigned long *h_ret, BN_GENCB *cb)
@@ -303,7 +303,7 @@ int dsa_builtin_paramgen(DSA *ret, size_t bits, size_t qbits,
  * described in FIPS 186-3.
  */
 
-int dsa_builtin_paramgen2(DSA *ret, size_t L, size_t N,
+int __cdecl dsa_builtin_paramgen2(DSA *ret, size_t L, size_t N,
                           const EVP_MD *evpmd, const unsigned char *seed_in,
                           size_t seed_len, int idx, unsigned char *seed_out,
                           int *counter_ret, unsigned long *h_ret,
diff --git a/crypto/dsa/dsa_key.c b/crypto/dsa/dsa_key.c
index a48af58492..7e5140c1bf 100644
--- a/crypto/dsa/dsa_key.c
+++ b/crypto/dsa/dsa_key.c
@@ -15,7 +15,7 @@
 
 static int dsa_builtin_keygen(DSA *dsa);
 
-int DSA_generate_key(DSA *dsa)
+int __cdecl DSA_generate_key(DSA *dsa)
 {
     if (dsa->meth->dsa_keygen)
         return dsa->meth->dsa_keygen(dsa);
diff --git a/crypto/dsa/dsa_lib.c b/crypto/dsa/dsa_lib.c
index 1048601beb..686d1c6532 100644
--- a/crypto/dsa/dsa_lib.c
+++ b/crypto/dsa/dsa_lib.c
@@ -16,12 +16,12 @@
 #include <openssl/engine.h>
 #include <openssl/dh.h>
 
-DSA *DSA_new(void)
+DSA * __cdecl DSA_new(void)
 {
     return DSA_new_method(NULL);
 }
 
-int DSA_set_method(DSA *dsa, const DSA_METHOD *meth)
+int __cdecl DSA_set_method(DSA *dsa, const DSA_METHOD *meth)
 {
     /*
      * NB: The caller is specifically setting a method, so it's not up to us
@@ -41,12 +41,12 @@ int DSA_set_method(DSA *dsa, const DSA_METHOD *meth)
     return 1;
 }
 
-const DSA_METHOD *DSA_get_method(DSA *d)
+const DSA_METHOD * __cdecl DSA_get_method(DSA *d)
 {
     return d->meth;
 }
 
-DSA *DSA_new_method(ENGINE *engine)
+DSA * __cdecl DSA_new_method(ENGINE *engine)
 {
     DSA *ret = OPENSSL_zalloc(sizeof(*ret));
 
@@ -100,7 +100,7 @@ DSA *DSA_new_method(ENGINE *engine)
     return NULL;
 }
 
-void DSA_free(DSA *r)
+void __cdecl DSA_free(DSA *r)
 {
     int i;
 
@@ -131,7 +131,7 @@ void DSA_free(DSA *r)
     OPENSSL_free(r);
 }
 
-int DSA_up_ref(DSA *r)
+int __cdecl DSA_up_ref(DSA *r)
 {
     int i;
 
@@ -143,7 +143,7 @@ int DSA_up_ref(DSA *r)
     return ((i > 1) ? 1 : 0);
 }
 
-int DSA_size(const DSA *r)
+int __cdecl DSA_size(const DSA *r)
 {
     int ret, i;
     ASN1_INTEGER bs;
@@ -165,17 +165,17 @@ int DSA_size(const DSA *r)
     return ret;
 }
 
-int DSA_set_ex_data(DSA *d, int idx, void *arg)
+int __cdecl DSA_set_ex_data(DSA *d, int idx, void *arg)
 {
     return CRYPTO_set_ex_data(&d->ex_data, idx, arg);
 }
 
-void *DSA_get_ex_data(DSA *d, int idx)
+void * __cdecl DSA_get_ex_data(DSA *d, int idx)
 {
     return CRYPTO_get_ex_data(&d->ex_data, idx);
 }
 
-int DSA_security_bits(const DSA *d)
+int __cdecl DSA_security_bits(const DSA *d)
 {
     if (d->p && d->q)
         return BN_security_bits(BN_num_bits(d->p), BN_num_bits(d->q));
@@ -183,7 +183,7 @@ int DSA_security_bits(const DSA *d)
 }
 
 #ifndef OPENSSL_NO_DH
-DH *DSA_dup_DH(const DSA *r)
+DH * __cdecl DSA_dup_DH(const DSA *r)
 {
     /*
      * DSA has p, q, g, optional pub_key, optional priv_key. DH has p,
@@ -240,7 +240,7 @@ DH *DSA_dup_DH(const DSA *r)
 }
 #endif
 
-void DSA_get0_pqg(const DSA *d,
+void __cdecl DSA_get0_pqg(const DSA *d,
                   const BIGNUM **p, const BIGNUM **q, const BIGNUM **g)
 {
     if (p != NULL)
@@ -251,7 +251,7 @@ void DSA_get0_pqg(const DSA *d,
         *g = d->g;
 }
 
-int DSA_set0_pqg(DSA *d, BIGNUM *p, BIGNUM *q, BIGNUM *g)
+int __cdecl DSA_set0_pqg(DSA *d, BIGNUM *p, BIGNUM *q, BIGNUM *g)
 {
     /* If the fields p, q and g in d are NULL, the corresponding input
      * parameters MUST be non-NULL.
@@ -277,7 +277,7 @@ int DSA_set0_pqg(DSA *d, BIGNUM *p, BIGNUM *q, BIGNUM *g)
     return 1;
 }
 
-void DSA_get0_key(const DSA *d,
+void __cdecl DSA_get0_key(const DSA *d,
                   const BIGNUM **pub_key, const BIGNUM **priv_key)
 {
     if (pub_key != NULL)
@@ -286,7 +286,7 @@ void DSA_get0_key(const DSA *d,
         *priv_key = d->priv_key;
 }
 
-int DSA_set0_key(DSA *d, BIGNUM *pub_key, BIGNUM *priv_key)
+int __cdecl DSA_set0_key(DSA *d, BIGNUM *pub_key, BIGNUM *priv_key)
 {
     /* If the field pub_key in d is NULL, the corresponding input
      * parameters MUST be non-NULL.  The priv_key field may
@@ -307,52 +307,52 @@ int DSA_set0_key(DSA *d, BIGNUM *pub_key, BIGNUM *priv_key)
     return 1;
 }
 
-const BIGNUM *DSA_get0_p(const DSA *d)
+const BIGNUM * __cdecl DSA_get0_p(const DSA *d)
 {
     return d->p;
 }
 
-const BIGNUM *DSA_get0_q(const DSA *d)
+const BIGNUM * __cdecl DSA_get0_q(const DSA *d)
 {
     return d->q;
 }
 
-const BIGNUM *DSA_get0_g(const DSA *d)
+const BIGNUM * __cdecl DSA_get0_g(const DSA *d)
 {
     return d->g;
 }
 
-const BIGNUM *DSA_get0_pub_key(const DSA *d)
+const BIGNUM * __cdecl DSA_get0_pub_key(const DSA *d)
 {
     return d->pub_key;
 }
 
-const BIGNUM *DSA_get0_priv_key(const DSA *d)
+const BIGNUM * __cdecl DSA_get0_priv_key(const DSA *d)
 {
     return d->priv_key;
 }
 
-void DSA_clear_flags(DSA *d, int flags)
+void __cdecl DSA_clear_flags(DSA *d, int flags)
 {
     d->flags &= ~flags;
 }
 
-int DSA_test_flags(const DSA *d, int flags)
+int __cdecl DSA_test_flags(const DSA *d, int flags)
 {
     return d->flags & flags;
 }
 
-void DSA_set_flags(DSA *d, int flags)
+void __cdecl DSA_set_flags(DSA *d, int flags)
 {
     d->flags |= flags;
 }
 
-ENGINE *DSA_get0_engine(DSA *d)
+ENGINE * __cdecl DSA_get0_engine(DSA *d)
 {
     return d->engine;
 }
 
-int DSA_bits(const DSA *dsa)
+int __cdecl DSA_bits(const DSA *dsa)
 {
     return BN_num_bits(dsa->p);
 }
diff --git a/crypto/dsa/dsa_locl.h b/crypto/dsa/dsa_locl.h
index a81a4b4978..42ef08e7cc 100644
--- a/crypto/dsa/dsa_locl.h
+++ b/crypto/dsa/dsa_locl.h
@@ -40,37 +40,37 @@ struct DSA_SIG_st {
 
 struct dsa_method {
     char *name;
-    DSA_SIG *(*dsa_do_sign) (const unsigned char *dgst, int dlen, DSA *dsa);
-    int (*dsa_sign_setup) (DSA *dsa, BN_CTX *ctx_in, BIGNUM **kinvp,
+    DSA_SIG *(__cdecl *dsa_do_sign) (const unsigned char *dgst, int dlen, DSA *dsa);
+    int (__cdecl *dsa_sign_setup) (DSA *dsa, BN_CTX *ctx_in, BIGNUM **kinvp,
                            BIGNUM **rp);
-    int (*dsa_do_verify) (const unsigned char *dgst, int dgst_len,
+    int (__cdecl *dsa_do_verify) (const unsigned char *dgst, int dgst_len,
                           DSA_SIG *sig, DSA *dsa);
-    int (*dsa_mod_exp) (DSA *dsa, BIGNUM *rr, const BIGNUM *a1,
+    int (__cdecl *dsa_mod_exp) (DSA *dsa, BIGNUM *rr, const BIGNUM *a1,
                         const BIGNUM *p1, const BIGNUM *a2, const BIGNUM *p2,
                         const BIGNUM *m, BN_CTX *ctx, BN_MONT_CTX *in_mont);
     /* Can be null */
-    int (*bn_mod_exp) (DSA *dsa, BIGNUM *r, const BIGNUM *a, const BIGNUM *p,
+    int (__cdecl *bn_mod_exp) (DSA *dsa, BIGNUM *r, const BIGNUM *a, const BIGNUM *p,
                        const BIGNUM *m, BN_CTX *ctx, BN_MONT_CTX *m_ctx);
-    int (*init) (DSA *dsa);
-    int (*finish) (DSA *dsa);
+    int (__cdecl *init) (DSA *dsa);
+    int (__cdecl *finish) (DSA *dsa);
     int flags;
     void *app_data;
     /* If this is non-NULL, it is used to generate DSA parameters */
-    int (*dsa_paramgen) (DSA *dsa, int bits,
+    int (__cdecl *dsa_paramgen) (DSA *dsa, int bits,
                          const unsigned char *seed, int seed_len,
                          int *counter_ret, unsigned long *h_ret,
                          BN_GENCB *cb);
     /* If this is non-NULL, it is used to generate DSA keys */
-    int (*dsa_keygen) (DSA *dsa);
+    int (__cdecl *dsa_keygen) (DSA *dsa);
 };
 
-int dsa_builtin_paramgen(DSA *ret, size_t bits, size_t qbits,
+int __cdecl dsa_builtin_paramgen(DSA *ret, size_t bits, size_t qbits,
                          const EVP_MD *evpmd, const unsigned char *seed_in,
                          size_t seed_len, unsigned char *seed_out,
                          int *counter_ret, unsigned long *h_ret,
                          BN_GENCB *cb);
 
-int dsa_builtin_paramgen2(DSA *ret, size_t L, size_t N,
+int __cdecl dsa_builtin_paramgen2(DSA *ret, size_t L, size_t N,
                           const EVP_MD *evpmd, const unsigned char *seed_in,
                           size_t seed_len, int idx, unsigned char *seed_out,
                           int *counter_ret, unsigned long *h_ret,
diff --git a/crypto/dsa/dsa_meth.c b/crypto/dsa/dsa_meth.c
index ff4fae44a7..311aa03fd8 100644
--- a/crypto/dsa/dsa_meth.c
+++ b/crypto/dsa/dsa_meth.c
@@ -19,7 +19,7 @@
 #include <string.h>
 #include <openssl/err.h>
 
-DSA_METHOD *DSA_meth_new(const char *name, int flags)
+DSA_METHOD * __cdecl DSA_meth_new(const char *name, int flags)
 {
     DSA_METHOD *dsam = OPENSSL_zalloc(sizeof(*dsam));
 
@@ -37,7 +37,7 @@ DSA_METHOD *DSA_meth_new(const char *name, int flags)
     return NULL;
 }
 
-void DSA_meth_free(DSA_METHOD *dsam)
+void __cdecl DSA_meth_free(DSA_METHOD *dsam)
 {
     if (dsam != NULL) {
         OPENSSL_free(dsam->name);
@@ -45,7 +45,7 @@ void DSA_meth_free(DSA_METHOD *dsam)
     }
 }
 
-DSA_METHOD *DSA_meth_dup(const DSA_METHOD *dsam)
+DSA_METHOD * __cdecl DSA_meth_dup(const DSA_METHOD *dsam)
 {
     DSA_METHOD *ret = OPENSSL_malloc(sizeof(*ret));
 
@@ -63,12 +63,12 @@ DSA_METHOD *DSA_meth_dup(const DSA_METHOD *dsam)
     return NULL;
 }
 
-const char *DSA_meth_get0_name(const DSA_METHOD *dsam)
+const char * __cdecl DSA_meth_get0_name(const DSA_METHOD *dsam)
 {
     return dsam->name;
 }
 
-int DSA_meth_set1_name(DSA_METHOD *dsam, const char *name)
+int __cdecl DSA_meth_set1_name(DSA_METHOD *dsam, const char *name)
 {
     char *tmpname = OPENSSL_strdup(name);
 
@@ -83,76 +83,76 @@ int DSA_meth_set1_name(DSA_METHOD *dsam, const char *name)
     return 1;
 }
 
-int DSA_meth_get_flags(const DSA_METHOD *dsam)
+int __cdecl DSA_meth_get_flags(const DSA_METHOD *dsam)
 {
     return dsam->flags;
 }
 
-int DSA_meth_set_flags(DSA_METHOD *dsam, int flags)
+int __cdecl DSA_meth_set_flags(DSA_METHOD *dsam, int flags)
 {
     dsam->flags = flags;
     return 1;
 }
 
-void *DSA_meth_get0_app_data(const DSA_METHOD *dsam)
+void * __cdecl DSA_meth_get0_app_data(const DSA_METHOD *dsam)
 {
     return dsam->app_data;
 }
 
-int DSA_meth_set0_app_data(DSA_METHOD *dsam, void *app_data)
+int __cdecl DSA_meth_set0_app_data(DSA_METHOD *dsam, void *app_data)
 {
     dsam->app_data = app_data;
     return 1;
 }
 
-DSA_SIG *(*DSA_meth_get_sign(const DSA_METHOD *dsam))
+DSA_SIG *(__cdecl *DSA_meth_get_sign(const DSA_METHOD *dsam))
         (const unsigned char *, int, DSA *)
 {
     return dsam->dsa_do_sign;
 }
 
-int DSA_meth_set_sign(DSA_METHOD *dsam,
-                       DSA_SIG *(*sign) (const unsigned char *, int, DSA *))
+int __cdecl DSA_meth_set_sign(DSA_METHOD *dsam,
+                       DSA_SIG *(__cdecl *sign) (const unsigned char *, int, DSA *))
 {
     dsam->dsa_do_sign = sign;
     return 1;
 }
 
-int (*DSA_meth_get_sign_setup(const DSA_METHOD *dsam))
+int (__cdecl *DSA_meth_get_sign_setup(const DSA_METHOD *dsam))
         (DSA *, BN_CTX *, BIGNUM **, BIGNUM **)
 {
     return dsam->dsa_sign_setup;
 }
 
-int DSA_meth_set_sign_setup(DSA_METHOD *dsam,
-        int (*sign_setup) (DSA *, BN_CTX *, BIGNUM **, BIGNUM **))
+int __cdecl DSA_meth_set_sign_setup(DSA_METHOD *dsam,
+        int (__cdecl *sign_setup) (DSA *, BN_CTX *, BIGNUM **, BIGNUM **))
 {
     dsam->dsa_sign_setup = sign_setup;
     return 1;
 }
 
-int (*DSA_meth_get_verify(const DSA_METHOD *dsam))
+int (__cdecl *DSA_meth_get_verify(const DSA_METHOD *dsam))
         (const unsigned char *, int, DSA_SIG *, DSA *)
 {
     return dsam->dsa_do_verify;
 }
 
-int DSA_meth_set_verify(DSA_METHOD *dsam,
-    int (*verify) (const unsigned char *, int, DSA_SIG *, DSA *))
+int __cdecl DSA_meth_set_verify(DSA_METHOD *dsam,
+    int (__cdecl *verify) (const unsigned char *, int, DSA_SIG *, DSA *))
 {
     dsam->dsa_do_verify = verify;
     return 1;
 }
 
-int (*DSA_meth_get_mod_exp(const DSA_METHOD *dsam))
+int (__cdecl *DSA_meth_get_mod_exp(const DSA_METHOD *dsam))
         (DSA *, BIGNUM *, const BIGNUM *, const BIGNUM *, const BIGNUM *,
          const BIGNUM *, const BIGNUM *, BN_CTX *, BN_MONT_CTX *)
 {
     return dsam->dsa_mod_exp;
 }
 
-int DSA_meth_set_mod_exp(DSA_METHOD *dsam,
-    int (*mod_exp) (DSA *, BIGNUM *, const BIGNUM *, const BIGNUM *,
+int __cdecl DSA_meth_set_mod_exp(DSA_METHOD *dsam,
+    int (__cdecl *mod_exp) (DSA *, BIGNUM *, const BIGNUM *, const BIGNUM *,
                     const BIGNUM *, const BIGNUM *, const BIGNUM *, BN_CTX *,
                     BN_MONT_CTX *))
 {
@@ -160,64 +160,64 @@ int DSA_meth_set_mod_exp(DSA_METHOD *dsam,
     return 1;
 }
 
-int (*DSA_meth_get_bn_mod_exp(const DSA_METHOD *dsam))
+int (__cdecl *DSA_meth_get_bn_mod_exp(const DSA_METHOD *dsam))
     (DSA *, BIGNUM *, const BIGNUM *, const BIGNUM *, const BIGNUM *, BN_CTX *,
      BN_MONT_CTX *)
 {
     return dsam->bn_mod_exp;
 }
 
-int DSA_meth_set_bn_mod_exp(DSA_METHOD *dsam,
-    int (*bn_mod_exp) (DSA *, BIGNUM *, const BIGNUM *, const BIGNUM *,
+int __cdecl DSA_meth_set_bn_mod_exp(DSA_METHOD *dsam,
+    int (__cdecl *bn_mod_exp) (DSA *, BIGNUM *, const BIGNUM *, const BIGNUM *,
                        const BIGNUM *, BN_CTX *, BN_MONT_CTX *))
 {
     dsam->bn_mod_exp = bn_mod_exp;
     return 1;
 }
 
-int (*DSA_meth_get_init(const DSA_METHOD *dsam))(DSA *)
+int (__cdecl *DSA_meth_get_init(const DSA_METHOD *dsam))(DSA *)
 {
     return dsam->init;
 }
 
-int DSA_meth_set_init(DSA_METHOD *dsam, int (*init)(DSA *))
+int __cdecl DSA_meth_set_init(DSA_METHOD *dsam, int (__cdecl *init)(DSA *))
 {
     dsam->init = init;
     return 1;
 }
 
-int (*DSA_meth_get_finish(const DSA_METHOD *dsam)) (DSA *)
+int (__cdecl *DSA_meth_get_finish(const DSA_METHOD *dsam)) (DSA *)
 {
     return dsam->finish;
 }
 
-int DSA_meth_set_finish(DSA_METHOD *dsam, int (*finish) (DSA *))
+int __cdecl DSA_meth_set_finish(DSA_METHOD *dsam, int (__cdecl *finish) (DSA *))
 {
     dsam->finish = finish;
     return 1;
 }
 
-int (*DSA_meth_get_paramgen(const DSA_METHOD *dsam))
+int (__cdecl *DSA_meth_get_paramgen(const DSA_METHOD *dsam))
         (DSA *, int, const unsigned char *, int, int *, unsigned long *,
          BN_GENCB *)
 {
     return dsam->dsa_paramgen;
 }
 
-int DSA_meth_set_paramgen(DSA_METHOD *dsam,
-        int (*paramgen) (DSA *, int, const unsigned char *, int, int *,
+int __cdecl DSA_meth_set_paramgen(DSA_METHOD *dsam,
+        int (__cdecl *paramgen) (DSA *, int, const unsigned char *, int, int *,
                          unsigned long *, BN_GENCB *))
 {
     dsam->dsa_paramgen = paramgen;
     return 1;
 }
 
-int (*DSA_meth_get_keygen(const DSA_METHOD *dsam)) (DSA *)
+int (__cdecl *DSA_meth_get_keygen(const DSA_METHOD *dsam)) (DSA *)
 {
     return dsam->dsa_keygen;
 }
 
-int DSA_meth_set_keygen(DSA_METHOD *dsam, int (*keygen) (DSA *))
+int __cdecl DSA_meth_set_keygen(DSA_METHOD *dsam, int (__cdecl *keygen) (DSA *))
 {
     dsam->dsa_keygen = keygen;
     return 1;
diff --git a/crypto/dsa/dsa_ossl.c b/crypto/dsa/dsa_ossl.c
index 16161dcadf..93b94ed1d6 100644
--- a/crypto/dsa/dsa_ossl.c
+++ b/crypto/dsa/dsa_ossl.c
@@ -15,16 +15,16 @@
 #include "dsa_locl.h"
 #include <openssl/asn1.h>
 
-static DSA_SIG *dsa_do_sign(const unsigned char *dgst, int dlen, DSA *dsa);
-static int dsa_sign_setup_no_digest(DSA *dsa, BN_CTX *ctx_in, BIGNUM **kinvp,
+static DSA_SIG * __cdecl dsa_do_sign(const unsigned char *dgst, int dlen, DSA *dsa);
+static int __cdecl dsa_sign_setup_no_digest(DSA *dsa, BN_CTX *ctx_in, BIGNUM **kinvp,
                                     BIGNUM **rp);
-static int dsa_sign_setup(DSA *dsa, BN_CTX *ctx_in, BIGNUM **kinvp,
+static int __cdecl dsa_sign_setup(DSA *dsa, BN_CTX *ctx_in, BIGNUM **kinvp,
                           BIGNUM **rp, const unsigned char *dgst, int dlen);
-static int dsa_do_verify(const unsigned char *dgst, int dgst_len,
+static int __cdecl dsa_do_verify(const unsigned char *dgst, int dgst_len,
                          DSA_SIG *sig, DSA *dsa);
-static int dsa_init(DSA *dsa);
-static int dsa_finish(DSA *dsa);
-static BIGNUM *dsa_mod_inverse_fermat(const BIGNUM *k, const BIGNUM *q,
+static int __cdecl dsa_init(DSA *dsa);
+static int __cdecl dsa_finish(DSA *dsa);
+static BIGNUM * __cdecl dsa_mod_inverse_fermat(const BIGNUM *k, const BIGNUM *q,
                                       BN_CTX *ctx);
 
 static DSA_METHOD openssl_dsa_meth = {
@@ -44,22 +44,22 @@ static DSA_METHOD openssl_dsa_meth = {
 
 static const DSA_METHOD *default_DSA_method = &openssl_dsa_meth;
 
-void DSA_set_default_method(const DSA_METHOD *meth)
+void __cdecl DSA_set_default_method(const DSA_METHOD *meth)
 {
     default_DSA_method = meth;
 }
 
-const DSA_METHOD *DSA_get_default_method(void)
+const DSA_METHOD * __cdecl DSA_get_default_method(void)
 {
     return default_DSA_method;
 }
 
-const DSA_METHOD *DSA_OpenSSL(void)
+const DSA_METHOD * __cdecl DSA_OpenSSL(void)
 {
     return &openssl_dsa_meth;
 }
 
-static DSA_SIG *dsa_do_sign(const unsigned char *dgst, int dlen, DSA *dsa)
+static DSA_SIG * __cdecl dsa_do_sign(const unsigned char *dgst, int dlen, DSA *dsa)
 {
     BIGNUM *kinv = NULL;
     BIGNUM *m, *blind, *blindm, *tmp;
@@ -173,13 +173,13 @@ static DSA_SIG *dsa_do_sign(const unsigned char *dgst, int dlen, DSA *dsa)
     return ret;
 }
 
-static int dsa_sign_setup_no_digest(DSA *dsa, BN_CTX *ctx_in,
+static int __cdecl dsa_sign_setup_no_digest(DSA *dsa, BN_CTX *ctx_in,
                                     BIGNUM **kinvp, BIGNUM **rp)
 {
     return dsa_sign_setup(dsa, ctx_in, kinvp, rp, NULL, 0);
 }
 
-static int dsa_sign_setup(DSA *dsa, BN_CTX *ctx_in,
+static int __cdecl dsa_sign_setup(DSA *dsa, BN_CTX *ctx_in,
                           BIGNUM **kinvp, BIGNUM **rp,
                           const unsigned char *dgst, int dlen)
 {
@@ -296,7 +296,7 @@ static int dsa_sign_setup(DSA *dsa, BN_CTX *ctx_in,
     return ret;
 }
 
-static int dsa_do_verify(const unsigned char *dgst, int dgst_len,
+static int __cdecl dsa_do_verify(const unsigned char *dgst, int dgst_len,
                          DSA_SIG *sig, DSA *dsa)
 {
     BN_CTX *ctx;
@@ -401,13 +401,13 @@ static int dsa_do_verify(const unsigned char *dgst, int dgst_len,
     return ret;
 }
 
-static int dsa_init(DSA *dsa)
+static int __cdecl dsa_init(DSA *dsa)
 {
     dsa->flags |= DSA_FLAG_CACHE_MONT_P;
     return 1;
 }
 
-static int dsa_finish(DSA *dsa)
+static int __cdecl dsa_finish(DSA *dsa)
 {
     BN_MONT_CTX_free(dsa->method_mont_p);
     return 1;
@@ -420,7 +420,7 @@ static int dsa_finish(DSA *dsa)
  * so a mod-exp that doesn't leak the base is sufficient.  A newly allocated
  * BIGNUM is returned which the caller must free.
  */
-static BIGNUM *dsa_mod_inverse_fermat(const BIGNUM *k, const BIGNUM *q,
+static BIGNUM * __cdecl dsa_mod_inverse_fermat(const BIGNUM *k, const BIGNUM *q,
                                       BN_CTX *ctx)
 {
     BIGNUM *res = NULL;
diff --git a/crypto/dsa/dsa_pmeth.c b/crypto/dsa/dsa_pmeth.c
index 1dd2fef9be..8050b07c84 100644
--- a/crypto/dsa/dsa_pmeth.c
+++ b/crypto/dsa/dsa_pmeth.c
@@ -29,7 +29,7 @@ typedef struct {
     const EVP_MD *md;           /* MD for the signature */
 } DSA_PKEY_CTX;
 
-static int pkey_dsa_init(EVP_PKEY_CTX *ctx)
+static int __cdecl pkey_dsa_init(EVP_PKEY_CTX *ctx)
 {
     DSA_PKEY_CTX *dctx = OPENSSL_malloc(sizeof(*dctx));
 
@@ -47,7 +47,7 @@ static int pkey_dsa_init(EVP_PKEY_CTX *ctx)
     return 1;
 }
 
-static int pkey_dsa_copy(EVP_PKEY_CTX *dst, EVP_PKEY_CTX *src)
+static int __cdecl pkey_dsa_copy(EVP_PKEY_CTX *dst, EVP_PKEY_CTX *src)
 {
     DSA_PKEY_CTX *dctx, *sctx;
 
@@ -62,13 +62,13 @@ static int pkey_dsa_copy(EVP_PKEY_CTX *dst, EVP_PKEY_CTX *src)
     return 1;
 }
 
-static void pkey_dsa_cleanup(EVP_PKEY_CTX *ctx)
+static void __cdecl pkey_dsa_cleanup(EVP_PKEY_CTX *ctx)
 {
     DSA_PKEY_CTX *dctx = ctx->data;
     OPENSSL_free(dctx);
 }
 
-static int pkey_dsa_sign(EVP_PKEY_CTX *ctx, unsigned char *sig,
+static int __cdecl pkey_dsa_sign(EVP_PKEY_CTX *ctx, unsigned char *sig,
                          size_t *siglen, const unsigned char *tbs,
                          size_t tbslen)
 {
@@ -88,7 +88,7 @@ static int pkey_dsa_sign(EVP_PKEY_CTX *ctx, unsigned char *sig,
     return 1;
 }
 
-static int pkey_dsa_verify(EVP_PKEY_CTX *ctx,
+static int __cdecl pkey_dsa_verify(EVP_PKEY_CTX *ctx,
                            const unsigned char *sig, size_t siglen,
                            const unsigned char *tbs, size_t tbslen)
 {
@@ -104,7 +104,7 @@ static int pkey_dsa_verify(EVP_PKEY_CTX *ctx,
     return ret;
 }
 
-static int pkey_dsa_ctrl(EVP_PKEY_CTX *ctx, int type, int p1, void *p2)
+static int __cdecl pkey_dsa_ctrl(EVP_PKEY_CTX *ctx, int type, int p1, void *p2)
 {
     DSA_PKEY_CTX *dctx = ctx->data;
 
@@ -168,7 +168,7 @@ static int pkey_dsa_ctrl(EVP_PKEY_CTX *ctx, int type, int p1, void *p2)
     }
 }
 
-static int pkey_dsa_ctrl_str(EVP_PKEY_CTX *ctx,
+static int __cdecl pkey_dsa_ctrl_str(EVP_PKEY_CTX *ctx,
                              const char *type, const char *value)
 {
     if (strcmp(type, "dsa_paramgen_bits") == 0) {
@@ -196,7 +196,7 @@ static int pkey_dsa_ctrl_str(EVP_PKEY_CTX *ctx,
     return -2;
 }
 
-static int pkey_dsa_paramgen(EVP_PKEY_CTX *ctx, EVP_PKEY *pkey)
+static int __cdecl pkey_dsa_paramgen(EVP_PKEY_CTX *ctx, EVP_PKEY *pkey)
 {
     DSA *dsa = NULL;
     DSA_PKEY_CTX *dctx = ctx->data;
@@ -225,7 +225,7 @@ static int pkey_dsa_paramgen(EVP_PKEY_CTX *ctx, EVP_PKEY *pkey)
     return ret;
 }
 
-static int pkey_dsa_keygen(EVP_PKEY_CTX *ctx, EVP_PKEY *pkey)
+static int __cdecl pkey_dsa_keygen(EVP_PKEY_CTX *ctx, EVP_PKEY *pkey)
 {
     DSA *dsa = NULL;
 
diff --git a/crypto/dsa/dsa_prn.c b/crypto/dsa/dsa_prn.c
index a4a1fd5650..da9213c59d 100644
--- a/crypto/dsa/dsa_prn.c
+++ b/crypto/dsa/dsa_prn.c
@@ -13,7 +13,7 @@
 #include <openssl/dsa.h>
 
 #ifndef OPENSSL_NO_STDIO
-int DSA_print_fp(FILE *fp, const DSA *x, int off)
+int __cdecl DSA_print_fp(FILE *fp, const DSA *x, int off)
 {
     BIO *b;
     int ret;
@@ -28,7 +28,7 @@ int DSA_print_fp(FILE *fp, const DSA *x, int off)
     return ret;
 }
 
-int DSAparams_print_fp(FILE *fp, const DSA *x)
+int __cdecl DSAparams_print_fp(FILE *fp, const DSA *x)
 {
     BIO *b;
     int ret;
@@ -44,7 +44,7 @@ int DSAparams_print_fp(FILE *fp, const DSA *x)
 }
 #endif
 
-int DSA_print(BIO *bp, const DSA *x, int off)
+int __cdecl DSA_print(BIO *bp, const DSA *x, int off)
 {
     EVP_PKEY *pk;
     int ret;
@@ -56,7 +56,7 @@ int DSA_print(BIO *bp, const DSA *x, int off)
     return ret;
 }
 
-int DSAparams_print(BIO *bp, const DSA *x)
+int __cdecl DSAparams_print(BIO *bp, const DSA *x)
 {
     EVP_PKEY *pk;
     int ret;
diff --git a/crypto/dsa/dsa_sign.c b/crypto/dsa/dsa_sign.c
index e9466b29f1..ab7988119e 100644
--- a/crypto/dsa/dsa_sign.c
+++ b/crypto/dsa/dsa_sign.c
@@ -11,13 +11,13 @@
 #include "dsa_locl.h"
 #include <openssl/bn.h>
 
-DSA_SIG *DSA_do_sign(const unsigned char *dgst, int dlen, DSA *dsa)
+DSA_SIG * __cdecl DSA_do_sign(const unsigned char *dgst, int dlen, DSA *dsa)
 {
     return dsa->meth->dsa_do_sign(dgst, dlen, dsa);
 }
 
 #if OPENSSL_API_COMPAT < 0x10200000L
-int DSA_sign_setup(DSA *dsa, BN_CTX *ctx_in, BIGNUM **kinvp, BIGNUM **rp)
+int __cdecl DSA_sign_setup(DSA *dsa, BN_CTX *ctx_in, BIGNUM **kinvp, BIGNUM **rp)
 {
     return dsa->meth->dsa_sign_setup(dsa, ctx_in, kinvp, rp);
 }
diff --git a/crypto/dsa/dsa_vrf.c b/crypto/dsa/dsa_vrf.c
index 21f98cd94e..fb1091ffb4 100644
--- a/crypto/dsa/dsa_vrf.c
+++ b/crypto/dsa/dsa_vrf.c
@@ -10,7 +10,7 @@
 #include "internal/cryptlib.h"
 #include "dsa_locl.h"
 
-int DSA_do_verify(const unsigned char *dgst, int dgst_len, DSA_SIG *sig,
+int __cdecl DSA_do_verify(const unsigned char *dgst, int dgst_len, DSA_SIG *sig,
                   DSA *dsa)
 {
     return dsa->meth->dsa_do_verify(dgst, dgst_len, sig, dsa);
diff --git a/crypto/ebcdic.c b/crypto/ebcdic.c
index 2a8ca61010..e41789a09c 100644
--- a/crypto/ebcdic.c
+++ b/crypto/ebcdic.c
@@ -334,7 +334,7 @@ const unsigned char os_toebcdic[256] = {
  * memcpy(3).
  */
 
-void *ebcdic2ascii(void *dest, const void *srce, size_t count)
+void * __cdecl ebcdic2ascii(void *dest, const void *srce, size_t count)
 {
     unsigned char *udest = dest;
     const unsigned char *usrce = srce;
@@ -346,7 +346,7 @@ void *ebcdic2ascii(void *dest, const void *srce, size_t count)
     return dest;
 }
 
-void *ascii2ebcdic(void *dest, const void *srce, size_t count)
+void * __cdecl ascii2ebcdic(void *dest, const void *srce, size_t count)
 {
     unsigned char *udest = dest;
     const unsigned char *usrce = srce;
diff --git a/crypto/ec/ec2_smpl.c b/crypto/ec/ec2_smpl.c
index 898e741fcb..7b5894dedd 100644
--- a/crypto/ec/ec2_smpl.c
+++ b/crypto/ec/ec2_smpl.c
@@ -903,7 +903,7 @@ static int ec_GF2m_simple_field_inv(const EC_GROUP *group, BIGNUM *r,
     return ret;
 }
 
-const EC_METHOD *EC_GF2m_simple_method(void)
+const EC_METHOD * __cdecl EC_GF2m_simple_method(void)
 {
     static const EC_METHOD ret = {
         EC_FLAGS_DEFAULT_OCT,
diff --git a/crypto/ec/ec_ameth.c b/crypto/ec/ec_ameth.c
index c086f47ab3..e24ab1edc3 100644
--- a/crypto/ec/ec_ameth.c
+++ b/crypto/ec/ec_ameth.c
@@ -19,11 +19,11 @@
 #include "ec_lcl.h"
 
 #ifndef OPENSSL_NO_CMS
-static int ecdh_cms_decrypt(CMS_RecipientInfo *ri);
-static int ecdh_cms_encrypt(CMS_RecipientInfo *ri);
+static int __cdecl ecdh_cms_decrypt(CMS_RecipientInfo *ri);
+static int __cdecl ecdh_cms_encrypt(CMS_RecipientInfo *ri);
 #endif
 
-static int eckey_param2type(int *pptype, void **ppval, EC_KEY *ec_key)
+static int __cdecl eckey_param2type(int *pptype, void **ppval, EC_KEY *ec_key)
 {
     const EC_GROUP *group;
     int nid;
@@ -55,7 +55,7 @@ static int eckey_param2type(int *pptype, void **ppval, EC_KEY *ec_key)
     return 1;
 }
 
-static int eckey_pub_encode(X509_PUBKEY *pk, const EVP_PKEY *pkey)
+static int __cdecl eckey_pub_encode(X509_PUBKEY *pk, const EVP_PKEY *pkey)
 {
     EC_KEY *ec_key = pkey->pkey.ec;
     void *pval = NULL;
@@ -133,7 +133,7 @@ static EC_KEY *eckey_type2param(int ptype, const void *pval)
     return NULL;
 }
 
-static int eckey_pub_decode(EVP_PKEY *pkey, X509_PUBKEY *pubkey)
+static int __cdecl eckey_pub_decode(EVP_PKEY *pkey, X509_PUBKEY *pubkey)
 {
     const unsigned char *p = NULL;
     const void *pval;
@@ -166,7 +166,7 @@ static int eckey_pub_decode(EVP_PKEY *pkey, X509_PUBKEY *pubkey)
     return 0;
 }
 
-static int eckey_pub_cmp(const EVP_PKEY *a, const EVP_PKEY *b)
+static int __cdecl eckey_pub_cmp(const EVP_PKEY *a, const EVP_PKEY *b)
 {
     int r;
     const EC_GROUP *group = EC_KEY_get0_group(b->pkey.ec);
@@ -182,7 +182,7 @@ static int eckey_pub_cmp(const EVP_PKEY *a, const EVP_PKEY *b)
     return -2;
 }
 
-static int eckey_priv_decode(EVP_PKEY *pkey, const PKCS8_PRIV_KEY_INFO *p8)
+static int __cdecl eckey_priv_decode(EVP_PKEY *pkey, const PKCS8_PRIV_KEY_INFO *p8)
 {
     const unsigned char *p = NULL;
     const void *pval;
@@ -215,7 +215,7 @@ static int eckey_priv_decode(EVP_PKEY *pkey, const PKCS8_PRIV_KEY_INFO *p8)
     return 0;
 }
 
-static int eckey_priv_encode(PKCS8_PRIV_KEY_INFO *p8, const EVP_PKEY *pkey)
+static int __cdecl eckey_priv_encode(PKCS8_PRIV_KEY_INFO *p8, const EVP_PKEY *pkey)
 {
     EC_KEY ec_key = *(pkey->pkey.ec);
     unsigned char *ep, *p;
@@ -263,17 +263,17 @@ static int eckey_priv_encode(PKCS8_PRIV_KEY_INFO *p8, const EVP_PKEY *pkey)
     return 1;
 }
 
-static int int_ec_size(const EVP_PKEY *pkey)
+static int __cdecl int_ec_size(const EVP_PKEY *pkey)
 {
     return ECDSA_size(pkey->pkey.ec);
 }
 
-static int ec_bits(const EVP_PKEY *pkey)
+static int __cdecl ec_bits(const EVP_PKEY *pkey)
 {
     return EC_GROUP_order_bits(EC_KEY_get0_group(pkey->pkey.ec));
 }
 
-static int ec_security_bits(const EVP_PKEY *pkey)
+static int __cdecl ec_security_bits(const EVP_PKEY *pkey)
 {
     int ecbits = ec_bits(pkey);
     if (ecbits >= 512)
@@ -289,14 +289,14 @@ static int ec_security_bits(const EVP_PKEY *pkey)
     return ecbits / 2;
 }
 
-static int ec_missing_parameters(const EVP_PKEY *pkey)
+static int __cdecl ec_missing_parameters(const EVP_PKEY *pkey)
 {
     if (pkey->pkey.ec == NULL || EC_KEY_get0_group(pkey->pkey.ec) == NULL)
         return 1;
     return 0;
 }
 
-static int ec_copy_parameters(EVP_PKEY *to, const EVP_PKEY *from)
+static int __cdecl ec_copy_parameters(EVP_PKEY *to, const EVP_PKEY *from)
 {
     EC_GROUP *group = EC_GROUP_dup(EC_KEY_get0_group(from->pkey.ec));
 
@@ -316,7 +316,7 @@ static int ec_copy_parameters(EVP_PKEY *to, const EVP_PKEY *from)
     return 0;
 }
 
-static int ec_cmp_parameters(const EVP_PKEY *a, const EVP_PKEY *b)
+static int __cdecl ec_cmp_parameters(const EVP_PKEY *a, const EVP_PKEY *b)
 {
     const EC_GROUP *group_a = EC_KEY_get0_group(a->pkey.ec),
         *group_b = EC_KEY_get0_group(b->pkey.ec);
@@ -328,7 +328,7 @@ static int ec_cmp_parameters(const EVP_PKEY *a, const EVP_PKEY *b)
         return 1;
 }
 
-static void int_ec_free(EVP_PKEY *pkey)
+static void __cdecl int_ec_free(EVP_PKEY *pkey)
 {
     EC_KEY_free(pkey->pkey.ec);
 }
@@ -339,7 +339,7 @@ typedef enum {
     EC_KEY_PRINT_PARAM
 } ec_print_t;
 
-static int do_EC_KEY_print(BIO *bp, const EC_KEY *x, int off, ec_print_t ktype)
+static int __cdecl do_EC_KEY_print(BIO *bp, const EC_KEY *x, int off, ec_print_t ktype)
 {
     const char *ecstr;
     unsigned char *priv = NULL, *pub = NULL;
@@ -402,7 +402,7 @@ static int do_EC_KEY_print(BIO *bp, const EC_KEY *x, int off, ec_print_t ktype)
     return ret;
 }
 
-static int eckey_param_decode(EVP_PKEY *pkey,
+static int __cdecl eckey_param_decode(EVP_PKEY *pkey,
                               const unsigned char **pder, int derlen)
 {
     EC_KEY *eckey;
@@ -415,30 +415,30 @@ static int eckey_param_decode(EVP_PKEY *pkey,
     return 1;
 }
 
-static int eckey_param_encode(const EVP_PKEY *pkey, unsigned char **pder)
+static int __cdecl eckey_param_encode(const EVP_PKEY *pkey, unsigned char **pder)
 {
     return i2d_ECParameters(pkey->pkey.ec, pder);
 }
 
-static int eckey_param_print(BIO *bp, const EVP_PKEY *pkey, int indent,
+static int __cdecl eckey_param_print(BIO *bp, const EVP_PKEY *pkey, int indent,
                              ASN1_PCTX *ctx)
 {
     return do_EC_KEY_print(bp, pkey->pkey.ec, indent, EC_KEY_PRINT_PARAM);
 }
 
-static int eckey_pub_print(BIO *bp, const EVP_PKEY *pkey, int indent,
+static int __cdecl eckey_pub_print(BIO *bp, const EVP_PKEY *pkey, int indent,
                            ASN1_PCTX *ctx)
 {
     return do_EC_KEY_print(bp, pkey->pkey.ec, indent, EC_KEY_PRINT_PUBLIC);
 }
 
-static int eckey_priv_print(BIO *bp, const EVP_PKEY *pkey, int indent,
+static int __cdecl eckey_priv_print(BIO *bp, const EVP_PKEY *pkey, int indent,
                             ASN1_PCTX *ctx)
 {
     return do_EC_KEY_print(bp, pkey->pkey.ec, indent, EC_KEY_PRINT_PRIVATE);
 }
 
-static int old_ec_priv_decode(EVP_PKEY *pkey,
+static int __cdecl old_ec_priv_decode(EVP_PKEY *pkey,
                               const unsigned char **pder, int derlen)
 {
     EC_KEY *ec;
@@ -451,12 +451,12 @@ static int old_ec_priv_decode(EVP_PKEY *pkey,
     return 1;
 }
 
-static int old_ec_priv_encode(const EVP_PKEY *pkey, unsigned char **pder)
+static int __cdecl old_ec_priv_encode(const EVP_PKEY *pkey, unsigned char **pder)
 {
     return i2d_ECPrivateKey(pkey->pkey.ec, pder);
 }
 
-static int ec_pkey_ctrl(EVP_PKEY *pkey, int op, long arg1, void *arg2)
+static int __cdecl ec_pkey_ctrl(EVP_PKEY *pkey, int op, long arg1, void *arg2)
 {
     switch (op) {
     case ASN1_PKEY_CTRL_PKCS7_SIGN:
@@ -526,7 +526,7 @@ static int ec_pkey_ctrl(EVP_PKEY *pkey, int op, long arg1, void *arg2)
 
 }
 
-static int ec_pkey_check(const EVP_PKEY *pkey)
+static int __cdecl ec_pkey_check(const EVP_PKEY *pkey)
 {
     EC_KEY *eckey = pkey->pkey.ec;
 
@@ -539,7 +539,7 @@ static int ec_pkey_check(const EVP_PKEY *pkey)
     return EC_KEY_check_key(eckey);
 }
 
-static int ec_pkey_public_check(const EVP_PKEY *pkey)
+static int __cdecl ec_pkey_public_check(const EVP_PKEY *pkey)
 {
     EC_KEY *eckey = pkey->pkey.ec;
 
@@ -555,7 +555,7 @@ static int ec_pkey_public_check(const EVP_PKEY *pkey)
     return EC_KEY_check_key(eckey);
 }
 
-static int ec_pkey_param_check(const EVP_PKEY *pkey)
+static int __cdecl ec_pkey_param_check(const EVP_PKEY *pkey)
 {
     EC_KEY *eckey = pkey->pkey.ec;
 
@@ -616,7 +616,7 @@ const EVP_PKEY_ASN1_METHOD sm2_asn1_meth = {
 };
 #endif
 
-int EC_KEY_print(BIO *bp, const EC_KEY *x, int off)
+int __cdecl EC_KEY_print(BIO *bp, const EC_KEY *x, int off)
 {
     int private = EC_KEY_get0_private_key(x) != NULL;
 
@@ -624,14 +624,14 @@ int EC_KEY_print(BIO *bp, const EC_KEY *x, int off)
                 private ? EC_KEY_PRINT_PRIVATE : EC_KEY_PRINT_PUBLIC);
 }
 
-int ECParameters_print(BIO *bp, const EC_KEY *x)
+int __cdecl ECParameters_print(BIO *bp, const EC_KEY *x)
 {
     return do_EC_KEY_print(bp, x, 4, EC_KEY_PRINT_PARAM);
 }
 
 #ifndef OPENSSL_NO_CMS
 
-static int ecdh_cms_set_peerkey(EVP_PKEY_CTX *pctx,
+static int __cdecl ecdh_cms_set_peerkey(EVP_PKEY_CTX *pctx,
                                 X509_ALGOR *alg, ASN1_BIT_STRING *pubkey)
 {
     const ASN1_OBJECT *aoid;
@@ -683,7 +683,7 @@ static int ecdh_cms_set_peerkey(EVP_PKEY_CTX *pctx,
 }
 
 /* Set KDF parameters based on KDF NID */
-static int ecdh_cms_set_kdf_param(EVP_PKEY_CTX *pctx, int eckdf_nid)
+static int __cdecl ecdh_cms_set_kdf_param(EVP_PKEY_CTX *pctx, int eckdf_nid)
 {
     int kdf_nid, kdfmd_nid, cofactor;
     const EVP_MD *kdf_md;
@@ -716,7 +716,7 @@ static int ecdh_cms_set_kdf_param(EVP_PKEY_CTX *pctx, int eckdf_nid)
     return 1;
 }
 
-static int ecdh_cms_set_shared_info(EVP_PKEY_CTX *pctx, CMS_RecipientInfo *ri)
+static int __cdecl ecdh_cms_set_shared_info(EVP_PKEY_CTX *pctx, CMS_RecipientInfo *ri)
 {
     int rv = 0;
 
@@ -775,7 +775,7 @@ static int ecdh_cms_set_shared_info(EVP_PKEY_CTX *pctx, CMS_RecipientInfo *ri)
     return rv;
 }
 
-static int ecdh_cms_decrypt(CMS_RecipientInfo *ri)
+static int __cdecl ecdh_cms_decrypt(CMS_RecipientInfo *ri)
 {
     EVP_PKEY_CTX *pctx;
     pctx = CMS_RecipientInfo_get0_pkey_ctx(ri);
@@ -803,7 +803,7 @@ static int ecdh_cms_decrypt(CMS_RecipientInfo *ri)
     return 1;
 }
 
-static int ecdh_cms_encrypt(CMS_RecipientInfo *ri)
+static int __cdecl ecdh_cms_encrypt(CMS_RecipientInfo *ri)
 {
     EVP_PKEY_CTX *pctx;
     EVP_PKEY *pkey;
diff --git a/crypto/ec/ec_asn1.c b/crypto/ec/ec_asn1.c
index 1ce1181fc1..cbb3d725da 100644
--- a/crypto/ec/ec_asn1.c
+++ b/crypto/ec/ec_asn1.c
@@ -14,7 +14,7 @@
 #include <openssl/objects.h>
 #include "internal/nelem.h"
 
-int EC_GROUP_get_basis_type(const EC_GROUP *group)
+int __cdecl EC_GROUP_get_basis_type(const EC_GROUP *group)
 {
     int i;
 
@@ -39,7 +39,7 @@ int EC_GROUP_get_basis_type(const EC_GROUP *group)
 }
 
 #ifndef OPENSSL_NO_EC2M
-int EC_GROUP_get_trinomial_basis(const EC_GROUP *group, unsigned int *k)
+int __cdecl EC_GROUP_get_trinomial_basis(const EC_GROUP *group, unsigned int *k)
 {
     if (group == NULL)
         return 0;
@@ -59,7 +59,7 @@ int EC_GROUP_get_trinomial_basis(const EC_GROUP *group, unsigned int *k)
     return 1;
 }
 
-int EC_GROUP_get_pentanomial_basis(const EC_GROUP *group, unsigned int *k1,
+int __cdecl EC_GROUP_get_pentanomial_basis(const EC_GROUP *group, unsigned int *k1,
                                    unsigned int *k2, unsigned int *k3)
 {
     if (group == NULL)
@@ -437,7 +437,7 @@ static int ec_asn1_group2curve(const EC_GROUP *group, X9_62_CURVE *curve)
     return ok;
 }
 
-ECPARAMETERS *EC_GROUP_get_ecparameters(const EC_GROUP *group,
+ECPARAMETERS * __cdecl EC_GROUP_get_ecparameters(const EC_GROUP *group,
                                                ECPARAMETERS *params)
 {
     size_t len = 0;
@@ -520,7 +520,7 @@ ECPARAMETERS *EC_GROUP_get_ecparameters(const EC_GROUP *group,
     return NULL;
 }
 
-ECPKPARAMETERS *EC_GROUP_get_ecpkparameters(const EC_GROUP *group,
+ECPKPARAMETERS * __cdecl EC_GROUP_get_ecpkparameters(const EC_GROUP *group,
                                             ECPKPARAMETERS *params)
 {
     int ok = 1, tmp;
@@ -565,7 +565,7 @@ ECPKPARAMETERS *EC_GROUP_get_ecpkparameters(const EC_GROUP *group,
     return ret;
 }
 
-EC_GROUP *EC_GROUP_new_from_ecparameters(const ECPARAMETERS *params)
+EC_GROUP * __cdecl EC_GROUP_new_from_ecparameters(const ECPARAMETERS *params)
 {
     int ok = 0, tmp;
     EC_GROUP *ret = NULL, *dup = NULL;
@@ -867,7 +867,7 @@ EC_GROUP *EC_GROUP_new_from_ecparameters(const ECPARAMETERS *params)
     return ret;
 }
 
-EC_GROUP *EC_GROUP_new_from_ecpkparameters(const ECPKPARAMETERS *params)
+EC_GROUP * __cdecl EC_GROUP_new_from_ecpkparameters(const ECPKPARAMETERS *params)
 {
     EC_GROUP *ret = NULL;
     int tmp = 0;
@@ -905,7 +905,7 @@ EC_GROUP *EC_GROUP_new_from_ecpkparameters(const ECPKPARAMETERS *params)
 
 /* EC_GROUP <-> DER encoding of ECPKPARAMETERS */
 
-EC_GROUP *d2i_ECPKParameters(EC_GROUP **a, const unsigned char **in, long len)
+EC_GROUP * __cdecl d2i_ECPKParameters(EC_GROUP **a, const unsigned char **in, long len)
 {
     EC_GROUP *group = NULL;
     ECPKPARAMETERS *params = NULL;
@@ -933,7 +933,7 @@ EC_GROUP *d2i_ECPKParameters(EC_GROUP **a, const unsigned char **in, long len)
     return group;
 }
 
-int i2d_ECPKParameters(const EC_GROUP *a, unsigned char **out)
+int __cdecl i2d_ECPKParameters(const EC_GROUP *a, unsigned char **out)
 {
     int ret = 0;
     ECPKPARAMETERS *tmp = EC_GROUP_get_ecpkparameters(a, NULL);
@@ -952,7 +952,7 @@ int i2d_ECPKParameters(const EC_GROUP *a, unsigned char **out)
 
 /* some EC_KEY functions */
 
-EC_KEY *d2i_ECPrivateKey(EC_KEY **a, const unsigned char **in, long len)
+EC_KEY * __cdecl d2i_ECPrivateKey(EC_KEY **a, const unsigned char **in, long len)
 {
     EC_KEY *ret = NULL;
     EC_PRIVATEKEY *priv_key = NULL;
@@ -1031,7 +1031,7 @@ EC_KEY *d2i_ECPrivateKey(EC_KEY **a, const unsigned char **in, long len)
     return NULL;
 }
 
-int i2d_ECPrivateKey(EC_KEY *a, unsigned char **out)
+int __cdecl i2d_ECPrivateKey(EC_KEY *a, unsigned char **out)
 {
     int ret = 0, ok = 0;
     unsigned char *priv= NULL, *pub= NULL;
@@ -1103,7 +1103,7 @@ int i2d_ECPrivateKey(EC_KEY *a, unsigned char **out)
     return (ok ? ret : 0);
 }
 
-int i2d_ECParameters(EC_KEY *a, unsigned char **out)
+int __cdecl i2d_ECParameters(EC_KEY *a, unsigned char **out)
 {
     if (a == NULL) {
         ECerr(EC_F_I2D_ECPARAMETERS, ERR_R_PASSED_NULL_PARAMETER);
@@ -1112,7 +1112,7 @@ int i2d_ECParameters(EC_KEY *a, unsigned char **out)
     return i2d_ECPKParameters(a->group, out);
 }
 
-EC_KEY *d2i_ECParameters(EC_KEY **a, const unsigned char **in, long len)
+EC_KEY * __cdecl d2i_ECParameters(EC_KEY **a, const unsigned char **in, long len)
 {
     EC_KEY *ret;
 
@@ -1142,7 +1142,7 @@ EC_KEY *d2i_ECParameters(EC_KEY **a, const unsigned char **in, long len)
     return ret;
 }
 
-EC_KEY *o2i_ECPublicKey(EC_KEY **a, const unsigned char **in, long len)
+EC_KEY * __cdecl o2i_ECPublicKey(EC_KEY **a, const unsigned char **in, long len)
 {
     EC_KEY *ret = NULL;
 
@@ -1162,7 +1162,7 @@ EC_KEY *o2i_ECPublicKey(EC_KEY **a, const unsigned char **in, long len)
     return ret;
 }
 
-int i2o_ECPublicKey(const EC_KEY *a, unsigned char **out)
+int __cdecl i2o_ECPublicKey(const EC_KEY *a, unsigned char **out)
 {
     size_t buf_len = 0;
     int new_buffer = 0;
@@ -1209,7 +1209,7 @@ DECLARE_ASN1_FUNCTIONS_const(ECDSA_SIG)
 DECLARE_ASN1_ENCODE_FUNCTIONS_const(ECDSA_SIG, ECDSA_SIG)
 IMPLEMENT_ASN1_ENCODE_FUNCTIONS_const_fname(ECDSA_SIG, ECDSA_SIG, ECDSA_SIG)
 
-ECDSA_SIG *ECDSA_SIG_new(void)
+ECDSA_SIG * __cdecl ECDSA_SIG_new(void)
 {
     ECDSA_SIG *sig = OPENSSL_zalloc(sizeof(*sig));
     if (sig == NULL)
@@ -1217,7 +1217,7 @@ ECDSA_SIG *ECDSA_SIG_new(void)
     return sig;
 }
 
-void ECDSA_SIG_free(ECDSA_SIG *sig)
+void __cdecl ECDSA_SIG_free(ECDSA_SIG *sig)
 {
     if (sig == NULL)
         return;
@@ -1226,7 +1226,7 @@ void ECDSA_SIG_free(ECDSA_SIG *sig)
     OPENSSL_free(sig);
 }
 
-void ECDSA_SIG_get0(const ECDSA_SIG *sig, const BIGNUM **pr, const BIGNUM **ps)
+void __cdecl ECDSA_SIG_get0(const ECDSA_SIG *sig, const BIGNUM **pr, const BIGNUM **ps)
 {
     if (pr != NULL)
         *pr = sig->r;
@@ -1234,17 +1234,17 @@ void ECDSA_SIG_get0(const ECDSA_SIG *sig, const BIGNUM **pr, const BIGNUM **ps)
         *ps = sig->s;
 }
 
-const BIGNUM *ECDSA_SIG_get0_r(const ECDSA_SIG *sig)
+const BIGNUM * __cdecl ECDSA_SIG_get0_r(const ECDSA_SIG *sig)
 {
     return sig->r;
 }
 
-const BIGNUM *ECDSA_SIG_get0_s(const ECDSA_SIG *sig)
+const BIGNUM * __cdecl ECDSA_SIG_get0_s(const ECDSA_SIG *sig)
 {
     return sig->s;
 }
 
-int ECDSA_SIG_set0(ECDSA_SIG *sig, BIGNUM *r, BIGNUM *s)
+int __cdecl ECDSA_SIG_set0(ECDSA_SIG *sig, BIGNUM *r, BIGNUM *s)
 {
     if (r == NULL || s == NULL)
         return 0;
@@ -1255,7 +1255,7 @@ int ECDSA_SIG_set0(ECDSA_SIG *sig, BIGNUM *r, BIGNUM *s)
     return 1;
 }
 
-int ECDSA_size(const EC_KEY *r)
+int __cdecl ECDSA_size(const EC_KEY *r)
 {
     int ret, i;
     ASN1_INTEGER bs;
diff --git a/crypto/ec/ec_check.c b/crypto/ec/ec_check.c
index eeb06ec1cb..ab55650b13 100644
--- a/crypto/ec/ec_check.c
+++ b/crypto/ec/ec_check.c
@@ -10,7 +10,7 @@
 #include "ec_lcl.h"
 #include <openssl/err.h>
 
-int EC_GROUP_check(const EC_GROUP *group, BN_CTX *ctx)
+int __cdecl EC_GROUP_check(const EC_GROUP *group, BN_CTX *ctx)
 {
     int ret = 0;
     const BIGNUM *order;
diff --git a/crypto/ec/ec_curve.c b/crypto/ec/ec_curve.c
index 477349d441..edf394e6ca 100644
--- a/crypto/ec/ec_curve.c
+++ b/crypto/ec/ec_curve.c
@@ -3114,7 +3114,7 @@ static EC_GROUP *ec_group_new_from_data(const ec_list_element curve)
     return group;
 }
 
-EC_GROUP *EC_GROUP_new_by_curve_name(int nid)
+EC_GROUP * __cdecl EC_GROUP_new_by_curve_name(int nid)
 {
     size_t i;
     EC_GROUP *ret = NULL;
@@ -3136,7 +3136,7 @@ EC_GROUP *EC_GROUP_new_by_curve_name(int nid)
     return ret;
 }
 
-size_t EC_get_builtin_curves(EC_builtin_curve *r, size_t nitems)
+size_t __cdecl EC_get_builtin_curves(EC_builtin_curve *r, size_t nitems)
 {
     size_t i, min;
 
@@ -3178,7 +3178,7 @@ static EC_NIST_NAME nist_curves[] = {
     {"P-521", NID_secp521r1}
 };
 
-const char *EC_curve_nid2nist(int nid)
+const char * __cdecl EC_curve_nid2nist(int nid)
 {
     size_t i;
     for (i = 0; i < OSSL_NELEM(nist_curves); i++) {
@@ -3188,7 +3188,7 @@ const char *EC_curve_nid2nist(int nid)
     return NULL;
 }
 
-int EC_curve_nist2nid(const char *name)
+int __cdecl EC_curve_nist2nid(const char *name)
 {
     size_t i;
     for (i = 0; i < OSSL_NELEM(nist_curves); i++) {
diff --git a/crypto/ec/ec_cvt.c b/crypto/ec/ec_cvt.c
index 0ec346c125..8960e873b7 100644
--- a/crypto/ec/ec_cvt.c
+++ b/crypto/ec/ec_cvt.c
@@ -11,7 +11,7 @@
 #include <openssl/err.h>
 #include "ec_lcl.h"
 
-EC_GROUP *EC_GROUP_new_curve_GFp(const BIGNUM *p, const BIGNUM *a,
+EC_GROUP * __cdecl EC_GROUP_new_curve_GFp(const BIGNUM *p, const BIGNUM *a,
                                  const BIGNUM *b, BN_CTX *ctx)
 {
     const EC_METHOD *meth;
@@ -60,7 +60,7 @@ EC_GROUP *EC_GROUP_new_curve_GFp(const BIGNUM *p, const BIGNUM *a,
 }
 
 #ifndef OPENSSL_NO_EC2M
-EC_GROUP *EC_GROUP_new_curve_GF2m(const BIGNUM *p, const BIGNUM *a,
+EC_GROUP * __cdecl EC_GROUP_new_curve_GF2m(const BIGNUM *p, const BIGNUM *a,
                                   const BIGNUM *b, BN_CTX *ctx)
 {
     const EC_METHOD *meth;
diff --git a/crypto/ec/ec_err.c b/crypto/ec/ec_err.c
index ce34938232..761f37dba1 100644
--- a/crypto/ec/ec_err.c
+++ b/crypto/ec/ec_err.c
@@ -382,7 +382,7 @@ static const ERR_STRING_DATA EC_str_reasons[] = {
 
 #endif
 
-int ERR_load_EC_strings(void)
+int __cdecl ERR_load_EC_strings(void)
 {
 #ifndef OPENSSL_NO_ERR
     if (ERR_func_error_string(EC_str_functs[0].error) == NULL) {
diff --git a/crypto/ec/ec_key.c b/crypto/ec/ec_key.c
index 9349abf030..ac124a3c93 100644
--- a/crypto/ec/ec_key.c
+++ b/crypto/ec/ec_key.c
@@ -15,12 +15,12 @@
 #include <openssl/err.h>
 #include <openssl/engine.h>
 
-EC_KEY *EC_KEY_new(void)
+EC_KEY * __cdecl EC_KEY_new(void)
 {
     return EC_KEY_new_method(NULL);
 }
 
-EC_KEY *EC_KEY_new_by_curve_name(int nid)
+EC_KEY * __cdecl EC_KEY_new_by_curve_name(int nid)
 {
     EC_KEY *ret = EC_KEY_new();
     if (ret == NULL)
@@ -38,7 +38,7 @@ EC_KEY *EC_KEY_new_by_curve_name(int nid)
     return ret;
 }
 
-void EC_KEY_free(EC_KEY *r)
+void __cdecl EC_KEY_free(EC_KEY *r)
 {
     int i;
 
@@ -70,7 +70,7 @@ void EC_KEY_free(EC_KEY *r)
     OPENSSL_clear_free((void *)r, sizeof(EC_KEY));
 }
 
-EC_KEY *EC_KEY_copy(EC_KEY *dest, const EC_KEY *src)
+EC_KEY * __cdecl EC_KEY_copy(EC_KEY *dest, const EC_KEY *src)
 {
     if (dest == NULL || src == NULL) {
         ECerr(EC_F_EC_KEY_COPY, ERR_R_PASSED_NULL_PARAMETER);
@@ -147,7 +147,7 @@ EC_KEY *EC_KEY_copy(EC_KEY *dest, const EC_KEY *src)
     return dest;
 }
 
-EC_KEY *EC_KEY_dup(const EC_KEY *ec_key)
+EC_KEY * __cdecl EC_KEY_dup(const EC_KEY *ec_key)
 {
     EC_KEY *ret = EC_KEY_new_method(ec_key->engine);
 
@@ -161,7 +161,7 @@ EC_KEY *EC_KEY_dup(const EC_KEY *ec_key)
     return ret;
 }
 
-int EC_KEY_up_ref(EC_KEY *r)
+int __cdecl EC_KEY_up_ref(EC_KEY *r)
 {
     int i;
 
@@ -173,12 +173,12 @@ int EC_KEY_up_ref(EC_KEY *r)
     return ((i > 1) ? 1 : 0);
 }
 
-ENGINE *EC_KEY_get0_engine(const EC_KEY *eckey)
+ENGINE * __cdecl EC_KEY_get0_engine(const EC_KEY *eckey)
 {
     return eckey->engine;
 }
 
-int EC_KEY_generate_key(EC_KEY *eckey)
+int __cdecl EC_KEY_generate_key(EC_KEY *eckey)
 {
     if (eckey == NULL || eckey->group == NULL) {
         ECerr(EC_F_EC_KEY_GENERATE_KEY, ERR_R_PASSED_NULL_PARAMETER);
@@ -252,7 +252,7 @@ int ec_key_simple_generate_public_key(EC_KEY *eckey)
                         NULL, NULL);
 }
 
-int EC_KEY_check_key(const EC_KEY *eckey)
+int __cdecl EC_KEY_check_key(const EC_KEY *eckey)
 {
     if (eckey == NULL || eckey->group == NULL || eckey->pub_key == NULL) {
         ECerr(EC_F_EC_KEY_CHECK_KEY, ERR_R_PASSED_NULL_PARAMETER);
@@ -334,7 +334,7 @@ int ec_key_simple_check_key(const EC_KEY *eckey)
     return ok;
 }
 
-int EC_KEY_set_public_key_affine_coordinates(EC_KEY *key, BIGNUM *x,
+int __cdecl EC_KEY_set_public_key_affine_coordinates(EC_KEY *key, BIGNUM *x,
                                              BIGNUM *y)
 {
     BN_CTX *ctx = NULL;
@@ -395,12 +395,12 @@ int EC_KEY_set_public_key_affine_coordinates(EC_KEY *key, BIGNUM *x,
 
 }
 
-const EC_GROUP *EC_KEY_get0_group(const EC_KEY *key)
+const EC_GROUP * __cdecl EC_KEY_get0_group(const EC_KEY *key)
 {
     return key->group;
 }
 
-int EC_KEY_set_group(EC_KEY *key, const EC_GROUP *group)
+int __cdecl EC_KEY_set_group(EC_KEY *key, const EC_GROUP *group)
 {
     if (key->meth->set_group != NULL && key->meth->set_group(key, group) == 0)
         return 0;
@@ -409,12 +409,12 @@ int EC_KEY_set_group(EC_KEY *key, const EC_GROUP *group)
     return (key->group == NULL) ? 0 : 1;
 }
 
-const BIGNUM *EC_KEY_get0_private_key(const EC_KEY *key)
+const BIGNUM * __cdecl EC_KEY_get0_private_key(const EC_KEY *key)
 {
     return key->priv_key;
 }
 
-int EC_KEY_set_private_key(EC_KEY *key, const BIGNUM *priv_key)
+int __cdecl EC_KEY_set_private_key(EC_KEY *key, const BIGNUM *priv_key)
 {
     if (key->group == NULL || key->group->meth == NULL)
         return 0;
@@ -429,12 +429,12 @@ int EC_KEY_set_private_key(EC_KEY *key, const BIGNUM *priv_key)
     return (key->priv_key == NULL) ? 0 : 1;
 }
 
-const EC_POINT *EC_KEY_get0_public_key(const EC_KEY *key)
+const EC_POINT * __cdecl EC_KEY_get0_public_key(const EC_KEY *key)
 {
     return key->pub_key;
 }
 
-int EC_KEY_set_public_key(EC_KEY *key, const EC_POINT *pub_key)
+int __cdecl EC_KEY_set_public_key(EC_KEY *key, const EC_POINT *pub_key)
 {
     if (key->meth->set_public != NULL
         && key->meth->set_public(key, pub_key) == 0)
@@ -444,57 +444,57 @@ int EC_KEY_set_public_key(EC_KEY *key, const EC_POINT *pub_key)
     return (key->pub_key == NULL) ? 0 : 1;
 }
 
-unsigned int EC_KEY_get_enc_flags(const EC_KEY *key)
+unsigned int __cdecl EC_KEY_get_enc_flags(const EC_KEY *key)
 {
     return key->enc_flag;
 }
 
-void EC_KEY_set_enc_flags(EC_KEY *key, unsigned int flags)
+void __cdecl EC_KEY_set_enc_flags(EC_KEY *key, unsigned int flags)
 {
     key->enc_flag = flags;
 }
 
-point_conversion_form_t EC_KEY_get_conv_form(const EC_KEY *key)
+point_conversion_form_t __cdecl EC_KEY_get_conv_form(const EC_KEY *key)
 {
     return key->conv_form;
 }
 
-void EC_KEY_set_conv_form(EC_KEY *key, point_conversion_form_t cform)
+void __cdecl EC_KEY_set_conv_form(EC_KEY *key, point_conversion_form_t cform)
 {
     key->conv_form = cform;
     if (key->group != NULL)
         EC_GROUP_set_point_conversion_form(key->group, cform);
 }
 
-void EC_KEY_set_asn1_flag(EC_KEY *key, int flag)
+void __cdecl EC_KEY_set_asn1_flag(EC_KEY *key, int flag)
 {
     if (key->group != NULL)
         EC_GROUP_set_asn1_flag(key->group, flag);
 }
 
-int EC_KEY_precompute_mult(EC_KEY *key, BN_CTX *ctx)
+int __cdecl EC_KEY_precompute_mult(EC_KEY *key, BN_CTX *ctx)
 {
     if (key->group == NULL)
         return 0;
     return EC_GROUP_precompute_mult(key->group, ctx);
 }
 
-int EC_KEY_get_flags(const EC_KEY *key)
+int __cdecl EC_KEY_get_flags(const EC_KEY *key)
 {
     return key->flags;
 }
 
-void EC_KEY_set_flags(EC_KEY *key, int flags)
+void __cdecl EC_KEY_set_flags(EC_KEY *key, int flags)
 {
     key->flags |= flags;
 }
 
-void EC_KEY_clear_flags(EC_KEY *key, int flags)
+void __cdecl EC_KEY_clear_flags(EC_KEY *key, int flags)
 {
     key->flags &= ~flags;
 }
 
-size_t EC_KEY_key2buf(const EC_KEY *key, point_conversion_form_t form,
+size_t __cdecl EC_KEY_key2buf(const EC_KEY *key, point_conversion_form_t form,
                         unsigned char **pbuf, BN_CTX *ctx)
 {
     if (key == NULL || key->pub_key == NULL || key->group == NULL)
@@ -502,7 +502,7 @@ size_t EC_KEY_key2buf(const EC_KEY *key, point_conversion_form_t form,
     return EC_POINT_point2buf(key->group, key->pub_key, form, pbuf, ctx);
 }
 
-int EC_KEY_oct2key(EC_KEY *key, const unsigned char *buf, size_t len,
+int __cdecl EC_KEY_oct2key(EC_KEY *key, const unsigned char *buf, size_t len,
                    BN_CTX *ctx)
 {
     if (key == NULL || key->group == NULL)
@@ -525,7 +525,7 @@ int EC_KEY_oct2key(EC_KEY *key, const unsigned char *buf, size_t len,
     return 1;
 }
 
-size_t EC_KEY_priv2oct(const EC_KEY *eckey,
+size_t __cdecl EC_KEY_priv2oct(const EC_KEY *eckey,
                        unsigned char *buf, size_t len)
 {
     if (eckey->group == NULL || eckey->group->meth == NULL)
@@ -561,7 +561,7 @@ size_t ec_key_simple_priv2oct(const EC_KEY *eckey,
     return buf_len;
 }
 
-int EC_KEY_oct2priv(EC_KEY *eckey, const unsigned char *buf, size_t len)
+int __cdecl EC_KEY_oct2priv(EC_KEY *eckey, const unsigned char *buf, size_t len)
 {
     if (eckey->group == NULL || eckey->group->meth == NULL)
         return 0;
@@ -588,7 +588,7 @@ int ec_key_simple_oct2priv(EC_KEY *eckey, const unsigned char *buf, size_t len)
     return 1;
 }
 
-size_t EC_KEY_priv2buf(const EC_KEY *eckey, unsigned char **pbuf)
+size_t __cdecl EC_KEY_priv2buf(const EC_KEY *eckey, unsigned char **pbuf)
 {
     size_t len;
     unsigned char *buf;
@@ -609,7 +609,7 @@ size_t EC_KEY_priv2buf(const EC_KEY *eckey, unsigned char **pbuf)
     return len;
 }
 
-int EC_KEY_can_sign(const EC_KEY *eckey)
+int __cdecl EC_KEY_can_sign(const EC_KEY *eckey)
 {
     if (eckey->group == NULL || eckey->group->meth == NULL
         || (eckey->group->meth->flags & EC_FLAGS_NO_SIGN))
diff --git a/crypto/ec/ec_kmeth.c b/crypto/ec/ec_kmeth.c
index 64a5d20872..cab34298f9 100644
--- a/crypto/ec/ec_kmeth.c
+++ b/crypto/ec/ec_kmeth.c
@@ -29,17 +29,17 @@ static const EC_KEY_METHOD openssl_ec_key_method = {
 
 static const EC_KEY_METHOD *default_ec_key_meth = &openssl_ec_key_method;
 
-const EC_KEY_METHOD *EC_KEY_OpenSSL(void)
+const EC_KEY_METHOD * __cdecl EC_KEY_OpenSSL(void)
 {
     return &openssl_ec_key_method;
 }
 
-const EC_KEY_METHOD *EC_KEY_get_default_method(void)
+const EC_KEY_METHOD * __cdecl EC_KEY_get_default_method(void)
 {
     return default_ec_key_meth;
 }
 
-void EC_KEY_set_default_method(const EC_KEY_METHOD *meth)
+void __cdecl EC_KEY_set_default_method(const EC_KEY_METHOD *meth)
 {
     if (meth == NULL)
         default_ec_key_meth = &openssl_ec_key_method;
@@ -47,12 +47,12 @@ void EC_KEY_set_default_method(const EC_KEY_METHOD *meth)
         default_ec_key_meth = meth;
 }
 
-const EC_KEY_METHOD *EC_KEY_get_method(const EC_KEY *key)
+const EC_KEY_METHOD * __cdecl EC_KEY_get_method(const EC_KEY *key)
 {
     return key->meth;
 }
 
-int EC_KEY_set_method(EC_KEY *key, const EC_KEY_METHOD *meth)
+int __cdecl EC_KEY_set_method(EC_KEY *key, const EC_KEY_METHOD *meth)
 {
     void (*finish)(EC_KEY *key) = key->meth->finish;
 
@@ -70,7 +70,7 @@ int EC_KEY_set_method(EC_KEY *key, const EC_KEY_METHOD *meth)
     return 1;
 }
 
-EC_KEY *EC_KEY_new_method(ENGINE *engine)
+EC_KEY * __cdecl EC_KEY_new_method(ENGINE *engine)
 {
     EC_KEY *ret = OPENSSL_zalloc(sizeof(*ret));
 
@@ -124,7 +124,7 @@ EC_KEY *EC_KEY_new_method(ENGINE *engine)
     return NULL;
 }
 
-int ECDH_compute_key(void *out, size_t outlen, const EC_POINT *pub_key,
+int __cdecl ECDH_compute_key(void *out, size_t outlen, const EC_POINT *pub_key,
                      const EC_KEY *eckey,
                      void *(*KDF) (const void *in, size_t inlen, void *out,
                                    size_t *outlen))
@@ -152,7 +152,7 @@ int ECDH_compute_key(void *out, size_t outlen, const EC_POINT *pub_key,
     return outlen;
 }
 
-EC_KEY_METHOD *EC_KEY_METHOD_new(const EC_KEY_METHOD *meth)
+EC_KEY_METHOD * __cdecl EC_KEY_METHOD_new(const EC_KEY_METHOD *meth)
 {
     EC_KEY_METHOD *ret = OPENSSL_zalloc(sizeof(*meth));
 
@@ -164,13 +164,13 @@ EC_KEY_METHOD *EC_KEY_METHOD_new(const EC_KEY_METHOD *meth)
     return ret;
 }
 
-void EC_KEY_METHOD_free(EC_KEY_METHOD *meth)
+void __cdecl EC_KEY_METHOD_free(EC_KEY_METHOD *meth)
 {
     if (meth->flags & EC_KEY_METHOD_DYNAMIC)
         OPENSSL_free(meth);
 }
 
-void EC_KEY_METHOD_set_init(EC_KEY_METHOD *meth,
+void __cdecl EC_KEY_METHOD_set_init(EC_KEY_METHOD *meth,
                             int (*init)(EC_KEY *key),
                             void (*finish)(EC_KEY *key),
                             int (*copy)(EC_KEY *dest, const EC_KEY *src),
@@ -188,13 +188,13 @@ void EC_KEY_METHOD_set_init(EC_KEY_METHOD *meth,
     meth->set_public = set_public;
 }
 
-void EC_KEY_METHOD_set_keygen(EC_KEY_METHOD *meth,
+void __cdecl EC_KEY_METHOD_set_keygen(EC_KEY_METHOD *meth,
                               int (*keygen)(EC_KEY *key))
 {
     meth->keygen = keygen;
 }
 
-void EC_KEY_METHOD_set_compute_key(EC_KEY_METHOD *meth,
+void __cdecl EC_KEY_METHOD_set_compute_key(EC_KEY_METHOD *meth,
                                    int (*ckey)(unsigned char **psec,
                                                size_t *pseclen,
                                                const EC_POINT *pub_key,
@@ -203,7 +203,7 @@ void EC_KEY_METHOD_set_compute_key(EC_KEY_METHOD *meth,
     meth->compute_key = ckey;
 }
 
-void EC_KEY_METHOD_set_sign(EC_KEY_METHOD *meth,
+void __cdecl EC_KEY_METHOD_set_sign(EC_KEY_METHOD *meth,
                             int (*sign)(int type, const unsigned char *dgst,
                                         int dlen, unsigned char *sig,
                                         unsigned int *siglen,
@@ -222,7 +222,7 @@ void EC_KEY_METHOD_set_sign(EC_KEY_METHOD *meth,
     meth->sign_sig = sign_sig;
 }
 
-void EC_KEY_METHOD_set_verify(EC_KEY_METHOD *meth,
+void __cdecl EC_KEY_METHOD_set_verify(EC_KEY_METHOD *meth,
                               int (*verify)(int type, const unsigned
                                             char *dgst, int dgst_len,
                                             const unsigned char *sigbuf,
@@ -236,7 +236,7 @@ void EC_KEY_METHOD_set_verify(EC_KEY_METHOD *meth,
     meth->verify_sig = verify_sig;
 }
 
-void EC_KEY_METHOD_get_init(const EC_KEY_METHOD *meth,
+void __cdecl EC_KEY_METHOD_get_init(const EC_KEY_METHOD *meth,
                             int (**pinit)(EC_KEY *key),
                             void (**pfinish)(EC_KEY *key),
                             int (**pcopy)(EC_KEY *dest, const EC_KEY *src),
@@ -261,14 +261,14 @@ void EC_KEY_METHOD_get_init(const EC_KEY_METHOD *meth,
         *pset_public = meth->set_public;
 }
 
-void EC_KEY_METHOD_get_keygen(const EC_KEY_METHOD *meth,
+void __cdecl EC_KEY_METHOD_get_keygen(const EC_KEY_METHOD *meth,
                               int (**pkeygen)(EC_KEY *key))
 {
     if (pkeygen != NULL)
         *pkeygen = meth->keygen;
 }
 
-void EC_KEY_METHOD_get_compute_key(const EC_KEY_METHOD *meth,
+void __cdecl EC_KEY_METHOD_get_compute_key(const EC_KEY_METHOD *meth,
                                    int (**pck)(unsigned char **pout,
                                                size_t *poutlen,
                                                const EC_POINT *pub_key,
@@ -278,7 +278,7 @@ void EC_KEY_METHOD_get_compute_key(const EC_KEY_METHOD *meth,
         *pck = meth->compute_key;
 }
 
-void EC_KEY_METHOD_get_sign(const EC_KEY_METHOD *meth,
+void __cdecl EC_KEY_METHOD_get_sign(const EC_KEY_METHOD *meth,
                             int (**psign)(int type, const unsigned char *dgst,
                                           int dlen, unsigned char *sig,
                                           unsigned int *siglen,
@@ -300,7 +300,7 @@ void EC_KEY_METHOD_get_sign(const EC_KEY_METHOD *meth,
         *psign_sig = meth->sign_sig;
 }
 
-void EC_KEY_METHOD_get_verify(const EC_KEY_METHOD *meth,
+void __cdecl EC_KEY_METHOD_get_verify(const EC_KEY_METHOD *meth,
                               int (**pverify)(int type, const unsigned
                                               char *dgst, int dgst_len,
                                               const unsigned char *sigbuf,
diff --git a/crypto/ec/ec_lcl.h b/crypto/ec/ec_lcl.h
index fbdb04ea3a..c979ee994f 100644
--- a/crypto/ec/ec_lcl.h
+++ b/crypto/ec/ec_lcl.h
@@ -246,7 +246,7 @@ struct ec_group_st {
     /* method-specific */
     void *field_data2;
     /* method-specific */
-    int (*field_mod_func) (BIGNUM *, const BIGNUM *, const BIGNUM *,
+    int (__cdecl *field_mod_func) (BIGNUM *, const BIGNUM *, const BIGNUM *,
                            BN_CTX *);
     /* data for ECDSA inverse */
     BN_MONT_CTX *mont_data;
diff --git a/crypto/ec/ec_lib.c b/crypto/ec/ec_lib.c
index 1289c8608e..2b5e64c2eb 100644
--- a/crypto/ec/ec_lib.c
+++ b/crypto/ec/ec_lib.c
@@ -17,7 +17,7 @@
 
 /* functions for EC_GROUP objects */
 
-EC_GROUP *EC_GROUP_new(const EC_METHOD *meth)
+EC_GROUP * __cdecl EC_GROUP_new(const EC_METHOD *meth)
 {
     EC_GROUP *ret;
 
@@ -91,7 +91,7 @@ void EC_pre_comp_free(EC_GROUP *group)
     group->pre_comp.ec = NULL;
 }
 
-void EC_GROUP_free(EC_GROUP *group)
+void __cdecl EC_GROUP_free(EC_GROUP *group)
 {
     if (!group)
         return;
@@ -108,7 +108,7 @@ void EC_GROUP_free(EC_GROUP *group)
     OPENSSL_free(group);
 }
 
-void EC_GROUP_clear_free(EC_GROUP *group)
+void __cdecl EC_GROUP_clear_free(EC_GROUP *group)
 {
     if (!group)
         return;
@@ -127,7 +127,7 @@ void EC_GROUP_clear_free(EC_GROUP *group)
     OPENSSL_clear_free(group, sizeof(*group));
 }
 
-int EC_GROUP_copy(EC_GROUP *dest, const EC_GROUP *src)
+int __cdecl EC_GROUP_copy(EC_GROUP *dest, const EC_GROUP *src)
 {
     if (dest->meth->group_copy == 0) {
         ECerr(EC_F_EC_GROUP_COPY, ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED);
@@ -230,7 +230,7 @@ int EC_GROUP_copy(EC_GROUP *dest, const EC_GROUP *src)
     return dest->meth->group_copy(dest, src);
 }
 
-EC_GROUP *EC_GROUP_dup(const EC_GROUP *a)
+EC_GROUP * __cdecl EC_GROUP_dup(const EC_GROUP *a)
 {
     EC_GROUP *t = NULL;
     int ok = 0;
@@ -253,12 +253,12 @@ EC_GROUP *EC_GROUP_dup(const EC_GROUP *a)
         return t;
 }
 
-const EC_METHOD *EC_GROUP_method_of(const EC_GROUP *group)
+const EC_METHOD * __cdecl EC_GROUP_method_of(const EC_GROUP *group)
 {
     return group->meth;
 }
 
-int EC_METHOD_get_field_type(const EC_METHOD *meth)
+int __cdecl EC_METHOD_get_field_type(const EC_METHOD *meth)
 {
     return meth->field_type;
 }
@@ -326,7 +326,7 @@ static int ec_guess_cofactor(EC_GROUP *group) {
     return ret;
 }
 
-int EC_GROUP_set_generator(EC_GROUP *group, const EC_POINT *generator,
+int __cdecl EC_GROUP_set_generator(EC_GROUP *group, const EC_POINT *generator,
                            const BIGNUM *order, const BIGNUM *cofactor)
 {
     if (generator == NULL) {
@@ -396,17 +396,17 @@ int EC_GROUP_set_generator(EC_GROUP *group, const EC_POINT *generator,
     return 1;
 }
 
-const EC_POINT *EC_GROUP_get0_generator(const EC_GROUP *group)
+const EC_POINT * __cdecl EC_GROUP_get0_generator(const EC_GROUP *group)
 {
     return group->generator;
 }
 
-BN_MONT_CTX *EC_GROUP_get_mont_data(const EC_GROUP *group)
+BN_MONT_CTX * __cdecl EC_GROUP_get_mont_data(const EC_GROUP *group)
 {
     return group->mont_data;
 }
 
-int EC_GROUP_get_order(const EC_GROUP *group, BIGNUM *order, BN_CTX *ctx)
+int __cdecl EC_GROUP_get_order(const EC_GROUP *group, BIGNUM *order, BN_CTX *ctx)
 {
     if (group->order == NULL)
         return 0;
@@ -416,17 +416,17 @@ int EC_GROUP_get_order(const EC_GROUP *group, BIGNUM *order, BN_CTX *ctx)
     return !BN_is_zero(order);
 }
 
-const BIGNUM *EC_GROUP_get0_order(const EC_GROUP *group)
+const BIGNUM * __cdecl EC_GROUP_get0_order(const EC_GROUP *group)
 {
     return group->order;
 }
 
-int EC_GROUP_order_bits(const EC_GROUP *group)
+int __cdecl EC_GROUP_order_bits(const EC_GROUP *group)
 {
     return group->meth->group_order_bits(group);
 }
 
-int EC_GROUP_get_cofactor(const EC_GROUP *group, BIGNUM *cofactor,
+int __cdecl EC_GROUP_get_cofactor(const EC_GROUP *group, BIGNUM *cofactor,
                           BN_CTX *ctx)
 {
 
@@ -438,44 +438,44 @@ int EC_GROUP_get_cofactor(const EC_GROUP *group, BIGNUM *cofactor,
     return !BN_is_zero(group->cofactor);
 }
 
-const BIGNUM *EC_GROUP_get0_cofactor(const EC_GROUP *group)
+const BIGNUM * __cdecl EC_GROUP_get0_cofactor(const EC_GROUP *group)
 {
     return group->cofactor;
 }
 
-void EC_GROUP_set_curve_name(EC_GROUP *group, int nid)
+void __cdecl EC_GROUP_set_curve_name(EC_GROUP *group, int nid)
 {
     group->curve_name = nid;
 }
 
-int EC_GROUP_get_curve_name(const EC_GROUP *group)
+int __cdecl EC_GROUP_get_curve_name(const EC_GROUP *group)
 {
     return group->curve_name;
 }
 
-void EC_GROUP_set_asn1_flag(EC_GROUP *group, int flag)
+void __cdecl EC_GROUP_set_asn1_flag(EC_GROUP *group, int flag)
 {
     group->asn1_flag = flag;
 }
 
-int EC_GROUP_get_asn1_flag(const EC_GROUP *group)
+int __cdecl EC_GROUP_get_asn1_flag(const EC_GROUP *group)
 {
     return group->asn1_flag;
 }
 
-void EC_GROUP_set_point_conversion_form(EC_GROUP *group,
+void __cdecl EC_GROUP_set_point_conversion_form(EC_GROUP *group,
                                         point_conversion_form_t form)
 {
     group->asn1_form = form;
 }
 
-point_conversion_form_t EC_GROUP_get_point_conversion_form(const EC_GROUP
+point_conversion_form_t __cdecl EC_GROUP_get_point_conversion_form(const EC_GROUP
                                                            *group)
 {
     return group->asn1_form;
 }
 
-size_t EC_GROUP_set_seed(EC_GROUP *group, const unsigned char *p, size_t len)
+size_t __cdecl EC_GROUP_set_seed(EC_GROUP *group, const unsigned char *p, size_t len)
 {
     OPENSSL_free(group->seed);
     group->seed = NULL;
@@ -494,17 +494,17 @@ size_t EC_GROUP_set_seed(EC_GROUP *group, const unsigned char *p, size_t len)
     return len;
 }
 
-unsigned char *EC_GROUP_get0_seed(const EC_GROUP *group)
+unsigned char * __cdecl EC_GROUP_get0_seed(const EC_GROUP *group)
 {
     return group->seed;
 }
 
-size_t EC_GROUP_get_seed_len(const EC_GROUP *group)
+size_t __cdecl EC_GROUP_get_seed_len(const EC_GROUP *group)
 {
     return group->seed_len;
 }
 
-int EC_GROUP_set_curve(EC_GROUP *group, const BIGNUM *p, const BIGNUM *a,
+int __cdecl EC_GROUP_set_curve(EC_GROUP *group, const BIGNUM *p, const BIGNUM *a,
                        const BIGNUM *b, BN_CTX *ctx)
 {
     if (group->meth->group_set_curve == 0) {
@@ -514,7 +514,7 @@ int EC_GROUP_set_curve(EC_GROUP *group, const BIGNUM *p, const BIGNUM *a,
     return group->meth->group_set_curve(group, p, a, b, ctx);
 }
 
-int EC_GROUP_get_curve(const EC_GROUP *group, BIGNUM *p, BIGNUM *a, BIGNUM *b,
+int __cdecl EC_GROUP_get_curve(const EC_GROUP *group, BIGNUM *p, BIGNUM *a, BIGNUM *b,
                        BN_CTX *ctx)
 {
     if (group->meth->group_get_curve == NULL) {
@@ -525,26 +525,26 @@ int EC_GROUP_get_curve(const EC_GROUP *group, BIGNUM *p, BIGNUM *a, BIGNUM *b,
 }
 
 #if OPENSSL_API_COMPAT < 0x10200000L
-int EC_GROUP_set_curve_GFp(EC_GROUP *group, const BIGNUM *p, const BIGNUM *a,
+int __cdecl EC_GROUP_set_curve_GFp(EC_GROUP *group, const BIGNUM *p, const BIGNUM *a,
                            const BIGNUM *b, BN_CTX *ctx)
 {
     return EC_GROUP_set_curve(group, p, a, b, ctx);
 }
 
-int EC_GROUP_get_curve_GFp(const EC_GROUP *group, BIGNUM *p, BIGNUM *a,
+int __cdecl EC_GROUP_get_curve_GFp(const EC_GROUP *group, BIGNUM *p, BIGNUM *a,
                            BIGNUM *b, BN_CTX *ctx)
 {
     return EC_GROUP_get_curve(group, p, a, b, ctx);
 }
 
 # ifndef OPENSSL_NO_EC2M
-int EC_GROUP_set_curve_GF2m(EC_GROUP *group, const BIGNUM *p, const BIGNUM *a,
+int __cdecl EC_GROUP_set_curve_GF2m(EC_GROUP *group, const BIGNUM *p, const BIGNUM *a,
                             const BIGNUM *b, BN_CTX *ctx)
 {
     return EC_GROUP_set_curve(group, p, a, b, ctx);
 }
 
-int EC_GROUP_get_curve_GF2m(const EC_GROUP *group, BIGNUM *p, BIGNUM *a,
+int __cdecl EC_GROUP_get_curve_GF2m(const EC_GROUP *group, BIGNUM *p, BIGNUM *a,
                             BIGNUM *b, BN_CTX *ctx)
 {
     return EC_GROUP_get_curve(group, p, a, b, ctx);
@@ -552,7 +552,7 @@ int EC_GROUP_get_curve_GF2m(const EC_GROUP *group, BIGNUM *p, BIGNUM *a,
 # endif
 #endif
 
-int EC_GROUP_get_degree(const EC_GROUP *group)
+int __cdecl EC_GROUP_get_degree(const EC_GROUP *group)
 {
     if (group->meth->group_get_degree == 0) {
         ECerr(EC_F_EC_GROUP_GET_DEGREE, ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED);
@@ -561,7 +561,7 @@ int EC_GROUP_get_degree(const EC_GROUP *group)
     return group->meth->group_get_degree(group);
 }
 
-int EC_GROUP_check_discriminant(const EC_GROUP *group, BN_CTX *ctx)
+int __cdecl EC_GROUP_check_discriminant(const EC_GROUP *group, BN_CTX *ctx)
 {
     if (group->meth->group_check_discriminant == 0) {
         ECerr(EC_F_EC_GROUP_CHECK_DISCRIMINANT,
@@ -571,7 +571,7 @@ int EC_GROUP_check_discriminant(const EC_GROUP *group, BN_CTX *ctx)
     return group->meth->group_check_discriminant(group, ctx);
 }
 
-int EC_GROUP_cmp(const EC_GROUP *a, const EC_GROUP *b, BN_CTX *ctx)
+int __cdecl EC_GROUP_cmp(const EC_GROUP *a, const EC_GROUP *b, BN_CTX *ctx)
 {
     int r = 0;
     BIGNUM *a1, *a2, *a3, *b1, *b2, *b3;
@@ -646,7 +646,7 @@ int EC_GROUP_cmp(const EC_GROUP *a, const EC_GROUP *b, BN_CTX *ctx)
 
 /* functions for EC_POINT objects */
 
-EC_POINT *EC_POINT_new(const EC_GROUP *group)
+EC_POINT * __cdecl EC_POINT_new(const EC_GROUP *group)
 {
     EC_POINT *ret;
 
@@ -676,7 +676,7 @@ EC_POINT *EC_POINT_new(const EC_GROUP *group)
     return ret;
 }
 
-void EC_POINT_free(EC_POINT *point)
+void __cdecl EC_POINT_free(EC_POINT *point)
 {
     if (!point)
         return;
@@ -686,7 +686,7 @@ void EC_POINT_free(EC_POINT *point)
     OPENSSL_free(point);
 }
 
-void EC_POINT_clear_free(EC_POINT *point)
+void __cdecl EC_POINT_clear_free(EC_POINT *point)
 {
     if (!point)
         return;
@@ -698,7 +698,7 @@ void EC_POINT_clear_free(EC_POINT *point)
     OPENSSL_clear_free(point, sizeof(*point));
 }
 
-int EC_POINT_copy(EC_POINT *dest, const EC_POINT *src)
+int __cdecl EC_POINT_copy(EC_POINT *dest, const EC_POINT *src)
 {
     if (dest->meth->point_copy == 0) {
         ECerr(EC_F_EC_POINT_COPY, ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED);
@@ -716,7 +716,7 @@ int EC_POINT_copy(EC_POINT *dest, const EC_POINT *src)
     return dest->meth->point_copy(dest, src);
 }
 
-EC_POINT *EC_POINT_dup(const EC_POINT *a, const EC_GROUP *group)
+EC_POINT * __cdecl EC_POINT_dup(const EC_POINT *a, const EC_GROUP *group)
 {
     EC_POINT *t;
     int r;
@@ -735,12 +735,12 @@ EC_POINT *EC_POINT_dup(const EC_POINT *a, const EC_GROUP *group)
     return t;
 }
 
-const EC_METHOD *EC_POINT_method_of(const EC_POINT *point)
+const EC_METHOD * __cdecl EC_POINT_method_of(const EC_POINT *point)
 {
     return point->meth;
 }
 
-int EC_POINT_set_to_infinity(const EC_GROUP *group, EC_POINT *point)
+int __cdecl EC_POINT_set_to_infinity(const EC_GROUP *group, EC_POINT *point)
 {
     if (group->meth->point_set_to_infinity == 0) {
         ECerr(EC_F_EC_POINT_SET_TO_INFINITY,
@@ -754,7 +754,7 @@ int EC_POINT_set_to_infinity(const EC_GROUP *group, EC_POINT *point)
     return group->meth->point_set_to_infinity(group, point);
 }
 
-int EC_POINT_set_Jprojective_coordinates_GFp(const EC_GROUP *group,
+int __cdecl EC_POINT_set_Jprojective_coordinates_GFp(const EC_GROUP *group,
                                              EC_POINT *point, const BIGNUM *x,
                                              const BIGNUM *y, const BIGNUM *z,
                                              BN_CTX *ctx)
@@ -773,7 +773,7 @@ int EC_POINT_set_Jprojective_coordinates_GFp(const EC_GROUP *group,
                                                               y, z, ctx);
 }
 
-int EC_POINT_get_Jprojective_coordinates_GFp(const EC_GROUP *group,
+int __cdecl EC_POINT_get_Jprojective_coordinates_GFp(const EC_GROUP *group,
                                              const EC_POINT *point, BIGNUM *x,
                                              BIGNUM *y, BIGNUM *z,
                                              BN_CTX *ctx)
@@ -792,7 +792,7 @@ int EC_POINT_get_Jprojective_coordinates_GFp(const EC_GROUP *group,
                                                               y, z, ctx);
 }
 
-int EC_POINT_set_affine_coordinates(const EC_GROUP *group, EC_POINT *point,
+int __cdecl EC_POINT_set_affine_coordinates(const EC_GROUP *group, EC_POINT *point,
                                     const BIGNUM *x, const BIGNUM *y,
                                     BN_CTX *ctx)
 {
@@ -816,7 +816,7 @@ int EC_POINT_set_affine_coordinates(const EC_GROUP *group, EC_POINT *point,
 }
 
 #if OPENSSL_API_COMPAT < 0x10200000L
-int EC_POINT_set_affine_coordinates_GFp(const EC_GROUP *group,
+int __cdecl EC_POINT_set_affine_coordinates_GFp(const EC_GROUP *group,
                                         EC_POINT *point, const BIGNUM *x,
                                         const BIGNUM *y, BN_CTX *ctx)
 {
@@ -824,7 +824,7 @@ int EC_POINT_set_affine_coordinates_GFp(const EC_GROUP *group,
 }
 
 # ifndef OPENSSL_NO_EC2M
-int EC_POINT_set_affine_coordinates_GF2m(const EC_GROUP *group,
+int __cdecl EC_POINT_set_affine_coordinates_GF2m(const EC_GROUP *group,
                                          EC_POINT *point, const BIGNUM *x,
                                          const BIGNUM *y, BN_CTX *ctx)
 {
@@ -833,7 +833,7 @@ int EC_POINT_set_affine_coordinates_GF2m(const EC_GROUP *group,
 # endif
 #endif
 
-int EC_POINT_get_affine_coordinates(const EC_GROUP *group,
+int __cdecl EC_POINT_get_affine_coordinates(const EC_GROUP *group,
                                     const EC_POINT *point, BIGNUM *x, BIGNUM *y,
                                     BN_CTX *ctx)
 {
@@ -854,7 +854,7 @@ int EC_POINT_get_affine_coordinates(const EC_GROUP *group,
 }
 
 #if OPENSSL_API_COMPAT < 0x10200000L
-int EC_POINT_get_affine_coordinates_GFp(const EC_GROUP *group,
+int __cdecl EC_POINT_get_affine_coordinates_GFp(const EC_GROUP *group,
                                         const EC_POINT *point, BIGNUM *x,
                                         BIGNUM *y, BN_CTX *ctx)
 {
@@ -862,7 +862,7 @@ int EC_POINT_get_affine_coordinates_GFp(const EC_GROUP *group,
 }
 
 # ifndef OPENSSL_NO_EC2M
-int EC_POINT_get_affine_coordinates_GF2m(const EC_GROUP *group,
+int __cdecl EC_POINT_get_affine_coordinates_GF2m(const EC_GROUP *group,
                                          const EC_POINT *point, BIGNUM *x,
                                          BIGNUM *y, BN_CTX *ctx)
 {
@@ -871,7 +871,7 @@ int EC_POINT_get_affine_coordinates_GF2m(const EC_GROUP *group,
 # endif
 #endif
 
-int EC_POINT_add(const EC_GROUP *group, EC_POINT *r, const EC_POINT *a,
+int __cdecl EC_POINT_add(const EC_GROUP *group, EC_POINT *r, const EC_POINT *a,
                  const EC_POINT *b, BN_CTX *ctx)
 {
     if (group->meth->add == 0) {
@@ -886,7 +886,7 @@ int EC_POINT_add(const EC_GROUP *group, EC_POINT *r, const EC_POINT *a,
     return group->meth->add(group, r, a, b, ctx);
 }
 
-int EC_POINT_dbl(const EC_GROUP *group, EC_POINT *r, const EC_POINT *a,
+int __cdecl EC_POINT_dbl(const EC_GROUP *group, EC_POINT *r, const EC_POINT *a,
                  BN_CTX *ctx)
 {
     if (group->meth->dbl == 0) {
@@ -900,7 +900,7 @@ int EC_POINT_dbl(const EC_GROUP *group, EC_POINT *r, const EC_POINT *a,
     return group->meth->dbl(group, r, a, ctx);
 }
 
-int EC_POINT_invert(const EC_GROUP *group, EC_POINT *a, BN_CTX *ctx)
+int __cdecl EC_POINT_invert(const EC_GROUP *group, EC_POINT *a, BN_CTX *ctx)
 {
     if (group->meth->invert == 0) {
         ECerr(EC_F_EC_POINT_INVERT, ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED);
@@ -913,7 +913,7 @@ int EC_POINT_invert(const EC_GROUP *group, EC_POINT *a, BN_CTX *ctx)
     return group->meth->invert(group, a, ctx);
 }
 
-int EC_POINT_is_at_infinity(const EC_GROUP *group, const EC_POINT *point)
+int __cdecl EC_POINT_is_at_infinity(const EC_GROUP *group, const EC_POINT *point)
 {
     if (group->meth->is_at_infinity == 0) {
         ECerr(EC_F_EC_POINT_IS_AT_INFINITY,
@@ -934,7 +934,7 @@ int EC_POINT_is_at_infinity(const EC_GROUP *group, const EC_POINT *point)
  *  0: The point is not on the curve
  * -1: An error occurred
  */
-int EC_POINT_is_on_curve(const EC_GROUP *group, const EC_POINT *point,
+int __cdecl EC_POINT_is_on_curve(const EC_GROUP *group, const EC_POINT *point,
                          BN_CTX *ctx)
 {
     if (group->meth->is_on_curve == 0) {
@@ -948,7 +948,7 @@ int EC_POINT_is_on_curve(const EC_GROUP *group, const EC_POINT *point,
     return group->meth->is_on_curve(group, point, ctx);
 }
 
-int EC_POINT_cmp(const EC_GROUP *group, const EC_POINT *a, const EC_POINT *b,
+int __cdecl EC_POINT_cmp(const EC_GROUP *group, const EC_POINT *a, const EC_POINT *b,
                  BN_CTX *ctx)
 {
     if (group->meth->point_cmp == 0) {
@@ -962,7 +962,7 @@ int EC_POINT_cmp(const EC_GROUP *group, const EC_POINT *a, const EC_POINT *b,
     return group->meth->point_cmp(group, a, b, ctx);
 }
 
-int EC_POINT_make_affine(const EC_GROUP *group, EC_POINT *point, BN_CTX *ctx)
+int __cdecl EC_POINT_make_affine(const EC_GROUP *group, EC_POINT *point, BN_CTX *ctx)
 {
     if (group->meth->make_affine == 0) {
         ECerr(EC_F_EC_POINT_MAKE_AFFINE, ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED);
@@ -975,7 +975,7 @@ int EC_POINT_make_affine(const EC_GROUP *group, EC_POINT *point, BN_CTX *ctx)
     return group->meth->make_affine(group, point, ctx);
 }
 
-int EC_POINTs_make_affine(const EC_GROUP *group, size_t num,
+int __cdecl EC_POINTs_make_affine(const EC_GROUP *group, size_t num,
                           EC_POINT *points[], BN_CTX *ctx)
 {
     size_t i;
@@ -999,7 +999,7 @@ int EC_POINTs_make_affine(const EC_GROUP *group, size_t num,
  * methods.
  */
 
-int EC_POINTs_mul(const EC_GROUP *group, EC_POINT *r, const BIGNUM *scalar,
+int __cdecl EC_POINTs_mul(const EC_GROUP *group, EC_POINT *r, const BIGNUM *scalar,
                   size_t num, const EC_POINT *points[],
                   const BIGNUM *scalars[], BN_CTX *ctx)
 {
@@ -1037,7 +1037,7 @@ int EC_POINTs_mul(const EC_GROUP *group, EC_POINT *r, const BIGNUM *scalar,
     return ret;
 }
 
-int EC_POINT_mul(const EC_GROUP *group, EC_POINT *r, const BIGNUM *g_scalar,
+int __cdecl EC_POINT_mul(const EC_GROUP *group, EC_POINT *r, const BIGNUM *g_scalar,
                  const EC_POINT *point, const BIGNUM *p_scalar, BN_CTX *ctx)
 {
     /* just a convenient interface to EC_POINTs_mul() */
@@ -1053,7 +1053,7 @@ int EC_POINT_mul(const EC_GROUP *group, EC_POINT *r, const BIGNUM *g_scalar,
                           && p_scalar != NULL), points, scalars, ctx);
 }
 
-int EC_GROUP_precompute_mult(EC_GROUP *group, BN_CTX *ctx)
+int __cdecl EC_GROUP_precompute_mult(EC_GROUP *group, BN_CTX *ctx)
 {
     if (group->meth->mul == 0)
         /* use default */
@@ -1065,7 +1065,7 @@ int EC_GROUP_precompute_mult(EC_GROUP *group, BN_CTX *ctx)
         return 1;               /* nothing to do, so report success */
 }
 
-int EC_GROUP_have_precompute_mult(const EC_GROUP *group)
+int __cdecl EC_GROUP_have_precompute_mult(const EC_GROUP *group)
 {
     if (group->meth->mul == 0)
         /* use default */
@@ -1111,12 +1111,12 @@ static int ec_precompute_mont_data(EC_GROUP *group)
     return ret;
 }
 
-int EC_KEY_set_ex_data(EC_KEY *key, int idx, void *arg)
+int __cdecl EC_KEY_set_ex_data(EC_KEY *key, int idx, void *arg)
 {
     return CRYPTO_set_ex_data(&key->ex_data, idx, arg);
 }
 
-void *EC_KEY_get_ex_data(const EC_KEY *key, int idx)
+void * __cdecl EC_KEY_get_ex_data(const EC_KEY *key, int idx)
 {
     return CRYPTO_get_ex_data(&key->ex_data, idx);
 }
diff --git a/crypto/ec/ec_oct.c b/crypto/ec/ec_oct.c
index 522f79e673..8ce78e8084 100644
--- a/crypto/ec/ec_oct.c
+++ b/crypto/ec/ec_oct.c
@@ -15,7 +15,7 @@
 
 #include "ec_lcl.h"
 
-int EC_POINT_set_compressed_coordinates(const EC_GROUP *group, EC_POINT *point,
+int __cdecl EC_POINT_set_compressed_coordinates(const EC_GROUP *group, EC_POINT *point,
                                         const BIGNUM *x, int y_bit, BN_CTX *ctx)
 {
     if (group->meth->point_set_compressed_coordinates == NULL
@@ -50,7 +50,7 @@ int EC_POINT_set_compressed_coordinates(const EC_GROUP *group, EC_POINT *point,
 }
 
 #if OPENSSL_API_COMPAT < 0x10200000L
-int EC_POINT_set_compressed_coordinates_GFp(const EC_GROUP *group,
+int __cdecl EC_POINT_set_compressed_coordinates_GFp(const EC_GROUP *group,
                                             EC_POINT *point, const BIGNUM *x,
                                             int y_bit, BN_CTX *ctx)
 {
@@ -58,7 +58,7 @@ int EC_POINT_set_compressed_coordinates_GFp(const EC_GROUP *group,
 }
 
 # ifndef OPENSSL_NO_EC2M
-int EC_POINT_set_compressed_coordinates_GF2m(const EC_GROUP *group,
+int __cdecl EC_POINT_set_compressed_coordinates_GF2m(const EC_GROUP *group,
                                              EC_POINT *point, const BIGNUM *x,
                                              int y_bit, BN_CTX *ctx)
 {
@@ -67,7 +67,7 @@ int EC_POINT_set_compressed_coordinates_GF2m(const EC_GROUP *group,
 # endif
 #endif
 
-size_t EC_POINT_point2oct(const EC_GROUP *group, const EC_POINT *point,
+size_t __cdecl EC_POINT_point2oct(const EC_GROUP *group, const EC_POINT *point,
                           point_conversion_form_t form, unsigned char *buf,
                           size_t len, BN_CTX *ctx)
 {
@@ -98,7 +98,7 @@ size_t EC_POINT_point2oct(const EC_GROUP *group, const EC_POINT *point,
     return group->meth->point2oct(group, point, form, buf, len, ctx);
 }
 
-int EC_POINT_oct2point(const EC_GROUP *group, EC_POINT *point,
+int __cdecl EC_POINT_oct2point(const EC_GROUP *group, EC_POINT *point,
                        const unsigned char *buf, size_t len, BN_CTX *ctx)
 {
     if (group->meth->oct2point == 0
@@ -126,7 +126,7 @@ int EC_POINT_oct2point(const EC_GROUP *group, EC_POINT *point,
     return group->meth->oct2point(group, point, buf, len, ctx);
 }
 
-size_t EC_POINT_point2buf(const EC_GROUP *group, const EC_POINT *point,
+size_t __cdecl EC_POINT_point2buf(const EC_GROUP *group, const EC_POINT *point,
                           point_conversion_form_t form,
                           unsigned char **pbuf, BN_CTX *ctx)
 {
diff --git a/crypto/ec/ec_pmeth.c b/crypto/ec/ec_pmeth.c
index 454be16c54..521d2d8ba9 100644
--- a/crypto/ec/ec_pmeth.c
+++ b/crypto/ec/ec_pmeth.c
@@ -38,7 +38,7 @@ typedef struct {
     size_t kdf_outlen;
 } EC_PKEY_CTX;
 
-static int pkey_ec_init(EVP_PKEY_CTX *ctx)
+static int __cdecl  pkey_ec_init(EVP_PKEY_CTX *ctx)
 {
     EC_PKEY_CTX *dctx;
 
@@ -53,7 +53,7 @@ static int pkey_ec_init(EVP_PKEY_CTX *ctx)
     return 1;
 }
 
-static int pkey_ec_copy(EVP_PKEY_CTX *dst, EVP_PKEY_CTX *src)
+static int __cdecl  pkey_ec_copy(EVP_PKEY_CTX *dst, EVP_PKEY_CTX *src)
 {
     EC_PKEY_CTX *dctx, *sctx;
     if (!pkey_ec_init(dst))
@@ -85,7 +85,7 @@ static int pkey_ec_copy(EVP_PKEY_CTX *dst, EVP_PKEY_CTX *src)
     return 1;
 }
 
-static void pkey_ec_cleanup(EVP_PKEY_CTX *ctx)
+static void __cdecl pkey_ec_cleanup(EVP_PKEY_CTX *ctx)
 {
     EC_PKEY_CTX *dctx = ctx->data;
     if (dctx != NULL) {
@@ -97,7 +97,7 @@ static void pkey_ec_cleanup(EVP_PKEY_CTX *ctx)
     }
 }
 
-static int pkey_ec_sign(EVP_PKEY_CTX *ctx, unsigned char *sig, size_t *siglen,
+static int __cdecl  pkey_ec_sign(EVP_PKEY_CTX *ctx, unsigned char *sig, size_t *siglen,
                         const unsigned char *tbs, size_t tbslen)
 {
     int ret, type;
@@ -130,7 +130,7 @@ static int pkey_ec_sign(EVP_PKEY_CTX *ctx, unsigned char *sig, size_t *siglen,
     return 1;
 }
 
-static int pkey_ec_verify(EVP_PKEY_CTX *ctx,
+static int __cdecl  pkey_ec_verify(EVP_PKEY_CTX *ctx,
                           const unsigned char *sig, size_t siglen,
                           const unsigned char *tbs, size_t tbslen)
 {
@@ -149,7 +149,7 @@ static int pkey_ec_verify(EVP_PKEY_CTX *ctx,
 }
 
 #ifndef OPENSSL_NO_EC
-static int pkey_ec_derive(EVP_PKEY_CTX *ctx, unsigned char *key, size_t *keylen)
+static int __cdecl  pkey_ec_derive(EVP_PKEY_CTX *ctx, unsigned char *key, size_t *keylen)
 {
     int ret;
     size_t outlen;
@@ -185,7 +185,7 @@ static int pkey_ec_derive(EVP_PKEY_CTX *ctx, unsigned char *key, size_t *keylen)
     return 1;
 }
 
-static int pkey_ec_kdf_derive(EVP_PKEY_CTX *ctx,
+static int __cdecl  pkey_ec_kdf_derive(EVP_PKEY_CTX *ctx,
                               unsigned char *key, size_t *keylen)
 {
     EC_PKEY_CTX *dctx = ctx->data;
@@ -220,7 +220,7 @@ static int pkey_ec_kdf_derive(EVP_PKEY_CTX *ctx,
 }
 #endif
 
-static int pkey_ec_ctrl(EVP_PKEY_CTX *ctx, int type, int p1, void *p2)
+static int __cdecl  pkey_ec_ctrl(EVP_PKEY_CTX *ctx, int type, int p1, void *p2)
 {
     EC_PKEY_CTX *dctx = ctx->data;
     EC_GROUP *group;
@@ -351,7 +351,7 @@ static int pkey_ec_ctrl(EVP_PKEY_CTX *ctx, int type, int p1, void *p2)
     }
 }
 
-static int pkey_ec_ctrl_str(EVP_PKEY_CTX *ctx,
+static int __cdecl  pkey_ec_ctrl_str(EVP_PKEY_CTX *ctx,
                             const char *type, const char *value)
 {
     if (strcmp(type, "ec_paramgen_curve") == 0) {
@@ -391,7 +391,7 @@ static int pkey_ec_ctrl_str(EVP_PKEY_CTX *ctx,
     return -2;
 }
 
-static int pkey_ec_paramgen(EVP_PKEY_CTX *ctx, EVP_PKEY *pkey)
+static int __cdecl  pkey_ec_paramgen(EVP_PKEY_CTX *ctx, EVP_PKEY *pkey)
 {
     EC_KEY *ec = NULL;
     EC_PKEY_CTX *dctx = ctx->data;
@@ -410,7 +410,7 @@ static int pkey_ec_paramgen(EVP_PKEY_CTX *ctx, EVP_PKEY *pkey)
     return ret;
 }
 
-static int pkey_ec_keygen(EVP_PKEY_CTX *ctx, EVP_PKEY *pkey)
+static int __cdecl  pkey_ec_keygen(EVP_PKEY_CTX *ctx, EVP_PKEY *pkey)
 {
     EC_KEY *ec = NULL;
     EC_PKEY_CTX *dctx = ctx->data;
diff --git a/crypto/ec/ec_print.c b/crypto/ec/ec_print.c
index 027a51928a..4e9ec1f2df 100644
--- a/crypto/ec/ec_print.c
+++ b/crypto/ec/ec_print.c
@@ -11,7 +11,7 @@
 #include <openssl/err.h>
 #include "ec_lcl.h"
 
-BIGNUM *EC_POINT_point2bn(const EC_GROUP *group,
+BIGNUM * __cdecl EC_POINT_point2bn(const EC_GROUP *group,
                           const EC_POINT *point,
                           point_conversion_form_t form,
                           BIGNUM *ret, BN_CTX *ctx)
@@ -31,7 +31,7 @@ BIGNUM *EC_POINT_point2bn(const EC_GROUP *group,
     return ret;
 }
 
-EC_POINT *EC_POINT_bn2point(const EC_GROUP *group,
+EC_POINT * __cdecl EC_POINT_bn2point(const EC_GROUP *group,
                             const BIGNUM *bn, EC_POINT *point, BN_CTX *ctx)
 {
     size_t buf_len = 0;
@@ -72,7 +72,7 @@ EC_POINT *EC_POINT_bn2point(const EC_GROUP *group,
 static const char *HEX_DIGITS = "0123456789ABCDEF";
 
 /* the return value must be freed (using OPENSSL_free()) */
-char *EC_POINT_point2hex(const EC_GROUP *group,
+char * __cdecl EC_POINT_point2hex(const EC_GROUP *group,
                          const EC_POINT *point,
                          point_conversion_form_t form, BN_CTX *ctx)
 {
@@ -104,7 +104,7 @@ char *EC_POINT_point2hex(const EC_GROUP *group,
     return ret;
 }
 
-EC_POINT *EC_POINT_hex2point(const EC_GROUP *group,
+EC_POINT * __cdecl EC_POINT_hex2point(const EC_GROUP *group,
                              const char *buf, EC_POINT *point, BN_CTX *ctx)
 {
     EC_POINT *ret = NULL;
diff --git a/crypto/ec/ecdh_kdf.c b/crypto/ec/ecdh_kdf.c
index d686f9d897..ee9a659d30 100644
--- a/crypto/ec/ecdh_kdf.c
+++ b/crypto/ec/ecdh_kdf.c
@@ -72,7 +72,7 @@ int ecdh_KDF_X9_63(unsigned char *out, size_t outlen,
  * The old name for ecdh_KDF_X9_63
  * Retained for ABI compatibility
  */
-int ECDH_KDF_X9_62(unsigned char *out, size_t outlen,
+int __cdecl ECDH_KDF_X9_62(unsigned char *out, size_t outlen,
                    const unsigned char *Z, size_t Zlen,
                    const unsigned char *sinfo, size_t sinfolen,
                    const EVP_MD *md)
diff --git a/crypto/ec/ecdsa_sign.c b/crypto/ec/ecdsa_sign.c
index aee06e991b..63885b23ab 100644
--- a/crypto/ec/ecdsa_sign.c
+++ b/crypto/ec/ecdsa_sign.c
@@ -11,12 +11,12 @@
 #include "ec_lcl.h"
 #include <openssl/err.h>
 
-ECDSA_SIG *ECDSA_do_sign(const unsigned char *dgst, int dlen, EC_KEY *eckey)
+ECDSA_SIG * __cdecl ECDSA_do_sign(const unsigned char *dgst, int dlen, EC_KEY *eckey)
 {
     return ECDSA_do_sign_ex(dgst, dlen, NULL, NULL, eckey);
 }
 
-ECDSA_SIG *ECDSA_do_sign_ex(const unsigned char *dgst, int dlen,
+ECDSA_SIG * __cdecl ECDSA_do_sign_ex(const unsigned char *dgst, int dlen,
                             const BIGNUM *kinv, const BIGNUM *rp,
                             EC_KEY *eckey)
 {
@@ -26,13 +26,13 @@ ECDSA_SIG *ECDSA_do_sign_ex(const unsigned char *dgst, int dlen,
     return NULL;
 }
 
-int ECDSA_sign(int type, const unsigned char *dgst, int dlen, unsigned char
+int __cdecl ECDSA_sign(int type, const unsigned char *dgst, int dlen, unsigned char
                *sig, unsigned int *siglen, EC_KEY *eckey)
 {
     return ECDSA_sign_ex(type, dgst, dlen, sig, siglen, NULL, NULL, eckey);
 }
 
-int ECDSA_sign_ex(int type, const unsigned char *dgst, int dlen,
+int __cdecl ECDSA_sign_ex(int type, const unsigned char *dgst, int dlen,
                   unsigned char *sig, unsigned int *siglen, const BIGNUM *kinv,
                   const BIGNUM *r, EC_KEY *eckey)
 {
@@ -42,7 +42,7 @@ int ECDSA_sign_ex(int type, const unsigned char *dgst, int dlen,
     return 0;
 }
 
-int ECDSA_sign_setup(EC_KEY *eckey, BN_CTX *ctx_in, BIGNUM **kinvp,
+int __cdecl ECDSA_sign_setup(EC_KEY *eckey, BN_CTX *ctx_in, BIGNUM **kinvp,
                      BIGNUM **rp)
 {
     if (eckey->meth->sign_setup != NULL)
diff --git a/crypto/ec/ecdsa_vrf.c b/crypto/ec/ecdsa_vrf.c
index f61a20063e..1ad144e08c 100644
--- a/crypto/ec/ecdsa_vrf.c
+++ b/crypto/ec/ecdsa_vrf.c
@@ -17,7 +17,7 @@
  *      0: incorrect signature
  *     -1: error
  */
-int ECDSA_do_verify(const unsigned char *dgst, int dgst_len,
+int __cdecl ECDSA_do_verify(const unsigned char *dgst, int dgst_len,
                     const ECDSA_SIG *sig, EC_KEY *eckey)
 {
     if (eckey->meth->verify_sig != NULL)
@@ -32,7 +32,7 @@ int ECDSA_do_verify(const unsigned char *dgst, int dgst_len,
  *      0: incorrect signature
  *     -1: error
  */
-int ECDSA_verify(int type, const unsigned char *dgst, int dgst_len,
+int __cdecl ECDSA_verify(int type, const unsigned char *dgst, int dgst_len,
                  const unsigned char *sigbuf, int sig_len, EC_KEY *eckey)
 {
     if (eckey->meth->verify != NULL)
diff --git a/crypto/ec/eck_prn.c b/crypto/ec/eck_prn.c
index b538fadcb1..01c5909842 100644
--- a/crypto/ec/eck_prn.c
+++ b/crypto/ec/eck_prn.c
@@ -15,7 +15,7 @@
 #include <openssl/bn.h>
 
 #ifndef OPENSSL_NO_STDIO
-int ECPKParameters_print_fp(FILE *fp, const EC_GROUP *x, int off)
+int __cdecl ECPKParameters_print_fp(FILE *fp, const EC_GROUP *x, int off)
 {
     BIO *b;
     int ret;
@@ -30,7 +30,7 @@ int ECPKParameters_print_fp(FILE *fp, const EC_GROUP *x, int off)
     return ret;
 }
 
-int EC_KEY_print_fp(FILE *fp, const EC_KEY *x, int off)
+int __cdecl EC_KEY_print_fp(FILE *fp, const EC_KEY *x, int off)
 {
     BIO *b;
     int ret;
@@ -45,7 +45,7 @@ int EC_KEY_print_fp(FILE *fp, const EC_KEY *x, int off)
     return ret;
 }
 
-int ECParameters_print_fp(FILE *fp, const EC_KEY *x)
+int __cdecl ECParameters_print_fp(FILE *fp, const EC_KEY *x)
 {
     BIO *b;
     int ret;
@@ -64,7 +64,7 @@ int ECParameters_print_fp(FILE *fp, const EC_KEY *x)
 static int print_bin(BIO *fp, const char *str, const unsigned char *num,
                      size_t len, int off);
 
-int ECPKParameters_print(BIO *bp, const EC_GROUP *x, int off)
+int __cdecl ECPKParameters_print(BIO *bp, const EC_GROUP *x, int off)
 {
     int ret = 0, reason = ERR_R_BIO_LIB;
     BN_CTX *ctx = NULL;
diff --git a/crypto/ec/ecp_mont.c b/crypto/ec/ecp_mont.c
index 252e66ef37..2e7a831802 100644
--- a/crypto/ec/ecp_mont.c
+++ b/crypto/ec/ecp_mont.c
@@ -12,7 +12,7 @@
 
 #include "ec_lcl.h"
 
-const EC_METHOD *EC_GFp_mont_method(void)
+const EC_METHOD * __cdecl EC_GFp_mont_method(void)
 {
     static const EC_METHOD ret = {
         EC_FLAGS_DEFAULT_OCT,
diff --git a/crypto/ec/ecp_nist.c b/crypto/ec/ecp_nist.c
index 5eaa99d840..2b0a10f17b 100644
--- a/crypto/ec/ecp_nist.c
+++ b/crypto/ec/ecp_nist.c
@@ -14,7 +14,7 @@
 #include <openssl/obj_mac.h>
 #include "ec_lcl.h"
 
-const EC_METHOD *EC_GFp_nist_method(void)
+const EC_METHOD * __cdecl EC_GFp_nist_method(void)
 {
     static const EC_METHOD ret = {
         EC_FLAGS_DEFAULT_OCT,
diff --git a/crypto/ec/ecp_nistp224.c b/crypto/ec/ecp_nistp224.c
index fbbdb9d938..2634056570 100644
--- a/crypto/ec/ecp_nistp224.c
+++ b/crypto/ec/ecp_nistp224.c
@@ -239,7 +239,7 @@ struct nistp224_pre_comp_st {
     CRYPTO_RWLOCK *lock;
 };
 
-const EC_METHOD *EC_GFp_nistp224_method(void)
+const EC_METHOD * __cdecl EC_GFp_nistp224_method(void)
 {
     static const EC_METHOD ret = {
         EC_FLAGS_DEFAULT_OCT,
diff --git a/crypto/ec/ecp_nistp256.c b/crypto/ec/ecp_nistp256.c
index 22ba69aa44..2af40d97eb 100644
--- a/crypto/ec/ecp_nistp256.c
+++ b/crypto/ec/ecp_nistp256.c
@@ -1756,7 +1756,7 @@ struct nistp256_pre_comp_st {
     CRYPTO_RWLOCK *lock;
 };
 
-const EC_METHOD *EC_GFp_nistp256_method(void)
+const EC_METHOD * __cdecl EC_GFp_nistp256_method(void)
 {
     static const EC_METHOD ret = {
         EC_FLAGS_DEFAULT_OCT,
diff --git a/crypto/ec/ecp_nistp521.c b/crypto/ec/ecp_nistp521.c
index 6340f48279..ce6e39510b 100644
--- a/crypto/ec/ecp_nistp521.c
+++ b/crypto/ec/ecp_nistp521.c
@@ -1598,7 +1598,7 @@ struct nistp521_pre_comp_st {
     CRYPTO_RWLOCK *lock;
 };
 
-const EC_METHOD *EC_GFp_nistp521_method(void)
+const EC_METHOD * __cdecl EC_GFp_nistp521_method(void)
 {
     static const EC_METHOD ret = {
         EC_FLAGS_DEFAULT_OCT,
diff --git a/crypto/ec/ecp_smpl.c b/crypto/ec/ecp_smpl.c
index e6e4c9d2cb..3aab2f0220 100644
--- a/crypto/ec/ecp_smpl.c
+++ b/crypto/ec/ecp_smpl.c
@@ -13,7 +13,7 @@
 
 #include "ec_lcl.h"
 
-const EC_METHOD *EC_GFp_simple_method(void)
+const EC_METHOD * __cdecl EC_GFp_simple_method(void)
 {
     static const EC_METHOD ret = {
         EC_FLAGS_DEFAULT_OCT,
diff --git a/crypto/ec/ecx_meth.c b/crypto/ec/ecx_meth.c
index c87419b5db..806781b43f 100644
--- a/crypto/ec/ecx_meth.c
+++ b/crypto/ec/ecx_meth.c
@@ -43,7 +43,7 @@ typedef enum {
 } ecx_key_op_t;
 
 /* Setup EVP_PKEY using public, private or generation */
-static int ecx_key_op(EVP_PKEY *pkey, int id, const X509_ALGOR *palg,
+static int __cdecl  ecx_key_op(EVP_PKEY *pkey, int id, const X509_ALGOR *palg,
                       const unsigned char *p, int plen, ecx_key_op_t op)
 {
     ECX_KEY *key = NULL;
@@ -122,7 +122,7 @@ static int ecx_key_op(EVP_PKEY *pkey, int id, const X509_ALGOR *palg,
     return 0;
 }
 
-static int ecx_pub_encode(X509_PUBKEY *pk, const EVP_PKEY *pkey)
+static int __cdecl  ecx_pub_encode(X509_PUBKEY *pk, const EVP_PKEY *pkey)
 {
     const ECX_KEY *ecxkey = pkey->pkey.ecx;
     unsigned char *penc;
@@ -147,7 +147,7 @@ static int ecx_pub_encode(X509_PUBKEY *pk, const EVP_PKEY *pkey)
     return 1;
 }
 
-static int ecx_pub_decode(EVP_PKEY *pkey, X509_PUBKEY *pubkey)
+static int __cdecl  ecx_pub_decode(EVP_PKEY *pkey, X509_PUBKEY *pubkey)
 {
     const unsigned char *p;
     int pklen;
@@ -159,7 +159,7 @@ static int ecx_pub_decode(EVP_PKEY *pkey, X509_PUBKEY *pubkey)
                       KEY_OP_PUBLIC);
 }
 
-static int ecx_pub_cmp(const EVP_PKEY *a, const EVP_PKEY *b)
+static int __cdecl  ecx_pub_cmp(const EVP_PKEY *a, const EVP_PKEY *b)
 {
     const ECX_KEY *akey = a->pkey.ecx;
     const ECX_KEY *bkey = b->pkey.ecx;
@@ -170,7 +170,7 @@ static int ecx_pub_cmp(const EVP_PKEY *a, const EVP_PKEY *b)
     return CRYPTO_memcmp(akey->pubkey, bkey->pubkey, KEYLEN(a)) == 0;
 }
 
-static int ecx_priv_decode(EVP_PKEY *pkey, const PKCS8_PRIV_KEY_INFO *p8)
+static int __cdecl  ecx_priv_decode(EVP_PKEY *pkey, const PKCS8_PRIV_KEY_INFO *p8)
 {
     const unsigned char *p;
     int plen;
@@ -195,7 +195,7 @@ static int ecx_priv_decode(EVP_PKEY *pkey, const PKCS8_PRIV_KEY_INFO *p8)
     return rv;
 }
 
-static int ecx_priv_encode(PKCS8_PRIV_KEY_INFO *p8, const EVP_PKEY *pkey)
+static int __cdecl  ecx_priv_encode(PKCS8_PRIV_KEY_INFO *p8, const EVP_PKEY *pkey)
 {
     const ECX_KEY *ecxkey = pkey->pkey.ecx;
     ASN1_OCTET_STRING oct;
@@ -227,12 +227,12 @@ static int ecx_priv_encode(PKCS8_PRIV_KEY_INFO *p8, const EVP_PKEY *pkey)
     return 1;
 }
 
-static int ecx_size(const EVP_PKEY *pkey)
+static int __cdecl  ecx_size(const EVP_PKEY *pkey)
 {
     return KEYLEN(pkey);
 }
 
-static int ecx_bits(const EVP_PKEY *pkey)
+static int __cdecl  ecx_bits(const EVP_PKEY *pkey)
 {
     if (IS25519(pkey->ameth->pkey_id)) {
         return X25519_BITS;
@@ -243,7 +243,7 @@ static int ecx_bits(const EVP_PKEY *pkey)
     }
 }
 
-static int ecx_security_bits(const EVP_PKEY *pkey)
+static int __cdecl  ecx_security_bits(const EVP_PKEY *pkey)
 {
     if (IS25519(pkey->ameth->pkey_id)) {
         return X25519_SECURITY_BITS;
@@ -252,7 +252,7 @@ static int ecx_security_bits(const EVP_PKEY *pkey)
     }
 }
 
-static void ecx_free(EVP_PKEY *pkey)
+static void __cdecl ecx_free(EVP_PKEY *pkey)
 {
     if (pkey->pkey.ecx != NULL)
         OPENSSL_secure_clear_free(pkey->pkey.ecx->privkey, KEYLEN(pkey));
@@ -260,12 +260,12 @@ static void ecx_free(EVP_PKEY *pkey)
 }
 
 /* "parameters" are always equal */
-static int ecx_cmp_parameters(const EVP_PKEY *a, const EVP_PKEY *b)
+static int __cdecl  ecx_cmp_parameters(const EVP_PKEY *a, const EVP_PKEY *b)
 {
     return 1;
 }
 
-static int ecx_key_print(BIO *bp, const EVP_PKEY *pkey, int indent,
+static int __cdecl  ecx_key_print(BIO *bp, const EVP_PKEY *pkey, int indent,
                          ASN1_PCTX *ctx, ecx_key_op_t op)
 {
     const ECX_KEY *ecxkey = pkey->pkey.ecx;
@@ -302,19 +302,19 @@ static int ecx_key_print(BIO *bp, const EVP_PKEY *pkey, int indent,
     return 1;
 }
 
-static int ecx_priv_print(BIO *bp, const EVP_PKEY *pkey, int indent,
+static int __cdecl  ecx_priv_print(BIO *bp, const EVP_PKEY *pkey, int indent,
                           ASN1_PCTX *ctx)
 {
     return ecx_key_print(bp, pkey, indent, ctx, KEY_OP_PRIVATE);
 }
 
-static int ecx_pub_print(BIO *bp, const EVP_PKEY *pkey, int indent,
+static int __cdecl  ecx_pub_print(BIO *bp, const EVP_PKEY *pkey, int indent,
                          ASN1_PCTX *ctx)
 {
     return ecx_key_print(bp, pkey, indent, ctx, KEY_OP_PUBLIC);
 }
 
-static int ecx_ctrl(EVP_PKEY *pkey, int op, long arg1, void *arg2)
+static int __cdecl  ecx_ctrl(EVP_PKEY *pkey, int op, long arg1, void *arg2)
 {
     switch (op) {
 
@@ -338,7 +338,7 @@ static int ecx_ctrl(EVP_PKEY *pkey, int op, long arg1, void *arg2)
     }
 }
 
-static int ecd_ctrl(EVP_PKEY *pkey, int op, long arg1, void *arg2)
+static int __cdecl  ecd_ctrl(EVP_PKEY *pkey, int op, long arg1, void *arg2)
 {
     switch (op) {
     case ASN1_PKEY_CTRL_DEFAULT_MD_NID:
@@ -352,20 +352,20 @@ static int ecd_ctrl(EVP_PKEY *pkey, int op, long arg1, void *arg2)
     }
 }
 
-static int ecx_set_priv_key(EVP_PKEY *pkey, const unsigned char *priv,
+static int __cdecl  ecx_set_priv_key(EVP_PKEY *pkey, const unsigned char *priv,
                             size_t len)
 {
     return ecx_key_op(pkey, pkey->ameth->pkey_id, NULL, priv, len,
                        KEY_OP_PRIVATE);
 }
 
-static int ecx_set_pub_key(EVP_PKEY *pkey, const unsigned char *pub, size_t len)
+static int __cdecl  ecx_set_pub_key(EVP_PKEY *pkey, const unsigned char *pub, size_t len)
 {
     return ecx_key_op(pkey, pkey->ameth->pkey_id, NULL, pub, len,
                       KEY_OP_PUBLIC);
 }
 
-static int ecx_get_priv_key(const EVP_PKEY *pkey, unsigned char *priv,
+static int __cdecl  ecx_get_priv_key(const EVP_PKEY *pkey, unsigned char *priv,
                             size_t *len)
 {
     const ECX_KEY *key = pkey->pkey.ecx;
@@ -386,7 +386,7 @@ static int ecx_get_priv_key(const EVP_PKEY *pkey, unsigned char *priv,
     return 1;
 }
 
-static int ecx_get_pub_key(const EVP_PKEY *pkey, unsigned char *pub,
+static int __cdecl  ecx_get_pub_key(const EVP_PKEY *pkey, unsigned char *pub,
                            size_t *len)
 {
     const ECX_KEY *key = pkey->pkey.ecx;
@@ -492,17 +492,17 @@ const EVP_PKEY_ASN1_METHOD ecx448_asn1_meth = {
     ecx_get_pub_key,
 };
 
-static int ecd_size25519(const EVP_PKEY *pkey)
+static int __cdecl  ecd_size25519(const EVP_PKEY *pkey)
 {
     return ED25519_SIGSIZE;
 }
 
-static int ecd_size448(const EVP_PKEY *pkey)
+static int __cdecl  ecd_size448(const EVP_PKEY *pkey)
 {
     return ED448_SIGSIZE;
 }
 
-static int ecd_item_verify(EVP_MD_CTX *ctx, const ASN1_ITEM *it, void *asn,
+static int __cdecl  ecd_item_verify(EVP_MD_CTX *ctx, const ASN1_ITEM *it, void *asn,
                            X509_ALGOR *sigalg, ASN1_BIT_STRING *str,
                            EVP_PKEY *pkey)
 {
@@ -524,7 +524,7 @@ static int ecd_item_verify(EVP_MD_CTX *ctx, const ASN1_ITEM *it, void *asn,
     return 2;
 }
 
-static int ecd_item_sign25519(EVP_MD_CTX *ctx, const ASN1_ITEM *it, void *asn,
+static int __cdecl  ecd_item_sign25519(EVP_MD_CTX *ctx, const ASN1_ITEM *it, void *asn,
                               X509_ALGOR *alg1, X509_ALGOR *alg2,
                               ASN1_BIT_STRING *str)
 {
@@ -536,7 +536,7 @@ static int ecd_item_sign25519(EVP_MD_CTX *ctx, const ASN1_ITEM *it, void *asn,
     return 3;
 }
 
-static int ecd_sig_info_set25519(X509_SIG_INFO *siginf, const X509_ALGOR *alg,
+static int __cdecl  ecd_sig_info_set25519(X509_SIG_INFO *siginf, const X509_ALGOR *alg,
                                  const ASN1_STRING *sig)
 {
     X509_SIG_INFO_set(siginf, NID_undef, NID_ED25519, X25519_SECURITY_BITS,
@@ -544,7 +544,7 @@ static int ecd_sig_info_set25519(X509_SIG_INFO *siginf, const X509_ALGOR *alg,
     return 1;
 }
 
-static int ecd_item_sign448(EVP_MD_CTX *ctx, const ASN1_ITEM *it, void *asn,
+static int __cdecl  ecd_item_sign448(EVP_MD_CTX *ctx, const ASN1_ITEM *it, void *asn,
                             X509_ALGOR *alg1, X509_ALGOR *alg2,
                             ASN1_BIT_STRING *str)
 {
@@ -556,7 +556,7 @@ static int ecd_item_sign448(EVP_MD_CTX *ctx, const ASN1_ITEM *it, void *asn,
     return 3;
 }
 
-static int ecd_sig_info_set448(X509_SIG_INFO *siginf, const X509_ALGOR *alg,
+static int __cdecl  ecd_sig_info_set448(X509_SIG_INFO *siginf, const X509_ALGOR *alg,
                                const ASN1_STRING *sig)
 {
     X509_SIG_INFO_set(siginf, NID_undef, NID_ED448, X448_SECURITY_BITS,
@@ -649,12 +649,12 @@ const EVP_PKEY_ASN1_METHOD ed448_asn1_meth = {
     ecx_get_pub_key,
 };
 
-static int pkey_ecx_keygen(EVP_PKEY_CTX *ctx, EVP_PKEY *pkey)
+static int __cdecl  pkey_ecx_keygen(EVP_PKEY_CTX *ctx, EVP_PKEY *pkey)
 {
     return ecx_key_op(pkey, ctx->pmeth->pkey_id, NULL, NULL, 0, KEY_OP_KEYGEN);
 }
 
-static int validate_ecx_derive(EVP_PKEY_CTX *ctx, unsigned char *key,
+static int __cdecl  validate_ecx_derive(EVP_PKEY_CTX *ctx, unsigned char *key,
                                           size_t *keylen,
                                           const unsigned char **privkey,
                                           const unsigned char **pubkey)
@@ -681,7 +681,7 @@ static int validate_ecx_derive(EVP_PKEY_CTX *ctx, unsigned char *key,
     return 1;
 }
 
-static int pkey_ecx_derive25519(EVP_PKEY_CTX *ctx, unsigned char *key,
+static int __cdecl  pkey_ecx_derive25519(EVP_PKEY_CTX *ctx, unsigned char *key,
                                 size_t *keylen)
 {
     const unsigned char *privkey, *pubkey;
@@ -694,7 +694,7 @@ static int pkey_ecx_derive25519(EVP_PKEY_CTX *ctx, unsigned char *key,
     return 1;
 }
 
-static int pkey_ecx_derive448(EVP_PKEY_CTX *ctx, unsigned char *key,
+static int __cdecl  pkey_ecx_derive448(EVP_PKEY_CTX *ctx, unsigned char *key,
                               size_t *keylen)
 {
     const unsigned char *privkey, *pubkey;
@@ -707,7 +707,7 @@ static int pkey_ecx_derive448(EVP_PKEY_CTX *ctx, unsigned char *key,
     return 1;
 }
 
-static int pkey_ecx_ctrl(EVP_PKEY_CTX *ctx, int type, int p1, void *p2)
+static int __cdecl  pkey_ecx_ctrl(EVP_PKEY_CTX *ctx, int type, int p1, void *p2)
 {
     /* Only need to handle peer key for derivation */
     if (type == EVP_PKEY_CTRL_PEER_KEY)
@@ -735,7 +735,7 @@ const EVP_PKEY_METHOD ecx448_pkey_meth = {
     0
 };
 
-static int pkey_ecd_digestsign25519(EVP_MD_CTX *ctx, unsigned char *sig,
+static int __cdecl  pkey_ecd_digestsign25519(EVP_MD_CTX *ctx, unsigned char *sig,
                                     size_t *siglen, const unsigned char *tbs,
                                     size_t tbslen)
 {
@@ -756,7 +756,7 @@ static int pkey_ecd_digestsign25519(EVP_MD_CTX *ctx, unsigned char *sig,
     return 1;
 }
 
-static int pkey_ecd_digestsign448(EVP_MD_CTX *ctx, unsigned char *sig,
+static int __cdecl  pkey_ecd_digestsign448(EVP_MD_CTX *ctx, unsigned char *sig,
                                   size_t *siglen, const unsigned char *tbs,
                                   size_t tbslen)
 {
@@ -778,7 +778,7 @@ static int pkey_ecd_digestsign448(EVP_MD_CTX *ctx, unsigned char *sig,
     return 1;
 }
 
-static int pkey_ecd_digestverify25519(EVP_MD_CTX *ctx, const unsigned char *sig,
+static int __cdecl  pkey_ecd_digestverify25519(EVP_MD_CTX *ctx, const unsigned char *sig,
                                       size_t siglen, const unsigned char *tbs,
                                       size_t tbslen)
 {
@@ -790,7 +790,7 @@ static int pkey_ecd_digestverify25519(EVP_MD_CTX *ctx, const unsigned char *sig,
     return ED25519_verify(tbs, tbslen, sig, edkey->pubkey);
 }
 
-static int pkey_ecd_digestverify448(EVP_MD_CTX *ctx, const unsigned char *sig,
+static int __cdecl  pkey_ecd_digestverify448(EVP_MD_CTX *ctx, const unsigned char *sig,
                                     size_t siglen, const unsigned char *tbs,
                                     size_t tbslen)
 {
@@ -802,7 +802,7 @@ static int pkey_ecd_digestverify448(EVP_MD_CTX *ctx, const unsigned char *sig,
     return ED448_verify(tbs, tbslen, sig, edkey->pubkey, NULL, 0);
 }
 
-static int pkey_ecd_ctrl(EVP_PKEY_CTX *ctx, int type, int p1, void *p2)
+static int __cdecl  pkey_ecd_ctrl(EVP_PKEY_CTX *ctx, int type, int p1, void *p2)
 {
     switch (type) {
     case EVP_PKEY_CTRL_MD:
diff --git a/crypto/engine/eng_all.c b/crypto/engine/eng_all.c
index af306ccffc..c37fb7859b 100644
--- a/crypto/engine/eng_all.c
+++ b/crypto/engine/eng_all.c
@@ -10,7 +10,7 @@
 #include "internal/cryptlib.h"
 #include "eng_int.h"
 
-void ENGINE_load_builtin_engines(void)
+void __cdecl ENGINE_load_builtin_engines(void)
 {
     /* Some ENGINEs need this */
     OPENSSL_cpuid_setup();
diff --git a/crypto/engine/eng_cnf.c b/crypto/engine/eng_cnf.c
index 6f0a066d06..3a19b8511c 100644
--- a/crypto/engine/eng_cnf.c
+++ b/crypto/engine/eng_cnf.c
@@ -185,7 +185,7 @@ static void int_engine_module_finish(CONF_IMODULE *md)
     initialized_engines = NULL;
 }
 
-void ENGINE_add_conf_module(void)
+void __cdecl ENGINE_add_conf_module(void)
 {
     CONF_module_add("engines",
                     int_engine_module_init, int_engine_module_finish);
diff --git a/crypto/engine/eng_ctrl.c b/crypto/engine/eng_ctrl.c
index 3bc4aab16f..6000660d0b 100644
--- a/crypto/engine/eng_ctrl.c
+++ b/crypto/engine/eng_ctrl.c
@@ -59,7 +59,7 @@ static int int_ctrl_cmd_by_num(const ENGINE_CMD_DEFN *defn, unsigned int num)
 }
 
 static int int_ctrl_helper(ENGINE *e, int cmd, long i, void *p,
-                           void (*f) (void))
+                           void (__cdecl *f) (void))
 {
     int idx;
     char *s = (char *)p;
@@ -122,7 +122,7 @@ static int int_ctrl_helper(ENGINE *e, int cmd, long i, void *p,
     return -1;
 }
 
-int ENGINE_ctrl(ENGINE *e, int cmd, long i, void *p, void (*f) (void))
+int __cdecl ENGINE_ctrl(ENGINE *e, int cmd, long i, void *p, void (__cdecl *f) (void))
 {
     int ctrl_exists, ref_exists;
     if (e == NULL) {
@@ -174,7 +174,7 @@ int ENGINE_ctrl(ENGINE *e, int cmd, long i, void *p, void (*f) (void))
     return e->ctrl(e, cmd, i, p, f);
 }
 
-int ENGINE_cmd_is_executable(ENGINE *e, int cmd)
+int __cdecl ENGINE_cmd_is_executable(ENGINE *e, int cmd)
 {
     int flags;
     if ((flags =
@@ -190,8 +190,8 @@ int ENGINE_cmd_is_executable(ENGINE *e, int cmd)
     return 1;
 }
 
-int ENGINE_ctrl_cmd(ENGINE *e, const char *cmd_name,
-                    long i, void *p, void (*f) (void), int cmd_optional)
+int __cdecl ENGINE_ctrl_cmd(ENGINE *e, const char *cmd_name,
+                    long i, void *p, void (__cdecl *f) (void), int cmd_optional)
 {
     int num;
 
@@ -226,7 +226,7 @@ int ENGINE_ctrl_cmd(ENGINE *e, const char *cmd_name,
     return 0;
 }
 
-int ENGINE_ctrl_cmd_string(ENGINE *e, const char *cmd_name, const char *arg,
+int __cdecl ENGINE_ctrl_cmd_string(ENGINE *e, const char *cmd_name, const char *arg,
                            int cmd_optional)
 {
     int num, flags;
diff --git a/crypto/engine/eng_devcrypto.c b/crypto/engine/eng_devcrypto.c
index a727c6f646..0717ee124d 100644
--- a/crypto/engine/eng_devcrypto.c
+++ b/crypto/engine/eng_devcrypto.c
@@ -755,7 +755,7 @@ static int devcrypto_unload(ENGINE *e)
  * This engine is always built into libcrypto, so it doesn't offer any
  * ability to be dynamically loadable.
  */
-void engine_load_devcrypto_int()
+void __cdecl engine_load_devcrypto_int()
 {
     ENGINE *e = NULL;
 
diff --git a/crypto/engine/eng_dyn.c b/crypto/engine/eng_dyn.c
index 843226c077..0374033c5b 100644
--- a/crypto/engine/eng_dyn.c
+++ b/crypto/engine/eng_dyn.c
@@ -18,14 +18,14 @@
  */
 
 /* Our ENGINE handlers */
-static int dynamic_init(ENGINE *e);
-static int dynamic_finish(ENGINE *e);
-static int dynamic_ctrl(ENGINE *e, int cmd, long i, void *p,
-                        void (*f) (void));
+static int __cdecl dynamic_init(ENGINE *e);
+static int __cdecl dynamic_finish(ENGINE *e);
+static int __cdecl dynamic_ctrl(ENGINE *e, int cmd, long i, void *p,
+                        void (__cdecl *f) (void));
 /* Predeclare our context type */
 typedef struct st_dynamic_data_ctx dynamic_data_ctx;
 /* The implementation for the important control command */
-static int dynamic_load(ENGINE *e, dynamic_data_ctx *ctx);
+static int __cdecl dynamic_load(ENGINE *e, dynamic_data_ctx *ctx);
 
 #define DYNAMIC_CMD_SO_PATH             ENGINE_CMD_BASE
 #define DYNAMIC_CMD_NO_VCHECK           (ENGINE_CMD_BASE + 1)
@@ -117,7 +117,7 @@ struct st_dynamic_data_ctx {
  */
 static int dynamic_ex_data_idx = -1;
 
-static void int_free_str(char *s)
+static void __cdecl int_free_str(char *s)
 {
     OPENSSL_free(s);
 }
@@ -131,7 +131,7 @@ static void int_free_str(char *s)
  * a "free" handler and that will get called if an ENGINE is being destroyed
  * and there was an ex_data element corresponding to our context type.
  */
-static void dynamic_data_ctx_free_func(void *parent, void *ptr,
+static void __cdecl dynamic_data_ctx_free_func(void *parent, void *ptr,
                                        CRYPTO_EX_DATA *ad, int idx, long argl,
                                        void *argp)
 {
@@ -151,7 +151,7 @@ static void dynamic_data_ctx_free_func(void *parent, void *ptr,
  * wasted their time. The alternative involves creating everything inside the
  * lock which is far worse.
  */
-static int dynamic_set_data_ctx(ENGINE *e, dynamic_data_ctx **ctx)
+static int __cdecl dynamic_set_data_ctx(ENGINE *e, dynamic_data_ctx **ctx)
 {
     dynamic_data_ctx *c = OPENSSL_zalloc(sizeof(*c));
     int ret = 1;
@@ -249,7 +249,7 @@ static ENGINE *engine_dynamic(void)
     return ret;
 }
 
-void engine_load_dynamic_int(void)
+void __cdecl engine_load_dynamic_int(void)
 {
     ENGINE *toadd = engine_dynamic();
     if (!toadd)
@@ -268,7 +268,7 @@ void engine_load_dynamic_int(void)
     ERR_clear_error();
 }
 
-static int dynamic_init(ENGINE *e)
+static int __cdecl dynamic_init(ENGINE *e)
 {
     /*
      * We always return failure - the "dynamic" engine itself can't be used
@@ -277,7 +277,7 @@ static int dynamic_init(ENGINE *e)
     return 0;
 }
 
-static int dynamic_finish(ENGINE *e)
+static int __cdecl dynamic_finish(ENGINE *e)
 {
     /*
      * This should never be called on account of "dynamic_init" always
@@ -286,7 +286,7 @@ static int dynamic_finish(ENGINE *e)
     return 0;
 }
 
-static int dynamic_ctrl(ENGINE *e, int cmd, long i, void *p, void (*f) (void))
+static int __cdecl dynamic_ctrl(ENGINE *e, int cmd, long i, void *p, void (__cdecl *f) (void))
 {
     dynamic_data_ctx *ctx = dynamic_get_data_ctx(e);
     int initialised;
@@ -367,7 +367,7 @@ static int dynamic_ctrl(ENGINE *e, int cmd, long i, void *p, void (*f) (void))
     return 0;
 }
 
-static int int_load(dynamic_data_ctx *ctx)
+static int __cdecl int_load(dynamic_data_ctx *ctx)
 {
     int num, loop;
     /* Unless told not to, try a direct load */
@@ -393,7 +393,7 @@ static int int_load(dynamic_data_ctx *ctx)
     return 0;
 }
 
-static int dynamic_load(ENGINE *e, dynamic_data_ctx *ctx)
+static int __cdecl dynamic_load(ENGINE *e, dynamic_data_ctx *ctx)
 {
     ENGINE cpy;
     dynamic_fns fns;
diff --git a/crypto/engine/eng_err.c b/crypto/engine/eng_err.c
index bd1aefa185..eec773c105 100644
--- a/crypto/engine/eng_err.c
+++ b/crypto/engine/eng_err.c
@@ -142,7 +142,7 @@ static const ERR_STRING_DATA ENGINE_str_reasons[] = {
 
 #endif
 
-int ERR_load_ENGINE_strings(void)
+int __cdecl ERR_load_ENGINE_strings(void)
 {
 #ifndef OPENSSL_NO_ERR
     if (ERR_func_error_string(ENGINE_str_functs[0].error) == NULL) {
diff --git a/crypto/engine/eng_fat.c b/crypto/engine/eng_fat.c
index 591fddc8e4..a7d5050732 100644
--- a/crypto/engine/eng_fat.c
+++ b/crypto/engine/eng_fat.c
@@ -11,7 +11,7 @@
 #include "eng_int.h"
 #include <openssl/conf.h>
 
-int ENGINE_set_default(ENGINE *e, unsigned int flags)
+int __cdecl ENGINE_set_default(ENGINE *e, unsigned int flags)
 {
     if ((flags & ENGINE_METHOD_CIPHERS) && !ENGINE_set_default_ciphers(e))
         return 0;
@@ -78,7 +78,7 @@ static int int_def_cb(const char *alg, int len, void *arg)
     return 1;
 }
 
-int ENGINE_set_default_string(ENGINE *e, const char *def_list)
+int __cdecl ENGINE_set_default_string(ENGINE *e, const char *def_list)
 {
     unsigned int flags = 0;
     if (!CONF_parse_list(def_list, ',', 1, int_def_cb, &flags)) {
@@ -90,7 +90,7 @@ int ENGINE_set_default_string(ENGINE *e, const char *def_list)
     return ENGINE_set_default(e, flags);
 }
 
-int ENGINE_register_complete(ENGINE *e)
+int __cdecl ENGINE_register_complete(ENGINE *e)
 {
     ENGINE_register_ciphers(e);
     ENGINE_register_digests(e);
@@ -112,7 +112,7 @@ int ENGINE_register_complete(ENGINE *e)
     return 1;
 }
 
-int ENGINE_register_all_complete(void)
+int __cdecl ENGINE_register_all_complete(void)
 {
     ENGINE *e;
 
diff --git a/crypto/engine/eng_init.c b/crypto/engine/eng_init.c
index 7c235fc472..f21b08fdf2 100644
--- a/crypto/engine/eng_init.c
+++ b/crypto/engine/eng_init.c
@@ -74,7 +74,7 @@ int engine_unlocked_finish(ENGINE *e, int unlock_for_handlers)
 }
 
 /* The API (locked) version of "init" */
-int ENGINE_init(ENGINE *e)
+int __cdecl ENGINE_init(ENGINE *e)
 {
     int ret;
     if (e == NULL) {
@@ -92,7 +92,7 @@ int ENGINE_init(ENGINE *e)
 }
 
 /* The API (locked) version of "finish" */
-int ENGINE_finish(ENGINE *e)
+int __cdecl ENGINE_finish(ENGINE *e)
 {
     int to_return = 1;
 
diff --git a/crypto/engine/eng_lib.c b/crypto/engine/eng_lib.c
index d7f2026fac..dc2af68e8f 100644
--- a/crypto/engine/eng_lib.c
+++ b/crypto/engine/eng_lib.c
@@ -26,7 +26,7 @@ DEFINE_RUN_ONCE(do_engine_lock_init)
     return global_engine_lock != NULL;
 }
 
-ENGINE *ENGINE_new(void)
+ENGINE * __cdecl ENGINE_new(void)
 {
     ENGINE *ret;
 
@@ -97,7 +97,7 @@ int engine_free_util(ENGINE *e, int not_locked)
     return 1;
 }
 
-int ENGINE_free(ENGINE *e)
+int __cdecl ENGINE_free(ENGINE *e)
 {
     return engine_free_util(e, 1);
 }
@@ -157,13 +157,13 @@ void engine_cleanup_add_last(ENGINE_CLEANUP_CB *cb)
 }
 
 /* The API function that performs all cleanup */
-static void engine_cleanup_cb_free(ENGINE_CLEANUP_ITEM *item)
+static void __cdecl engine_cleanup_cb_free(ENGINE_CLEANUP_ITEM *item)
 {
     (*(item->cb)) ();
     OPENSSL_free(item);
 }
 
-void engine_cleanup_int(void)
+void __cdecl engine_cleanup_int(void)
 {
     if (int_cleanup_check(0)) {
         sk_ENGINE_CLEANUP_ITEM_pop_free(cleanup_stack,
@@ -175,12 +175,12 @@ void engine_cleanup_int(void)
 
 /* Now the "ex_data" support */
 
-int ENGINE_set_ex_data(ENGINE *e, int idx, void *arg)
+int __cdecl ENGINE_set_ex_data(ENGINE *e, int idx, void *arg)
 {
     return CRYPTO_set_ex_data(&e->ex_data, idx, arg);
 }
 
-void *ENGINE_get_ex_data(const ENGINE *e, int idx)
+void * __cdecl ENGINE_get_ex_data(const ENGINE *e, int idx)
 {
     return CRYPTO_get_ex_data(&e->ex_data, idx);
 }
@@ -190,7 +190,7 @@ void *ENGINE_get_ex_data(const ENGINE *e, int idx)
  * ENGINE structure itself.
  */
 
-int ENGINE_set_id(ENGINE *e, const char *id)
+int __cdecl ENGINE_set_id(ENGINE *e, const char *id)
 {
     if (id == NULL) {
         ENGINEerr(ENGINE_F_ENGINE_SET_ID, ERR_R_PASSED_NULL_PARAMETER);
@@ -200,7 +200,7 @@ int ENGINE_set_id(ENGINE *e, const char *id)
     return 1;
 }
 
-int ENGINE_set_name(ENGINE *e, const char *name)
+int __cdecl ENGINE_set_name(ENGINE *e, const char *name)
 {
     if (name == NULL) {
         ENGINEerr(ENGINE_F_ENGINE_SET_NAME, ERR_R_PASSED_NULL_PARAMETER);
@@ -210,78 +210,78 @@ int ENGINE_set_name(ENGINE *e, const char *name)
     return 1;
 }
 
-int ENGINE_set_destroy_function(ENGINE *e, ENGINE_GEN_INT_FUNC_PTR destroy_f)
+int __cdecl ENGINE_set_destroy_function(ENGINE *e, ENGINE_GEN_INT_FUNC_PTR destroy_f)
 {
     e->destroy = destroy_f;
     return 1;
 }
 
-int ENGINE_set_init_function(ENGINE *e, ENGINE_GEN_INT_FUNC_PTR init_f)
+int __cdecl ENGINE_set_init_function(ENGINE *e, ENGINE_GEN_INT_FUNC_PTR init_f)
 {
     e->init = init_f;
     return 1;
 }
 
-int ENGINE_set_finish_function(ENGINE *e, ENGINE_GEN_INT_FUNC_PTR finish_f)
+int __cdecl ENGINE_set_finish_function(ENGINE *e, ENGINE_GEN_INT_FUNC_PTR finish_f)
 {
     e->finish = finish_f;
     return 1;
 }
 
-int ENGINE_set_ctrl_function(ENGINE *e, ENGINE_CTRL_FUNC_PTR ctrl_f)
+int __cdecl ENGINE_set_ctrl_function(ENGINE *e, ENGINE_CTRL_FUNC_PTR ctrl_f)
 {
     e->ctrl = ctrl_f;
     return 1;
 }
 
-int ENGINE_set_flags(ENGINE *e, int flags)
+int __cdecl ENGINE_set_flags(ENGINE *e, int flags)
 {
     e->flags = flags;
     return 1;
 }
 
-int ENGINE_set_cmd_defns(ENGINE *e, const ENGINE_CMD_DEFN *defns)
+int __cdecl ENGINE_set_cmd_defns(ENGINE *e, const ENGINE_CMD_DEFN *defns)
 {
     e->cmd_defns = defns;
     return 1;
 }
 
-const char *ENGINE_get_id(const ENGINE *e)
+const char * __cdecl ENGINE_get_id(const ENGINE *e)
 {
     return e->id;
 }
 
-const char *ENGINE_get_name(const ENGINE *e)
+const char * __cdecl ENGINE_get_name(const ENGINE *e)
 {
     return e->name;
 }
 
-ENGINE_GEN_INT_FUNC_PTR ENGINE_get_destroy_function(const ENGINE *e)
+ENGINE_GEN_INT_FUNC_PTR __cdecl ENGINE_get_destroy_function(const ENGINE *e)
 {
     return e->destroy;
 }
 
-ENGINE_GEN_INT_FUNC_PTR ENGINE_get_init_function(const ENGINE *e)
+ENGINE_GEN_INT_FUNC_PTR __cdecl ENGINE_get_init_function(const ENGINE *e)
 {
     return e->init;
 }
 
-ENGINE_GEN_INT_FUNC_PTR ENGINE_get_finish_function(const ENGINE *e)
+ENGINE_GEN_INT_FUNC_PTR __cdecl ENGINE_get_finish_function(const ENGINE *e)
 {
     return e->finish;
 }
 
-ENGINE_CTRL_FUNC_PTR ENGINE_get_ctrl_function(const ENGINE *e)
+ENGINE_CTRL_FUNC_PTR __cdecl ENGINE_get_ctrl_function(const ENGINE *e)
 {
     return e->ctrl;
 }
 
-int ENGINE_get_flags(const ENGINE *e)
+int __cdecl ENGINE_get_flags(const ENGINE *e)
 {
     return e->flags;
 }
 
-const ENGINE_CMD_DEFN *ENGINE_get_cmd_defns(const ENGINE *e)
+const ENGINE_CMD_DEFN * __cdecl ENGINE_get_cmd_defns(const ENGINE *e)
 {
     return e->cmd_defns;
 }
@@ -293,7 +293,7 @@ const ENGINE_CMD_DEFN *ENGINE_get_cmd_defns(const ENGINE *e)
 
 static int internal_static_hack = 0;
 
-void *ENGINE_get_static_state(void)
+void * __cdecl ENGINE_get_static_state(void)
 {
     return &internal_static_hack;
 }
diff --git a/crypto/engine/eng_list.c b/crypto/engine/eng_list.c
index 45c339c541..e1eef752c8 100644
--- a/crypto/engine/eng_list.c
+++ b/crypto/engine/eng_list.c
@@ -127,7 +127,7 @@ static int engine_list_remove(ENGINE *e)
 }
 
 /* Get the first/last "ENGINE" type available. */
-ENGINE *ENGINE_get_first(void)
+ENGINE * __cdecl ENGINE_get_first(void)
 {
     ENGINE *ret;
 
@@ -146,7 +146,7 @@ ENGINE *ENGINE_get_first(void)
     return ret;
 }
 
-ENGINE *ENGINE_get_last(void)
+ENGINE * __cdecl ENGINE_get_last(void)
 {
     ENGINE *ret;
 
@@ -166,7 +166,7 @@ ENGINE *ENGINE_get_last(void)
 }
 
 /* Iterate to the next/previous "ENGINE" type (NULL = end of the list). */
-ENGINE *ENGINE_get_next(ENGINE *e)
+ENGINE * __cdecl ENGINE_get_next(ENGINE *e)
 {
     ENGINE *ret = NULL;
     if (e == NULL) {
@@ -186,7 +186,7 @@ ENGINE *ENGINE_get_next(ENGINE *e)
     return ret;
 }
 
-ENGINE *ENGINE_get_prev(ENGINE *e)
+ENGINE * __cdecl ENGINE_get_prev(ENGINE *e)
 {
     ENGINE *ret = NULL;
     if (e == NULL) {
@@ -207,7 +207,7 @@ ENGINE *ENGINE_get_prev(ENGINE *e)
 }
 
 /* Add another "ENGINE" type into the list. */
-int ENGINE_add(ENGINE *e)
+int __cdecl ENGINE_add(ENGINE *e)
 {
     int to_return = 1;
     if (e == NULL) {
@@ -228,7 +228,7 @@ int ENGINE_add(ENGINE *e)
 }
 
 /* Remove an existing "ENGINE" type from the array. */
-int ENGINE_remove(ENGINE *e)
+int __cdecl ENGINE_remove(ENGINE *e)
 {
     int to_return = 1;
     if (e == NULL) {
@@ -274,7 +274,7 @@ static void engine_cpy(ENGINE *dest, const ENGINE *src)
     dest->flags = src->flags;
 }
 
-ENGINE *ENGINE_by_id(const char *id)
+ENGINE * __cdecl ENGINE_by_id(const char *id)
 {
     ENGINE *iterator;
     char *load_dir = NULL;
@@ -337,7 +337,7 @@ ENGINE *ENGINE_by_id(const char *id)
     /* EEK! Experimental code ends */
 }
 
-int ENGINE_up_ref(ENGINE *e)
+int __cdecl ENGINE_up_ref(ENGINE *e)
 {
     int i;
     if (e == NULL) {
diff --git a/crypto/engine/eng_openssl.c b/crypto/engine/eng_openssl.c
index d9b3067a13..1a45cb5ff7 100644
--- a/crypto/engine/eng_openssl.c
+++ b/crypto/engine/eng_openssl.c
@@ -52,26 +52,26 @@
 # undef TEST_ENG_OPENSSL_RC4_P_CIPHER
 #endif
 
-static int openssl_destroy(ENGINE *e);
+static int __cdecl openssl_destroy(ENGINE *e);
 
 #ifdef TEST_ENG_OPENSSL_RC4
-static int openssl_ciphers(ENGINE *e, const EVP_CIPHER **cipher,
+static int __cdecl openssl_ciphers(ENGINE *e, const EVP_CIPHER **cipher,
                            const int **nids, int nid);
 #endif
 #ifdef TEST_ENG_OPENSSL_SHA
-static int openssl_digests(ENGINE *e, const EVP_MD **digest,
+static int __cdecl openssl_digests(ENGINE *e, const EVP_MD **digest,
                            const int **nids, int nid);
 #endif
 
 #ifdef TEST_ENG_OPENSSL_PKEY
-static EVP_PKEY *openssl_load_privkey(ENGINE *eng, const char *key_id,
+static EVP_PKEY * __cdecl openssl_load_privkey(ENGINE *eng, const char *key_id,
                                       UI_METHOD *ui_method,
                                       void *callback_data);
 #endif
 
 #ifdef TEST_ENG_OPENSSL_HMAC
-static int ossl_register_hmac_meth(void);
-static int ossl_pkey_meths(ENGINE *e, EVP_PKEY_METHOD **pmeth,
+static int __cdecl ossl_register_hmac_meth(void);
+static int __cdecl ossl_pkey_meths(ENGINE *e, EVP_PKEY_METHOD **pmeth,
                            const int **nids, int nid);
 #endif
 
@@ -83,7 +83,7 @@ static const char *engine_openssl_name = "Software engine support";
  * This internal function is used by ENGINE_openssl() and possibly by the
  * "dynamic" ENGINE support too
  */
-static int bind_helper(ENGINE *e)
+static int __cdecl bind_helper(ENGINE *e)
 {
     if (!ENGINE_set_id(e, engine_openssl_id)
         || !ENGINE_set_name(e, engine_openssl_name)
@@ -138,7 +138,7 @@ static ENGINE *engine_openssl(void)
     return ret;
 }
 
-void engine_load_openssl_int(void)
+void __cdecl engine_load_openssl_int(void)
 {
     ENGINE *toadd = engine_openssl();
     if (!toadd)
@@ -157,7 +157,7 @@ void engine_load_openssl_int(void)
  * self-contained shared-library.
  */
 #ifdef ENGINE_DYNAMIC_SUPPORT
-static int bind_fn(ENGINE *e, const char *id)
+static int __cdecl bind_fn(ENGINE *e, const char *id)
 {
     if (id && (strcmp(id, engine_openssl_id) != 0))
         return 0;
@@ -188,7 +188,7 @@ typedef struct {
     RC4_KEY ks;
 } TEST_RC4_KEY;
 # define test(ctx) ((TEST_RC4_KEY *)EVP_CIPHER_CTX_get_cipher_data(ctx))
-static int test_rc4_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
+static int __cdecl test_rc4_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
                              const unsigned char *iv, int enc)
 {
 # ifdef TEST_ENG_OPENSSL_RC4_P_INIT
@@ -229,7 +229,7 @@ static const EVP_CIPHER *test_r4_cipher(void)
     }
     return r4_cipher;
 }
-static void test_r4_cipher_destroy(void)
+static void __cdecl test_r4_cipher_destroy(void)
 {
     EVP_CIPHER_meth_free(r4_cipher);
     r4_cipher = NULL;
@@ -254,7 +254,7 @@ static const EVP_CIPHER *test_r4_40_cipher(void)
     }
     return r4_40_cipher;
 }
-static void test_r4_40_cipher_destroy(void)
+static void __cdecl test_r4_40_cipher_destroy(void)
 {
     EVP_CIPHER_meth_free(r4_40_cipher);
     r4_40_cipher = NULL;
@@ -278,7 +278,7 @@ static int test_cipher_nids(const int **nids)
     return pos;
 }
 
-static int openssl_ciphers(ENGINE *e, const EVP_CIPHER **cipher,
+static int __cdecl openssl_ciphers(ENGINE *e, const EVP_CIPHER **cipher,
                            const int **nids, int nid)
 {
     if (!cipher) {
@@ -306,7 +306,7 @@ static int openssl_ciphers(ENGINE *e, const EVP_CIPHER **cipher,
 /* Much the same sort of comment as for TEST_ENG_OPENSSL_RC4 */
 # include <openssl/sha.h>
 
-static int test_sha1_init(EVP_MD_CTX *ctx)
+static int __cdecl test_sha1_init(EVP_MD_CTX *ctx)
 {
 # ifdef TEST_ENG_OPENSSL_SHA_P_INIT
     fprintf(stderr, "(TEST_ENG_OPENSSL_SHA) test_sha1_init() called\n");
@@ -314,7 +314,7 @@ static int test_sha1_init(EVP_MD_CTX *ctx)
     return SHA1_Init(EVP_MD_CTX_md_data(ctx));
 }
 
-static int test_sha1_update(EVP_MD_CTX *ctx, const void *data, size_t count)
+static int __cdecl test_sha1_update(EVP_MD_CTX *ctx, const void *data, size_t count)
 {
 # ifdef TEST_ENG_OPENSSL_SHA_P_UPDATE
     fprintf(stderr, "(TEST_ENG_OPENSSL_SHA) test_sha1_update() called\n");
@@ -322,7 +322,7 @@ static int test_sha1_update(EVP_MD_CTX *ctx, const void *data, size_t count)
     return SHA1_Update(EVP_MD_CTX_md_data(ctx), data, count);
 }
 
-static int test_sha1_final(EVP_MD_CTX *ctx, unsigned char *md)
+static int __cdecl test_sha1_final(EVP_MD_CTX *ctx, unsigned char *md)
 {
 # ifdef TEST_ENG_OPENSSL_SHA_P_FINAL
     fprintf(stderr, "(TEST_ENG_OPENSSL_SHA) test_sha1_final() called\n");
@@ -352,12 +352,12 @@ static const EVP_MD *test_sha_md(void)
     }
     return sha1_md;
 }
-static void test_sha_md_destroy(void)
+static void __cdecl test_sha_md_destroy(void)
 {
     EVP_MD_meth_free(sha1_md);
     sha1_md = NULL;
 }
-static int test_digest_nids(const int **nids)
+static int __cdecl test_digest_nids(const int **nids)
 {
     static int digest_nids[2] = { 0, 0 };
     static int pos = 0;
@@ -374,7 +374,7 @@ static int test_digest_nids(const int **nids)
     return pos;
 }
 
-static int openssl_digests(ENGINE *e, const EVP_MD **digest,
+static int __cdecl openssl_digests(ENGINE *e, const EVP_MD **digest,
                            const int **nids, int nid)
 {
     if (!digest) {
@@ -397,7 +397,7 @@ static int openssl_digests(ENGINE *e, const EVP_MD **digest,
 #endif
 
 #ifdef TEST_ENG_OPENSSL_PKEY
-static EVP_PKEY *openssl_load_privkey(ENGINE *eng, const char *key_id,
+static EVP_PKEY * __cdecl openssl_load_privkey(ENGINE *eng, const char *key_id,
                                       UI_METHOD *ui_method,
                                       void *callback_data)
 {
@@ -429,7 +429,7 @@ typedef struct {
     HMAC_CTX *ctx;
 } OSSL_HMAC_PKEY_CTX;
 
-static int ossl_hmac_init(EVP_PKEY_CTX *ctx)
+static int __cdecl ossl_hmac_init(EVP_PKEY_CTX *ctx)
 {
     OSSL_HMAC_PKEY_CTX *hctx;
 
@@ -451,9 +451,9 @@ static int ossl_hmac_init(EVP_PKEY_CTX *ctx)
     return 1;
 }
 
-static void ossl_hmac_cleanup(EVP_PKEY_CTX *ctx);
+static void __cdecl ossl_hmac_cleanup(EVP_PKEY_CTX *ctx);
 
-static int ossl_hmac_copy(EVP_PKEY_CTX *dst, EVP_PKEY_CTX *src)
+static int __cdecl ossl_hmac_copy(EVP_PKEY_CTX *dst, EVP_PKEY_CTX *src)
 {
     OSSL_HMAC_PKEY_CTX *sctx, *dctx;
 
@@ -477,7 +477,7 @@ err:
     return 0;
 }
 
-static void ossl_hmac_cleanup(EVP_PKEY_CTX *ctx)
+static void __cdecl ossl_hmac_cleanup(EVP_PKEY_CTX *ctx)
 {
     OSSL_HMAC_PKEY_CTX *hctx = EVP_PKEY_CTX_get_data(ctx);
 
@@ -489,7 +489,7 @@ static void ossl_hmac_cleanup(EVP_PKEY_CTX *ctx)
     }
 }
 
-static int ossl_hmac_keygen(EVP_PKEY_CTX *ctx, EVP_PKEY *pkey)
+static int __cdecl ossl_hmac_keygen(EVP_PKEY_CTX *ctx, EVP_PKEY *pkey)
 {
     ASN1_OCTET_STRING *hkey = NULL;
     OSSL_HMAC_PKEY_CTX *hctx = EVP_PKEY_CTX_get_data(ctx);
@@ -503,7 +503,7 @@ static int ossl_hmac_keygen(EVP_PKEY_CTX *ctx, EVP_PKEY *pkey)
     return 1;
 }
 
-static int ossl_int_update(EVP_MD_CTX *ctx, const void *data, size_t count)
+static int __cdecl ossl_int_update(EVP_MD_CTX *ctx, const void *data, size_t count)
 {
     OSSL_HMAC_PKEY_CTX *hctx = EVP_PKEY_CTX_get_data(EVP_MD_CTX_pkey_ctx(ctx));
     if (!HMAC_Update(hctx->ctx, data, count))
@@ -511,14 +511,14 @@ static int ossl_int_update(EVP_MD_CTX *ctx, const void *data, size_t count)
     return 1;
 }
 
-static int ossl_hmac_signctx_init(EVP_PKEY_CTX *ctx, EVP_MD_CTX *mctx)
+static int __cdecl ossl_hmac_signctx_init(EVP_PKEY_CTX *ctx, EVP_MD_CTX *mctx)
 {
     EVP_MD_CTX_set_flags(mctx, EVP_MD_CTX_FLAG_NO_INIT);
     EVP_MD_CTX_set_update_fn(mctx, ossl_int_update);
     return 1;
 }
 
-static int ossl_hmac_signctx(EVP_PKEY_CTX *ctx, unsigned char *sig,
+static int __cdecl ossl_hmac_signctx(EVP_PKEY_CTX *ctx, unsigned char *sig,
                              size_t *siglen, EVP_MD_CTX *mctx)
 {
     unsigned int hlen;
@@ -537,7 +537,7 @@ static int ossl_hmac_signctx(EVP_PKEY_CTX *ctx, unsigned char *sig,
     return 1;
 }
 
-static int ossl_hmac_ctrl(EVP_PKEY_CTX *ctx, int type, int p1, void *p2)
+static int __cdecl ossl_hmac_ctrl(EVP_PKEY_CTX *ctx, int type, int p1, void *p2)
 {
     OSSL_HMAC_PKEY_CTX *hctx = EVP_PKEY_CTX_get_data(ctx);
     EVP_PKEY *pk;
@@ -569,7 +569,7 @@ static int ossl_hmac_ctrl(EVP_PKEY_CTX *ctx, int type, int p1, void *p2)
     return 1;
 }
 
-static int ossl_hmac_ctrl_str(EVP_PKEY_CTX *ctx,
+static int __cdecl ossl_hmac_ctrl_str(EVP_PKEY_CTX *ctx,
                               const char *type, const char *value)
 {
     if (!value) {
@@ -595,7 +595,7 @@ static int ossl_hmac_ctrl_str(EVP_PKEY_CTX *ctx,
 
 static EVP_PKEY_METHOD *ossl_hmac_meth;
 
-static int ossl_register_hmac_meth(void)
+static int __cdecl ossl_register_hmac_meth(void)
 {
     EVP_PKEY_METHOD *meth;
     meth = EVP_PKEY_meth_new(EVP_PKEY_HMAC, 0);
@@ -615,7 +615,7 @@ static int ossl_register_hmac_meth(void)
     return 1;
 }
 
-static int ossl_pkey_meths(ENGINE *e, EVP_PKEY_METHOD **pmeth,
+static int __cdecl ossl_pkey_meths(ENGINE *e, EVP_PKEY_METHOD **pmeth,
                            const int **nids, int nid)
 {
     static int ossl_pkey_nids[] = {
@@ -638,7 +638,7 @@ static int ossl_pkey_meths(ENGINE *e, EVP_PKEY_METHOD **pmeth,
 
 #endif
 
-int openssl_destroy(ENGINE *e)
+int __cdecl openssl_destroy(ENGINE *e)
 {
     test_sha_md_destroy();
 #ifdef TEST_ENG_OPENSSL_RC4
diff --git a/crypto/engine/eng_pkey.c b/crypto/engine/eng_pkey.c
index 305a648feb..2f0118985a 100644
--- a/crypto/engine/eng_pkey.c
+++ b/crypto/engine/eng_pkey.c
@@ -11,20 +11,20 @@
 
 /* Basic get/set stuff */
 
-int ENGINE_set_load_privkey_function(ENGINE *e,
+int __cdecl ENGINE_set_load_privkey_function(ENGINE *e,
                                      ENGINE_LOAD_KEY_PTR loadpriv_f)
 {
     e->load_privkey = loadpriv_f;
     return 1;
 }
 
-int ENGINE_set_load_pubkey_function(ENGINE *e, ENGINE_LOAD_KEY_PTR loadpub_f)
+int __cdecl ENGINE_set_load_pubkey_function(ENGINE *e, ENGINE_LOAD_KEY_PTR loadpub_f)
 {
     e->load_pubkey = loadpub_f;
     return 1;
 }
 
-int ENGINE_set_load_ssl_client_cert_function(ENGINE *e,
+int __cdecl ENGINE_set_load_ssl_client_cert_function(ENGINE *e,
                                              ENGINE_SSL_CLIENT_CERT_PTR
                                              loadssl_f)
 {
@@ -32,17 +32,17 @@ int ENGINE_set_load_ssl_client_cert_function(ENGINE *e,
     return 1;
 }
 
-ENGINE_LOAD_KEY_PTR ENGINE_get_load_privkey_function(const ENGINE *e)
+ENGINE_LOAD_KEY_PTR __cdecl ENGINE_get_load_privkey_function(const ENGINE *e)
 {
     return e->load_privkey;
 }
 
-ENGINE_LOAD_KEY_PTR ENGINE_get_load_pubkey_function(const ENGINE *e)
+ENGINE_LOAD_KEY_PTR __cdecl ENGINE_get_load_pubkey_function(const ENGINE *e)
 {
     return e->load_pubkey;
 }
 
-ENGINE_SSL_CLIENT_CERT_PTR ENGINE_get_ssl_client_cert_function(const ENGINE
+ENGINE_SSL_CLIENT_CERT_PTR __cdecl ENGINE_get_ssl_client_cert_function(const ENGINE
                                                                *e)
 {
     return e->load_ssl_client_cert;
@@ -50,7 +50,7 @@ ENGINE_SSL_CLIENT_CERT_PTR ENGINE_get_ssl_client_cert_function(const ENGINE
 
 /* API functions to load public/private keys */
 
-EVP_PKEY *ENGINE_load_private_key(ENGINE *e, const char *key_id,
+EVP_PKEY * __cdecl ENGINE_load_private_key(ENGINE *e, const char *key_id,
                                   UI_METHOD *ui_method, void *callback_data)
 {
     EVP_PKEY *pkey;
@@ -81,7 +81,7 @@ EVP_PKEY *ENGINE_load_private_key(ENGINE *e, const char *key_id,
     return pkey;
 }
 
-EVP_PKEY *ENGINE_load_public_key(ENGINE *e, const char *key_id,
+EVP_PKEY * __cdecl ENGINE_load_public_key(ENGINE *e, const char *key_id,
                                  UI_METHOD *ui_method, void *callback_data)
 {
     EVP_PKEY *pkey;
@@ -111,7 +111,7 @@ EVP_PKEY *ENGINE_load_public_key(ENGINE *e, const char *key_id,
     return pkey;
 }
 
-int ENGINE_load_ssl_client_cert(ENGINE *e, SSL *s,
+int __cdecl ENGINE_load_ssl_client_cert(ENGINE *e, SSL *s,
                                 STACK_OF(X509_NAME) *ca_dn, X509 **pcert,
                                 EVP_PKEY **ppkey, STACK_OF(X509) **pother,
                                 UI_METHOD *ui_method, void *callback_data)
diff --git a/crypto/engine/eng_rdrand.c b/crypto/engine/eng_rdrand.c
index 261e5debbf..8b05a46e95 100644
--- a/crypto/engine/eng_rdrand.c
+++ b/crypto/engine/eng_rdrand.c
@@ -77,7 +77,7 @@ static ENGINE *ENGINE_rdrand(void)
     return ret;
 }
 
-void engine_load_rdrand_int(void)
+void __cdecl engine_load_rdrand_int(void)
 {
     extern unsigned int OPENSSL_ia32cap_P[];
 
@@ -91,7 +91,7 @@ void engine_load_rdrand_int(void)
     }
 }
 #else
-void engine_load_rdrand_int(void)
+void __cdecl engine_load_rdrand_int(void)
 {
 }
 #endif
diff --git a/crypto/engine/eng_table.c b/crypto/engine/eng_table.c
index ac4b02fc12..011df180c1 100644
--- a/crypto/engine/eng_table.c
+++ b/crypto/engine/eng_table.c
@@ -40,23 +40,23 @@ typedef struct st_engine_pile_doall {
 static unsigned int table_flags = 0;
 
 /* API function manipulating 'table_flags' */
-unsigned int ENGINE_get_table_flags(void)
+unsigned int __cdecl ENGINE_get_table_flags(void)
 {
     return table_flags;
 }
 
-void ENGINE_set_table_flags(unsigned int flags)
+void __cdecl ENGINE_set_table_flags(unsigned int flags)
 {
     table_flags = flags;
 }
 
 /* Internal functions for the "piles" hash table */
-static unsigned long engine_pile_hash(const ENGINE_PILE *c)
+static unsigned long __cdecl engine_pile_hash(const ENGINE_PILE *c)
 {
     return c->nid;
 }
 
-static int engine_pile_cmp(const ENGINE_PILE *a, const ENGINE_PILE *b)
+static int __cdecl engine_pile_cmp(const ENGINE_PILE *a, const ENGINE_PILE *b)
 {
     return a->nid - b->nid;
 }
diff --git a/crypto/engine/tb_asnmth.c b/crypto/engine/tb_asnmth.c
index 4bcc76136a..5d56cfade2 100644
--- a/crypto/engine/tb_asnmth.c
+++ b/crypto/engine/tb_asnmth.c
@@ -22,7 +22,7 @@
 
 static ENGINE_TABLE *pkey_asn1_meth_table = NULL;
 
-void ENGINE_unregister_pkey_asn1_meths(ENGINE *e)
+void __cdecl ENGINE_unregister_pkey_asn1_meths(ENGINE *e)
 {
     engine_table_unregister(&pkey_asn1_meth_table, e);
 }
@@ -32,7 +32,7 @@ static void engine_unregister_all_pkey_asn1_meths(void)
     engine_table_cleanup(&pkey_asn1_meth_table);
 }
 
-int ENGINE_register_pkey_asn1_meths(ENGINE *e)
+int __cdecl ENGINE_register_pkey_asn1_meths(ENGINE *e)
 {
     if (e->pkey_asn1_meths) {
         const int *nids;
@@ -45,7 +45,7 @@ int ENGINE_register_pkey_asn1_meths(ENGINE *e)
     return 1;
 }
 
-void ENGINE_register_all_pkey_asn1_meths(void)
+void __cdecl ENGINE_register_all_pkey_asn1_meths(void)
 {
     ENGINE *e;
 
@@ -53,7 +53,7 @@ void ENGINE_register_all_pkey_asn1_meths(void)
         ENGINE_register_pkey_asn1_meths(e);
 }
 
-int ENGINE_set_default_pkey_asn1_meths(ENGINE *e)
+int __cdecl ENGINE_set_default_pkey_asn1_meths(ENGINE *e)
 {
     if (e->pkey_asn1_meths) {
         const int *nids;
@@ -71,7 +71,7 @@ int ENGINE_set_default_pkey_asn1_meths(ENGINE *e)
  * table (ie. try to get a functional reference from the tabled structural
  * references) for a given pkey_asn1_meth 'nid'
  */
-ENGINE *ENGINE_get_pkey_asn1_meth_engine(int nid)
+ENGINE * __cdecl ENGINE_get_pkey_asn1_meth_engine(int nid)
 {
     return engine_table_select(&pkey_asn1_meth_table, nid);
 }
@@ -80,7 +80,7 @@ ENGINE *ENGINE_get_pkey_asn1_meth_engine(int nid)
  * Obtains a pkey_asn1_meth implementation from an ENGINE functional
  * reference
  */
-const EVP_PKEY_ASN1_METHOD *ENGINE_get_pkey_asn1_meth(ENGINE *e, int nid)
+const EVP_PKEY_ASN1_METHOD * __cdecl ENGINE_get_pkey_asn1_meth(ENGINE *e, int nid)
 {
     EVP_PKEY_ASN1_METHOD *ret;
     ENGINE_PKEY_ASN1_METHS_PTR fn = ENGINE_get_pkey_asn1_meths(e);
@@ -93,13 +93,13 @@ const EVP_PKEY_ASN1_METHOD *ENGINE_get_pkey_asn1_meth(ENGINE *e, int nid)
 }
 
 /* Gets the pkey_asn1_meth callback from an ENGINE structure */
-ENGINE_PKEY_ASN1_METHS_PTR ENGINE_get_pkey_asn1_meths(const ENGINE *e)
+ENGINE_PKEY_ASN1_METHS_PTR __cdecl ENGINE_get_pkey_asn1_meths(const ENGINE *e)
 {
     return e->pkey_asn1_meths;
 }
 
 /* Sets the pkey_asn1_meth callback in an ENGINE structure */
-int ENGINE_set_pkey_asn1_meths(ENGINE *e, ENGINE_PKEY_ASN1_METHS_PTR f)
+int __cdecl ENGINE_set_pkey_asn1_meths(ENGINE *e, ENGINE_PKEY_ASN1_METHS_PTR f)
 {
     e->pkey_asn1_meths = f;
     return 1;
@@ -133,7 +133,7 @@ void engine_pkey_asn1_meths_free(ENGINE *e)
  * for speed critical operations.
  */
 
-const EVP_PKEY_ASN1_METHOD *ENGINE_get_pkey_asn1_meth_str(ENGINE *e,
+const EVP_PKEY_ASN1_METHOD * __cdecl ENGINE_get_pkey_asn1_meth_str(ENGINE *e,
                                                           const char *str,
                                                           int len)
 {
@@ -181,7 +181,7 @@ static void look_str_cb(int nid, STACK_OF(ENGINE) *sk, ENGINE *def, void *arg)
     }
 }
 
-const EVP_PKEY_ASN1_METHOD *ENGINE_pkey_asn1_find_str(ENGINE **pe,
+const EVP_PKEY_ASN1_METHOD * __cdecl ENGINE_pkey_asn1_find_str(ENGINE **pe,
                                                       const char *str,
                                                       int len)
 {
diff --git a/crypto/engine/tb_cipher.c b/crypto/engine/tb_cipher.c
index faa967c475..99888b2bf8 100644
--- a/crypto/engine/tb_cipher.c
+++ b/crypto/engine/tb_cipher.c
@@ -11,7 +11,7 @@
 
 static ENGINE_TABLE *cipher_table = NULL;
 
-void ENGINE_unregister_ciphers(ENGINE *e)
+void __cdecl ENGINE_unregister_ciphers(ENGINE *e)
 {
     engine_table_unregister(&cipher_table, e);
 }
@@ -21,7 +21,7 @@ static void engine_unregister_all_ciphers(void)
     engine_table_cleanup(&cipher_table);
 }
 
-int ENGINE_register_ciphers(ENGINE *e)
+int __cdecl ENGINE_register_ciphers(ENGINE *e)
 {
     if (e->ciphers) {
         const int *nids;
@@ -34,7 +34,7 @@ int ENGINE_register_ciphers(ENGINE *e)
     return 1;
 }
 
-void ENGINE_register_all_ciphers(void)
+void __cdecl ENGINE_register_all_ciphers(void)
 {
     ENGINE *e;
 
@@ -42,7 +42,7 @@ void ENGINE_register_all_ciphers(void)
         ENGINE_register_ciphers(e);
 }
 
-int ENGINE_set_default_ciphers(ENGINE *e)
+int __cdecl ENGINE_set_default_ciphers(ENGINE *e)
 {
     if (e->ciphers) {
         const int *nids;
@@ -60,13 +60,13 @@ int ENGINE_set_default_ciphers(ENGINE *e)
  * table (ie. try to get a functional reference from the tabled structural
  * references) for a given cipher 'nid'
  */
-ENGINE *ENGINE_get_cipher_engine(int nid)
+ENGINE * __cdecl ENGINE_get_cipher_engine(int nid)
 {
     return engine_table_select(&cipher_table, nid);
 }
 
 /* Obtains a cipher implementation from an ENGINE functional reference */
-const EVP_CIPHER *ENGINE_get_cipher(ENGINE *e, int nid)
+const EVP_CIPHER * __cdecl ENGINE_get_cipher(ENGINE *e, int nid)
 {
     const EVP_CIPHER *ret;
     ENGINE_CIPHERS_PTR fn = ENGINE_get_ciphers(e);
@@ -78,13 +78,13 @@ const EVP_CIPHER *ENGINE_get_cipher(ENGINE *e, int nid)
 }
 
 /* Gets the cipher callback from an ENGINE structure */
-ENGINE_CIPHERS_PTR ENGINE_get_ciphers(const ENGINE *e)
+ENGINE_CIPHERS_PTR __cdecl ENGINE_get_ciphers(const ENGINE *e)
 {
     return e->ciphers;
 }
 
 /* Sets the cipher callback in an ENGINE structure */
-int ENGINE_set_ciphers(ENGINE *e, ENGINE_CIPHERS_PTR f)
+int __cdecl ENGINE_set_ciphers(ENGINE *e, ENGINE_CIPHERS_PTR f)
 {
     e->ciphers = f;
     return 1;
diff --git a/crypto/engine/tb_dh.c b/crypto/engine/tb_dh.c
index 785119f65a..8824be9eca 100644
--- a/crypto/engine/tb_dh.c
+++ b/crypto/engine/tb_dh.c
@@ -12,7 +12,7 @@
 static ENGINE_TABLE *dh_table = NULL;
 static const int dummy_nid = 1;
 
-void ENGINE_unregister_DH(ENGINE *e)
+void __cdecl ENGINE_unregister_DH(ENGINE *e)
 {
     engine_table_unregister(&dh_table, e);
 }
@@ -22,7 +22,7 @@ static void engine_unregister_all_DH(void)
     engine_table_cleanup(&dh_table);
 }
 
-int ENGINE_register_DH(ENGINE *e)
+int __cdecl ENGINE_register_DH(ENGINE *e)
 {
     if (e->dh_meth)
         return engine_table_register(&dh_table,
@@ -31,7 +31,7 @@ int ENGINE_register_DH(ENGINE *e)
     return 1;
 }
 
-void ENGINE_register_all_DH(void)
+void __cdecl ENGINE_register_all_DH(void)
 {
     ENGINE *e;
 
@@ -39,7 +39,7 @@ void ENGINE_register_all_DH(void)
         ENGINE_register_DH(e);
 }
 
-int ENGINE_set_default_DH(ENGINE *e)
+int __cdecl ENGINE_set_default_DH(ENGINE *e)
 {
     if (e->dh_meth)
         return engine_table_register(&dh_table,
@@ -53,19 +53,19 @@ int ENGINE_set_default_DH(ENGINE *e)
  * table (ie. try to get a functional reference from the tabled structural
  * references).
  */
-ENGINE *ENGINE_get_default_DH(void)
+ENGINE * __cdecl ENGINE_get_default_DH(void)
 {
     return engine_table_select(&dh_table, dummy_nid);
 }
 
 /* Obtains an DH implementation from an ENGINE functional reference */
-const DH_METHOD *ENGINE_get_DH(const ENGINE *e)
+const DH_METHOD * __cdecl ENGINE_get_DH(const ENGINE *e)
 {
     return e->dh_meth;
 }
 
 /* Sets an DH implementation in an ENGINE structure */
-int ENGINE_set_DH(ENGINE *e, const DH_METHOD *dh_meth)
+int __cdecl ENGINE_set_DH(ENGINE *e, const DH_METHOD *dh_meth)
 {
     e->dh_meth = dh_meth;
     return 1;
diff --git a/crypto/engine/tb_digest.c b/crypto/engine/tb_digest.c
index d644b1b0a8..995376b3e2 100644
--- a/crypto/engine/tb_digest.c
+++ b/crypto/engine/tb_digest.c
@@ -11,7 +11,7 @@
 
 static ENGINE_TABLE *digest_table = NULL;
 
-void ENGINE_unregister_digests(ENGINE *e)
+void __cdecl ENGINE_unregister_digests(ENGINE *e)
 {
     engine_table_unregister(&digest_table, e);
 }
@@ -21,7 +21,7 @@ static void engine_unregister_all_digests(void)
     engine_table_cleanup(&digest_table);
 }
 
-int ENGINE_register_digests(ENGINE *e)
+int __cdecl ENGINE_register_digests(ENGINE *e)
 {
     if (e->digests) {
         const int *nids;
@@ -34,7 +34,7 @@ int ENGINE_register_digests(ENGINE *e)
     return 1;
 }
 
-void ENGINE_register_all_digests(void)
+void __cdecl ENGINE_register_all_digests(void)
 {
     ENGINE *e;
 
@@ -42,7 +42,7 @@ void ENGINE_register_all_digests(void)
         ENGINE_register_digests(e);
 }
 
-int ENGINE_set_default_digests(ENGINE *e)
+int __cdecl ENGINE_set_default_digests(ENGINE *e)
 {
     if (e->digests) {
         const int *nids;
@@ -60,13 +60,13 @@ int ENGINE_set_default_digests(ENGINE *e)
  * table (ie. try to get a functional reference from the tabled structural
  * references) for a given digest 'nid'
  */
-ENGINE *ENGINE_get_digest_engine(int nid)
+ENGINE * __cdecl ENGINE_get_digest_engine(int nid)
 {
     return engine_table_select(&digest_table, nid);
 }
 
 /* Obtains a digest implementation from an ENGINE functional reference */
-const EVP_MD *ENGINE_get_digest(ENGINE *e, int nid)
+const EVP_MD * __cdecl ENGINE_get_digest(ENGINE *e, int nid)
 {
     const EVP_MD *ret;
     ENGINE_DIGESTS_PTR fn = ENGINE_get_digests(e);
@@ -78,13 +78,13 @@ const EVP_MD *ENGINE_get_digest(ENGINE *e, int nid)
 }
 
 /* Gets the digest callback from an ENGINE structure */
-ENGINE_DIGESTS_PTR ENGINE_get_digests(const ENGINE *e)
+ENGINE_DIGESTS_PTR __cdecl ENGINE_get_digests(const ENGINE *e)
 {
     return e->digests;
 }
 
 /* Sets the digest callback in an ENGINE structure */
-int ENGINE_set_digests(ENGINE *e, ENGINE_DIGESTS_PTR f)
+int __cdecl ENGINE_set_digests(ENGINE *e, ENGINE_DIGESTS_PTR f)
 {
     e->digests = f;
     return 1;
diff --git a/crypto/engine/tb_dsa.c b/crypto/engine/tb_dsa.c
index 65b6ea8d3a..f4d45d28d2 100644
--- a/crypto/engine/tb_dsa.c
+++ b/crypto/engine/tb_dsa.c
@@ -12,7 +12,7 @@
 static ENGINE_TABLE *dsa_table = NULL;
 static const int dummy_nid = 1;
 
-void ENGINE_unregister_DSA(ENGINE *e)
+void __cdecl ENGINE_unregister_DSA(ENGINE *e)
 {
     engine_table_unregister(&dsa_table, e);
 }
@@ -22,7 +22,7 @@ static void engine_unregister_all_DSA(void)
     engine_table_cleanup(&dsa_table);
 }
 
-int ENGINE_register_DSA(ENGINE *e)
+int __cdecl ENGINE_register_DSA(ENGINE *e)
 {
     if (e->dsa_meth)
         return engine_table_register(&dsa_table,
@@ -31,7 +31,7 @@ int ENGINE_register_DSA(ENGINE *e)
     return 1;
 }
 
-void ENGINE_register_all_DSA(void)
+void __cdecl ENGINE_register_all_DSA(void)
 {
     ENGINE *e;
 
@@ -39,7 +39,7 @@ void ENGINE_register_all_DSA(void)
         ENGINE_register_DSA(e);
 }
 
-int ENGINE_set_default_DSA(ENGINE *e)
+int __cdecl ENGINE_set_default_DSA(ENGINE *e)
 {
     if (e->dsa_meth)
         return engine_table_register(&dsa_table,
@@ -53,19 +53,19 @@ int ENGINE_set_default_DSA(ENGINE *e)
  * table (ie. try to get a functional reference from the tabled structural
  * references).
  */
-ENGINE *ENGINE_get_default_DSA(void)
+ENGINE * __cdecl ENGINE_get_default_DSA(void)
 {
     return engine_table_select(&dsa_table, dummy_nid);
 }
 
 /* Obtains an DSA implementation from an ENGINE functional reference */
-const DSA_METHOD *ENGINE_get_DSA(const ENGINE *e)
+const DSA_METHOD * __cdecl ENGINE_get_DSA(const ENGINE *e)
 {
     return e->dsa_meth;
 }
 
 /* Sets an DSA implementation in an ENGINE structure */
-int ENGINE_set_DSA(ENGINE *e, const DSA_METHOD *dsa_meth)
+int __cdecl ENGINE_set_DSA(ENGINE *e, const DSA_METHOD *dsa_meth)
 {
     e->dsa_meth = dsa_meth;
     return 1;
diff --git a/crypto/engine/tb_eckey.c b/crypto/engine/tb_eckey.c
index 1e50736854..d558908aa7 100644
--- a/crypto/engine/tb_eckey.c
+++ b/crypto/engine/tb_eckey.c
@@ -12,7 +12,7 @@
 static ENGINE_TABLE *dh_table = NULL;
 static const int dummy_nid = 1;
 
-void ENGINE_unregister_EC(ENGINE *e)
+void __cdecl ENGINE_unregister_EC(ENGINE *e)
 {
     engine_table_unregister(&dh_table, e);
 }
@@ -22,7 +22,7 @@ static void engine_unregister_all_EC(void)
     engine_table_cleanup(&dh_table);
 }
 
-int ENGINE_register_EC(ENGINE *e)
+int __cdecl ENGINE_register_EC(ENGINE *e)
 {
     if (e->ec_meth != NULL)
         return engine_table_register(&dh_table,
@@ -31,7 +31,7 @@ int ENGINE_register_EC(ENGINE *e)
     return 1;
 }
 
-void ENGINE_register_all_EC(void)
+void __cdecl ENGINE_register_all_EC(void)
 {
     ENGINE *e;
 
@@ -39,7 +39,7 @@ void ENGINE_register_all_EC(void)
         ENGINE_register_EC(e);
 }
 
-int ENGINE_set_default_EC(ENGINE *e)
+int __cdecl ENGINE_set_default_EC(ENGINE *e)
 {
     if (e->ec_meth != NULL)
         return engine_table_register(&dh_table,
@@ -53,19 +53,19 @@ int ENGINE_set_default_EC(ENGINE *e)
  * table (ie. try to get a functional reference from the tabled structural
  * references).
  */
-ENGINE *ENGINE_get_default_EC(void)
+ENGINE * __cdecl ENGINE_get_default_EC(void)
 {
     return engine_table_select(&dh_table, dummy_nid);
 }
 
 /* Obtains an EC_KEY implementation from an ENGINE functional reference */
-const EC_KEY_METHOD *ENGINE_get_EC(const ENGINE *e)
+const EC_KEY_METHOD * __cdecl ENGINE_get_EC(const ENGINE *e)
 {
     return e->ec_meth;
 }
 
 /* Sets an EC_KEY implementation in an ENGINE structure */
-int ENGINE_set_EC(ENGINE *e, const EC_KEY_METHOD *ec_meth)
+int __cdecl ENGINE_set_EC(ENGINE *e, const EC_KEY_METHOD *ec_meth)
 {
     e->ec_meth = ec_meth;
     return 1;
diff --git a/crypto/engine/tb_pkmeth.c b/crypto/engine/tb_pkmeth.c
index 03cd1e69dd..2ec8ca0288 100644
--- a/crypto/engine/tb_pkmeth.c
+++ b/crypto/engine/tb_pkmeth.c
@@ -12,7 +12,7 @@
 
 static ENGINE_TABLE *pkey_meth_table = NULL;
 
-void ENGINE_unregister_pkey_meths(ENGINE *e)
+void __cdecl ENGINE_unregister_pkey_meths(ENGINE *e)
 {
     engine_table_unregister(&pkey_meth_table, e);
 }
@@ -22,7 +22,7 @@ static void engine_unregister_all_pkey_meths(void)
     engine_table_cleanup(&pkey_meth_table);
 }
 
-int ENGINE_register_pkey_meths(ENGINE *e)
+int __cdecl ENGINE_register_pkey_meths(ENGINE *e)
 {
     if (e->pkey_meths) {
         const int *nids;
@@ -35,7 +35,7 @@ int ENGINE_register_pkey_meths(ENGINE *e)
     return 1;
 }
 
-void ENGINE_register_all_pkey_meths(void)
+void __cdecl ENGINE_register_all_pkey_meths(void)
 {
     ENGINE *e;
 
@@ -43,7 +43,7 @@ void ENGINE_register_all_pkey_meths(void)
         ENGINE_register_pkey_meths(e);
 }
 
-int ENGINE_set_default_pkey_meths(ENGINE *e)
+int __cdecl ENGINE_set_default_pkey_meths(ENGINE *e)
 {
     if (e->pkey_meths) {
         const int *nids;
@@ -61,13 +61,13 @@ int ENGINE_set_default_pkey_meths(ENGINE *e)
  * table (ie. try to get a functional reference from the tabled structural
  * references) for a given pkey_meth 'nid'
  */
-ENGINE *ENGINE_get_pkey_meth_engine(int nid)
+ENGINE * __cdecl ENGINE_get_pkey_meth_engine(int nid)
 {
     return engine_table_select(&pkey_meth_table, nid);
 }
 
 /* Obtains a pkey_meth implementation from an ENGINE functional reference */
-const EVP_PKEY_METHOD *ENGINE_get_pkey_meth(ENGINE *e, int nid)
+const EVP_PKEY_METHOD * __cdecl ENGINE_get_pkey_meth(ENGINE *e, int nid)
 {
     EVP_PKEY_METHOD *ret;
     ENGINE_PKEY_METHS_PTR fn = ENGINE_get_pkey_meths(e);
@@ -80,13 +80,13 @@ const EVP_PKEY_METHOD *ENGINE_get_pkey_meth(ENGINE *e, int nid)
 }
 
 /* Gets the pkey_meth callback from an ENGINE structure */
-ENGINE_PKEY_METHS_PTR ENGINE_get_pkey_meths(const ENGINE *e)
+ENGINE_PKEY_METHS_PTR __cdecl ENGINE_get_pkey_meths(const ENGINE *e)
 {
     return e->pkey_meths;
 }
 
 /* Sets the pkey_meth callback in an ENGINE structure */
-int ENGINE_set_pkey_meths(ENGINE *e, ENGINE_PKEY_METHS_PTR f)
+int __cdecl ENGINE_set_pkey_meths(ENGINE *e, ENGINE_PKEY_METHS_PTR f)
 {
     e->pkey_meths = f;
     return 1;
diff --git a/crypto/engine/tb_rand.c b/crypto/engine/tb_rand.c
index 98a98073cd..19f2ef0149 100644
--- a/crypto/engine/tb_rand.c
+++ b/crypto/engine/tb_rand.c
@@ -12,7 +12,7 @@
 static ENGINE_TABLE *rand_table = NULL;
 static const int dummy_nid = 1;
 
-void ENGINE_unregister_RAND(ENGINE *e)
+void __cdecl ENGINE_unregister_RAND(ENGINE *e)
 {
     engine_table_unregister(&rand_table, e);
 }
@@ -22,7 +22,7 @@ static void engine_unregister_all_RAND(void)
     engine_table_cleanup(&rand_table);
 }
 
-int ENGINE_register_RAND(ENGINE *e)
+int __cdecl ENGINE_register_RAND(ENGINE *e)
 {
     if (e->rand_meth)
         return engine_table_register(&rand_table,
@@ -31,7 +31,7 @@ int ENGINE_register_RAND(ENGINE *e)
     return 1;
 }
 
-void ENGINE_register_all_RAND(void)
+void __cdecl ENGINE_register_all_RAND(void)
 {
     ENGINE *e;
 
@@ -39,7 +39,7 @@ void ENGINE_register_all_RAND(void)
         ENGINE_register_RAND(e);
 }
 
-int ENGINE_set_default_RAND(ENGINE *e)
+int __cdecl ENGINE_set_default_RAND(ENGINE *e)
 {
     if (e->rand_meth)
         return engine_table_register(&rand_table,
@@ -53,19 +53,19 @@ int ENGINE_set_default_RAND(ENGINE *e)
  * table (ie. try to get a functional reference from the tabled structural
  * references).
  */
-ENGINE *ENGINE_get_default_RAND(void)
+ENGINE * __cdecl ENGINE_get_default_RAND(void)
 {
     return engine_table_select(&rand_table, dummy_nid);
 }
 
 /* Obtains an RAND implementation from an ENGINE functional reference */
-const RAND_METHOD *ENGINE_get_RAND(const ENGINE *e)
+const RAND_METHOD * __cdecl ENGINE_get_RAND(const ENGINE *e)
 {
     return e->rand_meth;
 }
 
 /* Sets an RAND implementation in an ENGINE structure */
-int ENGINE_set_RAND(ENGINE *e, const RAND_METHOD *rand_meth)
+int __cdecl ENGINE_set_RAND(ENGINE *e, const RAND_METHOD *rand_meth)
 {
     e->rand_meth = rand_meth;
     return 1;
diff --git a/crypto/engine/tb_rsa.c b/crypto/engine/tb_rsa.c
index d8d2e34f84..1bb83c773e 100644
--- a/crypto/engine/tb_rsa.c
+++ b/crypto/engine/tb_rsa.c
@@ -12,7 +12,7 @@
 static ENGINE_TABLE *rsa_table = NULL;
 static const int dummy_nid = 1;
 
-void ENGINE_unregister_RSA(ENGINE *e)
+void __cdecl ENGINE_unregister_RSA(ENGINE *e)
 {
     engine_table_unregister(&rsa_table, e);
 }
@@ -22,7 +22,7 @@ static void engine_unregister_all_RSA(void)
     engine_table_cleanup(&rsa_table);
 }
 
-int ENGINE_register_RSA(ENGINE *e)
+int __cdecl ENGINE_register_RSA(ENGINE *e)
 {
     if (e->rsa_meth)
         return engine_table_register(&rsa_table,
@@ -31,7 +31,7 @@ int ENGINE_register_RSA(ENGINE *e)
     return 1;
 }
 
-void ENGINE_register_all_RSA(void)
+void __cdecl ENGINE_register_all_RSA(void)
 {
     ENGINE *e;
 
@@ -39,7 +39,7 @@ void ENGINE_register_all_RSA(void)
         ENGINE_register_RSA(e);
 }
 
-int ENGINE_set_default_RSA(ENGINE *e)
+int __cdecl ENGINE_set_default_RSA(ENGINE *e)
 {
     if (e->rsa_meth)
         return engine_table_register(&rsa_table,
@@ -53,19 +53,19 @@ int ENGINE_set_default_RSA(ENGINE *e)
  * table (ie. try to get a functional reference from the tabled structural
  * references).
  */
-ENGINE *ENGINE_get_default_RSA(void)
+ENGINE * __cdecl ENGINE_get_default_RSA(void)
 {
     return engine_table_select(&rsa_table, dummy_nid);
 }
 
 /* Obtains an RSA implementation from an ENGINE functional reference */
-const RSA_METHOD *ENGINE_get_RSA(const ENGINE *e)
+const RSA_METHOD * __cdecl ENGINE_get_RSA(const ENGINE *e)
 {
     return e->rsa_meth;
 }
 
 /* Sets an RSA implementation in an ENGINE structure */
-int ENGINE_set_RSA(ENGINE *e, const RSA_METHOD *rsa_meth)
+int __cdecl ENGINE_set_RSA(ENGINE *e, const RSA_METHOD *rsa_meth)
 {
     e->rsa_meth = rsa_meth;
     return 1;
diff --git a/crypto/err/err.c b/crypto/err/err.c
index 3a58ccb958..282155aaaf 100644
--- a/crypto/err/err.c
+++ b/crypto/err/err.c
@@ -23,9 +23,9 @@
 #include "internal/constant_time_locl.h"
 #include "e_os.h"
 
-static int err_load_strings(const ERR_STRING_DATA *str);
+static int __cdecl err_load_strings(const ERR_STRING_DATA *str);
 
-static void ERR_STATE_free(ERR_STATE *s);
+static void __cdecl ERR_STATE_free(ERR_STATE *s);
 #ifndef OPENSSL_NO_ERR
 static ERR_STRING_DATA ERR_str_libraries[] = {
     {ERR_PACK(ERR_LIB_NONE, 0, 0), "unknown library"},
@@ -142,7 +142,7 @@ static CRYPTO_THREAD_LOCAL err_thread_local;
 static CRYPTO_ONCE err_string_init = CRYPTO_ONCE_STATIC_INIT;
 static CRYPTO_RWLOCK *err_string_lock;
 
-static ERR_STRING_DATA *int_err_get_item(const ERR_STRING_DATA *);
+static ERR_STRING_DATA * __cdecl int_err_get_item(const ERR_STRING_DATA *);
 
 /*
  * The internal state
@@ -151,11 +151,11 @@ static ERR_STRING_DATA *int_err_get_item(const ERR_STRING_DATA *);
 static LHASH_OF(ERR_STRING_DATA) *int_error_hash = NULL;
 static int int_err_library_number = ERR_LIB_USER;
 
-static unsigned long get_error_values(int inc, int top, const char **file,
+static unsigned long __cdecl get_error_values(int inc, int top, const char **file,
                                       int *line, const char **data,
                                       int *flags);
 
-static unsigned long err_string_data_hash(const ERR_STRING_DATA *a)
+static unsigned long __cdecl err_string_data_hash(const ERR_STRING_DATA *a)
 {
     unsigned long ret, l;
 
@@ -164,7 +164,7 @@ static unsigned long err_string_data_hash(const ERR_STRING_DATA *a)
     return (ret ^ ret % 19 * 13);
 }
 
-static int err_string_data_cmp(const ERR_STRING_DATA *a,
+static int __cdecl err_string_data_cmp(const ERR_STRING_DATA *a,
                                const ERR_STRING_DATA *b)
 {
     if (a->error == b->error)
@@ -172,7 +172,7 @@ static int err_string_data_cmp(const ERR_STRING_DATA *a,
     return a->error > b->error ? 1 : -1;
 }
 
-static ERR_STRING_DATA *int_err_get_item(const ERR_STRING_DATA *d)
+static ERR_STRING_DATA * __cdecl int_err_get_item(const ERR_STRING_DATA *d)
 {
     ERR_STRING_DATA *p = NULL;
 
@@ -199,7 +199,7 @@ static ERR_STRING_DATA SYS_str_reasons[NUM_SYS_STR_REASONS + 1];
  * codes.
  */
 
-static void build_SYS_str_reasons(void)
+static void __cdecl build_SYS_str_reasons(void)
 {
     /* OPENSSL_malloc cannot be used here, use static storage instead */
     static char strerror_pool[SPACE_SYS_STR_REASONS];
@@ -279,7 +279,7 @@ static void build_SYS_str_reasons(void)
             (p)->err_line[i] = -1; \
         } while (0)
 
-static void ERR_STATE_free(ERR_STATE *s)
+static void __cdecl ERR_STATE_free(ERR_STATE *s)
 {
     int i;
 
@@ -308,7 +308,7 @@ DEFINE_RUN_ONCE_STATIC(do_err_strings_init)
     return 1;
 }
 
-void err_cleanup(void)
+void __cdecl err_cleanup(void)
 {
     if (set_err_thread_local != 0)
         CRYPTO_THREAD_cleanup_local(&err_thread_local);
@@ -321,7 +321,7 @@ void err_cleanup(void)
 /*
  * Legacy; pack in the library.
  */
-static void err_patch(int lib, ERR_STRING_DATA *str)
+static void __cdecl err_patch(int lib, ERR_STRING_DATA *str)
 {
     unsigned long plib = ERR_PACK(lib, 0, 0);
 
@@ -332,7 +332,7 @@ static void err_patch(int lib, ERR_STRING_DATA *str)
 /*
  * Hash in |str| error strings. Assumes the URN_ONCE was done.
  */
-static int err_load_strings(const ERR_STRING_DATA *str)
+static int __cdecl err_load_strings(const ERR_STRING_DATA *str)
 {
     CRYPTO_THREAD_write_lock(err_string_lock);
     for (; str->error; str++)
@@ -342,7 +342,7 @@ static int err_load_strings(const ERR_STRING_DATA *str)
     return 1;
 }
 
-int ERR_load_ERR_strings(void)
+int __cdecl ERR_load_ERR_strings(void)
 {
 #ifndef OPENSSL_NO_ERR
     if (!RUN_ONCE(&err_string_init, do_err_strings_init))
@@ -357,7 +357,7 @@ int ERR_load_ERR_strings(void)
     return 1;
 }
 
-int ERR_load_strings(int lib, ERR_STRING_DATA *str)
+int __cdecl ERR_load_strings(int lib, ERR_STRING_DATA *str)
 {
     if (ERR_load_ERR_strings() == 0)
         return 0;
@@ -367,7 +367,7 @@ int ERR_load_strings(int lib, ERR_STRING_DATA *str)
     return 1;
 }
 
-int ERR_load_strings_const(const ERR_STRING_DATA *str)
+int __cdecl ERR_load_strings_const(const ERR_STRING_DATA *str)
 {
     if (ERR_load_ERR_strings() == 0)
         return 0;
@@ -375,7 +375,7 @@ int ERR_load_strings_const(const ERR_STRING_DATA *str)
     return 1;
 }
 
-int ERR_unload_strings(int lib, ERR_STRING_DATA *str)
+int __cdecl ERR_unload_strings(int lib, ERR_STRING_DATA *str)
 {
     if (!RUN_ONCE(&err_string_init, do_err_strings_init))
         return 0;
@@ -392,7 +392,7 @@ int ERR_unload_strings(int lib, ERR_STRING_DATA *str)
     return 1;
 }
 
-void err_free_strings_int(void)
+void __cdecl err_free_strings_int(void)
 {
     if (!RUN_ONCE(&err_string_init, do_err_strings_init))
         return;
@@ -400,7 +400,7 @@ void err_free_strings_int(void)
 
 /********************************************************/
 
-void ERR_put_error(int lib, int func, int reason, const char *file, int line)
+void __cdecl ERR_put_error(int lib, int func, int reason, const char *file, int line)
 {
     ERR_STATE *es;
 
@@ -437,7 +437,7 @@ void ERR_put_error(int lib, int func, int reason, const char *file, int line)
     err_clear_data(es, es->top);
 }
 
-void ERR_clear_error(void)
+void __cdecl ERR_clear_error(void)
 {
     int i;
     ERR_STATE *es;
@@ -452,55 +452,55 @@ void ERR_clear_error(void)
     es->top = es->bottom = 0;
 }
 
-unsigned long ERR_get_error(void)
+unsigned long __cdecl ERR_get_error(void)
 {
     return get_error_values(1, 0, NULL, NULL, NULL, NULL);
 }
 
-unsigned long ERR_get_error_line(const char **file, int *line)
+unsigned long __cdecl ERR_get_error_line(const char **file, int *line)
 {
     return get_error_values(1, 0, file, line, NULL, NULL);
 }
 
-unsigned long ERR_get_error_line_data(const char **file, int *line,
+unsigned long __cdecl ERR_get_error_line_data(const char **file, int *line,
                                       const char **data, int *flags)
 {
     return get_error_values(1, 0, file, line, data, flags);
 }
 
-unsigned long ERR_peek_error(void)
+unsigned long __cdecl ERR_peek_error(void)
 {
     return get_error_values(0, 0, NULL, NULL, NULL, NULL);
 }
 
-unsigned long ERR_peek_error_line(const char **file, int *line)
+unsigned long __cdecl ERR_peek_error_line(const char **file, int *line)
 {
     return get_error_values(0, 0, file, line, NULL, NULL);
 }
 
-unsigned long ERR_peek_error_line_data(const char **file, int *line,
+unsigned long __cdecl ERR_peek_error_line_data(const char **file, int *line,
                                        const char **data, int *flags)
 {
     return get_error_values(0, 0, file, line, data, flags);
 }
 
-unsigned long ERR_peek_last_error(void)
+unsigned long __cdecl ERR_peek_last_error(void)
 {
     return get_error_values(0, 1, NULL, NULL, NULL, NULL);
 }
 
-unsigned long ERR_peek_last_error_line(const char **file, int *line)
+unsigned long __cdecl ERR_peek_last_error_line(const char **file, int *line)
 {
     return get_error_values(0, 1, file, line, NULL, NULL);
 }
 
-unsigned long ERR_peek_last_error_line_data(const char **file, int *line,
+unsigned long __cdecl ERR_peek_last_error_line_data(const char **file, int *line,
                                             const char **data, int *flags)
 {
     return get_error_values(0, 1, file, line, data, flags);
 }
 
-static unsigned long get_error_values(int inc, int top, const char **file,
+static unsigned long __cdecl get_error_values(int inc, int top, const char **file,
                                       int *line, const char **data,
                                       int *flags)
 {
@@ -582,7 +582,7 @@ static unsigned long get_error_values(int inc, int top, const char **file,
     return ret;
 }
 
-void ERR_error_string_n(unsigned long e, char *buf, size_t len)
+void __cdecl ERR_error_string_n(unsigned long e, char *buf, size_t len)
 {
     char lsbuf[64], fsbuf[64], rsbuf[64];
     const char *ls, *fs, *rs;
@@ -623,7 +623,7 @@ void ERR_error_string_n(unsigned long e, char *buf, size_t len)
  * ERR_error_string_n should be used instead for ret != NULL as
  * ERR_error_string cannot know how large the buffer is
  */
-char *ERR_error_string(unsigned long e, char *ret)
+char * __cdecl ERR_error_string(unsigned long e, char *ret)
 {
     static char buf[256];
 
@@ -633,7 +633,7 @@ char *ERR_error_string(unsigned long e, char *ret)
     return ret;
 }
 
-const char *ERR_lib_error_string(unsigned long e)
+const char * __cdecl ERR_lib_error_string(unsigned long e)
 {
     ERR_STRING_DATA d, *p;
     unsigned long l;
@@ -648,7 +648,7 @@ const char *ERR_lib_error_string(unsigned long e)
     return ((p == NULL) ? NULL : p->string);
 }
 
-const char *ERR_func_error_string(unsigned long e)
+const char * __cdecl ERR_func_error_string(unsigned long e)
 {
     ERR_STRING_DATA d, *p;
     unsigned long l, f;
@@ -664,7 +664,7 @@ const char *ERR_func_error_string(unsigned long e)
     return ((p == NULL) ? NULL : p->string);
 }
 
-const char *ERR_reason_error_string(unsigned long e)
+const char * __cdecl ERR_reason_error_string(unsigned long e)
 {
     ERR_STRING_DATA d, *p = NULL;
     unsigned long l, r;
@@ -684,7 +684,7 @@ const char *ERR_reason_error_string(unsigned long e)
     return ((p == NULL) ? NULL : p->string);
 }
 
-void err_delete_thread_state(void)
+void __cdecl err_delete_thread_state(void)
 {
     ERR_STATE *state = CRYPTO_THREAD_get_local(&err_thread_local);
     if (state == NULL)
@@ -695,13 +695,13 @@ void err_delete_thread_state(void)
 }
 
 #if OPENSSL_API_COMPAT < 0x10100000L
-void ERR_remove_thread_state(void *dummy)
+void __cdecl ERR_remove_thread_state(void *dummy)
 {
 }
 #endif
 
 #if OPENSSL_API_COMPAT < 0x10000000L
-void ERR_remove_state(unsigned long pid)
+void __cdecl ERR_remove_state(unsigned long pid)
 {
 }
 #endif
@@ -712,7 +712,7 @@ DEFINE_RUN_ONCE_STATIC(err_do_init)
     return CRYPTO_THREAD_init_local(&err_thread_local, NULL);
 }
 
-ERR_STATE *ERR_get_state(void)
+ERR_STATE *__cdecl ERR_get_state(void)
 {
     ERR_STATE *state;
     int saveerrno = get_last_sys_error();
@@ -755,7 +755,7 @@ ERR_STATE *ERR_get_state(void)
  * err_shelve_state returns the current thread local error state
  * and freezes the error module until err_unshelve_state is called.
  */
-int err_shelve_state(void **state)
+int __cdecl err_shelve_state(void **state)
 {
     int saveerrno = get_last_sys_error();
 
@@ -789,13 +789,13 @@ int err_shelve_state(void **state)
  * err_unshelve_state restores the error state that was returned
  * by err_shelve_state previously.
  */
-void err_unshelve_state(void* state)
+void __cdecl err_unshelve_state(void* state)
 {
     if (state != (void*)-1)
         CRYPTO_THREAD_set_local(&err_thread_local, (ERR_STATE*)state);
 }
 
-int ERR_get_next_error_library(void)
+int __cdecl ERR_get_next_error_library(void)
 {
     int ret;
 
@@ -808,7 +808,7 @@ int ERR_get_next_error_library(void)
     return ret;
 }
 
-static int err_set_error_data_int(char *data, int flags)
+static int __cdecl err_set_error_data_int(char *data, int flags)
 {
     ERR_STATE *es;
     int i;
@@ -826,7 +826,7 @@ static int err_set_error_data_int(char *data, int flags)
     return 1;
 }
 
-void ERR_set_error_data(char *data, int flags)
+void __cdecl ERR_set_error_data(char *data, int flags)
 {
     /*
      * This function is void so we cannot propagate the error return. Since it
@@ -835,7 +835,7 @@ void ERR_set_error_data(char *data, int flags)
     err_set_error_data_int(data, flags);
 }
 
-void ERR_add_error_data(int num, ...)
+void __cdecl ERR_add_error_data(int num, ...)
 {
     va_list args;
     va_start(args, num);
@@ -843,7 +843,7 @@ void ERR_add_error_data(int num, ...)
     va_end(args);
 }
 
-void ERR_add_error_vdata(int num, va_list args)
+void __cdecl ERR_add_error_vdata(int num, va_list args)
 {
     int i, n, s;
     char *str, *p, *a;
@@ -876,7 +876,7 @@ void ERR_add_error_vdata(int num, va_list args)
         OPENSSL_free(str);
 }
 
-int ERR_set_mark(void)
+int __cdecl ERR_set_mark(void)
 {
     ERR_STATE *es;
 
@@ -890,7 +890,7 @@ int ERR_set_mark(void)
     return 1;
 }
 
-int ERR_pop_to_mark(void)
+int __cdecl ERR_pop_to_mark(void)
 {
     ERR_STATE *es;
 
@@ -910,7 +910,7 @@ int ERR_pop_to_mark(void)
     return 1;
 }
 
-int ERR_clear_last_mark(void)
+int __cdecl ERR_clear_last_mark(void)
 {
     ERR_STATE *es;
     int top;
@@ -931,7 +931,7 @@ int ERR_clear_last_mark(void)
     return 1;
 }
 
-void err_clear_last_constant_time(int clear)
+void __cdecl err_clear_last_constant_time(int clear)
 {
     ERR_STATE *es;
     int top;
diff --git a/crypto/err/err_all.c b/crypto/err/err_all.c
index d9ec04b606..ad86eaab70 100644
--- a/crypto/err/err_all.c
+++ b/crypto/err/err_all.c
@@ -39,7 +39,7 @@
 #include <openssl/kdferr.h>
 #include <openssl/storeerr.h>
 
-int err_load_crypto_strings_int(void)
+int __cdecl err_load_crypto_strings_int(void)
 {
     if (
 #ifndef OPENSSL_NO_ERR
diff --git a/crypto/err/err_prn.c b/crypto/err/err_prn.c
index c82e62947e..0691fec995 100644
--- a/crypto/err/err_prn.c
+++ b/crypto/err/err_prn.c
@@ -13,7 +13,7 @@
 #include <openssl/buffer.h>
 #include <openssl/err.h>
 
-void ERR_print_errors_cb(int (*cb) (const char *str, size_t len, void *u),
+void __cdecl ERR_print_errors_cb(int (*cb) (const char *str, size_t len, void *u),
                          void *u)
 {
     unsigned long l;
@@ -47,13 +47,13 @@ static int print_bio(const char *str, size_t len, void *bp)
     return BIO_write((BIO *)bp, str, len);
 }
 
-void ERR_print_errors(BIO *bp)
+void __cdecl ERR_print_errors(BIO *bp)
 {
     ERR_print_errors_cb(print_bio, bp);
 }
 
 #ifndef OPENSSL_NO_STDIO
-void ERR_print_errors_fp(FILE *fp)
+void __cdecl ERR_print_errors_fp(FILE *fp)
 {
     BIO *bio = BIO_new_fp(fp, BIO_NOCLOSE);
     if (bio == NULL)
diff --git a/crypto/evp/bio_b64.c b/crypto/evp/bio_b64.c
index 9f891f7626..d16a4c80de 100644
--- a/crypto/evp/bio_b64.c
+++ b/crypto/evp/bio_b64.c
@@ -14,13 +14,13 @@
 #include <openssl/evp.h>
 #include "internal/bio.h"
 
-static int b64_write(BIO *h, const char *buf, int num);
-static int b64_read(BIO *h, char *buf, int size);
-static int b64_puts(BIO *h, const char *str);
-static long b64_ctrl(BIO *h, int cmd, long arg1, void *arg2);
-static int b64_new(BIO *h);
-static int b64_free(BIO *data);
-static long b64_callback_ctrl(BIO *h, int cmd, BIO_info_cb *fp);
+static int __cdecl b64_write(BIO *h, const char *buf, int num);
+static int __cdecl b64_read(BIO *h, char *buf, int size);
+static int __cdecl b64_puts(BIO *h, const char *str);
+static long __cdecl b64_ctrl(BIO *h, int cmd, long arg1, void *arg2);
+static int __cdecl b64_new(BIO *h);
+static int __cdecl b64_free(BIO *data);
+static long __cdecl b64_callback_ctrl(BIO *h, int cmd, BIO_info_cb *fp);
 #define B64_BLOCK_SIZE  1024
 #define B64_BLOCK_SIZE2 768
 #define B64_NONE        0
@@ -61,12 +61,12 @@ static const BIO_METHOD methods_b64 = {
 };
 
 
-const BIO_METHOD *BIO_f_base64(void)
+const BIO_METHOD * __cdecl BIO_f_base64(void)
 {
     return &methods_b64;
 }
 
-static int b64_new(BIO *bi)
+static int __cdecl b64_new(BIO *bi)
 {
     BIO_B64_CTX *ctx;
 
@@ -89,7 +89,7 @@ static int b64_new(BIO *bi)
     return 1;
 }
 
-static int b64_free(BIO *a)
+static int __cdecl b64_free(BIO *a)
 {
     BIO_B64_CTX *ctx;
     if (a == NULL)
@@ -107,7 +107,7 @@ static int b64_free(BIO *a)
     return 1;
 }
 
-static int b64_read(BIO *b, char *out, int outl)
+static int __cdecl b64_read(BIO *b, char *out, int outl)
 {
     int ret = 0, i, ii, j, k, x, n, num, ret_code = 0;
     BIO_B64_CTX *ctx;
@@ -325,7 +325,7 @@ static int b64_read(BIO *b, char *out, int outl)
     return ((ret == 0) ? ret_code : ret);
 }
 
-static int b64_write(BIO *b, const char *in, int inl)
+static int __cdecl b64_write(BIO *b, const char *in, int inl)
 {
     int ret = 0;
     int n;
@@ -445,7 +445,7 @@ static int b64_write(BIO *b, const char *in, int inl)
     return ret;
 }
 
-static long b64_ctrl(BIO *b, int cmd, long num, void *ptr)
+static long __cdecl b64_ctrl(BIO *b, int cmd, long num, void *ptr)
 {
     BIO_B64_CTX *ctx;
     long ret = 1;
@@ -532,7 +532,7 @@ static long b64_ctrl(BIO *b, int cmd, long num, void *ptr)
     return ret;
 }
 
-static long b64_callback_ctrl(BIO *b, int cmd, BIO_info_cb *fp)
+static long __cdecl b64_callback_ctrl(BIO *b, int cmd, BIO_info_cb *fp)
 {
     long ret = 1;
     BIO *next = BIO_next(b);
@@ -547,7 +547,7 @@ static long b64_callback_ctrl(BIO *b, int cmd, BIO_info_cb *fp)
     return ret;
 }
 
-static int b64_puts(BIO *b, const char *str)
+static int __cdecl b64_puts(BIO *b, const char *str)
 {
     return b64_write(b, str, strlen(str));
 }
diff --git a/crypto/evp/bio_enc.c b/crypto/evp/bio_enc.c
index 6639061eae..704417e7c8 100644
--- a/crypto/evp/bio_enc.c
+++ b/crypto/evp/bio_enc.c
@@ -14,12 +14,12 @@
 #include <openssl/evp.h>
 #include "internal/bio.h"
 
-static int enc_write(BIO *h, const char *buf, int num);
-static int enc_read(BIO *h, char *buf, int size);
-static long enc_ctrl(BIO *h, int cmd, long arg1, void *arg2);
-static int enc_new(BIO *h);
-static int enc_free(BIO *data);
-static long enc_callback_ctrl(BIO *h, int cmd, BIO_info_cb *fps);
+static int __cdecl enc_write(BIO *h, const char *buf, int num);
+static int __cdecl enc_read(BIO *h, char *buf, int size);
+static long __cdecl enc_ctrl(BIO *h, int cmd, long arg1, void *arg2);
+static int __cdecl enc_new(BIO *h);
+static int __cdecl enc_free(BIO *data);
+static long __cdecl enc_callback_ctrl(BIO *h, int cmd, BIO_info_cb *fps);
 #define ENC_BLOCK_SIZE  (1024*4)
 #define ENC_MIN_CHUNK   (256)
 #define BUF_OFFSET      (ENC_MIN_CHUNK + EVP_MAX_BLOCK_LENGTH)
@@ -56,12 +56,12 @@ static const BIO_METHOD methods_enc = {
     enc_callback_ctrl,
 };
 
-const BIO_METHOD *BIO_f_cipher(void)
+const BIO_METHOD * __cdecl BIO_f_cipher(void)
 {
     return &methods_enc;
 }
 
-static int enc_new(BIO *bi)
+static int __cdecl enc_new(BIO *bi)
 {
     BIO_ENC_CTX *ctx;
 
@@ -84,7 +84,7 @@ static int enc_new(BIO *bi)
     return 1;
 }
 
-static int enc_free(BIO *a)
+static int __cdecl enc_free(BIO *a)
 {
     BIO_ENC_CTX *b;
 
@@ -103,7 +103,7 @@ static int enc_free(BIO *a)
     return 1;
 }
 
-static int enc_read(BIO *b, char *out, int outl)
+static int __cdecl enc_read(BIO *b, char *out, int outl)
 {
     int ret = 0, i, blocksize;
     BIO_ENC_CTX *ctx;
@@ -231,7 +231,7 @@ static int enc_read(BIO *b, char *out, int outl)
     return ((ret == 0) ? ctx->cont : ret);
 }
 
-static int enc_write(BIO *b, const char *in, int inl)
+static int __cdecl enc_write(BIO *b, const char *in, int inl)
 {
     int ret = 0, n, i;
     BIO_ENC_CTX *ctx;
@@ -291,7 +291,7 @@ static int enc_write(BIO *b, const char *in, int inl)
     return ret;
 }
 
-static long enc_ctrl(BIO *b, int cmd, long num, void *ptr)
+static long __cdecl enc_ctrl(BIO *b, int cmd, long num, void *ptr)
 {
     BIO *dbio;
     BIO_ENC_CTX *ctx, *dctx;
@@ -386,7 +386,7 @@ static long enc_ctrl(BIO *b, int cmd, long num, void *ptr)
     return ret;
 }
 
-static long enc_callback_ctrl(BIO *b, int cmd, BIO_info_cb *fp)
+static long __cdecl enc_callback_ctrl(BIO *b, int cmd, BIO_info_cb *fp)
 {
     long ret = 1;
     BIO *next = BIO_next(b);
@@ -401,11 +401,11 @@ static long enc_callback_ctrl(BIO *b, int cmd, BIO_info_cb *fp)
     return ret;
 }
 
-int BIO_set_cipher(BIO *b, const EVP_CIPHER *c, const unsigned char *k,
+int __cdecl BIO_set_cipher(BIO *b, const EVP_CIPHER *c, const unsigned char *k,
                    const unsigned char *i, int e)
 {
     BIO_ENC_CTX *ctx;
-    long (*callback) (struct bio_st *, int, const char *, int, long, long);
+    long (__cdecl *callback) (struct bio_st *, int, const char *, int, long, long);
 
     ctx = BIO_get_data(b);
     if (ctx == NULL)
diff --git a/crypto/evp/bio_md.c b/crypto/evp/bio_md.c
index 288dee01b2..80bbda70ec 100644
--- a/crypto/evp/bio_md.c
+++ b/crypto/evp/bio_md.c
@@ -20,13 +20,13 @@
  * BIO_put and BIO_get both add to the digest, BIO_gets returns the digest
  */
 
-static int md_write(BIO *h, char const *buf, int num);
-static int md_read(BIO *h, char *buf, int size);
-static int md_gets(BIO *h, char *str, int size);
-static long md_ctrl(BIO *h, int cmd, long arg1, void *arg2);
-static int md_new(BIO *h);
-static int md_free(BIO *data);
-static long md_callback_ctrl(BIO *h, int cmd, BIO_info_cb *fp);
+static int __cdecl md_write(BIO *h, char const *buf, int num);
+static int __cdecl md_read(BIO *h, char *buf, int size);
+static int __cdecl md_gets(BIO *h, char *str, int size);
+static long __cdecl md_ctrl(BIO *h, int cmd, long arg1, void *arg2);
+static int __cdecl md_new(BIO *h);
+static int __cdecl md_free(BIO *data);
+static long __cdecl md_callback_ctrl(BIO *h, int cmd, BIO_info_cb *fp);
 
 static const BIO_METHOD methods_md = {
     BIO_TYPE_MD,
@@ -45,12 +45,12 @@ static const BIO_METHOD methods_md = {
     md_callback_ctrl,
 };
 
-const BIO_METHOD *BIO_f_md(void)
+const BIO_METHOD * __cdecl BIO_f_md(void)
 {
     return &methods_md;
 }
 
-static int md_new(BIO *bi)
+static int __cdecl md_new(BIO *bi)
 {
     EVP_MD_CTX *ctx;
 
@@ -64,7 +64,7 @@ static int md_new(BIO *bi)
     return 1;
 }
 
-static int md_free(BIO *a)
+static int __cdecl md_free(BIO *a)
 {
     if (a == NULL)
         return 0;
@@ -75,7 +75,7 @@ static int md_free(BIO *a)
     return 1;
 }
 
-static int md_read(BIO *b, char *out, int outl)
+static int __cdecl md_read(BIO *b, char *out, int outl)
 {
     int ret = 0;
     EVP_MD_CTX *ctx;
@@ -103,7 +103,7 @@ static int md_read(BIO *b, char *out, int outl)
     return ret;
 }
 
-static int md_write(BIO *b, const char *in, int inl)
+static int __cdecl md_write(BIO *b, const char *in, int inl)
 {
     int ret = 0;
     EVP_MD_CTX *ctx;
@@ -133,7 +133,7 @@ static int md_write(BIO *b, const char *in, int inl)
     return ret;
 }
 
-static long md_ctrl(BIO *b, int cmd, long num, void *ptr)
+static long __cdecl md_ctrl(BIO *b, int cmd, long num, void *ptr)
 {
     EVP_MD_CTX *ctx, *dctx, **pctx;
     const EVP_MD **ppmd;
@@ -198,7 +198,7 @@ static long md_ctrl(BIO *b, int cmd, long num, void *ptr)
     return ret;
 }
 
-static long md_callback_ctrl(BIO *b, int cmd, BIO_info_cb *fp)
+static long __cdecl md_callback_ctrl(BIO *b, int cmd, BIO_info_cb *fp)
 {
     long ret = 1;
     BIO *next;
@@ -216,7 +216,7 @@ static long md_callback_ctrl(BIO *b, int cmd, BIO_info_cb *fp)
     return ret;
 }
 
-static int md_gets(BIO *bp, char *buf, int size)
+static int __cdecl md_gets(BIO *bp, char *buf, int size)
 {
     EVP_MD_CTX *ctx;
     unsigned int ret;
diff --git a/crypto/evp/bio_ok.c b/crypto/evp/bio_ok.c
index 300db6cd32..bd11081718 100644
--- a/crypto/evp/bio_ok.c
+++ b/crypto/evp/bio_ok.c
@@ -78,12 +78,12 @@
 #include <openssl/rand.h>
 #include "internal/evp_int.h"
 
-static int ok_write(BIO *h, const char *buf, int num);
-static int ok_read(BIO *h, char *buf, int size);
-static long ok_ctrl(BIO *h, int cmd, long arg1, void *arg2);
-static int ok_new(BIO *h);
-static int ok_free(BIO *data);
-static long ok_callback_ctrl(BIO *h, int cmd, BIO_info_cb *fp);
+static int __cdecl ok_write(BIO *h, const char *buf, int num);
+static int __cdecl ok_read(BIO *h, char *buf, int size);
+static long __cdecl ok_ctrl(BIO *h, int cmd, long arg1, void *arg2);
+static int __cdecl ok_new(BIO *h);
+static int __cdecl ok_free(BIO *data);
+static long __cdecl ok_callback_ctrl(BIO *h, int cmd, BIO_info_cb *fp);
 
 static __owur int sig_out(BIO *b);
 static __owur int sig_in(BIO *b);
@@ -124,12 +124,12 @@ static const BIO_METHOD methods_ok = {
     ok_callback_ctrl,
 };
 
-const BIO_METHOD *BIO_f_reliable(void)
+const BIO_METHOD * __cdecl BIO_f_reliable(void)
 {
     return &methods_ok;
 }
 
-static int ok_new(BIO *bi)
+static int __cdecl ok_new(BIO *bi)
 {
     BIO_OK_CTX *ctx;
 
@@ -151,7 +151,7 @@ static int ok_new(BIO *bi)
     return 1;
 }
 
-static int ok_free(BIO *a)
+static int __cdecl ok_free(BIO *a)
 {
     BIO_OK_CTX *ctx;
 
@@ -168,7 +168,7 @@ static int ok_free(BIO *a)
     return 1;
 }
 
-static int ok_read(BIO *b, char *out, int outl)
+static int __cdecl ok_read(BIO *b, char *out, int outl)
 {
     int ret = 0, i, n;
     BIO_OK_CTX *ctx;
@@ -254,7 +254,7 @@ static int ok_read(BIO *b, char *out, int outl)
     return ret;
 }
 
-static int ok_write(BIO *b, const char *in, int inl)
+static int __cdecl ok_write(BIO *b, const char *in, int inl)
 {
     int ret = 0, n, i;
     BIO_OK_CTX *ctx;
@@ -319,7 +319,7 @@ static int ok_write(BIO *b, const char *in, int inl)
     return ret;
 }
 
-static long ok_ctrl(BIO *b, int cmd, long num, void *ptr)
+static long __cdecl ok_ctrl(BIO *b, int cmd, long num, void *ptr)
 {
     BIO_OK_CTX *ctx;
     EVP_MD *md;
@@ -404,7 +404,7 @@ static long ok_ctrl(BIO *b, int cmd, long num, void *ptr)
     return ret;
 }
 
-static long ok_callback_ctrl(BIO *b, int cmd, BIO_info_cb *fp)
+static long __cdecl ok_callback_ctrl(BIO *b, int cmd, BIO_info_cb *fp)
 {
     long ret = 1;
     BIO *next;
diff --git a/crypto/evp/cmeth_lib.c b/crypto/evp/cmeth_lib.c
index e2295c4dc5..a7f081cfb7 100644
--- a/crypto/evp/cmeth_lib.c
+++ b/crypto/evp/cmeth_lib.c
@@ -13,7 +13,7 @@
 #include "internal/evp_int.h"
 #include "evp_locl.h"
 
-EVP_CIPHER *EVP_CIPHER_meth_new(int cipher_type, int block_size, int key_len)
+EVP_CIPHER * __cdecl EVP_CIPHER_meth_new(int cipher_type, int block_size, int key_len)
 {
     EVP_CIPHER *cipher = OPENSSL_zalloc(sizeof(EVP_CIPHER));
 
@@ -25,7 +25,7 @@ EVP_CIPHER *EVP_CIPHER_meth_new(int cipher_type, int block_size, int key_len)
     return cipher;
 }
 
-EVP_CIPHER *EVP_CIPHER_meth_dup(const EVP_CIPHER *cipher)
+EVP_CIPHER * __cdecl EVP_CIPHER_meth_dup(const EVP_CIPHER *cipher)
 {
     EVP_CIPHER *to = EVP_CIPHER_meth_new(cipher->nid, cipher->block_size,
                                          cipher->key_len);
@@ -35,31 +35,31 @@ EVP_CIPHER *EVP_CIPHER_meth_dup(const EVP_CIPHER *cipher)
     return to;
 }
 
-void EVP_CIPHER_meth_free(EVP_CIPHER *cipher)
+void __cdecl EVP_CIPHER_meth_free(EVP_CIPHER *cipher)
 {
     OPENSSL_free(cipher);
 }
 
-int EVP_CIPHER_meth_set_iv_length(EVP_CIPHER *cipher, int iv_len)
+int __cdecl EVP_CIPHER_meth_set_iv_length(EVP_CIPHER *cipher, int iv_len)
 {
     cipher->iv_len = iv_len;
     return 1;
 }
 
-int EVP_CIPHER_meth_set_flags(EVP_CIPHER *cipher, unsigned long flags)
+int __cdecl EVP_CIPHER_meth_set_flags(EVP_CIPHER *cipher, unsigned long flags)
 {
     cipher->flags = flags;
     return 1;
 }
 
-int EVP_CIPHER_meth_set_impl_ctx_size(EVP_CIPHER *cipher, int ctx_size)
+int __cdecl EVP_CIPHER_meth_set_impl_ctx_size(EVP_CIPHER *cipher, int ctx_size)
 {
     cipher->ctx_size = ctx_size;
     return 1;
 }
 
-int EVP_CIPHER_meth_set_init(EVP_CIPHER *cipher,
-                             int (*init) (EVP_CIPHER_CTX *ctx,
+int __cdecl EVP_CIPHER_meth_set_init(EVP_CIPHER *cipher,
+                             int (__cdecl *init) (EVP_CIPHER_CTX *ctx,
                                           const unsigned char *key,
                                           const unsigned char *iv,
                                           int enc))
@@ -68,7 +68,7 @@ int EVP_CIPHER_meth_set_init(EVP_CIPHER *cipher,
     return 1;
 }
 
-int EVP_CIPHER_meth_set_do_cipher(EVP_CIPHER *cipher,
+int __cdecl EVP_CIPHER_meth_set_do_cipher(EVP_CIPHER *cipher,
                                   int (*do_cipher) (EVP_CIPHER_CTX *ctx,
                                                     unsigned char *out,
                                                     const unsigned char *in,
@@ -78,31 +78,31 @@ int EVP_CIPHER_meth_set_do_cipher(EVP_CIPHER *cipher,
     return 1;
 }
 
-int EVP_CIPHER_meth_set_cleanup(EVP_CIPHER *cipher,
-                                int (*cleanup) (EVP_CIPHER_CTX *))
+int __cdecl EVP_CIPHER_meth_set_cleanup(EVP_CIPHER *cipher,
+                                int (__cdecl *cleanup) (EVP_CIPHER_CTX *))
 {
     cipher->cleanup = cleanup;
     return 1;
 }
 
-int EVP_CIPHER_meth_set_set_asn1_params(EVP_CIPHER *cipher,
-                                        int (*set_asn1_parameters) (EVP_CIPHER_CTX *,
+int __cdecl EVP_CIPHER_meth_set_set_asn1_params(EVP_CIPHER *cipher,
+                                        int (__cdecl *set_asn1_parameters) (EVP_CIPHER_CTX *,
                                                                     ASN1_TYPE *))
 {
     cipher->set_asn1_parameters = set_asn1_parameters;
     return 1;
 }
 
-int EVP_CIPHER_meth_set_get_asn1_params(EVP_CIPHER *cipher,
-                                        int (*get_asn1_parameters) (EVP_CIPHER_CTX *,
+int __cdecl EVP_CIPHER_meth_set_get_asn1_params(EVP_CIPHER *cipher,
+                                        int (__cdecl *get_asn1_parameters) (EVP_CIPHER_CTX *,
                                                                     ASN1_TYPE *))
 {
     cipher->get_asn1_parameters = get_asn1_parameters;
     return 1;
 }
 
-int EVP_CIPHER_meth_set_ctrl(EVP_CIPHER *cipher,
-                             int (*ctrl) (EVP_CIPHER_CTX *, int type,
+int __cdecl EVP_CIPHER_meth_set_ctrl(EVP_CIPHER *cipher,
+                             int (__cdecl *ctrl) (EVP_CIPHER_CTX *, int type,
                                           int arg, void *ptr))
 {
     cipher->ctrl = ctrl;
@@ -110,7 +110,7 @@ int EVP_CIPHER_meth_set_ctrl(EVP_CIPHER *cipher,
 }
 
 
-int (*EVP_CIPHER_meth_get_init(const EVP_CIPHER *cipher))(EVP_CIPHER_CTX *ctx,
+int (__cdecl *EVP_CIPHER_meth_get_init(const EVP_CIPHER *cipher))(EVP_CIPHER_CTX *ctx,
                                                           const unsigned char *key,
                                                           const unsigned char *iv,
                                                           int enc)
@@ -125,24 +125,24 @@ int (*EVP_CIPHER_meth_get_do_cipher(const EVP_CIPHER *cipher))(EVP_CIPHER_CTX *c
     return cipher->do_cipher;
 }
 
-int (*EVP_CIPHER_meth_get_cleanup(const EVP_CIPHER *cipher))(EVP_CIPHER_CTX *)
+int (__cdecl *EVP_CIPHER_meth_get_cleanup(const EVP_CIPHER *cipher))(EVP_CIPHER_CTX *)
 {
     return cipher->cleanup;
 }
 
-int (*EVP_CIPHER_meth_get_set_asn1_params(const EVP_CIPHER *cipher))(EVP_CIPHER_CTX *,
+int (__cdecl *EVP_CIPHER_meth_get_set_asn1_params(const EVP_CIPHER *cipher))(EVP_CIPHER_CTX *,
                                                                      ASN1_TYPE *)
 {
     return cipher->set_asn1_parameters;
 }
 
-int (*EVP_CIPHER_meth_get_get_asn1_params(const EVP_CIPHER *cipher))(EVP_CIPHER_CTX *,
+int (__cdecl *EVP_CIPHER_meth_get_get_asn1_params(const EVP_CIPHER *cipher))(EVP_CIPHER_CTX *,
                                                                ASN1_TYPE *)
 {
     return cipher->get_asn1_parameters;
 }
 
-int (*EVP_CIPHER_meth_get_ctrl(const EVP_CIPHER *cipher))(EVP_CIPHER_CTX *,
+int (__cdecl *EVP_CIPHER_meth_get_ctrl(const EVP_CIPHER *cipher))(EVP_CIPHER_CTX *,
                                                           int type, int arg,
                                                           void *ptr)
 {
diff --git a/crypto/evp/digest.c b/crypto/evp/digest.c
index 6693f270b6..e13a6b99af 100644
--- a/crypto/evp/digest.c
+++ b/crypto/evp/digest.c
@@ -16,7 +16,7 @@
 #include "evp_locl.h"
 
 /* This call frees resources associated with the context */
-int EVP_MD_CTX_reset(EVP_MD_CTX *ctx)
+int __cdecl EVP_MD_CTX_reset(EVP_MD_CTX *ctx)
 {
     if (ctx == NULL)
         return 1;
@@ -46,24 +46,24 @@ int EVP_MD_CTX_reset(EVP_MD_CTX *ctx)
     return 1;
 }
 
-EVP_MD_CTX *EVP_MD_CTX_new(void)
+EVP_MD_CTX * __cdecl EVP_MD_CTX_new(void)
 {
     return OPENSSL_zalloc(sizeof(EVP_MD_CTX));
 }
 
-void EVP_MD_CTX_free(EVP_MD_CTX *ctx)
+void __cdecl EVP_MD_CTX_free(EVP_MD_CTX *ctx)
 {
     EVP_MD_CTX_reset(ctx);
     OPENSSL_free(ctx);
 }
 
-int EVP_DigestInit(EVP_MD_CTX *ctx, const EVP_MD *type)
+int __cdecl EVP_DigestInit(EVP_MD_CTX *ctx, const EVP_MD *type)
 {
     EVP_MD_CTX_reset(ctx);
     return EVP_DigestInit_ex(ctx, type, NULL);
 }
 
-int EVP_DigestInit_ex(EVP_MD_CTX *ctx, const EVP_MD *type, ENGINE *impl)
+int __cdecl EVP_DigestInit_ex(EVP_MD_CTX *ctx, const EVP_MD *type, ENGINE *impl)
 {
     EVP_MD_CTX_clear_flags(ctx, EVP_MD_CTX_FLAG_CLEANED);
 #ifndef OPENSSL_NO_ENGINE
@@ -148,7 +148,7 @@ int EVP_DigestInit_ex(EVP_MD_CTX *ctx, const EVP_MD *type, ENGINE *impl)
     return ctx->digest->init(ctx);
 }
 
-int EVP_DigestUpdate(EVP_MD_CTX *ctx, const void *data, size_t count)
+int __cdecl EVP_DigestUpdate(EVP_MD_CTX *ctx, const void *data, size_t count)
 {
     if (count == 0)
         return 1;
@@ -157,7 +157,7 @@ int EVP_DigestUpdate(EVP_MD_CTX *ctx, const void *data, size_t count)
 }
 
 /* The caller can assume that this removes any secret data from the context */
-int EVP_DigestFinal(EVP_MD_CTX *ctx, unsigned char *md, unsigned int *size)
+int __cdecl EVP_DigestFinal(EVP_MD_CTX *ctx, unsigned char *md, unsigned int *size)
 {
     int ret;
     ret = EVP_DigestFinal_ex(ctx, md, size);
@@ -166,7 +166,7 @@ int EVP_DigestFinal(EVP_MD_CTX *ctx, unsigned char *md, unsigned int *size)
 }
 
 /* The caller can assume that this removes any secret data from the context */
-int EVP_DigestFinal_ex(EVP_MD_CTX *ctx, unsigned char *md, unsigned int *size)
+int __cdecl EVP_DigestFinal_ex(EVP_MD_CTX *ctx, unsigned char *md, unsigned int *size)
 {
     int ret;
 
@@ -182,7 +182,7 @@ int EVP_DigestFinal_ex(EVP_MD_CTX *ctx, unsigned char *md, unsigned int *size)
     return ret;
 }
 
-int EVP_DigestFinalXOF(EVP_MD_CTX *ctx, unsigned char *md, size_t size)
+int __cdecl EVP_DigestFinalXOF(EVP_MD_CTX *ctx, unsigned char *md, size_t size)
 {
     int ret = 0;
 
@@ -203,13 +203,13 @@ int EVP_DigestFinalXOF(EVP_MD_CTX *ctx, unsigned char *md, size_t size)
     return ret;
 }
 
-int EVP_MD_CTX_copy(EVP_MD_CTX *out, const EVP_MD_CTX *in)
+int __cdecl EVP_MD_CTX_copy(EVP_MD_CTX *out, const EVP_MD_CTX *in)
 {
     EVP_MD_CTX_reset(out);
     return EVP_MD_CTX_copy_ex(out, in);
 }
 
-int EVP_MD_CTX_copy_ex(EVP_MD_CTX *out, const EVP_MD_CTX *in)
+int __cdecl EVP_MD_CTX_copy_ex(EVP_MD_CTX *out, const EVP_MD_CTX *in)
 {
     unsigned char *tmp_buf;
     if ((in == NULL) || (in->digest == NULL)) {
@@ -271,7 +271,7 @@ int EVP_MD_CTX_copy_ex(EVP_MD_CTX *out, const EVP_MD_CTX *in)
     return 1;
 }
 
-int EVP_Digest(const void *data, size_t count,
+int __cdecl EVP_Digest(const void *data, size_t count,
                unsigned char *md, unsigned int *size, const EVP_MD *type,
                ENGINE *impl)
 {
@@ -289,7 +289,7 @@ int EVP_Digest(const void *data, size_t count,
     return ret;
 }
 
-int EVP_MD_CTX_ctrl(EVP_MD_CTX *ctx, int cmd, int p1, void *p2)
+int __cdecl EVP_MD_CTX_ctrl(EVP_MD_CTX *ctx, int cmd, int p1, void *p2)
 {
     if (ctx->digest && ctx->digest->md_ctrl) {
         int ret = ctx->digest->md_ctrl(ctx, cmd, p1, p2);
diff --git a/crypto/evp/e_aes.c b/crypto/evp/e_aes.c
index 1db346fc86..8288d5b6c4 100644
--- a/crypto/evp/e_aes.c
+++ b/crypto/evp/e_aes.c
@@ -264,7 +264,7 @@ void gcm_ghash_avx(u64 Xi[2], const u128 Htable[16], const u8 *in,
 #  undef AES_GCM_ASM2          /* minor size optimization */
 # endif
 
-static int aesni_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
+static int __cdecl aesni_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
                           const unsigned char *iv, int enc)
 {
     int ret, mode;
@@ -342,7 +342,7 @@ static int aesni_cfb1_cipher(EVP_CIPHER_CTX *ctx, unsigned char *out,
 static int aesni_ctr_cipher(EVP_CIPHER_CTX *ctx, unsigned char *out,
                             const unsigned char *in, size_t len);
 
-static int aesni_gcm_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
+static int __cdecl aesni_gcm_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
                               const unsigned char *iv, int enc)
 {
     EVP_AES_GCM_CTX *gctx = EVP_C_DATA(EVP_AES_GCM_CTX,ctx);
@@ -379,7 +379,7 @@ static int aesni_gcm_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
 static int aesni_gcm_cipher(EVP_CIPHER_CTX *ctx, unsigned char *out,
                             const unsigned char *in, size_t len);
 
-static int aesni_xts_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
+static int __cdecl aesni_xts_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
                               const unsigned char *iv, int enc)
 {
     EVP_AES_XTS_CTX *xctx = EVP_C_DATA(EVP_AES_XTS_CTX,ctx);
@@ -435,7 +435,7 @@ static int aesni_xts_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
 static int aesni_xts_cipher(EVP_CIPHER_CTX *ctx, unsigned char *out,
                             const unsigned char *in, size_t len);
 
-static int aesni_ccm_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
+static int __cdecl aesni_ccm_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
                               const unsigned char *iv, int enc)
 {
     EVP_AES_CCM_CTX *cctx = EVP_C_DATA(EVP_AES_CCM_CTX,ctx);
@@ -475,7 +475,7 @@ void aesni_ocb_decrypt(const unsigned char *in, unsigned char *out,
                        const unsigned char L_[][16],
                        unsigned char checksum[16]);
 
-static int aesni_ocb_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
+static int __cdecl aesni_ocb_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
                               const unsigned char *iv, int enc)
 {
     EVP_AES_OCB_CTX *octx = EVP_C_DATA(EVP_AES_OCB_CTX,ctx);
@@ -548,7 +548,7 @@ static const EVP_CIPHER aes_##keylen##_##mode = { \
         NULL,                           \
         sizeof(EVP_AES_KEY),            \
         NULL,NULL,NULL,NULL }; \
-const EVP_CIPHER *EVP_aes_##keylen##_##mode(void) \
+const EVP_CIPHER * __cdecl EVP_aes_##keylen##_##mode(void) \
 { return AESNI_CAPABLE?&aesni_##keylen##_##mode:&aes_##keylen##_##mode; }
 
 # define BLOCK_CIPHER_custom(nid,keylen,blocksize,ivlen,mode,MODE,flags) \
@@ -570,7 +570,7 @@ static const EVP_CIPHER aes_##keylen##_##mode = { \
         aes_##mode##_cleanup,           \
         sizeof(EVP_AES_##MODE##_CTX),   \
         NULL,NULL,aes_##mode##_ctrl,NULL }; \
-const EVP_CIPHER *EVP_aes_##keylen##_##mode(void) \
+const EVP_CIPHER * __cdecl EVP_aes_##keylen##_##mode(void) \
 { return AESNI_CAPABLE?&aesni_##keylen##_##mode:&aes_##keylen##_##mode; }
 
 #elif   defined(AES_ASM) && (defined(__sparc) || defined(__sparc__))
@@ -649,7 +649,7 @@ void aes256_t4_xts_decrypt(const unsigned char *in, unsigned char *out,
                            size_t blocks, const AES_KEY *key1,
                            const AES_KEY *key2, const unsigned char *ivec);
 
-static int aes_t4_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
+static int __cdecl aes_t4_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
                            const unsigned char *iv, int enc)
 {
     int ret, mode, bits;
@@ -748,7 +748,7 @@ static int aes_t4_cfb1_cipher(EVP_CIPHER_CTX *ctx, unsigned char *out,
 static int aes_t4_ctr_cipher(EVP_CIPHER_CTX *ctx, unsigned char *out,
                              const unsigned char *in, size_t len);
 
-static int aes_t4_gcm_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
+static int __cdecl aes_t4_gcm_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
                                const unsigned char *iv, int enc)
 {
     EVP_AES_GCM_CTX *gctx = EVP_C_DATA(EVP_AES_GCM_CTX,ctx);
@@ -798,7 +798,7 @@ static int aes_t4_gcm_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
 static int aes_t4_gcm_cipher(EVP_CIPHER_CTX *ctx, unsigned char *out,
                              const unsigned char *in, size_t len);
 
-static int aes_t4_xts_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
+static int __cdecl aes_t4_xts_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
                                const unsigned char *iv, int enc)
 {
     EVP_AES_XTS_CTX *xctx = EVP_C_DATA(EVP_AES_XTS_CTX,ctx);
@@ -873,7 +873,7 @@ static int aes_t4_xts_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
 static int aes_t4_xts_cipher(EVP_CIPHER_CTX *ctx, unsigned char *out,
                              const unsigned char *in, size_t len);
 
-static int aes_t4_ccm_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
+static int __cdecl aes_t4_ccm_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
                                const unsigned char *iv, int enc)
 {
     EVP_AES_CCM_CTX *cctx = EVP_C_DATA(EVP_AES_CCM_CTX,ctx);
@@ -899,7 +899,7 @@ static int aes_t4_ccm_cipher(EVP_CIPHER_CTX *ctx, unsigned char *out,
                              const unsigned char *in, size_t len);
 
 # ifndef OPENSSL_NO_OCB
-static int aes_t4_ocb_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
+static int __cdecl aes_t4_ocb_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
                                const unsigned char *iv, int enc)
 {
     EVP_AES_OCB_CTX *octx = EVP_C_DATA(EVP_AES_OCB_CTX,ctx);
@@ -971,7 +971,7 @@ static const EVP_CIPHER aes_##keylen##_##mode = { \
         NULL,                           \
         sizeof(EVP_AES_KEY),            \
         NULL,NULL,NULL,NULL }; \
-const EVP_CIPHER *EVP_aes_##keylen##_##mode(void) \
+const EVP_CIPHER * __cdecl EVP_aes_##keylen##_##mode(void) \
 { return SPARC_AES_CAPABLE?&aes_t4_##keylen##_##mode:&aes_##keylen##_##mode; }
 
 # define BLOCK_CIPHER_custom(nid,keylen,blocksize,ivlen,mode,MODE,flags) \
@@ -993,7 +993,7 @@ static const EVP_CIPHER aes_##keylen##_##mode = { \
         aes_##mode##_cleanup,           \
         sizeof(EVP_AES_##MODE##_CTX),   \
         NULL,NULL,aes_##mode##_ctrl,NULL }; \
-const EVP_CIPHER *EVP_aes_##keylen##_##mode(void) \
+const EVP_CIPHER * __cdecl EVP_aes_##keylen##_##mode(void) \
 { return SPARC_AES_CAPABLE?&aes_t4_##keylen##_##mode:&aes_##keylen##_##mode; }
 
 #elif defined(OPENSSL_CPUID_OBJ) && defined(__s390__)
@@ -1165,7 +1165,7 @@ typedef struct {
                                 S390X_CAPBIT(S390X_AES_256))
 
 # define s390x_aes_init_key aes_init_key
-static int s390x_aes_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
+static int __cdecl s390x_aes_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
                               const unsigned char *iv, int enc);
 
 # define S390X_aes_128_cbc_CAPABLE	1	/* checked by callee */
@@ -1183,7 +1183,7 @@ static int s390x_aes_cbc_cipher(EVP_CIPHER_CTX *ctx, unsigned char *out,
 # define S390X_aes_192_ecb_CAPABLE	S390X_aes_192_CAPABLE
 # define S390X_aes_256_ecb_CAPABLE	S390X_aes_256_CAPABLE
 
-static int s390x_aes_ecb_init_key(EVP_CIPHER_CTX *ctx,
+static int __cdecl s390x_aes_ecb_init_key(EVP_CIPHER_CTX *ctx,
                                   const unsigned char *key,
                                   const unsigned char *iv, int enc)
 {
@@ -1217,7 +1217,7 @@ static int s390x_aes_ecb_cipher(EVP_CIPHER_CTX *ctx, unsigned char *out,
                                     (OPENSSL_s390xcap_P.kmo[0] &	\
                                      S390X_CAPBIT(S390X_AES_256)))
 
-static int s390x_aes_ofb_init_key(EVP_CIPHER_CTX *ctx,
+static int __cdecl s390x_aes_ofb_init_key(EVP_CIPHER_CTX *ctx,
                                   const unsigned char *key,
                                   const unsigned char *ivec, int enc)
 {
@@ -1282,7 +1282,7 @@ static int s390x_aes_ofb_cipher(EVP_CIPHER_CTX *ctx, unsigned char *out,
                                     (OPENSSL_s390xcap_P.kmf[0] &	\
                                      S390X_CAPBIT(S390X_AES_256)))
 
-static int s390x_aes_cfb_init_key(EVP_CIPHER_CTX *ctx,
+static int __cdecl s390x_aes_cfb_init_key(EVP_CIPHER_CTX *ctx,
                                   const unsigned char *key,
                                   const unsigned char *ivec, int enc)
 {
@@ -1355,7 +1355,7 @@ static int s390x_aes_cfb_cipher(EVP_CIPHER_CTX *ctx, unsigned char *out,
 # define S390X_aes_256_cfb8_CAPABLE (OPENSSL_s390xcap_P.kmf[0] &	\
                                      S390X_CAPBIT(S390X_AES_256))
 
-static int s390x_aes_cfb8_init_key(EVP_CIPHER_CTX *ctx,
+static int __cdecl s390x_aes_cfb8_init_key(EVP_CIPHER_CTX *ctx,
                                    const unsigned char *key,
                                    const unsigned char *ivec, int enc)
 {
@@ -1598,7 +1598,7 @@ static void s390x_aes_gcm_setiv(S390X_AES_GCM_CTX *ctx,
  * type. Returns 1 for success, 0 for failure and -1 for unknown control type.
  * Code is big-endian.
  */
-static int s390x_aes_gcm_ctrl(EVP_CIPHER_CTX *c, int type, int arg, void *ptr)
+static int __cdecl s390x_aes_gcm_ctrl(EVP_CIPHER_CTX *c, int type, int arg, void *ptr)
 {
     S390X_AES_GCM_CTX *gctx = EVP_C_DATA(S390X_AES_GCM_CTX, c);
     S390X_AES_GCM_CTX *gctx_out;
@@ -1772,7 +1772,7 @@ static int s390x_aes_gcm_ctrl(EVP_CIPHER_CTX *c, int type, int arg, void *ptr)
 /*-
  * Set key and/or iv. Returns 1 on success. Otherwise 0 is returned.
  */
-static int s390x_aes_gcm_init_key(EVP_CIPHER_CTX *ctx,
+static int __cdecl s390x_aes_gcm_init_key(EVP_CIPHER_CTX *ctx,
                                   const unsigned char *key,
                                   const unsigned char *iv, int enc)
 {
@@ -1912,7 +1912,7 @@ static int s390x_aes_gcm_cipher(EVP_CIPHER_CTX *ctx, unsigned char *out,
     }
 }
 
-static int s390x_aes_gcm_cleanup(EVP_CIPHER_CTX *c)
+static int __cdecl s390x_aes_gcm_cleanup(EVP_CIPHER_CTX *c)
 {
     S390X_AES_GCM_CTX *gctx = EVP_C_DATA(S390X_AES_GCM_CTX, c);
     const unsigned char *iv;
@@ -1933,14 +1933,14 @@ static int s390x_aes_gcm_cleanup(EVP_CIPHER_CTX *c)
 # define S390X_aes_256_xts_CAPABLE	1
 
 # define s390x_aes_xts_init_key aes_xts_init_key
-static int s390x_aes_xts_init_key(EVP_CIPHER_CTX *ctx,
+static int __cdecl s390x_aes_xts_init_key(EVP_CIPHER_CTX *ctx,
                                   const unsigned char *key,
                                   const unsigned char *iv, int enc);
 # define s390x_aes_xts_cipher aes_xts_cipher
 static int s390x_aes_xts_cipher(EVP_CIPHER_CTX *ctx, unsigned char *out,
                                 const unsigned char *in, size_t len);
 # define s390x_aes_xts_ctrl aes_xts_ctrl
-static int s390x_aes_xts_ctrl(EVP_CIPHER_CTX *, int type, int arg, void *ptr);
+static int __cdecl s390x_aes_xts_ctrl(EVP_CIPHER_CTX *, int type, int arg, void *ptr);
 # define s390x_aes_xts_cleanup aes_xts_cleanup
 
 # define S390X_aes_128_ccm_CAPABLE (S390X_aes_128_CAPABLE &&		\
@@ -2183,7 +2183,7 @@ static int s390x_aes_ccm_tls_cipher(EVP_CIPHER_CTX *ctx, unsigned char *out,
  * Set key and flag field and/or iv. Returns 1 if successful. Otherwise 0 is
  * returned.
  */
-static int s390x_aes_ccm_init_key(EVP_CIPHER_CTX *ctx,
+static int __cdecl s390x_aes_ccm_init_key(EVP_CIPHER_CTX *ctx,
                                   const unsigned char *key,
                                   const unsigned char *iv, int enc)
 {
@@ -2316,7 +2316,7 @@ static int s390x_aes_ccm_cipher(EVP_CIPHER_CTX *ctx, unsigned char *out,
  * type. Returns 1 for success, 0 for failure and -1 for unknown control type.
  * Code is big-endian.
  */
-static int s390x_aes_ccm_ctrl(EVP_CIPHER_CTX *c, int type, int arg, void *ptr)
+static int __cdecl s390x_aes_ccm_ctrl(EVP_CIPHER_CTX *c, int type, int arg, void *ptr)
 {
     S390X_AES_CCM_CTX *cctx = EVP_C_DATA(S390X_AES_CCM_CTX, c);
     unsigned char *buf, *iv;
@@ -2436,15 +2436,15 @@ static int s390x_aes_ccm_ctrl(EVP_CIPHER_CTX *c, int type, int arg, void *ptr)
 #  define S390X_aes_256_ocb_CAPABLE	0
 
 #  define s390x_aes_ocb_init_key aes_ocb_init_key
-static int s390x_aes_ocb_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
+static int __cdecl s390x_aes_ocb_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
                                   const unsigned char *iv, int enc);
 #  define s390x_aes_ocb_cipher aes_ocb_cipher
 static int s390x_aes_ocb_cipher(EVP_CIPHER_CTX *ctx, unsigned char *out,
                                 const unsigned char *in, size_t len);
 #  define s390x_aes_ocb_cleanup aes_ocb_cleanup
-static int s390x_aes_ocb_cleanup(EVP_CIPHER_CTX *);
+static int __cdecl s390x_aes_ocb_cleanup(EVP_CIPHER_CTX *);
 #  define s390x_aes_ocb_ctrl aes_ocb_ctrl
-static int s390x_aes_ocb_ctrl(EVP_CIPHER_CTX *, int type, int arg, void *ptr);
+static int __cdecl s390x_aes_ocb_ctrl(EVP_CIPHER_CTX *, int type, int arg, void *ptr);
 # endif
 
 # define BLOCK_CIPHER_generic(nid,keylen,blocksize,ivlen,nmode,mode,	\
@@ -2478,7 +2478,7 @@ static const EVP_CIPHER aes_##keylen##_##mode = {			\
     NULL,								\
     NULL								\
 };									\
-const EVP_CIPHER *EVP_aes_##keylen##_##mode(void)			\
+const EVP_CIPHER * __cdecl EVP_aes_##keylen##_##mode(void)			\
 {									\
     return S390X_aes_##keylen##_##mode##_CAPABLE ?			\
            &s390x_aes_##keylen##_##mode : &aes_##keylen##_##mode;	\
@@ -2514,7 +2514,7 @@ static const EVP_CIPHER aes_##keylen##_##mode = {			\
     aes_##mode##_ctrl,							\
     NULL								\
 };									\
-const EVP_CIPHER *EVP_aes_##keylen##_##mode(void)			\
+const EVP_CIPHER * __cdecl EVP_aes_##keylen##_##mode(void)			\
 {									\
     return S390X_aes_##keylen##_##mode##_CAPABLE ?			\
            &s390x_aes_##keylen##_##mode : &aes_##keylen##_##mode;	\
@@ -2531,7 +2531,7 @@ static const EVP_CIPHER aes_##keylen##_##mode = { \
         NULL,                           \
         sizeof(EVP_AES_KEY),            \
         NULL,NULL,NULL,NULL }; \
-const EVP_CIPHER *EVP_aes_##keylen##_##mode(void) \
+const EVP_CIPHER * __cdecl EVP_aes_##keylen##_##mode(void) \
 { return &aes_##keylen##_##mode; }
 
 # define BLOCK_CIPHER_custom(nid,keylen,blocksize,ivlen,mode,MODE,flags) \
@@ -2544,7 +2544,7 @@ static const EVP_CIPHER aes_##keylen##_##mode = { \
         aes_##mode##_cleanup,           \
         sizeof(EVP_AES_##MODE##_CTX),   \
         NULL,NULL,aes_##mode##_ctrl,NULL }; \
-const EVP_CIPHER *EVP_aes_##keylen##_##mode(void) \
+const EVP_CIPHER * __cdecl EVP_aes_##keylen##_##mode(void) \
 { return &aes_##keylen##_##mode; }
 
 #endif
@@ -2600,7 +2600,7 @@ void HWAES_xts_decrypt(const unsigned char *inp, unsigned char *out,
         BLOCK_CIPHER_generic(nid,keylen,1,16,cfb8,cfb8,CFB,flags)       \
         BLOCK_CIPHER_generic(nid,keylen,1,16,ctr,ctr,CTR,flags)
 
-static int aes_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
+static int __cdecl aes_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
                         const unsigned char *iv, int enc)
 {
     int ret, mode;
@@ -2837,7 +2837,7 @@ BLOCK_CIPHER_generic_pack(NID_aes, 128, 0)
     BLOCK_CIPHER_generic_pack(NID_aes, 192, 0)
     BLOCK_CIPHER_generic_pack(NID_aes, 256, 0)
 
-static int aes_gcm_cleanup(EVP_CIPHER_CTX *c)
+static int __cdecl aes_gcm_cleanup(EVP_CIPHER_CTX *c)
 {
     EVP_AES_GCM_CTX *gctx = EVP_C_DATA(EVP_AES_GCM_CTX,c);
     if (gctx == NULL)
@@ -2848,7 +2848,7 @@ static int aes_gcm_cleanup(EVP_CIPHER_CTX *c)
     return 1;
 }
 
-static int aes_gcm_ctrl(EVP_CIPHER_CTX *c, int type, int arg, void *ptr)
+static int __cdecl aes_gcm_ctrl(EVP_CIPHER_CTX *c, int type, int arg, void *ptr)
 {
     EVP_AES_GCM_CTX *gctx = EVP_C_DATA(EVP_AES_GCM_CTX,c);
     switch (type) {
@@ -2989,7 +2989,7 @@ static int aes_gcm_ctrl(EVP_CIPHER_CTX *c, int type, int arg, void *ptr)
     }
 }
 
-static int aes_gcm_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
+static int __cdecl aes_gcm_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
                             const unsigned char *iv, int enc)
 {
     EVP_AES_GCM_CTX *gctx = EVP_C_DATA(EVP_AES_GCM_CTX,ctx);
@@ -3324,7 +3324,7 @@ BLOCK_CIPHER_custom(NID_aes, 128, 1, 12, gcm, GCM,
     BLOCK_CIPHER_custom(NID_aes, 256, 1, 12, gcm, GCM,
                     EVP_CIPH_FLAG_AEAD_CIPHER | CUSTOM_FLAGS)
 
-static int aes_xts_ctrl(EVP_CIPHER_CTX *c, int type, int arg, void *ptr)
+static int __cdecl aes_xts_ctrl(EVP_CIPHER_CTX *c, int type, int arg, void *ptr)
 {
     EVP_AES_XTS_CTX *xctx = EVP_C_DATA(EVP_AES_XTS_CTX, c);
 
@@ -3351,7 +3351,7 @@ static int aes_xts_ctrl(EVP_CIPHER_CTX *c, int type, int arg, void *ptr)
     return 1;
 }
 
-static int aes_xts_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
+static int __cdecl aes_xts_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
                             const unsigned char *iv, int enc)
 {
     EVP_AES_XTS_CTX *xctx = EVP_C_DATA(EVP_AES_XTS_CTX,ctx);
@@ -3504,7 +3504,7 @@ static int aes_xts_cipher(EVP_CIPHER_CTX *ctx, unsigned char *out,
 BLOCK_CIPHER_custom(NID_aes, 128, 1, 16, xts, XTS, XTS_FLAGS)
     BLOCK_CIPHER_custom(NID_aes, 256, 1, 16, xts, XTS, XTS_FLAGS)
 
-static int aes_ccm_ctrl(EVP_CIPHER_CTX *c, int type, int arg, void *ptr)
+static int __cdecl aes_ccm_ctrl(EVP_CIPHER_CTX *c, int type, int arg, void *ptr)
 {
     EVP_AES_CCM_CTX *cctx = EVP_C_DATA(EVP_AES_CCM_CTX,c);
     switch (type) {
@@ -3603,7 +3603,7 @@ static int aes_ccm_ctrl(EVP_CIPHER_CTX *c, int type, int arg, void *ptr)
     }
 }
 
-static int aes_ccm_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
+static int __cdecl aes_ccm_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
                             const unsigned char *iv, int enc)
 {
     EVP_AES_CCM_CTX *cctx = EVP_C_DATA(EVP_AES_CCM_CTX,ctx);
@@ -3787,7 +3787,7 @@ typedef struct {
     unsigned char *iv;
 } EVP_AES_WRAP_CTX;
 
-static int aes_wrap_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
+static int __cdecl aes_wrap_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
                              const unsigned char *iv, int enc)
 {
     EVP_AES_WRAP_CTX *wctx = EVP_C_DATA(EVP_AES_WRAP_CTX,ctx);
@@ -3882,7 +3882,7 @@ static const EVP_CIPHER aes_128_wrap = {
     NULL, NULL, NULL, NULL
 };
 
-const EVP_CIPHER *EVP_aes_128_wrap(void)
+const EVP_CIPHER * __cdecl EVP_aes_128_wrap(void)
 {
     return &aes_128_wrap;
 }
@@ -3896,7 +3896,7 @@ static const EVP_CIPHER aes_192_wrap = {
     NULL, NULL, NULL, NULL
 };
 
-const EVP_CIPHER *EVP_aes_192_wrap(void)
+const EVP_CIPHER * __cdecl EVP_aes_192_wrap(void)
 {
     return &aes_192_wrap;
 }
@@ -3910,7 +3910,7 @@ static const EVP_CIPHER aes_256_wrap = {
     NULL, NULL, NULL, NULL
 };
 
-const EVP_CIPHER *EVP_aes_256_wrap(void)
+const EVP_CIPHER * __cdecl EVP_aes_256_wrap(void)
 {
     return &aes_256_wrap;
 }
@@ -3924,7 +3924,7 @@ static const EVP_CIPHER aes_128_wrap_pad = {
     NULL, NULL, NULL, NULL
 };
 
-const EVP_CIPHER *EVP_aes_128_wrap_pad(void)
+const EVP_CIPHER * __cdecl EVP_aes_128_wrap_pad(void)
 {
     return &aes_128_wrap_pad;
 }
@@ -3938,7 +3938,7 @@ static const EVP_CIPHER aes_192_wrap_pad = {
     NULL, NULL, NULL, NULL
 };
 
-const EVP_CIPHER *EVP_aes_192_wrap_pad(void)
+const EVP_CIPHER * __cdecl EVP_aes_192_wrap_pad(void)
 {
     return &aes_192_wrap_pad;
 }
@@ -3952,13 +3952,13 @@ static const EVP_CIPHER aes_256_wrap_pad = {
     NULL, NULL, NULL, NULL
 };
 
-const EVP_CIPHER *EVP_aes_256_wrap_pad(void)
+const EVP_CIPHER * __cdecl EVP_aes_256_wrap_pad(void)
 {
     return &aes_256_wrap_pad;
 }
 
 #ifndef OPENSSL_NO_OCB
-static int aes_ocb_ctrl(EVP_CIPHER_CTX *c, int type, int arg, void *ptr)
+static int __cdecl aes_ocb_ctrl(EVP_CIPHER_CTX *c, int type, int arg, void *ptr)
 {
     EVP_AES_OCB_CTX *octx = EVP_C_DATA(EVP_AES_OCB_CTX,c);
     EVP_CIPHER_CTX *newc;
@@ -4044,7 +4044,7 @@ void HWAES_ocb_decrypt(const unsigned char *in, unsigned char *out,
 #  endif
 # endif
 
-static int aes_ocb_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
+static int __cdecl aes_ocb_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
                             const unsigned char *iv, int enc)
 {
     EVP_AES_OCB_CTX *octx = EVP_C_DATA(EVP_AES_OCB_CTX,ctx);
@@ -4273,7 +4273,7 @@ static int aes_ocb_cipher(EVP_CIPHER_CTX *ctx, unsigned char *out,
     }
 }
 
-static int aes_ocb_cleanup(EVP_CIPHER_CTX *c)
+static int __cdecl aes_ocb_cleanup(EVP_CIPHER_CTX *c)
 {
     EVP_AES_OCB_CTX *octx = EVP_C_DATA(EVP_AES_OCB_CTX,c);
     CRYPTO_ocb128_cleanup(&octx->ocb);
diff --git a/crypto/evp/e_aes_cbc_hmac_sha1.c b/crypto/evp/e_aes_cbc_hmac_sha1.c
index 09d24dc3d0..dd726040e1 100644
--- a/crypto/evp/e_aes_cbc_hmac_sha1.c
+++ b/crypto/evp/e_aes_cbc_hmac_sha1.c
@@ -940,24 +940,24 @@ static EVP_CIPHER aesni_256_cbc_hmac_sha1_cipher = {
     NULL
 };
 
-const EVP_CIPHER *EVP_aes_128_cbc_hmac_sha1(void)
+const EVP_CIPHER * __cdecl EVP_aes_128_cbc_hmac_sha1(void)
 {
     return (OPENSSL_ia32cap_P[1] & AESNI_CAPABLE ?
             &aesni_128_cbc_hmac_sha1_cipher : NULL);
 }
 
-const EVP_CIPHER *EVP_aes_256_cbc_hmac_sha1(void)
+const EVP_CIPHER * __cdecl EVP_aes_256_cbc_hmac_sha1(void)
 {
     return (OPENSSL_ia32cap_P[1] & AESNI_CAPABLE ?
             &aesni_256_cbc_hmac_sha1_cipher : NULL);
 }
 #else
-const EVP_CIPHER *EVP_aes_128_cbc_hmac_sha1(void)
+const EVP_CIPHER * __cdecl EVP_aes_128_cbc_hmac_sha1(void)
 {
     return NULL;
 }
 
-const EVP_CIPHER *EVP_aes_256_cbc_hmac_sha1(void)
+const EVP_CIPHER * __cdecl EVP_aes_256_cbc_hmac_sha1(void)
 {
     return NULL;
 }
diff --git a/crypto/evp/e_aes_cbc_hmac_sha256.c b/crypto/evp/e_aes_cbc_hmac_sha256.c
index caac0c9d3d..9d6c1faa08 100644
--- a/crypto/evp/e_aes_cbc_hmac_sha256.c
+++ b/crypto/evp/e_aes_cbc_hmac_sha256.c
@@ -924,26 +924,26 @@ static EVP_CIPHER aesni_256_cbc_hmac_sha256_cipher = {
     NULL
 };
 
-const EVP_CIPHER *EVP_aes_128_cbc_hmac_sha256(void)
+const EVP_CIPHER * __cdecl EVP_aes_128_cbc_hmac_sha256(void)
 {
     return ((OPENSSL_ia32cap_P[1] & AESNI_CAPABLE) &&
             aesni_cbc_sha256_enc(NULL, NULL, 0, NULL, NULL, NULL, NULL) ?
             &aesni_128_cbc_hmac_sha256_cipher : NULL);
 }
 
-const EVP_CIPHER *EVP_aes_256_cbc_hmac_sha256(void)
+const EVP_CIPHER * __cdecl EVP_aes_256_cbc_hmac_sha256(void)
 {
     return ((OPENSSL_ia32cap_P[1] & AESNI_CAPABLE) &&
             aesni_cbc_sha256_enc(NULL, NULL, 0, NULL, NULL, NULL, NULL) ?
             &aesni_256_cbc_hmac_sha256_cipher : NULL);
 }
 #else
-const EVP_CIPHER *EVP_aes_128_cbc_hmac_sha256(void)
+const EVP_CIPHER * __cdecl EVP_aes_128_cbc_hmac_sha256(void)
 {
     return NULL;
 }
 
-const EVP_CIPHER *EVP_aes_256_cbc_hmac_sha256(void)
+const EVP_CIPHER * __cdecl EVP_aes_256_cbc_hmac_sha256(void)
 {
     return NULL;
 }
diff --git a/crypto/evp/e_aria.c b/crypto/evp/e_aria.c
index fcaceb3bca..cb22e47d2c 100644
--- a/crypto/evp/e_aria.c
+++ b/crypto/evp/e_aria.c
@@ -57,7 +57,7 @@ typedef struct {
 } EVP_ARIA_CCM_CTX;
 
 /* The subkey for ARIA is generated. */
-static int aria_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
+static int __cdecl aria_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
                             const unsigned char *iv, int enc)
 {
     int ret;
@@ -165,7 +165,7 @@ static const EVP_CIPHER aria_##keylen##_##mode = { \
         NULL,                           \
         sizeof(EVP_ARIA_KEY),           \
         NULL,NULL,NULL,NULL };          \
-const EVP_CIPHER *EVP_aria_##keylen##_##mode(void) \
+const EVP_CIPHER * __cdecl EVP_aria_##keylen##_##mode(void) \
 { return &aria_##keylen##_##mode; }
 
 static int aria_ctr_cipher(EVP_CIPHER_CTX *ctx, unsigned char *out,
@@ -204,7 +204,7 @@ static void ctr64_inc(unsigned char *counter)
     } while (n);
 }
 
-static int aria_gcm_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
+static int __cdecl aria_gcm_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
                                  const unsigned char *iv, int enc)
 {
     int ret;
@@ -244,7 +244,7 @@ static int aria_gcm_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
     return 1;
 }
 
-static int aria_gcm_ctrl(EVP_CIPHER_CTX *c, int type, int arg, void *ptr)
+static int __cdecl aria_gcm_ctrl(EVP_CIPHER_CTX *c, int type, int arg, void *ptr)
 {
     EVP_ARIA_GCM_CTX *gctx = EVP_C_DATA(EVP_ARIA_GCM_CTX,c);
 
@@ -490,7 +490,7 @@ static int aria_gcm_cipher(EVP_CIPHER_CTX *ctx, unsigned char *out,
     return 0;
 }
 
-static int aria_gcm_cleanup(EVP_CIPHER_CTX *ctx)
+static int __cdecl aria_gcm_cleanup(EVP_CIPHER_CTX *ctx)
 {
     EVP_ARIA_GCM_CTX *gctx = EVP_C_DATA(EVP_ARIA_GCM_CTX, ctx);
 
@@ -500,7 +500,7 @@ static int aria_gcm_cleanup(EVP_CIPHER_CTX *ctx)
     return 1;
 }
 
-static int aria_ccm_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
+static int __cdecl aria_ccm_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
                             const unsigned char *iv, int enc)
 {
     int ret;
@@ -528,7 +528,7 @@ static int aria_ccm_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
     return 1;
 }
 
-static int aria_ccm_ctrl(EVP_CIPHER_CTX *c, int type, int arg, void *ptr)
+static int __cdecl aria_ccm_ctrl(EVP_CIPHER_CTX *c, int type, int arg, void *ptr)
 {
     EVP_ARIA_CCM_CTX *cctx = EVP_C_DATA(EVP_ARIA_CCM_CTX,c);
 
@@ -763,7 +763,7 @@ static const EVP_CIPHER aria_##keylen##_##mode = { \
         aria_##mode##_cleanup,                     \
         sizeof(EVP_ARIA_##MODE##_CTX),             \
         NULL,NULL,aria_##mode##_ctrl,NULL };       \
-const EVP_CIPHER *EVP_aria_##keylen##_##mode(void) \
+const EVP_CIPHER * __cdecl EVP_aria_##keylen##_##mode(void) \
 { return (EVP_CIPHER*)&aria_##keylen##_##mode; }
 
 BLOCK_CIPHER_aead(NID_aria, 128, 1, 12, gcm, gcm, GCM, 0)
diff --git a/crypto/evp/e_bf.c b/crypto/evp/e_bf.c
index dc386905c5..3f25a66130 100644
--- a/crypto/evp/e_bf.c
+++ b/crypto/evp/e_bf.c
@@ -15,7 +15,7 @@
 # include <openssl/objects.h>
 # include <openssl/blowfish.h>
 
-static int bf_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
+static int __cdecl bf_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
                        const unsigned char *iv, int enc);
 
 typedef struct {
@@ -28,7 +28,7 @@ IMPLEMENT_BLOCK_CIPHER(bf, ks, BF, EVP_BF_KEY, NID_bf, 8, 16, 8, 64,
                        EVP_CIPH_VARIABLE_LENGTH, bf_init_key, NULL,
                        EVP_CIPHER_set_asn1_iv, EVP_CIPHER_get_asn1_iv, NULL)
 
-static int bf_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
+static int __cdecl bf_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
                        const unsigned char *iv, int enc)
 {
     BF_set_key(&data(ctx)->ks, EVP_CIPHER_CTX_key_length(ctx), key);
diff --git a/crypto/evp/e_camellia.c b/crypto/evp/e_camellia.c
index 2df4a6e3e0..55223cf301 100644
--- a/crypto/evp/e_camellia.c
+++ b/crypto/evp/e_camellia.c
@@ -20,7 +20,7 @@ NON_EMPTY_TRANSLATION_UNIT
 # include "internal/evp_int.h"
 # include "modes_lcl.h"
 
-static int camellia_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
+static int __cdecl camellia_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
                              const unsigned char *iv, int enc);
 
 /* Camellia subkey Structure */
@@ -72,7 +72,7 @@ void cmll256_t4_ctr32_encrypt(const unsigned char *in, unsigned char *out,
                               size_t blocks, const CAMELLIA_KEY *key,
                               unsigned char *ivec);
 
-static int cmll_t4_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
+static int __cdecl cmll_t4_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
                             const unsigned char *iv, int enc)
 {
     int ret, mode, bits;
@@ -195,7 +195,7 @@ static const EVP_CIPHER camellia_##keylen##_##mode = { \
         NULL,                           \
         sizeof(EVP_CAMELLIA_KEY),       \
         NULL,NULL,NULL,NULL }; \
-const EVP_CIPHER *EVP_camellia_##keylen##_##mode(void) \
+const EVP_CIPHER * __cdecl EVP_camellia_##keylen##_##mode(void) \
 { return &camellia_##keylen##_##mode; }
 
 # endif
@@ -210,7 +210,7 @@ const EVP_CIPHER *EVP_camellia_##keylen##_##mode(void) \
         BLOCK_CIPHER_generic(nid, keylen, 1, 16, ctr, ctr, CTR, flags)
 
 /* The subkey for Camellia is generated. */
-static int camellia_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
+static int __cdecl camellia_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
                              const unsigned char *iv, int enc)
 {
     int ret, mode;
diff --git a/crypto/evp/e_cast.c b/crypto/evp/e_cast.c
index 259d44059b..91b5e712d8 100644
--- a/crypto/evp/e_cast.c
+++ b/crypto/evp/e_cast.c
@@ -16,7 +16,7 @@
 # include "internal/evp_int.h"
 # include <openssl/cast.h>
 
-static int cast_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
+static int __cdecl cast_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
                          const unsigned char *iv, int enc);
 
 typedef struct {
@@ -30,7 +30,7 @@ IMPLEMENT_BLOCK_CIPHER(cast5, ks, CAST, EVP_CAST_KEY,
                        EVP_CIPH_VARIABLE_LENGTH, cast_init_key, NULL,
                        EVP_CIPHER_set_asn1_iv, EVP_CIPHER_get_asn1_iv, NULL)
 
-static int cast_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
+static int __cdecl cast_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
                          const unsigned char *iv, int enc)
 {
     CAST_set_key(&data(ctx)->ks, EVP_CIPHER_CTX_key_length(ctx), key);
diff --git a/crypto/evp/e_chacha20_poly1305.c b/crypto/evp/e_chacha20_poly1305.c
index 435a38d365..2270883814 100644
--- a/crypto/evp/e_chacha20_poly1305.c
+++ b/crypto/evp/e_chacha20_poly1305.c
@@ -32,7 +32,7 @@ typedef struct {
 
 #define CHACHA20_POLY1305_MAX_IVLEN     12
 
-static int chacha_init_key(EVP_CIPHER_CTX *ctx,
+static int __cdecl chacha_init_key(EVP_CIPHER_CTX *ctx,
                            const unsigned char user_key[CHACHA_KEY_SIZE],
                            const unsigned char iv[CHACHA_CTR_SIZE], int enc)
 {
@@ -140,7 +140,7 @@ static const EVP_CIPHER chacha20 = {
     NULL
 };
 
-const EVP_CIPHER *EVP_chacha20(void)
+const EVP_CIPHER * __cdecl EVP_chacha20(void)
 {
     return &chacha20;
 }
@@ -162,7 +162,7 @@ typedef struct {
 #  define aead_data(ctx)        ((EVP_CHACHA_AEAD_CTX *)(ctx)->cipher_data)
 #  define POLY1305_ctx(actx)    ((POLY1305 *)(actx + 1))
 
-static int chacha20_poly1305_init_key(EVP_CIPHER_CTX *ctx,
+static int __cdecl chacha20_poly1305_init_key(EVP_CIPHER_CTX *ctx,
                                       const unsigned char *inkey,
                                       const unsigned char *iv, int enc)
 {
@@ -489,7 +489,7 @@ static int chacha20_poly1305_cipher(EVP_CIPHER_CTX *ctx, unsigned char *out,
     return len;
 }
 
-static int chacha20_poly1305_cleanup(EVP_CIPHER_CTX *ctx)
+static int __cdecl chacha20_poly1305_cleanup(EVP_CIPHER_CTX *ctx)
 {
     EVP_CHACHA_AEAD_CTX *actx = aead_data(ctx);
     if (actx)
@@ -497,7 +497,7 @@ static int chacha20_poly1305_cleanup(EVP_CIPHER_CTX *ctx)
     return 1;
 }
 
-static int chacha20_poly1305_ctrl(EVP_CIPHER_CTX *ctx, int type, int arg,
+static int __cdecl chacha20_poly1305_ctrl(EVP_CIPHER_CTX *ctx, int type, int arg,
                                   void *ptr)
 {
     EVP_CHACHA_AEAD_CTX *actx = aead_data(ctx);
@@ -629,7 +629,7 @@ static EVP_CIPHER chacha20_poly1305 = {
     NULL        /* app_data */
 };
 
-const EVP_CIPHER *EVP_chacha20_poly1305(void)
+const EVP_CIPHER * __cdecl EVP_chacha20_poly1305(void)
 {
     return(&chacha20_poly1305);
 }
diff --git a/crypto/evp/e_des.c b/crypto/evp/e_des.c
index c13fb3e25a..f80ec158d8 100644
--- a/crypto/evp/e_des.c
+++ b/crypto/evp/e_des.c
@@ -43,9 +43,9 @@ void des_t4_cbc_decrypt(const void *inp, void *out, size_t len,
                         const DES_key_schedule *ks, unsigned char iv[8]);
 # endif
 
-static int des_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
+static int __cdecl des_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
                         const unsigned char *iv, int enc);
-static int des_ctrl(EVP_CIPHER_CTX *c, int type, int arg, void *ptr);
+static int __cdecl des_ctrl(EVP_CIPHER_CTX *c, int type, int arg, void *ptr);
 
 /*
  * Because of various casts and different names can't use
@@ -202,7 +202,7 @@ BLOCK_CIPHER_defs(des, EVP_DES_KEY, NID_des, 8, 8, 8, 64,
                      EVP_CIPH_RAND_KEY, des_init_key, NULL,
                      EVP_CIPHER_set_asn1_iv, EVP_CIPHER_get_asn1_iv, des_ctrl)
 
-static int des_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
+static int __cdecl des_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
                         const unsigned char *iv, int enc)
 {
     DES_cblock *deskey = (DES_cblock *)key;
@@ -224,7 +224,7 @@ static int des_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
     return 1;
 }
 
-static int des_ctrl(EVP_CIPHER_CTX *c, int type, int arg, void *ptr)
+static int __cdecl des_ctrl(EVP_CIPHER_CTX *c, int type, int arg, void *ptr)
 {
 
     switch (type) {
diff --git a/crypto/evp/e_des3.c b/crypto/evp/e_des3.c
index 6b492ce470..f28d373df5 100644
--- a/crypto/evp/e_des3.c
+++ b/crypto/evp/e_des3.c
@@ -47,13 +47,13 @@ void des_t4_ede3_cbc_decrypt(const void *inp, void *out, size_t len,
                              const DES_key_schedule ks[3], unsigned char iv[8]);
 # endif
 
-static int des_ede_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
+static int __cdecl des_ede_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
                             const unsigned char *iv, int enc);
 
-static int des_ede3_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
+static int __cdecl des_ede3_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
                              const unsigned char *iv, int enc);
 
-static int des3_ctrl(EVP_CIPHER_CTX *c, int type, int arg, void *ptr);
+static int __cdecl des3_ctrl(EVP_CIPHER_CTX *c, int type, int arg, void *ptr);
 
 # define data(ctx) EVP_C_DATA(DES_EDE_KEY,ctx)
 
@@ -222,7 +222,7 @@ BLOCK_CIPHER_defs(des_ede, DES_EDE_KEY, NID_des_ede, 8, 16, 8, 64,
                      EVP_CIPH_RAND_KEY | EVP_CIPH_FLAG_DEFAULT_ASN1,
                      des_ede3_init_key, NULL, NULL, NULL, des3_ctrl)
 
-static int des_ede_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
+static int __cdecl des_ede_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
                             const unsigned char *iv, int enc)
 {
     DES_cblock *deskey = (DES_cblock *)key;
@@ -249,7 +249,7 @@ static int des_ede_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
     return 1;
 }
 
-static int des_ede3_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
+static int __cdecl des_ede3_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
                              const unsigned char *iv, int enc)
 {
     DES_cblock *deskey = (DES_cblock *)key;
@@ -276,7 +276,7 @@ static int des_ede3_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
     return 1;
 }
 
-static int des3_ctrl(EVP_CIPHER_CTX *ctx, int type, int arg, void *ptr)
+static int __cdecl des3_ctrl(EVP_CIPHER_CTX *ctx, int type, int arg, void *ptr)
 {
 
     DES_cblock *deskey = ptr;
@@ -297,12 +297,12 @@ static int des3_ctrl(EVP_CIPHER_CTX *ctx, int type, int arg, void *ptr)
     }
 }
 
-const EVP_CIPHER *EVP_des_ede(void)
+const EVP_CIPHER * __cdecl EVP_des_ede(void)
 {
     return &des_ede_ecb;
 }
 
-const EVP_CIPHER *EVP_des_ede3(void)
+const EVP_CIPHER * __cdecl EVP_des_ede3(void)
 {
     return &des_ede3_ecb;
 }
@@ -313,7 +313,7 @@ const EVP_CIPHER *EVP_des_ede3(void)
 static const unsigned char wrap_iv[8] =
     { 0x4a, 0xdd, 0xa2, 0x2c, 0x79, 0xe8, 0x21, 0x05 };
 
-static int des_ede3_unwrap(EVP_CIPHER_CTX *ctx, unsigned char *out,
+static int __cdecl des_ede3_unwrap(EVP_CIPHER_CTX *ctx, unsigned char *out,
                            const unsigned char *in, size_t inl)
 {
     unsigned char icv[8], iv[8], sha1tmp[SHA_DIGEST_LENGTH];
@@ -359,7 +359,7 @@ static int des_ede3_unwrap(EVP_CIPHER_CTX *ctx, unsigned char *out,
     return rv;
 }
 
-static int des_ede3_wrap(EVP_CIPHER_CTX *ctx, unsigned char *out,
+static int __cdecl des_ede3_wrap(EVP_CIPHER_CTX *ctx, unsigned char *out,
                          const unsigned char *in, size_t inl)
 {
     unsigned char sha1tmp[SHA_DIGEST_LENGTH];
@@ -416,7 +416,7 @@ static const EVP_CIPHER des3_wrap = {
     NULL, NULL, NULL, NULL
 };
 
-const EVP_CIPHER *EVP_des_ede3_wrap(void)
+const EVP_CIPHER * __cdecl EVP_des_ede3_wrap(void)
 {
     return &des3_wrap;
 }
diff --git a/crypto/evp/e_idea.c b/crypto/evp/e_idea.c
index 93f6a4131f..b7a7c4f73a 100644
--- a/crypto/evp/e_idea.c
+++ b/crypto/evp/e_idea.c
@@ -22,7 +22,7 @@ typedef struct {
     IDEA_KEY_SCHEDULE ks;
 } EVP_IDEA_KEY;
 
-static int idea_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
+static int __cdecl idea_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
                          const unsigned char *iv, int enc);
 
 /*
@@ -46,7 +46,7 @@ BLOCK_CIPHER_defs(idea, IDEA_KEY_SCHEDULE, NID_idea, 8, 16, 8, 64,
                   0, idea_init_key, NULL,
                   EVP_CIPHER_set_asn1_iv, EVP_CIPHER_get_asn1_iv, NULL)
 
-static int idea_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
+static int __cdecl idea_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
                          const unsigned char *iv, int enc)
 {
     if (!enc) {
diff --git a/crypto/evp/e_null.c b/crypto/evp/e_null.c
index 18a8468216..e6b4d25421 100644
--- a/crypto/evp/e_null.c
+++ b/crypto/evp/e_null.c
@@ -13,7 +13,7 @@
 #include <openssl/objects.h>
 #include "internal/evp_int.h"
 
-static int null_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
+static int __cdecl null_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
                          const unsigned char *iv, int enc);
 static int null_cipher(EVP_CIPHER_CTX *ctx, unsigned char *out,
                        const unsigned char *in, size_t inl);
@@ -30,12 +30,12 @@ static const EVP_CIPHER n_cipher = {
     NULL
 };
 
-const EVP_CIPHER *EVP_enc_null(void)
+const EVP_CIPHER * __cdecl EVP_enc_null(void)
 {
     return &n_cipher;
 }
 
-static int null_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
+static int __cdecl null_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
                          const unsigned char *iv, int enc)
 {
     return 1;
diff --git a/crypto/evp/e_rc2.c b/crypto/evp/e_rc2.c
index aa0d140186..53010a4dd6 100644
--- a/crypto/evp/e_rc2.c
+++ b/crypto/evp/e_rc2.c
@@ -17,13 +17,13 @@
 # include "internal/evp_int.h"
 # include <openssl/rc2.h>
 
-static int rc2_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
+static int __cdecl rc2_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
                         const unsigned char *iv, int enc);
-static int rc2_meth_to_magic(EVP_CIPHER_CTX *ctx);
-static int rc2_magic_to_meth(int i);
-static int rc2_set_asn1_type_and_iv(EVP_CIPHER_CTX *c, ASN1_TYPE *type);
-static int rc2_get_asn1_type_and_iv(EVP_CIPHER_CTX *c, ASN1_TYPE *type);
-static int rc2_ctrl(EVP_CIPHER_CTX *c, int type, int arg, void *ptr);
+static int __cdecl rc2_meth_to_magic(EVP_CIPHER_CTX *ctx);
+static int __cdecl rc2_magic_to_meth(int i);
+static int __cdecl rc2_set_asn1_type_and_iv(EVP_CIPHER_CTX *c, ASN1_TYPE *type);
+static int __cdecl rc2_get_asn1_type_and_iv(EVP_CIPHER_CTX *c, ASN1_TYPE *type);
+static int __cdecl rc2_ctrl(EVP_CIPHER_CTX *c, int type, int arg, void *ptr);
 
 typedef struct {
     int key_bits;               /* effective key bits */
@@ -70,17 +70,17 @@ static const EVP_CIPHER r2_40_cbc_cipher = {
     NULL
 };
 
-const EVP_CIPHER *EVP_rc2_64_cbc(void)
+const EVP_CIPHER * __cdecl EVP_rc2_64_cbc(void)
 {
     return &r2_64_cbc_cipher;
 }
 
-const EVP_CIPHER *EVP_rc2_40_cbc(void)
+const EVP_CIPHER * __cdecl EVP_rc2_40_cbc(void)
 {
     return &r2_40_cbc_cipher;
 }
 
-static int rc2_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
+static int __cdecl rc2_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
                         const unsigned char *iv, int enc)
 {
     RC2_set_key(&data(ctx)->ks, EVP_CIPHER_CTX_key_length(ctx),
@@ -88,7 +88,7 @@ static int rc2_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
     return 1;
 }
 
-static int rc2_meth_to_magic(EVP_CIPHER_CTX *e)
+static int __cdecl rc2_meth_to_magic(EVP_CIPHER_CTX *e)
 {
     int i;
 
@@ -104,7 +104,7 @@ static int rc2_meth_to_magic(EVP_CIPHER_CTX *e)
         return 0;
 }
 
-static int rc2_magic_to_meth(int i)
+static int __cdecl rc2_magic_to_meth(int i)
 {
     if (i == RC2_128_MAGIC)
         return 128;
@@ -118,7 +118,7 @@ static int rc2_magic_to_meth(int i)
     }
 }
 
-static int rc2_get_asn1_type_and_iv(EVP_CIPHER_CTX *c, ASN1_TYPE *type)
+static int __cdecl rc2_get_asn1_type_and_iv(EVP_CIPHER_CTX *c, ASN1_TYPE *type)
 {
     long num = 0;
     int i = 0;
@@ -145,7 +145,7 @@ static int rc2_get_asn1_type_and_iv(EVP_CIPHER_CTX *c, ASN1_TYPE *type)
     return i;
 }
 
-static int rc2_set_asn1_type_and_iv(EVP_CIPHER_CTX *c, ASN1_TYPE *type)
+static int __cdecl rc2_set_asn1_type_and_iv(EVP_CIPHER_CTX *c, ASN1_TYPE *type)
 {
     long num;
     int i = 0, j;
@@ -160,7 +160,7 @@ static int rc2_set_asn1_type_and_iv(EVP_CIPHER_CTX *c, ASN1_TYPE *type)
     return i;
 }
 
-static int rc2_ctrl(EVP_CIPHER_CTX *c, int type, int arg, void *ptr)
+static int __cdecl rc2_ctrl(EVP_CIPHER_CTX *c, int type, int arg, void *ptr)
 {
     switch (type) {
     case EVP_CTRL_INIT:
diff --git a/crypto/evp/e_rc4.c b/crypto/evp/e_rc4.c
index d16abdd0d2..c788aea3fb 100644
--- a/crypto/evp/e_rc4.c
+++ b/crypto/evp/e_rc4.c
@@ -24,7 +24,7 @@ typedef struct {
 
 # define data(ctx) ((EVP_RC4_KEY *)EVP_CIPHER_CTX_get_cipher_data(ctx))
 
-static int rc4_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
+static int __cdecl rc4_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
                         const unsigned char *iv, int enc);
 static int rc4_cipher(EVP_CIPHER_CTX *ctx, unsigned char *out,
                       const unsigned char *in, size_t inl);
@@ -56,17 +56,17 @@ static const EVP_CIPHER r4_40_cipher = {
     NULL
 };
 
-const EVP_CIPHER *EVP_rc4(void)
+const EVP_CIPHER * __cdecl EVP_rc4(void)
 {
     return &r4_cipher;
 }
 
-const EVP_CIPHER *EVP_rc4_40(void)
+const EVP_CIPHER * __cdecl EVP_rc4_40(void)
 {
     return &r4_40_cipher;
 }
 
-static int rc4_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
+static int __cdecl rc4_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
                         const unsigned char *iv, int enc)
 {
     RC4_set_key(&data(ctx)->ks, EVP_CIPHER_CTX_key_length(ctx), key);
diff --git a/crypto/evp/e_rc4_hmac_md5.c b/crypto/evp/e_rc4_hmac_md5.c
index b1e8ccd6dd..dae198cd16 100644
--- a/crypto/evp/e_rc4_hmac_md5.c
+++ b/crypto/evp/e_rc4_hmac_md5.c
@@ -29,12 +29,12 @@ typedef struct {
 
 # define NO_PAYLOAD_LENGTH       ((size_t)-1)
 
-void rc4_md5_enc(RC4_KEY *key, const void *in0, void *out,
+void __cdecl rc4_md5_enc(RC4_KEY *key, const void *in0, void *out,
                  MD5_CTX *ctx, const void *inp, size_t blocks);
 
 # define data(ctx) ((EVP_RC4_HMAC_MD5 *)EVP_CIPHER_CTX_get_cipher_data(ctx))
 
-static int rc4_hmac_md5_init_key(EVP_CIPHER_CTX *ctx,
+static int __cdecl rc4_hmac_md5_init_key(EVP_CIPHER_CTX *ctx,
                                  const unsigned char *inkey,
                                  const unsigned char *iv, int enc)
 {
@@ -173,7 +173,7 @@ static int rc4_hmac_md5_cipher(EVP_CIPHER_CTX *ctx, unsigned char *out,
     return 1;
 }
 
-static int rc4_hmac_md5_ctrl(EVP_CIPHER_CTX *ctx, int type, int arg,
+static int __cdecl rc4_hmac_md5_ctrl(EVP_CIPHER_CTX *ctx, int type, int arg,
                              void *ptr)
 {
     EVP_RC4_HMAC_MD5 *key = data(ctx);
@@ -255,7 +255,7 @@ static EVP_CIPHER r4_hmac_md5_cipher = {
     NULL
 };
 
-const EVP_CIPHER *EVP_rc4_hmac_md5(void)
+const EVP_CIPHER * __cdecl EVP_rc4_hmac_md5(void)
 {
     return &r4_hmac_md5_cipher;
 }
diff --git a/crypto/evp/e_seed.c b/crypto/evp/e_seed.c
index 40aec5fc6a..24a40ded58 100644
--- a/crypto/evp/e_seed.c
+++ b/crypto/evp/e_seed.c
@@ -18,7 +18,7 @@ NON_EMPTY_TRANSLATION_UNIT
 # include <openssl/seed.h>
 # include "internal/evp_int.h"
 
-static int seed_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
+static int __cdecl seed_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
                          const unsigned char *iv, int enc);
 
 typedef struct {
@@ -29,7 +29,7 @@ IMPLEMENT_BLOCK_CIPHER(seed, ks, SEED, EVP_SEED_KEY, NID_seed,
                        16, 16, 16, 128, EVP_CIPH_FLAG_DEFAULT_ASN1,
                        seed_init_key, 0, 0, 0, 0)
 
-static int seed_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
+static int __cdecl seed_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
                          const unsigned char *iv, int enc)
 {
     SEED_set_key(key, &EVP_C_DATA(EVP_SEED_KEY,ctx)->ks);
diff --git a/crypto/evp/e_sm4.c b/crypto/evp/e_sm4.c
index 79deb65636..d34fb029fd 100644
--- a/crypto/evp/e_sm4.c
+++ b/crypto/evp/e_sm4.c
@@ -20,14 +20,14 @@ typedef struct {
     SM4_KEY ks;
 } EVP_SM4_KEY;
 
-static int sm4_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
+static int __cdecl sm4_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
                         const unsigned char *iv, int enc)
 {
     SM4_set_key(key, EVP_CIPHER_CTX_get_cipher_data(ctx));
     return 1;
 }
 
-static void sm4_cbc_encrypt(const unsigned char *in, unsigned char *out,
+static void __cdecl sm4_cbc_encrypt(const unsigned char *in, unsigned char *out,
                             size_t len, const SM4_KEY *key,
                             unsigned char *ivec, const int enc)
 {
@@ -39,7 +39,7 @@ static void sm4_cbc_encrypt(const unsigned char *in, unsigned char *out,
                               (block128_f)SM4_decrypt);
 }
 
-static void sm4_cfb128_encrypt(const unsigned char *in, unsigned char *out,
+static void __cdecl sm4_cfb128_encrypt(const unsigned char *in, unsigned char *out,
                                size_t length, const SM4_KEY *key,
                                unsigned char *ivec, int *num, const int enc)
 {
@@ -47,7 +47,7 @@ static void sm4_cfb128_encrypt(const unsigned char *in, unsigned char *out,
                           (block128_f)SM4_encrypt);
 }
 
-static void sm4_ecb_encrypt(const unsigned char *in, unsigned char *out,
+static void __cdecl sm4_ecb_encrypt(const unsigned char *in, unsigned char *out,
                             const SM4_KEY *key, const int enc)
 {
     if (enc)
@@ -56,7 +56,7 @@ static void sm4_ecb_encrypt(const unsigned char *in, unsigned char *out,
         SM4_decrypt(in, out, key);
 }
 
-static void sm4_ofb128_encrypt(const unsigned char *in, unsigned char *out,
+static void __cdecl sm4_ofb128_encrypt(const unsigned char *in, unsigned char *out,
                                size_t length, const SM4_KEY *key,
                                unsigned char *ivec, int *num)
 {
@@ -92,7 +92,7 @@ static const EVP_CIPHER sm4_ctr_mode = {
     NULL, NULL, NULL, NULL
 };
 
-const EVP_CIPHER *EVP_sm4_ctr(void)
+const EVP_CIPHER * __cdecl EVP_sm4_ctr(void)
 {
     return &sm4_ctr_mode;
 }
diff --git a/crypto/evp/e_xcbc_d.c b/crypto/evp/e_xcbc_d.c
index 57ce813da8..e2730bfc2f 100644
--- a/crypto/evp/e_xcbc_d.c
+++ b/crypto/evp/e_xcbc_d.c
@@ -17,7 +17,7 @@
 # include "internal/evp_int.h"
 # include <openssl/des.h>
 
-static int desx_cbc_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
+static int __cdecl desx_cbc_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
                              const unsigned char *iv, int enc);
 static int desx_cbc_cipher(EVP_CIPHER_CTX *ctx, unsigned char *out,
                            const unsigned char *in, size_t inl);
@@ -44,12 +44,12 @@ static const EVP_CIPHER d_xcbc_cipher = {
     NULL
 };
 
-const EVP_CIPHER *EVP_desx_cbc(void)
+const EVP_CIPHER * __cdecl EVP_desx_cbc(void)
 {
     return &d_xcbc_cipher;
 }
 
-static int desx_cbc_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
+static int __cdecl desx_cbc_init_key(EVP_CIPHER_CTX *ctx, const unsigned char *key,
                              const unsigned char *iv, int enc)
 {
     DES_cblock *deskey = (DES_cblock *)key;
diff --git a/crypto/evp/encode.c b/crypto/evp/encode.c
index da32d4fd19..33c88b5878 100644
--- a/crypto/evp/encode.c
+++ b/crypto/evp/encode.c
@@ -124,24 +124,24 @@ static unsigned char conv_ascii2bin(unsigned char a, const unsigned char *table)
 }
 #endif
 
-EVP_ENCODE_CTX *EVP_ENCODE_CTX_new(void)
+EVP_ENCODE_CTX * __cdecl EVP_ENCODE_CTX_new(void)
 {
     return OPENSSL_zalloc(sizeof(EVP_ENCODE_CTX));
 }
 
-void EVP_ENCODE_CTX_free(EVP_ENCODE_CTX *ctx)
+void __cdecl EVP_ENCODE_CTX_free(EVP_ENCODE_CTX *ctx)
 {
     OPENSSL_free(ctx);
 }
 
-int EVP_ENCODE_CTX_copy(EVP_ENCODE_CTX *dctx, EVP_ENCODE_CTX *sctx)
+int __cdecl EVP_ENCODE_CTX_copy(EVP_ENCODE_CTX *dctx, EVP_ENCODE_CTX *sctx)
 {
     memcpy(dctx, sctx, sizeof(EVP_ENCODE_CTX));
 
     return 1;
 }
 
-int EVP_ENCODE_CTX_num(EVP_ENCODE_CTX *ctx)
+int __cdecl EVP_ENCODE_CTX_num(EVP_ENCODE_CTX *ctx)
 {
     return ctx->num;
 }
@@ -151,7 +151,7 @@ void evp_encode_ctx_set_flags(EVP_ENCODE_CTX *ctx, unsigned int flags)
     ctx->flags = flags;
 }
 
-void EVP_EncodeInit(EVP_ENCODE_CTX *ctx)
+void __cdecl EVP_EncodeInit(EVP_ENCODE_CTX *ctx)
 {
     ctx->length = 48;
     ctx->num = 0;
@@ -159,7 +159,7 @@ void EVP_EncodeInit(EVP_ENCODE_CTX *ctx)
     ctx->flags = 0;
 }
 
-int EVP_EncodeUpdate(EVP_ENCODE_CTX *ctx, unsigned char *out, int *outl,
+int __cdecl EVP_EncodeUpdate(EVP_ENCODE_CTX *ctx, unsigned char *out, int *outl,
                       const unsigned char *in, int inl)
 {
     int i, j;
@@ -214,7 +214,7 @@ int EVP_EncodeUpdate(EVP_ENCODE_CTX *ctx, unsigned char *out, int *outl,
     return 1;
 }
 
-void EVP_EncodeFinal(EVP_ENCODE_CTX *ctx, unsigned char *out, int *outl)
+void __cdecl EVP_EncodeFinal(EVP_ENCODE_CTX *ctx, unsigned char *out, int *outl)
 {
     unsigned int ret = 0;
 
@@ -266,12 +266,12 @@ static int evp_encodeblock_int(EVP_ENCODE_CTX *ctx, unsigned char *t,
     return ret;
 }
 
-int EVP_EncodeBlock(unsigned char *t, const unsigned char *f, int dlen)
+int __cdecl EVP_EncodeBlock(unsigned char *t, const unsigned char *f, int dlen)
 {
     return evp_encodeblock_int(NULL, t, f, dlen);
 }
 
-void EVP_DecodeInit(EVP_ENCODE_CTX *ctx)
+void __cdecl EVP_DecodeInit(EVP_ENCODE_CTX *ctx)
 {
     /* Only ctx->num and ctx->flags are used during decoding. */
     ctx->num = 0;
@@ -300,7 +300,7 @@ void EVP_DecodeInit(EVP_ENCODE_CTX *ctx)
  *   - There is extra trailing padding, or data after padding.
  *   - B64_EOF is detected after an incomplete base64 block.
  */
-int EVP_DecodeUpdate(EVP_ENCODE_CTX *ctx, unsigned char *out, int *outl,
+int __cdecl EVP_DecodeUpdate(EVP_ENCODE_CTX *ctx, unsigned char *out, int *outl,
                      const unsigned char *in, int inl)
 {
     int seof = 0, eof = 0, rv = -1, ret = 0, i, v, tmp, n, decoded_len;
@@ -456,12 +456,12 @@ static int evp_decodeblock_int(EVP_ENCODE_CTX *ctx, unsigned char *t,
     return ret;
 }
 
-int EVP_DecodeBlock(unsigned char *t, const unsigned char *f, int n)
+int __cdecl EVP_DecodeBlock(unsigned char *t, const unsigned char *f, int n)
 {
     return evp_decodeblock_int(NULL, t, f, n);
 }
 
-int EVP_DecodeFinal(EVP_ENCODE_CTX *ctx, unsigned char *out, int *outl)
+int __cdecl EVP_DecodeFinal(EVP_ENCODE_CTX *ctx, unsigned char *out, int *outl)
 {
     int i;
 
diff --git a/crypto/evp/evp_cnf.c b/crypto/evp/evp_cnf.c
index 8df2c06e1f..c0a6f69cbb 100644
--- a/crypto/evp/evp_cnf.c
+++ b/crypto/evp/evp_cnf.c
@@ -50,7 +50,7 @@ static int alg_module_init(CONF_IMODULE *md, const CONF *cnf)
     return 1;
 }
 
-void EVP_add_alg_module(void)
+void __cdecl EVP_add_alg_module(void)
 {
     CONF_module_add("alg_section", alg_module_init, 0);
 }
diff --git a/crypto/evp/evp_enc.c b/crypto/evp/evp_enc.c
index 05dd791b6c..5e63a0d28f 100644
--- a/crypto/evp/evp_enc.c
+++ b/crypto/evp/evp_enc.c
@@ -18,7 +18,7 @@
 #include "internal/evp_int.h"
 #include "evp_locl.h"
 
-int EVP_CIPHER_CTX_reset(EVP_CIPHER_CTX *c)
+int __cdecl EVP_CIPHER_CTX_reset(EVP_CIPHER_CTX *c)
 {
     if (c == NULL)
         return 1;
@@ -37,18 +37,18 @@ int EVP_CIPHER_CTX_reset(EVP_CIPHER_CTX *c)
     return 1;
 }
 
-EVP_CIPHER_CTX *EVP_CIPHER_CTX_new(void)
+EVP_CIPHER_CTX * __cdecl EVP_CIPHER_CTX_new(void)
 {
     return OPENSSL_zalloc(sizeof(EVP_CIPHER_CTX));
 }
 
-void EVP_CIPHER_CTX_free(EVP_CIPHER_CTX *ctx)
+void __cdecl EVP_CIPHER_CTX_free(EVP_CIPHER_CTX *ctx)
 {
     EVP_CIPHER_CTX_reset(ctx);
     OPENSSL_free(ctx);
 }
 
-int EVP_CipherInit(EVP_CIPHER_CTX *ctx, const EVP_CIPHER *cipher,
+int __cdecl EVP_CipherInit(EVP_CIPHER_CTX *ctx, const EVP_CIPHER *cipher,
                    const unsigned char *key, const unsigned char *iv, int enc)
 {
     if (cipher != NULL)
@@ -56,7 +56,7 @@ int EVP_CipherInit(EVP_CIPHER_CTX *ctx, const EVP_CIPHER *cipher,
     return EVP_CipherInit_ex(ctx, cipher, NULL, key, iv, enc);
 }
 
-int EVP_CipherInit_ex(EVP_CIPHER_CTX *ctx, const EVP_CIPHER *cipher,
+int __cdecl EVP_CipherInit_ex(EVP_CIPHER_CTX *ctx, const EVP_CIPHER *cipher,
                       ENGINE *impl, const unsigned char *key,
                       const unsigned char *iv, int enc)
 {
@@ -206,7 +206,7 @@ int EVP_CipherInit_ex(EVP_CIPHER_CTX *ctx, const EVP_CIPHER *cipher,
     return 1;
 }
 
-int EVP_CipherUpdate(EVP_CIPHER_CTX *ctx, unsigned char *out, int *outl,
+int __cdecl EVP_CipherUpdate(EVP_CIPHER_CTX *ctx, unsigned char *out, int *outl,
                      const unsigned char *in, int inl)
 {
     if (ctx->encrypt)
@@ -215,7 +215,7 @@ int EVP_CipherUpdate(EVP_CIPHER_CTX *ctx, unsigned char *out, int *outl,
         return EVP_DecryptUpdate(ctx, out, outl, in, inl);
 }
 
-int EVP_CipherFinal_ex(EVP_CIPHER_CTX *ctx, unsigned char *out, int *outl)
+int __cdecl EVP_CipherFinal_ex(EVP_CIPHER_CTX *ctx, unsigned char *out, int *outl)
 {
     if (ctx->encrypt)
         return EVP_EncryptFinal_ex(ctx, out, outl);
@@ -223,7 +223,7 @@ int EVP_CipherFinal_ex(EVP_CIPHER_CTX *ctx, unsigned char *out, int *outl)
         return EVP_DecryptFinal_ex(ctx, out, outl);
 }
 
-int EVP_CipherFinal(EVP_CIPHER_CTX *ctx, unsigned char *out, int *outl)
+int __cdecl EVP_CipherFinal(EVP_CIPHER_CTX *ctx, unsigned char *out, int *outl)
 {
     if (ctx->encrypt)
         return EVP_EncryptFinal(ctx, out, outl);
@@ -231,26 +231,26 @@ int EVP_CipherFinal(EVP_CIPHER_CTX *ctx, unsigned char *out, int *outl)
         return EVP_DecryptFinal(ctx, out, outl);
 }
 
-int EVP_EncryptInit(EVP_CIPHER_CTX *ctx, const EVP_CIPHER *cipher,
+int __cdecl EVP_EncryptInit(EVP_CIPHER_CTX *ctx, const EVP_CIPHER *cipher,
                     const unsigned char *key, const unsigned char *iv)
 {
     return EVP_CipherInit(ctx, cipher, key, iv, 1);
 }
 
-int EVP_EncryptInit_ex(EVP_CIPHER_CTX *ctx, const EVP_CIPHER *cipher,
+int __cdecl EVP_EncryptInit_ex(EVP_CIPHER_CTX *ctx, const EVP_CIPHER *cipher,
                        ENGINE *impl, const unsigned char *key,
                        const unsigned char *iv)
 {
     return EVP_CipherInit_ex(ctx, cipher, impl, key, iv, 1);
 }
 
-int EVP_DecryptInit(EVP_CIPHER_CTX *ctx, const EVP_CIPHER *cipher,
+int __cdecl EVP_DecryptInit(EVP_CIPHER_CTX *ctx, const EVP_CIPHER *cipher,
                     const unsigned char *key, const unsigned char *iv)
 {
     return EVP_CipherInit(ctx, cipher, key, iv, 0);
 }
 
-int EVP_DecryptInit_ex(EVP_CIPHER_CTX *ctx, const EVP_CIPHER *cipher,
+int __cdecl EVP_DecryptInit_ex(EVP_CIPHER_CTX *ctx, const EVP_CIPHER *cipher,
                        ENGINE *impl, const unsigned char *key,
                        const unsigned char *iv)
 {
@@ -280,7 +280,7 @@ int EVP_DecryptInit_ex(EVP_CIPHER_CTX *ctx, const EVP_CIPHER *cipher,
 # define PTRDIFF_T size_t
 #endif
 
-int is_partially_overlapping(const void *ptr1, const void *ptr2, int len)
+int __cdecl is_partially_overlapping(const void *ptr1, const void *ptr2, int len)
 {
     PTRDIFF_T diff = (PTRDIFF_T)ptr1-(PTRDIFF_T)ptr2;
     /*
@@ -294,7 +294,7 @@ int is_partially_overlapping(const void *ptr1, const void *ptr2, int len)
     return overlapped;
 }
 
-static int evp_EncryptDecryptUpdate(EVP_CIPHER_CTX *ctx,
+static int __cdecl evp_EncryptDecryptUpdate(EVP_CIPHER_CTX *ctx,
                                     unsigned char *out, int *outl,
                                     const unsigned char *in, int inl)
 {
@@ -373,7 +373,7 @@ static int evp_EncryptDecryptUpdate(EVP_CIPHER_CTX *ctx,
 }
 
 
-int EVP_EncryptUpdate(EVP_CIPHER_CTX *ctx, unsigned char *out, int *outl,
+int __cdecl EVP_EncryptUpdate(EVP_CIPHER_CTX *ctx, unsigned char *out, int *outl,
                       const unsigned char *in, int inl)
 {
     /* Prevent accidental use of decryption context when encrypting */
@@ -385,14 +385,14 @@ int EVP_EncryptUpdate(EVP_CIPHER_CTX *ctx, unsigned char *out, int *outl,
     return evp_EncryptDecryptUpdate(ctx, out, outl, in, inl);
 }
 
-int EVP_EncryptFinal(EVP_CIPHER_CTX *ctx, unsigned char *out, int *outl)
+int __cdecl EVP_EncryptFinal(EVP_CIPHER_CTX *ctx, unsigned char *out, int *outl)
 {
     int ret;
     ret = EVP_EncryptFinal_ex(ctx, out, outl);
     return ret;
 }
 
-int EVP_EncryptFinal_ex(EVP_CIPHER_CTX *ctx, unsigned char *out, int *outl)
+int __cdecl EVP_EncryptFinal_ex(EVP_CIPHER_CTX *ctx, unsigned char *out, int *outl)
 {
     int n, ret;
     unsigned int i, b, bl;
@@ -440,7 +440,7 @@ int EVP_EncryptFinal_ex(EVP_CIPHER_CTX *ctx, unsigned char *out, int *outl)
     return ret;
 }
 
-int EVP_DecryptUpdate(EVP_CIPHER_CTX *ctx, unsigned char *out, int *outl,
+int __cdecl EVP_DecryptUpdate(EVP_CIPHER_CTX *ctx, unsigned char *out, int *outl,
                       const unsigned char *in, int inl)
 {
     int fix_len, cmpl = inl;
@@ -515,14 +515,14 @@ int EVP_DecryptUpdate(EVP_CIPHER_CTX *ctx, unsigned char *out, int *outl,
     return 1;
 }
 
-int EVP_DecryptFinal(EVP_CIPHER_CTX *ctx, unsigned char *out, int *outl)
+int __cdecl EVP_DecryptFinal(EVP_CIPHER_CTX *ctx, unsigned char *out, int *outl)
 {
     int ret;
     ret = EVP_DecryptFinal_ex(ctx, out, outl);
     return ret;
 }
 
-int EVP_DecryptFinal_ex(EVP_CIPHER_CTX *ctx, unsigned char *out, int *outl)
+int __cdecl EVP_DecryptFinal_ex(EVP_CIPHER_CTX *ctx, unsigned char *out, int *outl)
 {
     int i, n;
     unsigned int b;
@@ -585,7 +585,7 @@ int EVP_DecryptFinal_ex(EVP_CIPHER_CTX *ctx, unsigned char *out, int *outl)
     return 1;
 }
 
-int EVP_CIPHER_CTX_set_key_length(EVP_CIPHER_CTX *c, int keylen)
+int __cdecl EVP_CIPHER_CTX_set_key_length(EVP_CIPHER_CTX *c, int keylen)
 {
     if (c->cipher->flags & EVP_CIPH_CUSTOM_KEY_LENGTH)
         return EVP_CIPHER_CTX_ctrl(c, EVP_CTRL_SET_KEY_LENGTH, keylen, NULL);
@@ -599,7 +599,7 @@ int EVP_CIPHER_CTX_set_key_length(EVP_CIPHER_CTX *c, int keylen)
     return 0;
 }
 
-int EVP_CIPHER_CTX_set_padding(EVP_CIPHER_CTX *ctx, int pad)
+int __cdecl EVP_CIPHER_CTX_set_padding(EVP_CIPHER_CTX *ctx, int pad)
 {
     if (pad)
         ctx->flags &= ~EVP_CIPH_NO_PADDING;
@@ -608,7 +608,7 @@ int EVP_CIPHER_CTX_set_padding(EVP_CIPHER_CTX *ctx, int pad)
     return 1;
 }
 
-int EVP_CIPHER_CTX_ctrl(EVP_CIPHER_CTX *ctx, int type, int arg, void *ptr)
+int __cdecl EVP_CIPHER_CTX_ctrl(EVP_CIPHER_CTX *ctx, int type, int arg, void *ptr)
 {
     int ret;
 
@@ -631,7 +631,7 @@ int EVP_CIPHER_CTX_ctrl(EVP_CIPHER_CTX *ctx, int type, int arg, void *ptr)
     return ret;
 }
 
-int EVP_CIPHER_CTX_rand_key(EVP_CIPHER_CTX *ctx, unsigned char *key)
+int __cdecl EVP_CIPHER_CTX_rand_key(EVP_CIPHER_CTX *ctx, unsigned char *key)
 {
     if (ctx->cipher->flags & EVP_CIPH_RAND_KEY)
         return EVP_CIPHER_CTX_ctrl(ctx, EVP_CTRL_RAND_KEY, 0, key);
@@ -640,7 +640,7 @@ int EVP_CIPHER_CTX_rand_key(EVP_CIPHER_CTX *ctx, unsigned char *key)
     return 1;
 }
 
-int EVP_CIPHER_CTX_copy(EVP_CIPHER_CTX *out, const EVP_CIPHER_CTX *in)
+int __cdecl EVP_CIPHER_CTX_copy(EVP_CIPHER_CTX *out, const EVP_CIPHER_CTX *in)
 {
     if ((in == NULL) || (in->cipher == NULL)) {
         EVPerr(EVP_F_EVP_CIPHER_CTX_COPY, EVP_R_INPUT_NOT_INITIALIZED);
diff --git a/crypto/evp/evp_err.c b/crypto/evp/evp_err.c
index 84bd3c2dab..6de4bf484f 100644
--- a/crypto/evp/evp_err.c
+++ b/crypto/evp/evp_err.c
@@ -280,7 +280,7 @@ static const ERR_STRING_DATA EVP_str_reasons[] = {
 
 #endif
 
-int ERR_load_EVP_strings(void)
+int __cdecl ERR_load_EVP_strings(void)
 {
 #ifndef OPENSSL_NO_ERR
     if (ERR_func_error_string(EVP_str_functs[0].error) == NULL) {
diff --git a/crypto/evp/evp_key.c b/crypto/evp/evp_key.c
index e5ac107c38..b82216458b 100644
--- a/crypto/evp/evp_key.c
+++ b/crypto/evp/evp_key.c
@@ -17,7 +17,7 @@
 /* should be init to zeros. */
 static char prompt_string[80];
 
-void EVP_set_pw_prompt(const char *prompt)
+void __cdecl EVP_set_pw_prompt(const char *prompt)
 {
     if (prompt == NULL)
         prompt_string[0] = '\0';
@@ -27,7 +27,7 @@ void EVP_set_pw_prompt(const char *prompt)
     }
 }
 
-char *EVP_get_pw_prompt(void)
+char * __cdecl EVP_get_pw_prompt(void)
 {
     if (prompt_string[0] == '\0')
         return NULL;
@@ -40,12 +40,12 @@ char *EVP_get_pw_prompt(void)
  * the DES library -- if someone ever wants to disable DES, this function
  * will fail
  */
-int EVP_read_pw_string(char *buf, int len, const char *prompt, int verify)
+int __cdecl EVP_read_pw_string(char *buf, int len, const char *prompt, int verify)
 {
     return EVP_read_pw_string_min(buf, 0, len, prompt, verify);
 }
 
-int EVP_read_pw_string_min(char *buf, int min, int len, const char *prompt,
+int __cdecl EVP_read_pw_string_min(char *buf, int min, int len, const char *prompt,
                            int verify)
 {
     int ret = -1;
@@ -71,7 +71,7 @@ int EVP_read_pw_string_min(char *buf, int min, int len, const char *prompt,
     return ret;
 }
 
-int EVP_BytesToKey(const EVP_CIPHER *type, const EVP_MD *md,
+int __cdecl EVP_BytesToKey(const EVP_CIPHER *type, const EVP_MD *md,
                    const unsigned char *salt, const unsigned char *data,
                    int datal, int count, unsigned char *key,
                    unsigned char *iv)
diff --git a/crypto/evp/evp_lib.c b/crypto/evp/evp_lib.c
index 4935c2a94a..3963007a63 100644
--- a/crypto/evp/evp_lib.c
+++ b/crypto/evp/evp_lib.c
@@ -14,7 +14,7 @@
 #include "internal/evp_int.h"
 #include "evp_locl.h"
 
-int EVP_CIPHER_param_to_asn1(EVP_CIPHER_CTX *c, ASN1_TYPE *type)
+int __cdecl EVP_CIPHER_param_to_asn1(EVP_CIPHER_CTX *c, ASN1_TYPE *type)
 {
     int ret;
 
@@ -49,7 +49,7 @@ int EVP_CIPHER_param_to_asn1(EVP_CIPHER_CTX *c, ASN1_TYPE *type)
     return ret;
 }
 
-int EVP_CIPHER_asn1_to_param(EVP_CIPHER_CTX *c, ASN1_TYPE *type)
+int __cdecl EVP_CIPHER_asn1_to_param(EVP_CIPHER_CTX *c, ASN1_TYPE *type)
 {
     int ret;
 
@@ -84,7 +84,7 @@ int EVP_CIPHER_asn1_to_param(EVP_CIPHER_CTX *c, ASN1_TYPE *type)
     return ret;
 }
 
-int EVP_CIPHER_get_asn1_iv(EVP_CIPHER_CTX *c, ASN1_TYPE *type)
+int __cdecl EVP_CIPHER_get_asn1_iv(EVP_CIPHER_CTX *c, ASN1_TYPE *type)
 {
     int i = 0;
     unsigned int l;
@@ -101,7 +101,7 @@ int EVP_CIPHER_get_asn1_iv(EVP_CIPHER_CTX *c, ASN1_TYPE *type)
     return i;
 }
 
-int EVP_CIPHER_set_asn1_iv(EVP_CIPHER_CTX *c, ASN1_TYPE *type)
+int __cdecl EVP_CIPHER_set_asn1_iv(EVP_CIPHER_CTX *c, ASN1_TYPE *type)
 {
     int i = 0;
     unsigned int j;
@@ -115,7 +115,7 @@ int EVP_CIPHER_set_asn1_iv(EVP_CIPHER_CTX *c, ASN1_TYPE *type)
 }
 
 /* Convert the various cipher NIDs and dummies to a proper OID NID */
-int EVP_CIPHER_type(const EVP_CIPHER *ctx)
+int __cdecl EVP_CIPHER_type(const EVP_CIPHER *ctx)
 {
     int nid;
     ASN1_OBJECT *otmp;
@@ -174,17 +174,17 @@ int EVP_CIPHER_type(const EVP_CIPHER *ctx)
     }
 }
 
-int EVP_CIPHER_block_size(const EVP_CIPHER *e)
+int __cdecl EVP_CIPHER_block_size(const EVP_CIPHER *e)
 {
     return e->block_size;
 }
 
-int EVP_CIPHER_CTX_block_size(const EVP_CIPHER_CTX *ctx)
+int __cdecl EVP_CIPHER_CTX_block_size(const EVP_CIPHER_CTX *ctx)
 {
     return ctx->cipher->block_size;
 }
 
-int EVP_CIPHER_impl_ctx_size(const EVP_CIPHER *e)
+int __cdecl EVP_CIPHER_impl_ctx_size(const EVP_CIPHER *e)
 {
     return e->ctx_size;
 }
@@ -195,37 +195,37 @@ int EVP_Cipher(EVP_CIPHER_CTX *ctx, unsigned char *out,
     return ctx->cipher->do_cipher(ctx, out, in, inl);
 }
 
-const EVP_CIPHER *EVP_CIPHER_CTX_cipher(const EVP_CIPHER_CTX *ctx)
+const EVP_CIPHER * __cdecl EVP_CIPHER_CTX_cipher(const EVP_CIPHER_CTX *ctx)
 {
     return ctx->cipher;
 }
 
-int EVP_CIPHER_CTX_encrypting(const EVP_CIPHER_CTX *ctx)
+int __cdecl EVP_CIPHER_CTX_encrypting(const EVP_CIPHER_CTX *ctx)
 {
     return ctx->encrypt;
 }
 
-unsigned long EVP_CIPHER_flags(const EVP_CIPHER *cipher)
+unsigned long __cdecl EVP_CIPHER_flags(const EVP_CIPHER *cipher)
 {
     return cipher->flags;
 }
 
-void *EVP_CIPHER_CTX_get_app_data(const EVP_CIPHER_CTX *ctx)
+void * __cdecl EVP_CIPHER_CTX_get_app_data(const EVP_CIPHER_CTX *ctx)
 {
     return ctx->app_data;
 }
 
-void EVP_CIPHER_CTX_set_app_data(EVP_CIPHER_CTX *ctx, void *data)
+void __cdecl EVP_CIPHER_CTX_set_app_data(EVP_CIPHER_CTX *ctx, void *data)
 {
     ctx->app_data = data;
 }
 
-void *EVP_CIPHER_CTX_get_cipher_data(const EVP_CIPHER_CTX *ctx)
+void * __cdecl EVP_CIPHER_CTX_get_cipher_data(const EVP_CIPHER_CTX *ctx)
 {
     return ctx->cipher_data;
 }
 
-void *EVP_CIPHER_CTX_set_cipher_data(EVP_CIPHER_CTX *ctx, void *cipher_data)
+void * __cdecl EVP_CIPHER_CTX_set_cipher_data(EVP_CIPHER_CTX *ctx, void *cipher_data)
 {
     void *old_cipher_data;
 
@@ -235,12 +235,12 @@ void *EVP_CIPHER_CTX_set_cipher_data(EVP_CIPHER_CTX *ctx, void *cipher_data)
     return old_cipher_data;
 }
 
-int EVP_CIPHER_iv_length(const EVP_CIPHER *cipher)
+int __cdecl EVP_CIPHER_iv_length(const EVP_CIPHER *cipher)
 {
     return cipher->iv_len;
 }
 
-int EVP_CIPHER_CTX_iv_length(const EVP_CIPHER_CTX *ctx)
+int __cdecl EVP_CIPHER_CTX_iv_length(const EVP_CIPHER_CTX *ctx)
 {
     int i, rv;
 
@@ -252,72 +252,72 @@ int EVP_CIPHER_CTX_iv_length(const EVP_CIPHER_CTX *ctx)
     return ctx->cipher->iv_len;
 }
 
-const unsigned char *EVP_CIPHER_CTX_original_iv(const EVP_CIPHER_CTX *ctx)
+const unsigned char * __cdecl EVP_CIPHER_CTX_original_iv(const EVP_CIPHER_CTX *ctx)
 {
     return ctx->oiv;
 }
 
-const unsigned char *EVP_CIPHER_CTX_iv(const EVP_CIPHER_CTX *ctx)
+const unsigned char * __cdecl EVP_CIPHER_CTX_iv(const EVP_CIPHER_CTX *ctx)
 {
     return ctx->iv;
 }
 
-unsigned char *EVP_CIPHER_CTX_iv_noconst(EVP_CIPHER_CTX *ctx)
+unsigned char * __cdecl EVP_CIPHER_CTX_iv_noconst(EVP_CIPHER_CTX *ctx)
 {
     return ctx->iv;
 }
 
-unsigned char *EVP_CIPHER_CTX_buf_noconst(EVP_CIPHER_CTX *ctx)
+unsigned char * __cdecl EVP_CIPHER_CTX_buf_noconst(EVP_CIPHER_CTX *ctx)
 {
     return ctx->buf;
 }
 
-int EVP_CIPHER_CTX_num(const EVP_CIPHER_CTX *ctx)
+int __cdecl EVP_CIPHER_CTX_num(const EVP_CIPHER_CTX *ctx)
 {
     return ctx->num;
 }
 
-void EVP_CIPHER_CTX_set_num(EVP_CIPHER_CTX *ctx, int num)
+void __cdecl EVP_CIPHER_CTX_set_num(EVP_CIPHER_CTX *ctx, int num)
 {
     ctx->num = num;
 }
 
-int EVP_CIPHER_key_length(const EVP_CIPHER *cipher)
+int __cdecl EVP_CIPHER_key_length(const EVP_CIPHER *cipher)
 {
     return cipher->key_len;
 }
 
-int EVP_CIPHER_CTX_key_length(const EVP_CIPHER_CTX *ctx)
+int __cdecl EVP_CIPHER_CTX_key_length(const EVP_CIPHER_CTX *ctx)
 {
     return ctx->key_len;
 }
 
-int EVP_CIPHER_nid(const EVP_CIPHER *cipher)
+int __cdecl EVP_CIPHER_nid(const EVP_CIPHER *cipher)
 {
     return cipher->nid;
 }
 
-int EVP_CIPHER_CTX_nid(const EVP_CIPHER_CTX *ctx)
+int __cdecl EVP_CIPHER_CTX_nid(const EVP_CIPHER_CTX *ctx)
 {
     return ctx->cipher->nid;
 }
 
-int EVP_MD_block_size(const EVP_MD *md)
+int __cdecl EVP_MD_block_size(const EVP_MD *md)
 {
     return md->block_size;
 }
 
-int EVP_MD_type(const EVP_MD *md)
+int __cdecl EVP_MD_type(const EVP_MD *md)
 {
     return md->type;
 }
 
-int EVP_MD_pkey_type(const EVP_MD *md)
+int __cdecl EVP_MD_pkey_type(const EVP_MD *md)
 {
     return md->pkey_type;
 }
 
-int EVP_MD_size(const EVP_MD *md)
+int __cdecl EVP_MD_size(const EVP_MD *md)
 {
     if (!md) {
         EVPerr(EVP_F_EVP_MD_SIZE, EVP_R_MESSAGE_DIGEST_IS_NULL);
@@ -326,12 +326,12 @@ int EVP_MD_size(const EVP_MD *md)
     return md->md_size;
 }
 
-unsigned long EVP_MD_flags(const EVP_MD *md)
+unsigned long __cdecl EVP_MD_flags(const EVP_MD *md)
 {
     return md->flags;
 }
 
-EVP_MD *EVP_MD_meth_new(int md_type, int pkey_type)
+EVP_MD * __cdecl EVP_MD_meth_new(int md_type, int pkey_type)
 {
     EVP_MD *md = OPENSSL_zalloc(sizeof(*md));
 
@@ -341,7 +341,7 @@ EVP_MD *EVP_MD_meth_new(int md_type, int pkey_type)
     }
     return md;
 }
-EVP_MD *EVP_MD_meth_dup(const EVP_MD *md)
+EVP_MD * __cdecl EVP_MD_meth_dup(const EVP_MD *md)
 {
     EVP_MD *to = EVP_MD_meth_new(md->type, md->pkey_type);
 
@@ -349,125 +349,125 @@ EVP_MD *EVP_MD_meth_dup(const EVP_MD *md)
         memcpy(to, md, sizeof(*to));
     return to;
 }
-void EVP_MD_meth_free(EVP_MD *md)
+void __cdecl EVP_MD_meth_free(EVP_MD *md)
 {
     OPENSSL_free(md);
 }
-int EVP_MD_meth_set_input_blocksize(EVP_MD *md, int blocksize)
+int __cdecl EVP_MD_meth_set_input_blocksize(EVP_MD *md, int blocksize)
 {
     md->block_size = blocksize;
     return 1;
 }
-int EVP_MD_meth_set_result_size(EVP_MD *md, int resultsize)
+int __cdecl EVP_MD_meth_set_result_size(EVP_MD *md, int resultsize)
 {
     md->md_size = resultsize;
     return 1;
 }
-int EVP_MD_meth_set_app_datasize(EVP_MD *md, int datasize)
+int __cdecl EVP_MD_meth_set_app_datasize(EVP_MD *md, int datasize)
 {
     md->ctx_size = datasize;
     return 1;
 }
-int EVP_MD_meth_set_flags(EVP_MD *md, unsigned long flags)
+int __cdecl EVP_MD_meth_set_flags(EVP_MD *md, unsigned long flags)
 {
     md->flags = flags;
     return 1;
 }
-int EVP_MD_meth_set_init(EVP_MD *md, int (*init)(EVP_MD_CTX *ctx))
+int __cdecl EVP_MD_meth_set_init(EVP_MD *md, int (__cdecl *init)(EVP_MD_CTX *ctx))
 {
     md->init = init;
     return 1;
 }
-int EVP_MD_meth_set_update(EVP_MD *md, int (*update)(EVP_MD_CTX *ctx,
+int __cdecl EVP_MD_meth_set_update(EVP_MD *md, int (__cdecl *update)(EVP_MD_CTX *ctx,
                                                      const void *data,
                                                      size_t count))
 {
     md->update = update;
     return 1;
 }
-int EVP_MD_meth_set_final(EVP_MD *md, int (*final)(EVP_MD_CTX *ctx,
+int __cdecl EVP_MD_meth_set_final(EVP_MD *md, int (__cdecl *final)(EVP_MD_CTX *ctx,
                                                    unsigned char *md))
 {
     md->final = final;
     return 1;
 }
-int EVP_MD_meth_set_copy(EVP_MD *md, int (*copy)(EVP_MD_CTX *to,
+int __cdecl EVP_MD_meth_set_copy(EVP_MD *md, int (__cdecl *copy)(EVP_MD_CTX *to,
                                                  const EVP_MD_CTX *from))
 {
     md->copy = copy;
     return 1;
 }
-int EVP_MD_meth_set_cleanup(EVP_MD *md, int (*cleanup)(EVP_MD_CTX *ctx))
+int __cdecl EVP_MD_meth_set_cleanup(EVP_MD *md, int (__cdecl *cleanup)(EVP_MD_CTX *ctx))
 {
     md->cleanup = cleanup;
     return 1;
 }
-int EVP_MD_meth_set_ctrl(EVP_MD *md, int (*ctrl)(EVP_MD_CTX *ctx, int cmd,
+int __cdecl EVP_MD_meth_set_ctrl(EVP_MD *md, int (__cdecl *ctrl)(EVP_MD_CTX *ctx, int cmd,
                                                  int p1, void *p2))
 {
     md->md_ctrl = ctrl;
     return 1;
 }
 
-int EVP_MD_meth_get_input_blocksize(const EVP_MD *md)
+int __cdecl EVP_MD_meth_get_input_blocksize(const EVP_MD *md)
 {
     return md->block_size;
 }
-int EVP_MD_meth_get_result_size(const EVP_MD *md)
+int __cdecl EVP_MD_meth_get_result_size(const EVP_MD *md)
 {
     return md->md_size;
 }
-int EVP_MD_meth_get_app_datasize(const EVP_MD *md)
+int __cdecl EVP_MD_meth_get_app_datasize(const EVP_MD *md)
 {
     return md->ctx_size;
 }
-unsigned long EVP_MD_meth_get_flags(const EVP_MD *md)
+unsigned long __cdecl EVP_MD_meth_get_flags(const EVP_MD *md)
 {
     return md->flags;
 }
-int (*EVP_MD_meth_get_init(const EVP_MD *md))(EVP_MD_CTX *ctx)
+int (__cdecl * EVP_MD_meth_get_init(const EVP_MD *md))(EVP_MD_CTX *ctx)
 {
     return md->init;
 }
-int (*EVP_MD_meth_get_update(const EVP_MD *md))(EVP_MD_CTX *ctx,
+int (__cdecl * EVP_MD_meth_get_update(const EVP_MD *md))(EVP_MD_CTX *ctx,
                                                 const void *data,
                                                 size_t count)
 {
     return md->update;
 }
-int (*EVP_MD_meth_get_final(const EVP_MD *md))(EVP_MD_CTX *ctx,
+int (__cdecl * EVP_MD_meth_get_final(const EVP_MD *md))(EVP_MD_CTX *ctx,
                                                unsigned char *md)
 {
     return md->final;
 }
-int (*EVP_MD_meth_get_copy(const EVP_MD *md))(EVP_MD_CTX *to,
+int (__cdecl * EVP_MD_meth_get_copy(const EVP_MD *md))(EVP_MD_CTX *to,
                                               const EVP_MD_CTX *from)
 {
     return md->copy;
 }
-int (*EVP_MD_meth_get_cleanup(const EVP_MD *md))(EVP_MD_CTX *ctx)
+int (__cdecl * EVP_MD_meth_get_cleanup(const EVP_MD *md))(EVP_MD_CTX *ctx)
 {
     return md->cleanup;
 }
-int (*EVP_MD_meth_get_ctrl(const EVP_MD *md))(EVP_MD_CTX *ctx, int cmd,
+int (__cdecl * EVP_MD_meth_get_ctrl(const EVP_MD *md))(EVP_MD_CTX *ctx, int cmd,
                                               int p1, void *p2)
 {
     return md->md_ctrl;
 }
 
-const EVP_MD *EVP_MD_CTX_md(const EVP_MD_CTX *ctx)
+const EVP_MD * __cdecl EVP_MD_CTX_md(const EVP_MD_CTX *ctx)
 {
     if (!ctx)
         return NULL;
     return ctx->digest;
 }
 
-EVP_PKEY_CTX *EVP_MD_CTX_pkey_ctx(const EVP_MD_CTX *ctx)
+EVP_PKEY_CTX * __cdecl EVP_MD_CTX_pkey_ctx(const EVP_MD_CTX *ctx)
 {
     return ctx->pctx;
 }
 
-void EVP_MD_CTX_set_pkey_ctx(EVP_MD_CTX *ctx, EVP_PKEY_CTX *pctx)
+void __cdecl EVP_MD_CTX_set_pkey_ctx(EVP_MD_CTX *ctx, EVP_PKEY_CTX *pctx)
 {
     /*
      * it's reasonable to set NULL pctx (a.k.a clear the ctx->pctx), so
@@ -486,50 +486,50 @@ void EVP_MD_CTX_set_pkey_ctx(EVP_MD_CTX *ctx, EVP_PKEY_CTX *pctx)
     }
 }
 
-void *EVP_MD_CTX_md_data(const EVP_MD_CTX *ctx)
+void * __cdecl EVP_MD_CTX_md_data(const EVP_MD_CTX *ctx)
 {
     return ctx->md_data;
 }
 
-int (*EVP_MD_CTX_update_fn(EVP_MD_CTX *ctx))(EVP_MD_CTX *ctx,
+int (__cdecl * EVP_MD_CTX_update_fn(EVP_MD_CTX *ctx))(EVP_MD_CTX *ctx,
                                              const void *data, size_t count)
 {
     return ctx->update;
 }
 
-void EVP_MD_CTX_set_update_fn(EVP_MD_CTX *ctx,
-                              int (*update) (EVP_MD_CTX *ctx,
+void __cdecl EVP_MD_CTX_set_update_fn(EVP_MD_CTX *ctx,
+                              int (__cdecl *update) (EVP_MD_CTX *ctx,
                                              const void *data, size_t count))
 {
     ctx->update = update;
 }
 
-void EVP_MD_CTX_set_flags(EVP_MD_CTX *ctx, int flags)
+void __cdecl EVP_MD_CTX_set_flags(EVP_MD_CTX *ctx, int flags)
 {
     ctx->flags |= flags;
 }
 
-void EVP_MD_CTX_clear_flags(EVP_MD_CTX *ctx, int flags)
+void __cdecl EVP_MD_CTX_clear_flags(EVP_MD_CTX *ctx, int flags)
 {
     ctx->flags &= ~flags;
 }
 
-int EVP_MD_CTX_test_flags(const EVP_MD_CTX *ctx, int flags)
+int __cdecl EVP_MD_CTX_test_flags(const EVP_MD_CTX *ctx, int flags)
 {
     return (ctx->flags & flags);
 }
 
-void EVP_CIPHER_CTX_set_flags(EVP_CIPHER_CTX *ctx, int flags)
+void __cdecl EVP_CIPHER_CTX_set_flags(EVP_CIPHER_CTX *ctx, int flags)
 {
     ctx->flags |= flags;
 }
 
-void EVP_CIPHER_CTX_clear_flags(EVP_CIPHER_CTX *ctx, int flags)
+void __cdecl EVP_CIPHER_CTX_clear_flags(EVP_CIPHER_CTX *ctx, int flags)
 {
     ctx->flags &= ~flags;
 }
 
-int EVP_CIPHER_CTX_test_flags(const EVP_CIPHER_CTX *ctx, int flags)
+int __cdecl EVP_CIPHER_CTX_test_flags(const EVP_CIPHER_CTX *ctx, int flags)
 {
     return (ctx->flags & flags);
 }
diff --git a/crypto/evp/evp_locl.h b/crypto/evp/evp_locl.h
index f1589d6828..19731b7a04 100644
--- a/crypto/evp/evp_locl.h
+++ b/crypto/evp/evp_locl.h
@@ -18,7 +18,7 @@ struct evp_md_ctx_st {
     /* Public key context for sign/verify */
     EVP_PKEY_CTX *pctx;
     /* Update function: usually copied from EVP_MD */
-    int (*update) (EVP_MD_CTX *ctx, const void *data, size_t count);
+    int (__cdecl *update) (EVP_MD_CTX *ctx, const void *data, size_t count);
 } /* EVP_MD_CTX */ ;
 
 struct evp_cipher_ctx_st {
@@ -41,7 +41,7 @@ struct evp_cipher_ctx_st {
     unsigned char final[EVP_MAX_BLOCK_LENGTH]; /* possible final block */
 } /* EVP_CIPHER_CTX */ ;
 
-int PKCS5_v2_PBKDF2_keyivgen(EVP_CIPHER_CTX *ctx, const char *pass,
+int __cdecl PKCS5_v2_PBKDF2_keyivgen(EVP_CIPHER_CTX *ctx, const char *pass,
                              int passlen, ASN1_TYPE *param,
                              const EVP_CIPHER *c, const EVP_MD *md,
                              int en_de);
@@ -65,4 +65,4 @@ struct evp_Encode_Ctx_st {
 typedef struct evp_pbe_st EVP_PBE_CTL;
 DEFINE_STACK_OF(EVP_PBE_CTL)
 
-int is_partially_overlapping(const void *ptr1, const void *ptr2, int len);
+int __cdecl is_partially_overlapping(const void *ptr1, const void *ptr2, int len);
diff --git a/crypto/evp/evp_pbe.c b/crypto/evp/evp_pbe.c
index 5a88817b4a..a2a63dbd3b 100644
--- a/crypto/evp/evp_pbe.c
+++ b/crypto/evp/evp_pbe.c
@@ -81,7 +81,7 @@ static const EVP_PBE_CTL builtin_pbe[] = {
 #endif
 };
 
-int EVP_PBE_CipherInit(ASN1_OBJECT *pbe_obj, const char *pass, int passlen,
+int __cdecl EVP_PBE_CipherInit(ASN1_OBJECT *pbe_obj, const char *pass, int passlen,
                        ASN1_TYPE *param, EVP_CIPHER_CTX *ctx, int en_de)
 {
     const EVP_CIPHER *cipher;
@@ -135,7 +135,7 @@ int EVP_PBE_CipherInit(ASN1_OBJECT *pbe_obj, const char *pass, int passlen,
 
 DECLARE_OBJ_BSEARCH_CMP_FN(EVP_PBE_CTL, EVP_PBE_CTL, pbe2);
 
-static int pbe2_cmp(const EVP_PBE_CTL *pbe1, const EVP_PBE_CTL *pbe2)
+static int __cdecl pbe2_cmp(const EVP_PBE_CTL *pbe1, const EVP_PBE_CTL *pbe2)
 {
     int ret = pbe1->pbe_type - pbe2->pbe_type;
     if (ret)
@@ -146,7 +146,7 @@ static int pbe2_cmp(const EVP_PBE_CTL *pbe1, const EVP_PBE_CTL *pbe2)
 
 IMPLEMENT_OBJ_BSEARCH_CMP_FN(EVP_PBE_CTL, EVP_PBE_CTL, pbe2);
 
-static int pbe_cmp(const EVP_PBE_CTL *const *a, const EVP_PBE_CTL *const *b)
+static int __cdecl pbe_cmp(const EVP_PBE_CTL *const *a, const EVP_PBE_CTL *const *b)
 {
     int ret = (*a)->pbe_type - (*b)->pbe_type;
     if (ret)
@@ -157,7 +157,7 @@ static int pbe_cmp(const EVP_PBE_CTL *const *a, const EVP_PBE_CTL *const *b)
 
 /* Add a PBE algorithm */
 
-int EVP_PBE_alg_add_type(int pbe_type, int pbe_nid, int cipher_nid,
+int __cdecl EVP_PBE_alg_add_type(int pbe_type, int pbe_nid, int cipher_nid,
                          int md_nid, EVP_PBE_KEYGEN *keygen)
 {
     EVP_PBE_CTL *pbe_tmp;
@@ -188,7 +188,7 @@ int EVP_PBE_alg_add_type(int pbe_type, int pbe_nid, int cipher_nid,
     return 0;
 }
 
-int EVP_PBE_alg_add(int nid, const EVP_CIPHER *cipher, const EVP_MD *md,
+int __cdecl EVP_PBE_alg_add(int nid, const EVP_CIPHER *cipher, const EVP_MD *md,
                     EVP_PBE_KEYGEN *keygen)
 {
     int cipher_nid, md_nid;
@@ -206,7 +206,7 @@ int EVP_PBE_alg_add(int nid, const EVP_CIPHER *cipher, const EVP_MD *md,
                                 cipher_nid, md_nid, keygen);
 }
 
-int EVP_PBE_find(int type, int pbe_nid,
+int __cdecl EVP_PBE_find(int type, int pbe_nid,
                  int *pcnid, int *pmnid, EVP_PBE_KEYGEN **pkeygen)
 {
     EVP_PBE_CTL *pbetmp = NULL, pbelu;
@@ -235,18 +235,18 @@ int EVP_PBE_find(int type, int pbe_nid,
     return 1;
 }
 
-static void free_evp_pbe_ctl(EVP_PBE_CTL *pbe)
+static void __cdecl free_evp_pbe_ctl(EVP_PBE_CTL *pbe)
 {
     OPENSSL_free(pbe);
 }
 
-void EVP_PBE_cleanup(void)
+void __cdecl EVP_PBE_cleanup(void)
 {
     sk_EVP_PBE_CTL_pop_free(pbe_algs, free_evp_pbe_ctl);
     pbe_algs = NULL;
 }
 
-int EVP_PBE_get(int *ptype, int *ppbe_nid, size_t num)
+int __cdecl EVP_PBE_get(int *ptype, int *ppbe_nid, size_t num)
 {
     const EVP_PBE_CTL *tpbe;
 
diff --git a/crypto/evp/evp_pkey.c b/crypto/evp/evp_pkey.c
index e61a8761a9..24f6c52828 100644
--- a/crypto/evp/evp_pkey.c
+++ b/crypto/evp/evp_pkey.c
@@ -18,7 +18,7 @@
 
 /* Extract a private key from a PKCS8 structure */
 
-EVP_PKEY *EVP_PKCS82PKEY(const PKCS8_PRIV_KEY_INFO *p8)
+EVP_PKEY * __cdecl EVP_PKCS82PKEY(const PKCS8_PRIV_KEY_INFO *p8)
 {
     EVP_PKEY *pkey = NULL;
     const ASN1_OBJECT *algoid;
@@ -58,7 +58,7 @@ EVP_PKEY *EVP_PKCS82PKEY(const PKCS8_PRIV_KEY_INFO *p8)
 
 /* Turn a private key into a PKCS8 structure */
 
-PKCS8_PRIV_KEY_INFO *EVP_PKEY2PKCS8(EVP_PKEY *pkey)
+PKCS8_PRIV_KEY_INFO * __cdecl EVP_PKEY2PKCS8(EVP_PKEY *pkey)
 {
     PKCS8_PRIV_KEY_INFO *p8 = PKCS8_PRIV_KEY_INFO_new();
     if (p8  == NULL) {
@@ -88,40 +88,40 @@ PKCS8_PRIV_KEY_INFO *EVP_PKEY2PKCS8(EVP_PKEY *pkey)
 
 /* EVP_PKEY attribute functions */
 
-int EVP_PKEY_get_attr_count(const EVP_PKEY *key)
+int __cdecl EVP_PKEY_get_attr_count(const EVP_PKEY *key)
 {
     return X509at_get_attr_count(key->attributes);
 }
 
-int EVP_PKEY_get_attr_by_NID(const EVP_PKEY *key, int nid, int lastpos)
+int __cdecl EVP_PKEY_get_attr_by_NID(const EVP_PKEY *key, int nid, int lastpos)
 {
     return X509at_get_attr_by_NID(key->attributes, nid, lastpos);
 }
 
-int EVP_PKEY_get_attr_by_OBJ(const EVP_PKEY *key, const ASN1_OBJECT *obj,
+int __cdecl EVP_PKEY_get_attr_by_OBJ(const EVP_PKEY *key, const ASN1_OBJECT *obj,
                              int lastpos)
 {
     return X509at_get_attr_by_OBJ(key->attributes, obj, lastpos);
 }
 
-X509_ATTRIBUTE *EVP_PKEY_get_attr(const EVP_PKEY *key, int loc)
+X509_ATTRIBUTE * __cdecl EVP_PKEY_get_attr(const EVP_PKEY *key, int loc)
 {
     return X509at_get_attr(key->attributes, loc);
 }
 
-X509_ATTRIBUTE *EVP_PKEY_delete_attr(EVP_PKEY *key, int loc)
+X509_ATTRIBUTE * __cdecl EVP_PKEY_delete_attr(EVP_PKEY *key, int loc)
 {
     return X509at_delete_attr(key->attributes, loc);
 }
 
-int EVP_PKEY_add1_attr(EVP_PKEY *key, X509_ATTRIBUTE *attr)
+int __cdecl EVP_PKEY_add1_attr(EVP_PKEY *key, X509_ATTRIBUTE *attr)
 {
     if (X509at_add1_attr(&key->attributes, attr))
         return 1;
     return 0;
 }
 
-int EVP_PKEY_add1_attr_by_OBJ(EVP_PKEY *key,
+int __cdecl EVP_PKEY_add1_attr_by_OBJ(EVP_PKEY *key,
                               const ASN1_OBJECT *obj, int type,
                               const unsigned char *bytes, int len)
 {
@@ -130,7 +130,7 @@ int EVP_PKEY_add1_attr_by_OBJ(EVP_PKEY *key,
     return 0;
 }
 
-int EVP_PKEY_add1_attr_by_NID(EVP_PKEY *key,
+int __cdecl EVP_PKEY_add1_attr_by_NID(EVP_PKEY *key,
                               int nid, int type,
                               const unsigned char *bytes, int len)
 {
@@ -139,7 +139,7 @@ int EVP_PKEY_add1_attr_by_NID(EVP_PKEY *key,
     return 0;
 }
 
-int EVP_PKEY_add1_attr_by_txt(EVP_PKEY *key,
+int __cdecl EVP_PKEY_add1_attr_by_txt(EVP_PKEY *key,
                               const char *attrname, int type,
                               const unsigned char *bytes, int len)
 {
diff --git a/crypto/evp/m_md2.c b/crypto/evp/m_md2.c
index c4e28ae17a..7902884ca6 100644
--- a/crypto/evp/m_md2.c
+++ b/crypto/evp/m_md2.c
@@ -20,17 +20,17 @@
 
 #include "internal/evp_int.h"
 
-static int init(EVP_MD_CTX *ctx)
+static int __cdecl init(EVP_MD_CTX *ctx)
 {
     return MD2_Init(EVP_MD_CTX_md_data(ctx));
 }
 
-static int update(EVP_MD_CTX *ctx, const void *data, size_t count)
+static int __cdecl update(EVP_MD_CTX *ctx, const void *data, size_t count)
 {
     return MD2_Update(EVP_MD_CTX_md_data(ctx), data, count);
 }
 
-static int final(EVP_MD_CTX *ctx, unsigned char *md)
+static int __cdecl final(EVP_MD_CTX *ctx, unsigned char *md)
 {
     return MD2_Final(md, EVP_MD_CTX_md_data(ctx));
 }
@@ -49,7 +49,7 @@ static const EVP_MD md2_md = {
     sizeof(EVP_MD *) + sizeof(MD2_CTX),
 };
 
-const EVP_MD *EVP_md2(void)
+const EVP_MD * __cdecl EVP_md2(void)
 {
     return &md2_md;
 }
diff --git a/crypto/evp/m_md4.c b/crypto/evp/m_md4.c
index 0efc586dba..3f6d5ed00c 100644
--- a/crypto/evp/m_md4.c
+++ b/crypto/evp/m_md4.c
@@ -19,17 +19,17 @@
 # include <openssl/rsa.h>
 # include "internal/evp_int.h"
 
-static int init(EVP_MD_CTX *ctx)
+static int __cdecl init(EVP_MD_CTX *ctx)
 {
     return MD4_Init(EVP_MD_CTX_md_data(ctx));
 }
 
-static int update(EVP_MD_CTX *ctx, const void *data, size_t count)
+static int __cdecl update(EVP_MD_CTX *ctx, const void *data, size_t count)
 {
     return MD4_Update(EVP_MD_CTX_md_data(ctx), data, count);
 }
 
-static int final(EVP_MD_CTX *ctx, unsigned char *md)
+static int __cdecl final(EVP_MD_CTX *ctx, unsigned char *md)
 {
     return MD4_Final(md, EVP_MD_CTX_md_data(ctx));
 }
@@ -48,7 +48,7 @@ static const EVP_MD md4_md = {
     sizeof(EVP_MD *) + sizeof(MD4_CTX),
 };
 
-const EVP_MD *EVP_md4(void)
+const EVP_MD * __cdecl EVP_md4(void)
 {
     return &md4_md;
 }
diff --git a/crypto/evp/m_md5.c b/crypto/evp/m_md5.c
index 3d96ae93b6..75d78b1e26 100644
--- a/crypto/evp/m_md5.c
+++ b/crypto/evp/m_md5.c
@@ -19,17 +19,17 @@
 # include <openssl/rsa.h>
 # include "internal/evp_int.h"
 
-static int init(EVP_MD_CTX *ctx)
+static int __cdecl init(EVP_MD_CTX *ctx)
 {
     return MD5_Init(EVP_MD_CTX_md_data(ctx));
 }
 
-static int update(EVP_MD_CTX *ctx, const void *data, size_t count)
+static int __cdecl update(EVP_MD_CTX *ctx, const void *data, size_t count)
 {
     return MD5_Update(EVP_MD_CTX_md_data(ctx), data, count);
 }
 
-static int final(EVP_MD_CTX *ctx, unsigned char *md)
+static int __cdecl final(EVP_MD_CTX *ctx, unsigned char *md)
 {
     return MD5_Final(md, EVP_MD_CTX_md_data(ctx));
 }
@@ -48,7 +48,7 @@ static const EVP_MD md5_md = {
     sizeof(EVP_MD *) + sizeof(MD5_CTX),
 };
 
-const EVP_MD *EVP_md5(void)
+const EVP_MD * __cdecl EVP_md5(void)
 {
     return &md5_md;
 }
diff --git a/crypto/evp/m_md5_sha1.c b/crypto/evp/m_md5_sha1.c
index 2d98886ba0..ac58cad122 100644
--- a/crypto/evp/m_md5_sha1.c
+++ b/crypto/evp/m_md5_sha1.c
@@ -23,7 +23,7 @@ struct md5_sha1_ctx {
     SHA_CTX sha1;
 };
 
-static int init(EVP_MD_CTX *ctx)
+static int __cdecl init(EVP_MD_CTX *ctx)
 {
     struct md5_sha1_ctx *mctx = EVP_MD_CTX_md_data(ctx);
     if (!MD5_Init(&mctx->md5))
@@ -31,7 +31,7 @@ static int init(EVP_MD_CTX *ctx)
     return SHA1_Init(&mctx->sha1);
 }
 
-static int update(EVP_MD_CTX *ctx, const void *data, size_t count)
+static int __cdecl update(EVP_MD_CTX *ctx, const void *data, size_t count)
 {
     struct md5_sha1_ctx *mctx = EVP_MD_CTX_md_data(ctx);
     if (!MD5_Update(&mctx->md5, data, count))
@@ -39,7 +39,7 @@ static int update(EVP_MD_CTX *ctx, const void *data, size_t count)
     return SHA1_Update(&mctx->sha1, data, count);
 }
 
-static int final(EVP_MD_CTX *ctx, unsigned char *md)
+static int __cdecl final(EVP_MD_CTX *ctx, unsigned char *md)
 {
     struct md5_sha1_ctx *mctx = EVP_MD_CTX_md_data(ctx);
     if (!MD5_Final(md, &mctx->md5))
@@ -47,7 +47,7 @@ static int final(EVP_MD_CTX *ctx, unsigned char *md)
     return SHA1_Final(md + MD5_DIGEST_LENGTH, &mctx->sha1);
 }
 
-static int ctrl(EVP_MD_CTX *ctx, int cmd, int mslen, void *ms)
+static int __cdecl ctrl(EVP_MD_CTX *ctx, int cmd, int mslen, void *ms)
 {
     unsigned char padtmp[48];
     unsigned char md5tmp[MD5_DIGEST_LENGTH];
@@ -135,7 +135,7 @@ static const EVP_MD md5_sha1_md = {
     ctrl
 };
 
-const EVP_MD *EVP_md5_sha1(void)
+const EVP_MD * __cdecl EVP_md5_sha1(void)
 {
     return &md5_sha1_md;
 }
diff --git a/crypto/evp/m_mdc2.c b/crypto/evp/m_mdc2.c
index 1051a9070f..5d8c921593 100644
--- a/crypto/evp/m_mdc2.c
+++ b/crypto/evp/m_mdc2.c
@@ -19,17 +19,17 @@
 # include <openssl/rsa.h>
 # include "internal/evp_int.h"
 
-static int init(EVP_MD_CTX *ctx)
+static int __cdecl init(EVP_MD_CTX *ctx)
 {
     return MDC2_Init(EVP_MD_CTX_md_data(ctx));
 }
 
-static int update(EVP_MD_CTX *ctx, const void *data, size_t count)
+static int __cdecl update(EVP_MD_CTX *ctx, const void *data, size_t count)
 {
     return MDC2_Update(EVP_MD_CTX_md_data(ctx), data, count);
 }
 
-static int final(EVP_MD_CTX *ctx, unsigned char *md)
+static int __cdecl final(EVP_MD_CTX *ctx, unsigned char *md)
 {
     return MDC2_Final(md, EVP_MD_CTX_md_data(ctx));
 }
@@ -48,7 +48,7 @@ static const EVP_MD mdc2_md = {
     sizeof(EVP_MD *) + sizeof(MDC2_CTX),
 };
 
-const EVP_MD *EVP_mdc2(void)
+const EVP_MD * __cdecl EVP_mdc2(void)
 {
     return &mdc2_md;
 }
diff --git a/crypto/evp/m_null.c b/crypto/evp/m_null.c
index 5dce1d510e..11d9bd22e8 100644
--- a/crypto/evp/m_null.c
+++ b/crypto/evp/m_null.c
@@ -14,17 +14,17 @@
 #include <openssl/x509.h>
 #include "internal/evp_int.h"
 
-static int init(EVP_MD_CTX *ctx)
+static int __cdecl init(EVP_MD_CTX *ctx)
 {
     return 1;
 }
 
-static int update(EVP_MD_CTX *ctx, const void *data, size_t count)
+static int __cdecl update(EVP_MD_CTX *ctx, const void *data, size_t count)
 {
     return 1;
 }
 
-static int final(EVP_MD_CTX *ctx, unsigned char *md)
+static int __cdecl final(EVP_MD_CTX *ctx, unsigned char *md)
 {
     return 1;
 }
@@ -43,7 +43,7 @@ static const EVP_MD null_md = {
     sizeof(EVP_MD *),
 };
 
-const EVP_MD *EVP_md_null(void)
+const EVP_MD * __cdecl EVP_md_null(void)
 {
     return &null_md;
 }
diff --git a/crypto/evp/m_ripemd.c b/crypto/evp/m_ripemd.c
index 7ab320843c..73299c7ab7 100644
--- a/crypto/evp/m_ripemd.c
+++ b/crypto/evp/m_ripemd.c
@@ -19,17 +19,17 @@
 # include <openssl/rsa.h>
 # include "internal/evp_int.h"
 
-static int init(EVP_MD_CTX *ctx)
+static int __cdecl init(EVP_MD_CTX *ctx)
 {
     return RIPEMD160_Init(EVP_MD_CTX_md_data(ctx));
 }
 
-static int update(EVP_MD_CTX *ctx, const void *data, size_t count)
+static int __cdecl update(EVP_MD_CTX *ctx, const void *data, size_t count)
 {
     return RIPEMD160_Update(EVP_MD_CTX_md_data(ctx), data, count);
 }
 
-static int final(EVP_MD_CTX *ctx, unsigned char *md)
+static int __cdecl final(EVP_MD_CTX *ctx, unsigned char *md)
 {
     return RIPEMD160_Final(md, EVP_MD_CTX_md_data(ctx));
 }
@@ -48,7 +48,7 @@ static const EVP_MD ripemd160_md = {
     sizeof(EVP_MD *) + sizeof(RIPEMD160_CTX),
 };
 
-const EVP_MD *EVP_ripemd160(void)
+const EVP_MD * __cdecl EVP_ripemd160(void)
 {
     return &ripemd160_md;
 }
diff --git a/crypto/evp/m_sha1.c b/crypto/evp/m_sha1.c
index ac52417855..53aa32a5d4 100644
--- a/crypto/evp/m_sha1.c
+++ b/crypto/evp/m_sha1.c
@@ -17,22 +17,22 @@
 #include "internal/evp_int.h"
 #include "internal/sha.h"
 
-static int init(EVP_MD_CTX *ctx)
+static int __cdecl init(EVP_MD_CTX *ctx)
 {
     return SHA1_Init(EVP_MD_CTX_md_data(ctx));
 }
 
-static int update(EVP_MD_CTX *ctx, const void *data, size_t count)
+static int __cdecl update(EVP_MD_CTX *ctx, const void *data, size_t count)
 {
     return SHA1_Update(EVP_MD_CTX_md_data(ctx), data, count);
 }
 
-static int final(EVP_MD_CTX *ctx, unsigned char *md)
+static int __cdecl final(EVP_MD_CTX *ctx, unsigned char *md)
 {
     return SHA1_Final(md, EVP_MD_CTX_md_data(ctx));
 }
 
-static int ctrl(EVP_MD_CTX *ctx, int cmd, int mslen, void *ms)
+static int __cdecl ctrl(EVP_MD_CTX *ctx, int cmd, int mslen, void *ms)
 {
     unsigned char padtmp[40];
     unsigned char sha1tmp[SHA_DIGEST_LENGTH];
@@ -106,37 +106,37 @@ static const EVP_MD sha1_md = {
     ctrl
 };
 
-const EVP_MD *EVP_sha1(void)
+const EVP_MD * __cdecl EVP_sha1(void)
 {
     return &sha1_md;
 }
 
-static int init224(EVP_MD_CTX *ctx)
+static int __cdecl init224(EVP_MD_CTX *ctx)
 {
     return SHA224_Init(EVP_MD_CTX_md_data(ctx));
 }
 
-static int update224(EVP_MD_CTX *ctx, const void *data, size_t count)
+static int __cdecl update224(EVP_MD_CTX *ctx, const void *data, size_t count)
 {
     return SHA224_Update(EVP_MD_CTX_md_data(ctx), data, count);
 }
 
-static int final224(EVP_MD_CTX *ctx, unsigned char *md)
+static int __cdecl final224(EVP_MD_CTX *ctx, unsigned char *md)
 {
     return SHA224_Final(md, EVP_MD_CTX_md_data(ctx));
 }
 
-static int init256(EVP_MD_CTX *ctx)
+static int __cdecl init256(EVP_MD_CTX *ctx)
 {
     return SHA256_Init(EVP_MD_CTX_md_data(ctx));
 }
 
-static int update256(EVP_MD_CTX *ctx, const void *data, size_t count)
+static int __cdecl update256(EVP_MD_CTX *ctx, const void *data, size_t count)
 {
     return SHA256_Update(EVP_MD_CTX_md_data(ctx), data, count);
 }
 
-static int final256(EVP_MD_CTX *ctx, unsigned char *md)
+static int __cdecl final256(EVP_MD_CTX *ctx, unsigned char *md)
 {
     return SHA256_Final(md, EVP_MD_CTX_md_data(ctx));
 }
@@ -155,7 +155,7 @@ static const EVP_MD sha224_md = {
     sizeof(EVP_MD *) + sizeof(SHA256_CTX),
 };
 
-const EVP_MD *EVP_sha224(void)
+const EVP_MD * __cdecl EVP_sha224(void)
 {
     return &sha224_md;
 }
@@ -174,48 +174,48 @@ static const EVP_MD sha256_md = {
     sizeof(EVP_MD *) + sizeof(SHA256_CTX),
 };
 
-const EVP_MD *EVP_sha256(void)
+const EVP_MD * __cdecl EVP_sha256(void)
 {
     return &sha256_md;
 }
 
-static int init512_224(EVP_MD_CTX *ctx)
+static int __cdecl init512_224(EVP_MD_CTX *ctx)
 {
     return sha512_224_init(EVP_MD_CTX_md_data(ctx));
 }
 
-static int init512_256(EVP_MD_CTX *ctx)
+static int __cdecl init512_256(EVP_MD_CTX *ctx)
 {
     return sha512_256_init(EVP_MD_CTX_md_data(ctx));
 }
 
-static int init384(EVP_MD_CTX *ctx)
+static int __cdecl init384(EVP_MD_CTX *ctx)
 {
     return SHA384_Init(EVP_MD_CTX_md_data(ctx));
 }
 
-static int update384(EVP_MD_CTX *ctx, const void *data, size_t count)
+static int __cdecl update384(EVP_MD_CTX *ctx, const void *data, size_t count)
 {
     return SHA384_Update(EVP_MD_CTX_md_data(ctx), data, count);
 }
 
-static int final384(EVP_MD_CTX *ctx, unsigned char *md)
+static int __cdecl final384(EVP_MD_CTX *ctx, unsigned char *md)
 {
     return SHA384_Final(md, EVP_MD_CTX_md_data(ctx));
 }
 
-static int init512(EVP_MD_CTX *ctx)
+static int __cdecl init512(EVP_MD_CTX *ctx)
 {
     return SHA512_Init(EVP_MD_CTX_md_data(ctx));
 }
 
 /* See comment in SHA224/256 section */
-static int update512(EVP_MD_CTX *ctx, const void *data, size_t count)
+static int __cdecl update512(EVP_MD_CTX *ctx, const void *data, size_t count)
 {
     return SHA512_Update(EVP_MD_CTX_md_data(ctx), data, count);
 }
 
-static int final512(EVP_MD_CTX *ctx, unsigned char *md)
+static int __cdecl final512(EVP_MD_CTX *ctx, unsigned char *md)
 {
     return SHA512_Final(md, EVP_MD_CTX_md_data(ctx));
 }
@@ -234,7 +234,7 @@ static const EVP_MD sha512_224_md = {
     sizeof(EVP_MD *) + sizeof(SHA512_CTX),
 };
 
-const EVP_MD *EVP_sha512_224(void)
+const EVP_MD * __cdecl EVP_sha512_224(void)
 {
     return &sha512_224_md;
 }
@@ -253,7 +253,7 @@ static const EVP_MD sha512_256_md = {
     sizeof(EVP_MD *) + sizeof(SHA512_CTX),
 };
 
-const EVP_MD *EVP_sha512_256(void)
+const EVP_MD * __cdecl EVP_sha512_256(void)
 {
     return &sha512_256_md;
 }
@@ -272,7 +272,7 @@ static const EVP_MD sha384_md = {
     sizeof(EVP_MD *) + sizeof(SHA512_CTX),
 };
 
-const EVP_MD *EVP_sha384(void)
+const EVP_MD * __cdecl EVP_sha384(void)
 {
     return &sha384_md;
 }
@@ -291,7 +291,7 @@ static const EVP_MD sha512_md = {
     sizeof(EVP_MD *) + sizeof(SHA512_CTX),
 };
 
-const EVP_MD *EVP_sha512(void)
+const EVP_MD * __cdecl EVP_sha512(void)
 {
     return &sha512_md;
 }
diff --git a/crypto/evp/m_sha3.c b/crypto/evp/m_sha3.c
index 01cf57d313..a6e5f6aa3d 100644
--- a/crypto/evp/m_sha3.c
+++ b/crypto/evp/m_sha3.c
@@ -30,7 +30,7 @@ typedef struct {
     unsigned char pad;
 } KECCAK1600_CTX;
 
-static int init(EVP_MD_CTX *evp_ctx, unsigned char pad)
+static int __cdecl init(EVP_MD_CTX *evp_ctx, unsigned char pad)
 {
     KECCAK1600_CTX *ctx = evp_ctx->md_data;
     size_t bsz = evp_ctx->digest->block_size;
@@ -49,17 +49,17 @@ static int init(EVP_MD_CTX *evp_ctx, unsigned char pad)
     return 0;
 }
 
-static int sha3_init(EVP_MD_CTX *evp_ctx)
+static int __cdecl sha3_init(EVP_MD_CTX *evp_ctx)
 {
     return init(evp_ctx, '\x06');
 }
 
-static int shake_init(EVP_MD_CTX *evp_ctx)
+static int __cdecl shake_init(EVP_MD_CTX *evp_ctx)
 {
     return init(evp_ctx, '\x1f');
 }
 
-static int sha3_update(EVP_MD_CTX *evp_ctx, const void *_inp, size_t len)
+static int __cdecl sha3_update(EVP_MD_CTX *evp_ctx, const void *_inp, size_t len)
 {
     KECCAK1600_CTX *ctx = evp_ctx->md_data;
     const unsigned char *inp = _inp;
@@ -102,7 +102,7 @@ static int sha3_update(EVP_MD_CTX *evp_ctx, const void *_inp, size_t len)
     return 1;
 }
 
-static int sha3_final(EVP_MD_CTX *evp_ctx, unsigned char *md)
+static int __cdecl sha3_final(EVP_MD_CTX *evp_ctx, unsigned char *md)
 {
     KECCAK1600_CTX *ctx = evp_ctx->md_data;
     size_t bsz = ctx->block_size;
@@ -127,7 +127,7 @@ static int sha3_final(EVP_MD_CTX *evp_ctx, unsigned char *md)
     return 1;
 }
 
-static int shake_ctrl(EVP_MD_CTX *evp_ctx, int cmd, int p1, void *p2)
+static int __cdecl shake_ctrl(EVP_MD_CTX *evp_ctx, int cmd, int p1, void *p2)
 {
     KECCAK1600_CTX *ctx = evp_ctx->md_data;
 
@@ -176,7 +176,7 @@ static int shake_ctrl(EVP_MD_CTX *evp_ctx, int cmd, int p1, void *p2)
 /* Convert md-size to block-size. */
 # define S390X_KECCAK1600_BSZ(n) ((KECCAK1600_WIDTH - ((n) << 1)) >> 3)
 
-static int s390x_sha3_init(EVP_MD_CTX *evp_ctx)
+static int __cdecl s390x_sha3_init(EVP_MD_CTX *evp_ctx)
 {
     KECCAK1600_CTX *ctx = evp_ctx->md_data;
     const size_t bsz = evp_ctx->digest->block_size;
@@ -209,7 +209,7 @@ static int s390x_sha3_init(EVP_MD_CTX *evp_ctx)
     return 1;
 }
 
-static int s390x_shake_init(EVP_MD_CTX *evp_ctx)
+static int __cdecl s390x_shake_init(EVP_MD_CTX *evp_ctx)
 {
     KECCAK1600_CTX *ctx = evp_ctx->md_data;
     const size_t bsz = evp_ctx->digest->block_size;
@@ -236,7 +236,7 @@ static int s390x_shake_init(EVP_MD_CTX *evp_ctx)
     return 1;
 }
 
-static int s390x_sha3_update(EVP_MD_CTX *evp_ctx, const void *_inp, size_t len)
+static int __cdecl s390x_sha3_update(EVP_MD_CTX *evp_ctx, const void *_inp, size_t len)
 {
     KECCAK1600_CTX *ctx = evp_ctx->md_data;
     const unsigned char *inp = _inp;
@@ -271,7 +271,7 @@ static int s390x_sha3_update(EVP_MD_CTX *evp_ctx, const void *_inp, size_t len)
     return 1;
 }
 
-static int s390x_sha3_final(EVP_MD_CTX *evp_ctx, unsigned char *md)
+static int __cdecl s390x_sha3_final(EVP_MD_CTX *evp_ctx, unsigned char *md)
 {
     KECCAK1600_CTX *ctx = evp_ctx->md_data;
 
@@ -280,7 +280,7 @@ static int s390x_sha3_final(EVP_MD_CTX *evp_ctx, unsigned char *md)
     return 1;
 }
 
-static int s390x_shake_final(EVP_MD_CTX *evp_ctx, unsigned char *md)
+static int __cdecl s390x_shake_final(EVP_MD_CTX *evp_ctx, unsigned char *md)
 {
     KECCAK1600_CTX *ctx = evp_ctx->md_data;
 
@@ -361,7 +361,7 @@ const EVP_MD *EVP_shake##bitlen(void)                \
 #else
 
 # define EVP_MD_SHA3(bitlen)                    \
-const EVP_MD *EVP_sha3_##bitlen(void)           \
+const EVP_MD * __cdecl EVP_sha3_##bitlen(void)           \
 {                                               \
     static const EVP_MD sha3_##bitlen##_md = {  \
         NID_sha3_##bitlen,                      \
@@ -380,7 +380,7 @@ const EVP_MD *EVP_sha3_##bitlen(void)           \
 }
 
 # define EVP_MD_SHAKE(bitlen)                   \
-const EVP_MD *EVP_shake##bitlen(void)           \
+const EVP_MD * __cdecl EVP_shake##bitlen(void)           \
 {                                               \
     static const EVP_MD shake##bitlen##_md = {  \
         NID_shake##bitlen,                      \
diff --git a/crypto/evp/m_sigver.c b/crypto/evp/m_sigver.c
index 94e37f02b2..015f5ede48 100644
--- a/crypto/evp/m_sigver.c
+++ b/crypto/evp/m_sigver.c
@@ -15,13 +15,13 @@
 #include "internal/evp_int.h"
 #include "evp_locl.h"
 
-static int update(EVP_MD_CTX *ctx, const void *data, size_t datalen)
+static int __cdecl update(EVP_MD_CTX *ctx, const void *data, size_t datalen)
 {
     EVPerr(EVP_F_UPDATE, EVP_R_ONLY_ONESHOT_SUPPORTED);
     return 0;
 }
 
-static int do_sigver_init(EVP_MD_CTX *ctx, EVP_PKEY_CTX **pctx,
+static int __cdecl do_sigver_init(EVP_MD_CTX *ctx, EVP_PKEY_CTX **pctx,
                           const EVP_MD *type, ENGINE *e, EVP_PKEY *pkey,
                           int ver)
 {
@@ -85,19 +85,19 @@ static int do_sigver_init(EVP_MD_CTX *ctx, EVP_PKEY_CTX **pctx,
     return 1;
 }
 
-int EVP_DigestSignInit(EVP_MD_CTX *ctx, EVP_PKEY_CTX **pctx,
+int __cdecl EVP_DigestSignInit(EVP_MD_CTX *ctx, EVP_PKEY_CTX **pctx,
                        const EVP_MD *type, ENGINE *e, EVP_PKEY *pkey)
 {
     return do_sigver_init(ctx, pctx, type, e, pkey, 0);
 }
 
-int EVP_DigestVerifyInit(EVP_MD_CTX *ctx, EVP_PKEY_CTX **pctx,
+int __cdecl EVP_DigestVerifyInit(EVP_MD_CTX *ctx, EVP_PKEY_CTX **pctx,
                          const EVP_MD *type, ENGINE *e, EVP_PKEY *pkey)
 {
     return do_sigver_init(ctx, pctx, type, e, pkey, 1);
 }
 
-int EVP_DigestSignFinal(EVP_MD_CTX *ctx, unsigned char *sigret,
+int __cdecl EVP_DigestSignFinal(EVP_MD_CTX *ctx, unsigned char *sigret,
                         size_t *siglen)
 {
     int sctx = 0, r = 0;
@@ -160,7 +160,7 @@ int EVP_DigestSignFinal(EVP_MD_CTX *ctx, unsigned char *sigret,
     return 1;
 }
 
-int EVP_DigestSign(EVP_MD_CTX *ctx, unsigned char *sigret, size_t *siglen,
+int __cdecl EVP_DigestSign(EVP_MD_CTX *ctx, unsigned char *sigret, size_t *siglen,
                    const unsigned char *tbs, size_t tbslen)
 {
     if (ctx->pctx->pmeth->digestsign != NULL)
@@ -170,7 +170,7 @@ int EVP_DigestSign(EVP_MD_CTX *ctx, unsigned char *sigret, size_t *siglen,
     return EVP_DigestSignFinal(ctx, sigret, siglen);
 }
 
-int EVP_DigestVerifyFinal(EVP_MD_CTX *ctx, const unsigned char *sig,
+int __cdecl EVP_DigestVerifyFinal(EVP_MD_CTX *ctx, const unsigned char *sig,
                           size_t siglen)
 {
     unsigned char md[EVP_MAX_MD_SIZE];
@@ -207,7 +207,7 @@ int EVP_DigestVerifyFinal(EVP_MD_CTX *ctx, const unsigned char *sig,
     return EVP_PKEY_verify(ctx->pctx, sig, siglen, md, mdlen);
 }
 
-int EVP_DigestVerify(EVP_MD_CTX *ctx, const unsigned char *sigret,
+int __cdecl EVP_DigestVerify(EVP_MD_CTX *ctx, const unsigned char *sigret,
                      size_t siglen, const unsigned char *tbs, size_t tbslen)
 {
     if (ctx->pctx->pmeth->digestverify != NULL)
diff --git a/crypto/evp/m_wp.c b/crypto/evp/m_wp.c
index 27e2b3c5ca..2d17bee865 100644
--- a/crypto/evp/m_wp.c
+++ b/crypto/evp/m_wp.c
@@ -18,17 +18,17 @@
 # include <openssl/whrlpool.h>
 # include "internal/evp_int.h"
 
-static int init(EVP_MD_CTX *ctx)
+static int __cdecl init(EVP_MD_CTX *ctx)
 {
     return WHIRLPOOL_Init(EVP_MD_CTX_md_data(ctx));
 }
 
-static int update(EVP_MD_CTX *ctx, const void *data, size_t count)
+static int __cdecl update(EVP_MD_CTX *ctx, const void *data, size_t count)
 {
     return WHIRLPOOL_Update(EVP_MD_CTX_md_data(ctx), data, count);
 }
 
-static int final(EVP_MD_CTX *ctx, unsigned char *md)
+static int __cdecl final(EVP_MD_CTX *ctx, unsigned char *md)
 {
     return WHIRLPOOL_Final(md, EVP_MD_CTX_md_data(ctx));
 }
@@ -47,7 +47,7 @@ static const EVP_MD whirlpool_md = {
     sizeof(EVP_MD *) + sizeof(WHIRLPOOL_CTX),
 };
 
-const EVP_MD *EVP_whirlpool(void)
+const EVP_MD * __cdecl EVP_whirlpool(void)
 {
     return &whirlpool_md;
 }
diff --git a/crypto/evp/names.c b/crypto/evp/names.c
index 077c2a6c4b..290acd9b71 100644
--- a/crypto/evp/names.c
+++ b/crypto/evp/names.c
@@ -14,7 +14,7 @@
 #include <openssl/x509.h>
 #include "internal/evp_int.h"
 
-int EVP_add_cipher(const EVP_CIPHER *c)
+int __cdecl EVP_add_cipher(const EVP_CIPHER *c)
 {
     int r;
 
@@ -30,7 +30,7 @@ int EVP_add_cipher(const EVP_CIPHER *c)
     return r;
 }
 
-int EVP_add_digest(const EVP_MD *md)
+int __cdecl EVP_add_digest(const EVP_MD *md)
 {
     int r;
     const char *name;
@@ -55,7 +55,7 @@ int EVP_add_digest(const EVP_MD *md)
     return r;
 }
 
-const EVP_CIPHER *EVP_get_cipherbyname(const char *name)
+const EVP_CIPHER * __cdecl EVP_get_cipherbyname(const char *name)
 {
     const EVP_CIPHER *cp;
 
@@ -66,7 +66,7 @@ const EVP_CIPHER *EVP_get_cipherbyname(const char *name)
     return cp;
 }
 
-const EVP_MD *EVP_get_digestbyname(const char *name)
+const EVP_MD * __cdecl EVP_get_digestbyname(const char *name)
 {
     const EVP_MD *cp;
 
@@ -96,7 +96,7 @@ void evp_cleanup_int(void)
 
 struct doall_cipher {
     void *arg;
-    void (*fn) (const EVP_CIPHER *ciph,
+    void (__cdecl *fn) (const EVP_CIPHER *ciph,
                 const char *from, const char *to, void *arg);
 };
 
@@ -109,7 +109,7 @@ static void do_all_cipher_fn(const OBJ_NAME *nm, void *arg)
         dc->fn((const EVP_CIPHER *)nm->data, nm->name, NULL, dc->arg);
 }
 
-void EVP_CIPHER_do_all(void (*fn) (const EVP_CIPHER *ciph,
+void __cdecl EVP_CIPHER_do_all(void (__cdecl *fn) (const EVP_CIPHER *ciph,
                                    const char *from, const char *to, void *x),
                        void *arg)
 {
@@ -123,7 +123,7 @@ void EVP_CIPHER_do_all(void (*fn) (const EVP_CIPHER *ciph,
     OBJ_NAME_do_all(OBJ_NAME_TYPE_CIPHER_METH, do_all_cipher_fn, &dc);
 }
 
-void EVP_CIPHER_do_all_sorted(void (*fn) (const EVP_CIPHER *ciph,
+void __cdecl EVP_CIPHER_do_all_sorted(void (__cdecl *fn) (const EVP_CIPHER *ciph,
                                           const char *from, const char *to,
                                           void *x), void *arg)
 {
@@ -139,7 +139,7 @@ void EVP_CIPHER_do_all_sorted(void (*fn) (const EVP_CIPHER *ciph,
 
 struct doall_md {
     void *arg;
-    void (*fn) (const EVP_MD *ciph,
+    void (__cdecl *fn) (const EVP_MD *ciph,
                 const char *from, const char *to, void *arg);
 };
 
@@ -152,7 +152,7 @@ static void do_all_md_fn(const OBJ_NAME *nm, void *arg)
         dc->fn((const EVP_MD *)nm->data, nm->name, NULL, dc->arg);
 }
 
-void EVP_MD_do_all(void (*fn) (const EVP_MD *md,
+void __cdecl EVP_MD_do_all(void (__cdecl *fn) (const EVP_MD *md,
                                const char *from, const char *to, void *x),
                    void *arg)
 {
@@ -166,7 +166,7 @@ void EVP_MD_do_all(void (*fn) (const EVP_MD *md,
     OBJ_NAME_do_all(OBJ_NAME_TYPE_MD_METH, do_all_md_fn, &dc);
 }
 
-void EVP_MD_do_all_sorted(void (*fn) (const EVP_MD *md,
+void __cdecl EVP_MD_do_all_sorted(void (__cdecl *fn) (const EVP_MD *md,
                                       const char *from, const char *to,
                                       void *x), void *arg)
 {
diff --git a/crypto/evp/p5_crpt.c b/crypto/evp/p5_crpt.c
index 7e55d0bfb8..0d8873ce08 100644
--- a/crypto/evp/p5_crpt.c
+++ b/crypto/evp/p5_crpt.c
@@ -17,11 +17,11 @@
  * Doesn't do anything now: Builtin PBE algorithms in static table.
  */
 
-void PKCS5_PBE_add(void)
+void __cdecl PKCS5_PBE_add(void)
 {
 }
 
-int PKCS5_PBE_keyivgen(EVP_CIPHER_CTX *cctx, const char *pass, int passlen,
+int __cdecl PKCS5_PBE_keyivgen(EVP_CIPHER_CTX *cctx, const char *pass, int passlen,
                        ASN1_TYPE *param, const EVP_CIPHER *cipher,
                        const EVP_MD *md, int en_de)
 {
diff --git a/crypto/evp/p5_crpt2.c b/crypto/evp/p5_crpt2.c
index e819eb9b47..3e9a57c9c8 100644
--- a/crypto/evp/p5_crpt2.c
+++ b/crypto/evp/p5_crpt2.c
@@ -28,7 +28,7 @@ static void h__dump(const unsigned char *p, int len);
  * posted by Peter Gutmann to the PKCS-TNG mailing list.
  */
 
-int PKCS5_PBKDF2_HMAC(const char *pass, int passlen,
+int __cdecl PKCS5_PBKDF2_HMAC(const char *pass, int passlen,
                       const unsigned char *salt, int saltlen, int iter,
                       const EVP_MD *digest, int keylen, unsigned char *out)
 {
@@ -121,7 +121,7 @@ int PKCS5_PBKDF2_HMAC(const char *pass, int passlen,
     return 1;
 }
 
-int PKCS5_PBKDF2_HMAC_SHA1(const char *pass, int passlen,
+int __cdecl PKCS5_PBKDF2_HMAC_SHA1(const char *pass, int passlen,
                            const unsigned char *salt, int saltlen, int iter,
                            int keylen, unsigned char *out)
 {
@@ -135,7 +135,7 @@ int PKCS5_PBKDF2_HMAC_SHA1(const char *pass, int passlen,
  * them...
  */
 
-int PKCS5_v2_PBE_keyivgen(EVP_CIPHER_CTX *ctx, const char *pass, int passlen,
+int __cdecl PKCS5_v2_PBE_keyivgen(EVP_CIPHER_CTX *ctx, const char *pass, int passlen,
                           ASN1_TYPE *param, const EVP_CIPHER *c,
                           const EVP_MD *md, int en_de)
 {
@@ -183,7 +183,7 @@ int PKCS5_v2_PBE_keyivgen(EVP_CIPHER_CTX *ctx, const char *pass, int passlen,
     return rv;
 }
 
-int PKCS5_v2_PBKDF2_keyivgen(EVP_CIPHER_CTX *ctx, const char *pass,
+int __cdecl PKCS5_v2_PBKDF2_keyivgen(EVP_CIPHER_CTX *ctx, const char *pass,
                              int passlen, ASN1_TYPE *param,
                              const EVP_CIPHER *c, const EVP_MD *md, int en_de)
 {
diff --git a/crypto/evp/p_dec.c b/crypto/evp/p_dec.c
index a150a26e09..2694dbd1cc 100644
--- a/crypto/evp/p_dec.c
+++ b/crypto/evp/p_dec.c
@@ -14,7 +14,7 @@
 #include <openssl/objects.h>
 #include <openssl/x509.h>
 
-int EVP_PKEY_decrypt_old(unsigned char *key, const unsigned char *ek, int ekl,
+int __cdecl EVP_PKEY_decrypt_old(unsigned char *key, const unsigned char *ek, int ekl,
                          EVP_PKEY *priv)
 {
     int ret = -1;
diff --git a/crypto/evp/p_enc.c b/crypto/evp/p_enc.c
index 04d67cb50f..10b2d3d224 100644
--- a/crypto/evp/p_enc.c
+++ b/crypto/evp/p_enc.c
@@ -14,7 +14,7 @@
 #include <openssl/objects.h>
 #include <openssl/x509.h>
 
-int EVP_PKEY_encrypt_old(unsigned char *ek, const unsigned char *key,
+int __cdecl EVP_PKEY_encrypt_old(unsigned char *ek, const unsigned char *key,
                          int key_len, EVP_PKEY *pubk)
 {
     int ret = 0;
diff --git a/crypto/evp/p_lib.c b/crypto/evp/p_lib.c
index 3cd7ca8d54..217e4b8768 100644
--- a/crypto/evp/p_lib.c
+++ b/crypto/evp/p_lib.c
@@ -26,14 +26,14 @@
 
 static void EVP_PKEY_free_it(EVP_PKEY *x);
 
-int EVP_PKEY_bits(const EVP_PKEY *pkey)
+int __cdecl EVP_PKEY_bits(const EVP_PKEY *pkey)
 {
     if (pkey && pkey->ameth && pkey->ameth->pkey_bits)
         return pkey->ameth->pkey_bits(pkey);
     return 0;
 }
 
-int EVP_PKEY_security_bits(const EVP_PKEY *pkey)
+int __cdecl EVP_PKEY_security_bits(const EVP_PKEY *pkey)
 {
     if (pkey == NULL)
         return 0;
@@ -42,14 +42,14 @@ int EVP_PKEY_security_bits(const EVP_PKEY *pkey)
     return pkey->ameth->pkey_security_bits(pkey);
 }
 
-int EVP_PKEY_size(const EVP_PKEY *pkey)
+int __cdecl EVP_PKEY_size(const EVP_PKEY *pkey)
 {
     if (pkey && pkey->ameth && pkey->ameth->pkey_size)
         return pkey->ameth->pkey_size(pkey);
     return 0;
 }
 
-int EVP_PKEY_save_parameters(EVP_PKEY *pkey, int mode)
+int __cdecl EVP_PKEY_save_parameters(EVP_PKEY *pkey, int mode)
 {
 #ifndef OPENSSL_NO_DSA
     if (pkey->type == EVP_PKEY_DSA) {
@@ -72,7 +72,7 @@ int EVP_PKEY_save_parameters(EVP_PKEY *pkey, int mode)
     return 0;
 }
 
-int EVP_PKEY_copy_parameters(EVP_PKEY *to, const EVP_PKEY *from)
+int __cdecl EVP_PKEY_copy_parameters(EVP_PKEY *to, const EVP_PKEY *from)
 {
     if (to->type == EVP_PKEY_NONE) {
         if (EVP_PKEY_set_type(to, from->type) == 0)
@@ -100,14 +100,14 @@ int EVP_PKEY_copy_parameters(EVP_PKEY *to, const EVP_PKEY *from)
     return 0;
 }
 
-int EVP_PKEY_missing_parameters(const EVP_PKEY *pkey)
+int __cdecl EVP_PKEY_missing_parameters(const EVP_PKEY *pkey)
 {
     if (pkey->ameth && pkey->ameth->param_missing)
         return pkey->ameth->param_missing(pkey);
     return 0;
 }
 
-int EVP_PKEY_cmp_parameters(const EVP_PKEY *a, const EVP_PKEY *b)
+int __cdecl EVP_PKEY_cmp_parameters(const EVP_PKEY *a, const EVP_PKEY *b)
 {
     if (a->type != b->type)
         return -1;
@@ -116,7 +116,7 @@ int EVP_PKEY_cmp_parameters(const EVP_PKEY *a, const EVP_PKEY *b)
     return -2;
 }
 
-int EVP_PKEY_cmp(const EVP_PKEY *a, const EVP_PKEY *b)
+int __cdecl EVP_PKEY_cmp(const EVP_PKEY *a, const EVP_PKEY *b)
 {
     if (a->type != b->type)
         return -1;
@@ -137,7 +137,7 @@ int EVP_PKEY_cmp(const EVP_PKEY *a, const EVP_PKEY *b)
     return -2;
 }
 
-EVP_PKEY *EVP_PKEY_new(void)
+EVP_PKEY * __cdecl EVP_PKEY_new(void)
 {
     EVP_PKEY *ret = OPENSSL_zalloc(sizeof(*ret));
 
@@ -158,7 +158,7 @@ EVP_PKEY *EVP_PKEY_new(void)
     return ret;
 }
 
-int EVP_PKEY_up_ref(EVP_PKEY *pkey)
+int __cdecl EVP_PKEY_up_ref(EVP_PKEY *pkey)
 {
     int i;
 
@@ -220,7 +220,7 @@ static int pkey_set_type(EVP_PKEY *pkey, ENGINE *e, int type, const char *str,
     return 1;
 }
 
-EVP_PKEY *EVP_PKEY_new_raw_private_key(int type, ENGINE *e,
+EVP_PKEY * __cdecl EVP_PKEY_new_raw_private_key(int type, ENGINE *e,
                                        const unsigned char *priv,
                                        size_t len)
 {
@@ -250,7 +250,7 @@ EVP_PKEY *EVP_PKEY_new_raw_private_key(int type, ENGINE *e,
     return NULL;
 }
 
-EVP_PKEY *EVP_PKEY_new_raw_public_key(int type, ENGINE *e,
+EVP_PKEY * __cdecl EVP_PKEY_new_raw_public_key(int type, ENGINE *e,
                                       const unsigned char *pub,
                                       size_t len)
 {
@@ -280,7 +280,7 @@ EVP_PKEY *EVP_PKEY_new_raw_public_key(int type, ENGINE *e,
     return NULL;
 }
 
-int EVP_PKEY_get_raw_private_key(const EVP_PKEY *pkey, unsigned char *priv,
+int __cdecl EVP_PKEY_get_raw_private_key(const EVP_PKEY *pkey, unsigned char *priv,
                                  size_t *len)
 {
      if (pkey->ameth->get_priv_key == NULL) {
@@ -297,7 +297,7 @@ int EVP_PKEY_get_raw_private_key(const EVP_PKEY *pkey, unsigned char *priv,
     return 1;
 }
 
-int EVP_PKEY_get_raw_public_key(const EVP_PKEY *pkey, unsigned char *pub,
+int __cdecl EVP_PKEY_get_raw_public_key(const EVP_PKEY *pkey, unsigned char *pub,
                                 size_t *len)
 {
      if (pkey->ameth->get_pub_key == NULL) {
@@ -314,7 +314,7 @@ int EVP_PKEY_get_raw_public_key(const EVP_PKEY *pkey, unsigned char *pub,
     return 1;
 }
 
-EVP_PKEY *EVP_PKEY_new_CMAC_key(ENGINE *e, const unsigned char *priv,
+EVP_PKEY * __cdecl EVP_PKEY_new_CMAC_key(ENGINE *e, const unsigned char *priv,
                                 size_t len, const EVP_CIPHER *cipher)
 {
 #ifndef OPENSSL_NO_CMAC
@@ -347,17 +347,17 @@ EVP_PKEY *EVP_PKEY_new_CMAC_key(ENGINE *e, const unsigned char *priv,
 #endif
 }
 
-int EVP_PKEY_set_type(EVP_PKEY *pkey, int type)
+int __cdecl EVP_PKEY_set_type(EVP_PKEY *pkey, int type)
 {
     return pkey_set_type(pkey, NULL, type, NULL, -1);
 }
 
-int EVP_PKEY_set_type_str(EVP_PKEY *pkey, const char *str, int len)
+int __cdecl EVP_PKEY_set_type_str(EVP_PKEY *pkey, const char *str, int len)
 {
     return pkey_set_type(pkey, NULL, EVP_PKEY_NONE, str, len);
 }
 
-int EVP_PKEY_set_alias_type(EVP_PKEY *pkey, int type)
+int __cdecl EVP_PKEY_set_alias_type(EVP_PKEY *pkey, int type)
 {
     if (pkey->type == type) {
         return 1; /* it already is that type */
@@ -377,7 +377,7 @@ int EVP_PKEY_set_alias_type(EVP_PKEY *pkey, int type)
 }
 
 #ifndef OPENSSL_NO_ENGINE
-int EVP_PKEY_set1_engine(EVP_PKEY *pkey, ENGINE *e)
+int __cdecl EVP_PKEY_set1_engine(EVP_PKEY *pkey, ENGINE *e)
 {
     if (e != NULL) {
         if (!ENGINE_init(e)) {
@@ -395,12 +395,12 @@ int EVP_PKEY_set1_engine(EVP_PKEY *pkey, ENGINE *e)
     return 1;
 }
 
-ENGINE *EVP_PKEY_get0_engine(const EVP_PKEY *pkey)
+ENGINE * __cdecl EVP_PKEY_get0_engine(const EVP_PKEY *pkey)
 {
     return pkey->engine;
 }
 #endif
-int EVP_PKEY_assign(EVP_PKEY *pkey, int type, void *key)
+int __cdecl EVP_PKEY_assign(EVP_PKEY *pkey, int type, void *key)
 {
     if (pkey == NULL || !EVP_PKEY_set_type(pkey, type))
         return 0;
@@ -408,12 +408,12 @@ int EVP_PKEY_assign(EVP_PKEY *pkey, int type, void *key)
     return (key != NULL);
 }
 
-void *EVP_PKEY_get0(const EVP_PKEY *pkey)
+void * __cdecl EVP_PKEY_get0(const EVP_PKEY *pkey)
 {
     return pkey->pkey.ptr;
 }
 
-const unsigned char *EVP_PKEY_get0_hmac(const EVP_PKEY *pkey, size_t *len)
+const unsigned char * __cdecl EVP_PKEY_get0_hmac(const EVP_PKEY *pkey, size_t *len)
 {
     ASN1_OCTET_STRING *os = NULL;
     if (pkey->type != EVP_PKEY_HMAC) {
@@ -426,7 +426,7 @@ const unsigned char *EVP_PKEY_get0_hmac(const EVP_PKEY *pkey, size_t *len)
 }
 
 #ifndef OPENSSL_NO_POLY1305
-const unsigned char *EVP_PKEY_get0_poly1305(const EVP_PKEY *pkey, size_t *len)
+const unsigned char * __cdecl EVP_PKEY_get0_poly1305(const EVP_PKEY *pkey, size_t *len)
 {
     ASN1_OCTET_STRING *os = NULL;
     if (pkey->type != EVP_PKEY_POLY1305) {
@@ -440,7 +440,7 @@ const unsigned char *EVP_PKEY_get0_poly1305(const EVP_PKEY *pkey, size_t *len)
 #endif
 
 #ifndef OPENSSL_NO_SIPHASH
-const unsigned char *EVP_PKEY_get0_siphash(const EVP_PKEY *pkey, size_t *len)
+const unsigned char * __cdecl EVP_PKEY_get0_siphash(const EVP_PKEY *pkey, size_t *len)
 {
     ASN1_OCTET_STRING *os = NULL;
 
@@ -455,7 +455,7 @@ const unsigned char *EVP_PKEY_get0_siphash(const EVP_PKEY *pkey, size_t *len)
 #endif
 
 #ifndef OPENSSL_NO_RSA
-int EVP_PKEY_set1_RSA(EVP_PKEY *pkey, RSA *key)
+int __cdecl EVP_PKEY_set1_RSA(EVP_PKEY *pkey, RSA *key)
 {
     int ret = EVP_PKEY_assign_RSA(pkey, key);
     if (ret)
@@ -463,7 +463,7 @@ int EVP_PKEY_set1_RSA(EVP_PKEY *pkey, RSA *key)
     return ret;
 }
 
-RSA *EVP_PKEY_get0_RSA(EVP_PKEY *pkey)
+RSA * __cdecl EVP_PKEY_get0_RSA(EVP_PKEY *pkey)
 {
     if (pkey->type != EVP_PKEY_RSA) {
         EVPerr(EVP_F_EVP_PKEY_GET0_RSA, EVP_R_EXPECTING_AN_RSA_KEY);
@@ -472,7 +472,7 @@ RSA *EVP_PKEY_get0_RSA(EVP_PKEY *pkey)
     return pkey->pkey.rsa;
 }
 
-RSA *EVP_PKEY_get1_RSA(EVP_PKEY *pkey)
+RSA * __cdecl EVP_PKEY_get1_RSA(EVP_PKEY *pkey)
 {
     RSA *ret = EVP_PKEY_get0_RSA(pkey);
     if (ret != NULL)
@@ -482,7 +482,7 @@ RSA *EVP_PKEY_get1_RSA(EVP_PKEY *pkey)
 #endif
 
 #ifndef OPENSSL_NO_DSA
-int EVP_PKEY_set1_DSA(EVP_PKEY *pkey, DSA *key)
+int __cdecl EVP_PKEY_set1_DSA(EVP_PKEY *pkey, DSA *key)
 {
     int ret = EVP_PKEY_assign_DSA(pkey, key);
     if (ret)
@@ -490,7 +490,7 @@ int EVP_PKEY_set1_DSA(EVP_PKEY *pkey, DSA *key)
     return ret;
 }
 
-DSA *EVP_PKEY_get0_DSA(EVP_PKEY *pkey)
+DSA * __cdecl EVP_PKEY_get0_DSA(EVP_PKEY *pkey)
 {
     if (pkey->type != EVP_PKEY_DSA) {
         EVPerr(EVP_F_EVP_PKEY_GET0_DSA, EVP_R_EXPECTING_A_DSA_KEY);
@@ -499,7 +499,7 @@ DSA *EVP_PKEY_get0_DSA(EVP_PKEY *pkey)
     return pkey->pkey.dsa;
 }
 
-DSA *EVP_PKEY_get1_DSA(EVP_PKEY *pkey)
+DSA * __cdecl EVP_PKEY_get1_DSA(EVP_PKEY *pkey)
 {
     DSA *ret = EVP_PKEY_get0_DSA(pkey);
     if (ret != NULL)
@@ -510,7 +510,7 @@ DSA *EVP_PKEY_get1_DSA(EVP_PKEY *pkey)
 
 #ifndef OPENSSL_NO_EC
 
-int EVP_PKEY_set1_EC_KEY(EVP_PKEY *pkey, EC_KEY *key)
+int __cdecl EVP_PKEY_set1_EC_KEY(EVP_PKEY *pkey, EC_KEY *key)
 {
     int ret = EVP_PKEY_assign_EC_KEY(pkey, key);
     if (ret)
@@ -518,7 +518,7 @@ int EVP_PKEY_set1_EC_KEY(EVP_PKEY *pkey, EC_KEY *key)
     return ret;
 }
 
-EC_KEY *EVP_PKEY_get0_EC_KEY(EVP_PKEY *pkey)
+EC_KEY * __cdecl EVP_PKEY_get0_EC_KEY(EVP_PKEY *pkey)
 {
     if (pkey->type != EVP_PKEY_EC) {
         EVPerr(EVP_F_EVP_PKEY_GET0_EC_KEY, EVP_R_EXPECTING_A_EC_KEY);
@@ -527,7 +527,7 @@ EC_KEY *EVP_PKEY_get0_EC_KEY(EVP_PKEY *pkey)
     return pkey->pkey.ec;
 }
 
-EC_KEY *EVP_PKEY_get1_EC_KEY(EVP_PKEY *pkey)
+EC_KEY * __cdecl EVP_PKEY_get1_EC_KEY(EVP_PKEY *pkey)
 {
     EC_KEY *ret = EVP_PKEY_get0_EC_KEY(pkey);
     if (ret != NULL)
@@ -538,7 +538,7 @@ EC_KEY *EVP_PKEY_get1_EC_KEY(EVP_PKEY *pkey)
 
 #ifndef OPENSSL_NO_DH
 
-int EVP_PKEY_set1_DH(EVP_PKEY *pkey, DH *key)
+int __cdecl EVP_PKEY_set1_DH(EVP_PKEY *pkey, DH *key)
 {
     int ret = EVP_PKEY_assign_DH(pkey, key);
     if (ret)
@@ -546,7 +546,7 @@ int EVP_PKEY_set1_DH(EVP_PKEY *pkey, DH *key)
     return ret;
 }
 
-DH *EVP_PKEY_get0_DH(EVP_PKEY *pkey)
+DH * __cdecl EVP_PKEY_get0_DH(EVP_PKEY *pkey)
 {
     if (pkey->type != EVP_PKEY_DH && pkey->type != EVP_PKEY_DHX) {
         EVPerr(EVP_F_EVP_PKEY_GET0_DH, EVP_R_EXPECTING_A_DH_KEY);
@@ -555,7 +555,7 @@ DH *EVP_PKEY_get0_DH(EVP_PKEY *pkey)
     return pkey->pkey.dh;
 }
 
-DH *EVP_PKEY_get1_DH(EVP_PKEY *pkey)
+DH * __cdecl EVP_PKEY_get1_DH(EVP_PKEY *pkey)
 {
     DH *ret = EVP_PKEY_get0_DH(pkey);
     if (ret != NULL)
@@ -564,7 +564,7 @@ DH *EVP_PKEY_get1_DH(EVP_PKEY *pkey)
 }
 #endif
 
-int EVP_PKEY_type(int type)
+int __cdecl EVP_PKEY_type(int type)
 {
     int ret;
     const EVP_PKEY_ASN1_METHOD *ameth;
@@ -580,17 +580,17 @@ int EVP_PKEY_type(int type)
     return ret;
 }
 
-int EVP_PKEY_id(const EVP_PKEY *pkey)
+int __cdecl EVP_PKEY_id(const EVP_PKEY *pkey)
 {
     return pkey->type;
 }
 
-int EVP_PKEY_base_id(const EVP_PKEY *pkey)
+int __cdecl EVP_PKEY_base_id(const EVP_PKEY *pkey)
 {
     return EVP_PKEY_type(pkey->type);
 }
 
-void EVP_PKEY_free(EVP_PKEY *x)
+void __cdecl EVP_PKEY_free(EVP_PKEY *x)
 {
     int i;
 
@@ -632,7 +632,7 @@ static int unsup_alg(BIO *out, const EVP_PKEY *pkey, int indent,
     return 1;
 }
 
-int EVP_PKEY_print_public(BIO *out, const EVP_PKEY *pkey,
+int __cdecl EVP_PKEY_print_public(BIO *out, const EVP_PKEY *pkey,
                           int indent, ASN1_PCTX *pctx)
 {
     if (pkey->ameth && pkey->ameth->pub_print)
@@ -641,7 +641,7 @@ int EVP_PKEY_print_public(BIO *out, const EVP_PKEY *pkey,
     return unsup_alg(out, pkey, indent, "Public Key");
 }
 
-int EVP_PKEY_print_private(BIO *out, const EVP_PKEY *pkey,
+int __cdecl EVP_PKEY_print_private(BIO *out, const EVP_PKEY *pkey,
                            int indent, ASN1_PCTX *pctx)
 {
     if (pkey->ameth && pkey->ameth->priv_print)
@@ -650,7 +650,7 @@ int EVP_PKEY_print_private(BIO *out, const EVP_PKEY *pkey,
     return unsup_alg(out, pkey, indent, "Private Key");
 }
 
-int EVP_PKEY_print_params(BIO *out, const EVP_PKEY *pkey,
+int __cdecl EVP_PKEY_print_params(BIO *out, const EVP_PKEY *pkey,
                           int indent, ASN1_PCTX *pctx)
 {
     if (pkey->ameth && pkey->ameth->param_print)
@@ -665,12 +665,12 @@ static int evp_pkey_asn1_ctrl(EVP_PKEY *pkey, int op, int arg1, void *arg2)
     return pkey->ameth->pkey_ctrl(pkey, op, arg1, arg2);
 }
 
-int EVP_PKEY_get_default_digest_nid(EVP_PKEY *pkey, int *pnid)
+int __cdecl EVP_PKEY_get_default_digest_nid(EVP_PKEY *pkey, int *pnid)
 {
     return evp_pkey_asn1_ctrl(pkey, ASN1_PKEY_CTRL_DEFAULT_MD_NID, 0, pnid);
 }
 
-int EVP_PKEY_set1_tls_encodedpoint(EVP_PKEY *pkey,
+int __cdecl EVP_PKEY_set1_tls_encodedpoint(EVP_PKEY *pkey,
                                const unsigned char *pt, size_t ptlen)
 {
     if (ptlen > INT_MAX)
@@ -681,7 +681,7 @@ int EVP_PKEY_set1_tls_encodedpoint(EVP_PKEY *pkey,
     return 1;
 }
 
-size_t EVP_PKEY_get1_tls_encodedpoint(EVP_PKEY *pkey, unsigned char **ppt)
+size_t __cdecl EVP_PKEY_get1_tls_encodedpoint(EVP_PKEY *pkey, unsigned char **ppt)
 {
     int rv;
     rv = evp_pkey_asn1_ctrl(pkey, ASN1_PKEY_CTRL_GET1_TLS_ENCPT, 0, ppt);
diff --git a/crypto/evp/p_open.c b/crypto/evp/p_open.c
index 1ce87454bd..a2ce6d7e0b 100644
--- a/crypto/evp/p_open.c
+++ b/crypto/evp/p_open.c
@@ -18,7 +18,7 @@ NON_EMPTY_TRANSLATION_UNIT
 # include <openssl/x509.h>
 # include <openssl/rsa.h>
 
-int EVP_OpenInit(EVP_CIPHER_CTX *ctx, const EVP_CIPHER *type,
+int __cdecl EVP_OpenInit(EVP_CIPHER_CTX *ctx, const EVP_CIPHER *type,
                  const unsigned char *ek, int ekl, const unsigned char *iv,
                  EVP_PKEY *priv)
 {
@@ -61,7 +61,7 @@ int EVP_OpenInit(EVP_CIPHER_CTX *ctx, const EVP_CIPHER *type,
     return ret;
 }
 
-int EVP_OpenFinal(EVP_CIPHER_CTX *ctx, unsigned char *out, int *outl)
+int __cdecl EVP_OpenFinal(EVP_CIPHER_CTX *ctx, unsigned char *out, int *outl)
 {
     int i;
 
diff --git a/crypto/evp/p_seal.c b/crypto/evp/p_seal.c
index e851d7ab8b..5024f3a482 100644
--- a/crypto/evp/p_seal.c
+++ b/crypto/evp/p_seal.c
@@ -15,7 +15,7 @@
 #include <openssl/objects.h>
 #include <openssl/x509.h>
 
-int EVP_SealInit(EVP_CIPHER_CTX *ctx, const EVP_CIPHER *type,
+int __cdecl EVP_SealInit(EVP_CIPHER_CTX *ctx, const EVP_CIPHER *type,
                  unsigned char **ek, int *ekl, unsigned char *iv,
                  EVP_PKEY **pubk, int npubk)
 {
@@ -55,7 +55,7 @@ err:
     return rv;
 }
 
-int EVP_SealFinal(EVP_CIPHER_CTX *ctx, unsigned char *out, int *outl)
+int __cdecl EVP_SealFinal(EVP_CIPHER_CTX *ctx, unsigned char *out, int *outl)
 {
     int i;
     i = EVP_EncryptFinal_ex(ctx, out, outl);
diff --git a/crypto/evp/p_sign.c b/crypto/evp/p_sign.c
index 6cb442e4f9..0dbd21677f 100644
--- a/crypto/evp/p_sign.c
+++ b/crypto/evp/p_sign.c
@@ -14,7 +14,7 @@
 #include <openssl/x509.h>
 #include "internal/evp_int.h"
 
-int EVP_SignFinal(EVP_MD_CTX *ctx, unsigned char *sigret,
+int __cdecl EVP_SignFinal(EVP_MD_CTX *ctx, unsigned char *sigret,
                   unsigned int *siglen, EVP_PKEY *pkey)
 {
     unsigned char m[EVP_MAX_MD_SIZE];
diff --git a/crypto/evp/p_verify.c b/crypto/evp/p_verify.c
index 6e8c565dfd..41418ce44b 100644
--- a/crypto/evp/p_verify.c
+++ b/crypto/evp/p_verify.c
@@ -14,7 +14,7 @@
 #include <openssl/x509.h>
 #include "internal/evp_int.h"
 
-int EVP_VerifyFinal(EVP_MD_CTX *ctx, const unsigned char *sigbuf,
+int __cdecl EVP_VerifyFinal(EVP_MD_CTX *ctx, const unsigned char *sigbuf,
                     unsigned int siglen, EVP_PKEY *pkey)
 {
     unsigned char m[EVP_MAX_MD_SIZE];
diff --git a/crypto/evp/pbe_scrypt.c b/crypto/evp/pbe_scrypt.c
index 57da82f3fe..6b3c363e17 100644
--- a/crypto/evp/pbe_scrypt.c
+++ b/crypto/evp/pbe_scrypt.c
@@ -155,7 +155,7 @@ static void scryptROMix(unsigned char *B, uint64_t r, uint64_t N,
 # define SCRYPT_MAX_MEM  (1024 * 1024 * 32)
 #endif
 
-int EVP_PBE_scrypt(const char *pass, size_t passlen,
+int __cdecl EVP_PBE_scrypt(const char *pass, size_t passlen,
                    const unsigned char *salt, size_t saltlen,
                    uint64_t N, uint64_t r, uint64_t p, uint64_t maxmem,
                    unsigned char *key, size_t keylen)
diff --git a/crypto/evp/pmeth_fn.c b/crypto/evp/pmeth_fn.c
index de1c07e171..5a0cc2562d 100644
--- a/crypto/evp/pmeth_fn.c
+++ b/crypto/evp/pmeth_fn.c
@@ -32,7 +32,7 @@
         }                                                         \
     }
 
-int EVP_PKEY_sign_init(EVP_PKEY_CTX *ctx)
+int __cdecl EVP_PKEY_sign_init(EVP_PKEY_CTX *ctx)
 {
     int ret;
     if (!ctx || !ctx->pmeth || !ctx->pmeth->sign) {
@@ -49,7 +49,7 @@ int EVP_PKEY_sign_init(EVP_PKEY_CTX *ctx)
     return ret;
 }
 
-int EVP_PKEY_sign(EVP_PKEY_CTX *ctx,
+int __cdecl EVP_PKEY_sign(EVP_PKEY_CTX *ctx,
                   unsigned char *sig, size_t *siglen,
                   const unsigned char *tbs, size_t tbslen)
 {
@@ -66,7 +66,7 @@ int EVP_PKEY_sign(EVP_PKEY_CTX *ctx,
         return ctx->pmeth->sign(ctx, sig, siglen, tbs, tbslen);
 }
 
-int EVP_PKEY_verify_init(EVP_PKEY_CTX *ctx)
+int __cdecl EVP_PKEY_verify_init(EVP_PKEY_CTX *ctx)
 {
     int ret;
     if (!ctx || !ctx->pmeth || !ctx->pmeth->verify) {
@@ -83,7 +83,7 @@ int EVP_PKEY_verify_init(EVP_PKEY_CTX *ctx)
     return ret;
 }
 
-int EVP_PKEY_verify(EVP_PKEY_CTX *ctx,
+int __cdecl EVP_PKEY_verify(EVP_PKEY_CTX *ctx,
                     const unsigned char *sig, size_t siglen,
                     const unsigned char *tbs, size_t tbslen)
 {
@@ -99,7 +99,7 @@ int EVP_PKEY_verify(EVP_PKEY_CTX *ctx,
     return ctx->pmeth->verify(ctx, sig, siglen, tbs, tbslen);
 }
 
-int EVP_PKEY_verify_recover_init(EVP_PKEY_CTX *ctx)
+int __cdecl EVP_PKEY_verify_recover_init(EVP_PKEY_CTX *ctx)
 {
     int ret;
     if (!ctx || !ctx->pmeth || !ctx->pmeth->verify_recover) {
@@ -116,7 +116,7 @@ int EVP_PKEY_verify_recover_init(EVP_PKEY_CTX *ctx)
     return ret;
 }
 
-int EVP_PKEY_verify_recover(EVP_PKEY_CTX *ctx,
+int __cdecl EVP_PKEY_verify_recover(EVP_PKEY_CTX *ctx,
                             unsigned char *rout, size_t *routlen,
                             const unsigned char *sig, size_t siglen)
 {
@@ -133,7 +133,7 @@ int EVP_PKEY_verify_recover(EVP_PKEY_CTX *ctx,
         return ctx->pmeth->verify_recover(ctx, rout, routlen, sig, siglen);
 }
 
-int EVP_PKEY_encrypt_init(EVP_PKEY_CTX *ctx)
+int __cdecl EVP_PKEY_encrypt_init(EVP_PKEY_CTX *ctx)
 {
     int ret;
     if (!ctx || !ctx->pmeth || !ctx->pmeth->encrypt) {
@@ -150,7 +150,7 @@ int EVP_PKEY_encrypt_init(EVP_PKEY_CTX *ctx)
     return ret;
 }
 
-int EVP_PKEY_encrypt(EVP_PKEY_CTX *ctx,
+int __cdecl EVP_PKEY_encrypt(EVP_PKEY_CTX *ctx,
                      unsigned char *out, size_t *outlen,
                      const unsigned char *in, size_t inlen)
 {
@@ -167,7 +167,7 @@ int EVP_PKEY_encrypt(EVP_PKEY_CTX *ctx,
         return ctx->pmeth->encrypt(ctx, out, outlen, in, inlen);
 }
 
-int EVP_PKEY_decrypt_init(EVP_PKEY_CTX *ctx)
+int __cdecl EVP_PKEY_decrypt_init(EVP_PKEY_CTX *ctx)
 {
     int ret;
     if (!ctx || !ctx->pmeth || !ctx->pmeth->decrypt) {
@@ -184,7 +184,7 @@ int EVP_PKEY_decrypt_init(EVP_PKEY_CTX *ctx)
     return ret;
 }
 
-int EVP_PKEY_decrypt(EVP_PKEY_CTX *ctx,
+int __cdecl EVP_PKEY_decrypt(EVP_PKEY_CTX *ctx,
                      unsigned char *out, size_t *outlen,
                      const unsigned char *in, size_t inlen)
 {
@@ -201,7 +201,7 @@ int EVP_PKEY_decrypt(EVP_PKEY_CTX *ctx,
         return ctx->pmeth->decrypt(ctx, out, outlen, in, inlen);
 }
 
-int EVP_PKEY_derive_init(EVP_PKEY_CTX *ctx)
+int __cdecl EVP_PKEY_derive_init(EVP_PKEY_CTX *ctx)
 {
     int ret;
     if (!ctx || !ctx->pmeth || !ctx->pmeth->derive) {
@@ -218,7 +218,7 @@ int EVP_PKEY_derive_init(EVP_PKEY_CTX *ctx)
     return ret;
 }
 
-int EVP_PKEY_derive_set_peer(EVP_PKEY_CTX *ctx, EVP_PKEY *peer)
+int __cdecl EVP_PKEY_derive_set_peer(EVP_PKEY_CTX *ctx, EVP_PKEY *peer)
 {
     int ret;
     if (!ctx || !ctx->pmeth
@@ -281,7 +281,7 @@ int EVP_PKEY_derive_set_peer(EVP_PKEY_CTX *ctx, EVP_PKEY *peer)
     return 1;
 }
 
-int EVP_PKEY_derive(EVP_PKEY_CTX *ctx, unsigned char *key, size_t *pkeylen)
+int __cdecl EVP_PKEY_derive(EVP_PKEY_CTX *ctx, unsigned char *key, size_t *pkeylen)
 {
     if (!ctx || !ctx->pmeth || !ctx->pmeth->derive) {
         EVPerr(EVP_F_EVP_PKEY_DERIVE,
diff --git a/crypto/evp/pmeth_gn.c b/crypto/evp/pmeth_gn.c
index e14965f333..46f9a656bc 100644
--- a/crypto/evp/pmeth_gn.c
+++ b/crypto/evp/pmeth_gn.c
@@ -16,7 +16,7 @@
 #include "internal/asn1_int.h"
 #include "internal/evp_int.h"
 
-int EVP_PKEY_paramgen_init(EVP_PKEY_CTX *ctx)
+int __cdecl EVP_PKEY_paramgen_init(EVP_PKEY_CTX *ctx)
 {
     int ret;
     if (!ctx || !ctx->pmeth || !ctx->pmeth->paramgen) {
@@ -33,7 +33,7 @@ int EVP_PKEY_paramgen_init(EVP_PKEY_CTX *ctx)
     return ret;
 }
 
-int EVP_PKEY_paramgen(EVP_PKEY_CTX *ctx, EVP_PKEY **ppkey)
+int __cdecl EVP_PKEY_paramgen(EVP_PKEY_CTX *ctx, EVP_PKEY **ppkey)
 {
     int ret;
     if (!ctx || !ctx->pmeth || !ctx->pmeth->paramgen) {
@@ -66,7 +66,7 @@ int EVP_PKEY_paramgen(EVP_PKEY_CTX *ctx, EVP_PKEY **ppkey)
     return ret;
 }
 
-int EVP_PKEY_keygen_init(EVP_PKEY_CTX *ctx)
+int __cdecl EVP_PKEY_keygen_init(EVP_PKEY_CTX *ctx)
 {
     int ret;
     if (!ctx || !ctx->pmeth || !ctx->pmeth->keygen) {
@@ -83,7 +83,7 @@ int EVP_PKEY_keygen_init(EVP_PKEY_CTX *ctx)
     return ret;
 }
 
-int EVP_PKEY_keygen(EVP_PKEY_CTX *ctx, EVP_PKEY **ppkey)
+int __cdecl EVP_PKEY_keygen(EVP_PKEY_CTX *ctx, EVP_PKEY **ppkey)
 {
     int ret;
 
@@ -113,12 +113,12 @@ int EVP_PKEY_keygen(EVP_PKEY_CTX *ctx, EVP_PKEY **ppkey)
     return ret;
 }
 
-void EVP_PKEY_CTX_set_cb(EVP_PKEY_CTX *ctx, EVP_PKEY_gen_cb *cb)
+void __cdecl EVP_PKEY_CTX_set_cb(EVP_PKEY_CTX *ctx, EVP_PKEY_gen_cb *cb)
 {
     ctx->pkey_gencb = cb;
 }
 
-EVP_PKEY_gen_cb *EVP_PKEY_CTX_get_cb(EVP_PKEY_CTX *ctx)
+EVP_PKEY_gen_cb * __cdecl EVP_PKEY_CTX_get_cb(EVP_PKEY_CTX *ctx)
 {
     return ctx->pkey_gencb;
 }
@@ -128,7 +128,7 @@ EVP_PKEY_gen_cb *EVP_PKEY_CTX_get_cb(EVP_PKEY_CTX *ctx)
  * callbacks.
  */
 
-static int trans_cb(int a, int b, BN_GENCB *gcb)
+static int __cdecl trans_cb(int a, int b, BN_GENCB *gcb)
 {
     EVP_PKEY_CTX *ctx = BN_GENCB_get_arg(gcb);
     ctx->keygen_info[0] = a;
@@ -136,12 +136,12 @@ static int trans_cb(int a, int b, BN_GENCB *gcb)
     return ctx->pkey_gencb(ctx);
 }
 
-void evp_pkey_set_cb_translate(BN_GENCB *cb, EVP_PKEY_CTX *ctx)
+void __cdecl evp_pkey_set_cb_translate(BN_GENCB *cb, EVP_PKEY_CTX *ctx)
 {
     BN_GENCB_set(cb, trans_cb, ctx);
 }
 
-int EVP_PKEY_CTX_get_keygen_info(EVP_PKEY_CTX *ctx, int idx)
+int __cdecl EVP_PKEY_CTX_get_keygen_info(EVP_PKEY_CTX *ctx, int idx)
 {
     if (idx == -1)
         return ctx->keygen_info_count;
@@ -150,7 +150,7 @@ int EVP_PKEY_CTX_get_keygen_info(EVP_PKEY_CTX *ctx, int idx)
     return ctx->keygen_info[idx];
 }
 
-EVP_PKEY *EVP_PKEY_new_mac_key(int type, ENGINE *e,
+EVP_PKEY * __cdecl EVP_PKEY_new_mac_key(int type, ENGINE *e,
                                const unsigned char *key, int keylen)
 {
     EVP_PKEY_CTX *mac_ctx = NULL;
@@ -169,7 +169,7 @@ EVP_PKEY *EVP_PKEY_new_mac_key(int type, ENGINE *e,
     return mac_key;
 }
 
-int EVP_PKEY_check(EVP_PKEY_CTX *ctx)
+int __cdecl EVP_PKEY_check(EVP_PKEY_CTX *ctx)
 {
     EVP_PKEY *pkey = ctx->pkey;
 
@@ -192,7 +192,7 @@ int EVP_PKEY_check(EVP_PKEY_CTX *ctx)
     return pkey->ameth->pkey_check(pkey);
 }
 
-int EVP_PKEY_public_check(EVP_PKEY_CTX *ctx)
+int __cdecl EVP_PKEY_public_check(EVP_PKEY_CTX *ctx)
 {
     EVP_PKEY *pkey = ctx->pkey;
 
@@ -215,7 +215,7 @@ int EVP_PKEY_public_check(EVP_PKEY_CTX *ctx)
     return pkey->ameth->pkey_public_check(pkey);
 }
 
-int EVP_PKEY_param_check(EVP_PKEY_CTX *ctx)
+int __cdecl EVP_PKEY_param_check(EVP_PKEY_CTX *ctx)
 {
     EVP_PKEY *pkey = ctx->pkey;
 
diff --git a/crypto/evp/pmeth_lib.c b/crypto/evp/pmeth_lib.c
index 7fbf895e07..b8cfaff5d5 100644
--- a/crypto/evp/pmeth_lib.c
+++ b/crypto/evp/pmeth_lib.c
@@ -17,7 +17,7 @@
 #include "internal/evp_int.h"
 #include "internal/numbers.h"
 
-typedef int sk_cmp_fn_type(const char *const *a, const char *const *b);
+typedef int __cdecl sk_cmp_fn_type(const char *const *a, const char *const *b);
 
 static STACK_OF(EVP_PKEY_METHOD) *app_pkey_methods = NULL;
 
@@ -72,7 +72,7 @@ static const EVP_PKEY_METHOD *standard_methods[] = {
 DECLARE_OBJ_BSEARCH_CMP_FN(const EVP_PKEY_METHOD *, const EVP_PKEY_METHOD *,
                            pmeth);
 
-static int pmeth_cmp(const EVP_PKEY_METHOD *const *a,
+static int __cdecl pmeth_cmp(const EVP_PKEY_METHOD *const *a,
                      const EVP_PKEY_METHOD *const *b)
 {
     return ((*a)->pkey_id - (*b)->pkey_id);
@@ -81,7 +81,7 @@ static int pmeth_cmp(const EVP_PKEY_METHOD *const *a,
 IMPLEMENT_OBJ_BSEARCH_CMP_FN(const EVP_PKEY_METHOD *, const EVP_PKEY_METHOD *,
                              pmeth);
 
-const EVP_PKEY_METHOD *EVP_PKEY_meth_find(int type)
+const EVP_PKEY_METHOD * __cdecl EVP_PKEY_meth_find(int type)
 {
     EVP_PKEY_METHOD tmp;
     const EVP_PKEY_METHOD *t = &tmp, **ret;
@@ -167,7 +167,7 @@ static EVP_PKEY_CTX *int_ctx_new(EVP_PKEY *pkey, ENGINE *e, int id)
     return ret;
 }
 
-EVP_PKEY_METHOD *EVP_PKEY_meth_new(int id, int flags)
+EVP_PKEY_METHOD * __cdecl EVP_PKEY_meth_new(int id, int flags)
 {
     EVP_PKEY_METHOD *pmeth;
 
@@ -182,7 +182,7 @@ EVP_PKEY_METHOD *EVP_PKEY_meth_new(int id, int flags)
     return pmeth;
 }
 
-void EVP_PKEY_meth_get0_info(int *ppkey_id, int *pflags,
+void __cdecl EVP_PKEY_meth_get0_info(int *ppkey_id, int *pflags,
                              const EVP_PKEY_METHOD *meth)
 {
     if (ppkey_id)
@@ -191,7 +191,7 @@ void EVP_PKEY_meth_get0_info(int *ppkey_id, int *pflags,
         *pflags = meth->flags;
 }
 
-void EVP_PKEY_meth_copy(EVP_PKEY_METHOD *dst, const EVP_PKEY_METHOD *src)
+void __cdecl EVP_PKEY_meth_copy(EVP_PKEY_METHOD *dst, const EVP_PKEY_METHOD *src)
 {
 
     dst->init = src->init;
@@ -234,23 +234,23 @@ void EVP_PKEY_meth_copy(EVP_PKEY_METHOD *dst, const EVP_PKEY_METHOD *src)
     dst->check = src->check;
 }
 
-void EVP_PKEY_meth_free(EVP_PKEY_METHOD *pmeth)
+void __cdecl EVP_PKEY_meth_free(EVP_PKEY_METHOD *pmeth)
 {
     if (pmeth && (pmeth->flags & EVP_PKEY_FLAG_DYNAMIC))
         OPENSSL_free(pmeth);
 }
 
-EVP_PKEY_CTX *EVP_PKEY_CTX_new(EVP_PKEY *pkey, ENGINE *e)
+EVP_PKEY_CTX * __cdecl EVP_PKEY_CTX_new(EVP_PKEY *pkey, ENGINE *e)
 {
     return int_ctx_new(pkey, e, -1);
 }
 
-EVP_PKEY_CTX *EVP_PKEY_CTX_new_id(int id, ENGINE *e)
+EVP_PKEY_CTX * __cdecl EVP_PKEY_CTX_new_id(int id, ENGINE *e)
 {
     return int_ctx_new(NULL, e, id);
 }
 
-EVP_PKEY_CTX *EVP_PKEY_CTX_dup(EVP_PKEY_CTX *pctx)
+EVP_PKEY_CTX * __cdecl EVP_PKEY_CTX_dup(EVP_PKEY_CTX *pctx)
 {
     EVP_PKEY_CTX *rctx;
     if (!pctx->pmeth || !pctx->pmeth->copy)
@@ -296,7 +296,7 @@ EVP_PKEY_CTX *EVP_PKEY_CTX_dup(EVP_PKEY_CTX *pctx)
 
 }
 
-int EVP_PKEY_meth_add0(const EVP_PKEY_METHOD *pmeth)
+int __cdecl EVP_PKEY_meth_add0(const EVP_PKEY_METHOD *pmeth)
 {
     if (app_pkey_methods == NULL) {
         app_pkey_methods = sk_EVP_PKEY_METHOD_new(pmeth_cmp);
@@ -319,7 +319,7 @@ void evp_app_cleanup_int(void)
         sk_EVP_PKEY_METHOD_pop_free(app_pkey_methods, EVP_PKEY_meth_free);
 }
 
-int EVP_PKEY_meth_remove(const EVP_PKEY_METHOD *pmeth)
+int __cdecl EVP_PKEY_meth_remove(const EVP_PKEY_METHOD *pmeth)
 {
     const EVP_PKEY_METHOD *ret;
 
@@ -328,7 +328,7 @@ int EVP_PKEY_meth_remove(const EVP_PKEY_METHOD *pmeth)
     return ret == NULL ? 0 : 1;
 }
 
-size_t EVP_PKEY_meth_get_count(void)
+size_t __cdecl EVP_PKEY_meth_get_count(void)
 {
     size_t rv = OSSL_NELEM(standard_methods);
 
@@ -337,7 +337,7 @@ size_t EVP_PKEY_meth_get_count(void)
     return rv;
 }
 
-const EVP_PKEY_METHOD *EVP_PKEY_meth_get0(size_t idx)
+const EVP_PKEY_METHOD * __cdecl EVP_PKEY_meth_get0(size_t idx)
 {
     if (idx < OSSL_NELEM(standard_methods))
         return standard_methods[idx];
@@ -349,7 +349,7 @@ const EVP_PKEY_METHOD *EVP_PKEY_meth_get0(size_t idx)
     return sk_EVP_PKEY_METHOD_value(app_pkey_methods, idx);
 }
 
-void EVP_PKEY_CTX_free(EVP_PKEY_CTX *ctx)
+void __cdecl EVP_PKEY_CTX_free(EVP_PKEY_CTX *ctx)
 {
     if (ctx == NULL)
         return;
@@ -363,7 +363,7 @@ void EVP_PKEY_CTX_free(EVP_PKEY_CTX *ctx)
     OPENSSL_free(ctx);
 }
 
-int EVP_PKEY_CTX_ctrl(EVP_PKEY_CTX *ctx, int keytype, int optype,
+int __cdecl EVP_PKEY_CTX_ctrl(EVP_PKEY_CTX *ctx, int keytype, int optype,
                       int cmd, int p1, void *p2)
 {
     int ret;
@@ -398,13 +398,13 @@ int EVP_PKEY_CTX_ctrl(EVP_PKEY_CTX *ctx, int keytype, int optype,
     return ret;
 }
 
-int EVP_PKEY_CTX_ctrl_uint64(EVP_PKEY_CTX *ctx, int keytype, int optype,
+int __cdecl EVP_PKEY_CTX_ctrl_uint64(EVP_PKEY_CTX *ctx, int keytype, int optype,
                              int cmd, uint64_t value)
 {
     return EVP_PKEY_CTX_ctrl(ctx, keytype, optype, cmd, 0, &value);
 }
 
-int EVP_PKEY_CTX_ctrl_str(EVP_PKEY_CTX *ctx,
+int __cdecl EVP_PKEY_CTX_ctrl_str(EVP_PKEY_CTX *ctx,
                           const char *name, const char *value)
 {
     if (!ctx || !ctx->pmeth || !ctx->pmeth->ctrl_str) {
@@ -419,7 +419,7 @@ int EVP_PKEY_CTX_ctrl_str(EVP_PKEY_CTX *ctx,
 
 /* Utility functions to send a string of hex string to a ctrl */
 
-int EVP_PKEY_CTX_str2ctrl(EVP_PKEY_CTX *ctx, int cmd, const char *str)
+int __cdecl EVP_PKEY_CTX_str2ctrl(EVP_PKEY_CTX *ctx, int cmd, const char *str)
 {
     size_t len;
 
@@ -429,7 +429,7 @@ int EVP_PKEY_CTX_str2ctrl(EVP_PKEY_CTX *ctx, int cmd, const char *str)
     return ctx->pmeth->ctrl(ctx, cmd, len, (void *)str);
 }
 
-int EVP_PKEY_CTX_hex2ctrl(EVP_PKEY_CTX *ctx, int cmd, const char *hex)
+int __cdecl EVP_PKEY_CTX_hex2ctrl(EVP_PKEY_CTX *ctx, int cmd, const char *hex)
 {
     unsigned char *bin;
     long binlen;
@@ -445,7 +445,7 @@ int EVP_PKEY_CTX_hex2ctrl(EVP_PKEY_CTX *ctx, int cmd, const char *hex)
 }
 
 /* Pass a message digest to a ctrl */
-int EVP_PKEY_CTX_md(EVP_PKEY_CTX *ctx, int optype, int cmd, const char *md)
+int __cdecl EVP_PKEY_CTX_md(EVP_PKEY_CTX *ctx, int optype, int cmd, const char *md)
 {
     const EVP_MD *m;
 
@@ -456,87 +456,87 @@ int EVP_PKEY_CTX_md(EVP_PKEY_CTX *ctx, int optype, int cmd, const char *md)
     return EVP_PKEY_CTX_ctrl(ctx, -1, optype, cmd, 0, (void *)m);
 }
 
-int EVP_PKEY_CTX_get_operation(EVP_PKEY_CTX *ctx)
+int __cdecl EVP_PKEY_CTX_get_operation(EVP_PKEY_CTX *ctx)
 {
     return ctx->operation;
 }
 
-void EVP_PKEY_CTX_set0_keygen_info(EVP_PKEY_CTX *ctx, int *dat, int datlen)
+void __cdecl EVP_PKEY_CTX_set0_keygen_info(EVP_PKEY_CTX *ctx, int *dat, int datlen)
 {
     ctx->keygen_info = dat;
     ctx->keygen_info_count = datlen;
 }
 
-void EVP_PKEY_CTX_set_data(EVP_PKEY_CTX *ctx, void *data)
+void __cdecl EVP_PKEY_CTX_set_data(EVP_PKEY_CTX *ctx, void *data)
 {
     ctx->data = data;
 }
 
-void *EVP_PKEY_CTX_get_data(EVP_PKEY_CTX *ctx)
+void * __cdecl EVP_PKEY_CTX_get_data(EVP_PKEY_CTX *ctx)
 {
     return ctx->data;
 }
 
-EVP_PKEY *EVP_PKEY_CTX_get0_pkey(EVP_PKEY_CTX *ctx)
+EVP_PKEY * __cdecl EVP_PKEY_CTX_get0_pkey(EVP_PKEY_CTX *ctx)
 {
     return ctx->pkey;
 }
 
-EVP_PKEY *EVP_PKEY_CTX_get0_peerkey(EVP_PKEY_CTX *ctx)
+EVP_PKEY * __cdecl EVP_PKEY_CTX_get0_peerkey(EVP_PKEY_CTX *ctx)
 {
     return ctx->peerkey;
 }
 
-void EVP_PKEY_CTX_set_app_data(EVP_PKEY_CTX *ctx, void *data)
+void __cdecl EVP_PKEY_CTX_set_app_data(EVP_PKEY_CTX *ctx, void *data)
 {
     ctx->app_data = data;
 }
 
-void *EVP_PKEY_CTX_get_app_data(EVP_PKEY_CTX *ctx)
+void * __cdecl EVP_PKEY_CTX_get_app_data(EVP_PKEY_CTX *ctx)
 {
     return ctx->app_data;
 }
 
-void EVP_PKEY_meth_set_init(EVP_PKEY_METHOD *pmeth,
-                            int (*init) (EVP_PKEY_CTX *ctx))
+void __cdecl EVP_PKEY_meth_set_init(EVP_PKEY_METHOD *pmeth,
+                            int (__cdecl *init) (EVP_PKEY_CTX *ctx))
 {
     pmeth->init = init;
 }
 
-void EVP_PKEY_meth_set_copy(EVP_PKEY_METHOD *pmeth,
-                            int (*copy) (EVP_PKEY_CTX *dst,
+void __cdecl EVP_PKEY_meth_set_copy(EVP_PKEY_METHOD *pmeth,
+                            int (__cdecl *copy) (EVP_PKEY_CTX *dst,
                                          EVP_PKEY_CTX *src))
 {
     pmeth->copy = copy;
 }
 
-void EVP_PKEY_meth_set_cleanup(EVP_PKEY_METHOD *pmeth,
-                               void (*cleanup) (EVP_PKEY_CTX *ctx))
+void __cdecl EVP_PKEY_meth_set_cleanup(EVP_PKEY_METHOD *pmeth,
+                               void (__cdecl *cleanup) (EVP_PKEY_CTX *ctx))
 {
     pmeth->cleanup = cleanup;
 }
 
-void EVP_PKEY_meth_set_paramgen(EVP_PKEY_METHOD *pmeth,
-                                int (*paramgen_init) (EVP_PKEY_CTX *ctx),
-                                int (*paramgen) (EVP_PKEY_CTX *ctx,
+void __cdecl EVP_PKEY_meth_set_paramgen(EVP_PKEY_METHOD *pmeth,
+                                int (__cdecl *paramgen_init) (EVP_PKEY_CTX *ctx),
+                                int (__cdecl *paramgen) (EVP_PKEY_CTX *ctx,
                                                  EVP_PKEY *pkey))
 {
     pmeth->paramgen_init = paramgen_init;
     pmeth->paramgen = paramgen;
 }
 
-void EVP_PKEY_meth_set_keygen(EVP_PKEY_METHOD *pmeth,
-                              int (*keygen_init) (EVP_PKEY_CTX *ctx),
-                              int (*keygen) (EVP_PKEY_CTX *ctx,
+void __cdecl EVP_PKEY_meth_set_keygen(EVP_PKEY_METHOD *pmeth,
+                              int (__cdecl *keygen_init) (EVP_PKEY_CTX *ctx),
+                              int (__cdecl *keygen) (EVP_PKEY_CTX *ctx,
                                              EVP_PKEY *pkey))
 {
     pmeth->keygen_init = keygen_init;
     pmeth->keygen = keygen;
 }
 
-void EVP_PKEY_meth_set_sign(EVP_PKEY_METHOD *pmeth,
-                            int (*sign_init) (EVP_PKEY_CTX *ctx),
-                            int (*sign) (EVP_PKEY_CTX *ctx,
+void __cdecl EVP_PKEY_meth_set_sign(EVP_PKEY_METHOD *pmeth,
+                            int (__cdecl *sign_init) (EVP_PKEY_CTX *ctx),
+                            int (__cdecl *sign) (EVP_PKEY_CTX *ctx,
                                          unsigned char *sig, size_t *siglen,
                                          const unsigned char *tbs,
                                          size_t tbslen))
@@ -545,9 +545,9 @@ void EVP_PKEY_meth_set_sign(EVP_PKEY_METHOD *pmeth,
     pmeth->sign = sign;
 }
 
-void EVP_PKEY_meth_set_verify(EVP_PKEY_METHOD *pmeth,
-                              int (*verify_init) (EVP_PKEY_CTX *ctx),
-                              int (*verify) (EVP_PKEY_CTX *ctx,
+void __cdecl EVP_PKEY_meth_set_verify(EVP_PKEY_METHOD *pmeth,
+                              int (__cdecl *verify_init) (EVP_PKEY_CTX *ctx),
+                              int (__cdecl *verify) (EVP_PKEY_CTX *ctx,
                                              const unsigned char *sig,
                                              size_t siglen,
                                              const unsigned char *tbs,
@@ -557,10 +557,10 @@ void EVP_PKEY_meth_set_verify(EVP_PKEY_METHOD *pmeth,
     pmeth->verify = verify;
 }
 
-void EVP_PKEY_meth_set_verify_recover(EVP_PKEY_METHOD *pmeth,
-                                      int (*verify_recover_init) (EVP_PKEY_CTX
+void __cdecl EVP_PKEY_meth_set_verify_recover(EVP_PKEY_METHOD *pmeth,
+                                      int (__cdecl *verify_recover_init) (EVP_PKEY_CTX
                                                                   *ctx),
-                                      int (*verify_recover) (EVP_PKEY_CTX
+                                      int (__cdecl *verify_recover) (EVP_PKEY_CTX
                                                              *ctx,
                                                              unsigned char
                                                              *sig,
@@ -573,10 +573,10 @@ void EVP_PKEY_meth_set_verify_recover(EVP_PKEY_METHOD *pmeth,
     pmeth->verify_recover = verify_recover;
 }
 
-void EVP_PKEY_meth_set_signctx(EVP_PKEY_METHOD *pmeth,
-                               int (*signctx_init) (EVP_PKEY_CTX *ctx,
+void __cdecl EVP_PKEY_meth_set_signctx(EVP_PKEY_METHOD *pmeth,
+                               int (__cdecl *signctx_init) (EVP_PKEY_CTX *ctx,
                                                     EVP_MD_CTX *mctx),
-                               int (*signctx) (EVP_PKEY_CTX *ctx,
+                               int (__cdecl *signctx) (EVP_PKEY_CTX *ctx,
                                                unsigned char *sig,
                                                size_t *siglen,
                                                EVP_MD_CTX *mctx))
@@ -585,10 +585,10 @@ void EVP_PKEY_meth_set_signctx(EVP_PKEY_METHOD *pmeth,
     pmeth->signctx = signctx;
 }
 
-void EVP_PKEY_meth_set_verifyctx(EVP_PKEY_METHOD *pmeth,
-                                 int (*verifyctx_init) (EVP_PKEY_CTX *ctx,
+void __cdecl EVP_PKEY_meth_set_verifyctx(EVP_PKEY_METHOD *pmeth,
+                                 int (__cdecl *verifyctx_init) (EVP_PKEY_CTX *ctx,
                                                         EVP_MD_CTX *mctx),
-                                 int (*verifyctx) (EVP_PKEY_CTX *ctx,
+                                 int (__cdecl *verifyctx) (EVP_PKEY_CTX *ctx,
                                                    const unsigned char *sig,
                                                    int siglen,
                                                    EVP_MD_CTX *mctx))
@@ -597,9 +597,9 @@ void EVP_PKEY_meth_set_verifyctx(EVP_PKEY_METHOD *pmeth,
     pmeth->verifyctx = verifyctx;
 }
 
-void EVP_PKEY_meth_set_encrypt(EVP_PKEY_METHOD *pmeth,
-                               int (*encrypt_init) (EVP_PKEY_CTX *ctx),
-                               int (*encryptfn) (EVP_PKEY_CTX *ctx,
+void __cdecl EVP_PKEY_meth_set_encrypt(EVP_PKEY_METHOD *pmeth,
+                               int (__cdecl *encrypt_init) (EVP_PKEY_CTX *ctx),
+                               int (__cdecl *encryptfn) (EVP_PKEY_CTX *ctx,
                                                  unsigned char *out,
                                                  size_t *outlen,
                                                  const unsigned char *in,
@@ -609,9 +609,9 @@ void EVP_PKEY_meth_set_encrypt(EVP_PKEY_METHOD *pmeth,
     pmeth->encrypt = encryptfn;
 }
 
-void EVP_PKEY_meth_set_decrypt(EVP_PKEY_METHOD *pmeth,
-                               int (*decrypt_init) (EVP_PKEY_CTX *ctx),
-                               int (*decrypt) (EVP_PKEY_CTX *ctx,
+void __cdecl EVP_PKEY_meth_set_decrypt(EVP_PKEY_METHOD *pmeth,
+                               int (__cdecl *decrypt_init) (EVP_PKEY_CTX *ctx),
+                               int (__cdecl *decrypt) (EVP_PKEY_CTX *ctx,
                                                unsigned char *out,
                                                size_t *outlen,
                                                const unsigned char *in,
@@ -621,9 +621,9 @@ void EVP_PKEY_meth_set_decrypt(EVP_PKEY_METHOD *pmeth,
     pmeth->decrypt = decrypt;
 }
 
-void EVP_PKEY_meth_set_derive(EVP_PKEY_METHOD *pmeth,
-                              int (*derive_init) (EVP_PKEY_CTX *ctx),
-                              int (*derive) (EVP_PKEY_CTX *ctx,
+void __cdecl EVP_PKEY_meth_set_derive(EVP_PKEY_METHOD *pmeth,
+                              int (__cdecl *derive_init) (EVP_PKEY_CTX *ctx),
+                              int (__cdecl *derive) (EVP_PKEY_CTX *ctx,
                                              unsigned char *key,
                                              size_t *keylen))
 {
@@ -631,10 +631,10 @@ void EVP_PKEY_meth_set_derive(EVP_PKEY_METHOD *pmeth,
     pmeth->derive = derive;
 }
 
-void EVP_PKEY_meth_set_ctrl(EVP_PKEY_METHOD *pmeth,
-                            int (*ctrl) (EVP_PKEY_CTX *ctx, int type, int p1,
+void __cdecl EVP_PKEY_meth_set_ctrl(EVP_PKEY_METHOD *pmeth,
+                            int (__cdecl *ctrl) (EVP_PKEY_CTX *ctx, int type, int p1,
                                          void *p2),
-                            int (*ctrl_str) (EVP_PKEY_CTX *ctx,
+                            int (__cdecl *ctrl_str) (EVP_PKEY_CTX *ctx,
                                              const char *type,
                                              const char *value))
 {
@@ -642,53 +642,53 @@ void EVP_PKEY_meth_set_ctrl(EVP_PKEY_METHOD *pmeth,
     pmeth->ctrl_str = ctrl_str;
 }
 
-void EVP_PKEY_meth_set_check(EVP_PKEY_METHOD *pmeth,
-                             int (*check) (EVP_PKEY *pkey))
+void __cdecl EVP_PKEY_meth_set_check(EVP_PKEY_METHOD *pmeth,
+                             int (__cdecl *check) (EVP_PKEY *pkey))
 {
     pmeth->check = check;
 }
 
-void EVP_PKEY_meth_set_public_check(EVP_PKEY_METHOD *pmeth,
-                                    int (*check) (EVP_PKEY *pkey))
+void __cdecl EVP_PKEY_meth_set_public_check(EVP_PKEY_METHOD *pmeth,
+                                    int (__cdecl *check) (EVP_PKEY *pkey))
 {
     pmeth->public_check = check;
 }
 
-void EVP_PKEY_meth_set_param_check(EVP_PKEY_METHOD *pmeth,
-                                   int (*check) (EVP_PKEY *pkey))
+void __cdecl EVP_PKEY_meth_set_param_check(EVP_PKEY_METHOD *pmeth,
+                                   int (__cdecl *check) (EVP_PKEY *pkey))
 {
     pmeth->param_check = check;
 }
 
-void EVP_PKEY_meth_set_digest_custom(EVP_PKEY_METHOD *pmeth,
-                                     int (*digest_custom) (EVP_PKEY_CTX *ctx,
+void __cdecl EVP_PKEY_meth_set_digest_custom(EVP_PKEY_METHOD *pmeth,
+                                     int (__cdecl *digest_custom) (EVP_PKEY_CTX *ctx,
                                                            EVP_MD_CTX *mctx))
 {
     pmeth->digest_custom = digest_custom;
 }
 
-void EVP_PKEY_meth_get_init(const EVP_PKEY_METHOD *pmeth,
-                            int (**pinit) (EVP_PKEY_CTX *ctx))
+void __cdecl EVP_PKEY_meth_get_init(const EVP_PKEY_METHOD *pmeth,
+                            int (__cdecl **pinit) (EVP_PKEY_CTX *ctx))
 {
     *pinit = pmeth->init;
 }
 
-void EVP_PKEY_meth_get_copy(const EVP_PKEY_METHOD *pmeth,
-                            int (**pcopy) (EVP_PKEY_CTX *dst,
+void __cdecl EVP_PKEY_meth_get_copy(const EVP_PKEY_METHOD *pmeth,
+                            int (__cdecl **pcopy) (EVP_PKEY_CTX *dst,
                                            EVP_PKEY_CTX *src))
 {
     *pcopy = pmeth->copy;
 }
 
-void EVP_PKEY_meth_get_cleanup(const EVP_PKEY_METHOD *pmeth,
-                               void (**pcleanup) (EVP_PKEY_CTX *ctx))
+void __cdecl EVP_PKEY_meth_get_cleanup(const EVP_PKEY_METHOD *pmeth,
+                               void (__cdecl **pcleanup) (EVP_PKEY_CTX *ctx))
 {
     *pcleanup = pmeth->cleanup;
 }
 
-void EVP_PKEY_meth_get_paramgen(const EVP_PKEY_METHOD *pmeth,
-                                int (**pparamgen_init) (EVP_PKEY_CTX *ctx),
-                                int (**pparamgen) (EVP_PKEY_CTX *ctx,
+void __cdecl EVP_PKEY_meth_get_paramgen(const EVP_PKEY_METHOD *pmeth,
+                                int (__cdecl **pparamgen_init) (EVP_PKEY_CTX *ctx),
+                                int (__cdecl **pparamgen) (EVP_PKEY_CTX *ctx,
                                                    EVP_PKEY *pkey))
 {
     if (pparamgen_init)
@@ -697,9 +697,9 @@ void EVP_PKEY_meth_get_paramgen(const EVP_PKEY_METHOD *pmeth,
         *pparamgen = pmeth->paramgen;
 }
 
-void EVP_PKEY_meth_get_keygen(const EVP_PKEY_METHOD *pmeth,
-                              int (**pkeygen_init) (EVP_PKEY_CTX *ctx),
-                              int (**pkeygen) (EVP_PKEY_CTX *ctx,
+void __cdecl EVP_PKEY_meth_get_keygen(const EVP_PKEY_METHOD *pmeth,
+                              int (__cdecl **pkeygen_init) (EVP_PKEY_CTX *ctx),
+                              int (__cdecl **pkeygen) (EVP_PKEY_CTX *ctx,
                                                EVP_PKEY *pkey))
 {
     if (pkeygen_init)
@@ -708,9 +708,9 @@ void EVP_PKEY_meth_get_keygen(const EVP_PKEY_METHOD *pmeth,
         *pkeygen = pmeth->keygen;
 }
 
-void EVP_PKEY_meth_get_sign(const EVP_PKEY_METHOD *pmeth,
-                            int (**psign_init) (EVP_PKEY_CTX *ctx),
-                            int (**psign) (EVP_PKEY_CTX *ctx,
+void __cdecl EVP_PKEY_meth_get_sign(const EVP_PKEY_METHOD *pmeth,
+                            int (__cdecl **psign_init) (EVP_PKEY_CTX *ctx),
+                            int (__cdecl **psign) (EVP_PKEY_CTX *ctx,
                                            unsigned char *sig, size_t *siglen,
                                            const unsigned char *tbs,
                                            size_t tbslen))
@@ -721,9 +721,9 @@ void EVP_PKEY_meth_get_sign(const EVP_PKEY_METHOD *pmeth,
         *psign = pmeth->sign;
 }
 
-void EVP_PKEY_meth_get_verify(const EVP_PKEY_METHOD *pmeth,
-                              int (**pverify_init) (EVP_PKEY_CTX *ctx),
-                              int (**pverify) (EVP_PKEY_CTX *ctx,
+void __cdecl EVP_PKEY_meth_get_verify(const EVP_PKEY_METHOD *pmeth,
+                              int (__cdecl **pverify_init) (EVP_PKEY_CTX *ctx),
+                              int (__cdecl **pverify) (EVP_PKEY_CTX *ctx,
                                                const unsigned char *sig,
                                                size_t siglen,
                                                const unsigned char *tbs,
@@ -735,10 +735,10 @@ void EVP_PKEY_meth_get_verify(const EVP_PKEY_METHOD *pmeth,
         *pverify = pmeth->verify;
 }
 
-void EVP_PKEY_meth_get_verify_recover(const EVP_PKEY_METHOD *pmeth,
-                                      int (**pverify_recover_init) (EVP_PKEY_CTX
+void __cdecl EVP_PKEY_meth_get_verify_recover(const EVP_PKEY_METHOD *pmeth,
+                                      int (__cdecl **pverify_recover_init) (EVP_PKEY_CTX
                                                                     *ctx),
-                                      int (**pverify_recover) (EVP_PKEY_CTX
+                                      int (__cdecl **pverify_recover) (EVP_PKEY_CTX
                                                                *ctx,
                                                                unsigned char
                                                                *sig,
@@ -753,10 +753,10 @@ void EVP_PKEY_meth_get_verify_recover(const EVP_PKEY_METHOD *pmeth,
         *pverify_recover = pmeth->verify_recover;
 }
 
-void EVP_PKEY_meth_get_signctx(const EVP_PKEY_METHOD *pmeth,
-                               int (**psignctx_init) (EVP_PKEY_CTX *ctx,
+void __cdecl EVP_PKEY_meth_get_signctx(const EVP_PKEY_METHOD *pmeth,
+                               int (__cdecl **psignctx_init) (EVP_PKEY_CTX *ctx,
                                                       EVP_MD_CTX *mctx),
-                               int (**psignctx) (EVP_PKEY_CTX *ctx,
+                               int (__cdecl **psignctx) (EVP_PKEY_CTX *ctx,
                                                  unsigned char *sig,
                                                  size_t *siglen,
                                                  EVP_MD_CTX *mctx))
@@ -767,10 +767,10 @@ void EVP_PKEY_meth_get_signctx(const EVP_PKEY_METHOD *pmeth,
         *psignctx = pmeth->signctx;
 }
 
-void EVP_PKEY_meth_get_verifyctx(const EVP_PKEY_METHOD *pmeth,
-                                 int (**pverifyctx_init) (EVP_PKEY_CTX *ctx,
+void __cdecl EVP_PKEY_meth_get_verifyctx(const EVP_PKEY_METHOD *pmeth,
+                                 int (__cdecl **pverifyctx_init) (EVP_PKEY_CTX *ctx,
                                                           EVP_MD_CTX *mctx),
-                                 int (**pverifyctx) (EVP_PKEY_CTX *ctx,
+                                 int (__cdecl **pverifyctx) (EVP_PKEY_CTX *ctx,
                                                      const unsigned char *sig,
                                                      int siglen,
                                                      EVP_MD_CTX *mctx))
@@ -781,9 +781,9 @@ void EVP_PKEY_meth_get_verifyctx(const EVP_PKEY_METHOD *pmeth,
         *pverifyctx = pmeth->verifyctx;
 }
 
-void EVP_PKEY_meth_get_encrypt(const EVP_PKEY_METHOD *pmeth,
-                               int (**pencrypt_init) (EVP_PKEY_CTX *ctx),
-                               int (**pencryptfn) (EVP_PKEY_CTX *ctx,
+void __cdecl EVP_PKEY_meth_get_encrypt(const EVP_PKEY_METHOD *pmeth,
+                               int (__cdecl **pencrypt_init) (EVP_PKEY_CTX *ctx),
+                               int (__cdecl **pencryptfn) (EVP_PKEY_CTX *ctx,
                                                    unsigned char *out,
                                                    size_t *outlen,
                                                    const unsigned char *in,
@@ -795,9 +795,9 @@ void EVP_PKEY_meth_get_encrypt(const EVP_PKEY_METHOD *pmeth,
         *pencryptfn = pmeth->encrypt;
 }
 
-void EVP_PKEY_meth_get_decrypt(const EVP_PKEY_METHOD *pmeth,
-                               int (**pdecrypt_init) (EVP_PKEY_CTX *ctx),
-                               int (**pdecrypt) (EVP_PKEY_CTX *ctx,
+void __cdecl EVP_PKEY_meth_get_decrypt(const EVP_PKEY_METHOD *pmeth,
+                               int (__cdecl **pdecrypt_init) (EVP_PKEY_CTX *ctx),
+                               int (__cdecl **pdecrypt) (EVP_PKEY_CTX *ctx,
                                                  unsigned char *out,
                                                  size_t *outlen,
                                                  const unsigned char *in,
@@ -809,9 +809,9 @@ void EVP_PKEY_meth_get_decrypt(const EVP_PKEY_METHOD *pmeth,
         *pdecrypt = pmeth->decrypt;
 }
 
-void EVP_PKEY_meth_get_derive(const EVP_PKEY_METHOD *pmeth,
-                              int (**pderive_init) (EVP_PKEY_CTX *ctx),
-                              int (**pderive) (EVP_PKEY_CTX *ctx,
+void __cdecl EVP_PKEY_meth_get_derive(const EVP_PKEY_METHOD *pmeth,
+                              int (__cdecl **pderive_init) (EVP_PKEY_CTX *ctx),
+                              int (__cdecl **pderive) (EVP_PKEY_CTX *ctx,
                                                unsigned char *key,
                                                size_t *keylen))
 {
@@ -821,10 +821,10 @@ void EVP_PKEY_meth_get_derive(const EVP_PKEY_METHOD *pmeth,
         *pderive = pmeth->derive;
 }
 
-void EVP_PKEY_meth_get_ctrl(const EVP_PKEY_METHOD *pmeth,
-                            int (**pctrl) (EVP_PKEY_CTX *ctx, int type, int p1,
+void __cdecl EVP_PKEY_meth_get_ctrl(const EVP_PKEY_METHOD *pmeth,
+                            int (__cdecl **pctrl) (EVP_PKEY_CTX *ctx, int type, int p1,
                                            void *p2),
-                            int (**pctrl_str) (EVP_PKEY_CTX *ctx,
+                            int (__cdecl **pctrl_str) (EVP_PKEY_CTX *ctx,
                                                const char *type,
                                                const char *value))
 {
@@ -834,29 +834,29 @@ void EVP_PKEY_meth_get_ctrl(const EVP_PKEY_METHOD *pmeth,
         *pctrl_str = pmeth->ctrl_str;
 }
 
-void EVP_PKEY_meth_get_check(const EVP_PKEY_METHOD *pmeth,
-                             int (**pcheck) (EVP_PKEY *pkey))
+void __cdecl EVP_PKEY_meth_get_check(const EVP_PKEY_METHOD *pmeth,
+                             int (__cdecl **pcheck) (EVP_PKEY *pkey))
 {
     if (pcheck != NULL)
         *pcheck = pmeth->check;
 }
 
-void EVP_PKEY_meth_get_public_check(const EVP_PKEY_METHOD *pmeth,
-                                    int (**pcheck) (EVP_PKEY *pkey))
+void __cdecl EVP_PKEY_meth_get_public_check(const EVP_PKEY_METHOD *pmeth,
+                                    int (__cdecl **pcheck) (EVP_PKEY *pkey))
 {
     if (pcheck != NULL)
         *pcheck = pmeth->public_check;
 }
 
-void EVP_PKEY_meth_get_param_check(const EVP_PKEY_METHOD *pmeth,
-                                   int (**pcheck) (EVP_PKEY *pkey))
+void __cdecl EVP_PKEY_meth_get_param_check(const EVP_PKEY_METHOD *pmeth,
+                                   int (__cdecl **pcheck) (EVP_PKEY *pkey))
 {
     if (pcheck != NULL)
         *pcheck = pmeth->param_check;
 }
 
-void EVP_PKEY_meth_get_digest_custom(EVP_PKEY_METHOD *pmeth,
-                                     int (**pdigest_custom) (EVP_PKEY_CTX *ctx,
+void __cdecl EVP_PKEY_meth_get_digest_custom(EVP_PKEY_METHOD *pmeth,
+                                     int (__cdecl **pdigest_custom) (EVP_PKEY_CTX *ctx,
                                                              EVP_MD_CTX *mctx))
 {
     if (pdigest_custom != NULL)
diff --git a/crypto/ex_data.c b/crypto/ex_data.c
index 08dc7c4073..2fba12a396 100644
--- a/crypto/ex_data.c
+++ b/crypto/ex_data.c
@@ -79,7 +79,7 @@ static EX_CALLBACKS *get_and_lock(int class_index)
     return ip;
 }
 
-static void cleanup_cb(EX_CALLBACK *funcs)
+static void __cdecl cleanup_cb(EX_CALLBACK *funcs)
 {
     OPENSSL_free(funcs);
 }
@@ -90,7 +90,7 @@ static void cleanup_cb(EX_CALLBACK *funcs)
  * called under potential race-conditions anyway (it's for program shutdown
  * after all).
  */
-void crypto_cleanup_all_ex_data_int(void)
+void __cdecl crypto_cleanup_all_ex_data_int(void)
 {
     int i;
 
@@ -110,24 +110,24 @@ void crypto_cleanup_all_ex_data_int(void)
  * Unregister a new index by replacing the callbacks with no-ops.
  * Any in-use instances are leaked.
  */
-static void dummy_new(void *parent, void *ptr, CRYPTO_EX_DATA *ad, int idx,
+static void __cdecl dummy_new(void *parent, void *ptr, CRYPTO_EX_DATA *ad, int idx,
                      long argl, void *argp)
 {
 }
 
-static void dummy_free(void *parent, void *ptr, CRYPTO_EX_DATA *ad, int idx,
+static void __cdecl dummy_free(void *parent, void *ptr, CRYPTO_EX_DATA *ad, int idx,
                        long argl, void *argp)
 {
 }
 
-static int dummy_dup(CRYPTO_EX_DATA *to, const CRYPTO_EX_DATA *from,
+static int __cdecl dummy_dup(CRYPTO_EX_DATA *to, const CRYPTO_EX_DATA *from,
                      void *from_d, int idx,
                      long argl, void *argp)
 {
     return 1;
 }
 
-int CRYPTO_free_ex_index(int class_index, int idx)
+int __cdecl CRYPTO_free_ex_index(int class_index, int idx)
 {
     EX_CALLBACKS *ip = get_and_lock(class_index);
     EX_CALLBACK *a;
@@ -152,7 +152,7 @@ err:
 /*
  * Register a new index.
  */
-int CRYPTO_get_ex_new_index(int class_index, long argl, void *argp,
+int __cdecl CRYPTO_get_ex_new_index(int class_index, long argl, void *argp,
                             CRYPTO_EX_new *new_func, CRYPTO_EX_dup *dup_func,
                             CRYPTO_EX_free *free_func)
 {
@@ -205,7 +205,7 @@ int CRYPTO_get_ex_new_index(int class_index, long argl, void *argp,
  * in the lock, then using them outside the lock. Note this only applies
  * to the global "ex_data" state (ie. class definitions), not 'ad' itself.
  */
-int CRYPTO_new_ex_data(int class_index, void *obj, CRYPTO_EX_DATA *ad)
+int __cdecl CRYPTO_new_ex_data(int class_index, void *obj, CRYPTO_EX_DATA *ad)
 {
     int mx, i;
     void *ptr;
@@ -250,7 +250,7 @@ int CRYPTO_new_ex_data(int class_index, void *obj, CRYPTO_EX_DATA *ad)
  * Duplicate a CRYPTO_EX_DATA variable - including calling dup() callbacks
  * for each index in the class used by this variable
  */
-int CRYPTO_dup_ex_data(int class_index, CRYPTO_EX_DATA *to,
+int __cdecl CRYPTO_dup_ex_data(int class_index, CRYPTO_EX_DATA *to,
                        const CRYPTO_EX_DATA *from)
 {
     int mx, j, i;
@@ -317,7 +317,7 @@ int CRYPTO_dup_ex_data(int class_index, CRYPTO_EX_DATA *to,
  * Cleanup a CRYPTO_EX_DATA variable - including calling free() callbacks for
  * each index in the class used by this variable
  */
-void CRYPTO_free_ex_data(int class_index, void *obj, CRYPTO_EX_DATA *ad)
+void __cdecl CRYPTO_free_ex_data(int class_index, void *obj, CRYPTO_EX_DATA *ad)
 {
     int mx, i;
     EX_CALLBACKS *ip;
@@ -366,7 +366,7 @@ void CRYPTO_free_ex_data(int class_index, void *obj, CRYPTO_EX_DATA *ad)
  * For a given CRYPTO_EX_DATA variable, set the value corresponding to a
  * particular index in the class used by this variable
  */
-int CRYPTO_set_ex_data(CRYPTO_EX_DATA *ad, int idx, void *val)
+int __cdecl CRYPTO_set_ex_data(CRYPTO_EX_DATA *ad, int idx, void *val)
 {
     int i;
 
@@ -391,7 +391,7 @@ int CRYPTO_set_ex_data(CRYPTO_EX_DATA *ad, int idx, void *val)
  * For a given CRYPTO_EX_DATA_ variable, get the value corresponding to a
  * particular index in the class used by this variable
  */
-void *CRYPTO_get_ex_data(const CRYPTO_EX_DATA *ad, int idx)
+void * __cdecl CRYPTO_get_ex_data(const CRYPTO_EX_DATA *ad, int idx)
 {
     if (ad->sk == NULL || idx >= sk_void_num(ad->sk))
         return NULL;
diff --git a/crypto/getenv.c b/crypto/getenv.c
index 7e98b645b0..42948cff27 100644
--- a/crypto/getenv.c
+++ b/crypto/getenv.c
@@ -14,7 +14,7 @@
 #include <stdlib.h>
 #include "internal/cryptlib.h"
 
-char *ossl_safe_getenv(const char *name)
+char * __cdecl ossl_safe_getenv(const char *name)
 {
 #if defined(__GLIBC__) && defined(__GLIBC_PREREQ)
 # if __GLIBC_PREREQ(2, 17)
diff --git a/crypto/hmac/hm_ameth.c b/crypto/hmac/hm_ameth.c
index fa204e9068..bc3bf73d36 100644
--- a/crypto/hmac/hm_ameth.c
+++ b/crypto/hmac/hm_ameth.c
@@ -18,12 +18,12 @@
  * length and to free up an HMAC key.
  */
 
-static int hmac_size(const EVP_PKEY *pkey)
+static int __cdecl hmac_size(const EVP_PKEY *pkey)
 {
     return EVP_MAX_MD_SIZE;
 }
 
-static void hmac_key_free(EVP_PKEY *pkey)
+static void __cdecl hmac_key_free(EVP_PKEY *pkey)
 {
     ASN1_OCTET_STRING *os = EVP_PKEY_get0(pkey);
     if (os) {
@@ -33,7 +33,7 @@ static void hmac_key_free(EVP_PKEY *pkey)
     }
 }
 
-static int hmac_pkey_ctrl(EVP_PKEY *pkey, int op, long arg1, void *arg2)
+static int __cdecl hmac_pkey_ctrl(EVP_PKEY *pkey, int op, long arg1, void *arg2)
 {
     switch (op) {
     case ASN1_PKEY_CTRL_DEFAULT_MD_NID:
@@ -45,12 +45,12 @@ static int hmac_pkey_ctrl(EVP_PKEY *pkey, int op, long arg1, void *arg2)
     }
 }
 
-static int hmac_pkey_public_cmp(const EVP_PKEY *a, const EVP_PKEY *b)
+static int __cdecl hmac_pkey_public_cmp(const EVP_PKEY *a, const EVP_PKEY *b)
 {
     return ASN1_OCTET_STRING_cmp(EVP_PKEY_get0(a), EVP_PKEY_get0(b));
 }
 
-static int hmac_set_priv_key(EVP_PKEY *pkey, const unsigned char *priv,
+static int __cdecl hmac_set_priv_key(EVP_PKEY *pkey, const unsigned char *priv,
                              size_t len)
 {
     ASN1_OCTET_STRING *os;
@@ -72,7 +72,7 @@ static int hmac_set_priv_key(EVP_PKEY *pkey, const unsigned char *priv,
     return 1;
 }
 
-static int hmac_get_priv_key(const EVP_PKEY *pkey, unsigned char *priv,
+static int __cdecl hmac_get_priv_key(const EVP_PKEY *pkey, unsigned char *priv,
                              size_t *len)
 {
     ASN1_OCTET_STRING *os = (ASN1_OCTET_STRING *)pkey->pkey.ptr;
diff --git a/crypto/hmac/hm_pmeth.c b/crypto/hmac/hm_pmeth.c
index 55dd27d63b..8d39510523 100644
--- a/crypto/hmac/hm_pmeth.c
+++ b/crypto/hmac/hm_pmeth.c
@@ -24,7 +24,7 @@ typedef struct {
     HMAC_CTX *ctx;
 } HMAC_PKEY_CTX;
 
-static int pkey_hmac_init(EVP_PKEY_CTX *ctx)
+static int __cdecl pkey_hmac_init(EVP_PKEY_CTX *ctx)
 {
     HMAC_PKEY_CTX *hctx;
 
@@ -45,9 +45,9 @@ static int pkey_hmac_init(EVP_PKEY_CTX *ctx)
     return 1;
 }
 
-static void pkey_hmac_cleanup(EVP_PKEY_CTX *ctx);
+static void __cdecl pkey_hmac_cleanup(EVP_PKEY_CTX *ctx);
 
-static int pkey_hmac_copy(EVP_PKEY_CTX *dst, EVP_PKEY_CTX *src)
+static int __cdecl pkey_hmac_copy(EVP_PKEY_CTX *dst, EVP_PKEY_CTX *src)
 {
     HMAC_PKEY_CTX *sctx, *dctx;
 
@@ -71,7 +71,7 @@ err:
     return 0;
 }
 
-static void pkey_hmac_cleanup(EVP_PKEY_CTX *ctx)
+static void __cdecl pkey_hmac_cleanup(EVP_PKEY_CTX *ctx)
 {
     HMAC_PKEY_CTX *hctx = EVP_PKEY_CTX_get_data(ctx);
 
@@ -83,7 +83,7 @@ static void pkey_hmac_cleanup(EVP_PKEY_CTX *ctx)
     }
 }
 
-static int pkey_hmac_keygen(EVP_PKEY_CTX *ctx, EVP_PKEY *pkey)
+static int __cdecl pkey_hmac_keygen(EVP_PKEY_CTX *ctx, EVP_PKEY *pkey)
 {
     ASN1_OCTET_STRING *hkey = NULL;
     HMAC_PKEY_CTX *hctx = ctx->data;
@@ -97,7 +97,7 @@ static int pkey_hmac_keygen(EVP_PKEY_CTX *ctx, EVP_PKEY *pkey)
     return 1;
 }
 
-static int int_update(EVP_MD_CTX *ctx, const void *data, size_t count)
+static int __cdecl int_update(EVP_MD_CTX *ctx, const void *data, size_t count)
 {
     HMAC_PKEY_CTX *hctx = EVP_MD_CTX_pkey_ctx(ctx)->data;
     if (!HMAC_Update(hctx->ctx, data, count))
@@ -105,7 +105,7 @@ static int int_update(EVP_MD_CTX *ctx, const void *data, size_t count)
     return 1;
 }
 
-static int hmac_signctx_init(EVP_PKEY_CTX *ctx, EVP_MD_CTX *mctx)
+static int __cdecl hmac_signctx_init(EVP_PKEY_CTX *ctx, EVP_MD_CTX *mctx)
 {
     HMAC_PKEY_CTX *hctx = ctx->data;
     HMAC_CTX_set_flags(hctx->ctx,
@@ -115,7 +115,7 @@ static int hmac_signctx_init(EVP_PKEY_CTX *ctx, EVP_MD_CTX *mctx)
     return 1;
 }
 
-static int hmac_signctx(EVP_PKEY_CTX *ctx, unsigned char *sig, size_t *siglen,
+static int __cdecl hmac_signctx(EVP_PKEY_CTX *ctx, unsigned char *sig, size_t *siglen,
                         EVP_MD_CTX *mctx)
 {
     unsigned int hlen;
@@ -134,7 +134,7 @@ static int hmac_signctx(EVP_PKEY_CTX *ctx, unsigned char *sig, size_t *siglen,
     return 1;
 }
 
-static int pkey_hmac_ctrl(EVP_PKEY_CTX *ctx, int type, int p1, void *p2)
+static int __cdecl pkey_hmac_ctrl(EVP_PKEY_CTX *ctx, int type, int p1, void *p2)
 {
     HMAC_PKEY_CTX *hctx = ctx->data;
     ASN1_OCTET_STRING *key;
@@ -165,7 +165,7 @@ static int pkey_hmac_ctrl(EVP_PKEY_CTX *ctx, int type, int p1, void *p2)
     return 1;
 }
 
-static int pkey_hmac_ctrl_str(EVP_PKEY_CTX *ctx,
+static int __cdecl pkey_hmac_ctrl_str(EVP_PKEY_CTX *ctx,
                               const char *type, const char *value)
 {
     if (!value) {
diff --git a/crypto/hmac/hmac.c b/crypto/hmac/hmac.c
index 0c0a7133fb..1ad3c7602b 100644
--- a/crypto/hmac/hmac.c
+++ b/crypto/hmac/hmac.c
@@ -15,7 +15,7 @@
 #include <openssl/opensslconf.h>
 #include "hmac_lcl.h"
 
-int HMAC_Init_ex(HMAC_CTX *ctx, const void *key, int len,
+int __cdecl HMAC_Init_ex(HMAC_CTX *ctx, const void *key, int len,
                  const EVP_MD *md, ENGINE *impl)
 {
     int rv = 0;
@@ -95,14 +95,14 @@ int HMAC_Init(HMAC_CTX *ctx, const void *key, int len, const EVP_MD *md)
 }
 #endif
 
-int HMAC_Update(HMAC_CTX *ctx, const unsigned char *data, size_t len)
+int __cdecl HMAC_Update(HMAC_CTX *ctx, const unsigned char *data, size_t len)
 {
     if (!ctx->md)
         return 0;
     return EVP_DigestUpdate(ctx->md_ctx, data, len);
 }
 
-int HMAC_Final(HMAC_CTX *ctx, unsigned char *md, unsigned int *len)
+int __cdecl HMAC_Final(HMAC_CTX *ctx, unsigned char *md, unsigned int *len)
 {
     unsigned int i;
     unsigned char buf[EVP_MAX_MD_SIZE];
@@ -123,14 +123,14 @@ int HMAC_Final(HMAC_CTX *ctx, unsigned char *md, unsigned int *len)
     return 0;
 }
 
-size_t HMAC_size(const HMAC_CTX *ctx)
+size_t __cdecl HMAC_size(const HMAC_CTX *ctx)
 {
     int size = EVP_MD_size((ctx)->md);
 
     return (size < 0) ? 0 : size;
 }
 
-HMAC_CTX *HMAC_CTX_new(void)
+HMAC_CTX * __cdecl HMAC_CTX_new(void)
 {
     HMAC_CTX *ctx = OPENSSL_zalloc(sizeof(HMAC_CTX));
 
@@ -153,7 +153,7 @@ static void hmac_ctx_cleanup(HMAC_CTX *ctx)
     OPENSSL_cleanse(ctx->key, sizeof(ctx->key));
 }
 
-void HMAC_CTX_free(HMAC_CTX *ctx)
+void __cdecl HMAC_CTX_free(HMAC_CTX *ctx)
 {
     if (ctx != NULL) {
         hmac_ctx_cleanup(ctx);
@@ -181,7 +181,7 @@ static int hmac_ctx_alloc_mds(HMAC_CTX *ctx)
     return 1;
 }
 
-int HMAC_CTX_reset(HMAC_CTX *ctx)
+int __cdecl HMAC_CTX_reset(HMAC_CTX *ctx)
 {
     hmac_ctx_cleanup(ctx);
     if (!hmac_ctx_alloc_mds(ctx)) {
@@ -191,7 +191,7 @@ int HMAC_CTX_reset(HMAC_CTX *ctx)
     return 1;
 }
 
-int HMAC_CTX_copy(HMAC_CTX *dctx, HMAC_CTX *sctx)
+int __cdecl HMAC_CTX_copy(HMAC_CTX *dctx, HMAC_CTX *sctx)
 {
     if (!hmac_ctx_alloc_mds(dctx))
         goto err;
@@ -210,7 +210,7 @@ int HMAC_CTX_copy(HMAC_CTX *dctx, HMAC_CTX *sctx)
     return 0;
 }
 
-unsigned char *HMAC(const EVP_MD *evp_md, const void *key, int key_len,
+unsigned char * __cdecl HMAC(const EVP_MD *evp_md, const void *key, int key_len,
                     const unsigned char *d, size_t n, unsigned char *md,
                     unsigned int *md_len)
 {
@@ -241,14 +241,14 @@ unsigned char *HMAC(const EVP_MD *evp_md, const void *key, int key_len,
     return NULL;
 }
 
-void HMAC_CTX_set_flags(HMAC_CTX *ctx, unsigned long flags)
+void __cdecl HMAC_CTX_set_flags(HMAC_CTX *ctx, unsigned long flags)
 {
     EVP_MD_CTX_set_flags(ctx->i_ctx, flags);
     EVP_MD_CTX_set_flags(ctx->o_ctx, flags);
     EVP_MD_CTX_set_flags(ctx->md_ctx, flags);
 }
 
-const EVP_MD *HMAC_CTX_get_md(const HMAC_CTX *ctx)
+const EVP_MD * __cdecl HMAC_CTX_get_md(const HMAC_CTX *ctx)
 {
     return ctx->md;
 }
diff --git a/crypto/idea/i_cbc.c b/crypto/idea/i_cbc.c
index a70a8682a7..151597a3d5 100644
--- a/crypto/idea/i_cbc.c
+++ b/crypto/idea/i_cbc.c
@@ -10,7 +10,7 @@
 #include <openssl/idea.h>
 #include "idea_lcl.h"
 
-void IDEA_cbc_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl IDEA_cbc_encrypt(const unsigned char *in, unsigned char *out,
                       long length, IDEA_KEY_SCHEDULE *ks, unsigned char *iv,
                       int encrypt)
 {
@@ -86,7 +86,7 @@ void IDEA_cbc_encrypt(const unsigned char *in, unsigned char *out,
     tin[0] = tin[1] = 0;
 }
 
-void IDEA_encrypt(unsigned long *d, IDEA_KEY_SCHEDULE *key)
+void __cdecl IDEA_encrypt(unsigned long *d, IDEA_KEY_SCHEDULE *key)
 {
     register IDEA_INT *p;
     register unsigned long x1, x2, x3, x4, t0, t1, ul;
diff --git a/crypto/idea/i_cfb64.c b/crypto/idea/i_cfb64.c
index daf467eb5c..676510e6a2 100644
--- a/crypto/idea/i_cfb64.c
+++ b/crypto/idea/i_cfb64.c
@@ -16,7 +16,7 @@
  * used is contained in *num;
  */
 
-void IDEA_cfb64_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl IDEA_cfb64_encrypt(const unsigned char *in, unsigned char *out,
                         long length, IDEA_KEY_SCHEDULE *schedule,
                         unsigned char *ivec, int *num, int encrypt)
 {
diff --git a/crypto/idea/i_ecb.c b/crypto/idea/i_ecb.c
index 058d0c14c0..da98c3976b 100644
--- a/crypto/idea/i_ecb.c
+++ b/crypto/idea/i_ecb.c
@@ -11,12 +11,12 @@
 #include "idea_lcl.h"
 #include <openssl/opensslv.h>
 
-const char *IDEA_options(void)
+const char * __cdecl IDEA_options(void)
 {
     return "idea(int)";
 }
 
-void IDEA_ecb_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl IDEA_ecb_encrypt(const unsigned char *in, unsigned char *out,
                       IDEA_KEY_SCHEDULE *ks)
 {
     unsigned long l0, l1, d[2];
diff --git a/crypto/idea/i_ofb64.c b/crypto/idea/i_ofb64.c
index 997a7b88ed..6e72c6232c 100644
--- a/crypto/idea/i_ofb64.c
+++ b/crypto/idea/i_ofb64.c
@@ -15,7 +15,7 @@
  * The extra state information to record how much of the 64bit block we have
  * used is contained in *num;
  */
-void IDEA_ofb64_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl IDEA_ofb64_encrypt(const unsigned char *in, unsigned char *out,
                         long length, IDEA_KEY_SCHEDULE *schedule,
                         unsigned char *ivec, int *num)
 {
diff --git a/crypto/idea/i_skey.c b/crypto/idea/i_skey.c
index 9d9145580f..25f98c82e5 100644
--- a/crypto/idea/i_skey.c
+++ b/crypto/idea/i_skey.c
@@ -11,7 +11,7 @@
 #include "idea_lcl.h"
 
 static IDEA_INT inverse(unsigned int xin);
-void IDEA_set_encrypt_key(const unsigned char *key, IDEA_KEY_SCHEDULE *ks)
+void __cdecl IDEA_set_encrypt_key(const unsigned char *key, IDEA_KEY_SCHEDULE *ks)
 {
     int i;
     register IDEA_INT *kt, *kf, r0, r1, r2;
@@ -51,7 +51,7 @@ void IDEA_set_encrypt_key(const unsigned char *key, IDEA_KEY_SCHEDULE *ks)
     }
 }
 
-void IDEA_set_decrypt_key(IDEA_KEY_SCHEDULE *ek, IDEA_KEY_SCHEDULE *dk)
+void __cdecl IDEA_set_decrypt_key(IDEA_KEY_SCHEDULE *ek, IDEA_KEY_SCHEDULE *dk)
 {
     int r;
     register IDEA_INT *fp, *tp, t;
diff --git a/crypto/include/internal/aria.h b/crypto/include/internal/aria.h
index 355abe5398..1e9655bbf1 100644
--- a/crypto/include/internal/aria.h
+++ b/crypto/include/internal/aria.h
@@ -39,12 +39,12 @@ struct aria_key_st {
 typedef struct aria_key_st ARIA_KEY;
 
 
-int aria_set_encrypt_key(const unsigned char *userKey, const int bits,
+int __cdecl aria_set_encrypt_key(const unsigned char *userKey, const int bits,
                          ARIA_KEY *key);
-int aria_set_decrypt_key(const unsigned char *userKey, const int bits,
+int __cdecl aria_set_decrypt_key(const unsigned char *userKey, const int bits,
                          ARIA_KEY *key);
 
-void aria_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl aria_encrypt(const unsigned char *in, unsigned char *out,
                   const ARIA_KEY *key);
 
 #endif
diff --git a/crypto/include/internal/asn1_int.h b/crypto/include/internal/asn1_int.h
index 9c9b4d8974..2986726c21 100644
--- a/crypto/include/internal/asn1_int.h
+++ b/crypto/include/internal/asn1_int.h
@@ -17,52 +17,52 @@ struct evp_pkey_asn1_method_st {
     unsigned long pkey_flags;
     char *pem_str;
     char *info;
-    int (*pub_decode) (EVP_PKEY *pk, X509_PUBKEY *pub);
-    int (*pub_encode) (X509_PUBKEY *pub, const EVP_PKEY *pk);
-    int (*pub_cmp) (const EVP_PKEY *a, const EVP_PKEY *b);
-    int (*pub_print) (BIO *out, const EVP_PKEY *pkey, int indent,
+    int (__cdecl *pub_decode) (EVP_PKEY *pk, X509_PUBKEY *pub);
+    int (__cdecl *pub_encode) (X509_PUBKEY *pub, const EVP_PKEY *pk);
+    int (__cdecl *pub_cmp) (const EVP_PKEY *a, const EVP_PKEY *b);
+    int (__cdecl *pub_print) (BIO *out, const EVP_PKEY *pkey, int indent,
                       ASN1_PCTX *pctx);
-    int (*priv_decode) (EVP_PKEY *pk, const PKCS8_PRIV_KEY_INFO *p8inf);
-    int (*priv_encode) (PKCS8_PRIV_KEY_INFO *p8, const EVP_PKEY *pk);
-    int (*priv_print) (BIO *out, const EVP_PKEY *pkey, int indent,
+    int (__cdecl *priv_decode) (EVP_PKEY *pk, const PKCS8_PRIV_KEY_INFO *p8inf);
+    int (__cdecl *priv_encode) (PKCS8_PRIV_KEY_INFO *p8, const EVP_PKEY *pk);
+    int (__cdecl *priv_print) (BIO *out, const EVP_PKEY *pkey, int indent,
                        ASN1_PCTX *pctx);
-    int (*pkey_size) (const EVP_PKEY *pk);
-    int (*pkey_bits) (const EVP_PKEY *pk);
-    int (*pkey_security_bits) (const EVP_PKEY *pk);
-    int (*param_decode) (EVP_PKEY *pkey,
+    int (__cdecl *pkey_size) (const EVP_PKEY *pk);
+    int (__cdecl *pkey_bits) (const EVP_PKEY *pk);
+    int (__cdecl *pkey_security_bits) (const EVP_PKEY *pk);
+    int (__cdecl *param_decode) (EVP_PKEY *pkey,
                          const unsigned char **pder, int derlen);
-    int (*param_encode) (const EVP_PKEY *pkey, unsigned char **pder);
-    int (*param_missing) (const EVP_PKEY *pk);
-    int (*param_copy) (EVP_PKEY *to, const EVP_PKEY *from);
-    int (*param_cmp) (const EVP_PKEY *a, const EVP_PKEY *b);
-    int (*param_print) (BIO *out, const EVP_PKEY *pkey, int indent,
+    int (__cdecl *param_encode) (const EVP_PKEY *pkey, unsigned char **pder);
+    int (__cdecl *param_missing) (const EVP_PKEY *pk);
+    int (__cdecl *param_copy) (EVP_PKEY *to, const EVP_PKEY *from);
+    int (__cdecl *param_cmp) (const EVP_PKEY *a, const EVP_PKEY *b);
+    int (__cdecl *param_print) (BIO *out, const EVP_PKEY *pkey, int indent,
                         ASN1_PCTX *pctx);
-    int (*sig_print) (BIO *out,
+    int (__cdecl *sig_print) (BIO *out,
                       const X509_ALGOR *sigalg, const ASN1_STRING *sig,
                       int indent, ASN1_PCTX *pctx);
-    void (*pkey_free) (EVP_PKEY *pkey);
-    int (*pkey_ctrl) (EVP_PKEY *pkey, int op, long arg1, void *arg2);
+    void (__cdecl *pkey_free) (EVP_PKEY *pkey);
+    int (__cdecl *pkey_ctrl) (EVP_PKEY *pkey, int op, long arg1, void *arg2);
     /* Legacy functions for old PEM */
-    int (*old_priv_decode) (EVP_PKEY *pkey,
+    int (__cdecl *old_priv_decode) (EVP_PKEY *pkey,
                             const unsigned char **pder, int derlen);
-    int (*old_priv_encode) (const EVP_PKEY *pkey, unsigned char **pder);
+    int (__cdecl *old_priv_encode) (const EVP_PKEY *pkey, unsigned char **pder);
     /* Custom ASN1 signature verification */
-    int (*item_verify) (EVP_MD_CTX *ctx, const ASN1_ITEM *it, void *asn,
+    int (__cdecl *item_verify) (EVP_MD_CTX *ctx, const ASN1_ITEM *it, void *asn,
                         X509_ALGOR *a, ASN1_BIT_STRING *sig, EVP_PKEY *pkey);
-    int (*item_sign) (EVP_MD_CTX *ctx, const ASN1_ITEM *it, void *asn,
+    int (__cdecl *item_sign) (EVP_MD_CTX *ctx, const ASN1_ITEM *it, void *asn,
                       X509_ALGOR *alg1, X509_ALGOR *alg2,
                       ASN1_BIT_STRING *sig);
-    int (*siginf_set) (X509_SIG_INFO *siginf, const X509_ALGOR *alg,
+    int (__cdecl *siginf_set) (X509_SIG_INFO *siginf, const X509_ALGOR *alg,
                        const ASN1_STRING *sig);
     /* Check */
-    int (*pkey_check) (const EVP_PKEY *pk);
-    int (*pkey_public_check) (const EVP_PKEY *pk);
-    int (*pkey_param_check) (const EVP_PKEY *pk);
+    int (__cdecl *pkey_check) (const EVP_PKEY *pk);
+    int (__cdecl *pkey_public_check) (const EVP_PKEY *pk);
+    int (__cdecl *pkey_param_check) (const EVP_PKEY *pk);
     /* Get/set raw private/public key data */
-    int (*set_priv_key) (EVP_PKEY *pk, const unsigned char *priv, size_t len);
-    int (*set_pub_key) (EVP_PKEY *pk, const unsigned char *pub, size_t len);
-    int (*get_priv_key) (const EVP_PKEY *pk, unsigned char *priv, size_t *len);
-    int (*get_pub_key) (const EVP_PKEY *pk, unsigned char *pub, size_t *len);
+    int (__cdecl *set_priv_key) (EVP_PKEY *pk, const unsigned char *priv, size_t len);
+    int (__cdecl *set_pub_key) (EVP_PKEY *pk, const unsigned char *pub, size_t len);
+    int (__cdecl *get_priv_key) (const EVP_PKEY *pk, unsigned char *priv, size_t *len);
+    int (__cdecl *get_pub_key) (const EVP_PKEY *pk, unsigned char *pub, size_t *len);
 } /* EVP_PKEY_ASN1_METHOD */ ;
 
 DEFINE_STACK_OF_CONST(EVP_PKEY_ASN1_METHOD)
diff --git a/crypto/include/internal/engine.h b/crypto/include/internal/engine.h
index f80ae3ec30..09a8466ee1 100644
--- a/crypto/include/internal/engine.h
+++ b/crypto/include/internal/engine.h
@@ -9,12 +9,12 @@
 
 #include <openssl/engine.h>
 
-void engine_load_openssl_int(void);
-void engine_load_devcrypto_int(void);
-void engine_load_rdrand_int(void);
-void engine_load_dynamic_int(void);
-void engine_load_padlock_int(void);
-void engine_load_capi_int(void);
-void engine_load_dasync_int(void);
-void engine_load_afalg_int(void);
-void engine_cleanup_int(void);
+void __cdecl engine_load_openssl_int(void);
+void __cdecl engine_load_devcrypto_int(void);
+void __cdecl engine_load_rdrand_int(void);
+void __cdecl engine_load_dynamic_int(void);
+void __cdecl engine_load_padlock_int(void);
+void __cdecl engine_load_capi_int(void);
+void __cdecl engine_load_dasync_int(void);
+void __cdecl engine_load_afalg_int(void);
+void __cdecl engine_cleanup_int(void);
diff --git a/crypto/include/internal/err_int.h b/crypto/include/internal/err_int.h
index 44ac944627..7ae6f77c1a 100644
--- a/crypto/include/internal/err_int.h
+++ b/crypto/include/internal/err_int.h
@@ -10,10 +10,10 @@
 #ifndef INTERNAL_ERR_INT_H
 # define INTERNAL_ERR_INT_H
 
-int err_load_crypto_strings_int(void);
-void err_cleanup(void);
-void err_delete_thread_state(void);
-int err_shelve_state(void **);
-void err_unshelve_state(void *);
+int __cdecl err_load_crypto_strings_int(void);
+void __cdecl err_cleanup(void);
+void __cdecl err_delete_thread_state(void);
+int __cdecl err_shelve_state(void **);
+void __cdecl err_unshelve_state(void *);
 
 #endif
diff --git a/crypto/include/internal/evp_int.h b/crypto/include/internal/evp_int.h
index d86aed36f0..5a982f7b40 100644
--- a/crypto/include/internal/evp_int.h
+++ b/crypto/include/internal/evp_int.h
@@ -43,55 +43,55 @@ struct evp_pkey_ctx_st {
 struct evp_pkey_method_st {
     int pkey_id;
     int flags;
-    int (*init) (EVP_PKEY_CTX *ctx);
-    int (*copy) (EVP_PKEY_CTX *dst, EVP_PKEY_CTX *src);
-    void (*cleanup) (EVP_PKEY_CTX *ctx);
-    int (*paramgen_init) (EVP_PKEY_CTX *ctx);
-    int (*paramgen) (EVP_PKEY_CTX *ctx, EVP_PKEY *pkey);
-    int (*keygen_init) (EVP_PKEY_CTX *ctx);
-    int (*keygen) (EVP_PKEY_CTX *ctx, EVP_PKEY *pkey);
-    int (*sign_init) (EVP_PKEY_CTX *ctx);
-    int (*sign) (EVP_PKEY_CTX *ctx, unsigned char *sig, size_t *siglen,
+    int (__cdecl *init) (EVP_PKEY_CTX *ctx);
+    int (__cdecl *copy) (EVP_PKEY_CTX *dst, EVP_PKEY_CTX *src);
+    void (__cdecl *cleanup) (EVP_PKEY_CTX *ctx);
+    int (__cdecl *paramgen_init) (EVP_PKEY_CTX *ctx);
+    int (__cdecl *paramgen) (EVP_PKEY_CTX *ctx, EVP_PKEY *pkey);
+    int (__cdecl *keygen_init) (EVP_PKEY_CTX *ctx);
+    int (__cdecl *keygen) (EVP_PKEY_CTX *ctx, EVP_PKEY *pkey);
+    int (__cdecl *sign_init) (EVP_PKEY_CTX *ctx);
+    int (__cdecl *sign) (EVP_PKEY_CTX *ctx, unsigned char *sig, size_t *siglen,
                  const unsigned char *tbs, size_t tbslen);
-    int (*verify_init) (EVP_PKEY_CTX *ctx);
-    int (*verify) (EVP_PKEY_CTX *ctx,
+    int (__cdecl *verify_init) (EVP_PKEY_CTX *ctx);
+    int (__cdecl *verify) (EVP_PKEY_CTX *ctx,
                    const unsigned char *sig, size_t siglen,
                    const unsigned char *tbs, size_t tbslen);
-    int (*verify_recover_init) (EVP_PKEY_CTX *ctx);
-    int (*verify_recover) (EVP_PKEY_CTX *ctx,
+    int (__cdecl *verify_recover_init) (EVP_PKEY_CTX *ctx);
+    int (__cdecl *verify_recover) (EVP_PKEY_CTX *ctx,
                            unsigned char *rout, size_t *routlen,
                            const unsigned char *sig, size_t siglen);
-    int (*signctx_init) (EVP_PKEY_CTX *ctx, EVP_MD_CTX *mctx);
-    int (*signctx) (EVP_PKEY_CTX *ctx, unsigned char *sig, size_t *siglen,
+    int (__cdecl *signctx_init) (EVP_PKEY_CTX *ctx, EVP_MD_CTX *mctx);
+    int (__cdecl *signctx) (EVP_PKEY_CTX *ctx, unsigned char *sig, size_t *siglen,
                     EVP_MD_CTX *mctx);
-    int (*verifyctx_init) (EVP_PKEY_CTX *ctx, EVP_MD_CTX *mctx);
-    int (*verifyctx) (EVP_PKEY_CTX *ctx, const unsigned char *sig, int siglen,
+    int (__cdecl *verifyctx_init) (EVP_PKEY_CTX *ctx, EVP_MD_CTX *mctx);
+    int (__cdecl *verifyctx) (EVP_PKEY_CTX *ctx, const unsigned char *sig, int siglen,
                       EVP_MD_CTX *mctx);
-    int (*encrypt_init) (EVP_PKEY_CTX *ctx);
-    int (*encrypt) (EVP_PKEY_CTX *ctx, unsigned char *out, size_t *outlen,
+    int (__cdecl *encrypt_init) (EVP_PKEY_CTX *ctx);
+    int (__cdecl *encrypt) (EVP_PKEY_CTX *ctx, unsigned char *out, size_t *outlen,
                     const unsigned char *in, size_t inlen);
-    int (*decrypt_init) (EVP_PKEY_CTX *ctx);
-    int (*decrypt) (EVP_PKEY_CTX *ctx, unsigned char *out, size_t *outlen,
+    int (__cdecl *decrypt_init) (EVP_PKEY_CTX *ctx);
+    int (__cdecl *decrypt) (EVP_PKEY_CTX *ctx, unsigned char *out, size_t *outlen,
                     const unsigned char *in, size_t inlen);
-    int (*derive_init) (EVP_PKEY_CTX *ctx);
-    int (*derive) (EVP_PKEY_CTX *ctx, unsigned char *key, size_t *keylen);
-    int (*ctrl) (EVP_PKEY_CTX *ctx, int type, int p1, void *p2);
-    int (*ctrl_str) (EVP_PKEY_CTX *ctx, const char *type, const char *value);
-    int (*digestsign) (EVP_MD_CTX *ctx, unsigned char *sig, size_t *siglen,
+    int (__cdecl *derive_init) (EVP_PKEY_CTX *ctx);
+    int (__cdecl *derive) (EVP_PKEY_CTX *ctx, unsigned char *key, size_t *keylen);
+    int (__cdecl *ctrl) (EVP_PKEY_CTX *ctx, int type, int p1, void *p2);
+    int (__cdecl *ctrl_str) (EVP_PKEY_CTX *ctx, const char *type, const char *value);
+    int (__cdecl *digestsign) (EVP_MD_CTX *ctx, unsigned char *sig, size_t *siglen,
                        const unsigned char *tbs, size_t tbslen);
-    int (*digestverify) (EVP_MD_CTX *ctx, const unsigned char *sig,
+    int (__cdecl *digestverify) (EVP_MD_CTX *ctx, const unsigned char *sig,
                          size_t siglen, const unsigned char *tbs,
                          size_t tbslen);
-    int (*check) (EVP_PKEY *pkey);
-    int (*public_check) (EVP_PKEY *pkey);
-    int (*param_check) (EVP_PKEY *pkey);
+    int (__cdecl *check) (EVP_PKEY *pkey);
+    int (__cdecl *public_check) (EVP_PKEY *pkey);
+    int (__cdecl *param_check) (EVP_PKEY *pkey);
 
-    int (*digest_custom) (EVP_PKEY_CTX *ctx, EVP_MD_CTX *mctx);
+    int (__cdecl *digest_custom) (EVP_PKEY_CTX *ctx, EVP_MD_CTX *mctx);
 } /* EVP_PKEY_METHOD */ ;
 
 DEFINE_STACK_OF_CONST(EVP_PKEY_METHOD)
 
-void evp_pkey_set_cb_translate(BN_GENCB *cb, EVP_PKEY_CTX *ctx);
+void __cdecl evp_pkey_set_cb_translate(BN_GENCB *cb, EVP_PKEY_CTX *ctx);
 
 extern const EVP_PKEY_METHOD cmac_pkey_meth;
 extern const EVP_PKEY_METHOD dh_pkey_meth;
@@ -117,15 +117,15 @@ struct evp_md_st {
     int pkey_type;
     int md_size;
     unsigned long flags;
-    int (*init) (EVP_MD_CTX *ctx);
-    int (*update) (EVP_MD_CTX *ctx, const void *data, size_t count);
-    int (*final) (EVP_MD_CTX *ctx, unsigned char *md);
-    int (*copy) (EVP_MD_CTX *to, const EVP_MD_CTX *from);
-    int (*cleanup) (EVP_MD_CTX *ctx);
+    int (__cdecl *init) (EVP_MD_CTX *ctx);
+    int (__cdecl *update) (EVP_MD_CTX *ctx, const void *data, size_t count);
+    int (__cdecl *final) (EVP_MD_CTX *ctx, unsigned char *md);
+    int (__cdecl *copy) (EVP_MD_CTX *to, const EVP_MD_CTX *from);
+    int (__cdecl *cleanup) (EVP_MD_CTX *ctx);
     int block_size;
     int ctx_size;               /* how big does the ctx->md_data need to be */
     /* control function */
-    int (*md_ctrl) (EVP_MD_CTX *ctx, int cmd, int p1, void *p2);
+    int (__cdecl *md_ctrl) (EVP_MD_CTX *ctx, int cmd, int p1, void *p2);
 } /* EVP_MD */ ;
 
 struct evp_cipher_st {
@@ -137,21 +137,21 @@ struct evp_cipher_st {
     /* Various flags */
     unsigned long flags;
     /* init key */
-    int (*init) (EVP_CIPHER_CTX *ctx, const unsigned char *key,
+    int (__cdecl *init) (EVP_CIPHER_CTX *ctx, const unsigned char *key,
                  const unsigned char *iv, int enc);
     /* encrypt/decrypt data */
     int (*do_cipher) (EVP_CIPHER_CTX *ctx, unsigned char *out,
                       const unsigned char *in, size_t inl);
     /* cleanup ctx */
-    int (*cleanup) (EVP_CIPHER_CTX *);
+    int (__cdecl *cleanup) (EVP_CIPHER_CTX *);
     /* how big ctx->cipher_data needs to be */
     int ctx_size;
     /* Populate a ASN1_TYPE with parameters */
-    int (*set_asn1_parameters) (EVP_CIPHER_CTX *, ASN1_TYPE *);
+    int (__cdecl *set_asn1_parameters) (EVP_CIPHER_CTX *, ASN1_TYPE *);
     /* Get parameters from a ASN1_TYPE */
-    int (*get_asn1_parameters) (EVP_CIPHER_CTX *, ASN1_TYPE *);
+    int (__cdecl *get_asn1_parameters) (EVP_CIPHER_CTX *, ASN1_TYPE *);
     /* Miscellaneous operations */
-    int (*ctrl) (EVP_CIPHER_CTX *, int type, int arg, void *ptr);
+    int (__cdecl *ctrl) (EVP_CIPHER_CTX *, int type, int arg, void *ptr);
     /* Application data */
     void *app_data;
 } /* EVP_CIPHER */ ;
@@ -258,7 +258,7 @@ static const EVP_CIPHER cname##_##mode = { \
         ctrl, \
         NULL \
 }; \
-const EVP_CIPHER *EVP_##cname##_##mode(void) { return &cname##_##mode; }
+const EVP_CIPHER * __cdecl EVP_##cname##_##mode(void) { return &cname##_##mode; }
 
 #define BLOCK_CIPHER_def_cbc(cname, kstruct, nid, block_size, key_len, \
                              iv_len, flags, init_key, cleanup, set_asn1, \
diff --git a/crypto/include/internal/md32_common.h b/crypto/include/internal/md32_common.h
index 1124e9c24b..5f54c7a6b8 100644
--- a/crypto/include/internal/md32_common.h
+++ b/crypto/include/internal/md32_common.h
@@ -125,7 +125,7 @@
  * Time for some action :-)
  */
 
-int HASH_UPDATE(HASH_CTX *c, const void *data_, size_t len)
+int __cdecl HASH_UPDATE(HASH_CTX *c, const void *data_, size_t len)
 {
     const unsigned char *data = data_;
     unsigned char *p;
@@ -183,12 +183,12 @@ int HASH_UPDATE(HASH_CTX *c, const void *data_, size_t len)
     return 1;
 }
 
-void HASH_TRANSFORM(HASH_CTX *c, const unsigned char *data)
+void __cdecl HASH_TRANSFORM(HASH_CTX *c, const unsigned char *data)
 {
     HASH_BLOCK_DATA_ORDER(c, data, 1);
 }
 
-int HASH_FINAL(unsigned char *md, HASH_CTX *c)
+int __cdecl HASH_FINAL(unsigned char *md, HASH_CTX *c)
 {
     unsigned char *p = (unsigned char *)c->data;
     size_t n = c->num;
diff --git a/crypto/include/internal/sm3.h b/crypto/include/internal/sm3.h
index 27eb471c28..f9fda6966d 100644
--- a/crypto/include/internal/sm3.h
+++ b/crypto/include/internal/sm3.h
@@ -30,9 +30,9 @@ typedef struct SM3state_st {
    unsigned int num;
 } SM3_CTX;
 
-int sm3_init(SM3_CTX *c);
-int sm3_update(SM3_CTX *c, const void *data, size_t len);
-int sm3_final(unsigned char *md, SM3_CTX *c);
+int __cdecl sm3_init(SM3_CTX *c);
+int __cdecl sm3_update(SM3_CTX *c, const void *data, size_t len);
+int __cdecl sm3_final(unsigned char *md, SM3_CTX *c);
 
 void sm3_block_data_order(SM3_CTX *c, const void *p, size_t num);
 
diff --git a/crypto/include/internal/x509_int.h b/crypto/include/internal/x509_int.h
index b53c2b03c3..a3c0de14de 100644
--- a/crypto/include/internal/x509_int.h
+++ b/crypto/include/internal/x509_int.h
@@ -204,26 +204,26 @@ struct x509_store_ctx_st {      /* X509_STORE_CTX */
     void *other_ctx;
     /* Callbacks for various operations */
     /* called to verify a certificate */
-    int (*verify) (X509_STORE_CTX *ctx);
+    int (__cdecl *verify) (X509_STORE_CTX *ctx);
     /* error callback */
     int (*verify_cb) (int ok, X509_STORE_CTX *ctx);
     /* get issuers cert from ctx */
-    int (*get_issuer) (X509 **issuer, X509_STORE_CTX *ctx, X509 *x);
+    int (__cdecl *get_issuer) (X509 **issuer, X509_STORE_CTX *ctx, X509 *x);
     /* check issued */
-    int (*check_issued) (X509_STORE_CTX *ctx, X509 *x, X509 *issuer);
+    int (__cdecl *check_issued) (X509_STORE_CTX *ctx, X509 *x, X509 *issuer);
     /* Check revocation status of chain */
-    int (*check_revocation) (X509_STORE_CTX *ctx);
+    int (__cdecl *check_revocation) (X509_STORE_CTX *ctx);
     /* retrieve CRL */
-    int (*get_crl) (X509_STORE_CTX *ctx, X509_CRL **crl, X509 *x);
+    int (__cdecl *get_crl) (X509_STORE_CTX *ctx, X509_CRL **crl, X509 *x);
     /* Check CRL validity */
-    int (*check_crl) (X509_STORE_CTX *ctx, X509_CRL *crl);
+    int (__cdecl *check_crl) (X509_STORE_CTX *ctx, X509_CRL *crl);
     /* Check certificate against CRL */
-    int (*cert_crl) (X509_STORE_CTX *ctx, X509_CRL *crl, X509 *x);
+    int (__cdecl *cert_crl) (X509_STORE_CTX *ctx, X509_CRL *crl, X509 *x);
     /* Check policy status of the chain */
-    int (*check_policy) (X509_STORE_CTX *ctx);
-    STACK_OF(X509) *(*lookup_certs) (X509_STORE_CTX *ctx, X509_NAME *nm);
-    STACK_OF(X509_CRL) *(*lookup_crls) (X509_STORE_CTX *ctx, X509_NAME *nm);
-    int (*cleanup) (X509_STORE_CTX *ctx);
+    int (__cdecl *check_policy) (X509_STORE_CTX *ctx);
+    STACK_OF(X509) *(__cdecl *lookup_certs) (X509_STORE_CTX *ctx, X509_NAME *nm);
+    STACK_OF(X509_CRL) *(__cdecl *lookup_crls) (X509_STORE_CTX *ctx, X509_NAME *nm);
+    int (__cdecl *cleanup) (X509_STORE_CTX *ctx);
     /* The following is built up */
     /* if 0, rebuild chain */
     int valid;
diff --git a/crypto/init.c b/crypto/init.c
index 9fc0e8ef68..a00a685cbe 100644
--- a/crypto/init.c
+++ b/crypto/init.c
@@ -49,9 +49,9 @@ static union {
     CRYPTO_THREAD_LOCAL value;
 } destructor_key = { -1 };
 
-static void ossl_init_thread_stop(struct thread_local_inits_st *locals);
+static void __cdecl ossl_init_thread_stop(struct thread_local_inits_st *locals);
 
-static void ossl_init_thread_destructor(void *local)
+static void __cdecl ossl_init_thread_destructor(void *local)
 {
     ossl_init_thread_stop((struct thread_local_inits_st *)local);
 }
@@ -77,7 +77,7 @@ static struct thread_local_inits_st *ossl_init_get_thread_local(int alloc)
 
 typedef struct ossl_init_stop_st OPENSSL_INIT_STOP;
 struct ossl_init_stop_st {
-    void (*handler)(void);
+    void (__cdecl *handler)(void);
     OPENSSL_INIT_STOP *next;
 };
 
@@ -119,7 +119,7 @@ err:
 
 static CRYPTO_ONCE register_atexit = CRYPTO_ONCE_STATIC_INIT;
 #if !defined(OPENSSL_SYS_UEFI) && defined(_WIN32)
-static int win32atexit(void)
+static int __cdecl win32atexit(void)
 {
     OPENSSL_cleanup();
     return 0;
@@ -416,7 +416,7 @@ DEFINE_RUN_ONCE_STATIC(ossl_init_zlib)
 }
 #endif
 
-static void ossl_init_thread_stop(struct thread_local_inits_st *locals)
+static void __cdecl ossl_init_thread_stop(struct thread_local_inits_st *locals)
 {
     /* Can't do much about this */
     if (locals == NULL)
@@ -449,7 +449,7 @@ static void ossl_init_thread_stop(struct thread_local_inits_st *locals)
     OPENSSL_free(locals);
 }
 
-void OPENSSL_thread_stop(void)
+void __cdecl OPENSSL_thread_stop(void)
 {
     if (destructor_key.sane != -1)
         ossl_init_thread_stop(ossl_init_get_thread_local(0));
@@ -494,7 +494,7 @@ int ossl_init_thread_start(uint64_t opts)
     return 1;
 }
 
-void OPENSSL_cleanup(void)
+void __cdecl OPENSSL_cleanup(void)
 {
     OPENSSL_INIT_STOP *currhandler, *lasthandler;
     CRYPTO_THREAD_LOCAL key;
@@ -617,7 +617,7 @@ void OPENSSL_cleanup(void)
  * called prior to any threads making calls to any OpenSSL functions,
  * i.e. passing a non-null settings value is assumed to be single-threaded.
  */
-int OPENSSL_init_crypto(uint64_t opts, const OPENSSL_INIT_SETTINGS *settings)
+int __cdecl OPENSSL_init_crypto(uint64_t opts, const OPENSSL_INIT_SETTINGS *settings)
 {
     if (stopped) {
         if (!(opts & OPENSSL_INIT_BASE_ONLY))
@@ -759,7 +759,7 @@ int OPENSSL_init_crypto(uint64_t opts, const OPENSSL_INIT_SETTINGS *settings)
     return 1;
 }
 
-int OPENSSL_atexit(void (*handler)(void))
+int __cdecl OPENSSL_atexit(void (__cdecl *handler)(void))
 {
     OPENSSL_INIT_STOP *newhand;
 
@@ -768,7 +768,7 @@ int OPENSSL_atexit(void (*handler)(void))
     {
         union {
             void *sym;
-            void (*func)(void);
+            void (__cdecl *func)(void);
         } handlersym;
 
         handlersym.func = handler;
@@ -837,15 +837,15 @@ int OPENSSL_atexit(void (*handler)(void))
  *      http://man7.org/linux/man-pages/man7/signal-safety.7.html
  */
 
-void OPENSSL_fork_prepare(void)
+void __cdecl OPENSSL_fork_prepare(void)
 {
 }
 
-void OPENSSL_fork_parent(void)
+void __cdecl OPENSSL_fork_parent(void)
 {
 }
 
-void OPENSSL_fork_child(void)
+void __cdecl OPENSSL_fork_child(void)
 {
 }
 #endif
diff --git a/crypto/kdf/hkdf.c b/crypto/kdf/hkdf.c
index ae46fad609..a54d030786 100644
--- a/crypto/kdf/hkdf.c
+++ b/crypto/kdf/hkdf.c
@@ -44,7 +44,7 @@ typedef struct {
     size_t info_len;
 } HKDF_PKEY_CTX;
 
-static int pkey_hkdf_init(EVP_PKEY_CTX *ctx)
+static int __cdecl pkey_hkdf_init(EVP_PKEY_CTX *ctx)
 {
     HKDF_PKEY_CTX *kctx;
 
@@ -58,7 +58,7 @@ static int pkey_hkdf_init(EVP_PKEY_CTX *ctx)
     return 1;
 }
 
-static void pkey_hkdf_cleanup(EVP_PKEY_CTX *ctx)
+static void __cdecl pkey_hkdf_cleanup(EVP_PKEY_CTX *ctx)
 {
     HKDF_PKEY_CTX *kctx = ctx->data;
     OPENSSL_clear_free(kctx->salt, kctx->salt_len);
@@ -67,7 +67,7 @@ static void pkey_hkdf_cleanup(EVP_PKEY_CTX *ctx)
     OPENSSL_free(kctx);
 }
 
-static int pkey_hkdf_ctrl(EVP_PKEY_CTX *ctx, int type, int p1, void *p2)
+static int __cdecl pkey_hkdf_ctrl(EVP_PKEY_CTX *ctx, int type, int p1, void *p2)
 {
     HKDF_PKEY_CTX *kctx = ctx->data;
 
@@ -131,7 +131,7 @@ static int pkey_hkdf_ctrl(EVP_PKEY_CTX *ctx, int type, int p1, void *p2)
     }
 }
 
-static int pkey_hkdf_ctrl_str(EVP_PKEY_CTX *ctx, const char *type,
+static int __cdecl pkey_hkdf_ctrl_str(EVP_PKEY_CTX *ctx, const char *type,
                               const char *value)
 {
     if (strcmp(type, "mode") == 0) {
@@ -175,7 +175,7 @@ static int pkey_hkdf_ctrl_str(EVP_PKEY_CTX *ctx, const char *type,
     return -2;
 }
 
-static int pkey_hkdf_derive_init(EVP_PKEY_CTX *ctx)
+static int __cdecl pkey_hkdf_derive_init(EVP_PKEY_CTX *ctx)
 {
     HKDF_PKEY_CTX *kctx = ctx->data;
 
@@ -187,7 +187,7 @@ static int pkey_hkdf_derive_init(EVP_PKEY_CTX *ctx)
     return 1;
 }
 
-static int pkey_hkdf_derive(EVP_PKEY_CTX *ctx, unsigned char *key,
+static int __cdecl pkey_hkdf_derive(EVP_PKEY_CTX *ctx, unsigned char *key,
                             size_t *keylen)
 {
     HKDF_PKEY_CTX *kctx = ctx->data;
diff --git a/crypto/kdf/kdf_err.c b/crypto/kdf/kdf_err.c
index 1627c0a394..a999d0f2db 100644
--- a/crypto/kdf/kdf_err.c
+++ b/crypto/kdf/kdf_err.c
@@ -55,7 +55,7 @@ static const ERR_STRING_DATA KDF_str_reasons[] = {
 
 #endif
 
-int ERR_load_KDF_strings(void)
+int __cdecl ERR_load_KDF_strings(void)
 {
 #ifndef OPENSSL_NO_ERR
     if (ERR_func_error_string(KDF_str_functs[0].error) == NULL) {
diff --git a/crypto/kdf/scrypt.c b/crypto/kdf/scrypt.c
index 61fd390e95..3c37967869 100644
--- a/crypto/kdf/scrypt.c
+++ b/crypto/kdf/scrypt.c
@@ -17,7 +17,7 @@
 
 #ifndef OPENSSL_NO_SCRYPT
 
-static int atou64(const char *nptr, uint64_t *result);
+static int __cdecl atou64(const char *nptr, uint64_t *result);
 
 typedef struct {
     unsigned char *pass;
@@ -29,7 +29,7 @@ typedef struct {
 } SCRYPT_PKEY_CTX;
 
 /* Custom uint64_t parser since we do not have strtoull */
-static int atou64(const char *nptr, uint64_t *result)
+static int __cdecl atou64(const char *nptr, uint64_t *result)
 {
     uint64_t value = 0;
 
@@ -53,7 +53,7 @@ static int atou64(const char *nptr, uint64_t *result)
     return 1;
 }
 
-static int pkey_scrypt_init(EVP_PKEY_CTX *ctx)
+static int __cdecl pkey_scrypt_init(EVP_PKEY_CTX *ctx)
 {
     SCRYPT_PKEY_CTX *kctx;
 
@@ -77,7 +77,7 @@ static int pkey_scrypt_init(EVP_PKEY_CTX *ctx)
     return 1;
 }
 
-static void pkey_scrypt_cleanup(EVP_PKEY_CTX *ctx)
+static void __cdecl pkey_scrypt_cleanup(EVP_PKEY_CTX *ctx)
 {
     SCRYPT_PKEY_CTX *kctx = ctx->data;
 
@@ -86,7 +86,7 @@ static void pkey_scrypt_cleanup(EVP_PKEY_CTX *ctx)
     OPENSSL_free(kctx);
 }
 
-static int pkey_scrypt_set_membuf(unsigned char **buffer, size_t *buflen,
+static int __cdecl pkey_scrypt_set_membuf(unsigned char **buffer, size_t *buflen,
                                   const unsigned char *new_buffer,
                                   const int new_buflen)
 {
@@ -113,12 +113,12 @@ static int pkey_scrypt_set_membuf(unsigned char **buffer, size_t *buflen,
     return 1;
 }
 
-static int is_power_of_two(uint64_t value)
+static int __cdecl is_power_of_two(uint64_t value)
 {
     return (value != 0) && ((value & (value - 1)) == 0);
 }
 
-static int pkey_scrypt_ctrl(EVP_PKEY_CTX *ctx, int type, int p1, void *p2)
+static int __cdecl pkey_scrypt_ctrl(EVP_PKEY_CTX *ctx, int type, int p1, void *p2)
 {
     SCRYPT_PKEY_CTX *kctx = ctx->data;
     uint64_t u64_value;
@@ -164,7 +164,7 @@ static int pkey_scrypt_ctrl(EVP_PKEY_CTX *ctx, int type, int p1, void *p2)
     }
 }
 
-static int pkey_scrypt_ctrl_uint64(EVP_PKEY_CTX *ctx, int type,
+static int __cdecl pkey_scrypt_ctrl_uint64(EVP_PKEY_CTX *ctx, int type,
                                    const char *value)
 {
     uint64_t int_value;
@@ -176,7 +176,7 @@ static int pkey_scrypt_ctrl_uint64(EVP_PKEY_CTX *ctx, int type,
     return pkey_scrypt_ctrl(ctx, type, 0, &int_value);
 }
 
-static int pkey_scrypt_ctrl_str(EVP_PKEY_CTX *ctx, const char *type,
+static int __cdecl pkey_scrypt_ctrl_str(EVP_PKEY_CTX *ctx, const char *type,
                                 const char *value)
 {
     if (value == NULL) {
@@ -213,7 +213,7 @@ static int pkey_scrypt_ctrl_str(EVP_PKEY_CTX *ctx, const char *type,
     return -2;
 }
 
-static int pkey_scrypt_derive(EVP_PKEY_CTX *ctx, unsigned char *key,
+static int __cdecl pkey_scrypt_derive(EVP_PKEY_CTX *ctx, unsigned char *key,
                               size_t *keylen)
 {
     SCRYPT_PKEY_CTX *kctx = ctx->data;
diff --git a/crypto/kdf/tls1_prf.c b/crypto/kdf/tls1_prf.c
index 49f7ecced9..b8228112a3 100644
--- a/crypto/kdf/tls1_prf.c
+++ b/crypto/kdf/tls1_prf.c
@@ -13,7 +13,7 @@
 #include <openssl/evp.h>
 #include "internal/evp_int.h"
 
-static int tls1_prf_alg(const EVP_MD *md,
+static int __cdecl tls1_prf_alg(const EVP_MD *md,
                         const unsigned char *sec, size_t slen,
                         const unsigned char *seed, size_t seed_len,
                         unsigned char *out, size_t olen);
@@ -33,7 +33,7 @@ typedef struct {
     size_t seedlen;
 } TLS1_PRF_PKEY_CTX;
 
-static int pkey_tls1_prf_init(EVP_PKEY_CTX *ctx)
+static int __cdecl pkey_tls1_prf_init(EVP_PKEY_CTX *ctx)
 {
     TLS1_PRF_PKEY_CTX *kctx;
 
@@ -46,7 +46,7 @@ static int pkey_tls1_prf_init(EVP_PKEY_CTX *ctx)
     return 1;
 }
 
-static void pkey_tls1_prf_cleanup(EVP_PKEY_CTX *ctx)
+static void __cdecl pkey_tls1_prf_cleanup(EVP_PKEY_CTX *ctx)
 {
     TLS1_PRF_PKEY_CTX *kctx = ctx->data;
     OPENSSL_clear_free(kctx->sec, kctx->seclen);
@@ -54,7 +54,7 @@ static void pkey_tls1_prf_cleanup(EVP_PKEY_CTX *ctx)
     OPENSSL_free(kctx);
 }
 
-static int pkey_tls1_prf_ctrl(EVP_PKEY_CTX *ctx, int type, int p1, void *p2)
+static int __cdecl pkey_tls1_prf_ctrl(EVP_PKEY_CTX *ctx, int type, int p1, void *p2)
 {
     TLS1_PRF_PKEY_CTX *kctx = ctx->data;
     switch (type) {
@@ -90,7 +90,7 @@ static int pkey_tls1_prf_ctrl(EVP_PKEY_CTX *ctx, int type, int p1, void *p2)
     }
 }
 
-static int pkey_tls1_prf_ctrl_str(EVP_PKEY_CTX *ctx,
+static int __cdecl pkey_tls1_prf_ctrl_str(EVP_PKEY_CTX *ctx,
                                   const char *type, const char *value)
 {
     if (value == NULL) {
@@ -121,7 +121,7 @@ static int pkey_tls1_prf_ctrl_str(EVP_PKEY_CTX *ctx,
     return -2;
 }
 
-static int pkey_tls1_prf_derive(EVP_PKEY_CTX *ctx, unsigned char *key,
+static int __cdecl pkey_tls1_prf_derive(EVP_PKEY_CTX *ctx, unsigned char *key,
                                 size_t *keylen)
 {
     TLS1_PRF_PKEY_CTX *kctx = ctx->data;
@@ -172,7 +172,7 @@ const EVP_PKEY_METHOD tls1_prf_pkey_meth = {
     pkey_tls1_prf_ctrl_str
 };
 
-static int tls1_prf_P_hash(const EVP_MD *md,
+static int __cdecl tls1_prf_P_hash(const EVP_MD *md,
                            const unsigned char *sec, size_t sec_len,
                            const unsigned char *seed, size_t seed_len,
                            unsigned char *out, size_t olen)
@@ -244,7 +244,7 @@ static int tls1_prf_P_hash(const EVP_MD *md,
     return ret;
 }
 
-static int tls1_prf_alg(const EVP_MD *md,
+static int __cdecl tls1_prf_alg(const EVP_MD *md,
                         const unsigned char *sec, size_t slen,
                         const unsigned char *seed, size_t seed_len,
                         unsigned char *out, size_t olen)
diff --git a/crypto/lhash/lh_stats.c b/crypto/lhash/lh_stats.c
index 65b91e1ef4..7381cae119 100644
--- a/crypto/lhash/lh_stats.c
+++ b/crypto/lhash/lh_stats.c
@@ -21,7 +21,7 @@
 #include "lhash_lcl.h"
 
 # ifndef OPENSSL_NO_STDIO
-void OPENSSL_LH_stats(const OPENSSL_LHASH *lh, FILE *fp)
+void __cdecl OPENSSL_LH_stats(const OPENSSL_LHASH *lh, FILE *fp)
 {
     BIO *bp;
 
@@ -33,7 +33,7 @@ void OPENSSL_LH_stats(const OPENSSL_LHASH *lh, FILE *fp)
     BIO_free(bp);
 }
 
-void OPENSSL_LH_node_stats(const OPENSSL_LHASH *lh, FILE *fp)
+void __cdecl OPENSSL_LH_node_stats(const OPENSSL_LHASH *lh, FILE *fp)
 {
     BIO *bp;
 
@@ -45,7 +45,7 @@ void OPENSSL_LH_node_stats(const OPENSSL_LHASH *lh, FILE *fp)
     BIO_free(bp);
 }
 
-void OPENSSL_LH_node_usage_stats(const OPENSSL_LHASH *lh, FILE *fp)
+void __cdecl OPENSSL_LH_node_usage_stats(const OPENSSL_LHASH *lh, FILE *fp)
 {
     BIO *bp;
 
@@ -59,7 +59,7 @@ void OPENSSL_LH_node_usage_stats(const OPENSSL_LHASH *lh, FILE *fp)
 
 # endif
 
-void OPENSSL_LH_stats_bio(const OPENSSL_LHASH *lh, BIO *out)
+void __cdecl OPENSSL_LH_stats_bio(const OPENSSL_LHASH *lh, BIO *out)
 {
     BIO_printf(out, "num_items             = %lu\n", lh->num_items);
     BIO_printf(out, "num_nodes             = %u\n",  lh->num_nodes);
@@ -79,7 +79,7 @@ void OPENSSL_LH_stats_bio(const OPENSSL_LHASH *lh, BIO *out)
     BIO_printf(out, "num_hash_comps        = %lu\n", lh->num_hash_comps);
 }
 
-void OPENSSL_LH_node_stats_bio(const OPENSSL_LHASH *lh, BIO *out)
+void __cdecl OPENSSL_LH_node_stats_bio(const OPENSSL_LHASH *lh, BIO *out)
 {
     OPENSSL_LH_NODE *n;
     unsigned int i, num;
@@ -91,7 +91,7 @@ void OPENSSL_LH_node_stats_bio(const OPENSSL_LHASH *lh, BIO *out)
     }
 }
 
-void OPENSSL_LH_node_usage_stats_bio(const OPENSSL_LHASH *lh, BIO *out)
+void __cdecl OPENSSL_LH_node_usage_stats_bio(const OPENSSL_LHASH *lh, BIO *out)
 {
     OPENSSL_LH_NODE *n;
     unsigned long num;
diff --git a/crypto/lhash/lhash.c b/crypto/lhash/lhash.c
index 485d4c3fff..505167ffb4 100644
--- a/crypto/lhash/lhash.c
+++ b/crypto/lhash/lhash.c
@@ -42,9 +42,9 @@
 
 static int expand(OPENSSL_LHASH *lh);
 static void contract(OPENSSL_LHASH *lh);
-static OPENSSL_LH_NODE **getrn(OPENSSL_LHASH *lh, const void *data, unsigned long *rhash);
+static OPENSSL_LH_NODE ** __cdecl getrn(OPENSSL_LHASH *lh, const void *data, unsigned long *rhash);
 
-OPENSSL_LHASH *OPENSSL_LH_new(OPENSSL_LH_HASHFUNC h, OPENSSL_LH_COMPFUNC c)
+OPENSSL_LHASH * __cdecl OPENSSL_LH_new(OPENSSL_LH_HASHFUNC h, OPENSSL_LH_COMPFUNC c)
 {
     OPENSSL_LHASH *ret;
 
@@ -73,7 +73,7 @@ err:
     return NULL;
 }
 
-void OPENSSL_LH_free(OPENSSL_LHASH *lh)
+void __cdecl OPENSSL_LH_free(OPENSSL_LHASH *lh)
 {
     unsigned int i;
     OPENSSL_LH_NODE *n, *nn;
@@ -93,7 +93,7 @@ void OPENSSL_LH_free(OPENSSL_LHASH *lh)
     OPENSSL_free(lh);
 }
 
-void *OPENSSL_LH_insert(OPENSSL_LHASH *lh, void *data)
+void * __cdecl OPENSSL_LH_insert(OPENSSL_LHASH *lh, void *data)
 {
     unsigned long hash;
     OPENSSL_LH_NODE *nn, **rn;
@@ -125,7 +125,7 @@ void *OPENSSL_LH_insert(OPENSSL_LHASH *lh, void *data)
     return ret;
 }
 
-void *OPENSSL_LH_delete(OPENSSL_LHASH *lh, const void *data)
+void * __cdecl OPENSSL_LH_delete(OPENSSL_LHASH *lh, const void *data)
 {
     unsigned long hash;
     OPENSSL_LH_NODE *nn, **rn;
@@ -153,7 +153,7 @@ void *OPENSSL_LH_delete(OPENSSL_LHASH *lh, const void *data)
     return ret;
 }
 
-void *OPENSSL_LH_retrieve(OPENSSL_LHASH *lh, const void *data)
+void * __cdecl OPENSSL_LH_retrieve(OPENSSL_LHASH *lh, const void *data)
 {
     unsigned long hash;
     OPENSSL_LH_NODE **rn;
@@ -201,12 +201,12 @@ static void doall_util_fn(OPENSSL_LHASH *lh, int use_arg,
     }
 }
 
-void OPENSSL_LH_doall(OPENSSL_LHASH *lh, OPENSSL_LH_DOALL_FUNC func)
+void __cdecl OPENSSL_LH_doall(OPENSSL_LHASH *lh, OPENSSL_LH_DOALL_FUNC func)
 {
     doall_util_fn(lh, 0, func, (OPENSSL_LH_DOALL_FUNCARG)0, NULL);
 }
 
-void OPENSSL_LH_doall_arg(OPENSSL_LHASH *lh, OPENSSL_LH_DOALL_FUNCARG func, void *arg)
+void __cdecl OPENSSL_LH_doall_arg(OPENSSL_LHASH *lh, OPENSSL_LH_DOALL_FUNCARG func, void *arg)
 {
     doall_util_fn(lh, 1, (OPENSSL_LH_DOALL_FUNC)0, func, arg);
 }
@@ -292,7 +292,7 @@ static void contract(OPENSSL_LHASH *lh)
     }
 }
 
-static OPENSSL_LH_NODE **getrn(OPENSSL_LHASH *lh,
+static OPENSSL_LH_NODE ** __cdecl getrn(OPENSSL_LHASH *lh,
                                const void *data, unsigned long *rhash)
 {
     OPENSSL_LH_NODE **ret, *n1;
@@ -328,7 +328,7 @@ static OPENSSL_LH_NODE **getrn(OPENSSL_LHASH *lh,
  * collisions on /usr/dict/words and it distributes on %2^n quite well, not
  * as good as MD5, but still good.
  */
-unsigned long OPENSSL_LH_strhash(const char *c)
+unsigned long __cdecl OPENSSL_LH_strhash(const char *c)
 {
     unsigned long ret = 0;
     long n;
@@ -372,22 +372,22 @@ unsigned long openssl_lh_strcasehash(const char *c)
     return (ret >> 16) ^ ret;
 }
 
-unsigned long OPENSSL_LH_num_items(const OPENSSL_LHASH *lh)
+unsigned long __cdecl OPENSSL_LH_num_items(const OPENSSL_LHASH *lh)
 {
     return lh ? lh->num_items : 0;
 }
 
-unsigned long OPENSSL_LH_get_down_load(const OPENSSL_LHASH *lh)
+unsigned long __cdecl OPENSSL_LH_get_down_load(const OPENSSL_LHASH *lh)
 {
     return lh->down_load;
 }
 
-void OPENSSL_LH_set_down_load(OPENSSL_LHASH *lh, unsigned long down_load)
+void __cdecl OPENSSL_LH_set_down_load(OPENSSL_LHASH *lh, unsigned long down_load)
 {
     lh->down_load = down_load;
 }
 
-int OPENSSL_LH_error(OPENSSL_LHASH *lh)
+int __cdecl OPENSSL_LH_error(OPENSSL_LHASH *lh)
 {
     return lh->error;
 }
diff --git a/crypto/md2/md2_dgst.c b/crypto/md2/md2_dgst.c
index faa9393f2e..9a39b17691 100644
--- a/crypto/md2/md2_dgst.c
+++ b/crypto/md2/md2_dgst.c
@@ -60,7 +60,7 @@ static const MD2_INT S[256] = {
     0xDB, 0x99, 0x8D, 0x33, 0x9F, 0x11, 0x83, 0x14,
 };
 
-const char *MD2_options(void)
+const char * __cdecl MD2_options(void)
 {
     if (sizeof(MD2_INT) == 1)
         return "md2(char)";
@@ -68,7 +68,7 @@ const char *MD2_options(void)
         return "md2(int)";
 }
 
-int MD2_Init(MD2_CTX *c)
+int __cdecl MD2_Init(MD2_CTX *c)
 {
     c->num = 0;
     memset(c->state, 0, sizeof(c->state));
@@ -77,7 +77,7 @@ int MD2_Init(MD2_CTX *c)
     return 1;
 }
 
-int MD2_Update(MD2_CTX *c, const unsigned char *data, size_t len)
+int __cdecl MD2_Update(MD2_CTX *c, const unsigned char *data, size_t len)
 {
     register UCHAR *p;
 
@@ -147,7 +147,7 @@ static void md2_block(MD2_CTX *c, const unsigned char *d)
     OPENSSL_cleanse(state, 48 * sizeof(MD2_INT));
 }
 
-int MD2_Final(unsigned char *md, MD2_CTX *c)
+int __cdecl MD2_Final(unsigned char *md, MD2_CTX *c)
 {
     int i, v;
     register UCHAR *cp;
diff --git a/crypto/md2/md2_one.c b/crypto/md2/md2_one.c
index 5502b21696..dccf23bf88 100644
--- a/crypto/md2/md2_one.c
+++ b/crypto/md2/md2_one.c
@@ -16,7 +16,7 @@
  * functions to different names
  */
 
-unsigned char *MD2(const unsigned char *d, size_t n, unsigned char *md)
+unsigned char * __cdecl MD2(const unsigned char *d, size_t n, unsigned char *md)
 {
     MD2_CTX c;
     static unsigned char m[MD2_DIGEST_LENGTH];
diff --git a/crypto/md4/md4_dgst.c b/crypto/md4/md4_dgst.c
index 5319618615..e7ec9d1381 100644
--- a/crypto/md4/md4_dgst.c
+++ b/crypto/md4/md4_dgst.c
@@ -20,7 +20,7 @@
 #define INIT_DATA_C (unsigned long)0x98badcfeL
 #define INIT_DATA_D (unsigned long)0x10325476L
 
-int MD4_Init(MD4_CTX *c)
+int __cdecl MD4_Init(MD4_CTX *c)
 {
     memset(c, 0, sizeof(*c));
     c->A = INIT_DATA_A;
diff --git a/crypto/md4/md4_one.c b/crypto/md4/md4_one.c
index 9e52303c2f..ad2b87b724 100644
--- a/crypto/md4/md4_one.c
+++ b/crypto/md4/md4_one.c
@@ -16,7 +16,7 @@
 # include <openssl/ebcdic.h>
 #endif
 
-unsigned char *MD4(const unsigned char *d, size_t n, unsigned char *md)
+unsigned char * __cdecl MD4(const unsigned char *d, size_t n, unsigned char *md)
 {
     MD4_CTX c;
     static unsigned char m[MD4_DIGEST_LENGTH];
diff --git a/crypto/md5/md5_dgst.c b/crypto/md5/md5_dgst.c
index fbede6742a..64b2f17eca 100644
--- a/crypto/md5/md5_dgst.c
+++ b/crypto/md5/md5_dgst.c
@@ -20,7 +20,7 @@
 #define INIT_DATA_C (unsigned long)0x98badcfeL
 #define INIT_DATA_D (unsigned long)0x10325476L
 
-int MD5_Init(MD5_CTX *c)
+int __cdecl MD5_Init(MD5_CTX *c)
 {
     memset(c, 0, sizeof(*c));
     c->A = INIT_DATA_A;
diff --git a/crypto/md5/md5_one.c b/crypto/md5/md5_one.c
index c3bf2f88f0..3c34b57615 100644
--- a/crypto/md5/md5_one.c
+++ b/crypto/md5/md5_one.c
@@ -16,7 +16,7 @@
 # include <openssl/ebcdic.h>
 #endif
 
-unsigned char *MD5(const unsigned char *d, size_t n, unsigned char *md)
+unsigned char * __cdecl MD5(const unsigned char *d, size_t n, unsigned char *md)
 {
     MD5_CTX c;
     static unsigned char m[MD5_DIGEST_LENGTH];
diff --git a/crypto/mdc2/mdc2_one.c b/crypto/mdc2/mdc2_one.c
index 58e1e0fdf6..1290ebf705 100644
--- a/crypto/mdc2/mdc2_one.c
+++ b/crypto/mdc2/mdc2_one.c
@@ -11,7 +11,7 @@
 #include "internal/cryptlib.h"
 #include <openssl/mdc2.h>
 
-unsigned char *MDC2(const unsigned char *d, size_t n, unsigned char *md)
+unsigned char * __cdecl MDC2(const unsigned char *d, size_t n, unsigned char *md)
 {
     MDC2_CTX c;
     static unsigned char m[MDC2_DIGEST_LENGTH];
diff --git a/crypto/mdc2/mdc2dgst.c b/crypto/mdc2/mdc2dgst.c
index 14233b9aba..2dceffa1cb 100644
--- a/crypto/mdc2/mdc2dgst.c
+++ b/crypto/mdc2/mdc2dgst.c
@@ -27,7 +27,7 @@
                         *((c)++)=(unsigned char)(((l)>>24L)&0xff))
 
 static void mdc2_body(MDC2_CTX *c, const unsigned char *in, size_t len);
-int MDC2_Init(MDC2_CTX *c)
+int __cdecl MDC2_Init(MDC2_CTX *c)
 {
     c->num = 0;
     c->pad_type = 1;
@@ -36,7 +36,7 @@ int MDC2_Init(MDC2_CTX *c)
     return 1;
 }
 
-int MDC2_Update(MDC2_CTX *c, const unsigned char *in, size_t len)
+int __cdecl MDC2_Update(MDC2_CTX *c, const unsigned char *in, size_t len)
 {
     size_t i, j;
 
@@ -107,7 +107,7 @@ static void mdc2_body(MDC2_CTX *c, const unsigned char *in, size_t len)
     }
 }
 
-int MDC2_Final(unsigned char *md, MDC2_CTX *c)
+int __cdecl MDC2_Final(unsigned char *md, MDC2_CTX *c)
 {
     unsigned int i;
     int j;
diff --git a/crypto/mem.c b/crypto/mem.c
index 780053ffef..56c02305ea 100644
--- a/crypto/mem.c
+++ b/crypto/mem.c
@@ -23,11 +23,11 @@
  */
 static int allow_customize = 1;
 
-static void *(*malloc_impl)(size_t, const char *, int)
+static void *(__cdecl *malloc_impl)(size_t, const char *, int)
     = CRYPTO_malloc;
-static void *(*realloc_impl)(void *, size_t, const char *, int)
+static void *(__cdecl *realloc_impl)(void *, size_t, const char *, int)
     = CRYPTO_realloc;
-static void (*free_impl)(void *, const char *, int)
+static void (__cdecl *free_impl)(void *, const char *, int)
     = CRYPTO_free;
 
 #ifndef OPENSSL_NO_CRYPTO_MDEBUG
@@ -57,10 +57,10 @@ static int call_malloc_debug = 0;
 # define FAILTEST() /* empty */
 #endif
 
-int CRYPTO_set_mem_functions(
-        void *(*m)(size_t, const char *, int),
-        void *(*r)(void *, size_t, const char *, int),
-        void (*f)(void *, const char *, int))
+int __cdecl CRYPTO_set_mem_functions(
+        void *(__cdecl *m)(size_t, const char *, int),
+        void *(__cdecl *r)(void *, size_t, const char *, int),
+        void (__cdecl *f)(void *, const char *, int))
 {
     if (!allow_customize)
         return 0;
@@ -73,7 +73,7 @@ int CRYPTO_set_mem_functions(
     return 1;
 }
 
-int CRYPTO_set_mem_debug(int flag)
+int __cdecl CRYPTO_set_mem_debug(int flag)
 {
     if (!allow_customize)
         return 0;
@@ -81,10 +81,10 @@ int CRYPTO_set_mem_debug(int flag)
     return 1;
 }
 
-void CRYPTO_get_mem_functions(
-        void *(**m)(size_t, const char *, int),
-        void *(**r)(void *, size_t, const char *, int),
-        void (**f)(void *, const char *, int))
+void __cdecl CRYPTO_get_mem_functions(
+        void *(__cdecl **m)(size_t, const char *, int),
+        void *(__cdecl **r)(void *, size_t, const char *, int),
+        void (__cdecl **f)(void *, const char *, int))
 {
     if (m != NULL)
         *m = malloc_impl;
@@ -95,7 +95,7 @@ void CRYPTO_get_mem_functions(
 }
 
 #ifndef OPENSSL_NO_CRYPTO_MDEBUG
-void CRYPTO_get_alloc_counts(int *mcount, int *rcount, int *fcount)
+void __cdecl CRYPTO_get_alloc_counts(int *mcount, int *rcount, int *fcount)
 {
     if (mcount != NULL)
         *mcount = tsan_load(&malloc_count);
@@ -189,7 +189,7 @@ void ossl_malloc_setup_failures(void)
 }
 #endif
 
-void *CRYPTO_malloc(size_t num, const char *file, int line)
+void * __cdecl CRYPTO_malloc(size_t num, const char *file, int line)
 {
     void *ret = NULL;
 
@@ -225,7 +225,7 @@ void *CRYPTO_malloc(size_t num, const char *file, int line)
     return ret;
 }
 
-void *CRYPTO_zalloc(size_t num, const char *file, int line)
+void * __cdecl CRYPTO_zalloc(size_t num, const char *file, int line)
 {
     void *ret = CRYPTO_malloc(num, file, line);
 
@@ -235,7 +235,7 @@ void *CRYPTO_zalloc(size_t num, const char *file, int line)
     return ret;
 }
 
-void *CRYPTO_realloc(void *str, size_t num, const char *file, int line)
+void * __cdecl CRYPTO_realloc(void *str, size_t num, const char *file, int line)
 {
     INCREMENT(realloc_count);
     if (realloc_impl != NULL && realloc_impl != &CRYPTO_realloc)
@@ -265,7 +265,7 @@ void *CRYPTO_realloc(void *str, size_t num, const char *file, int line)
 
 }
 
-void *CRYPTO_clear_realloc(void *str, size_t old_len, size_t num,
+void * __cdecl CRYPTO_clear_realloc(void *str, size_t old_len, size_t num,
                            const char *file, int line)
 {
     void *ret = NULL;
@@ -292,7 +292,7 @@ void *CRYPTO_clear_realloc(void *str, size_t old_len, size_t num,
     return ret;
 }
 
-void CRYPTO_free(void *str, const char *file, int line)
+void __cdecl CRYPTO_free(void *str, const char *file, int line)
 {
     INCREMENT(free_count);
     if (free_impl != NULL && free_impl != &CRYPTO_free) {
@@ -313,7 +313,7 @@ void CRYPTO_free(void *str, const char *file, int line)
 #endif
 }
 
-void CRYPTO_clear_free(void *str, size_t num, const char *file, int line)
+void __cdecl CRYPTO_clear_free(void *str, size_t num, const char *file, int line)
 {
     if (str == NULL)
         return;
diff --git a/crypto/mem_clr.c b/crypto/mem_clr.c
index 35bfb74eae..c9310edccd 100644
--- a/crypto/mem_clr.c
+++ b/crypto/mem_clr.c
@@ -15,11 +15,11 @@
  * the pointer and can't assume that it points to any function in
  * particular (such as memset, which it then might further "optimize")
  */
-typedef void *(*memset_t)(void *, int, size_t);
+typedef void *(__cdecl *memset_t)(void *, int, size_t);
 
 static volatile memset_t memset_func = memset;
 
-void OPENSSL_cleanse(void *ptr, size_t len)
+void __cdecl OPENSSL_cleanse(void *ptr, size_t len)
 {
     memset_func(ptr, 0, len);
 }
diff --git a/crypto/mem_dbg.c b/crypto/mem_dbg.c
index 0489e97adb..9d4d5e5dc1 100644
--- a/crypto/mem_dbg.c
+++ b/crypto/mem_dbg.c
@@ -117,7 +117,7 @@ static void app_info_free(APP_INFO *inf)
 }
 #endif
 
-int CRYPTO_mem_ctrl(int mode)
+int __cdecl CRYPTO_mem_ctrl(int mode)
 {
 #ifdef OPENSSL_NO_CRYPTO_MDEBUG
     return mode - mode;
@@ -266,7 +266,7 @@ static int pop_info(void)
     return 0;
 }
 
-int CRYPTO_mem_debug_push(const char *info, const char *file, int line)
+int __cdecl CRYPTO_mem_debug_push(const char *info, const char *file, int line)
 {
     APP_INFO *ami, *amim;
     int ret = 0;
@@ -298,7 +298,7 @@ int CRYPTO_mem_debug_push(const char *info, const char *file, int line)
     return ret;
 }
 
-int CRYPTO_mem_debug_pop(void)
+int __cdecl CRYPTO_mem_debug_pop(void)
 {
     int ret = 0;
 
@@ -312,7 +312,7 @@ int CRYPTO_mem_debug_pop(void)
 
 static unsigned long break_order_num = 0;
 
-void CRYPTO_mem_debug_malloc(void *addr, size_t num, int before_p,
+void __cdecl CRYPTO_mem_debug_malloc(void *addr, size_t num, int before_p,
                              const char *file, int line)
 {
     MEM *m, *mm;
@@ -379,7 +379,7 @@ void CRYPTO_mem_debug_malloc(void *addr, size_t num, int before_p,
     return;
 }
 
-void CRYPTO_mem_debug_free(void *addr, int before_p,
+void __cdecl CRYPTO_mem_debug_free(void *addr, int before_p,
         const char *file, int line)
 {
     MEM m, *mp;
@@ -407,7 +407,7 @@ void CRYPTO_mem_debug_free(void *addr, int before_p,
     }
 }
 
-void CRYPTO_mem_debug_realloc(void *addr1, void *addr2, size_t num,
+void __cdecl CRYPTO_mem_debug_realloc(void *addr1, void *addr2, size_t num,
                               int before_p, const char *file, int line)
 {
     MEM m, *mp;
@@ -566,7 +566,7 @@ static void print_leak(const MEM *m, MEM_LEAK *l)
 
 IMPLEMENT_LHASH_DOALL_ARG_CONST(MEM, MEM_LEAK);
 
-int CRYPTO_mem_leaks_cb(int (*cb) (const char *str, size_t len, void *u),
+int __cdecl CRYPTO_mem_leaks_cb(int (*cb) (const char *str, size_t len, void *u),
                         void *u)
 {
     MEM_LEAK ml;
@@ -633,7 +633,7 @@ static int print_bio(const char *str, size_t len, void *b)
     return BIO_write((BIO *)b, str, len);
 }
 
-int CRYPTO_mem_leaks(BIO *b)
+int __cdecl CRYPTO_mem_leaks(BIO *b)
 {
     /*
      * OPENSSL_cleanup() will free the ex_data locks so we can't have any
@@ -645,7 +645,7 @@ int CRYPTO_mem_leaks(BIO *b)
 }
 
 # ifndef OPENSSL_NO_STDIO
-int CRYPTO_mem_leaks_fp(FILE *fp)
+int __cdecl CRYPTO_mem_leaks_fp(FILE *fp)
 {
     BIO *b;
     int ret;
diff --git a/crypto/mem_sec.c b/crypto/mem_sec.c
index 9e0f6702f4..ec7000fd8c 100644
--- a/crypto/mem_sec.c
+++ b/crypto/mem_sec.c
@@ -65,7 +65,7 @@ static size_t sh_actual_size(char *ptr);
 static int sh_allocated(const char *ptr);
 #endif
 
-int CRYPTO_secure_malloc_init(size_t size, int minsize)
+int __cdecl CRYPTO_secure_malloc_init(size_t size, int minsize)
 {
 #ifdef OPENSSL_SECURE_MEMORY
     int ret = 0;
@@ -88,7 +88,7 @@ int CRYPTO_secure_malloc_init(size_t size, int minsize)
 #endif /* OPENSSL_SECURE_MEMORY */
 }
 
-int CRYPTO_secure_malloc_done(void)
+int __cdecl CRYPTO_secure_malloc_done(void)
 {
 #ifdef OPENSSL_SECURE_MEMORY
     if (secure_mem_used == 0) {
@@ -102,7 +102,7 @@ int CRYPTO_secure_malloc_done(void)
     return 0;
 }
 
-int CRYPTO_secure_malloc_initialized(void)
+int __cdecl CRYPTO_secure_malloc_initialized(void)
 {
 #ifdef OPENSSL_SECURE_MEMORY
     return secure_mem_initialized;
@@ -111,7 +111,7 @@ int CRYPTO_secure_malloc_initialized(void)
 #endif /* OPENSSL_SECURE_MEMORY */
 }
 
-void *CRYPTO_secure_malloc(size_t num, const char *file, int line)
+void * __cdecl CRYPTO_secure_malloc(size_t num, const char *file, int line)
 {
 #ifdef OPENSSL_SECURE_MEMORY
     void *ret;
@@ -131,7 +131,7 @@ void *CRYPTO_secure_malloc(size_t num, const char *file, int line)
 #endif /* OPENSSL_SECURE_MEMORY */
 }
 
-void *CRYPTO_secure_zalloc(size_t num, const char *file, int line)
+void * __cdecl CRYPTO_secure_zalloc(size_t num, const char *file, int line)
 {
 #ifdef OPENSSL_SECURE_MEMORY
     if (secure_mem_initialized)
@@ -141,7 +141,7 @@ void *CRYPTO_secure_zalloc(size_t num, const char *file, int line)
     return CRYPTO_zalloc(num, file, line);
 }
 
-void CRYPTO_secure_free(void *ptr, const char *file, int line)
+void __cdecl CRYPTO_secure_free(void *ptr, const char *file, int line)
 {
 #ifdef OPENSSL_SECURE_MEMORY
     size_t actual_size;
@@ -163,7 +163,7 @@ void CRYPTO_secure_free(void *ptr, const char *file, int line)
 #endif /* OPENSSL_SECURE_MEMORY */
 }
 
-void CRYPTO_secure_clear_free(void *ptr, size_t num,
+void __cdecl CRYPTO_secure_clear_free(void *ptr, size_t num,
                               const char *file, int line)
 {
 #ifdef OPENSSL_SECURE_MEMORY
@@ -190,7 +190,7 @@ void CRYPTO_secure_clear_free(void *ptr, size_t num,
 #endif /* OPENSSL_SECURE_MEMORY */
 }
 
-int CRYPTO_secure_allocated(const void *ptr)
+int __cdecl CRYPTO_secure_allocated(const void *ptr)
 {
 #ifdef OPENSSL_SECURE_MEMORY
     int ret;
@@ -206,7 +206,7 @@ int CRYPTO_secure_allocated(const void *ptr)
 #endif /* OPENSSL_SECURE_MEMORY */
 }
 
-size_t CRYPTO_secure_used(void)
+size_t __cdecl CRYPTO_secure_used(void)
 {
 #ifdef OPENSSL_SECURE_MEMORY
     return secure_mem_used;
@@ -215,7 +215,7 @@ size_t CRYPTO_secure_used(void)
 #endif /* OPENSSL_SECURE_MEMORY */
 }
 
-size_t CRYPTO_secure_actual_size(void *ptr)
+size_t __cdecl CRYPTO_secure_actual_size(void *ptr)
 {
 #ifdef OPENSSL_SECURE_MEMORY
     size_t actual_size;
diff --git a/crypto/modes/cbc128.c b/crypto/modes/cbc128.c
index 4ce5eb2ae3..4d31026624 100644
--- a/crypto/modes/cbc128.c
+++ b/crypto/modes/cbc128.c
@@ -15,7 +15,7 @@
 # define STRICT_ALIGNMENT 0
 #endif
 
-void CRYPTO_cbc128_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl CRYPTO_cbc128_encrypt(const unsigned char *in, unsigned char *out,
                            size_t len, const void *key,
                            unsigned char ivec[16], block128_f block)
 {
@@ -66,7 +66,7 @@ void CRYPTO_cbc128_encrypt(const unsigned char *in, unsigned char *out,
     memcpy(ivec, iv, 16);
 }
 
-void CRYPTO_cbc128_decrypt(const unsigned char *in, unsigned char *out,
+void __cdecl CRYPTO_cbc128_decrypt(const unsigned char *in, unsigned char *out,
                            size_t len, const void *key,
                            unsigned char ivec[16], block128_f block)
 {
diff --git a/crypto/modes/ccm128.c b/crypto/modes/ccm128.c
index 05a33239f5..a0cec976f6 100644
--- a/crypto/modes/ccm128.c
+++ b/crypto/modes/ccm128.c
@@ -15,7 +15,7 @@
  * First you setup M and L parameters and pass the key schedule. This is
  * called once per session setup...
  */
-void CRYPTO_ccm128_init(CCM128_CONTEXT *ctx,
+void __cdecl CRYPTO_ccm128_init(CCM128_CONTEXT *ctx,
                         unsigned int M, unsigned int L, void *key,
                         block128_f block)
 {
@@ -29,7 +29,7 @@ void CRYPTO_ccm128_init(CCM128_CONTEXT *ctx,
 /* !!! Following interfaces are to be called *once* per packet !!! */
 
 /* Then you setup per-message nonce and pass the length of the message */
-int CRYPTO_ccm128_setiv(CCM128_CONTEXT *ctx,
+int __cdecl CRYPTO_ccm128_setiv(CCM128_CONTEXT *ctx,
                         const unsigned char *nonce, size_t nlen, size_t mlen)
 {
     unsigned int L = ctx->nonce.c[0] & 7; /* the L parameter */
@@ -57,7 +57,7 @@ int CRYPTO_ccm128_setiv(CCM128_CONTEXT *ctx,
 }
 
 /* Then you pass additional authentication data, this is optional */
-void CRYPTO_ccm128_aad(CCM128_CONTEXT *ctx,
+void __cdecl CRYPTO_ccm128_aad(CCM128_CONTEXT *ctx,
                        const unsigned char *aad, size_t alen)
 {
     unsigned int i;
@@ -126,7 +126,7 @@ static void ctr64_inc(unsigned char *counter)
     } while (n);
 }
 
-int CRYPTO_ccm128_encrypt(CCM128_CONTEXT *ctx,
+int __cdecl CRYPTO_ccm128_encrypt(CCM128_CONTEXT *ctx,
                           const unsigned char *inp, unsigned char *out,
                           size_t len)
 {
@@ -210,7 +210,7 @@ int CRYPTO_ccm128_encrypt(CCM128_CONTEXT *ctx,
     return 0;
 }
 
-int CRYPTO_ccm128_decrypt(CCM128_CONTEXT *ctx,
+int __cdecl CRYPTO_ccm128_decrypt(CCM128_CONTEXT *ctx,
                           const unsigned char *inp, unsigned char *out,
                           size_t len)
 {
@@ -297,7 +297,7 @@ static void ctr64_add(unsigned char *counter, size_t inc)
     } while (n && (inc || val));
 }
 
-int CRYPTO_ccm128_encrypt_ccm64(CCM128_CONTEXT *ctx,
+int __cdecl CRYPTO_ccm128_encrypt_ccm64(CCM128_CONTEXT *ctx,
                                 const unsigned char *inp, unsigned char *out,
                                 size_t len, ccm128_f stream)
 {
@@ -361,7 +361,7 @@ int CRYPTO_ccm128_encrypt_ccm64(CCM128_CONTEXT *ctx,
     return 0;
 }
 
-int CRYPTO_ccm128_decrypt_ccm64(CCM128_CONTEXT *ctx,
+int __cdecl CRYPTO_ccm128_decrypt_ccm64(CCM128_CONTEXT *ctx,
                                 const unsigned char *inp, unsigned char *out,
                                 size_t len, ccm128_f stream)
 {
@@ -419,7 +419,7 @@ int CRYPTO_ccm128_decrypt_ccm64(CCM128_CONTEXT *ctx,
     return 0;
 }
 
-size_t CRYPTO_ccm128_tag(CCM128_CONTEXT *ctx, unsigned char *tag, size_t len)
+size_t __cdecl CRYPTO_ccm128_tag(CCM128_CONTEXT *ctx, unsigned char *tag, size_t len)
 {
     unsigned int M = (ctx->nonce.c[0] >> 3) & 7; /* the M parameter */
 
diff --git a/crypto/modes/cfb128.c b/crypto/modes/cfb128.c
index e439567fe5..14a3acf830 100644
--- a/crypto/modes/cfb128.c
+++ b/crypto/modes/cfb128.c
@@ -16,7 +16,7 @@
  * The extra state information to record how much of the 128bit block we have
  * used is contained in *num;
  */
-void CRYPTO_cfb128_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl CRYPTO_cfb128_encrypt(const unsigned char *in, unsigned char *out,
                            size_t len, const void *key,
                            unsigned char ivec[16], int *num,
                            int enc, block128_f block)
@@ -170,7 +170,7 @@ static void cfbr_encrypt_block(const unsigned char *in, unsigned char *out,
 }
 
 /* N.B. This expects the input to be packed, MS bit first */
-void CRYPTO_cfb128_1_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl CRYPTO_cfb128_1_encrypt(const unsigned char *in, unsigned char *out,
                              size_t bits, const void *key,
                              unsigned char ivec[16], int *num,
                              int enc, block128_f block)
@@ -186,7 +186,7 @@ void CRYPTO_cfb128_1_encrypt(const unsigned char *in, unsigned char *out,
     }
 }
 
-void CRYPTO_cfb128_8_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl CRYPTO_cfb128_8_encrypt(const unsigned char *in, unsigned char *out,
                              size_t length, const void *key,
                              unsigned char ivec[16], int *num,
                              int enc, block128_f block)
diff --git a/crypto/modes/ctr128.c b/crypto/modes/ctr128.c
index 03920b4473..1a588415cc 100644
--- a/crypto/modes/ctr128.c
+++ b/crypto/modes/ctr128.c
@@ -68,7 +68,7 @@ static void ctr128_inc_aligned(unsigned char *counter)
  * implementation takes NO responsibility for checking that the counter
  * doesn't overflow into the rest of the IV when incremented.
  */
-void CRYPTO_ctr128_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl CRYPTO_ctr128_encrypt(const unsigned char *in, unsigned char *out,
                            size_t len, const void *key,
                            unsigned char ivec[16],
                            unsigned char ecount_buf[16], unsigned int *num,
@@ -144,7 +144,7 @@ static void ctr96_inc(unsigned char *counter)
     } while (n);
 }
 
-void CRYPTO_ctr128_encrypt_ctr32(const unsigned char *in, unsigned char *out,
+void __cdecl CRYPTO_ctr128_encrypt_ctr32(const unsigned char *in, unsigned char *out,
                                  size_t len, const void *key,
                                  unsigned char ivec[16],
                                  unsigned char ecount_buf[16],
diff --git a/crypto/modes/cts128.c b/crypto/modes/cts128.c
index 93826a1e2f..bcbaa65081 100644
--- a/crypto/modes/cts128.c
+++ b/crypto/modes/cts128.c
@@ -24,7 +24,7 @@
  * compliant with the NIST proposal, both extending CBC mode.
  */
 
-size_t CRYPTO_cts128_encrypt_block(const unsigned char *in,
+size_t __cdecl CRYPTO_cts128_encrypt_block(const unsigned char *in,
                                    unsigned char *out, size_t len,
                                    const void *key, unsigned char ivec[16],
                                    block128_f block)
@@ -53,7 +53,7 @@ size_t CRYPTO_cts128_encrypt_block(const unsigned char *in,
     return len + residue;
 }
 
-size_t CRYPTO_nistcts128_encrypt_block(const unsigned char *in,
+size_t __cdecl CRYPTO_nistcts128_encrypt_block(const unsigned char *in,
                                        unsigned char *out, size_t len,
                                        const void *key,
                                        unsigned char ivec[16],
@@ -84,7 +84,7 @@ size_t CRYPTO_nistcts128_encrypt_block(const unsigned char *in,
     return len + residue;
 }
 
-size_t CRYPTO_cts128_encrypt(const unsigned char *in, unsigned char *out,
+size_t __cdecl CRYPTO_cts128_encrypt(const unsigned char *in, unsigned char *out,
                              size_t len, const void *key,
                              unsigned char ivec[16], cbc128_f cbc)
 {
@@ -120,7 +120,7 @@ size_t CRYPTO_cts128_encrypt(const unsigned char *in, unsigned char *out,
     return len + residue;
 }
 
-size_t CRYPTO_nistcts128_encrypt(const unsigned char *in, unsigned char *out,
+size_t __cdecl CRYPTO_nistcts128_encrypt(const unsigned char *in, unsigned char *out,
                                  size_t len, const void *key,
                                  unsigned char ivec[16], cbc128_f cbc)
 {
@@ -155,7 +155,7 @@ size_t CRYPTO_nistcts128_encrypt(const unsigned char *in, unsigned char *out,
     return len + residue;
 }
 
-size_t CRYPTO_cts128_decrypt_block(const unsigned char *in,
+size_t __cdecl CRYPTO_cts128_decrypt_block(const unsigned char *in,
                                    unsigned char *out, size_t len,
                                    const void *key, unsigned char ivec[16],
                                    block128_f block)
@@ -197,7 +197,7 @@ size_t CRYPTO_cts128_decrypt_block(const unsigned char *in,
     return 16 + len + residue;
 }
 
-size_t CRYPTO_nistcts128_decrypt_block(const unsigned char *in,
+size_t __cdecl CRYPTO_nistcts128_decrypt_block(const unsigned char *in,
                                        unsigned char *out, size_t len,
                                        const void *key,
                                        unsigned char ivec[16],
@@ -245,7 +245,7 @@ size_t CRYPTO_nistcts128_decrypt_block(const unsigned char *in,
     return 16 + len + residue;
 }
 
-size_t CRYPTO_cts128_decrypt(const unsigned char *in, unsigned char *out,
+size_t __cdecl CRYPTO_cts128_decrypt(const unsigned char *in, unsigned char *out,
                              size_t len, const void *key,
                              unsigned char ivec[16], cbc128_f cbc)
 {
@@ -285,7 +285,7 @@ size_t CRYPTO_cts128_decrypt(const unsigned char *in, unsigned char *out,
     return 16 + len + residue;
 }
 
-size_t CRYPTO_nistcts128_decrypt(const unsigned char *in, unsigned char *out,
+size_t __cdecl CRYPTO_nistcts128_decrypt(const unsigned char *in, unsigned char *out,
                                  size_t len, const void *key,
                                  unsigned char ivec[16], cbc128_f cbc)
 {
diff --git a/crypto/modes/gcm128.c b/crypto/modes/gcm128.c
index 15f76e3e86..8fd5f4d0af 100644
--- a/crypto/modes/gcm128.c
+++ b/crypto/modes/gcm128.c
@@ -710,7 +710,7 @@ void gcm_ghash_p8(u64 Xi[2], const u128 Htable[16], const u8 *inp,
 # endif
 #endif
 
-void CRYPTO_gcm128_init(GCM128_CONTEXT *ctx, void *key, block128_f block)
+void __cdecl CRYPTO_gcm128_init(GCM128_CONTEXT *ctx, void *key, block128_f block)
 {
     const union {
         long one;
@@ -824,7 +824,7 @@ void CRYPTO_gcm128_init(GCM128_CONTEXT *ctx, void *key, block128_f block)
 #endif
 }
 
-void CRYPTO_gcm128_setiv(GCM128_CONTEXT *ctx, const unsigned char *iv,
+void __cdecl CRYPTO_gcm128_setiv(GCM128_CONTEXT *ctx, const unsigned char *iv,
                          size_t len)
 {
     const union {
@@ -917,7 +917,7 @@ void CRYPTO_gcm128_setiv(GCM128_CONTEXT *ctx, const unsigned char *iv,
         ctx->Yi.d[3] = ctr;
 }
 
-int CRYPTO_gcm128_aad(GCM128_CONTEXT *ctx, const unsigned char *aad,
+int __cdecl CRYPTO_gcm128_aad(GCM128_CONTEXT *ctx, const unsigned char *aad,
                       size_t len)
 {
     size_t i;
@@ -978,7 +978,7 @@ int CRYPTO_gcm128_aad(GCM128_CONTEXT *ctx, const unsigned char *aad,
     return 0;
 }
 
-int CRYPTO_gcm128_encrypt(GCM128_CONTEXT *ctx,
+int __cdecl CRYPTO_gcm128_encrypt(GCM128_CONTEXT *ctx,
                           const unsigned char *in, unsigned char *out,
                           size_t len)
 {
@@ -1213,7 +1213,7 @@ int CRYPTO_gcm128_encrypt(GCM128_CONTEXT *ctx,
     return 0;
 }
 
-int CRYPTO_gcm128_decrypt(GCM128_CONTEXT *ctx,
+int __cdecl CRYPTO_gcm128_decrypt(GCM128_CONTEXT *ctx,
                           const unsigned char *in, unsigned char *out,
                           size_t len)
 {
@@ -1456,7 +1456,7 @@ int CRYPTO_gcm128_decrypt(GCM128_CONTEXT *ctx,
     return 0;
 }
 
-int CRYPTO_gcm128_encrypt_ctr32(GCM128_CONTEXT *ctx,
+int __cdecl CRYPTO_gcm128_encrypt_ctr32(GCM128_CONTEXT *ctx,
                                 const unsigned char *in, unsigned char *out,
                                 size_t len, ctr128_f stream)
 {
@@ -1620,7 +1620,7 @@ int CRYPTO_gcm128_encrypt_ctr32(GCM128_CONTEXT *ctx,
 #endif
 }
 
-int CRYPTO_gcm128_decrypt_ctr32(GCM128_CONTEXT *ctx,
+int __cdecl CRYPTO_gcm128_decrypt_ctr32(GCM128_CONTEXT *ctx,
                                 const unsigned char *in, unsigned char *out,
                                 size_t len, ctr128_f stream)
 {
@@ -1791,7 +1791,7 @@ int CRYPTO_gcm128_decrypt_ctr32(GCM128_CONTEXT *ctx,
 #endif
 }
 
-int CRYPTO_gcm128_finish(GCM128_CONTEXT *ctx, const unsigned char *tag,
+int __cdecl CRYPTO_gcm128_finish(GCM128_CONTEXT *ctx, const unsigned char *tag,
                          size_t len)
 {
     const union {
@@ -1865,14 +1865,14 @@ int CRYPTO_gcm128_finish(GCM128_CONTEXT *ctx, const unsigned char *tag,
         return -1;
 }
 
-void CRYPTO_gcm128_tag(GCM128_CONTEXT *ctx, unsigned char *tag, size_t len)
+void __cdecl CRYPTO_gcm128_tag(GCM128_CONTEXT *ctx, unsigned char *tag, size_t len)
 {
     CRYPTO_gcm128_finish(ctx, NULL, 0);
     memcpy(tag, ctx->Xi.c,
            len <= sizeof(ctx->Xi.c) ? len : sizeof(ctx->Xi.c));
 }
 
-GCM128_CONTEXT *CRYPTO_gcm128_new(void *key, block128_f block)
+GCM128_CONTEXT * __cdecl CRYPTO_gcm128_new(void *key, block128_f block)
 {
     GCM128_CONTEXT *ret;
 
@@ -1882,7 +1882,7 @@ GCM128_CONTEXT *CRYPTO_gcm128_new(void *key, block128_f block)
     return ret;
 }
 
-void CRYPTO_gcm128_release(GCM128_CONTEXT *ctx)
+void __cdecl CRYPTO_gcm128_release(GCM128_CONTEXT *ctx)
 {
     OPENSSL_clear_free(ctx, sizeof(*ctx));
 }
diff --git a/crypto/modes/ocb128.c b/crypto/modes/ocb128.c
index 713b9aaf19..8510da9784 100644
--- a/crypto/modes/ocb128.c
+++ b/crypto/modes/ocb128.c
@@ -127,7 +127,7 @@ static OCB_BLOCK *ocb_lookup_l(OCB128_CONTEXT *ctx, size_t idx)
 /*
  * Create a new OCB128_CONTEXT
  */
-OCB128_CONTEXT *CRYPTO_ocb128_new(void *keyenc, void *keydec,
+OCB128_CONTEXT * __cdecl CRYPTO_ocb128_new(void *keyenc, void *keydec,
                                   block128_f encrypt, block128_f decrypt,
                                   ocb128_f stream)
 {
@@ -148,7 +148,7 @@ OCB128_CONTEXT *CRYPTO_ocb128_new(void *keyenc, void *keydec,
 /*
  * Initialise an existing OCB128_CONTEXT
  */
-int CRYPTO_ocb128_init(OCB128_CONTEXT *ctx, void *keyenc, void *keydec,
+int __cdecl CRYPTO_ocb128_init(OCB128_CONTEXT *ctx, void *keyenc, void *keydec,
                        block128_f encrypt, block128_f decrypt,
                        ocb128_f stream)
 {
@@ -193,7 +193,7 @@ int CRYPTO_ocb128_init(OCB128_CONTEXT *ctx, void *keyenc, void *keydec,
 /*
  * Copy an OCB128_CONTEXT object
  */
-int CRYPTO_ocb128_copy_ctx(OCB128_CONTEXT *dest, OCB128_CONTEXT *src,
+int __cdecl CRYPTO_ocb128_copy_ctx(OCB128_CONTEXT *dest, OCB128_CONTEXT *src,
                            void *keyenc, void *keydec)
 {
     memcpy(dest, src, sizeof(OCB128_CONTEXT));
@@ -214,7 +214,7 @@ int CRYPTO_ocb128_copy_ctx(OCB128_CONTEXT *dest, OCB128_CONTEXT *src,
 /*
  * Set the IV to be used for this operation. Must be 1 - 15 bytes.
  */
-int CRYPTO_ocb128_setiv(OCB128_CONTEXT *ctx, const unsigned char *iv,
+int __cdecl CRYPTO_ocb128_setiv(OCB128_CONTEXT *ctx, const unsigned char *iv,
                         size_t len, size_t taglen)
 {
     unsigned char ktop[16], tmp[16], mask;
@@ -265,7 +265,7 @@ int CRYPTO_ocb128_setiv(OCB128_CONTEXT *ctx, const unsigned char *iv,
  * Provide any AAD. This can be called multiple times. Only the final time can
  * have a partial block
  */
-int CRYPTO_ocb128_aad(OCB128_CONTEXT *ctx, const unsigned char *aad,
+int __cdecl CRYPTO_ocb128_aad(OCB128_CONTEXT *ctx, const unsigned char *aad,
                       size_t len)
 {
     u64 i, all_num_blocks;
@@ -326,7 +326,7 @@ int CRYPTO_ocb128_aad(OCB128_CONTEXT *ctx, const unsigned char *aad,
  * Provide any data to be encrypted. This can be called multiple times. Only
  * the final time can have a partial block
  */
-int CRYPTO_ocb128_encrypt(OCB128_CONTEXT *ctx,
+int __cdecl CRYPTO_ocb128_encrypt(OCB128_CONTEXT *ctx,
                           const unsigned char *in, unsigned char *out,
                           size_t len)
 {
@@ -418,7 +418,7 @@ int CRYPTO_ocb128_encrypt(OCB128_CONTEXT *ctx,
  * Provide any data to be decrypted. This can be called multiple times. Only
  * the final time can have a partial block
  */
-int CRYPTO_ocb128_decrypt(OCB128_CONTEXT *ctx,
+int __cdecl CRYPTO_ocb128_decrypt(OCB128_CONTEXT *ctx,
                           const unsigned char *in, unsigned char *out,
                           size_t len)
 {
@@ -534,7 +534,7 @@ static int ocb_finish(OCB128_CONTEXT *ctx, unsigned char *tag, size_t len,
 /*
  * Calculate the tag and verify it against the supplied tag
  */
-int CRYPTO_ocb128_finish(OCB128_CONTEXT *ctx, const unsigned char *tag,
+int __cdecl CRYPTO_ocb128_finish(OCB128_CONTEXT *ctx, const unsigned char *tag,
                          size_t len)
 {
     return ocb_finish(ctx, (unsigned char*)tag, len, 0);
@@ -543,7 +543,7 @@ int CRYPTO_ocb128_finish(OCB128_CONTEXT *ctx, const unsigned char *tag,
 /*
  * Retrieve the calculated tag
  */
-int CRYPTO_ocb128_tag(OCB128_CONTEXT *ctx, unsigned char *tag, size_t len)
+int __cdecl CRYPTO_ocb128_tag(OCB128_CONTEXT *ctx, unsigned char *tag, size_t len)
 {
     return ocb_finish(ctx, tag, len, 1);
 }
@@ -551,7 +551,7 @@ int CRYPTO_ocb128_tag(OCB128_CONTEXT *ctx, unsigned char *tag, size_t len)
 /*
  * Release all resources
  */
-void CRYPTO_ocb128_cleanup(OCB128_CONTEXT *ctx)
+void __cdecl CRYPTO_ocb128_cleanup(OCB128_CONTEXT *ctx)
 {
     if (ctx) {
         OPENSSL_clear_free(ctx->l, ctx->max_l_index * 16);
diff --git a/crypto/modes/ofb128.c b/crypto/modes/ofb128.c
index 83092564c6..4548c6edbc 100644
--- a/crypto/modes/ofb128.c
+++ b/crypto/modes/ofb128.c
@@ -16,7 +16,7 @@
  * The extra state information to record how much of the 128bit block we have
  * used is contained in *num;
  */
-void CRYPTO_ofb128_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl CRYPTO_ofb128_encrypt(const unsigned char *in, unsigned char *out,
                            size_t len, const void *key,
                            unsigned char ivec[16], int *num, block128_f block)
 {
diff --git a/crypto/modes/wrap128.c b/crypto/modes/wrap128.c
index d7e56cc260..f773869d37 100644
--- a/crypto/modes/wrap128.c
+++ b/crypto/modes/wrap128.c
@@ -45,7 +45,7 @@ static const unsigned char default_aiv[] = {
  *                     or if inlen > CRYPTO128_WRAP_MAX.
  *                     Output length if wrapping succeeded.
  */
-size_t CRYPTO_128_wrap(void *key, const unsigned char *iv,
+size_t __cdecl CRYPTO_128_wrap(void *key, const unsigned char *iv,
                        unsigned char *out,
                        const unsigned char *in, size_t inlen,
                        block128_f block)
@@ -147,7 +147,7 @@ static size_t crypto_128_unwrap_raw(void *key, unsigned char *iv,
  *                     or if IV doesn't match expected value.
  *                     Output length otherwise.
  */
-size_t CRYPTO_128_unwrap(void *key, const unsigned char *iv,
+size_t __cdecl CRYPTO_128_unwrap(void *key, const unsigned char *iv,
                          unsigned char *out, const unsigned char *in,
                          size_t inlen, block128_f block)
 {
@@ -180,7 +180,7 @@ size_t CRYPTO_128_unwrap(void *key, const unsigned char *iv,
  *  @return            0 if inlen is out of range [1, CRYPTO128_WRAP_MAX].
  *                     Output length if wrapping succeeded.
  */
-size_t CRYPTO_128_wrap_pad(void *key, const unsigned char *icv,
+size_t __cdecl CRYPTO_128_wrap_pad(void *key, const unsigned char *icv,
                            unsigned char *out,
                            const unsigned char *in, size_t inlen,
                            block128_f block)
@@ -248,7 +248,7 @@ size_t CRYPTO_128_wrap_pad(void *key, const unsigned char *icv,
  *                     or if IV and message length indicator doesn't match.
  *                     Output length if unwrapping succeeded and IV matches.
  */
-size_t CRYPTO_128_unwrap_pad(void *key, const unsigned char *icv,
+size_t __cdecl CRYPTO_128_unwrap_pad(void *key, const unsigned char *icv,
                              unsigned char *out,
                              const unsigned char *in, size_t inlen,
                              block128_f block)
diff --git a/crypto/modes/xts128.c b/crypto/modes/xts128.c
index 81b1eacd59..095b9229c2 100644
--- a/crypto/modes/xts128.c
+++ b/crypto/modes/xts128.c
@@ -11,7 +11,7 @@
 #include "modes_lcl.h"
 #include <string.h>
 
-int CRYPTO_xts128_encrypt(const XTS128_CONTEXT *ctx,
+int __cdecl CRYPTO_xts128_encrypt(const XTS128_CONTEXT *ctx,
                           const unsigned char iv[16],
                           const unsigned char *inp, unsigned char *out,
                           size_t len, int enc)
diff --git a/crypto/o_fips.c b/crypto/o_fips.c
index 050ea9c216..f3a1755872 100644
--- a/crypto/o_fips.c
+++ b/crypto/o_fips.c
@@ -9,13 +9,13 @@
 
 #include "internal/cryptlib.h"
 
-int FIPS_mode(void)
+int __cdecl FIPS_mode(void)
 {
     /* This version of the library does not support FIPS mode. */
     return 0;
 }
 
-int FIPS_mode_set(int r)
+int __cdecl FIPS_mode_set(int r)
 {
     if (r == 0)
         return 1;
diff --git a/crypto/o_fopen.c b/crypto/o_fopen.c
index 7d51ad7254..788c638027 100644
--- a/crypto/o_fopen.c
+++ b/crypto/o_fopen.c
@@ -35,7 +35,7 @@
 #  include <unistd.h>
 # endif
 
-FILE *openssl_fopen(const char *filename, const char *mode)
+FILE * __cdecl openssl_fopen(const char *filename, const char *mode)
 {
     FILE *file = NULL;
 # if defined(_WIN32) && defined(CP_UTF8)
@@ -118,7 +118,7 @@ FILE *openssl_fopen(const char *filename, const char *mode)
 
 #else
 
-void *openssl_fopen(const char *filename, const char *mode)
+void * __cdecl openssl_fopen(const char *filename, const char *mode)
 {
     return NULL;
 }
diff --git a/crypto/o_init.c b/crypto/o_init.c
index ed6b1303d8..e133b629c0 100644
--- a/crypto/o_init.c
+++ b/crypto/o_init.c
@@ -15,7 +15,7 @@
  * nothing.
  */
 
-void OPENSSL_init(void)
+void __cdecl OPENSSL_init(void)
 {
     return;
 }
diff --git a/crypto/o_str.c b/crypto/o_str.c
index 9ad7a89dca..800bb2ce91 100644
--- a/crypto/o_str.c
+++ b/crypto/o_str.c
@@ -13,7 +13,7 @@
 #include "internal/cryptlib.h"
 #include "internal/o_str.h"
 
-int OPENSSL_memcmp(const void *v1, const void *v2, size_t n)
+int __cdecl OPENSSL_memcmp(const void *v1, const void *v2, size_t n)
 {
     const unsigned char *c1 = v1, *c2 = v2;
     int ret = 0;
@@ -24,7 +24,7 @@ int OPENSSL_memcmp(const void *v1, const void *v2, size_t n)
     return ret;
 }
 
-char *CRYPTO_strdup(const char *str, const char* file, int line)
+char * __cdecl CRYPTO_strdup(const char *str, const char* file, int line)
 {
     char *ret;
 
@@ -36,7 +36,7 @@ char *CRYPTO_strdup(const char *str, const char* file, int line)
     return ret;
 }
 
-char *CRYPTO_strndup(const char *str, size_t s, const char* file, int line)
+char * __cdecl CRYPTO_strndup(const char *str, size_t s, const char* file, int line)
 {
     size_t maxlen;
     char *ret;
@@ -54,7 +54,7 @@ char *CRYPTO_strndup(const char *str, size_t s, const char* file, int line)
     return ret;
 }
 
-void *CRYPTO_memdup(const void *data, size_t siz, const char* file, int line)
+void * __cdecl CRYPTO_memdup(const void *data, size_t siz, const char* file, int line)
 {
     void *ret;
 
@@ -69,7 +69,7 @@ void *CRYPTO_memdup(const void *data, size_t siz, const char* file, int line)
     return memcpy(ret, data, siz);
 }
 
-size_t OPENSSL_strnlen(const char *str, size_t maxlen)
+size_t __cdecl OPENSSL_strnlen(const char *str, size_t maxlen)
 {
     const char *p;
 
@@ -78,7 +78,7 @@ size_t OPENSSL_strnlen(const char *str, size_t maxlen)
     return p - str;
 }
 
-size_t OPENSSL_strlcpy(char *dst, const char *src, size_t size)
+size_t __cdecl OPENSSL_strlcpy(char *dst, const char *src, size_t size)
 {
     size_t l = 0;
     for (; size > 1 && *src; size--) {
@@ -90,7 +90,7 @@ size_t OPENSSL_strlcpy(char *dst, const char *src, size_t size)
     return l + strlen(src);
 }
 
-size_t OPENSSL_strlcat(char *dst, const char *src, size_t size)
+size_t __cdecl OPENSSL_strlcat(char *dst, const char *src, size_t size)
 {
     size_t l = 0;
     for (; size > 0 && *dst; size--, dst++)
@@ -98,7 +98,7 @@ size_t OPENSSL_strlcat(char *dst, const char *src, size_t size)
     return l + OPENSSL_strlcpy(dst, src, size);
 }
 
-int OPENSSL_hexchar2int(unsigned char c)
+int __cdecl OPENSSL_hexchar2int(unsigned char c)
 {
 #ifdef CHARSET_EBCDIC
     c = os_toebcdic[c];
@@ -144,7 +144,7 @@ int OPENSSL_hexchar2int(unsigned char c)
 /*
  * Give a string of hex digits convert to a buffer
  */
-unsigned char *OPENSSL_hexstr2buf(const char *str, long *len)
+unsigned char * __cdecl OPENSSL_hexstr2buf(const char *str, long *len)
 {
     unsigned char *hexbuf, *q;
     unsigned char ch, cl;
@@ -188,7 +188,7 @@ unsigned char *OPENSSL_hexstr2buf(const char *str, long *len)
  * hex representation @@@ (Contents of buffer are always kept in ASCII, also
  * on EBCDIC machines)
  */
-char *OPENSSL_buf2hexstr(const unsigned char *buffer, long len)
+char * __cdecl OPENSSL_buf2hexstr(const unsigned char *buffer, long len)
 {
     static const char hexdig[] = "0123456789ABCDEF";
     char *tmp, *q;
@@ -218,7 +218,7 @@ char *OPENSSL_buf2hexstr(const unsigned char *buffer, long len)
     return tmp;
 }
 
-int openssl_strerror_r(int errnum, char *buf, size_t buflen)
+int __cdecl openssl_strerror_r(int errnum, char *buf, size_t buflen)
 {
 #if defined(_MSC_VER) && _MSC_VER>=1400
     return !strerror_s(buf, buflen, errnum);
diff --git a/crypto/o_time.c b/crypto/o_time.c
index 6d764f55e2..8e2a4cd734 100644
--- a/crypto/o_time.c
+++ b/crypto/o_time.c
@@ -11,7 +11,7 @@
 #include <string.h>
 #include <openssl/crypto.h>
 
-struct tm *OPENSSL_gmtime(const time_t *timer, struct tm *result)
+struct tm * __cdecl OPENSSL_gmtime(const time_t *timer, struct tm *result)
 {
     struct tm *ts = NULL;
 
@@ -69,7 +69,7 @@ static void julian_to_date(long jd, int *y, int *m, int *d);
 static int julian_adj(const struct tm *tm, int off_day, long offset_sec,
                       long *pday, int *psec);
 
-int OPENSSL_gmtime_adj(struct tm *tm, int off_day, long offset_sec)
+int __cdecl OPENSSL_gmtime_adj(struct tm *tm, int off_day, long offset_sec)
 {
     int time_sec, time_year, time_month, time_day;
     long time_jd;
@@ -99,7 +99,7 @@ int OPENSSL_gmtime_adj(struct tm *tm, int off_day, long offset_sec)
 
 }
 
-int OPENSSL_gmtime_diff(int *pday, int *psec,
+int __cdecl OPENSSL_gmtime_diff(int *pday, int *psec,
                         const struct tm *from, const struct tm *to)
 {
     int from_sec, to_sec, diff_sec;
diff --git a/crypto/objects/o_names.c b/crypto/objects/o_names.c
index c4355370cb..c49acc68a0 100644
--- a/crypto/objects/o_names.c
+++ b/crypto/objects/o_names.c
@@ -30,7 +30,7 @@
  * transparently assign function pointers to it.
  */
 #if defined(OPENSSL_SYS_VMS_DECC) || defined(OPENSSL_SYS_UEFI)
-static int obj_strcasecmp(const char *a, const char *b)
+static int __cdecl obj_strcasecmp(const char *a, const char *b)
 {
     return strcasecmp(a, b);
 }
@@ -48,7 +48,7 @@ static CRYPTO_RWLOCK *obj_lock = NULL;
 
 struct name_funcs_st {
     unsigned long (*hash_func) (const char *name);
-    int (*cmp_func) (const char *a, const char *b);
+    int (__cdecl *cmp_func) (const char *a, const char *b);
     void (*free_func) (const char *, int, const char *);
 };
 
@@ -60,8 +60,8 @@ static STACK_OF(NAME_FUNCS) *name_funcs_stack;
  * casting without the need for macro-generated wrapper functions.
  */
 
-static unsigned long obj_name_hash(const OBJ_NAME *a);
-static int obj_name_cmp(const OBJ_NAME *a, const OBJ_NAME *b);
+static unsigned long __cdecl obj_name_hash(const OBJ_NAME *a);
+static int __cdecl obj_name_cmp(const OBJ_NAME *a, const OBJ_NAME *b);
 
 static CRYPTO_ONCE init = CRYPTO_ONCE_STATIC_INIT;
 DEFINE_RUN_ONCE_STATIC(o_names_init)
@@ -73,13 +73,13 @@ DEFINE_RUN_ONCE_STATIC(o_names_init)
     return names_lh != NULL && obj_lock != NULL;
 }
 
-int OBJ_NAME_init(void)
+int __cdecl OBJ_NAME_init(void)
 {
     return RUN_ONCE(&init, o_names_init);
 }
 
-int OBJ_NAME_new_index(unsigned long (*hash_func) (const char *),
-                       int (*cmp_func) (const char *, const char *),
+int __cdecl OBJ_NAME_new_index(unsigned long (*hash_func) (const char *),
+                       int (__cdecl *cmp_func) (const char *, const char *),
                        void (*free_func) (const char *, int, const char *))
 {
     int ret = 0, i, push;
@@ -137,7 +137,7 @@ out:
     return ret;
 }
 
-static int obj_name_cmp(const OBJ_NAME *a, const OBJ_NAME *b)
+static int __cdecl obj_name_cmp(const OBJ_NAME *a, const OBJ_NAME *b)
 {
     int ret;
 
@@ -153,7 +153,7 @@ static int obj_name_cmp(const OBJ_NAME *a, const OBJ_NAME *b)
     return ret;
 }
 
-static unsigned long obj_name_hash(const OBJ_NAME *a)
+static unsigned long __cdecl obj_name_hash(const OBJ_NAME *a)
 {
     unsigned long ret;
 
@@ -169,7 +169,7 @@ static unsigned long obj_name_hash(const OBJ_NAME *a)
     return ret;
 }
 
-const char *OBJ_NAME_get(const char *name, int type)
+const char * __cdecl OBJ_NAME_get(const char *name, int type)
 {
     OBJ_NAME on, *ret;
     int num = 0, alias;
@@ -205,7 +205,7 @@ const char *OBJ_NAME_get(const char *name, int type)
     return value;
 }
 
-int OBJ_NAME_add(const char *name, int type, const char *data)
+int __cdecl OBJ_NAME_add(const char *name, int type, const char *data)
 {
     OBJ_NAME *onp, *ret;
     int alias, ok = 0;
@@ -258,7 +258,7 @@ unlock:
     return ok;
 }
 
-int OBJ_NAME_remove(const char *name, int type)
+int __cdecl OBJ_NAME_remove(const char *name, int type)
 {
     OBJ_NAME on, *ret;
     int ok = 0;
@@ -306,7 +306,7 @@ static void do_all_fn(const OBJ_NAME *name, OBJ_DOALL *d)
 
 IMPLEMENT_LHASH_DOALL_ARG_CONST(OBJ_NAME, OBJ_DOALL);
 
-void OBJ_NAME_do_all(int type, void (*fn) (const OBJ_NAME *, void *arg),
+void __cdecl OBJ_NAME_do_all(int type, void (*fn) (const OBJ_NAME *, void *arg),
                      void *arg)
 {
     OBJ_DOALL d;
@@ -334,7 +334,7 @@ static void do_all_sorted_fn(const OBJ_NAME *name, void *d_)
     d->names[d->n++] = name;
 }
 
-static int do_all_sorted_cmp(const void *n1_, const void *n2_)
+static int __cdecl do_all_sorted_cmp(const void *n1_, const void *n2_)
 {
     const OBJ_NAME *const *n1 = n1_;
     const OBJ_NAME *const *n2 = n2_;
@@ -342,7 +342,7 @@ static int do_all_sorted_cmp(const void *n1_, const void *n2_)
     return strcmp((*n1)->name, (*n2)->name);
 }
 
-void OBJ_NAME_do_all_sorted(int type,
+void __cdecl OBJ_NAME_do_all_sorted(int type,
                             void (*fn) (const OBJ_NAME *, void *arg),
                             void *arg)
 {
@@ -377,12 +377,12 @@ static void names_lh_free_doall(OBJ_NAME *onp)
         OBJ_NAME_remove(onp->name, onp->type);
 }
 
-static void name_funcs_free(NAME_FUNCS *ptr)
+static void __cdecl name_funcs_free(NAME_FUNCS *ptr)
 {
     OPENSSL_free(ptr);
 }
 
-void OBJ_NAME_cleanup(int type)
+void __cdecl OBJ_NAME_cleanup(int type)
 {
     unsigned long down_load;
 
diff --git a/crypto/objects/obj_dat.c b/crypto/objects/obj_dat.c
index ef2d1e0dda..c11b3c9ace 100644
--- a/crypto/objects/obj_dat.c
+++ b/crypto/objects/obj_dat.c
@@ -38,21 +38,21 @@ struct added_obj_st {
 static int new_nid = NUM_NID;
 static LHASH_OF(ADDED_OBJ) *added = NULL;
 
-static int sn_cmp(const ASN1_OBJECT *const *a, const unsigned int *b)
+static int __cdecl sn_cmp(const ASN1_OBJECT *const *a, const unsigned int *b)
 {
     return strcmp((*a)->sn, nid_objs[*b].sn);
 }
 
 IMPLEMENT_OBJ_BSEARCH_CMP_FN(const ASN1_OBJECT *, unsigned int, sn);
 
-static int ln_cmp(const ASN1_OBJECT *const *a, const unsigned int *b)
+static int __cdecl ln_cmp(const ASN1_OBJECT *const *a, const unsigned int *b)
 {
     return strcmp((*a)->ln, nid_objs[*b].ln);
 }
 
 IMPLEMENT_OBJ_BSEARCH_CMP_FN(const ASN1_OBJECT *, unsigned int, ln);
 
-static unsigned long added_obj_hash(const ADDED_OBJ *ca)
+static unsigned long __cdecl added_obj_hash(const ADDED_OBJ *ca)
 {
     const ASN1_OBJECT *a;
     int i;
@@ -85,7 +85,7 @@ static unsigned long added_obj_hash(const ADDED_OBJ *ca)
     return ret;
 }
 
-static int added_obj_cmp(const ADDED_OBJ *ca, const ADDED_OBJ *cb)
+static int __cdecl added_obj_cmp(const ADDED_OBJ *ca, const ADDED_OBJ *cb)
 {
     ASN1_OBJECT *a, *b;
     int i;
@@ -162,7 +162,7 @@ void obj_cleanup_int(void)
     added = NULL;
 }
 
-int OBJ_new_nid(int num)
+int __cdecl OBJ_new_nid(int num)
 {
     int i;
 
@@ -171,7 +171,7 @@ int OBJ_new_nid(int num)
     return i;
 }
 
-int OBJ_add_object(const ASN1_OBJECT *obj)
+int __cdecl OBJ_add_object(const ASN1_OBJECT *obj)
 {
     ASN1_OBJECT *o;
     ADDED_OBJ *ao[4] = { NULL, NULL, NULL, NULL }, *aop;
@@ -217,7 +217,7 @@ int OBJ_add_object(const ASN1_OBJECT *obj)
     return NID_undef;
 }
 
-ASN1_OBJECT *OBJ_nid2obj(int n)
+ASN1_OBJECT * __cdecl OBJ_nid2obj(int n)
 {
     ADDED_OBJ ad, *adp;
     ASN1_OBJECT ob;
@@ -244,7 +244,7 @@ ASN1_OBJECT *OBJ_nid2obj(int n)
     }
 }
 
-const char *OBJ_nid2sn(int n)
+const char * __cdecl OBJ_nid2sn(int n)
 {
     ADDED_OBJ ad, *adp;
     ASN1_OBJECT ob;
@@ -271,7 +271,7 @@ const char *OBJ_nid2sn(int n)
     }
 }
 
-const char *OBJ_nid2ln(int n)
+const char * __cdecl OBJ_nid2ln(int n)
 {
     ADDED_OBJ ad, *adp;
     ASN1_OBJECT ob;
@@ -298,7 +298,7 @@ const char *OBJ_nid2ln(int n)
     }
 }
 
-static int obj_cmp(const ASN1_OBJECT *const *ap, const unsigned int *bp)
+static int __cdecl obj_cmp(const ASN1_OBJECT *const *ap, const unsigned int *bp)
 {
     int j;
     const ASN1_OBJECT *a = *ap;
@@ -314,7 +314,7 @@ static int obj_cmp(const ASN1_OBJECT *const *ap, const unsigned int *bp)
 
 IMPLEMENT_OBJ_BSEARCH_CMP_FN(const ASN1_OBJECT *, unsigned int, obj);
 
-int OBJ_obj2nid(const ASN1_OBJECT *a)
+int __cdecl OBJ_obj2nid(const ASN1_OBJECT *a)
 {
     const unsigned int *op;
     ADDED_OBJ ad, *adp;
@@ -347,7 +347,7 @@ int OBJ_obj2nid(const ASN1_OBJECT *a)
  * just registered ones.
  */
 
-ASN1_OBJECT *OBJ_txt2obj(const char *s, int no_name)
+ASN1_OBJECT * __cdecl OBJ_txt2obj(const char *s, int no_name)
 {
     int nid = NID_undef;
     ASN1_OBJECT *op;
@@ -393,7 +393,7 @@ ASN1_OBJECT *OBJ_txt2obj(const char *s, int no_name)
     return op;
 }
 
-int OBJ_obj2txt(char *buf, int buf_len, const ASN1_OBJECT *a, int no_name)
+int __cdecl OBJ_obj2txt(char *buf, int buf_len, const ASN1_OBJECT *a, int no_name)
 {
     int i, n = 0, len, nid, first, use_bn;
     BIGNUM *bl;
@@ -527,7 +527,7 @@ int OBJ_obj2txt(char *buf, int buf_len, const ASN1_OBJECT *a, int no_name)
     return -1;
 }
 
-int OBJ_txt2nid(const char *s)
+int __cdecl OBJ_txt2nid(const char *s)
 {
     ASN1_OBJECT *obj;
     int nid;
@@ -537,7 +537,7 @@ int OBJ_txt2nid(const char *s)
     return nid;
 }
 
-int OBJ_ln2nid(const char *s)
+int __cdecl OBJ_ln2nid(const char *s)
 {
     ASN1_OBJECT o;
     const ASN1_OBJECT *oo = &o;
@@ -558,7 +558,7 @@ int OBJ_ln2nid(const char *s)
     return nid_objs[*op].nid;
 }
 
-int OBJ_sn2nid(const char *s)
+int __cdecl OBJ_sn2nid(const char *s)
 {
     ASN1_OBJECT o;
     const ASN1_OBJECT *oo = &o;
@@ -579,15 +579,15 @@ int OBJ_sn2nid(const char *s)
     return nid_objs[*op].nid;
 }
 
-const void *OBJ_bsearch_(const void *key, const void *base, int num, int size,
-                         int (*cmp) (const void *, const void *))
+const void * __cdecl OBJ_bsearch_(const void *key, const void *base, int num, int size,
+                         int (__cdecl *cmp) (const void *, const void *))
 {
     return OBJ_bsearch_ex_(key, base, num, size, cmp, 0);
 }
 
-const void *OBJ_bsearch_ex_(const void *key, const void *base_, int num,
+const void * __cdecl OBJ_bsearch_ex_(const void *key, const void *base_, int num,
                             int size,
-                            int (*cmp) (const void *, const void *),
+                            int (__cdecl *cmp) (const void *, const void *),
                             int flags)
 {
     const char *base = base_;
@@ -638,7 +638,7 @@ const void *OBJ_bsearch_ex_(const void *key, const void *base_, int num,
  * Parse a BIO sink to create some extra oid's objects.
  * Line format:<OID:isdigit or '.']><isspace><SN><isspace><LN>
  */
-int OBJ_create_objects(BIO *in)
+int __cdecl OBJ_create_objects(BIO *in)
 {
     char buf[512];
     int i, num = 0;
@@ -687,7 +687,7 @@ int OBJ_create_objects(BIO *in)
     }
 }
 
-int OBJ_create(const char *oid, const char *sn, const char *ln)
+int __cdecl OBJ_create(const char *oid, const char *sn, const char *ln)
 {
     ASN1_OBJECT *tmpoid = NULL;
     int ok = 0;
@@ -724,14 +724,14 @@ int OBJ_create(const char *oid, const char *sn, const char *ln)
     return ok;
 }
 
-size_t OBJ_length(const ASN1_OBJECT *obj)
+size_t __cdecl OBJ_length(const ASN1_OBJECT *obj)
 {
     if (obj == NULL)
         return 0;
     return obj->length;
 }
 
-const unsigned char *OBJ_get0_data(const ASN1_OBJECT *obj)
+const unsigned char * __cdecl OBJ_get0_data(const ASN1_OBJECT *obj)
 {
     if (obj == NULL)
         return NULL;
diff --git a/crypto/objects/obj_err.c b/crypto/objects/obj_err.c
index be4f11ca20..a223310a61 100644
--- a/crypto/objects/obj_err.c
+++ b/crypto/objects/obj_err.c
@@ -34,7 +34,7 @@ static const ERR_STRING_DATA OBJ_str_reasons[] = {
 
 #endif
 
-int ERR_load_OBJ_strings(void)
+int __cdecl ERR_load_OBJ_strings(void)
 {
 #ifndef OPENSSL_NO_ERR
     if (ERR_func_error_string(OBJ_str_functs[0].error) == NULL) {
diff --git a/crypto/objects/obj_lib.c b/crypto/objects/obj_lib.c
index acbdeec2c9..373d462235 100644
--- a/crypto/objects/obj_lib.c
+++ b/crypto/objects/obj_lib.c
@@ -13,7 +13,7 @@
 #include <openssl/buffer.h>
 #include "internal/asn1_int.h"
 
-ASN1_OBJECT *OBJ_dup(const ASN1_OBJECT *o)
+ASN1_OBJECT * __cdecl OBJ_dup(const ASN1_OBJECT *o)
 {
     ASN1_OBJECT *r;
 
@@ -54,7 +54,7 @@ ASN1_OBJECT *OBJ_dup(const ASN1_OBJECT *o)
     return NULL;
 }
 
-int OBJ_cmp(const ASN1_OBJECT *a, const ASN1_OBJECT *b)
+int __cdecl OBJ_cmp(const ASN1_OBJECT *a, const ASN1_OBJECT *b)
 {
     int ret;
 
diff --git a/crypto/objects/obj_xref.c b/crypto/objects/obj_xref.c
index faf59eb20c..495b9e821b 100644
--- a/crypto/objects/obj_xref.c
+++ b/crypto/objects/obj_xref.c
@@ -14,7 +14,7 @@
 
 static STACK_OF(nid_triple) *sig_app, *sigx_app;
 
-static int sig_cmp(const nid_triple *a, const nid_triple *b)
+static int __cdecl sig_cmp(const nid_triple *a, const nid_triple *b)
 {
     return a->sign_id - b->sign_id;
 }
@@ -22,14 +22,14 @@ static int sig_cmp(const nid_triple *a, const nid_triple *b)
 DECLARE_OBJ_BSEARCH_CMP_FN(nid_triple, nid_triple, sig);
 IMPLEMENT_OBJ_BSEARCH_CMP_FN(nid_triple, nid_triple, sig);
 
-static int sig_sk_cmp(const nid_triple *const *a, const nid_triple *const *b)
+static int __cdecl sig_sk_cmp(const nid_triple *const *a, const nid_triple *const *b)
 {
     return (*a)->sign_id - (*b)->sign_id;
 }
 
 DECLARE_OBJ_BSEARCH_CMP_FN(const nid_triple *, const nid_triple *, sigx);
 
-static int sigx_cmp(const nid_triple *const *a, const nid_triple *const *b)
+static int __cdecl sigx_cmp(const nid_triple *const *a, const nid_triple *const *b)
 {
     int ret;
     ret = (*a)->hash_id - (*b)->hash_id;
@@ -40,7 +40,7 @@ static int sigx_cmp(const nid_triple *const *a, const nid_triple *const *b)
 
 IMPLEMENT_OBJ_BSEARCH_CMP_FN(const nid_triple *, const nid_triple *, sigx);
 
-int OBJ_find_sigid_algs(int signid, int *pdig_nid, int *ppkey_nid)
+int __cdecl OBJ_find_sigid_algs(int signid, int *pdig_nid, int *ppkey_nid)
 {
     nid_triple tmp;
     const nid_triple *rv = NULL;
@@ -64,7 +64,7 @@ int OBJ_find_sigid_algs(int signid, int *pdig_nid, int *ppkey_nid)
     return 1;
 }
 
-int OBJ_find_sigid_by_algs(int *psignid, int dig_nid, int pkey_nid)
+int __cdecl OBJ_find_sigid_by_algs(int *psignid, int dig_nid, int pkey_nid)
 {
     nid_triple tmp;
     const nid_triple *t = &tmp;
@@ -92,7 +92,7 @@ int OBJ_find_sigid_by_algs(int *psignid, int dig_nid, int pkey_nid)
     return 1;
 }
 
-int OBJ_add_sigid(int signid, int dig_id, int pkey_id)
+int __cdecl OBJ_add_sigid(int signid, int dig_id, int pkey_id)
 {
     nid_triple *ntr;
     if (sig_app == NULL)
@@ -125,12 +125,12 @@ int OBJ_add_sigid(int signid, int dig_id, int pkey_id)
     return 1;
 }
 
-static void sid_free(nid_triple *tt)
+static void __cdecl sid_free(nid_triple *tt)
 {
     OPENSSL_free(tt);
 }
 
-void OBJ_sigid_free(void)
+void __cdecl OBJ_sigid_free(void)
 {
     sk_nid_triple_pop_free(sig_app, sid_free);
     sig_app = NULL;
diff --git a/crypto/ocsp/ocsp_cl.c b/crypto/ocsp/ocsp_cl.c
index 739ac01807..a6e26cb903 100644
--- a/crypto/ocsp/ocsp_cl.c
+++ b/crypto/ocsp/ocsp_cl.c
@@ -28,7 +28,7 @@
  * useful if we want to add extensions.
  */
 
-OCSP_ONEREQ *OCSP_request_add0_id(OCSP_REQUEST *req, OCSP_CERTID *cid)
+OCSP_ONEREQ * __cdecl OCSP_request_add0_id(OCSP_REQUEST *req, OCSP_CERTID *cid)
 {
     OCSP_ONEREQ *one = NULL;
 
@@ -48,7 +48,7 @@ OCSP_ONEREQ *OCSP_request_add0_id(OCSP_REQUEST *req, OCSP_CERTID *cid)
 
 /* Set requestorName from an X509_NAME structure */
 
-int OCSP_request_set1_name(OCSP_REQUEST *req, X509_NAME *nm)
+int __cdecl OCSP_request_set1_name(OCSP_REQUEST *req, X509_NAME *nm)
 {
     GENERAL_NAME *gen;
 
@@ -67,7 +67,7 @@ int OCSP_request_set1_name(OCSP_REQUEST *req, X509_NAME *nm)
 
 /* Add a certificate to an OCSP request */
 
-int OCSP_request_add1_cert(OCSP_REQUEST *req, X509 *cert)
+int __cdecl OCSP_request_add1_cert(OCSP_REQUEST *req, X509 *cert)
 {
     OCSP_SIGNATURE *sig;
     if (req->optionalSignature == NULL)
@@ -93,7 +93,7 @@ int OCSP_request_add1_cert(OCSP_REQUEST *req, X509 *cert)
  * in the request. Behaves like PKCS7_sign().
  */
 
-int OCSP_request_sign(OCSP_REQUEST *req,
+int __cdecl OCSP_request_sign(OCSP_REQUEST *req,
                       X509 *signer,
                       EVP_PKEY *key,
                       const EVP_MD *dgst,
@@ -136,7 +136,7 @@ int OCSP_request_sign(OCSP_REQUEST *req,
 
 /* Get response status */
 
-int OCSP_response_status(OCSP_RESPONSE *resp)
+int __cdecl OCSP_response_status(OCSP_RESPONSE *resp)
 {
     return ASN1_ENUMERATED_get(resp->responseStatus);
 }
@@ -146,7 +146,7 @@ int OCSP_response_status(OCSP_RESPONSE *resp)
  * present.
  */
 
-OCSP_BASICRESP *OCSP_response_get1_basic(OCSP_RESPONSE *resp)
+OCSP_BASICRESP * __cdecl OCSP_response_get1_basic(OCSP_RESPONSE *resp)
 {
     OCSP_RESPBYTES *rb;
     rb = resp->responseBytes;
@@ -162,17 +162,17 @@ OCSP_BASICRESP *OCSP_response_get1_basic(OCSP_RESPONSE *resp)
     return ASN1_item_unpack(rb->response, ASN1_ITEM_rptr(OCSP_BASICRESP));
 }
 
-const ASN1_OCTET_STRING *OCSP_resp_get0_signature(const OCSP_BASICRESP *bs)
+const ASN1_OCTET_STRING * __cdecl OCSP_resp_get0_signature(const OCSP_BASICRESP *bs)
 {
     return bs->signature;
 }
 
-const X509_ALGOR *OCSP_resp_get0_tbs_sigalg(const OCSP_BASICRESP *bs)
+const X509_ALGOR * __cdecl OCSP_resp_get0_tbs_sigalg(const OCSP_BASICRESP *bs)
 {
     return &bs->signatureAlgorithm;
 }
 
-const OCSP_RESPDATA *OCSP_resp_get0_respdata(const OCSP_BASICRESP *bs)
+const OCSP_RESPDATA * __cdecl OCSP_resp_get0_respdata(const OCSP_BASICRESP *bs)
 {
     return &bs->tbsResponseData;
 }
@@ -181,7 +181,7 @@ const OCSP_RESPDATA *OCSP_resp_get0_respdata(const OCSP_BASICRESP *bs)
  * Return number of OCSP_SINGLERESP responses present in a basic response.
  */
 
-int OCSP_resp_count(OCSP_BASICRESP *bs)
+int __cdecl OCSP_resp_count(OCSP_BASICRESP *bs)
 {
     if (!bs)
         return -1;
@@ -190,24 +190,24 @@ int OCSP_resp_count(OCSP_BASICRESP *bs)
 
 /* Extract an OCSP_SINGLERESP response with a given index */
 
-OCSP_SINGLERESP *OCSP_resp_get0(OCSP_BASICRESP *bs, int idx)
+OCSP_SINGLERESP * __cdecl OCSP_resp_get0(OCSP_BASICRESP *bs, int idx)
 {
     if (!bs)
         return NULL;
     return sk_OCSP_SINGLERESP_value(bs->tbsResponseData.responses, idx);
 }
 
-const ASN1_GENERALIZEDTIME *OCSP_resp_get0_produced_at(const OCSP_BASICRESP* bs)
+const ASN1_GENERALIZEDTIME * __cdecl OCSP_resp_get0_produced_at(const OCSP_BASICRESP* bs)
 {
     return bs->tbsResponseData.producedAt;
 }
 
-const STACK_OF(X509) *OCSP_resp_get0_certs(const OCSP_BASICRESP *bs)
+const STACK_OF(X509) * __cdecl OCSP_resp_get0_certs(const OCSP_BASICRESP *bs)
 {
     return bs->certs;
 }
 
-int OCSP_resp_get0_id(const OCSP_BASICRESP *bs,
+int __cdecl OCSP_resp_get0_id(const OCSP_BASICRESP *bs,
                       const ASN1_OCTET_STRING **pid,
                       const X509_NAME **pname)
 {
@@ -225,7 +225,7 @@ int OCSP_resp_get0_id(const OCSP_BASICRESP *bs,
     return 1;
 }
 
-int OCSP_resp_get1_id(const OCSP_BASICRESP *bs,
+int __cdecl OCSP_resp_get1_id(const OCSP_BASICRESP *bs,
                       ASN1_OCTET_STRING **pid,
                       X509_NAME **pname)
 {
@@ -247,7 +247,7 @@ int OCSP_resp_get1_id(const OCSP_BASICRESP *bs,
 
 /* Look single response matching a given certificate ID */
 
-int OCSP_resp_find(OCSP_BASICRESP *bs, OCSP_CERTID *id, int last)
+int __cdecl OCSP_resp_find(OCSP_BASICRESP *bs, OCSP_CERTID *id, int last)
 {
     int i;
     STACK_OF(OCSP_SINGLERESP) *sresp;
@@ -273,7 +273,7 @@ int OCSP_resp_find(OCSP_BASICRESP *bs, OCSP_CERTID *id, int last)
  * revoked. Returns numerical value of status.
  */
 
-int OCSP_single_get0_status(OCSP_SINGLERESP *single, int *reason,
+int __cdecl OCSP_single_get0_status(OCSP_SINGLERESP *single, int *reason,
                             ASN1_GENERALIZEDTIME **revtime,
                             ASN1_GENERALIZEDTIME **thisupd,
                             ASN1_GENERALIZEDTIME **nextupd)
@@ -307,7 +307,7 @@ int OCSP_single_get0_status(OCSP_SINGLERESP *single, int *reason,
  * found extract status information. Return 0 is successful.
  */
 
-int OCSP_resp_find_status(OCSP_BASICRESP *bs, OCSP_CERTID *id, int *status,
+int __cdecl OCSP_resp_find_status(OCSP_BASICRESP *bs, OCSP_CERTID *id, int *status,
                           int *reason,
                           ASN1_GENERALIZEDTIME **revtime,
                           ASN1_GENERALIZEDTIME **thisupd,
@@ -335,7 +335,7 @@ int OCSP_resp_find_status(OCSP_BASICRESP *bs, OCSP_CERTID *id, int *status,
  * parameter specifies the maximum age the thisUpdate field can be.
  */
 
-int OCSP_check_validity(ASN1_GENERALIZEDTIME *thisupd,
+int __cdecl OCSP_check_validity(ASN1_GENERALIZEDTIME *thisupd,
                         ASN1_GENERALIZEDTIME *nextupd, long nsec, long maxsec)
 {
     int ret = 1;
@@ -390,7 +390,7 @@ int OCSP_check_validity(ASN1_GENERALIZEDTIME *thisupd,
     return ret;
 }
 
-const OCSP_CERTID *OCSP_SINGLERESP_get0_id(const OCSP_SINGLERESP *single)
+const OCSP_CERTID * __cdecl OCSP_SINGLERESP_get0_id(const OCSP_SINGLERESP *single)
 {
     return single->certId;
 }
diff --git a/crypto/ocsp/ocsp_err.c b/crypto/ocsp/ocsp_err.c
index 660e193665..6b4c8eb9c1 100644
--- a/crypto/ocsp/ocsp_err.c
+++ b/crypto/ocsp/ocsp_err.c
@@ -89,7 +89,7 @@ static const ERR_STRING_DATA OCSP_str_reasons[] = {
 
 #endif
 
-int ERR_load_OCSP_strings(void)
+int __cdecl ERR_load_OCSP_strings(void)
 {
 #ifndef OPENSSL_NO_ERR
     if (ERR_func_error_string(OCSP_str_functs[0].error) == NULL) {
diff --git a/crypto/ocsp/ocsp_ext.c b/crypto/ocsp/ocsp_ext.c
index 3ab5308a12..6e5fb668c5 100644
--- a/crypto/ocsp/ocsp_ext.c
+++ b/crypto/ocsp/ocsp_ext.c
@@ -20,53 +20,53 @@
 
 /* OCSP request extensions */
 
-int OCSP_REQUEST_get_ext_count(OCSP_REQUEST *x)
+int __cdecl OCSP_REQUEST_get_ext_count(OCSP_REQUEST *x)
 {
     return X509v3_get_ext_count(x->tbsRequest.requestExtensions);
 }
 
-int OCSP_REQUEST_get_ext_by_NID(OCSP_REQUEST *x, int nid, int lastpos)
+int __cdecl OCSP_REQUEST_get_ext_by_NID(OCSP_REQUEST *x, int nid, int lastpos)
 {
     return (X509v3_get_ext_by_NID
             (x->tbsRequest.requestExtensions, nid, lastpos));
 }
 
-int OCSP_REQUEST_get_ext_by_OBJ(OCSP_REQUEST *x, const ASN1_OBJECT *obj,
+int __cdecl OCSP_REQUEST_get_ext_by_OBJ(OCSP_REQUEST *x, const ASN1_OBJECT *obj,
                                 int lastpos)
 {
     return (X509v3_get_ext_by_OBJ
             (x->tbsRequest.requestExtensions, obj, lastpos));
 }
 
-int OCSP_REQUEST_get_ext_by_critical(OCSP_REQUEST *x, int crit, int lastpos)
+int __cdecl OCSP_REQUEST_get_ext_by_critical(OCSP_REQUEST *x, int crit, int lastpos)
 {
     return (X509v3_get_ext_by_critical
             (x->tbsRequest.requestExtensions, crit, lastpos));
 }
 
-X509_EXTENSION *OCSP_REQUEST_get_ext(OCSP_REQUEST *x, int loc)
+X509_EXTENSION * __cdecl OCSP_REQUEST_get_ext(OCSP_REQUEST *x, int loc)
 {
     return X509v3_get_ext(x->tbsRequest.requestExtensions, loc);
 }
 
-X509_EXTENSION *OCSP_REQUEST_delete_ext(OCSP_REQUEST *x, int loc)
+X509_EXTENSION * __cdecl OCSP_REQUEST_delete_ext(OCSP_REQUEST *x, int loc)
 {
     return X509v3_delete_ext(x->tbsRequest.requestExtensions, loc);
 }
 
-void *OCSP_REQUEST_get1_ext_d2i(OCSP_REQUEST *x, int nid, int *crit, int *idx)
+void * __cdecl OCSP_REQUEST_get1_ext_d2i(OCSP_REQUEST *x, int nid, int *crit, int *idx)
 {
     return X509V3_get_d2i(x->tbsRequest.requestExtensions, nid, crit, idx);
 }
 
-int OCSP_REQUEST_add1_ext_i2d(OCSP_REQUEST *x, int nid, void *value, int crit,
+int __cdecl OCSP_REQUEST_add1_ext_i2d(OCSP_REQUEST *x, int nid, void *value, int crit,
                               unsigned long flags)
 {
     return X509V3_add1_i2d(&x->tbsRequest.requestExtensions, nid, value,
                            crit, flags);
 }
 
-int OCSP_REQUEST_add_ext(OCSP_REQUEST *x, X509_EXTENSION *ex, int loc)
+int __cdecl OCSP_REQUEST_add_ext(OCSP_REQUEST *x, X509_EXTENSION *ex, int loc)
 {
     return (X509v3_add_ext(&(x->tbsRequest.requestExtensions), ex, loc) !=
             NULL);
@@ -74,107 +74,107 @@ int OCSP_REQUEST_add_ext(OCSP_REQUEST *x, X509_EXTENSION *ex, int loc)
 
 /* Single extensions */
 
-int OCSP_ONEREQ_get_ext_count(OCSP_ONEREQ *x)
+int __cdecl OCSP_ONEREQ_get_ext_count(OCSP_ONEREQ *x)
 {
     return X509v3_get_ext_count(x->singleRequestExtensions);
 }
 
-int OCSP_ONEREQ_get_ext_by_NID(OCSP_ONEREQ *x, int nid, int lastpos)
+int __cdecl OCSP_ONEREQ_get_ext_by_NID(OCSP_ONEREQ *x, int nid, int lastpos)
 {
     return X509v3_get_ext_by_NID(x->singleRequestExtensions, nid, lastpos);
 }
 
-int OCSP_ONEREQ_get_ext_by_OBJ(OCSP_ONEREQ *x, const ASN1_OBJECT *obj,
+int __cdecl OCSP_ONEREQ_get_ext_by_OBJ(OCSP_ONEREQ *x, const ASN1_OBJECT *obj,
                                int lastpos)
 {
     return X509v3_get_ext_by_OBJ(x->singleRequestExtensions, obj, lastpos);
 }
 
-int OCSP_ONEREQ_get_ext_by_critical(OCSP_ONEREQ *x, int crit, int lastpos)
+int __cdecl OCSP_ONEREQ_get_ext_by_critical(OCSP_ONEREQ *x, int crit, int lastpos)
 {
     return (X509v3_get_ext_by_critical
             (x->singleRequestExtensions, crit, lastpos));
 }
 
-X509_EXTENSION *OCSP_ONEREQ_get_ext(OCSP_ONEREQ *x, int loc)
+X509_EXTENSION * __cdecl OCSP_ONEREQ_get_ext(OCSP_ONEREQ *x, int loc)
 {
     return X509v3_get_ext(x->singleRequestExtensions, loc);
 }
 
-X509_EXTENSION *OCSP_ONEREQ_delete_ext(OCSP_ONEREQ *x, int loc)
+X509_EXTENSION * __cdecl OCSP_ONEREQ_delete_ext(OCSP_ONEREQ *x, int loc)
 {
     return X509v3_delete_ext(x->singleRequestExtensions, loc);
 }
 
-void *OCSP_ONEREQ_get1_ext_d2i(OCSP_ONEREQ *x, int nid, int *crit, int *idx)
+void * __cdecl OCSP_ONEREQ_get1_ext_d2i(OCSP_ONEREQ *x, int nid, int *crit, int *idx)
 {
     return X509V3_get_d2i(x->singleRequestExtensions, nid, crit, idx);
 }
 
-int OCSP_ONEREQ_add1_ext_i2d(OCSP_ONEREQ *x, int nid, void *value, int crit,
+int __cdecl OCSP_ONEREQ_add1_ext_i2d(OCSP_ONEREQ *x, int nid, void *value, int crit,
                              unsigned long flags)
 {
     return X509V3_add1_i2d(&x->singleRequestExtensions, nid, value, crit,
                            flags);
 }
 
-int OCSP_ONEREQ_add_ext(OCSP_ONEREQ *x, X509_EXTENSION *ex, int loc)
+int __cdecl OCSP_ONEREQ_add_ext(OCSP_ONEREQ *x, X509_EXTENSION *ex, int loc)
 {
     return (X509v3_add_ext(&(x->singleRequestExtensions), ex, loc) != NULL);
 }
 
 /* OCSP Basic response */
 
-int OCSP_BASICRESP_get_ext_count(OCSP_BASICRESP *x)
+int __cdecl OCSP_BASICRESP_get_ext_count(OCSP_BASICRESP *x)
 {
     return X509v3_get_ext_count(x->tbsResponseData.responseExtensions);
 }
 
-int OCSP_BASICRESP_get_ext_by_NID(OCSP_BASICRESP *x, int nid, int lastpos)
+int __cdecl OCSP_BASICRESP_get_ext_by_NID(OCSP_BASICRESP *x, int nid, int lastpos)
 {
     return (X509v3_get_ext_by_NID
             (x->tbsResponseData.responseExtensions, nid, lastpos));
 }
 
-int OCSP_BASICRESP_get_ext_by_OBJ(OCSP_BASICRESP *x, const ASN1_OBJECT *obj,
+int __cdecl OCSP_BASICRESP_get_ext_by_OBJ(OCSP_BASICRESP *x, const ASN1_OBJECT *obj,
                                   int lastpos)
 {
     return (X509v3_get_ext_by_OBJ
             (x->tbsResponseData.responseExtensions, obj, lastpos));
 }
 
-int OCSP_BASICRESP_get_ext_by_critical(OCSP_BASICRESP *x, int crit,
+int __cdecl OCSP_BASICRESP_get_ext_by_critical(OCSP_BASICRESP *x, int crit,
                                        int lastpos)
 {
     return (X509v3_get_ext_by_critical
             (x->tbsResponseData.responseExtensions, crit, lastpos));
 }
 
-X509_EXTENSION *OCSP_BASICRESP_get_ext(OCSP_BASICRESP *x, int loc)
+X509_EXTENSION * __cdecl OCSP_BASICRESP_get_ext(OCSP_BASICRESP *x, int loc)
 {
     return X509v3_get_ext(x->tbsResponseData.responseExtensions, loc);
 }
 
-X509_EXTENSION *OCSP_BASICRESP_delete_ext(OCSP_BASICRESP *x, int loc)
+X509_EXTENSION * __cdecl OCSP_BASICRESP_delete_ext(OCSP_BASICRESP *x, int loc)
 {
     return X509v3_delete_ext(x->tbsResponseData.responseExtensions, loc);
 }
 
-void *OCSP_BASICRESP_get1_ext_d2i(OCSP_BASICRESP *x, int nid, int *crit,
+void * __cdecl OCSP_BASICRESP_get1_ext_d2i(OCSP_BASICRESP *x, int nid, int *crit,
                                   int *idx)
 {
     return X509V3_get_d2i(x->tbsResponseData.responseExtensions, nid, crit,
                           idx);
 }
 
-int OCSP_BASICRESP_add1_ext_i2d(OCSP_BASICRESP *x, int nid, void *value,
+int __cdecl OCSP_BASICRESP_add1_ext_i2d(OCSP_BASICRESP *x, int nid, void *value,
                                 int crit, unsigned long flags)
 {
     return X509V3_add1_i2d(&x->tbsResponseData.responseExtensions, nid,
                            value, crit, flags);
 }
 
-int OCSP_BASICRESP_add_ext(OCSP_BASICRESP *x, X509_EXTENSION *ex, int loc)
+int __cdecl OCSP_BASICRESP_add_ext(OCSP_BASICRESP *x, X509_EXTENSION *ex, int loc)
 {
     return (X509v3_add_ext(&(x->tbsResponseData.responseExtensions), ex, loc)
             != NULL);
@@ -182,51 +182,51 @@ int OCSP_BASICRESP_add_ext(OCSP_BASICRESP *x, X509_EXTENSION *ex, int loc)
 
 /* OCSP single response extensions */
 
-int OCSP_SINGLERESP_get_ext_count(OCSP_SINGLERESP *x)
+int __cdecl OCSP_SINGLERESP_get_ext_count(OCSP_SINGLERESP *x)
 {
     return X509v3_get_ext_count(x->singleExtensions);
 }
 
-int OCSP_SINGLERESP_get_ext_by_NID(OCSP_SINGLERESP *x, int nid, int lastpos)
+int __cdecl OCSP_SINGLERESP_get_ext_by_NID(OCSP_SINGLERESP *x, int nid, int lastpos)
 {
     return X509v3_get_ext_by_NID(x->singleExtensions, nid, lastpos);
 }
 
-int OCSP_SINGLERESP_get_ext_by_OBJ(OCSP_SINGLERESP *x, const ASN1_OBJECT *obj,
+int __cdecl OCSP_SINGLERESP_get_ext_by_OBJ(OCSP_SINGLERESP *x, const ASN1_OBJECT *obj,
                                    int lastpos)
 {
     return X509v3_get_ext_by_OBJ(x->singleExtensions, obj, lastpos);
 }
 
-int OCSP_SINGLERESP_get_ext_by_critical(OCSP_SINGLERESP *x, int crit,
+int __cdecl OCSP_SINGLERESP_get_ext_by_critical(OCSP_SINGLERESP *x, int crit,
                                         int lastpos)
 {
     return X509v3_get_ext_by_critical(x->singleExtensions, crit, lastpos);
 }
 
-X509_EXTENSION *OCSP_SINGLERESP_get_ext(OCSP_SINGLERESP *x, int loc)
+X509_EXTENSION * __cdecl OCSP_SINGLERESP_get_ext(OCSP_SINGLERESP *x, int loc)
 {
     return X509v3_get_ext(x->singleExtensions, loc);
 }
 
-X509_EXTENSION *OCSP_SINGLERESP_delete_ext(OCSP_SINGLERESP *x, int loc)
+X509_EXTENSION * __cdecl OCSP_SINGLERESP_delete_ext(OCSP_SINGLERESP *x, int loc)
 {
     return X509v3_delete_ext(x->singleExtensions, loc);
 }
 
-void *OCSP_SINGLERESP_get1_ext_d2i(OCSP_SINGLERESP *x, int nid, int *crit,
+void * __cdecl OCSP_SINGLERESP_get1_ext_d2i(OCSP_SINGLERESP *x, int nid, int *crit,
                                    int *idx)
 {
     return X509V3_get_d2i(x->singleExtensions, nid, crit, idx);
 }
 
-int OCSP_SINGLERESP_add1_ext_i2d(OCSP_SINGLERESP *x, int nid, void *value,
+int __cdecl OCSP_SINGLERESP_add1_ext_i2d(OCSP_SINGLERESP *x, int nid, void *value,
                                  int crit, unsigned long flags)
 {
     return X509V3_add1_i2d(&x->singleExtensions, nid, value, crit, flags);
 }
 
-int OCSP_SINGLERESP_add_ext(OCSP_SINGLERESP *x, X509_EXTENSION *ex, int loc)
+int __cdecl OCSP_SINGLERESP_add_ext(OCSP_SINGLERESP *x, X509_EXTENSION *ex, int loc)
 {
     return (X509v3_add_ext(&(x->singleExtensions), ex, loc) != NULL);
 }
@@ -279,14 +279,14 @@ static int ocsp_add1_nonce(STACK_OF(X509_EXTENSION) **exts,
 
 /* Add nonce to an OCSP request */
 
-int OCSP_request_add1_nonce(OCSP_REQUEST *req, unsigned char *val, int len)
+int __cdecl OCSP_request_add1_nonce(OCSP_REQUEST *req, unsigned char *val, int len)
 {
     return ocsp_add1_nonce(&req->tbsRequest.requestExtensions, val, len);
 }
 
 /* Same as above but for a response */
 
-int OCSP_basic_add1_nonce(OCSP_BASICRESP *resp, unsigned char *val, int len)
+int __cdecl OCSP_basic_add1_nonce(OCSP_BASICRESP *resp, unsigned char *val, int len)
 {
     return ocsp_add1_nonce(&resp->tbsResponseData.responseExtensions, val,
                            len);
@@ -306,7 +306,7 @@ int OCSP_basic_add1_nonce(OCSP_BASICRESP *resp, unsigned char *val, int len)
  *  necessary. return == 0 is always an error.
  */
 
-int OCSP_check_nonce(OCSP_REQUEST *req, OCSP_BASICRESP *bs)
+int __cdecl OCSP_check_nonce(OCSP_REQUEST *req, OCSP_BASICRESP *bs)
 {
     /*
      * Since we are only interested in the presence or absence of
@@ -344,7 +344,7 @@ int OCSP_check_nonce(OCSP_REQUEST *req, OCSP_BASICRESP *bs)
  * Copy the nonce value (if any) from an OCSP request to a response.
  */
 
-int OCSP_copy_nonce(OCSP_BASICRESP *resp, OCSP_REQUEST *req)
+int __cdecl OCSP_copy_nonce(OCSP_BASICRESP *resp, OCSP_REQUEST *req)
 {
     X509_EXTENSION *req_ext;
     int req_idx;
@@ -357,7 +357,7 @@ int OCSP_copy_nonce(OCSP_BASICRESP *resp, OCSP_REQUEST *req)
     return OCSP_BASICRESP_add_ext(resp, req_ext, -1);
 }
 
-X509_EXTENSION *OCSP_crlID_new(const char *url, long *n, char *tim)
+X509_EXTENSION * __cdecl OCSP_crlID_new(const char *url, long *n, char *tim)
 {
     X509_EXTENSION *x = NULL;
     OCSP_CRLID *cid = NULL;
@@ -389,7 +389,7 @@ X509_EXTENSION *OCSP_crlID_new(const char *url, long *n, char *tim)
 }
 
 /*   AcceptableResponses ::= SEQUENCE OF OBJECT IDENTIFIER */
-X509_EXTENSION *OCSP_accept_responses_new(char **oids)
+X509_EXTENSION * __cdecl OCSP_accept_responses_new(char **oids)
 {
     int nid;
     STACK_OF(ASN1_OBJECT) *sk = NULL;
@@ -410,7 +410,7 @@ X509_EXTENSION *OCSP_accept_responses_new(char **oids)
 }
 
 /*  ArchiveCutoff ::= GeneralizedTime */
-X509_EXTENSION *OCSP_archive_cutoff_new(char *tim)
+X509_EXTENSION * __cdecl OCSP_archive_cutoff_new(char *tim)
 {
     X509_EXTENSION *x = NULL;
     ASN1_GENERALIZEDTIME *gt = NULL;
@@ -430,7 +430,7 @@ X509_EXTENSION *OCSP_archive_cutoff_new(char *tim)
  * two--NID_ad_ocsp, NID_id_ad_caIssuers--and GeneralName value.  This method
  * forces NID_ad_ocsp and uniformResourceLocator [6] IA5String.
  */
-X509_EXTENSION *OCSP_url_svcloc_new(X509_NAME *issuer, const char **urls)
+X509_EXTENSION * __cdecl OCSP_url_svcloc_new(X509_NAME *issuer, const char **urls)
 {
     X509_EXTENSION *x = NULL;
     ASN1_IA5STRING *ia5 = NULL;
diff --git a/crypto/ocsp/ocsp_ht.c b/crypto/ocsp/ocsp_ht.c
index 42c3686431..b1aabd82f8 100644
--- a/crypto/ocsp/ocsp_ht.c
+++ b/crypto/ocsp/ocsp_ht.c
@@ -61,7 +61,7 @@ struct ocsp_req_ctx_st {
 
 static int parse_http_line1(char *line);
 
-OCSP_REQ_CTX *OCSP_REQ_CTX_new(BIO *io, int maxline)
+OCSP_REQ_CTX * __cdecl OCSP_REQ_CTX_new(BIO *io, int maxline)
 {
     OCSP_REQ_CTX *rctx = OPENSSL_zalloc(sizeof(*rctx));
 
@@ -83,7 +83,7 @@ OCSP_REQ_CTX *OCSP_REQ_CTX_new(BIO *io, int maxline)
     return rctx;
 }
 
-void OCSP_REQ_CTX_free(OCSP_REQ_CTX *rctx)
+void __cdecl OCSP_REQ_CTX_free(OCSP_REQ_CTX *rctx)
 {
     if (!rctx)
         return;
@@ -92,12 +92,12 @@ void OCSP_REQ_CTX_free(OCSP_REQ_CTX *rctx)
     OPENSSL_free(rctx);
 }
 
-BIO *OCSP_REQ_CTX_get0_mem_bio(OCSP_REQ_CTX *rctx)
+BIO * __cdecl OCSP_REQ_CTX_get0_mem_bio(OCSP_REQ_CTX *rctx)
 {
     return rctx->mem;
 }
 
-void OCSP_set_max_response_length(OCSP_REQ_CTX *rctx, unsigned long len)
+void __cdecl OCSP_set_max_response_length(OCSP_REQ_CTX *rctx, unsigned long len)
 {
     if (len == 0)
         rctx->max_resp_len = OCSP_MAX_RESP_LENGTH;
@@ -105,7 +105,7 @@ void OCSP_set_max_response_length(OCSP_REQ_CTX *rctx, unsigned long len)
         rctx->max_resp_len = len;
 }
 
-int OCSP_REQ_CTX_i2d(OCSP_REQ_CTX *rctx, const ASN1_ITEM *it, ASN1_VALUE *val)
+int __cdecl OCSP_REQ_CTX_i2d(OCSP_REQ_CTX *rctx, const ASN1_ITEM *it, ASN1_VALUE *val)
 {
     static const char req_hdr[] =
         "Content-Type: application/ocsp-request\r\n"
@@ -119,7 +119,7 @@ int OCSP_REQ_CTX_i2d(OCSP_REQ_CTX *rctx, const ASN1_ITEM *it, ASN1_VALUE *val)
     return 1;
 }
 
-int OCSP_REQ_CTX_nbio_d2i(OCSP_REQ_CTX *rctx,
+int __cdecl OCSP_REQ_CTX_nbio_d2i(OCSP_REQ_CTX *rctx,
                           ASN1_VALUE **pval, const ASN1_ITEM *it)
 {
     int rv, len;
@@ -138,7 +138,7 @@ int OCSP_REQ_CTX_nbio_d2i(OCSP_REQ_CTX *rctx,
     return 1;
 }
 
-int OCSP_REQ_CTX_http(OCSP_REQ_CTX *rctx, const char *op, const char *path)
+int __cdecl OCSP_REQ_CTX_http(OCSP_REQ_CTX *rctx, const char *op, const char *path)
 {
     static const char http_hdr[] = "%s %s HTTP/1.0\r\n";
 
@@ -151,13 +151,13 @@ int OCSP_REQ_CTX_http(OCSP_REQ_CTX *rctx, const char *op, const char *path)
     return 1;
 }
 
-int OCSP_REQ_CTX_set1_req(OCSP_REQ_CTX *rctx, OCSP_REQUEST *req)
+int __cdecl OCSP_REQ_CTX_set1_req(OCSP_REQ_CTX *rctx, OCSP_REQUEST *req)
 {
     return OCSP_REQ_CTX_i2d(rctx, ASN1_ITEM_rptr(OCSP_REQUEST),
                             (ASN1_VALUE *)req);
 }
 
-int OCSP_REQ_CTX_add1_header(OCSP_REQ_CTX *rctx,
+int __cdecl OCSP_REQ_CTX_add1_header(OCSP_REQ_CTX *rctx,
                              const char *name, const char *value)
 {
     if (!name)
@@ -176,7 +176,7 @@ int OCSP_REQ_CTX_add1_header(OCSP_REQ_CTX *rctx,
     return 1;
 }
 
-OCSP_REQ_CTX *OCSP_sendreq_new(BIO *io, const char *path, OCSP_REQUEST *req,
+OCSP_REQ_CTX * __cdecl OCSP_sendreq_new(BIO *io, const char *path, OCSP_REQUEST *req,
                                int maxline)
 {
 
@@ -269,7 +269,7 @@ static int parse_http_line1(char *line)
 
 }
 
-int OCSP_REQ_CTX_nbio(OCSP_REQ_CTX *rctx)
+int __cdecl OCSP_REQ_CTX_nbio(OCSP_REQ_CTX *rctx)
 {
     int i, n;
     const unsigned char *p;
@@ -469,7 +469,7 @@ int OCSP_REQ_CTX_nbio(OCSP_REQ_CTX *rctx)
 
 }
 
-int OCSP_sendreq_nbio(OCSP_RESPONSE **presp, OCSP_REQ_CTX *rctx)
+int __cdecl OCSP_sendreq_nbio(OCSP_RESPONSE **presp, OCSP_REQ_CTX *rctx)
 {
     return OCSP_REQ_CTX_nbio_d2i(rctx,
                                  (ASN1_VALUE **)presp,
@@ -478,7 +478,7 @@ int OCSP_sendreq_nbio(OCSP_RESPONSE **presp, OCSP_REQ_CTX *rctx)
 
 /* Blocking OCSP request handler: now a special case of non-blocking I/O */
 
-OCSP_RESPONSE *OCSP_sendreq_bio(BIO *b, const char *path, OCSP_REQUEST *req)
+OCSP_RESPONSE * __cdecl OCSP_sendreq_bio(BIO *b, const char *path, OCSP_REQUEST *req)
 {
     OCSP_RESPONSE *resp = NULL;
     OCSP_REQ_CTX *ctx;
diff --git a/crypto/ocsp/ocsp_lib.c b/crypto/ocsp/ocsp_lib.c
index b8b91cc9eb..81084ae167 100644
--- a/crypto/ocsp/ocsp_lib.c
+++ b/crypto/ocsp/ocsp_lib.c
@@ -19,7 +19,7 @@
 
 /* Convert a certificate and its issuer to an OCSP_CERTID */
 
-OCSP_CERTID *OCSP_cert_to_id(const EVP_MD *dgst, const X509 *subject,
+OCSP_CERTID * __cdecl OCSP_cert_to_id(const EVP_MD *dgst, const X509 *subject,
                              const X509 *issuer)
 {
     X509_NAME *iname;
@@ -38,7 +38,7 @@ OCSP_CERTID *OCSP_cert_to_id(const EVP_MD *dgst, const X509 *subject,
     return OCSP_cert_id_new(dgst, iname, ikey, serial);
 }
 
-OCSP_CERTID *OCSP_cert_id_new(const EVP_MD *dgst,
+OCSP_CERTID * __cdecl OCSP_cert_id_new(const EVP_MD *dgst,
                               const X509_NAME *issuerName,
                               const ASN1_BIT_STRING *issuerKey,
                               const ASN1_INTEGER *serialNumber)
@@ -88,7 +88,7 @@ OCSP_CERTID *OCSP_cert_id_new(const EVP_MD *dgst,
     return NULL;
 }
 
-int OCSP_id_issuer_cmp(const OCSP_CERTID *a, const OCSP_CERTID *b)
+int __cdecl OCSP_id_issuer_cmp(const OCSP_CERTID *a, const OCSP_CERTID *b)
 {
     int ret;
     ret = OBJ_cmp(a->hashAlgorithm.algorithm, b->hashAlgorithm.algorithm);
@@ -100,7 +100,7 @@ int OCSP_id_issuer_cmp(const OCSP_CERTID *a, const OCSP_CERTID *b)
     return ASN1_OCTET_STRING_cmp(&a->issuerKeyHash, &b->issuerKeyHash);
 }
 
-int OCSP_id_cmp(const OCSP_CERTID *a, const OCSP_CERTID *b)
+int __cdecl OCSP_id_cmp(const OCSP_CERTID *a, const OCSP_CERTID *b)
 {
     int ret;
     ret = OCSP_id_issuer_cmp(a, b);
@@ -114,7 +114,7 @@ int OCSP_id_cmp(const OCSP_CERTID *a, const OCSP_CERTID *b)
  * whether it is SSL.
  */
 
-int OCSP_parse_url(const char *url, char **phost, char **pport, char **ppath,
+int __cdecl OCSP_parse_url(const char *url, char **phost, char **pport, char **ppath,
                    int *pssl)
 {
     char *p, *buf;
diff --git a/crypto/ocsp/ocsp_prn.c b/crypto/ocsp/ocsp_prn.c
index 5605812ef7..abba225944 100644
--- a/crypto/ocsp/ocsp_prn.c
+++ b/crypto/ocsp/ocsp_prn.c
@@ -46,7 +46,7 @@ static const char *do_table2string(long s, const OCSP_TBLSTR *ts, size_t len)
 
 #define table2string(s, tbl) do_table2string(s, tbl, OSSL_NELEM(tbl))
 
-const char *OCSP_response_status_str(long s)
+const char * __cdecl OCSP_response_status_str(long s)
 {
     static const OCSP_TBLSTR rstat_tbl[] = {
         {OCSP_RESPONSE_STATUS_SUCCESSFUL, "successful"},
@@ -59,7 +59,7 @@ const char *OCSP_response_status_str(long s)
     return table2string(s, rstat_tbl);
 }
 
-const char *OCSP_cert_status_str(long s)
+const char * __cdecl OCSP_cert_status_str(long s)
 {
     static const OCSP_TBLSTR cstat_tbl[] = {
         {V_OCSP_CERTSTATUS_GOOD, "good"},
@@ -69,7 +69,7 @@ const char *OCSP_cert_status_str(long s)
     return table2string(s, cstat_tbl);
 }
 
-const char *OCSP_crl_reason_str(long s)
+const char * __cdecl OCSP_crl_reason_str(long s)
 {
     static const OCSP_TBLSTR reason_tbl[] = {
         {OCSP_REVOKED_STATUS_UNSPECIFIED, "unspecified"},
@@ -84,7 +84,7 @@ const char *OCSP_crl_reason_str(long s)
     return table2string(s, reason_tbl);
 }
 
-int OCSP_REQUEST_print(BIO *bp, OCSP_REQUEST *o, unsigned long flags)
+int __cdecl OCSP_REQUEST_print(BIO *bp, OCSP_REQUEST *o, unsigned long flags)
 {
     int i;
     long l;
@@ -129,7 +129,7 @@ int OCSP_REQUEST_print(BIO *bp, OCSP_REQUEST *o, unsigned long flags)
     return 0;
 }
 
-int OCSP_RESPONSE_print(BIO *bp, OCSP_RESPONSE *o, unsigned long flags)
+int __cdecl OCSP_RESPONSE_print(BIO *bp, OCSP_RESPONSE *o, unsigned long flags)
 {
     int i, ret = 0;
     long l;
diff --git a/crypto/ocsp/ocsp_srv.c b/crypto/ocsp/ocsp_srv.c
index 6bd6f7b6d8..0cf4e6b2f6 100644
--- a/crypto/ocsp/ocsp_srv.c
+++ b/crypto/ocsp/ocsp_srv.c
@@ -21,22 +21,22 @@
  * relevant information from the request.
  */
 
-int OCSP_request_onereq_count(OCSP_REQUEST *req)
+int __cdecl OCSP_request_onereq_count(OCSP_REQUEST *req)
 {
     return sk_OCSP_ONEREQ_num(req->tbsRequest.requestList);
 }
 
-OCSP_ONEREQ *OCSP_request_onereq_get0(OCSP_REQUEST *req, int i)
+OCSP_ONEREQ * __cdecl OCSP_request_onereq_get0(OCSP_REQUEST *req, int i)
 {
     return sk_OCSP_ONEREQ_value(req->tbsRequest.requestList, i);
 }
 
-OCSP_CERTID *OCSP_onereq_get0_id(OCSP_ONEREQ *one)
+OCSP_CERTID * __cdecl OCSP_onereq_get0_id(OCSP_ONEREQ *one)
 {
     return one->reqCert;
 }
 
-int OCSP_id_get0_info(ASN1_OCTET_STRING **piNameHash, ASN1_OBJECT **pmd,
+int __cdecl OCSP_id_get0_info(ASN1_OCTET_STRING **piNameHash, ASN1_OBJECT **pmd,
                       ASN1_OCTET_STRING **pikeyHash,
                       ASN1_INTEGER **pserial, OCSP_CERTID *cid)
 {
@@ -53,7 +53,7 @@ int OCSP_id_get0_info(ASN1_OCTET_STRING **piNameHash, ASN1_OBJECT **pmd,
     return 1;
 }
 
-int OCSP_request_is_signed(OCSP_REQUEST *req)
+int __cdecl OCSP_request_is_signed(OCSP_REQUEST *req)
 {
     if (req->optionalSignature)
         return 1;
@@ -61,7 +61,7 @@ int OCSP_request_is_signed(OCSP_REQUEST *req)
 }
 
 /* Create an OCSP response and encode an optional basic response */
-OCSP_RESPONSE *OCSP_response_create(int status, OCSP_BASICRESP *bs)
+OCSP_RESPONSE * __cdecl OCSP_response_create(int status, OCSP_BASICRESP *bs)
 {
     OCSP_RESPONSE *rsp = NULL;
 
@@ -83,7 +83,7 @@ OCSP_RESPONSE *OCSP_response_create(int status, OCSP_BASICRESP *bs)
     return NULL;
 }
 
-OCSP_SINGLERESP *OCSP_basic_add1_status(OCSP_BASICRESP *rsp,
+OCSP_SINGLERESP * __cdecl OCSP_basic_add1_status(OCSP_BASICRESP *rsp,
                                         OCSP_CERTID *cid,
                                         int status, int reason,
                                         ASN1_TIME *revtime,
@@ -156,7 +156,7 @@ OCSP_SINGLERESP *OCSP_basic_add1_status(OCSP_BASICRESP *rsp,
 
 /* Add a certificate to an OCSP request */
 
-int OCSP_basic_add1_cert(OCSP_BASICRESP *resp, X509 *cert)
+int __cdecl OCSP_basic_add1_cert(OCSP_BASICRESP *resp, X509 *cert)
 {
     if (resp->certs == NULL
         && (resp->certs = sk_X509_new_null()) == NULL)
@@ -174,7 +174,7 @@ int OCSP_basic_add1_cert(OCSP_BASICRESP *resp, X509 *cert)
  * include one or more optional certificates in the response.
  */
 
-int OCSP_basic_sign_ctx(OCSP_BASICRESP *brsp,
+int __cdecl OCSP_basic_sign_ctx(OCSP_BASICRESP *brsp,
                     X509 *signer, EVP_MD_CTX *ctx,
                     STACK_OF(X509) *certs, unsigned long flags)
 {
@@ -229,7 +229,7 @@ int OCSP_basic_sign_ctx(OCSP_BASICRESP *brsp,
     return 0;
 }
 
-int OCSP_basic_sign(OCSP_BASICRESP *brsp,
+int __cdecl OCSP_basic_sign(OCSP_BASICRESP *brsp,
                     X509 *signer, EVP_PKEY *key, const EVP_MD *dgst,
                     STACK_OF(X509) *certs, unsigned long flags)
 {
@@ -249,7 +249,7 @@ int OCSP_basic_sign(OCSP_BASICRESP *brsp,
     return i;
 }
 
-int OCSP_RESPID_set_by_name(OCSP_RESPID *respid, X509 *cert)
+int __cdecl OCSP_RESPID_set_by_name(OCSP_RESPID *respid, X509 *cert)
 {
     if (!X509_NAME_set(&respid->value.byName, X509_get_subject_name(cert)))
         return 0;
@@ -259,7 +259,7 @@ int OCSP_RESPID_set_by_name(OCSP_RESPID *respid, X509 *cert)
     return 1;
 }
 
-int OCSP_RESPID_set_by_key(OCSP_RESPID *respid, X509 *cert)
+int __cdecl OCSP_RESPID_set_by_key(OCSP_RESPID *respid, X509 *cert)
 {
     ASN1_OCTET_STRING *byKey = NULL;
     unsigned char md[SHA_DIGEST_LENGTH];
@@ -283,7 +283,7 @@ int OCSP_RESPID_set_by_key(OCSP_RESPID *respid, X509 *cert)
     return 1;
 }
 
-int OCSP_RESPID_match(OCSP_RESPID *respid, X509 *cert)
+int __cdecl OCSP_RESPID_match(OCSP_RESPID *respid, X509 *cert)
 {
     if (respid->type == V_OCSP_RESPID_KEY) {
         unsigned char md[SHA_DIGEST_LENGTH];
diff --git a/crypto/ocsp/ocsp_vfy.c b/crypto/ocsp/ocsp_vfy.c
index 9a8d343866..e6933c19ef 100644
--- a/crypto/ocsp/ocsp_vfy.c
+++ b/crypto/ocsp/ocsp_vfy.c
@@ -27,7 +27,7 @@ static int ocsp_req_find_signer(X509 **psigner, OCSP_REQUEST *req,
 
 /* Verify a basic response message */
 
-int OCSP_basic_verify(OCSP_BASICRESP *bs, STACK_OF(X509) *certs,
+int __cdecl OCSP_basic_verify(OCSP_BASICRESP *bs, STACK_OF(X509) *certs,
                       X509_STORE *st, unsigned long flags)
 {
     X509 *signer, *x;
@@ -138,7 +138,7 @@ int OCSP_basic_verify(OCSP_BASICRESP *bs, STACK_OF(X509) *certs,
     goto end;
 }
 
-int OCSP_resp_get0_signer(OCSP_BASICRESP *bs, X509 **signer,
+int __cdecl OCSP_resp_get0_signer(OCSP_BASICRESP *bs, X509 **signer,
                           STACK_OF(X509) *extra_certs)
 {
     int ret;
@@ -336,7 +336,7 @@ static int ocsp_check_delegated(X509 *x)
  * trust value.
  */
 
-int OCSP_request_verify(OCSP_REQUEST *req, STACK_OF(X509) *certs,
+int __cdecl OCSP_request_verify(OCSP_REQUEST *req, STACK_OF(X509) *certs,
                         X509_STORE *store, unsigned long flags)
 {
     X509 *signer;
diff --git a/crypto/ocsp/v3_ocsp.c b/crypto/ocsp/v3_ocsp.c
index 2d425a8951..8d20dcad0a 100644
--- a/crypto/ocsp/v3_ocsp.c
+++ b/crypto/ocsp/v3_ocsp.c
@@ -20,25 +20,25 @@
  * OCSP extensions and a couple of CRL entry extensions
  */
 
-static int i2r_ocsp_crlid(const X509V3_EXT_METHOD *method, void *nonce,
+static int __cdecl i2r_ocsp_crlid(const X509V3_EXT_METHOD *method, void *nonce,
                           BIO *out, int indent);
-static int i2r_ocsp_acutoff(const X509V3_EXT_METHOD *method, void *nonce,
+static int __cdecl i2r_ocsp_acutoff(const X509V3_EXT_METHOD *method, void *nonce,
                             BIO *out, int indent);
-static int i2r_object(const X509V3_EXT_METHOD *method, void *obj, BIO *out,
+static int __cdecl i2r_object(const X509V3_EXT_METHOD *method, void *obj, BIO *out,
                       int indent);
 
-static void *ocsp_nonce_new(void);
-static int i2d_ocsp_nonce(void *a, unsigned char **pp);
-static void *d2i_ocsp_nonce(void *a, const unsigned char **pp, long length);
-static void ocsp_nonce_free(void *a);
-static int i2r_ocsp_nonce(const X509V3_EXT_METHOD *method, void *nonce,
+static void * __cdecl ocsp_nonce_new(void);
+static int __cdecl i2d_ocsp_nonce(void *a, unsigned char **pp);
+static void * __cdecl d2i_ocsp_nonce(void *a, const unsigned char **pp, long length);
+static void __cdecl ocsp_nonce_free(void *a);
+static int __cdecl i2r_ocsp_nonce(const X509V3_EXT_METHOD *method, void *nonce,
                           BIO *out, int indent);
 
-static int i2r_ocsp_nocheck(const X509V3_EXT_METHOD *method,
+static int __cdecl i2r_ocsp_nocheck(const X509V3_EXT_METHOD *method,
                             void *nocheck, BIO *out, int indent);
-static void *s2i_ocsp_nocheck(const X509V3_EXT_METHOD *method,
+static void * __cdecl s2i_ocsp_nocheck(const X509V3_EXT_METHOD *method,
                               X509V3_CTX *ctx, const char *str);
-static int i2r_ocsp_serviceloc(const X509V3_EXT_METHOD *method, void *in,
+static int __cdecl i2r_ocsp_serviceloc(const X509V3_EXT_METHOD *method, void *in,
                                BIO *bp, int ind);
 
 const X509V3_EXT_METHOD v3_ocsp_crlid = {
@@ -107,7 +107,7 @@ const X509V3_EXT_METHOD v3_ocsp_serviceloc = {
     NULL
 };
 
-static int i2r_ocsp_crlid(const X509V3_EXT_METHOD *method, void *in, BIO *bp,
+static int __cdecl i2r_ocsp_crlid(const X509V3_EXT_METHOD *method, void *in, BIO *bp,
                           int ind)
 {
     OCSP_CRLID *a = in;
@@ -140,7 +140,7 @@ static int i2r_ocsp_crlid(const X509V3_EXT_METHOD *method, void *in, BIO *bp,
     return 0;
 }
 
-static int i2r_ocsp_acutoff(const X509V3_EXT_METHOD *method, void *cutoff,
+static int __cdecl i2r_ocsp_acutoff(const X509V3_EXT_METHOD *method, void *cutoff,
                             BIO *bp, int ind)
 {
     if (BIO_printf(bp, "%*s", ind, "") <= 0)
@@ -150,7 +150,7 @@ static int i2r_ocsp_acutoff(const X509V3_EXT_METHOD *method, void *cutoff,
     return 1;
 }
 
-static int i2r_object(const X509V3_EXT_METHOD *method, void *oid, BIO *bp,
+static int __cdecl i2r_object(const X509V3_EXT_METHOD *method, void *oid, BIO *bp,
                       int ind)
 {
     if (BIO_printf(bp, "%*s", ind, "") <= 0)
@@ -165,12 +165,12 @@ static int i2r_object(const X509V3_EXT_METHOD *method, void *oid, BIO *bp,
  * ASN1 encoding at all: it just contains arbitrary data.
  */
 
-static void *ocsp_nonce_new(void)
+static void * __cdecl ocsp_nonce_new(void)
 {
     return ASN1_OCTET_STRING_new();
 }
 
-static int i2d_ocsp_nonce(void *a, unsigned char **pp)
+static int __cdecl i2d_ocsp_nonce(void *a, unsigned char **pp)
 {
     ASN1_OCTET_STRING *os = a;
     if (pp) {
@@ -180,7 +180,7 @@ static int i2d_ocsp_nonce(void *a, unsigned char **pp)
     return os->length;
 }
 
-static void *d2i_ocsp_nonce(void *a, const unsigned char **pp, long length)
+static void * __cdecl d2i_ocsp_nonce(void *a, const unsigned char **pp, long length)
 {
     ASN1_OCTET_STRING *os, **pos;
     pos = a;
@@ -207,12 +207,12 @@ static void *d2i_ocsp_nonce(void *a, const unsigned char **pp, long length)
     return NULL;
 }
 
-static void ocsp_nonce_free(void *a)
+static void __cdecl ocsp_nonce_free(void *a)
 {
     ASN1_OCTET_STRING_free(a);
 }
 
-static int i2r_ocsp_nonce(const X509V3_EXT_METHOD *method, void *nonce,
+static int __cdecl i2r_ocsp_nonce(const X509V3_EXT_METHOD *method, void *nonce,
                           BIO *out, int indent)
 {
     if (BIO_printf(out, "%*s", indent, "") <= 0)
@@ -224,19 +224,19 @@ static int i2r_ocsp_nonce(const X509V3_EXT_METHOD *method, void *nonce,
 
 /* Nocheck is just a single NULL. Don't print anything and always set it */
 
-static int i2r_ocsp_nocheck(const X509V3_EXT_METHOD *method, void *nocheck,
+static int __cdecl i2r_ocsp_nocheck(const X509V3_EXT_METHOD *method, void *nocheck,
                             BIO *out, int indent)
 {
     return 1;
 }
 
-static void *s2i_ocsp_nocheck(const X509V3_EXT_METHOD *method,
+static void * __cdecl s2i_ocsp_nocheck(const X509V3_EXT_METHOD *method,
                               X509V3_CTX *ctx, const char *str)
 {
     return ASN1_NULL_new();
 }
 
-static int i2r_ocsp_serviceloc(const X509V3_EXT_METHOD *method, void *in,
+static int __cdecl i2r_ocsp_serviceloc(const X509V3_EXT_METHOD *method, void *in,
                                BIO *bp, int ind)
 {
     int i;
diff --git a/crypto/pem/pem_all.c b/crypto/pem/pem_all.c
index 0e71813113..7214aadb30 100644
--- a/crypto/pem/pem_all.c
+++ b/crypto/pem/pem_all.c
@@ -60,7 +60,7 @@ static RSA *pkey_get_rsa(EVP_PKEY *key, RSA **rsa)
     return rtmp;
 }
 
-RSA *PEM_read_bio_RSAPrivateKey(BIO *bp, RSA **rsa, pem_password_cb *cb,
+RSA * __cdecl PEM_read_bio_RSAPrivateKey(BIO *bp, RSA **rsa, pem_password_cb *cb,
                                 void *u)
 {
     EVP_PKEY *pktmp;
@@ -70,7 +70,7 @@ RSA *PEM_read_bio_RSAPrivateKey(BIO *bp, RSA **rsa, pem_password_cb *cb,
 
 # ifndef OPENSSL_NO_STDIO
 
-RSA *PEM_read_RSAPrivateKey(FILE *fp, RSA **rsa, pem_password_cb *cb, void *u)
+RSA * __cdecl PEM_read_RSAPrivateKey(FILE *fp, RSA **rsa, pem_password_cb *cb, void *u)
 {
     EVP_PKEY *pktmp;
     pktmp = PEM_read_PrivateKey(fp, NULL, cb, u);
@@ -105,7 +105,7 @@ static DSA *pkey_get_dsa(EVP_PKEY *key, DSA **dsa)
     return dtmp;
 }
 
-DSA *PEM_read_bio_DSAPrivateKey(BIO *bp, DSA **dsa, pem_password_cb *cb,
+DSA * __cdecl PEM_read_bio_DSAPrivateKey(BIO *bp, DSA **dsa, pem_password_cb *cb,
                                 void *u)
 {
     EVP_PKEY *pktmp;
@@ -117,7 +117,7 @@ IMPLEMENT_PEM_write_cb_const(DSAPrivateKey, DSA, PEM_STRING_DSA,
                              DSAPrivateKey)
     IMPLEMENT_PEM_rw(DSA_PUBKEY, DSA, PEM_STRING_PUBLIC, DSA_PUBKEY)
 # ifndef OPENSSL_NO_STDIO
-DSA *PEM_read_DSAPrivateKey(FILE *fp, DSA **dsa, pem_password_cb *cb, void *u)
+DSA * __cdecl PEM_read_DSAPrivateKey(FILE *fp, DSA **dsa, pem_password_cb *cb, void *u)
 {
     EVP_PKEY *pktmp;
     pktmp = PEM_read_PrivateKey(fp, NULL, cb, u);
@@ -145,7 +145,7 @@ static EC_KEY *pkey_get_eckey(EVP_PKEY *key, EC_KEY **eckey)
     return dtmp;
 }
 
-EC_KEY *PEM_read_bio_ECPrivateKey(BIO *bp, EC_KEY **key, pem_password_cb *cb,
+EC_KEY * __cdecl PEM_read_bio_ECPrivateKey(BIO *bp, EC_KEY **key, pem_password_cb *cb,
                                   void *u)
 {
     EVP_PKEY *pktmp;
@@ -161,7 +161,7 @@ IMPLEMENT_PEM_write_cb(ECPrivateKey, EC_KEY, PEM_STRING_ECPRIVATEKEY,
                        ECPrivateKey)
 IMPLEMENT_PEM_rw(EC_PUBKEY, EC_KEY, PEM_STRING_PUBLIC, EC_PUBKEY)
 # ifndef OPENSSL_NO_STDIO
-EC_KEY *PEM_read_ECPrivateKey(FILE *fp, EC_KEY **eckey, pem_password_cb *cb,
+EC_KEY * __cdecl PEM_read_ECPrivateKey(FILE *fp, EC_KEY **eckey, pem_password_cb *cb,
                               void *u)
 {
     EVP_PKEY *pktmp;
diff --git a/crypto/pem/pem_err.c b/crypto/pem/pem_err.c
index f642030aa5..ee032ca46b 100644
--- a/crypto/pem/pem_err.c
+++ b/crypto/pem/pem_err.c
@@ -114,7 +114,7 @@ static const ERR_STRING_DATA PEM_str_reasons[] = {
 
 #endif
 
-int ERR_load_PEM_strings(void)
+int __cdecl ERR_load_PEM_strings(void)
 {
 #ifndef OPENSSL_NO_ERR
     if (ERR_func_error_string(PEM_str_functs[0].error) == NULL) {
diff --git a/crypto/pem/pem_info.c b/crypto/pem/pem_info.c
index f90cb44650..745c4235af 100644
--- a/crypto/pem/pem_info.c
+++ b/crypto/pem/pem_info.c
@@ -18,7 +18,7 @@
 #include <openssl/dsa.h>
 
 #ifndef OPENSSL_NO_STDIO
-STACK_OF(X509_INFO) *PEM_X509_INFO_read(FILE *fp, STACK_OF(X509_INFO) *sk,
+STACK_OF(X509_INFO) * __cdecl PEM_X509_INFO_read(FILE *fp, STACK_OF(X509_INFO) *sk,
                                         pem_password_cb *cb, void *u)
 {
     BIO *b;
@@ -35,7 +35,7 @@ STACK_OF(X509_INFO) *PEM_X509_INFO_read(FILE *fp, STACK_OF(X509_INFO) *sk,
 }
 #endif
 
-STACK_OF(X509_INFO) *PEM_X509_INFO_read_bio(BIO *bp, STACK_OF(X509_INFO) *sk,
+STACK_OF(X509_INFO) * __cdecl PEM_X509_INFO_read_bio(BIO *bp, STACK_OF(X509_INFO) *sk,
                                             pem_password_cb *cb, void *u)
 {
     X509_INFO *xi = NULL;
@@ -244,7 +244,7 @@ STACK_OF(X509_INFO) *PEM_X509_INFO_read_bio(BIO *bp, STACK_OF(X509_INFO) *sk,
 }
 
 /* A TJH addition */
-int PEM_X509_INFO_write_bio(BIO *bp, X509_INFO *xi, EVP_CIPHER *enc,
+int __cdecl PEM_X509_INFO_write_bio(BIO *bp, X509_INFO *xi, EVP_CIPHER *enc,
                             unsigned char *kstr, int klen,
                             pem_password_cb *cb, void *u)
 {
diff --git a/crypto/pem/pem_lib.c b/crypto/pem/pem_lib.c
index 4bb86463fa..8f6c55a7dd 100644
--- a/crypto/pem/pem_lib.c
+++ b/crypto/pem/pem_lib.c
@@ -28,7 +28,7 @@ static int load_iv(char **fromp, unsigned char *to, int num);
 static int check_pem(const char *nm, const char *name);
 int pem_check_suffix(const char *pem_str, const char *suffix);
 
-int PEM_def_callback(char *buf, int num, int rwflag, void *userdata)
+int __cdecl PEM_def_callback(char *buf, int num, int rwflag, void *userdata)
 {
     int i, min_len;
     const char *prompt;
@@ -63,7 +63,7 @@ int PEM_def_callback(char *buf, int num, int rwflag, void *userdata)
     return strlen(buf);
 }
 
-void PEM_proc_type(char *buf, int type)
+void __cdecl PEM_proc_type(char *buf, int type)
 {
     const char *str;
     char *p = buf + strlen(buf);
@@ -80,7 +80,7 @@ void PEM_proc_type(char *buf, int type)
     BIO_snprintf(p, PEM_BUFSIZE - (size_t)(p - buf), "Proc-Type: 4,%s\n", str);
 }
 
-void PEM_dek_info(char *buf, const char *type, int len, char *str)
+void __cdecl PEM_dek_info(char *buf, const char *type, int len, char *str)
 {
     long i;
     char *p = buf + strlen(buf);
@@ -103,7 +103,7 @@ void PEM_dek_info(char *buf, const char *type, int len, char *str)
 }
 
 #ifndef OPENSSL_NO_STDIO
-void *PEM_ASN1_read(d2i_of_void *d2i, const char *name, FILE *fp, void **x,
+void * __cdecl PEM_ASN1_read(d2i_of_void *d2i, const char *name, FILE *fp, void **x,
                     pem_password_cb *cb, void *u)
 {
     BIO *b;
@@ -272,14 +272,14 @@ static int pem_bytes_read_bio_flags(unsigned char **pdata, long *plen,
     return ret;
 }
 
-int PEM_bytes_read_bio(unsigned char **pdata, long *plen, char **pnm,
+int __cdecl PEM_bytes_read_bio(unsigned char **pdata, long *plen, char **pnm,
                        const char *name, BIO *bp, pem_password_cb *cb,
                        void *u) {
     return pem_bytes_read_bio_flags(pdata, plen, pnm, name, bp, cb, u,
                                     PEM_FLAG_EAY_COMPATIBLE);
 }
 
-int PEM_bytes_read_bio_secmem(unsigned char **pdata, long *plen, char **pnm,
+int __cdecl PEM_bytes_read_bio_secmem(unsigned char **pdata, long *plen, char **pnm,
                               const char *name, BIO *bp, pem_password_cb *cb,
                               void *u) {
     return pem_bytes_read_bio_flags(pdata, plen, pnm, name, bp, cb, u,
@@ -287,7 +287,7 @@ int PEM_bytes_read_bio_secmem(unsigned char **pdata, long *plen, char **pnm,
 }
 
 #ifndef OPENSSL_NO_STDIO
-int PEM_ASN1_write(i2d_of_void *i2d, const char *name, FILE *fp,
+int __cdecl PEM_ASN1_write(i2d_of_void *i2d, const char *name, FILE *fp,
                    void *x, const EVP_CIPHER *enc, unsigned char *kstr,
                    int klen, pem_password_cb *callback, void *u)
 {
@@ -305,7 +305,7 @@ int PEM_ASN1_write(i2d_of_void *i2d, const char *name, FILE *fp,
 }
 #endif
 
-int PEM_ASN1_write_bio(i2d_of_void *i2d, const char *name, BIO *bp,
+int __cdecl PEM_ASN1_write_bio(i2d_of_void *i2d, const char *name, BIO *bp,
                        void *x, const EVP_CIPHER *enc, unsigned char *kstr,
                        int klen, pem_password_cb *callback, void *u)
 {
@@ -405,7 +405,7 @@ int PEM_ASN1_write_bio(i2d_of_void *i2d, const char *name, BIO *bp,
     return ret;
 }
 
-int PEM_do_header(EVP_CIPHER_INFO *cipher, unsigned char *data, long *plen,
+int __cdecl PEM_do_header(EVP_CIPHER_INFO *cipher, unsigned char *data, long *plen,
                   pem_password_cb *callback, void *u)
 {
     int ok;
@@ -478,7 +478,7 @@ int PEM_do_header(EVP_CIPHER_INFO *cipher, unsigned char *data, long *plen,
  * presumably we also parse rfc822-style headers for S/MIME, so a common
  * abstraction might well be more generally useful.
  */
-int PEM_get_EVP_CIPHER_INFO(char *header, EVP_CIPHER_INFO *cipher)
+int __cdecl PEM_get_EVP_CIPHER_INFO(char *header, EVP_CIPHER_INFO *cipher)
 {
     static const char ProcType[] = "Proc-Type:";
     static const char ENCRYPTED[] = "ENCRYPTED";
@@ -582,7 +582,7 @@ static int load_iv(char **fromp, unsigned char *to, int num)
 }
 
 #ifndef OPENSSL_NO_STDIO
-int PEM_write(FILE *fp, const char *name, const char *header,
+int __cdecl PEM_write(FILE *fp, const char *name, const char *header,
               const unsigned char *data, long len)
 {
     BIO *b;
@@ -599,7 +599,7 @@ int PEM_write(FILE *fp, const char *name, const char *header,
 }
 #endif
 
-int PEM_write_bio(BIO *bp, const char *name, const char *header,
+int __cdecl PEM_write_bio(BIO *bp, const char *name, const char *header,
                   const unsigned char *data, long len)
 {
     int nlen, n, i, j, outl;
@@ -662,7 +662,7 @@ int PEM_write_bio(BIO *bp, const char *name, const char *header,
 }
 
 #ifndef OPENSSL_NO_STDIO
-int PEM_read(FILE *fp, char **name, char **header, unsigned char **data,
+int __cdecl PEM_read(FILE *fp, char **name, char **header, unsigned char **data,
              long *len)
 {
     BIO *b;
@@ -882,7 +882,7 @@ err:
  * By nature of the PEM format, all content must be printable ASCII (except
  * for line endings).  Other characters are malformed input and will be rejected.
  */
-int PEM_read_bio_ex(BIO *bp, char **name_out, char **header,
+int __cdecl PEM_read_bio_ex(BIO *bp, char **name_out, char **header,
                     unsigned char **data, long *len_out, unsigned int flags)
 {
     EVP_ENCODE_CTX *ctx = EVP_ENCODE_CTX_new();
@@ -959,7 +959,7 @@ end:
     return ret;
 }
 
-int PEM_read_bio(BIO *bp, char **name, char **header, unsigned char **data,
+int __cdecl PEM_read_bio(BIO *bp, char **name, char **header, unsigned char **data,
                  long *len)
 {
     return PEM_read_bio_ex(bp, name, header, data, len, PEM_FLAG_EAY_COMPATIBLE);
diff --git a/crypto/pem/pem_oth.c b/crypto/pem/pem_oth.c
index 566205331f..959c5ca5b3 100644
--- a/crypto/pem/pem_oth.c
+++ b/crypto/pem/pem_oth.c
@@ -17,7 +17,7 @@
 
 /* Handle 'other' PEMs: not private keys */
 
-void *PEM_ASN1_read_bio(d2i_of_void *d2i, const char *name, BIO *bp, void **x,
+void * __cdecl PEM_ASN1_read_bio(d2i_of_void *d2i, const char *name, BIO *bp, void **x,
                         pem_password_cb *cb, void *u)
 {
     const unsigned char *p = NULL;
diff --git a/crypto/pem/pem_pk8.c b/crypto/pem/pem_pk8.c
index ab6c4c6bde..00f09dd4e6 100644
--- a/crypto/pem/pem_pk8.c
+++ b/crypto/pem/pem_pk8.c
@@ -32,28 +32,28 @@ static int do_pk8pkey_fp(FILE *bp, EVP_PKEY *x, int isder,
  * uses PKCS#5 v1.5 PBE algorithms whereas the others use PKCS#5 v2.0.
  */
 
-int PEM_write_bio_PKCS8PrivateKey_nid(BIO *bp, EVP_PKEY *x, int nid,
+int __cdecl PEM_write_bio_PKCS8PrivateKey_nid(BIO *bp, EVP_PKEY *x, int nid,
                                       char *kstr, int klen,
                                       pem_password_cb *cb, void *u)
 {
     return do_pk8pkey(bp, x, 0, nid, NULL, kstr, klen, cb, u);
 }
 
-int PEM_write_bio_PKCS8PrivateKey(BIO *bp, EVP_PKEY *x, const EVP_CIPHER *enc,
+int __cdecl PEM_write_bio_PKCS8PrivateKey(BIO *bp, EVP_PKEY *x, const EVP_CIPHER *enc,
                                   char *kstr, int klen,
                                   pem_password_cb *cb, void *u)
 {
     return do_pk8pkey(bp, x, 0, -1, enc, kstr, klen, cb, u);
 }
 
-int i2d_PKCS8PrivateKey_bio(BIO *bp, EVP_PKEY *x, const EVP_CIPHER *enc,
+int __cdecl i2d_PKCS8PrivateKey_bio(BIO *bp, EVP_PKEY *x, const EVP_CIPHER *enc,
                             char *kstr, int klen,
                             pem_password_cb *cb, void *u)
 {
     return do_pk8pkey(bp, x, 1, -1, enc, kstr, klen, cb, u);
 }
 
-int i2d_PKCS8PrivateKey_nid_bio(BIO *bp, EVP_PKEY *x, int nid,
+int __cdecl i2d_PKCS8PrivateKey_nid_bio(BIO *bp, EVP_PKEY *x, int nid,
                                 char *kstr, int klen,
                                 pem_password_cb *cb, void *u)
 {
@@ -109,7 +109,7 @@ static int do_pk8pkey(BIO *bp, EVP_PKEY *x, int isder, int nid,
     }
 }
 
-EVP_PKEY *d2i_PKCS8PrivateKey_bio(BIO *bp, EVP_PKEY **x, pem_password_cb *cb,
+EVP_PKEY * __cdecl d2i_PKCS8PrivateKey_bio(BIO *bp, EVP_PKEY **x, pem_password_cb *cb,
                                   void *u)
 {
     PKCS8_PRIV_KEY_INFO *p8inf = NULL;
@@ -147,27 +147,27 @@ EVP_PKEY *d2i_PKCS8PrivateKey_bio(BIO *bp, EVP_PKEY **x, pem_password_cb *cb,
 
 #ifndef OPENSSL_NO_STDIO
 
-int i2d_PKCS8PrivateKey_fp(FILE *fp, EVP_PKEY *x, const EVP_CIPHER *enc,
+int __cdecl i2d_PKCS8PrivateKey_fp(FILE *fp, EVP_PKEY *x, const EVP_CIPHER *enc,
                            char *kstr, int klen, pem_password_cb *cb, void *u)
 {
     return do_pk8pkey_fp(fp, x, 1, -1, enc, kstr, klen, cb, u);
 }
 
-int i2d_PKCS8PrivateKey_nid_fp(FILE *fp, EVP_PKEY *x, int nid,
+int __cdecl i2d_PKCS8PrivateKey_nid_fp(FILE *fp, EVP_PKEY *x, int nid,
                                char *kstr, int klen,
                                pem_password_cb *cb, void *u)
 {
     return do_pk8pkey_fp(fp, x, 1, nid, NULL, kstr, klen, cb, u);
 }
 
-int PEM_write_PKCS8PrivateKey_nid(FILE *fp, EVP_PKEY *x, int nid,
+int __cdecl PEM_write_PKCS8PrivateKey_nid(FILE *fp, EVP_PKEY *x, int nid,
                                   char *kstr, int klen,
                                   pem_password_cb *cb, void *u)
 {
     return do_pk8pkey_fp(fp, x, 0, nid, NULL, kstr, klen, cb, u);
 }
 
-int PEM_write_PKCS8PrivateKey(FILE *fp, EVP_PKEY *x, const EVP_CIPHER *enc,
+int __cdecl PEM_write_PKCS8PrivateKey(FILE *fp, EVP_PKEY *x, const EVP_CIPHER *enc,
                               char *kstr, int klen, pem_password_cb *cb,
                               void *u)
 {
@@ -190,7 +190,7 @@ static int do_pk8pkey_fp(FILE *fp, EVP_PKEY *x, int isder, int nid,
     return ret;
 }
 
-EVP_PKEY *d2i_PKCS8PrivateKey_fp(FILE *fp, EVP_PKEY **x, pem_password_cb *cb,
+EVP_PKEY * __cdecl d2i_PKCS8PrivateKey_fp(FILE *fp, EVP_PKEY **x, pem_password_cb *cb,
                                  void *u)
 {
     BIO *bp;
diff --git a/crypto/pem/pem_pkey.c b/crypto/pem/pem_pkey.c
index aa032d2b1c..dd8e8b8f78 100644
--- a/crypto/pem/pem_pkey.c
+++ b/crypto/pem/pem_pkey.c
@@ -22,7 +22,7 @@
 
 int pem_check_suffix(const char *pem_str, const char *suffix);
 
-EVP_PKEY *PEM_read_bio_PrivateKey(BIO *bp, EVP_PKEY **x, pem_password_cb *cb,
+EVP_PKEY * __cdecl PEM_read_bio_PrivateKey(BIO *bp, EVP_PKEY **x, pem_password_cb *cb,
                                   void *u)
 {
     char *nm = NULL;
@@ -92,7 +92,7 @@ EVP_PKEY *PEM_read_bio_PrivateKey(BIO *bp, EVP_PKEY **x, pem_password_cb *cb,
     return ret;
 }
 
-int PEM_write_bio_PrivateKey(BIO *bp, EVP_PKEY *x, const EVP_CIPHER *enc,
+int __cdecl PEM_write_bio_PrivateKey(BIO *bp, EVP_PKEY *x, const EVP_CIPHER *enc,
                              unsigned char *kstr, int klen,
                              pem_password_cb *cb, void *u)
 {
@@ -102,7 +102,7 @@ int PEM_write_bio_PrivateKey(BIO *bp, EVP_PKEY *x, const EVP_CIPHER *enc,
     return PEM_write_bio_PrivateKey_traditional(bp, x, enc, kstr, klen, cb, u);
 }
 
-int PEM_write_bio_PrivateKey_traditional(BIO *bp, EVP_PKEY *x,
+int __cdecl PEM_write_bio_PrivateKey_traditional(BIO *bp, EVP_PKEY *x,
                                          const EVP_CIPHER *enc,
                                          unsigned char *kstr, int klen,
                                          pem_password_cb *cb, void *u)
@@ -113,7 +113,7 @@ int PEM_write_bio_PrivateKey_traditional(BIO *bp, EVP_PKEY *x,
                               pem_str, bp, x, enc, kstr, klen, cb, u);
 }
 
-EVP_PKEY *PEM_read_bio_Parameters(BIO *bp, EVP_PKEY **x)
+EVP_PKEY * __cdecl PEM_read_bio_Parameters(BIO *bp, EVP_PKEY **x)
 {
     char *nm = NULL;
     const unsigned char *p = NULL;
@@ -151,7 +151,7 @@ EVP_PKEY *PEM_read_bio_Parameters(BIO *bp, EVP_PKEY **x)
     return ret;
 }
 
-int PEM_write_bio_Parameters(BIO *bp, EVP_PKEY *x)
+int __cdecl PEM_write_bio_Parameters(BIO *bp, EVP_PKEY *x)
 {
     char pem_str[80];
     if (!x->ameth || !x->ameth->param_encode)
@@ -163,7 +163,7 @@ int PEM_write_bio_Parameters(BIO *bp, EVP_PKEY *x)
 }
 
 #ifndef OPENSSL_NO_STDIO
-EVP_PKEY *PEM_read_PrivateKey(FILE *fp, EVP_PKEY **x, pem_password_cb *cb,
+EVP_PKEY * __cdecl PEM_read_PrivateKey(FILE *fp, EVP_PKEY **x, pem_password_cb *cb,
                               void *u)
 {
     BIO *b;
@@ -179,7 +179,7 @@ EVP_PKEY *PEM_read_PrivateKey(FILE *fp, EVP_PKEY **x, pem_password_cb *cb,
     return ret;
 }
 
-int PEM_write_PrivateKey(FILE *fp, EVP_PKEY *x, const EVP_CIPHER *enc,
+int __cdecl PEM_write_PrivateKey(FILE *fp, EVP_PKEY *x, const EVP_CIPHER *enc,
                          unsigned char *kstr, int klen,
                          pem_password_cb *cb, void *u)
 {
@@ -201,7 +201,7 @@ int PEM_write_PrivateKey(FILE *fp, EVP_PKEY *x, const EVP_CIPHER *enc,
 
 /* Transparently read in PKCS#3 or X9.42 DH parameters */
 
-DH *PEM_read_bio_DHparams(BIO *bp, DH **x, pem_password_cb *cb, void *u)
+DH * __cdecl PEM_read_bio_DHparams(BIO *bp, DH **x, pem_password_cb *cb, void *u)
 {
     char *nm = NULL;
     const unsigned char *p = NULL;
@@ -226,7 +226,7 @@ DH *PEM_read_bio_DHparams(BIO *bp, DH **x, pem_password_cb *cb, void *u)
 }
 
 # ifndef OPENSSL_NO_STDIO
-DH *PEM_read_DHparams(FILE *fp, DH **x, pem_password_cb *cb, void *u)
+DH * __cdecl PEM_read_DHparams(FILE *fp, DH **x, pem_password_cb *cb, void *u)
 {
     BIO *b;
     DH *ret;
diff --git a/crypto/pem/pem_sign.c b/crypto/pem/pem_sign.c
index 7e7b32ebf7..eafba5d865 100644
--- a/crypto/pem/pem_sign.c
+++ b/crypto/pem/pem_sign.c
@@ -14,17 +14,17 @@
 #include <openssl/x509.h>
 #include <openssl/pem.h>
 
-int PEM_SignInit(EVP_MD_CTX *ctx, EVP_MD *type)
+int __cdecl PEM_SignInit(EVP_MD_CTX *ctx, EVP_MD *type)
 {
     return EVP_DigestInit_ex(ctx, type, NULL);
 }
 
-int PEM_SignUpdate(EVP_MD_CTX *ctx, unsigned char *data, unsigned int count)
+int __cdecl PEM_SignUpdate(EVP_MD_CTX *ctx, unsigned char *data, unsigned int count)
 {
     return EVP_DigestUpdate(ctx, data, count);
 }
 
-int PEM_SignFinal(EVP_MD_CTX *ctx, unsigned char *sigret,
+int __cdecl PEM_SignFinal(EVP_MD_CTX *ctx, unsigned char *sigret,
                   unsigned int *siglen, EVP_PKEY *pkey)
 {
     unsigned char *m;
diff --git a/crypto/pem/pvkfmt.c b/crypto/pem/pvkfmt.c
index 2bbee4a306..c793cff5a5 100644
--- a/crypto/pem/pvkfmt.c
+++ b/crypto/pem/pvkfmt.c
@@ -382,22 +382,22 @@ static EVP_PKEY *b2i_rsa(const unsigned char **in,
     return NULL;
 }
 
-EVP_PKEY *b2i_PrivateKey(const unsigned char **in, long length)
+EVP_PKEY * __cdecl b2i_PrivateKey(const unsigned char **in, long length)
 {
     return do_b2i(in, length, 0);
 }
 
-EVP_PKEY *b2i_PublicKey(const unsigned char **in, long length)
+EVP_PKEY * __cdecl b2i_PublicKey(const unsigned char **in, long length)
 {
     return do_b2i(in, length, 1);
 }
 
-EVP_PKEY *b2i_PrivateKey_bio(BIO *in)
+EVP_PKEY * __cdecl b2i_PrivateKey_bio(BIO *in)
 {
     return do_b2i_bio(in, 0);
 }
 
-EVP_PKEY *b2i_PublicKey_bio(BIO *in)
+EVP_PKEY * __cdecl b2i_PublicKey_bio(BIO *in)
 {
     return do_b2i_bio(in, 1);
 }
@@ -599,12 +599,12 @@ static void write_dsa(unsigned char **out, DSA *dsa, int ispub)
     return;
 }
 
-int i2b_PrivateKey_bio(BIO *out, EVP_PKEY *pk)
+int __cdecl i2b_PrivateKey_bio(BIO *out, EVP_PKEY *pk)
 {
     return do_i2b_bio(out, pk, 0);
 }
 
-int i2b_PublicKey_bio(BIO *out, EVP_PKEY *pk)
+int __cdecl i2b_PublicKey_bio(BIO *out, EVP_PKEY *pk)
 {
     return do_i2b_bio(out, pk, 1);
 }
@@ -746,7 +746,7 @@ static EVP_PKEY *do_PVK_body(const unsigned char **in,
     return ret;
 }
 
-EVP_PKEY *b2i_PVK_bio(BIO *in, pem_password_cb *cb, void *u)
+EVP_PKEY * __cdecl b2i_PVK_bio(BIO *in, pem_password_cb *cb, void *u)
 {
     unsigned char pvk_hdr[24], *buf = NULL;
     const unsigned char *p;
@@ -864,7 +864,7 @@ static int i2b_PVK(unsigned char **out, EVP_PKEY *pk, int enclevel,
     return -1;
 }
 
-int i2b_PVK_bio(BIO *out, EVP_PKEY *pk, int enclevel,
+int __cdecl i2b_PVK_bio(BIO *out, EVP_PKEY *pk, int enclevel,
                 pem_password_cb *cb, void *u)
 {
     unsigned char *tmp = NULL;
diff --git a/crypto/pkcs12/p12_add.c b/crypto/pkcs12/p12_add.c
index 193ed8097d..f18c196e3e 100644
--- a/crypto/pkcs12/p12_add.c
+++ b/crypto/pkcs12/p12_add.c
@@ -14,7 +14,7 @@
 
 /* Pack an object into an OCTET STRING and turn into a safebag */
 
-PKCS12_SAFEBAG *PKCS12_item_pack_safebag(void *obj, const ASN1_ITEM *it,
+PKCS12_SAFEBAG * __cdecl PKCS12_item_pack_safebag(void *obj, const ASN1_ITEM *it,
                                          int nid1, int nid2)
 {
     PKCS12_BAGS *bag;
@@ -43,7 +43,7 @@ PKCS12_SAFEBAG *PKCS12_item_pack_safebag(void *obj, const ASN1_ITEM *it,
 }
 
 /* Turn a stack of SAFEBAGS into a PKCS#7 data Contentinfo */
-PKCS7 *PKCS12_pack_p7data(STACK_OF(PKCS12_SAFEBAG) *sk)
+PKCS7 * __cdecl PKCS12_pack_p7data(STACK_OF(PKCS12_SAFEBAG) *sk)
 {
     PKCS7 *p7;
 
@@ -69,7 +69,7 @@ PKCS7 *PKCS12_pack_p7data(STACK_OF(PKCS12_SAFEBAG) *sk)
 }
 
 /* Unpack SAFEBAGS from PKCS#7 data ContentInfo */
-STACK_OF(PKCS12_SAFEBAG) *PKCS12_unpack_p7data(PKCS7 *p7)
+STACK_OF(PKCS12_SAFEBAG) * __cdecl PKCS12_unpack_p7data(PKCS7 *p7)
 {
     if (!PKCS7_type_is_data(p7)) {
         PKCS12err(PKCS12_F_PKCS12_UNPACK_P7DATA,
@@ -81,7 +81,7 @@ STACK_OF(PKCS12_SAFEBAG) *PKCS12_unpack_p7data(PKCS7 *p7)
 
 /* Turn a stack of SAFEBAGS into a PKCS#7 encrypted data ContentInfo */
 
-PKCS7 *PKCS12_pack_p7encdata(int pbe_nid, const char *pass, int passlen,
+PKCS7 * __cdecl PKCS12_pack_p7encdata(int pbe_nid, const char *pass, int passlen,
                              unsigned char *salt, int saltlen, int iter,
                              STACK_OF(PKCS12_SAFEBAG) *bags)
 {
@@ -127,7 +127,7 @@ PKCS7 *PKCS12_pack_p7encdata(int pbe_nid, const char *pass, int passlen,
     return NULL;
 }
 
-STACK_OF(PKCS12_SAFEBAG) *PKCS12_unpack_p7encdata(PKCS7 *p7, const char *pass,
+STACK_OF(PKCS12_SAFEBAG) * __cdecl PKCS12_unpack_p7encdata(PKCS7 *p7, const char *pass,
                                                   int passlen)
 {
     if (!PKCS7_type_is_encrypted(p7))
@@ -138,13 +138,13 @@ STACK_OF(PKCS12_SAFEBAG) *PKCS12_unpack_p7encdata(PKCS7 *p7, const char *pass,
                                    p7->d.encrypted->enc_data->enc_data, 1);
 }
 
-PKCS8_PRIV_KEY_INFO *PKCS12_decrypt_skey(const PKCS12_SAFEBAG *bag,
+PKCS8_PRIV_KEY_INFO * __cdecl PKCS12_decrypt_skey(const PKCS12_SAFEBAG *bag,
                                          const char *pass, int passlen)
 {
     return PKCS8_decrypt(bag->value.shkeybag, pass, passlen);
 }
 
-int PKCS12_pack_authsafes(PKCS12 *p12, STACK_OF(PKCS7) *safes)
+int __cdecl PKCS12_pack_authsafes(PKCS12 *p12, STACK_OF(PKCS7) *safes)
 {
     if (ASN1_item_pack(safes, ASN1_ITEM_rptr(PKCS12_AUTHSAFES),
                        &p12->authsafes->d.data))
@@ -152,7 +152,7 @@ int PKCS12_pack_authsafes(PKCS12 *p12, STACK_OF(PKCS7) *safes)
     return 0;
 }
 
-STACK_OF(PKCS7) *PKCS12_unpack_authsafes(const PKCS12 *p12)
+STACK_OF(PKCS7) * __cdecl PKCS12_unpack_authsafes(const PKCS12 *p12)
 {
     if (!PKCS7_type_is_data(p12->authsafes)) {
         PKCS12err(PKCS12_F_PKCS12_UNPACK_AUTHSAFES,
diff --git a/crypto/pkcs12/p12_attr.c b/crypto/pkcs12/p12_attr.c
index c324f50514..81fe2259fd 100644
--- a/crypto/pkcs12/p12_attr.c
+++ b/crypto/pkcs12/p12_attr.c
@@ -14,7 +14,7 @@
 
 /* Add a local keyid to a safebag */
 
-int PKCS12_add_localkeyid(PKCS12_SAFEBAG *bag, unsigned char *name,
+int __cdecl PKCS12_add_localkeyid(PKCS12_SAFEBAG *bag, unsigned char *name,
                           int namelen)
 {
     if (X509at_add1_attr_by_NID(&bag->attrib, NID_localKeyID,
@@ -26,7 +26,7 @@ int PKCS12_add_localkeyid(PKCS12_SAFEBAG *bag, unsigned char *name,
 
 /* Add key usage to PKCS#8 structure */
 
-int PKCS8_add_keyusage(PKCS8_PRIV_KEY_INFO *p8, int usage)
+int __cdecl PKCS8_add_keyusage(PKCS8_PRIV_KEY_INFO *p8, int usage)
 {
     unsigned char us_val = (unsigned char)usage;
     return PKCS8_pkey_add1_attr_by_NID(p8, NID_key_usage,
@@ -35,7 +35,7 @@ int PKCS8_add_keyusage(PKCS8_PRIV_KEY_INFO *p8, int usage)
 
 /* Add a friendlyname to a safebag */
 
-int PKCS12_add_friendlyname_asc(PKCS12_SAFEBAG *bag, const char *name,
+int __cdecl PKCS12_add_friendlyname_asc(PKCS12_SAFEBAG *bag, const char *name,
                                 int namelen)
 {
     if (X509at_add1_attr_by_NID(&bag->attrib, NID_friendlyName,
@@ -45,7 +45,7 @@ int PKCS12_add_friendlyname_asc(PKCS12_SAFEBAG *bag, const char *name,
         return 0;
 }
 
-int PKCS12_add_friendlyname_utf8(PKCS12_SAFEBAG *bag, const char *name,
+int __cdecl PKCS12_add_friendlyname_utf8(PKCS12_SAFEBAG *bag, const char *name,
                                 int namelen)
 {
     if (X509at_add1_attr_by_NID(&bag->attrib, NID_friendlyName,
@@ -55,7 +55,7 @@ int PKCS12_add_friendlyname_utf8(PKCS12_SAFEBAG *bag, const char *name,
         return 0;
 }
 
-int PKCS12_add_friendlyname_uni(PKCS12_SAFEBAG *bag,
+int __cdecl PKCS12_add_friendlyname_uni(PKCS12_SAFEBAG *bag,
                                 const unsigned char *name, int namelen)
 {
     if (X509at_add1_attr_by_NID(&bag->attrib, NID_friendlyName,
@@ -65,7 +65,7 @@ int PKCS12_add_friendlyname_uni(PKCS12_SAFEBAG *bag,
         return 0;
 }
 
-int PKCS12_add_CSPName_asc(PKCS12_SAFEBAG *bag, const char *name, int namelen)
+int __cdecl PKCS12_add_CSPName_asc(PKCS12_SAFEBAG *bag, const char *name, int namelen)
 {
     if (X509at_add1_attr_by_NID(&bag->attrib, NID_ms_csp_name,
                                 MBSTRING_ASC, (unsigned char *)name, namelen))
@@ -74,7 +74,7 @@ int PKCS12_add_CSPName_asc(PKCS12_SAFEBAG *bag, const char *name, int namelen)
         return 0;
 }
 
-ASN1_TYPE *PKCS12_get_attr_gen(const STACK_OF(X509_ATTRIBUTE) *attrs,
+ASN1_TYPE * __cdecl PKCS12_get_attr_gen(const STACK_OF(X509_ATTRIBUTE) *attrs,
                                int attr_nid)
 {
     X509_ATTRIBUTE *attrib;
@@ -84,7 +84,7 @@ ASN1_TYPE *PKCS12_get_attr_gen(const STACK_OF(X509_ATTRIBUTE) *attrs,
     return X509_ATTRIBUTE_get0_type(attrib, 0);
 }
 
-char *PKCS12_get_friendlyname(PKCS12_SAFEBAG *bag)
+char * __cdecl PKCS12_get_friendlyname(PKCS12_SAFEBAG *bag)
 {
     const ASN1_TYPE *atype;
 
@@ -96,7 +96,7 @@ char *PKCS12_get_friendlyname(PKCS12_SAFEBAG *bag)
                             atype->value.bmpstring->length);
 }
 
-const STACK_OF(X509_ATTRIBUTE) *
+const STACK_OF(X509_ATTRIBUTE) * __cdecl 
 PKCS12_SAFEBAG_get0_attrs(const PKCS12_SAFEBAG *bag)
 {
     return bag->attrib;
diff --git a/crypto/pkcs12/p12_crpt.c b/crypto/pkcs12/p12_crpt.c
index feef9d1fc4..ad598a35ac 100644
--- a/crypto/pkcs12/p12_crpt.c
+++ b/crypto/pkcs12/p12_crpt.c
@@ -13,11 +13,11 @@
 
 /* PKCS#12 PBE algorithms now in static table */
 
-void PKCS12_PBE_add(void)
+void __cdecl PKCS12_PBE_add(void)
 {
 }
 
-int PKCS12_PBE_keyivgen(EVP_CIPHER_CTX *ctx, const char *pass, int passlen,
+int __cdecl PKCS12_PBE_keyivgen(EVP_CIPHER_CTX *ctx, const char *pass, int passlen,
                         ASN1_TYPE *param, const EVP_CIPHER *cipher,
                         const EVP_MD *md, int en_de)
 {
@@ -25,7 +25,7 @@ int PKCS12_PBE_keyivgen(EVP_CIPHER_CTX *ctx, const char *pass, int passlen,
     int saltlen, iter, ret;
     unsigned char *salt;
     unsigned char key[EVP_MAX_KEY_LENGTH], iv[EVP_MAX_IV_LENGTH];
-    int (*pkcs12_key_gen)(const char *pass, int passlen,
+    int (__cdecl *pkcs12_key_gen)(const char *pass, int passlen,
                           unsigned char *salt, int slen,
                           int id, int iter, int n,
                           unsigned char *out,
diff --git a/crypto/pkcs12/p12_crt.c b/crypto/pkcs12/p12_crt.c
index 10cf8dd589..9d980cdf33 100644
--- a/crypto/pkcs12/p12_crt.c
+++ b/crypto/pkcs12/p12_crt.c
@@ -28,7 +28,7 @@ static int copy_bag_attr(PKCS12_SAFEBAG *bag, EVP_PKEY *pkey, int nid)
     return 1;
 }
 
-PKCS12 *PKCS12_create(const char *pass, const char *name, EVP_PKEY *pkey, X509 *cert,
+PKCS12 * __cdecl PKCS12_create(const char *pass, const char *name, EVP_PKEY *pkey, X509 *cert,
                       STACK_OF(X509) *ca, int nid_key, int nid_cert, int iter,
                       int mac_iter, int keytype)
 {
@@ -131,7 +131,7 @@ PKCS12 *PKCS12_create(const char *pass, const char *name, EVP_PKEY *pkey, X509 *
 
 }
 
-PKCS12_SAFEBAG *PKCS12_add_cert(STACK_OF(PKCS12_SAFEBAG) **pbags, X509 *cert)
+PKCS12_SAFEBAG * __cdecl PKCS12_add_cert(STACK_OF(PKCS12_SAFEBAG) **pbags, X509 *cert)
 {
     PKCS12_SAFEBAG *bag = NULL;
     char *name;
@@ -168,7 +168,7 @@ PKCS12_SAFEBAG *PKCS12_add_cert(STACK_OF(PKCS12_SAFEBAG) **pbags, X509 *cert)
 
 }
 
-PKCS12_SAFEBAG *PKCS12_add_key(STACK_OF(PKCS12_SAFEBAG) **pbags,
+PKCS12_SAFEBAG * __cdecl PKCS12_add_key(STACK_OF(PKCS12_SAFEBAG) **pbags,
                                EVP_PKEY *key, int key_usage, int iter,
                                int nid_key, const char *pass)
 {
@@ -202,7 +202,7 @@ PKCS12_SAFEBAG *PKCS12_add_key(STACK_OF(PKCS12_SAFEBAG) **pbags,
 
 }
 
-int PKCS12_add_safe(STACK_OF(PKCS7) **psafes, STACK_OF(PKCS12_SAFEBAG) *bags,
+int __cdecl PKCS12_add_safe(STACK_OF(PKCS7) **psafes, STACK_OF(PKCS12_SAFEBAG) *bags,
                     int nid_safe, int iter, const char *pass)
 {
     PKCS7 *p7 = NULL;
@@ -271,7 +271,7 @@ static int pkcs12_add_bag(STACK_OF(PKCS12_SAFEBAG) **pbags,
 
 }
 
-PKCS12 *PKCS12_add_safes(STACK_OF(PKCS7) *safes, int nid_p7)
+PKCS12 * __cdecl PKCS12_add_safes(STACK_OF(PKCS7) *safes, int nid_p7)
 {
     PKCS12 *p12;
     if (nid_p7 <= 0)
diff --git a/crypto/pkcs12/p12_decr.c b/crypto/pkcs12/p12_decr.c
index 3c860584e8..e863a1398b 100644
--- a/crypto/pkcs12/p12_decr.c
+++ b/crypto/pkcs12/p12_decr.c
@@ -20,7 +20,7 @@
  * Encrypt/Decrypt a buffer based on password and algor, result in a
  * OPENSSL_malloc'ed buffer
  */
-unsigned char *PKCS12_pbe_crypt(const X509_ALGOR *algor,
+unsigned char * __cdecl PKCS12_pbe_crypt(const X509_ALGOR *algor,
                                 const char *pass, int passlen,
                                 const unsigned char *in, int inlen,
                                 unsigned char **data, int *datalen, int en_de)
@@ -79,7 +79,7 @@ unsigned char *PKCS12_pbe_crypt(const X509_ALGOR *algor,
  * after use.
  */
 
-void *PKCS12_item_decrypt_d2i(const X509_ALGOR *algor, const ASN1_ITEM *it,
+void * __cdecl PKCS12_item_decrypt_d2i(const X509_ALGOR *algor, const ASN1_ITEM *it,
                               const char *pass, int passlen,
                               const ASN1_OCTET_STRING *oct, int zbuf)
 {
@@ -121,7 +121,7 @@ void *PKCS12_item_decrypt_d2i(const X509_ALGOR *algor, const ASN1_ITEM *it,
  * encoding.
  */
 
-ASN1_OCTET_STRING *PKCS12_item_i2d_encrypt(X509_ALGOR *algor,
+ASN1_OCTET_STRING * __cdecl PKCS12_item_i2d_encrypt(X509_ALGOR *algor,
                                            const ASN1_ITEM *it,
                                            const char *pass, int passlen,
                                            void *obj, int zbuf)
diff --git a/crypto/pkcs12/p12_init.c b/crypto/pkcs12/p12_init.c
index 88db0f2dc4..1d81d0f25d 100644
--- a/crypto/pkcs12/p12_init.c
+++ b/crypto/pkcs12/p12_init.c
@@ -14,7 +14,7 @@
 
 /* Initialise a PKCS12 structure to take data */
 
-PKCS12 *PKCS12_init(int mode)
+PKCS12 * __cdecl PKCS12_init(int mode)
 {
     PKCS12 *pkcs12;
 
diff --git a/crypto/pkcs12/p12_key.c b/crypto/pkcs12/p12_key.c
index ab31a61295..d14957992e 100644
--- a/crypto/pkcs12/p12_key.c
+++ b/crypto/pkcs12/p12_key.c
@@ -27,7 +27,7 @@ void h__dump(unsigned char *p, int len);
 # define min(a,b) ((a) < (b) ? (a) : (b))
 #endif
 
-int PKCS12_key_gen_asc(const char *pass, int passlen, unsigned char *salt,
+int __cdecl PKCS12_key_gen_asc(const char *pass, int passlen, unsigned char *salt,
                        int saltlen, int id, int iter, int n,
                        unsigned char *out, const EVP_MD *md_type)
 {
@@ -50,7 +50,7 @@ int PKCS12_key_gen_asc(const char *pass, int passlen, unsigned char *salt,
     return ret;
 }
 
-int PKCS12_key_gen_utf8(const char *pass, int passlen, unsigned char *salt,
+int __cdecl PKCS12_key_gen_utf8(const char *pass, int passlen, unsigned char *salt,
                         int saltlen, int id, int iter, int n,
                         unsigned char *out, const EVP_MD *md_type)
 {
@@ -73,7 +73,7 @@ int PKCS12_key_gen_utf8(const char *pass, int passlen, unsigned char *salt,
     return ret;
 }
 
-int PKCS12_key_gen_uni(unsigned char *pass, int passlen, unsigned char *salt,
+int __cdecl PKCS12_key_gen_uni(unsigned char *pass, int passlen, unsigned char *salt,
                        int saltlen, int id, int iter, int n,
                        unsigned char *out, const EVP_MD *md_type)
 {
diff --git a/crypto/pkcs12/p12_kiss.c b/crypto/pkcs12/p12_kiss.c
index 7ab98385a7..5f7a53d4cd 100644
--- a/crypto/pkcs12/p12_kiss.c
+++ b/crypto/pkcs12/p12_kiss.c
@@ -29,7 +29,7 @@ static int parse_bag(PKCS12_SAFEBAG *bag, const char *pass, int passlen,
  * uninitialised.
  */
 
-int PKCS12_parse(PKCS12 *p12, const char *pass, EVP_PKEY **pkey, X509 **cert,
+int __cdecl PKCS12_parse(PKCS12 *p12, const char *pass, EVP_PKEY **pkey, X509 **cert,
                  STACK_OF(X509) **ca)
 {
     STACK_OF(X509) *ocerts = NULL;
diff --git a/crypto/pkcs12/p12_mutl.c b/crypto/pkcs12/p12_mutl.c
index 0cbbed364a..d613d16cec 100644
--- a/crypto/pkcs12/p12_mutl.c
+++ b/crypto/pkcs12/p12_mutl.c
@@ -15,12 +15,12 @@
 #include <openssl/pkcs12.h>
 #include "p12_lcl.h"
 
-int PKCS12_mac_present(const PKCS12 *p12)
+int __cdecl PKCS12_mac_present(const PKCS12 *p12)
 {
     return p12->mac ? 1 : 0;
 }
 
-void PKCS12_get0_mac(const ASN1_OCTET_STRING **pmac,
+void __cdecl PKCS12_get0_mac(const ASN1_OCTET_STRING **pmac,
                      const X509_ALGOR **pmacalg,
                      const ASN1_OCTET_STRING **psalt,
                      const ASN1_INTEGER **piter,
@@ -67,9 +67,9 @@ static int pkcs12_gen_gost_mac_key(const char *pass, int passlen,
 }
 
 /* Generate a MAC */
-static int pkcs12_gen_mac(PKCS12 *p12, const char *pass, int passlen,
+static int __cdecl pkcs12_gen_mac(PKCS12 *p12, const char *pass, int passlen,
                           unsigned char *mac, unsigned int *maclen,
-                          int (*pkcs12_key_gen)(const char *pass, int passlen,
+                          int (__cdecl *pkcs12_key_gen)(const char *pass, int passlen,
                                                 unsigned char *salt, int slen,
                                                 int id, int iter, int n,
                                                 unsigned char *out,
@@ -140,14 +140,14 @@ err:
     return ret;
 }
 
-int PKCS12_gen_mac(PKCS12 *p12, const char *pass, int passlen,
+int __cdecl PKCS12_gen_mac(PKCS12 *p12, const char *pass, int passlen,
                    unsigned char *mac, unsigned int *maclen)
 {
     return pkcs12_gen_mac(p12, pass, passlen, mac, maclen, NULL);
 }
 
 /* Verify the mac */
-int PKCS12_verify_mac(PKCS12 *p12, const char *pass, int passlen)
+int __cdecl PKCS12_verify_mac(PKCS12 *p12, const char *pass, int passlen)
 {
     unsigned char mac[EVP_MAX_MD_SIZE];
     unsigned int maclen;
@@ -172,7 +172,7 @@ int PKCS12_verify_mac(PKCS12 *p12, const char *pass, int passlen)
 
 /* Set a mac */
 
-int PKCS12_set_mac(PKCS12 *p12, const char *pass, int passlen,
+int __cdecl PKCS12_set_mac(PKCS12 *p12, const char *pass, int passlen,
                    unsigned char *salt, int saltlen, int iter,
                    const EVP_MD *md_type)
 {
@@ -203,7 +203,7 @@ int PKCS12_set_mac(PKCS12 *p12, const char *pass, int passlen,
 }
 
 /* Set up a mac structure */
-int PKCS12_setup_mac(PKCS12 *p12, int iter, unsigned char *salt, int saltlen,
+int __cdecl PKCS12_setup_mac(PKCS12 *p12, int iter, unsigned char *salt, int saltlen,
                      const EVP_MD *md_type)
 {
     X509_ALGOR *macalg;
diff --git a/crypto/pkcs12/p12_npas.c b/crypto/pkcs12/p12_npas.c
index 0ce75ed330..ba2c352e9a 100644
--- a/crypto/pkcs12/p12_npas.c
+++ b/crypto/pkcs12/p12_npas.c
@@ -29,7 +29,7 @@ static int alg_get(const X509_ALGOR *alg, int *pnid, int *piter,
  * Change the password on a PKCS#12 structure.
  */
 
-int PKCS12_newpass(PKCS12 *p12, const char *oldpass, const char *newpass)
+int __cdecl PKCS12_newpass(PKCS12 *p12, const char *oldpass, const char *newpass)
 {
     /* Check for NULL PKCS12 structure */
 
diff --git a/crypto/pkcs12/p12_p8d.c b/crypto/pkcs12/p12_p8d.c
index d926a77df8..f12e863deb 100644
--- a/crypto/pkcs12/p12_p8d.c
+++ b/crypto/pkcs12/p12_p8d.c
@@ -11,7 +11,7 @@
 #include "internal/cryptlib.h"
 #include <openssl/pkcs12.h>
 
-PKCS8_PRIV_KEY_INFO *PKCS8_decrypt(const X509_SIG *p8, const char *pass,
+PKCS8_PRIV_KEY_INFO * __cdecl PKCS8_decrypt(const X509_SIG *p8, const char *pass,
                                    int passlen)
 {
     const X509_ALGOR *dalg;
diff --git a/crypto/pkcs12/p12_p8e.c b/crypto/pkcs12/p12_p8e.c
index 86a07e1335..d47756c2c0 100644
--- a/crypto/pkcs12/p12_p8e.c
+++ b/crypto/pkcs12/p12_p8e.c
@@ -12,7 +12,7 @@
 #include <openssl/pkcs12.h>
 #include "internal/x509_int.h"
 
-X509_SIG *PKCS8_encrypt(int pbe_nid, const EVP_CIPHER *cipher,
+X509_SIG * __cdecl PKCS8_encrypt(int pbe_nid, const EVP_CIPHER *cipher,
                         const char *pass, int passlen,
                         unsigned char *salt, int saltlen, int iter,
                         PKCS8_PRIV_KEY_INFO *p8inf)
@@ -41,7 +41,7 @@ X509_SIG *PKCS8_encrypt(int pbe_nid, const EVP_CIPHER *cipher,
     return p8;
 }
 
-X509_SIG *PKCS8_set0_pbe(const char *pass, int passlen,
+X509_SIG * __cdecl PKCS8_set0_pbe(const char *pass, int passlen,
                          PKCS8_PRIV_KEY_INFO *p8inf, X509_ALGOR *pbe)
 {
     X509_SIG *p8;
diff --git a/crypto/pkcs12/p12_sbag.c b/crypto/pkcs12/p12_sbag.c
index a09c5b9313..846846f51e 100644
--- a/crypto/pkcs12/p12_sbag.c
+++ b/crypto/pkcs12/p12_sbag.c
@@ -19,32 +19,32 @@ ASN1_TYPE *PKCS12_get_attr(const PKCS12_SAFEBAG *bag, int attr_nid)
 }
 #endif
 
-const ASN1_TYPE *PKCS12_SAFEBAG_get0_attr(const PKCS12_SAFEBAG *bag,
+const ASN1_TYPE * __cdecl PKCS12_SAFEBAG_get0_attr(const PKCS12_SAFEBAG *bag,
                                           int attr_nid)
 {
     return PKCS12_get_attr_gen(bag->attrib, attr_nid);
 }
 
-ASN1_TYPE *PKCS8_get_attr(PKCS8_PRIV_KEY_INFO *p8, int attr_nid)
+ASN1_TYPE * __cdecl PKCS8_get_attr(PKCS8_PRIV_KEY_INFO *p8, int attr_nid)
 {
     return PKCS12_get_attr_gen(PKCS8_pkey_get0_attrs(p8), attr_nid);
 }
 
-const PKCS8_PRIV_KEY_INFO *PKCS12_SAFEBAG_get0_p8inf(const PKCS12_SAFEBAG *bag)
+const PKCS8_PRIV_KEY_INFO * __cdecl PKCS12_SAFEBAG_get0_p8inf(const PKCS12_SAFEBAG *bag)
 {
     if (PKCS12_SAFEBAG_get_nid(bag) != NID_keyBag)
         return NULL;
     return bag->value.keybag;
 }
 
-const X509_SIG *PKCS12_SAFEBAG_get0_pkcs8(const PKCS12_SAFEBAG *bag)
+const X509_SIG * __cdecl PKCS12_SAFEBAG_get0_pkcs8(const PKCS12_SAFEBAG *bag)
 {
     if (OBJ_obj2nid(bag->type) != NID_pkcs8ShroudedKeyBag)
         return NULL;
     return bag->value.shkeybag;
 }
 
-const STACK_OF(PKCS12_SAFEBAG) *
+const STACK_OF(PKCS12_SAFEBAG) * __cdecl 
 PKCS12_SAFEBAG_get0_safes(const PKCS12_SAFEBAG *bag)
 {
     if (OBJ_obj2nid(bag->type) != NID_safeContentsBag)
@@ -52,17 +52,17 @@ PKCS12_SAFEBAG_get0_safes(const PKCS12_SAFEBAG *bag)
     return bag->value.safes;
 }
 
-const ASN1_OBJECT *PKCS12_SAFEBAG_get0_type(const PKCS12_SAFEBAG *bag)
+const ASN1_OBJECT * __cdecl PKCS12_SAFEBAG_get0_type(const PKCS12_SAFEBAG *bag)
 {
     return bag->type;
 }
 
-int PKCS12_SAFEBAG_get_nid(const PKCS12_SAFEBAG *bag)
+int __cdecl PKCS12_SAFEBAG_get_nid(const PKCS12_SAFEBAG *bag)
 {
     return OBJ_obj2nid(bag->type);
 }
 
-int PKCS12_SAFEBAG_get_bag_nid(const PKCS12_SAFEBAG *bag)
+int __cdecl PKCS12_SAFEBAG_get_bag_nid(const PKCS12_SAFEBAG *bag)
 {
     int btype = PKCS12_SAFEBAG_get_nid(bag);
 
@@ -71,7 +71,7 @@ int PKCS12_SAFEBAG_get_bag_nid(const PKCS12_SAFEBAG *bag)
     return OBJ_obj2nid(bag->value.bag->type);
 }
 
-X509 *PKCS12_SAFEBAG_get1_cert(const PKCS12_SAFEBAG *bag)
+X509 * __cdecl PKCS12_SAFEBAG_get1_cert(const PKCS12_SAFEBAG *bag)
 {
     if (PKCS12_SAFEBAG_get_nid(bag) != NID_certBag)
         return NULL;
@@ -81,7 +81,7 @@ X509 *PKCS12_SAFEBAG_get1_cert(const PKCS12_SAFEBAG *bag)
                             ASN1_ITEM_rptr(X509));
 }
 
-X509_CRL *PKCS12_SAFEBAG_get1_crl(const PKCS12_SAFEBAG *bag)
+X509_CRL * __cdecl PKCS12_SAFEBAG_get1_crl(const PKCS12_SAFEBAG *bag)
 {
     if (PKCS12_SAFEBAG_get_nid(bag) != NID_crlBag)
         return NULL;
@@ -91,13 +91,13 @@ X509_CRL *PKCS12_SAFEBAG_get1_crl(const PKCS12_SAFEBAG *bag)
                             ASN1_ITEM_rptr(X509_CRL));
 }
 
-PKCS12_SAFEBAG *PKCS12_SAFEBAG_create_cert(X509 *x509)
+PKCS12_SAFEBAG * __cdecl PKCS12_SAFEBAG_create_cert(X509 *x509)
 {
     return PKCS12_item_pack_safebag(x509, ASN1_ITEM_rptr(X509),
                                     NID_x509Certificate, NID_certBag);
 }
 
-PKCS12_SAFEBAG *PKCS12_SAFEBAG_create_crl(X509_CRL *crl)
+PKCS12_SAFEBAG * __cdecl PKCS12_SAFEBAG_create_crl(X509_CRL *crl)
 {
     return PKCS12_item_pack_safebag(crl, ASN1_ITEM_rptr(X509_CRL),
                                     NID_x509Crl, NID_crlBag);
@@ -105,7 +105,7 @@ PKCS12_SAFEBAG *PKCS12_SAFEBAG_create_crl(X509_CRL *crl)
 
 /* Turn PKCS8 object into a keybag */
 
-PKCS12_SAFEBAG *PKCS12_SAFEBAG_create0_p8inf(PKCS8_PRIV_KEY_INFO *p8)
+PKCS12_SAFEBAG * __cdecl PKCS12_SAFEBAG_create0_p8inf(PKCS8_PRIV_KEY_INFO *p8)
 {
     PKCS12_SAFEBAG *bag = PKCS12_SAFEBAG_new();
 
@@ -120,7 +120,7 @@ PKCS12_SAFEBAG *PKCS12_SAFEBAG_create0_p8inf(PKCS8_PRIV_KEY_INFO *p8)
 
 /* Turn PKCS8 object into a shrouded keybag */
 
-PKCS12_SAFEBAG *PKCS12_SAFEBAG_create0_pkcs8(X509_SIG *p8)
+PKCS12_SAFEBAG *__cdecl PKCS12_SAFEBAG_create0_pkcs8(X509_SIG *p8)
 {
     PKCS12_SAFEBAG *bag = PKCS12_SAFEBAG_new();
 
@@ -134,7 +134,7 @@ PKCS12_SAFEBAG *PKCS12_SAFEBAG_create0_pkcs8(X509_SIG *p8)
     return bag;
 }
 
-PKCS12_SAFEBAG *PKCS12_SAFEBAG_create_pkcs8_encrypt(int pbe_nid,
+PKCS12_SAFEBAG * __cdecl PKCS12_SAFEBAG_create_pkcs8_encrypt(int pbe_nid,
                                                     const char *pass,
                                                     int passlen,
                                                     unsigned char *salt,
diff --git a/crypto/pkcs12/p12_utl.c b/crypto/pkcs12/p12_utl.c
index 43b9e3a594..de61a43344 100644
--- a/crypto/pkcs12/p12_utl.c
+++ b/crypto/pkcs12/p12_utl.c
@@ -13,7 +13,7 @@
 
 /* Cheap and nasty Unicode stuff */
 
-unsigned char *OPENSSL_asc2uni(const char *asc, int asclen,
+unsigned char * __cdecl OPENSSL_asc2uni(const char *asc, int asclen,
                                unsigned char **uni, int *unilen)
 {
     int ulen, i;
@@ -40,7 +40,7 @@ unsigned char *OPENSSL_asc2uni(const char *asc, int asclen,
     return unitmp;
 }
 
-char *OPENSSL_uni2asc(const unsigned char *uni, int unilen)
+char * __cdecl OPENSSL_uni2asc(const unsigned char *uni, int unilen)
 {
     int asclen, i;
     char *asctmp;
@@ -71,7 +71,7 @@ char *OPENSSL_uni2asc(const unsigned char *uni, int unilen)
  * expressed not in number of UTF-16 characters, but in number of
  * bytes the string occupies, and treat it, the length, accordingly.
  */
-unsigned char *OPENSSL_utf82uni(const char *asc, int asclen,
+unsigned char * __cdecl OPENSSL_utf82uni(const char *asc, int asclen,
                                 unsigned char **uni, int *unilen)
 {
     int ulen, i, j;
@@ -173,7 +173,7 @@ static int bmp_to_utf8(char *str, const unsigned char *utf16, int len)
     return UTF8_putc((unsigned char *)str, len > 4 ? 4 : len, utf32chr);
 }
 
-char *OPENSSL_uni2utf8(const unsigned char *uni, int unilen)
+char * __cdecl OPENSSL_uni2utf8(const unsigned char *uni, int unilen)
 {
     int asclen, i, j;
     char *asctmp;
@@ -219,25 +219,25 @@ char *OPENSSL_uni2utf8(const unsigned char *uni, int unilen)
     return asctmp;
 }
 
-int i2d_PKCS12_bio(BIO *bp, PKCS12 *p12)
+int __cdecl i2d_PKCS12_bio(BIO *bp, PKCS12 *p12)
 {
     return ASN1_item_i2d_bio(ASN1_ITEM_rptr(PKCS12), bp, p12);
 }
 
 #ifndef OPENSSL_NO_STDIO
-int i2d_PKCS12_fp(FILE *fp, PKCS12 *p12)
+int __cdecl i2d_PKCS12_fp(FILE *fp, PKCS12 *p12)
 {
     return ASN1_item_i2d_fp(ASN1_ITEM_rptr(PKCS12), fp, p12);
 }
 #endif
 
-PKCS12 *d2i_PKCS12_bio(BIO *bp, PKCS12 **p12)
+PKCS12 * __cdecl d2i_PKCS12_bio(BIO *bp, PKCS12 **p12)
 {
     return ASN1_item_d2i_bio(ASN1_ITEM_rptr(PKCS12), bp, p12);
 }
 
 #ifndef OPENSSL_NO_STDIO
-PKCS12 *d2i_PKCS12_fp(FILE *fp, PKCS12 **p12)
+PKCS12 * __cdecl d2i_PKCS12_fp(FILE *fp, PKCS12 **p12)
 {
     return ASN1_item_d2i_fp(ASN1_ITEM_rptr(PKCS12), fp, p12);
 }
diff --git a/crypto/pkcs12/pk12err.c b/crypto/pkcs12/pk12err.c
index 38ce5197ee..1721f6a907 100644
--- a/crypto/pkcs12/pk12err.c
+++ b/crypto/pkcs12/pk12err.c
@@ -105,7 +105,7 @@ static const ERR_STRING_DATA PKCS12_str_reasons[] = {
 
 #endif
 
-int ERR_load_PKCS12_strings(void)
+int __cdecl ERR_load_PKCS12_strings(void)
 {
 #ifndef OPENSSL_NO_ERR
     if (ERR_func_error_string(PKCS12_str_functs[0].error) == NULL) {
diff --git a/crypto/pkcs7/bio_pk7.c b/crypto/pkcs7/bio_pk7.c
index 29feaa3544..3a8aa5af98 100644
--- a/crypto/pkcs7/bio_pk7.c
+++ b/crypto/pkcs7/bio_pk7.c
@@ -18,7 +18,7 @@
 
 /* Streaming encode support for PKCS#7 */
 
-BIO *BIO_new_PKCS7(BIO *out, PKCS7 *p7)
+BIO * __cdecl BIO_new_PKCS7(BIO *out, PKCS7 *p7)
 {
     return BIO_new_NDEF(out, (ASN1_VALUE *)p7, ASN1_ITEM_rptr(PKCS7));
 }
diff --git a/crypto/pkcs7/pk7_attr.c b/crypto/pkcs7/pk7_attr.c
index e90bf03c52..9f46d043d7 100644
--- a/crypto/pkcs7/pk7_attr.c
+++ b/crypto/pkcs7/pk7_attr.c
@@ -17,7 +17,7 @@
 #include <openssl/x509.h>
 #include <openssl/err.h>
 
-int PKCS7_add_attrib_smimecap(PKCS7_SIGNER_INFO *si,
+int __cdecl PKCS7_add_attrib_smimecap(PKCS7_SIGNER_INFO *si,
                               STACK_OF(X509_ALGOR) *cap)
 {
     ASN1_STRING *seq;
@@ -32,7 +32,7 @@ int PKCS7_add_attrib_smimecap(PKCS7_SIGNER_INFO *si,
                                       V_ASN1_SEQUENCE, seq);
 }
 
-STACK_OF(X509_ALGOR) *PKCS7_get_smimecap(PKCS7_SIGNER_INFO *si)
+STACK_OF(X509_ALGOR) * __cdecl PKCS7_get_smimecap(PKCS7_SIGNER_INFO *si)
 {
     ASN1_TYPE *cap;
     const unsigned char *p;
@@ -47,7 +47,7 @@ STACK_OF(X509_ALGOR) *PKCS7_get_smimecap(PKCS7_SIGNER_INFO *si)
 }
 
 /* Basic smime-capabilities OID and optional integer arg */
-int PKCS7_simple_smimecap(STACK_OF(X509_ALGOR) *sk, int nid, int arg)
+int __cdecl PKCS7_simple_smimecap(STACK_OF(X509_ALGOR) *sk, int nid, int arg)
 {
     ASN1_INTEGER *nbit = NULL;
     X509_ALGOR *alg;
@@ -83,7 +83,7 @@ err:
     return 0;
 }
 
-int PKCS7_add_attrib_content_type(PKCS7_SIGNER_INFO *si, ASN1_OBJECT *coid)
+int __cdecl PKCS7_add_attrib_content_type(PKCS7_SIGNER_INFO *si, ASN1_OBJECT *coid)
 {
     if (PKCS7_get_signed_attribute(si, NID_pkcs9_contentType))
         return 0;
@@ -93,7 +93,7 @@ int PKCS7_add_attrib_content_type(PKCS7_SIGNER_INFO *si, ASN1_OBJECT *coid)
                                       V_ASN1_OBJECT, coid);
 }
 
-int PKCS7_add0_attrib_signing_time(PKCS7_SIGNER_INFO *si, ASN1_TIME *t)
+int __cdecl PKCS7_add0_attrib_signing_time(PKCS7_SIGNER_INFO *si, ASN1_TIME *t)
 {
     if (t == NULL && (t = X509_gmtime_adj(NULL, 0)) == NULL) {
         PKCS7err(PKCS7_F_PKCS7_ADD0_ATTRIB_SIGNING_TIME,
@@ -104,7 +104,7 @@ int PKCS7_add0_attrib_signing_time(PKCS7_SIGNER_INFO *si, ASN1_TIME *t)
                                       V_ASN1_UTCTIME, t);
 }
 
-int PKCS7_add1_attrib_digest(PKCS7_SIGNER_INFO *si,
+int __cdecl PKCS7_add1_attrib_digest(PKCS7_SIGNER_INFO *si,
                              const unsigned char *md, int mdlen)
 {
     ASN1_OCTET_STRING *os;
diff --git a/crypto/pkcs7/pk7_doit.c b/crypto/pkcs7/pk7_doit.c
index f63fbc50ea..9244160718 100644
--- a/crypto/pkcs7/pk7_doit.c
+++ b/crypto/pkcs7/pk7_doit.c
@@ -193,7 +193,7 @@ static int pkcs7_decrypt_rinfo(unsigned char **pek, int *peklen,
     return ret;
 }
 
-BIO *PKCS7_dataInit(PKCS7 *p7, BIO *bio)
+BIO * __cdecl PKCS7_dataInit(PKCS7 *p7, BIO *bio)
 {
     int i;
     BIO *out = NULL, *btmp = NULL;
@@ -356,7 +356,7 @@ static int pkcs7_cmp_ri(PKCS7_RECIP_INFO *ri, X509 *pcert)
 }
 
 /* int */
-BIO *PKCS7_dataDecode(PKCS7 *p7, EVP_PKEY *pkey, BIO *in_bio, X509 *pcert)
+BIO * __cdecl PKCS7_dataDecode(PKCS7 *p7, EVP_PKEY *pkey, BIO *in_bio, X509 *pcert)
 {
     int i, j;
     BIO *out = NULL, *btmp = NULL, *etmp = NULL, *bio = NULL;
@@ -642,7 +642,7 @@ static int do_pkcs7_signed_attrib(PKCS7_SIGNER_INFO *si, EVP_MD_CTX *mctx)
     return 1;
 }
 
-int PKCS7_dataFinal(PKCS7 *p7, BIO *bio)
+int __cdecl PKCS7_dataFinal(PKCS7 *p7, BIO *bio)
 {
     int ret = 0;
     int i, j;
@@ -816,7 +816,7 @@ int PKCS7_dataFinal(PKCS7 *p7, BIO *bio)
     return ret;
 }
 
-int PKCS7_SIGNER_INFO_sign(PKCS7_SIGNER_INFO *si)
+int __cdecl PKCS7_SIGNER_INFO_sign(PKCS7_SIGNER_INFO *si)
 {
     EVP_MD_CTX *mctx;
     EVP_PKEY_CTX *pctx = NULL;
@@ -879,7 +879,7 @@ int PKCS7_SIGNER_INFO_sign(PKCS7_SIGNER_INFO *si)
 
 }
 
-int PKCS7_dataVerify(X509_STORE *cert_store, X509_STORE_CTX *ctx, BIO *bio,
+int __cdecl PKCS7_dataVerify(X509_STORE *cert_store, X509_STORE_CTX *ctx, BIO *bio,
                      PKCS7 *p7, PKCS7_SIGNER_INFO *si)
 {
     PKCS7_ISSUER_AND_SERIAL *ias;
@@ -936,7 +936,7 @@ int PKCS7_dataVerify(X509_STORE *cert_store, X509_STORE_CTX *ctx, BIO *bio,
     return ret;
 }
 
-int PKCS7_signatureVerify(BIO *bio, PKCS7 *p7, PKCS7_SIGNER_INFO *si,
+int __cdecl PKCS7_signatureVerify(BIO *bio, PKCS7 *p7, PKCS7_SIGNER_INFO *si,
                           X509 *x509)
 {
     ASN1_OCTET_STRING *os;
@@ -1048,7 +1048,7 @@ int PKCS7_signatureVerify(BIO *bio, PKCS7 *p7, PKCS7_SIGNER_INFO *si,
     return ret;
 }
 
-PKCS7_ISSUER_AND_SERIAL *PKCS7_get_issuer_and_serial(PKCS7 *p7, int idx)
+PKCS7_ISSUER_AND_SERIAL * __cdecl PKCS7_get_issuer_and_serial(PKCS7 *p7, int idx)
 {
     STACK_OF(PKCS7_RECIP_INFO) *rsk;
     PKCS7_RECIP_INFO *ri;
@@ -1068,12 +1068,12 @@ PKCS7_ISSUER_AND_SERIAL *PKCS7_get_issuer_and_serial(PKCS7 *p7, int idx)
     return ri->issuer_and_serial;
 }
 
-ASN1_TYPE *PKCS7_get_signed_attribute(PKCS7_SIGNER_INFO *si, int nid)
+ASN1_TYPE * __cdecl PKCS7_get_signed_attribute(PKCS7_SIGNER_INFO *si, int nid)
 {
     return get_attribute(si->auth_attr, nid);
 }
 
-ASN1_TYPE *PKCS7_get_attribute(PKCS7_SIGNER_INFO *si, int nid)
+ASN1_TYPE * __cdecl PKCS7_get_attribute(PKCS7_SIGNER_INFO *si, int nid)
 {
     return get_attribute(si->unauth_attr, nid);
 }
@@ -1087,7 +1087,7 @@ static ASN1_TYPE *get_attribute(STACK_OF(X509_ATTRIBUTE) *sk, int nid)
     return X509_ATTRIBUTE_get0_type(xa, 0);
 }
 
-ASN1_OCTET_STRING *PKCS7_digest_from_attributes(STACK_OF(X509_ATTRIBUTE) *sk)
+ASN1_OCTET_STRING * __cdecl PKCS7_digest_from_attributes(STACK_OF(X509_ATTRIBUTE) *sk)
 {
     ASN1_TYPE *astype;
     if ((astype = get_attribute(sk, NID_pkcs9_messageDigest)) == NULL)
@@ -1095,7 +1095,7 @@ ASN1_OCTET_STRING *PKCS7_digest_from_attributes(STACK_OF(X509_ATTRIBUTE) *sk)
     return astype->value.octet_string;
 }
 
-int PKCS7_set_signed_attributes(PKCS7_SIGNER_INFO *p7si,
+int __cdecl PKCS7_set_signed_attributes(PKCS7_SIGNER_INFO *p7si,
                                 STACK_OF(X509_ATTRIBUTE) *sk)
 {
     int i;
@@ -1114,7 +1114,7 @@ int PKCS7_set_signed_attributes(PKCS7_SIGNER_INFO *p7si,
     return 1;
 }
 
-int PKCS7_set_attributes(PKCS7_SIGNER_INFO *p7si,
+int __cdecl PKCS7_set_attributes(PKCS7_SIGNER_INFO *p7si,
                          STACK_OF(X509_ATTRIBUTE) *sk)
 {
     int i;
@@ -1133,13 +1133,13 @@ int PKCS7_set_attributes(PKCS7_SIGNER_INFO *p7si,
     return 1;
 }
 
-int PKCS7_add_signed_attribute(PKCS7_SIGNER_INFO *p7si, int nid, int atrtype,
+int __cdecl PKCS7_add_signed_attribute(PKCS7_SIGNER_INFO *p7si, int nid, int atrtype,
                                void *value)
 {
     return add_attribute(&(p7si->auth_attr), nid, atrtype, value);
 }
 
-int PKCS7_add_attribute(PKCS7_SIGNER_INFO *p7si, int nid, int atrtype,
+int __cdecl PKCS7_add_attribute(PKCS7_SIGNER_INFO *p7si, int nid, int atrtype,
                         void *value)
 {
     return add_attribute(&(p7si->unauth_attr), nid, atrtype, value);
diff --git a/crypto/pkcs7/pk7_lib.c b/crypto/pkcs7/pk7_lib.c
index 16b76431d1..58786a3326 100644
--- a/crypto/pkcs7/pk7_lib.c
+++ b/crypto/pkcs7/pk7_lib.c
@@ -14,7 +14,7 @@
 #include "internal/asn1_int.h"
 #include "internal/evp_int.h"
 
-long PKCS7_ctrl(PKCS7 *p7, int cmd, long larg, char *parg)
+long __cdecl PKCS7_ctrl(PKCS7 *p7, int cmd, long larg, char *parg)
 {
     int nid;
     long ret;
@@ -60,7 +60,7 @@ long PKCS7_ctrl(PKCS7 *p7, int cmd, long larg, char *parg)
     return ret;
 }
 
-int PKCS7_content_new(PKCS7 *p7, int type)
+int __cdecl PKCS7_content_new(PKCS7 *p7, int type)
 {
     PKCS7 *ret = NULL;
 
@@ -77,7 +77,7 @@ int PKCS7_content_new(PKCS7 *p7, int type)
     return 0;
 }
 
-int PKCS7_set_content(PKCS7 *p7, PKCS7 *p7_data)
+int __cdecl PKCS7_set_content(PKCS7 *p7, PKCS7 *p7_data)
 {
     int i;
 
@@ -104,7 +104,7 @@ int PKCS7_set_content(PKCS7 *p7, PKCS7 *p7_data)
     return 0;
 }
 
-int PKCS7_set_type(PKCS7 *p7, int type)
+int __cdecl PKCS7_set_type(PKCS7 *p7, int type)
 {
     ASN1_OBJECT *obj;
 
@@ -175,14 +175,14 @@ int PKCS7_set_type(PKCS7 *p7, int type)
     return 0;
 }
 
-int PKCS7_set0_type_other(PKCS7 *p7, int type, ASN1_TYPE *other)
+int __cdecl PKCS7_set0_type_other(PKCS7 *p7, int type, ASN1_TYPE *other)
 {
     p7->type = OBJ_nid2obj(type);
     p7->d.other = other;
     return 1;
 }
 
-int PKCS7_add_signer(PKCS7 *p7, PKCS7_SIGNER_INFO *psi)
+int __cdecl PKCS7_add_signer(PKCS7 *p7, PKCS7_SIGNER_INFO *psi)
 {
     int i, j, nid;
     X509_ALGOR *alg;
@@ -235,7 +235,7 @@ int PKCS7_add_signer(PKCS7 *p7, PKCS7_SIGNER_INFO *psi)
     return 1;
 }
 
-int PKCS7_add_certificate(PKCS7 *p7, X509 *x509)
+int __cdecl PKCS7_add_certificate(PKCS7 *p7, X509 *x509)
 {
     int i;
     STACK_OF(X509) **sk;
@@ -267,7 +267,7 @@ int PKCS7_add_certificate(PKCS7 *p7, X509 *x509)
     return 1;
 }
 
-int PKCS7_add_crl(PKCS7 *p7, X509_CRL *crl)
+int __cdecl PKCS7_add_crl(PKCS7 *p7, X509_CRL *crl)
 {
     int i;
     STACK_OF(X509_CRL) **sk;
@@ -300,7 +300,7 @@ int PKCS7_add_crl(PKCS7 *p7, X509_CRL *crl)
     return 1;
 }
 
-int PKCS7_SIGNER_INFO_set(PKCS7_SIGNER_INFO *p7i, X509 *x509, EVP_PKEY *pkey,
+int __cdecl PKCS7_SIGNER_INFO_set(PKCS7_SIGNER_INFO *p7i, X509 *x509, EVP_PKEY *pkey,
                           const EVP_MD *dgst)
 {
     int ret;
@@ -346,7 +346,7 @@ int PKCS7_SIGNER_INFO_set(PKCS7_SIGNER_INFO *p7i, X509 *x509, EVP_PKEY *pkey,
     return 0;
 }
 
-PKCS7_SIGNER_INFO *PKCS7_add_signature(PKCS7 *p7, X509 *x509, EVP_PKEY *pkey,
+PKCS7_SIGNER_INFO * __cdecl PKCS7_add_signature(PKCS7 *p7, X509 *x509, EVP_PKEY *pkey,
                                        const EVP_MD *dgst)
 {
     PKCS7_SIGNER_INFO *si = NULL;
@@ -374,7 +374,7 @@ PKCS7_SIGNER_INFO *PKCS7_add_signature(PKCS7 *p7, X509 *x509, EVP_PKEY *pkey,
     return NULL;
 }
 
-int PKCS7_set_digest(PKCS7 *p7, const EVP_MD *md)
+int __cdecl PKCS7_set_digest(PKCS7 *p7, const EVP_MD *md)
 {
     if (PKCS7_type_is_digest(p7)) {
         if ((p7->d.digest->md->parameter = ASN1_TYPE_new()) == NULL) {
@@ -390,7 +390,7 @@ int PKCS7_set_digest(PKCS7 *p7, const EVP_MD *md)
     return 1;
 }
 
-STACK_OF(PKCS7_SIGNER_INFO) *PKCS7_get_signer_info(PKCS7 *p7)
+STACK_OF(PKCS7_SIGNER_INFO) * __cdecl PKCS7_get_signer_info(PKCS7 *p7)
 {
     if (p7 == NULL || p7->d.ptr == NULL)
         return NULL;
@@ -402,7 +402,7 @@ STACK_OF(PKCS7_SIGNER_INFO) *PKCS7_get_signer_info(PKCS7 *p7)
         return NULL;
 }
 
-void PKCS7_SIGNER_INFO_get0_algs(PKCS7_SIGNER_INFO *si, EVP_PKEY **pk,
+void __cdecl PKCS7_SIGNER_INFO_get0_algs(PKCS7_SIGNER_INFO *si, EVP_PKEY **pk,
                                  X509_ALGOR **pdig, X509_ALGOR **psig)
 {
     if (pk)
@@ -413,13 +413,13 @@ void PKCS7_SIGNER_INFO_get0_algs(PKCS7_SIGNER_INFO *si, EVP_PKEY **pk,
         *psig = si->digest_enc_alg;
 }
 
-void PKCS7_RECIP_INFO_get0_alg(PKCS7_RECIP_INFO *ri, X509_ALGOR **penc)
+void __cdecl PKCS7_RECIP_INFO_get0_alg(PKCS7_RECIP_INFO *ri, X509_ALGOR **penc)
 {
     if (penc)
         *penc = ri->key_enc_algor;
 }
 
-PKCS7_RECIP_INFO *PKCS7_add_recipient(PKCS7 *p7, X509 *x509)
+PKCS7_RECIP_INFO * __cdecl PKCS7_add_recipient(PKCS7 *p7, X509 *x509)
 {
     PKCS7_RECIP_INFO *ri;
 
@@ -435,7 +435,7 @@ PKCS7_RECIP_INFO *PKCS7_add_recipient(PKCS7 *p7, X509 *x509)
     return NULL;
 }
 
-int PKCS7_add_recipient_info(PKCS7 *p7, PKCS7_RECIP_INFO *ri)
+int __cdecl PKCS7_add_recipient_info(PKCS7 *p7, PKCS7_RECIP_INFO *ri)
 {
     int i;
     STACK_OF(PKCS7_RECIP_INFO) *sk;
@@ -459,7 +459,7 @@ int PKCS7_add_recipient_info(PKCS7 *p7, PKCS7_RECIP_INFO *ri)
     return 1;
 }
 
-int PKCS7_RECIP_INFO_set(PKCS7_RECIP_INFO *p7i, X509 *x509)
+int __cdecl PKCS7_RECIP_INFO_set(PKCS7_RECIP_INFO *p7i, X509 *x509)
 {
     int ret;
     EVP_PKEY *pkey = NULL;
@@ -503,7 +503,7 @@ int PKCS7_RECIP_INFO_set(PKCS7_RECIP_INFO *p7i, X509 *x509)
     return 0;
 }
 
-X509 *PKCS7_cert_from_signer_info(PKCS7 *p7, PKCS7_SIGNER_INFO *si)
+X509 * __cdecl PKCS7_cert_from_signer_info(PKCS7 *p7, PKCS7_SIGNER_INFO *si)
 {
     if (PKCS7_type_is_signed(p7))
         return (X509_find_by_issuer_and_serial(p7->d.sign->cert,
@@ -514,7 +514,7 @@ X509 *PKCS7_cert_from_signer_info(PKCS7 *p7, PKCS7_SIGNER_INFO *si)
         return NULL;
 }
 
-int PKCS7_set_cipher(PKCS7 *p7, const EVP_CIPHER *cipher)
+int __cdecl PKCS7_set_cipher(PKCS7 *p7, const EVP_CIPHER *cipher)
 {
     int i;
     PKCS7_ENC_CONTENT *ec;
@@ -544,7 +544,7 @@ int PKCS7_set_cipher(PKCS7 *p7, const EVP_CIPHER *cipher)
     return 1;
 }
 
-int PKCS7_stream(unsigned char ***boundary, PKCS7 *p7)
+int __cdecl PKCS7_stream(unsigned char ***boundary, PKCS7 *p7)
 {
     ASN1_OCTET_STRING *os = NULL;
 
diff --git a/crypto/pkcs7/pk7_mime.c b/crypto/pkcs7/pk7_mime.c
index 19e6868148..7d05add7d1 100644
--- a/crypto/pkcs7/pk7_mime.c
+++ b/crypto/pkcs7/pk7_mime.c
@@ -14,19 +14,19 @@
 
 /* PKCS#7 wrappers round generalised stream and MIME routines */
 
-int i2d_PKCS7_bio_stream(BIO *out, PKCS7 *p7, BIO *in, int flags)
+int __cdecl i2d_PKCS7_bio_stream(BIO *out, PKCS7 *p7, BIO *in, int flags)
 {
     return i2d_ASN1_bio_stream(out, (ASN1_VALUE *)p7, in, flags,
                                ASN1_ITEM_rptr(PKCS7));
 }
 
-int PEM_write_bio_PKCS7_stream(BIO *out, PKCS7 *p7, BIO *in, int flags)
+int __cdecl PEM_write_bio_PKCS7_stream(BIO *out, PKCS7 *p7, BIO *in, int flags)
 {
     return PEM_write_bio_ASN1_stream(out, (ASN1_VALUE *)p7, in, flags,
                                      "PKCS7", ASN1_ITEM_rptr(PKCS7));
 }
 
-int SMIME_write_PKCS7(BIO *bio, PKCS7 *p7, BIO *data, int flags)
+int __cdecl SMIME_write_PKCS7(BIO *bio, PKCS7 *p7, BIO *data, int flags)
 {
     STACK_OF(X509_ALGOR) *mdalgs;
     int ctype_nid = OBJ_obj2nid(p7->type);
@@ -42,7 +42,7 @@ int SMIME_write_PKCS7(BIO *bio, PKCS7 *p7, BIO *data, int flags)
                             ASN1_ITEM_rptr(PKCS7));
 }
 
-PKCS7 *SMIME_read_PKCS7(BIO *bio, BIO **bcont)
+PKCS7 * __cdecl SMIME_read_PKCS7(BIO *bio, BIO **bcont)
 {
     return (PKCS7 *)SMIME_read_ASN1(bio, bcont, ASN1_ITEM_rptr(PKCS7));
 }
diff --git a/crypto/pkcs7/pk7_smime.c b/crypto/pkcs7/pk7_smime.c
index 44187230ef..cf0bf00d58 100644
--- a/crypto/pkcs7/pk7_smime.c
+++ b/crypto/pkcs7/pk7_smime.c
@@ -19,7 +19,7 @@
 
 static int pkcs7_copy_existing_digest(PKCS7 *p7, PKCS7_SIGNER_INFO *si);
 
-PKCS7 *PKCS7_sign(X509 *signcert, EVP_PKEY *pkey, STACK_OF(X509) *certs,
+PKCS7 * __cdecl PKCS7_sign(X509 *signcert, EVP_PKEY *pkey, STACK_OF(X509) *certs,
                   BIO *data, int flags)
 {
     PKCS7 *p7;
@@ -62,7 +62,7 @@ PKCS7 *PKCS7_sign(X509 *signcert, EVP_PKEY *pkey, STACK_OF(X509) *certs,
     return NULL;
 }
 
-int PKCS7_final(PKCS7 *p7, BIO *data, int flags)
+int __cdecl PKCS7_final(PKCS7 *p7, BIO *data, int flags)
 {
     BIO *p7bio;
     int ret = 0;
@@ -106,7 +106,7 @@ static int add_digest_smcap(STACK_OF(X509_ALGOR) *sk, int nid, int arg)
     return 1;
 }
 
-PKCS7_SIGNER_INFO *PKCS7_sign_add_signer(PKCS7 *p7, X509 *signcert,
+PKCS7_SIGNER_INFO * __cdecl PKCS7_sign_add_signer(PKCS7 *p7, X509 *signcert,
                                          EVP_PKEY *pkey, const EVP_MD *md,
                                          int flags)
 {
@@ -201,7 +201,7 @@ static int pkcs7_copy_existing_digest(PKCS7 *p7, PKCS7_SIGNER_INFO *si)
     return 0;
 }
 
-int PKCS7_verify(PKCS7 *p7, STACK_OF(X509) *certs, X509_STORE *store,
+int __cdecl PKCS7_verify(PKCS7 *p7, STACK_OF(X509) *certs, X509_STORE *store,
                  BIO *indata, BIO *out, int flags)
 {
     STACK_OF(X509) *signers;
@@ -369,7 +369,7 @@ int PKCS7_verify(PKCS7 *p7, STACK_OF(X509) *certs, X509_STORE *store,
     return ret;
 }
 
-STACK_OF(X509) *PKCS7_get0_signers(PKCS7 *p7, STACK_OF(X509) *certs,
+STACK_OF(X509) * __cdecl PKCS7_get0_signers(PKCS7 *p7, STACK_OF(X509) *certs,
                                    int flags)
 {
     STACK_OF(X509) *signers;
@@ -433,7 +433,7 @@ STACK_OF(X509) *PKCS7_get0_signers(PKCS7 *p7, STACK_OF(X509) *certs,
 
 /* Build a complete PKCS#7 enveloped data */
 
-PKCS7 *PKCS7_encrypt(STACK_OF(X509) *certs, BIO *in, const EVP_CIPHER *cipher,
+PKCS7 * __cdecl PKCS7_encrypt(STACK_OF(X509) *certs, BIO *in, const EVP_CIPHER *cipher,
                      int flags)
 {
     PKCS7 *p7;
@@ -474,7 +474,7 @@ PKCS7 *PKCS7_encrypt(STACK_OF(X509) *certs, BIO *in, const EVP_CIPHER *cipher,
 
 }
 
-int PKCS7_decrypt(PKCS7 *p7, EVP_PKEY *pkey, X509 *cert, BIO *data, int flags)
+int __cdecl PKCS7_decrypt(PKCS7 *p7, EVP_PKEY *pkey, X509 *cert, BIO *data, int flags)
 {
     BIO *tmpmem;
     int ret = 0, i;
diff --git a/crypto/pkcs7/pkcs7err.c b/crypto/pkcs7/pkcs7err.c
index 07490c1a58..ee81c47365 100644
--- a/crypto/pkcs7/pkcs7err.c
+++ b/crypto/pkcs7/pkcs7err.c
@@ -144,7 +144,7 @@ static const ERR_STRING_DATA PKCS7_str_reasons[] = {
 
 #endif
 
-int ERR_load_PKCS7_strings(void)
+int __cdecl ERR_load_PKCS7_strings(void)
 {
 #ifndef OPENSSL_NO_ERR
     if (ERR_func_error_string(PKCS7_str_functs[0].error) == NULL) {
diff --git a/crypto/poly1305/poly1305_ameth.c b/crypto/poly1305/poly1305_ameth.c
index 033ee8cd96..8ffb306367 100644
--- a/crypto/poly1305/poly1305_ameth.c
+++ b/crypto/poly1305/poly1305_ameth.c
@@ -20,12 +20,12 @@
  * POLY1305 output length and to free up a POLY1305 key.
  */
 
-static int poly1305_size(const EVP_PKEY *pkey)
+static int __cdecl poly1305_size(const EVP_PKEY *pkey)
 {
     return POLY1305_DIGEST_SIZE;
 }
 
-static void poly1305_key_free(EVP_PKEY *pkey)
+static void __cdecl poly1305_key_free(EVP_PKEY *pkey)
 {
     ASN1_OCTET_STRING *os = EVP_PKEY_get0(pkey);
     if (os != NULL) {
@@ -35,18 +35,18 @@ static void poly1305_key_free(EVP_PKEY *pkey)
     }
 }
 
-static int poly1305_pkey_ctrl(EVP_PKEY *pkey, int op, long arg1, void *arg2)
+static int __cdecl poly1305_pkey_ctrl(EVP_PKEY *pkey, int op, long arg1, void *arg2)
 {
     /* nothing, (including ASN1_PKEY_CTRL_DEFAULT_MD_NID), is supported */
     return -2;
 }
 
-static int poly1305_pkey_public_cmp(const EVP_PKEY *a, const EVP_PKEY *b)
+static int __cdecl poly1305_pkey_public_cmp(const EVP_PKEY *a, const EVP_PKEY *b)
 {
     return ASN1_OCTET_STRING_cmp(EVP_PKEY_get0(a), EVP_PKEY_get0(b));
 }
 
-static int poly1305_set_priv_key(EVP_PKEY *pkey, const unsigned char *priv,
+static int __cdecl poly1305_set_priv_key(EVP_PKEY *pkey, const unsigned char *priv,
                                  size_t len)
 {
     ASN1_OCTET_STRING *os;
@@ -67,7 +67,7 @@ static int poly1305_set_priv_key(EVP_PKEY *pkey, const unsigned char *priv,
     return 1;
 }
 
-static int poly1305_get_priv_key(const EVP_PKEY *pkey, unsigned char *priv,
+static int __cdecl poly1305_get_priv_key(const EVP_PKEY *pkey, unsigned char *priv,
                                  size_t *len)
 {
     ASN1_OCTET_STRING *os = (ASN1_OCTET_STRING *)pkey->pkey.ptr;
diff --git a/crypto/poly1305/poly1305_pmeth.c b/crypto/poly1305/poly1305_pmeth.c
index 3bc24c98cd..3beb0346f3 100644
--- a/crypto/poly1305/poly1305_pmeth.c
+++ b/crypto/poly1305/poly1305_pmeth.c
@@ -24,7 +24,7 @@ typedef struct {
     POLY1305 ctx;
 } POLY1305_PKEY_CTX;
 
-static int pkey_poly1305_init(EVP_PKEY_CTX *ctx)
+static int __cdecl pkey_poly1305_init(EVP_PKEY_CTX *ctx)
 {
     POLY1305_PKEY_CTX *pctx;
 
@@ -39,7 +39,7 @@ static int pkey_poly1305_init(EVP_PKEY_CTX *ctx)
     return 1;
 }
 
-static void pkey_poly1305_cleanup(EVP_PKEY_CTX *ctx)
+static void __cdecl pkey_poly1305_cleanup(EVP_PKEY_CTX *ctx)
 {
     POLY1305_PKEY_CTX *pctx = EVP_PKEY_CTX_get_data(ctx);
 
@@ -50,7 +50,7 @@ static void pkey_poly1305_cleanup(EVP_PKEY_CTX *ctx)
     }
 }
 
-static int pkey_poly1305_copy(EVP_PKEY_CTX *dst, EVP_PKEY_CTX *src)
+static int __cdecl pkey_poly1305_copy(EVP_PKEY_CTX *dst, EVP_PKEY_CTX *src)
 {
     POLY1305_PKEY_CTX *sctx, *dctx;
 
@@ -69,7 +69,7 @@ static int pkey_poly1305_copy(EVP_PKEY_CTX *dst, EVP_PKEY_CTX *src)
     return 1;
 }
 
-static int pkey_poly1305_keygen(EVP_PKEY_CTX *ctx, EVP_PKEY *pkey)
+static int __cdecl pkey_poly1305_keygen(EVP_PKEY_CTX *ctx, EVP_PKEY *pkey)
 {
     ASN1_OCTET_STRING *key;
     POLY1305_PKEY_CTX *pctx = EVP_PKEY_CTX_get_data(ctx);
@@ -82,7 +82,7 @@ static int pkey_poly1305_keygen(EVP_PKEY_CTX *ctx, EVP_PKEY *pkey)
     return EVP_PKEY_assign_POLY1305(pkey, key);
 }
 
-static int int_update(EVP_MD_CTX *ctx, const void *data, size_t count)
+static int __cdecl int_update(EVP_MD_CTX *ctx, const void *data, size_t count)
 {
     POLY1305_PKEY_CTX *pctx = EVP_PKEY_CTX_get_data(EVP_MD_CTX_pkey_ctx(ctx));
 
@@ -90,7 +90,7 @@ static int int_update(EVP_MD_CTX *ctx, const void *data, size_t count)
     return 1;
 }
 
-static int poly1305_signctx_init(EVP_PKEY_CTX *ctx, EVP_MD_CTX *mctx)
+static int __cdecl poly1305_signctx_init(EVP_PKEY_CTX *ctx, EVP_MD_CTX *mctx)
 {
     POLY1305_PKEY_CTX *pctx = ctx->data;
     ASN1_OCTET_STRING *key = (ASN1_OCTET_STRING *)ctx->pkey->pkey.ptr;
@@ -102,7 +102,7 @@ static int poly1305_signctx_init(EVP_PKEY_CTX *ctx, EVP_MD_CTX *mctx)
     Poly1305_Init(&pctx->ctx, key->data);
     return 1;
 }
-static int poly1305_signctx(EVP_PKEY_CTX *ctx, unsigned char *sig, size_t *siglen,
+static int __cdecl poly1305_signctx(EVP_PKEY_CTX *ctx, unsigned char *sig, size_t *siglen,
                             EVP_MD_CTX *mctx)
 {
     POLY1305_PKEY_CTX *pctx = ctx->data;
@@ -113,7 +113,7 @@ static int poly1305_signctx(EVP_PKEY_CTX *ctx, unsigned char *sig, size_t *sigle
     return 1;
 }
 
-static int pkey_poly1305_ctrl(EVP_PKEY_CTX *ctx, int type, int p1, void *p2)
+static int __cdecl pkey_poly1305_ctrl(EVP_PKEY_CTX *ctx, int type, int p1, void *p2)
 {
     POLY1305_PKEY_CTX *pctx = EVP_PKEY_CTX_get_data(ctx);
     const unsigned char *key;
@@ -148,7 +148,7 @@ static int pkey_poly1305_ctrl(EVP_PKEY_CTX *ctx, int type, int p1, void *p2)
     return 1;
 }
 
-static int pkey_poly1305_ctrl_str(EVP_PKEY_CTX *ctx,
+static int __cdecl pkey_poly1305_ctrl_str(EVP_PKEY_CTX *ctx,
                                   const char *type, const char *value)
 {
     if (value == NULL)
diff --git a/crypto/ppccap.c b/crypto/ppccap.c
index a59485207b..0a1052db69 100644
--- a/crypto/ppccap.c
+++ b/crypto/ppccap.c
@@ -171,7 +171,7 @@ void OPENSSL_madd300_probe(void);
 long OPENSSL_rdtsc_mftb(void);
 long OPENSSL_rdtsc_mfspr268(void);
 
-uint32_t OPENSSL_rdtsc(void)
+uint32_t __cdecl OPENSSL_rdtsc(void)
 {
     if (OPENSSL_ppccap_P & PPC_MFTB)
         return OPENSSL_rdtsc_mftb();
@@ -184,7 +184,7 @@ uint32_t OPENSSL_rdtsc(void)
 size_t OPENSSL_instrument_bus_mftb(unsigned int *, size_t);
 size_t OPENSSL_instrument_bus_mfspr268(unsigned int *, size_t);
 
-size_t OPENSSL_instrument_bus(unsigned int *out, size_t cnt)
+size_t __cdecl OPENSSL_instrument_bus(unsigned int *out, size_t cnt)
 {
     if (OPENSSL_ppccap_P & PPC_MFTB)
         return OPENSSL_instrument_bus_mftb(out, cnt);
@@ -197,7 +197,7 @@ size_t OPENSSL_instrument_bus(unsigned int *out, size_t cnt)
 size_t OPENSSL_instrument_bus2_mftb(unsigned int *, size_t, size_t);
 size_t OPENSSL_instrument_bus2_mfspr268(unsigned int *, size_t, size_t);
 
-size_t OPENSSL_instrument_bus2(unsigned int *out, size_t cnt, size_t max)
+size_t __cdecl OPENSSL_instrument_bus2(unsigned int *out, size_t cnt, size_t max)
 {
     if (OPENSSL_ppccap_P & PPC_MFTB)
         return OPENSSL_instrument_bus2_mftb(out, cnt, max);
diff --git a/crypto/rand/drbg_ctr.c b/crypto/rand/drbg_ctr.c
index a243361b56..5f470bc3ca 100644
--- a/crypto/rand/drbg_ctr.c
+++ b/crypto/rand/drbg_ctr.c
@@ -225,7 +225,7 @@ __owur static int ctr_df(RAND_DRBG_CTR *ctr,
  * zeroes if necessary and have up to two parameters XORed together,
  * so we handle both cases in this function instead.
  */
-__owur static int ctr_update(RAND_DRBG *drbg,
+__owur static int __cdecl ctr_update(RAND_DRBG *drbg,
                              const unsigned char *in1, size_t in1len,
                              const unsigned char *in2, size_t in2len,
                              const unsigned char *nonce, size_t noncelen)
@@ -276,7 +276,7 @@ __owur static int ctr_update(RAND_DRBG *drbg,
     return 1;
 }
 
-__owur static int drbg_ctr_instantiate(RAND_DRBG *drbg,
+__owur static int __cdecl drbg_ctr_instantiate(RAND_DRBG *drbg,
                                        const unsigned char *entropy, size_t entropylen,
                                        const unsigned char *nonce, size_t noncelen,
                                        const unsigned char *pers, size_t perslen)
@@ -295,7 +295,7 @@ __owur static int drbg_ctr_instantiate(RAND_DRBG *drbg,
     return 1;
 }
 
-__owur static int drbg_ctr_reseed(RAND_DRBG *drbg,
+__owur static int __cdecl drbg_ctr_reseed(RAND_DRBG *drbg,
                                   const unsigned char *entropy, size_t entropylen,
                                   const unsigned char *adin, size_t adinlen)
 {
@@ -306,7 +306,7 @@ __owur static int drbg_ctr_reseed(RAND_DRBG *drbg,
     return 1;
 }
 
-__owur static int drbg_ctr_generate(RAND_DRBG *drbg,
+__owur static int __cdecl drbg_ctr_generate(RAND_DRBG *drbg,
                                     unsigned char *out, size_t outlen,
                                     const unsigned char *adin, size_t adinlen)
 {
@@ -351,7 +351,7 @@ __owur static int drbg_ctr_generate(RAND_DRBG *drbg,
     return 1;
 }
 
-static int drbg_ctr_uninstantiate(RAND_DRBG *drbg)
+static int __cdecl drbg_ctr_uninstantiate(RAND_DRBG *drbg)
 {
     EVP_CIPHER_CTX_free(drbg->data.ctr.ctx);
     EVP_CIPHER_CTX_free(drbg->data.ctr.ctx_df);
diff --git a/crypto/rand/drbg_lib.c b/crypto/rand/drbg_lib.c
index 12bb627a04..aeace32e67 100644
--- a/crypto/rand/drbg_lib.c
+++ b/crypto/rand/drbg_lib.c
@@ -100,7 +100,7 @@ static RAND_DRBG *rand_drbg_new(int secure,
  *
  * Returns 1 on success, 0 on failure.
  */
-int RAND_DRBG_set(RAND_DRBG *drbg, int type, unsigned int flags)
+int __cdecl RAND_DRBG_set(RAND_DRBG *drbg, int type, unsigned int flags)
 {
     int ret = 1;
 
@@ -150,7 +150,7 @@ int RAND_DRBG_set(RAND_DRBG *drbg, int type, unsigned int flags)
  *
  * Returns 1 on success, 0 on failure.
  */
-int RAND_DRBG_set_defaults(int type, unsigned int flags)
+int __cdecl RAND_DRBG_set_defaults(int type, unsigned int flags)
 {
     int ret = 1;
 
@@ -247,12 +247,12 @@ static RAND_DRBG *rand_drbg_new(int secure,
     return NULL;
 }
 
-RAND_DRBG *RAND_DRBG_new(int type, unsigned int flags, RAND_DRBG *parent)
+RAND_DRBG * __cdecl RAND_DRBG_new(int type, unsigned int flags, RAND_DRBG *parent)
 {
     return rand_drbg_new(0, type, flags, parent);
 }
 
-RAND_DRBG *RAND_DRBG_secure_new(int type, unsigned int flags, RAND_DRBG *parent)
+RAND_DRBG * __cdecl RAND_DRBG_secure_new(int type, unsigned int flags, RAND_DRBG *parent)
 {
     return rand_drbg_new(1, type, flags, parent);
 }
@@ -260,7 +260,7 @@ RAND_DRBG *RAND_DRBG_secure_new(int type, unsigned int flags, RAND_DRBG *parent)
 /*
  * Uninstantiate |drbg| and free all memory.
  */
-void RAND_DRBG_free(RAND_DRBG *drbg)
+void __cdecl RAND_DRBG_free(RAND_DRBG *drbg)
 {
     if (drbg == NULL)
         return;
@@ -285,7 +285,7 @@ void RAND_DRBG_free(RAND_DRBG *drbg)
  *
  * Returns 1 on success, 0 on failure.
  */
-int RAND_DRBG_instantiate(RAND_DRBG *drbg,
+int __cdecl RAND_DRBG_instantiate(RAND_DRBG *drbg,
                           const unsigned char *pers, size_t perslen)
 {
     unsigned char *nonce = NULL, *entropy = NULL;
@@ -380,7 +380,7 @@ int RAND_DRBG_instantiate(RAND_DRBG *drbg,
  *
  * Returns 1 on success, 0 on failure.
  */
-int RAND_DRBG_uninstantiate(RAND_DRBG *drbg)
+int __cdecl RAND_DRBG_uninstantiate(RAND_DRBG *drbg)
 {
     if (drbg->meth == NULL) {
         drbg->state = DRBG_ERROR;
@@ -404,7 +404,7 @@ int RAND_DRBG_uninstantiate(RAND_DRBG *drbg)
  *
  * Returns 1 on success, 0 on failure.
  */
-int RAND_DRBG_reseed(RAND_DRBG *drbg,
+int __cdecl RAND_DRBG_reseed(RAND_DRBG *drbg,
                      const unsigned char *adin, size_t adinlen,
                      int prediction_resistance)
 {
@@ -574,7 +574,7 @@ int rand_drbg_restart(RAND_DRBG *drbg,
  * Returns 1 on success, 0 on failure.
  *
  */
-int RAND_DRBG_generate(RAND_DRBG *drbg, unsigned char *out, size_t outlen,
+int __cdecl RAND_DRBG_generate(RAND_DRBG *drbg, unsigned char *out, size_t outlen,
                        int prediction_resistance,
                        const unsigned char *adin, size_t adinlen)
 {
@@ -657,7 +657,7 @@ int RAND_DRBG_generate(RAND_DRBG *drbg, unsigned char *out, size_t outlen,
  *
  * Returns 1 on success 0 on failure.
  */
-int RAND_DRBG_bytes(RAND_DRBG *drbg, unsigned char *out, size_t outlen)
+int __cdecl RAND_DRBG_bytes(RAND_DRBG *drbg, unsigned char *out, size_t outlen)
 {
     unsigned char *additional = NULL;
     size_t additional_len;
@@ -700,7 +700,7 @@ int RAND_DRBG_bytes(RAND_DRBG *drbg, unsigned char *out, size_t outlen)
  *
  * Returns 1 on success, 0 on failure.
  */
-int RAND_DRBG_set_callbacks(RAND_DRBG *drbg,
+int __cdecl RAND_DRBG_set_callbacks(RAND_DRBG *drbg,
                             RAND_DRBG_get_entropy_fn get_entropy,
                             RAND_DRBG_cleanup_entropy_fn cleanup_entropy,
                             RAND_DRBG_get_nonce_fn get_nonce,
@@ -725,7 +725,7 @@ int RAND_DRBG_set_callbacks(RAND_DRBG *drbg,
  *
  * Returns 1 on success, 0 on failure.
  */
-int RAND_DRBG_set_reseed_interval(RAND_DRBG *drbg, unsigned int interval)
+int __cdecl RAND_DRBG_set_reseed_interval(RAND_DRBG *drbg, unsigned int interval)
 {
     if (interval > MAX_RESEED_INTERVAL)
         return 0;
@@ -743,7 +743,7 @@ int RAND_DRBG_set_reseed_interval(RAND_DRBG *drbg, unsigned int interval)
  *
  * Returns 1 on success, 0 on failure.
  */
-int RAND_DRBG_set_reseed_time_interval(RAND_DRBG *drbg, time_t interval)
+int __cdecl RAND_DRBG_set_reseed_time_interval(RAND_DRBG *drbg, time_t interval)
 {
     if (interval > MAX_RESEED_TIME_INTERVAL)
         return 0;
@@ -760,7 +760,7 @@ int RAND_DRBG_set_reseed_time_interval(RAND_DRBG *drbg, time_t interval)
  * Returns 1 on success, 0 on failure.
  */
 
-int RAND_DRBG_set_reseed_defaults(
+int __cdecl RAND_DRBG_set_reseed_defaults(
                                   unsigned int _master_reseed_interval,
                                   unsigned int _slave_reseed_interval,
                                   time_t _master_reseed_time_interval,
@@ -849,12 +849,12 @@ int rand_drbg_enable_locking(RAND_DRBG *drbg)
 /*
  * Get and set the EXDATA
  */
-int RAND_DRBG_set_ex_data(RAND_DRBG *drbg, int idx, void *arg)
+int __cdecl RAND_DRBG_set_ex_data(RAND_DRBG *drbg, int idx, void *arg)
 {
     return CRYPTO_set_ex_data(&drbg->ex_data, idx, arg);
 }
 
-void *RAND_DRBG_get_ex_data(const RAND_DRBG *drbg, int idx)
+void * __cdecl RAND_DRBG_get_ex_data(const RAND_DRBG *drbg, int idx)
 {
     return CRYPTO_get_ex_data(&drbg->ex_data, idx);
 }
@@ -960,7 +960,7 @@ void drbg_delete_thread_state(void)
 }
 
 /* Implements the default OpenSSL RAND_bytes() method */
-static int drbg_bytes(unsigned char *out, int count)
+static int __cdecl drbg_bytes(unsigned char *out, int count)
 {
     int ret;
     RAND_DRBG *drbg = RAND_DRBG_get0_public();
@@ -1010,7 +1010,7 @@ size_t rand_drbg_seedlen(RAND_DRBG *drbg)
 }
 
 /* Implements the default OpenSSL RAND_add() method */
-static int drbg_add(const void *buf, int num, double randomness)
+static int __cdecl drbg_add(const void *buf, int num, double randomness)
 {
     int ret = 0;
     RAND_DRBG *drbg = RAND_DRBG_get0_master();
@@ -1072,13 +1072,13 @@ static int drbg_add(const void *buf, int num, double randomness)
 }
 
 /* Implements the default OpenSSL RAND_seed() method */
-static int drbg_seed(const void *buf, int num)
+static int __cdecl drbg_seed(const void *buf, int num)
 {
     return drbg_add(buf, num, num);
 }
 
 /* Implements the default OpenSSL RAND_status() method */
-static int drbg_status(void)
+static int __cdecl drbg_status(void)
 {
     int ret;
     RAND_DRBG *drbg = RAND_DRBG_get0_master();
@@ -1097,7 +1097,7 @@ static int drbg_status(void)
  * Returns pointer to the DRBG on success, NULL on failure.
  *
  */
-RAND_DRBG *RAND_DRBG_get0_master(void)
+RAND_DRBG * __cdecl RAND_DRBG_get0_master(void)
 {
     if (!RUN_ONCE(&rand_drbg_init, do_rand_drbg_init))
         return NULL;
@@ -1109,7 +1109,7 @@ RAND_DRBG *RAND_DRBG_get0_master(void)
  * Get the public DRBG.
  * Returns pointer to the DRBG on success, NULL on failure.
  */
-RAND_DRBG *RAND_DRBG_get0_public(void)
+RAND_DRBG * __cdecl RAND_DRBG_get0_public(void)
 {
     RAND_DRBG *drbg;
 
@@ -1130,7 +1130,7 @@ RAND_DRBG *RAND_DRBG_get0_public(void)
  * Get the private DRBG.
  * Returns pointer to the DRBG on success, NULL on failure.
  */
-RAND_DRBG *RAND_DRBG_get0_private(void)
+RAND_DRBG * __cdecl RAND_DRBG_get0_private(void)
 {
     RAND_DRBG *drbg;
 
@@ -1156,7 +1156,7 @@ RAND_METHOD rand_meth = {
     drbg_status
 };
 
-RAND_METHOD *RAND_OpenSSL(void)
+RAND_METHOD * __cdecl RAND_OpenSSL(void)
 {
     return &rand_meth;
 }
diff --git a/crypto/rand/rand_egd.c b/crypto/rand/rand_egd.c
index da3017df31..7448defedc 100644
--- a/crypto/rand/rand_egd.c
+++ b/crypto/rand/rand_egd.c
@@ -21,17 +21,17 @@ NON_EMPTY_TRANSLATION_UNIT
  */
 
 # if defined(OPENSSL_SYS_WIN32) || defined(OPENSSL_SYS_VMS) || defined(OPENSSL_SYS_MSDOS) || defined(OPENSSL_SYS_VXWORKS) || defined(OPENSSL_SYS_VOS) || defined(OPENSSL_SYS_UEFI)
-int RAND_query_egd_bytes(const char *path, unsigned char *buf, int bytes)
+int __cdecl RAND_query_egd_bytes(const char *path, unsigned char *buf, int bytes)
 {
     return -1;
 }
 
-int RAND_egd(const char *path)
+int __cdecl RAND_egd(const char *path)
 {
     return -1;
 }
 
-int RAND_egd_bytes(const char *path, int bytes)
+int __cdecl RAND_egd_bytes(const char *path, int bytes)
 {
     return -1;
 }
diff --git a/crypto/rand/rand_err.c b/crypto/rand/rand_err.c
index ae4d8559fb..2a49c878d1 100644
--- a/crypto/rand/rand_err.c
+++ b/crypto/rand/rand_err.c
@@ -124,7 +124,7 @@ static const ERR_STRING_DATA RAND_str_reasons[] = {
 
 #endif
 
-int ERR_load_RAND_strings(void)
+int __cdecl ERR_load_RAND_strings(void)
 {
 #ifndef OPENSSL_NO_ERR
     if (ERR_func_error_string(RAND_str_functs[0].error) == NULL) {
diff --git a/crypto/rand/rand_lcl.h b/crypto/rand/rand_lcl.h
index 306c59f6ef..6374a36c8a 100644
--- a/crypto/rand/rand_lcl.h
+++ b/crypto/rand/rand_lcl.h
@@ -99,7 +99,7 @@ typedef enum drbg_status_e {
 
 
 /* instantiate */
-typedef int (*RAND_DRBG_instantiate_fn)(RAND_DRBG *ctx,
+typedef int (__cdecl *RAND_DRBG_instantiate_fn)(RAND_DRBG *ctx,
                                         const unsigned char *ent,
                                         size_t entlen,
                                         const unsigned char *nonce,
@@ -107,19 +107,19 @@ typedef int (*RAND_DRBG_instantiate_fn)(RAND_DRBG *ctx,
                                         const unsigned char *pers,
                                         size_t perslen);
 /* reseed */
-typedef int (*RAND_DRBG_reseed_fn)(RAND_DRBG *ctx,
+typedef int (__cdecl *RAND_DRBG_reseed_fn)(RAND_DRBG *ctx,
                                    const unsigned char *ent,
                                    size_t entlen,
                                    const unsigned char *adin,
                                    size_t adinlen);
 /* generate output */
-typedef int (*RAND_DRBG_generate_fn)(RAND_DRBG *ctx,
+typedef int (__cdecl *RAND_DRBG_generate_fn)(RAND_DRBG *ctx,
                                      unsigned char *out,
                                      size_t outlen,
                                      const unsigned char *adin,
                                      size_t adinlen);
 /* uninstantiate */
-typedef int (*RAND_DRBG_uninstantiate_fn)(RAND_DRBG *ctx);
+typedef int (__cdecl *RAND_DRBG_uninstantiate_fn)(RAND_DRBG *ctx);
 
 
 /*
diff --git a/crypto/rand/rand_lib.c b/crypto/rand/rand_lib.c
index 91b2652311..1c0ad1450d 100644
--- a/crypto/rand/rand_lib.c
+++ b/crypto/rand/rand_lib.c
@@ -365,7 +365,7 @@ void rand_cleanup_int(void)
  * RAND_close_seed_files() ensures that any seed file descriptors are
  * closed after use.
  */
-void RAND_keep_random_devices_open(int keep)
+void __cdecl RAND_keep_random_devices_open(int keep)
 {
     if (RUN_ONCE(&rand_init, do_rand_init))
         rand_pool_keep_random_devices_open(keep);
@@ -378,7 +378,7 @@ void RAND_keep_random_devices_open(int keep)
  * sources which depend on the operating system and are
  * configurable via the --with-rand-seed configure option.
  */
-int RAND_poll(void)
+int __cdecl RAND_poll(void)
 {
     int ret = 0;
 
@@ -821,7 +821,7 @@ int rand_pool_add_end(RAND_POOL *pool, size_t len, size_t entropy)
     return 1;
 }
 
-int RAND_set_rand_method(const RAND_METHOD *meth)
+int __cdecl RAND_set_rand_method(const RAND_METHOD *meth)
 {
     if (!RUN_ONCE(&rand_init, do_rand_init))
         return 0;
@@ -836,7 +836,7 @@ int RAND_set_rand_method(const RAND_METHOD *meth)
     return 1;
 }
 
-const RAND_METHOD *RAND_get_rand_method(void)
+const RAND_METHOD * __cdecl RAND_get_rand_method(void)
 {
     const RAND_METHOD *tmp_meth = NULL;
 
@@ -867,7 +867,7 @@ const RAND_METHOD *RAND_get_rand_method(void)
 }
 
 #ifndef OPENSSL_NO_ENGINE
-int RAND_set_rand_engine(ENGINE *engine)
+int __cdecl RAND_set_rand_engine(ENGINE *engine)
 {
     const RAND_METHOD *tmp_meth = NULL;
 
@@ -892,7 +892,7 @@ int RAND_set_rand_engine(ENGINE *engine)
 }
 #endif
 
-void RAND_seed(const void *buf, int num)
+void __cdecl RAND_seed(const void *buf, int num)
 {
     const RAND_METHOD *meth = RAND_get_rand_method();
 
@@ -900,7 +900,7 @@ void RAND_seed(const void *buf, int num)
         meth->seed(buf, num);
 }
 
-void RAND_add(const void *buf, int num, double randomness)
+void __cdecl RAND_add(const void *buf, int num, double randomness)
 {
     const RAND_METHOD *meth = RAND_get_rand_method();
 
@@ -913,7 +913,7 @@ void RAND_add(const void *buf, int num, double randomness)
  * the default method, then just call RAND_bytes().  Otherwise make
  * sure we're instantiated and use the private DRBG.
  */
-int RAND_priv_bytes(unsigned char *buf, int num)
+int __cdecl RAND_priv_bytes(unsigned char *buf, int num)
 {
     const RAND_METHOD *meth = RAND_get_rand_method();
     RAND_DRBG *drbg;
@@ -930,7 +930,7 @@ int RAND_priv_bytes(unsigned char *buf, int num)
     return ret;
 }
 
-int RAND_bytes(unsigned char *buf, int num)
+int __cdecl RAND_bytes(unsigned char *buf, int num)
 {
     const RAND_METHOD *meth = RAND_get_rand_method();
 
@@ -951,7 +951,7 @@ int RAND_pseudo_bytes(unsigned char *buf, int num)
 }
 #endif
 
-int RAND_status(void)
+int __cdecl RAND_status(void)
 {
     const RAND_METHOD *meth = RAND_get_rand_method();
 
diff --git a/crypto/rand/randfile.c b/crypto/rand/randfile.c
index ba121eefbf..76c459f1ff 100644
--- a/crypto/rand/randfile.c
+++ b/crypto/rand/randfile.c
@@ -73,7 +73,7 @@ static __FILE_ptr32 (*const vms_fopen)(const char *, const char *, ...) =
  * devices and EGD sockets are handled in rand_unix.c  If |bytes| is
  * -1 read the complete file; otherwise read the specified amount.
  */
-int RAND_load_file(const char *file, long bytes)
+int __cdecl RAND_load_file(const char *file, long bytes)
 {
     /*
      * The load buffer size exceeds the chunk size by the comfortable amount
@@ -171,7 +171,7 @@ int RAND_load_file(const char *file, long bytes)
     return ret;
 }
 
-int RAND_write_file(const char *file)
+int __cdecl RAND_write_file(const char *file)
 {
     unsigned char buf[RAND_BUF_SIZE];
     int ret = -1;
@@ -248,7 +248,7 @@ int RAND_write_file(const char *file)
     return ret;
 }
 
-const char *RAND_file_name(char *buf, size_t size)
+const char * __cdecl RAND_file_name(char *buf, size_t size)
 {
     char *s = NULL;
     size_t len;
diff --git a/crypto/rc2/rc2_cbc.c b/crypto/rc2/rc2_cbc.c
index 2b59353b11..d89785771d 100644
--- a/crypto/rc2/rc2_cbc.c
+++ b/crypto/rc2/rc2_cbc.c
@@ -10,7 +10,7 @@
 #include <openssl/rc2.h>
 #include "rc2_locl.h"
 
-void RC2_cbc_encrypt(const unsigned char *in, unsigned char *out, long length,
+void __cdecl RC2_cbc_encrypt(const unsigned char *in, unsigned char *out, long length,
                      RC2_KEY *ks, unsigned char *iv, int encrypt)
 {
     register unsigned long tin0, tin1;
@@ -85,7 +85,7 @@ void RC2_cbc_encrypt(const unsigned char *in, unsigned char *out, long length,
     tin[0] = tin[1] = 0;
 }
 
-void RC2_encrypt(unsigned long *d, RC2_KEY *key)
+void __cdecl RC2_encrypt(unsigned long *d, RC2_KEY *key)
 {
     int i, n;
     register RC2_INT *p0, *p1;
@@ -131,7 +131,7 @@ void RC2_encrypt(unsigned long *d, RC2_KEY *key)
         (unsigned long)(x2 & 0xffff) | ((unsigned long)(x3 & 0xffff) << 16L);
 }
 
-void RC2_decrypt(unsigned long *d, RC2_KEY *key)
+void __cdecl RC2_decrypt(unsigned long *d, RC2_KEY *key)
 {
     int i, n;
     register RC2_INT *p0, *p1;
diff --git a/crypto/rc2/rc2_ecb.c b/crypto/rc2/rc2_ecb.c
index fb2f78273d..d42b31d9c9 100644
--- a/crypto/rc2/rc2_ecb.c
+++ b/crypto/rc2/rc2_ecb.c
@@ -19,7 +19,7 @@
  * Date: 11 Feb 1996 06:45:03 GMT
  */
 
-void RC2_ecb_encrypt(const unsigned char *in, unsigned char *out, RC2_KEY *ks,
+void __cdecl RC2_ecb_encrypt(const unsigned char *in, unsigned char *out, RC2_KEY *ks,
                      int encrypt)
 {
     unsigned long l, d[2];
diff --git a/crypto/rc2/rc2_skey.c b/crypto/rc2/rc2_skey.c
index 55d8ba3715..17ac484f61 100644
--- a/crypto/rc2/rc2_skey.c
+++ b/crypto/rc2/rc2_skey.c
@@ -46,7 +46,7 @@ static const unsigned char key_table[256] = {
  * shipped is the same as specifying 1024 for the 'bits' parameter.  Bsafe
  * uses a version where the bits parameter is the same as len*8
  */
-void RC2_set_key(RC2_KEY *key, int len, const unsigned char *data, int bits)
+void __cdecl RC2_set_key(RC2_KEY *key, int len, const unsigned char *data, int bits)
 {
     int i, j;
     unsigned char *k;
diff --git a/crypto/rc2/rc2cfb64.c b/crypto/rc2/rc2cfb64.c
index e11093db9e..9d62c21a5a 100644
--- a/crypto/rc2/rc2cfb64.c
+++ b/crypto/rc2/rc2cfb64.c
@@ -16,7 +16,7 @@
  * used is contained in *num;
  */
 
-void RC2_cfb64_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl RC2_cfb64_encrypt(const unsigned char *in, unsigned char *out,
                        long length, RC2_KEY *schedule, unsigned char *ivec,
                        int *num, int encrypt)
 {
diff --git a/crypto/rc2/rc2ofb64.c b/crypto/rc2/rc2ofb64.c
index d610278a9b..0ebfa5c7be 100644
--- a/crypto/rc2/rc2ofb64.c
+++ b/crypto/rc2/rc2ofb64.c
@@ -15,7 +15,7 @@
  * The extra state information to record how much of the 64bit block we have
  * used is contained in *num;
  */
-void RC2_ofb64_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl RC2_ofb64_encrypt(const unsigned char *in, unsigned char *out,
                        long length, RC2_KEY *schedule, unsigned char *ivec,
                        int *num)
 {
diff --git a/crypto/rc4/rc4_enc.c b/crypto/rc4/rc4_enc.c
index 638a75bb06..b96019d306 100644
--- a/crypto/rc4/rc4_enc.c
+++ b/crypto/rc4/rc4_enc.c
@@ -18,7 +18,7 @@
  * Date: Wed, 14 Sep 1994 06:35:31 GMT
  */
 
-void RC4(RC4_KEY *key, size_t len, const unsigned char *indata,
+void __cdecl RC4(RC4_KEY *key, size_t len, const unsigned char *indata,
          unsigned char *outdata)
 {
     register RC4_INT *d;
diff --git a/crypto/rc4/rc4_skey.c b/crypto/rc4/rc4_skey.c
index e9007331eb..b29857d666 100644
--- a/crypto/rc4/rc4_skey.c
+++ b/crypto/rc4/rc4_skey.c
@@ -11,7 +11,7 @@
 #include "rc4_locl.h"
 #include <openssl/opensslv.h>
 
-const char *RC4_options(void)
+const char * __cdecl RC4_options(void)
 {
     if (sizeof(RC4_INT) == 1)
         return "rc4(char)";
@@ -27,7 +27,7 @@ const char *RC4_options(void)
  * Date: Wed, 14 Sep 1994 06:35:31 GMT
  */
 
-void RC4_set_key(RC4_KEY *key, int len, const unsigned char *data)
+void __cdecl RC4_set_key(RC4_KEY *key, int len, const unsigned char *data)
 {
     register RC4_INT tmp;
     register int id1, id2;
diff --git a/crypto/rc5/rc5_ecb.c b/crypto/rc5/rc5_ecb.c
index c32f38e473..c6d89dd43f 100644
--- a/crypto/rc5/rc5_ecb.c
+++ b/crypto/rc5/rc5_ecb.c
@@ -11,7 +11,7 @@
 #include "rc5_locl.h"
 #include <openssl/opensslv.h>
 
-void RC5_32_ecb_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl RC5_32_ecb_encrypt(const unsigned char *in, unsigned char *out,
                         RC5_32_KEY *ks, int encrypt)
 {
     unsigned long l, d[2];
diff --git a/crypto/rc5/rc5_enc.c b/crypto/rc5/rc5_enc.c
index 58631dee20..ac97ed6654 100644
--- a/crypto/rc5/rc5_enc.c
+++ b/crypto/rc5/rc5_enc.c
@@ -11,7 +11,7 @@
 #include <openssl/rc5.h>
 #include "rc5_locl.h"
 
-void RC5_32_cbc_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl RC5_32_cbc_encrypt(const unsigned char *in, unsigned char *out,
                         long length, RC5_32_KEY *ks, unsigned char *iv,
                         int encrypt)
 {
@@ -87,7 +87,7 @@ void RC5_32_cbc_encrypt(const unsigned char *in, unsigned char *out,
     tin[0] = tin[1] = 0;
 }
 
-void RC5_32_encrypt(unsigned long *d, RC5_32_KEY *key)
+void __cdecl RC5_32_encrypt(unsigned long *d, RC5_32_KEY *key)
 {
     RC5_32_INT a, b, *s;
 
@@ -123,7 +123,7 @@ void RC5_32_encrypt(unsigned long *d, RC5_32_KEY *key)
     d[1] = b;
 }
 
-void RC5_32_decrypt(unsigned long *d, RC5_32_KEY *key)
+void __cdecl RC5_32_decrypt(unsigned long *d, RC5_32_KEY *key)
 {
     RC5_32_INT a, b, *s;
 
diff --git a/crypto/rc5/rc5_skey.c b/crypto/rc5/rc5_skey.c
index 943a7849bb..2ae7334db4 100644
--- a/crypto/rc5/rc5_skey.c
+++ b/crypto/rc5/rc5_skey.c
@@ -10,7 +10,7 @@
 #include <openssl/rc5.h>
 #include "rc5_locl.h"
 
-void RC5_32_set_key(RC5_32_KEY *key, int len, const unsigned char *data,
+void __cdecl RC5_32_set_key(RC5_32_KEY *key, int len, const unsigned char *data,
                     int rounds)
 {
     RC5_32_INT L[64], l, ll, A, B, *S, k;
diff --git a/crypto/rc5/rc5cfb64.c b/crypto/rc5/rc5cfb64.c
index 9a8aa6b244..8dd843d9b7 100644
--- a/crypto/rc5/rc5cfb64.c
+++ b/crypto/rc5/rc5cfb64.c
@@ -16,7 +16,7 @@
  * used is contained in *num;
  */
 
-void RC5_32_cfb64_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl RC5_32_cfb64_encrypt(const unsigned char *in, unsigned char *out,
                           long length, RC5_32_KEY *schedule,
                           unsigned char *ivec, int *num, int encrypt)
 {
diff --git a/crypto/rc5/rc5ofb64.c b/crypto/rc5/rc5ofb64.c
index 3a41d773cb..3d938502f6 100644
--- a/crypto/rc5/rc5ofb64.c
+++ b/crypto/rc5/rc5ofb64.c
@@ -15,7 +15,7 @@
  * The extra state information to record how much of the 64bit block we have
  * used is contained in *num;
  */
-void RC5_32_ofb64_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl RC5_32_ofb64_encrypt(const unsigned char *in, unsigned char *out,
                           long length, RC5_32_KEY *schedule,
                           unsigned char *ivec, int *num)
 {
diff --git a/crypto/ripemd/rmd_dgst.c b/crypto/ripemd/rmd_dgst.c
index a1670c7fbd..f8b6a834f5 100644
--- a/crypto/ripemd/rmd_dgst.c
+++ b/crypto/ripemd/rmd_dgst.c
@@ -18,7 +18,7 @@ void ripemd160_block_x86(RIPEMD160_CTX *c, unsigned long *p, size_t num);
 void ripemd160_block(RIPEMD160_CTX *c, unsigned long *p, size_t num);
 #endif
 
-int RIPEMD160_Init(RIPEMD160_CTX *c)
+int __cdecl RIPEMD160_Init(RIPEMD160_CTX *c)
 {
     memset(c, 0, sizeof(*c));
     c->A = RIPEMD160_A;
diff --git a/crypto/ripemd/rmd_one.c b/crypto/ripemd/rmd_one.c
index cc01f15c7f..66b00d79d1 100644
--- a/crypto/ripemd/rmd_one.c
+++ b/crypto/ripemd/rmd_one.c
@@ -12,7 +12,7 @@
 #include <openssl/ripemd.h>
 #include <openssl/crypto.h>
 
-unsigned char *RIPEMD160(const unsigned char *d, size_t n, unsigned char *md)
+unsigned char * __cdecl RIPEMD160(const unsigned char *d, size_t n, unsigned char *md)
 {
     RIPEMD160_CTX c;
     static unsigned char m[RIPEMD160_DIGEST_LENGTH];
diff --git a/crypto/rsa/rsa_ameth.c b/crypto/rsa/rsa_ameth.c
index 9dcb85d837..00f8c68c7c 100644
--- a/crypto/rsa/rsa_ameth.c
+++ b/crypto/rsa/rsa_ameth.c
@@ -18,16 +18,16 @@
 #include "rsa_locl.h"
 
 #ifndef OPENSSL_NO_CMS
-static int rsa_cms_sign(CMS_SignerInfo *si);
-static int rsa_cms_verify(CMS_SignerInfo *si);
-static int rsa_cms_decrypt(CMS_RecipientInfo *ri);
-static int rsa_cms_encrypt(CMS_RecipientInfo *ri);
+static int __cdecl rsa_cms_sign(CMS_SignerInfo *si);
+static int __cdecl rsa_cms_verify(CMS_SignerInfo *si);
+static int __cdecl rsa_cms_decrypt(CMS_RecipientInfo *ri);
+static int __cdecl rsa_cms_encrypt(CMS_RecipientInfo *ri);
 #endif
 
 static RSA_PSS_PARAMS *rsa_pss_decode(const X509_ALGOR *alg);
 
 /* Set any parameters associated with pkey */
-static int rsa_param_encode(const EVP_PKEY *pkey,
+static int __cdecl rsa_param_encode(const EVP_PKEY *pkey,
                             ASN1_STRING **pstr, int *pstrtype)
 {
     const RSA *rsa = pkey->pkey.rsa;
@@ -51,7 +51,7 @@ static int rsa_param_encode(const EVP_PKEY *pkey,
     return 1;
 }
 /* Decode any parameters and set them in RSA structure */
-static int rsa_param_decode(RSA *rsa, const X509_ALGOR *alg)
+static int __cdecl rsa_param_decode(RSA *rsa, const X509_ALGOR *alg)
 {
     const ASN1_OBJECT *algoid;
     const void *algp;
@@ -72,7 +72,7 @@ static int rsa_param_decode(RSA *rsa, const X509_ALGOR *alg)
     return 1;
 }
 
-static int rsa_pub_encode(X509_PUBKEY *pk, const EVP_PKEY *pkey)
+static int __cdecl rsa_pub_encode(X509_PUBKEY *pk, const EVP_PKEY *pkey)
 {
     unsigned char *penc = NULL;
     int penclen;
@@ -92,7 +92,7 @@ static int rsa_pub_encode(X509_PUBKEY *pk, const EVP_PKEY *pkey)
     return 0;
 }
 
-static int rsa_pub_decode(EVP_PKEY *pkey, X509_PUBKEY *pubkey)
+static int __cdecl rsa_pub_decode(EVP_PKEY *pkey, X509_PUBKEY *pubkey)
 {
     const unsigned char *p;
     int pklen;
@@ -116,7 +116,7 @@ static int rsa_pub_decode(EVP_PKEY *pkey, X509_PUBKEY *pubkey)
     return 1;
 }
 
-static int rsa_pub_cmp(const EVP_PKEY *a, const EVP_PKEY *b)
+static int __cdecl rsa_pub_cmp(const EVP_PKEY *a, const EVP_PKEY *b)
 {
     if (BN_cmp(b->pkey.rsa->n, a->pkey.rsa->n) != 0
         || BN_cmp(b->pkey.rsa->e, a->pkey.rsa->e) != 0)
@@ -124,7 +124,7 @@ static int rsa_pub_cmp(const EVP_PKEY *a, const EVP_PKEY *b)
     return 1;
 }
 
-static int old_rsa_priv_decode(EVP_PKEY *pkey,
+static int __cdecl old_rsa_priv_decode(EVP_PKEY *pkey,
                                const unsigned char **pder, int derlen)
 {
     RSA *rsa;
@@ -137,12 +137,12 @@ static int old_rsa_priv_decode(EVP_PKEY *pkey,
     return 1;
 }
 
-static int old_rsa_priv_encode(const EVP_PKEY *pkey, unsigned char **pder)
+static int __cdecl old_rsa_priv_encode(const EVP_PKEY *pkey, unsigned char **pder)
 {
     return i2d_RSAPrivateKey(pkey->pkey.rsa, pder);
 }
 
-static int rsa_priv_encode(PKCS8_PRIV_KEY_INFO *p8, const EVP_PKEY *pkey)
+static int __cdecl rsa_priv_encode(PKCS8_PRIV_KEY_INFO *p8, const EVP_PKEY *pkey)
 {
     unsigned char *rk = NULL;
     int rklen;
@@ -169,7 +169,7 @@ static int rsa_priv_encode(PKCS8_PRIV_KEY_INFO *p8, const EVP_PKEY *pkey)
     return 1;
 }
 
-static int rsa_priv_decode(EVP_PKEY *pkey, const PKCS8_PRIV_KEY_INFO *p8)
+static int __cdecl rsa_priv_decode(EVP_PKEY *pkey, const PKCS8_PRIV_KEY_INFO *p8)
 {
     const unsigned char *p;
     RSA *rsa;
@@ -191,22 +191,22 @@ static int rsa_priv_decode(EVP_PKEY *pkey, const PKCS8_PRIV_KEY_INFO *p8)
     return 1;
 }
 
-static int int_rsa_size(const EVP_PKEY *pkey)
+static int __cdecl int_rsa_size(const EVP_PKEY *pkey)
 {
     return RSA_size(pkey->pkey.rsa);
 }
 
-static int rsa_bits(const EVP_PKEY *pkey)
+static int __cdecl rsa_bits(const EVP_PKEY *pkey)
 {
     return BN_num_bits(pkey->pkey.rsa->n);
 }
 
-static int rsa_security_bits(const EVP_PKEY *pkey)
+static int __cdecl rsa_security_bits(const EVP_PKEY *pkey)
 {
     return RSA_security_bits(pkey->pkey.rsa);
 }
 
-static void int_rsa_free(EVP_PKEY *pkey)
+static void __cdecl int_rsa_free(EVP_PKEY *pkey)
 {
     RSA_free(pkey->pkey.rsa);
 }
@@ -219,7 +219,7 @@ static X509_ALGOR *rsa_mgf1_decode(X509_ALGOR *alg)
                                      alg->parameter);
 }
 
-static int rsa_pss_param_print(BIO *bp, int pss_key, RSA_PSS_PARAMS *pss,
+static int __cdecl rsa_pss_param_print(BIO *bp, int pss_key, RSA_PSS_PARAMS *pss,
                                int indent)
 {
     int rv = 0;
@@ -314,7 +314,7 @@ static int rsa_pss_param_print(BIO *bp, int pss_key, RSA_PSS_PARAMS *pss,
 
 }
 
-static int pkey_rsa_print(BIO *bp, const EVP_PKEY *pkey, int off, int priv)
+static int __cdecl pkey_rsa_print(BIO *bp, const EVP_PKEY *pkey, int off, int priv)
 {
     const RSA *x = pkey->pkey.rsa;
     char *str;
@@ -403,13 +403,13 @@ static int pkey_rsa_print(BIO *bp, const EVP_PKEY *pkey, int off, int priv)
     return ret;
 }
 
-static int rsa_pub_print(BIO *bp, const EVP_PKEY *pkey, int indent,
+static int __cdecl rsa_pub_print(BIO *bp, const EVP_PKEY *pkey, int indent,
                          ASN1_PCTX *ctx)
 {
     return pkey_rsa_print(bp, pkey, indent, 0);
 }
 
-static int rsa_priv_print(BIO *bp, const EVP_PKEY *pkey, int indent,
+static int __cdecl rsa_priv_print(BIO *bp, const EVP_PKEY *pkey, int indent,
                           ASN1_PCTX *ctx)
 {
     return pkey_rsa_print(bp, pkey, indent, 1);
@@ -436,7 +436,7 @@ static RSA_PSS_PARAMS *rsa_pss_decode(const X509_ALGOR *alg)
     return pss;
 }
 
-static int rsa_sig_print(BIO *bp, const X509_ALGOR *sigalg,
+static int __cdecl rsa_sig_print(BIO *bp, const X509_ALGOR *sigalg,
                          const ASN1_STRING *sig, int indent, ASN1_PCTX *pctx)
 {
     if (OBJ_obj2nid(sigalg->algorithm) == EVP_PKEY_RSA_PSS) {
@@ -455,7 +455,7 @@ static int rsa_sig_print(BIO *bp, const X509_ALGOR *sigalg,
     return 1;
 }
 
-static int rsa_pkey_ctrl(EVP_PKEY *pkey, int op, long arg1, void *arg2)
+static int __cdecl rsa_pkey_ctrl(EVP_PKEY *pkey, int op, long arg1, void *arg2)
 {
     X509_ALGOR *alg = NULL;
     const EVP_MD *md;
@@ -526,7 +526,7 @@ static int rsa_pkey_ctrl(EVP_PKEY *pkey, int op, long arg1, void *arg2)
 }
 
 /* allocate and set algorithm ID from EVP_MD, default SHA1 */
-static int rsa_md_to_algor(X509_ALGOR **palg, const EVP_MD *md)
+static int __cdecl rsa_md_to_algor(X509_ALGOR **palg, const EVP_MD *md)
 {
     if (md == NULL || EVP_MD_type(md) == NID_sha1)
         return 1;
@@ -538,7 +538,7 @@ static int rsa_md_to_algor(X509_ALGOR **palg, const EVP_MD *md)
 }
 
 /* Allocate and set MGF1 algorithm ID from EVP_MD */
-static int rsa_md_to_mgf1(X509_ALGOR **palg, const EVP_MD *mgf1md)
+static int __cdecl rsa_md_to_mgf1(X509_ALGOR **palg, const EVP_MD *mgf1md)
 {
     X509_ALGOR *algtmp = NULL;
     ASN1_STRING *stmp = NULL;
@@ -654,7 +654,7 @@ static ASN1_STRING *rsa_ctx_to_pss_string(EVP_PKEY_CTX *pkctx)
  * passed to pkctx instead.
  */
 
-static int rsa_pss_to_ctx(EVP_MD_CTX *ctx, EVP_PKEY_CTX *pkctx,
+static int __cdecl rsa_pss_to_ctx(EVP_MD_CTX *ctx, EVP_PKEY_CTX *pkctx,
                           X509_ALGOR *sigalg, EVP_PKEY *pkey)
 {
     int rv = -1;
@@ -739,7 +739,7 @@ int rsa_pss_get_param(const RSA_PSS_PARAMS *pss, const EVP_MD **pmd,
 }
 
 #ifndef OPENSSL_NO_CMS
-static int rsa_cms_verify(CMS_SignerInfo *si)
+static int __cdecl rsa_cms_verify(CMS_SignerInfo *si)
 {
     int nid, nid2;
     X509_ALGOR *alg;
@@ -770,7 +770,7 @@ static int rsa_cms_verify(CMS_SignerInfo *si)
  * is encountered requiring special handling. We currently only handle PSS.
  */
 
-static int rsa_item_verify(EVP_MD_CTX *ctx, const ASN1_ITEM *it, void *asn,
+static int __cdecl rsa_item_verify(EVP_MD_CTX *ctx, const ASN1_ITEM *it, void *asn,
                            X509_ALGOR *sigalg, ASN1_BIT_STRING *sig,
                            EVP_PKEY *pkey)
 {
@@ -787,7 +787,7 @@ static int rsa_item_verify(EVP_MD_CTX *ctx, const ASN1_ITEM *it, void *asn,
 }
 
 #ifndef OPENSSL_NO_CMS
-static int rsa_cms_sign(CMS_SignerInfo *si)
+static int __cdecl rsa_cms_sign(CMS_SignerInfo *si)
 {
     int pad_mode = RSA_PKCS1_PADDING;
     X509_ALGOR *alg;
@@ -814,7 +814,7 @@ static int rsa_cms_sign(CMS_SignerInfo *si)
 }
 #endif
 
-static int rsa_item_sign(EVP_MD_CTX *ctx, const ASN1_ITEM *it, void *asn,
+static int __cdecl rsa_item_sign(EVP_MD_CTX *ctx, const ASN1_ITEM *it, void *asn,
                          X509_ALGOR *alg1, X509_ALGOR *alg2,
                          ASN1_BIT_STRING *sig)
 {
@@ -847,7 +847,7 @@ static int rsa_item_sign(EVP_MD_CTX *ctx, const ASN1_ITEM *it, void *asn,
     return 2;
 }
 
-static int rsa_sig_info_set(X509_SIG_INFO *siginf, const X509_ALGOR *sigalg,
+static int __cdecl rsa_sig_info_set(X509_SIG_INFO *siginf, const X509_ALGOR *sigalg,
                             const ASN1_STRING *sig)
 {
     int rv = 0;
@@ -903,7 +903,7 @@ static RSA_OAEP_PARAMS *rsa_oaep_decode(const X509_ALGOR *alg)
     return oaep;
 }
 
-static int rsa_cms_decrypt(CMS_RecipientInfo *ri)
+static int __cdecl rsa_cms_decrypt(CMS_RecipientInfo *ri)
 {
     EVP_PKEY_CTX *pkctx;
     X509_ALGOR *cmsalg;
@@ -975,7 +975,7 @@ static int rsa_cms_decrypt(CMS_RecipientInfo *ri)
     return rv;
 }
 
-static int rsa_cms_encrypt(CMS_RecipientInfo *ri)
+static int __cdecl rsa_cms_encrypt(CMS_RecipientInfo *ri)
 {
     const EVP_MD *md, *mgf1md;
     RSA_OAEP_PARAMS *oaep = NULL;
@@ -1040,7 +1040,7 @@ static int rsa_cms_encrypt(CMS_RecipientInfo *ri)
 }
 #endif
 
-static int rsa_pkey_check(const EVP_PKEY *pkey)
+static int __cdecl rsa_pkey_check(const EVP_PKEY *pkey)
 {
     return RSA_check_key_ex(pkey->pkey.rsa, NULL);
 }
diff --git a/crypto/rsa/rsa_asn1.c b/crypto/rsa/rsa_asn1.c
index 9fe62c82eb..2a8b05bb95 100644
--- a/crypto/rsa/rsa_asn1.c
+++ b/crypto/rsa/rsa_asn1.c
@@ -110,12 +110,12 @@ IMPLEMENT_ASN1_ENCODE_FUNCTIONS_const_fname(RSA, RSAPrivateKey, RSAPrivateKey)
 
 IMPLEMENT_ASN1_ENCODE_FUNCTIONS_const_fname(RSA, RSAPublicKey, RSAPublicKey)
 
-RSA *RSAPublicKey_dup(RSA *rsa)
+RSA * __cdecl RSAPublicKey_dup(RSA *rsa)
 {
     return ASN1_item_dup(ASN1_ITEM_rptr(RSAPublicKey), rsa);
 }
 
-RSA *RSAPrivateKey_dup(RSA *rsa)
+RSA * __cdecl RSAPrivateKey_dup(RSA *rsa)
 {
     return ASN1_item_dup(ASN1_ITEM_rptr(RSAPrivateKey), rsa);
 }
diff --git a/crypto/rsa/rsa_chk.c b/crypto/rsa/rsa_chk.c
index 1b69be30ca..19f26164d4 100644
--- a/crypto/rsa/rsa_chk.c
+++ b/crypto/rsa/rsa_chk.c
@@ -11,12 +11,12 @@
 #include <openssl/err.h>
 #include "rsa_locl.h"
 
-int RSA_check_key(const RSA *key)
+int __cdecl RSA_check_key(const RSA *key)
 {
     return RSA_check_key_ex(key, NULL);
 }
 
-int RSA_check_key_ex(const RSA *key, BN_GENCB *cb)
+int __cdecl RSA_check_key_ex(const RSA *key, BN_GENCB *cb)
 {
     BIGNUM *i, *j, *k, *l, *m;
     BN_CTX *ctx;
diff --git a/crypto/rsa/rsa_crpt.c b/crypto/rsa/rsa_crpt.c
index f4ef8b4381..0627f24a62 100644
--- a/crypto/rsa/rsa_crpt.c
+++ b/crypto/rsa/rsa_crpt.c
@@ -14,46 +14,46 @@
 #include <openssl/rand.h>
 #include "rsa_locl.h"
 
-int RSA_bits(const RSA *r)
+int __cdecl RSA_bits(const RSA *r)
 {
     return BN_num_bits(r->n);
 }
 
-int RSA_size(const RSA *r)
+int __cdecl RSA_size(const RSA *r)
 {
     return BN_num_bytes(r->n);
 }
 
-int RSA_public_encrypt(int flen, const unsigned char *from, unsigned char *to,
+int __cdecl RSA_public_encrypt(int flen, const unsigned char *from, unsigned char *to,
                        RSA *rsa, int padding)
 {
     return rsa->meth->rsa_pub_enc(flen, from, to, rsa, padding);
 }
 
-int RSA_private_encrypt(int flen, const unsigned char *from,
+int __cdecl RSA_private_encrypt(int flen, const unsigned char *from,
                         unsigned char *to, RSA *rsa, int padding)
 {
     return rsa->meth->rsa_priv_enc(flen, from, to, rsa, padding);
 }
 
-int RSA_private_decrypt(int flen, const unsigned char *from,
+int __cdecl RSA_private_decrypt(int flen, const unsigned char *from,
                         unsigned char *to, RSA *rsa, int padding)
 {
     return rsa->meth->rsa_priv_dec(flen, from, to, rsa, padding);
 }
 
-int RSA_public_decrypt(int flen, const unsigned char *from, unsigned char *to,
+int __cdecl RSA_public_decrypt(int flen, const unsigned char *from, unsigned char *to,
                        RSA *rsa, int padding)
 {
     return rsa->meth->rsa_pub_dec(flen, from, to, rsa, padding);
 }
 
-int RSA_flags(const RSA *r)
+int __cdecl RSA_flags(const RSA *r)
 {
     return r == NULL ? 0 : r->meth->flags;
 }
 
-void RSA_blinding_off(RSA *rsa)
+void __cdecl RSA_blinding_off(RSA *rsa)
 {
     BN_BLINDING_free(rsa->blinding);
     rsa->blinding = NULL;
@@ -61,7 +61,7 @@ void RSA_blinding_off(RSA *rsa)
     rsa->flags |= RSA_FLAG_NO_BLINDING;
 }
 
-int RSA_blinding_on(RSA *rsa, BN_CTX *ctx)
+int __cdecl RSA_blinding_on(RSA *rsa, BN_CTX *ctx)
 {
     int ret = 0;
 
@@ -107,7 +107,7 @@ static BIGNUM *rsa_get_public_exp(const BIGNUM *d, const BIGNUM *p,
     return ret;
 }
 
-BN_BLINDING *RSA_setup_blinding(RSA *rsa, BN_CTX *in_ctx)
+BN_BLINDING * __cdecl RSA_setup_blinding(RSA *rsa, BN_CTX *in_ctx)
 {
     BIGNUM *e;
     BN_CTX *ctx;
diff --git a/crypto/rsa/rsa_depr.c b/crypto/rsa/rsa_depr.c
index 21e0562525..b21d2f0069 100644
--- a/crypto/rsa/rsa_depr.c
+++ b/crypto/rsa/rsa_depr.c
@@ -25,7 +25,7 @@ NON_EMPTY_TRANSLATION_UNIT
 # include <openssl/rsa.h>
 
 RSA *RSA_generate_key(int bits, unsigned long e_value,
-                      void (*callback) (int, int, void *), void *cb_arg)
+                      void (__cdecl *callback) (int, int, void *), void *cb_arg)
 {
     int i;
     BN_GENCB *cb = BN_GENCB_new();
diff --git a/crypto/rsa/rsa_err.c b/crypto/rsa/rsa_err.c
index 0687c1e626..56ba2df054 100644
--- a/crypto/rsa/rsa_err.c
+++ b/crypto/rsa/rsa_err.c
@@ -236,7 +236,7 @@ static const ERR_STRING_DATA RSA_str_reasons[] = {
 
 #endif
 
-int ERR_load_RSA_strings(void)
+int __cdecl ERR_load_RSA_strings(void)
 {
 #ifndef OPENSSL_NO_ERR
     if (ERR_func_error_string(RSA_str_functs[0].error) == NULL) {
diff --git a/crypto/rsa/rsa_gen.c b/crypto/rsa/rsa_gen.c
index 2b81808860..72c7fadf61 100644
--- a/crypto/rsa/rsa_gen.c
+++ b/crypto/rsa/rsa_gen.c
@@ -29,7 +29,7 @@ static int rsa_builtin_keygen(RSA *rsa, int bits, int primes, BIGNUM *e_value,
  * that wasn't previously linking object code related to key-generation won't
  * have to now just because key-generation is part of RSA_METHOD.
  */
-int RSA_generate_key_ex(RSA *rsa, int bits, BIGNUM *e_value, BN_GENCB *cb)
+int __cdecl RSA_generate_key_ex(RSA *rsa, int bits, BIGNUM *e_value, BN_GENCB *cb)
 {
     if (rsa->meth->rsa_keygen != NULL)
         return rsa->meth->rsa_keygen(rsa, bits, e_value, cb);
@@ -38,7 +38,7 @@ int RSA_generate_key_ex(RSA *rsa, int bits, BIGNUM *e_value, BN_GENCB *cb)
                                         e_value, cb);
 }
 
-int RSA_generate_multi_prime_key(RSA *rsa, int bits, int primes,
+int __cdecl RSA_generate_multi_prime_key(RSA *rsa, int bits, int primes,
                                  BIGNUM *e_value, BN_GENCB *cb)
 {
     /* multi-prime is only supported with the builtin key generation */
diff --git a/crypto/rsa/rsa_lib.c b/crypto/rsa/rsa_lib.c
index e737a28898..ac6da91279 100644
--- a/crypto/rsa/rsa_lib.c
+++ b/crypto/rsa/rsa_lib.c
@@ -17,17 +17,17 @@
 #include "internal/evp_int.h"
 #include "rsa_locl.h"
 
-RSA *RSA_new(void)
+RSA * __cdecl RSA_new(void)
 {
     return RSA_new_method(NULL);
 }
 
-const RSA_METHOD *RSA_get_method(const RSA *rsa)
+const RSA_METHOD * __cdecl RSA_get_method(const RSA *rsa)
 {
     return rsa->meth;
 }
 
-int RSA_set_method(RSA *rsa, const RSA_METHOD *meth)
+int __cdecl RSA_set_method(RSA *rsa, const RSA_METHOD *meth)
 {
     /*
      * NB: The caller is specifically setting a method, so it's not up to us
@@ -47,7 +47,7 @@ int RSA_set_method(RSA *rsa, const RSA_METHOD *meth)
     return 1;
 }
 
-RSA *RSA_new_method(ENGINE *engine)
+RSA * __cdecl RSA_new_method(ENGINE *engine)
 {
     RSA *ret = OPENSSL_zalloc(sizeof(*ret));
 
@@ -102,7 +102,7 @@ RSA *RSA_new_method(ENGINE *engine)
     return NULL;
 }
 
-void RSA_free(RSA *r)
+void __cdecl RSA_free(RSA *r)
 {
     int i;
 
@@ -141,7 +141,7 @@ void RSA_free(RSA *r)
     OPENSSL_free(r);
 }
 
-int RSA_up_ref(RSA *r)
+int __cdecl RSA_up_ref(RSA *r)
 {
     int i;
 
@@ -153,17 +153,17 @@ int RSA_up_ref(RSA *r)
     return i > 1 ? 1 : 0;
 }
 
-int RSA_set_ex_data(RSA *r, int idx, void *arg)
+int __cdecl RSA_set_ex_data(RSA *r, int idx, void *arg)
 {
     return CRYPTO_set_ex_data(&r->ex_data, idx, arg);
 }
 
-void *RSA_get_ex_data(const RSA *r, int idx)
+void * __cdecl RSA_get_ex_data(const RSA *r, int idx)
 {
     return CRYPTO_get_ex_data(&r->ex_data, idx);
 }
 
-int RSA_security_bits(const RSA *rsa)
+int __cdecl RSA_security_bits(const RSA *rsa)
 {
     int bits = BN_num_bits(rsa->n);
 
@@ -177,7 +177,7 @@ int RSA_security_bits(const RSA *rsa)
     return BN_security_bits(bits, -1);
 }
 
-int RSA_set0_key(RSA *r, BIGNUM *n, BIGNUM *e, BIGNUM *d)
+int __cdecl RSA_set0_key(RSA *r, BIGNUM *n, BIGNUM *e, BIGNUM *d)
 {
     /* If the fields n and e in r are NULL, the corresponding input
      * parameters MUST be non-NULL for n and e.  d may be
@@ -204,7 +204,7 @@ int RSA_set0_key(RSA *r, BIGNUM *n, BIGNUM *e, BIGNUM *d)
     return 1;
 }
 
-int RSA_set0_factors(RSA *r, BIGNUM *p, BIGNUM *q)
+int __cdecl RSA_set0_factors(RSA *r, BIGNUM *p, BIGNUM *q)
 {
     /* If the fields p and q in r are NULL, the corresponding input
      * parameters MUST be non-NULL.
@@ -227,7 +227,7 @@ int RSA_set0_factors(RSA *r, BIGNUM *p, BIGNUM *q)
     return 1;
 }
 
-int RSA_set0_crt_params(RSA *r, BIGNUM *dmp1, BIGNUM *dmq1, BIGNUM *iqmp)
+int __cdecl RSA_set0_crt_params(RSA *r, BIGNUM *dmp1, BIGNUM *dmq1, BIGNUM *iqmp)
 {
     /* If the fields dmp1, dmq1 and iqmp in r are NULL, the corresponding input
      * parameters MUST be non-NULL.
@@ -260,7 +260,7 @@ int RSA_set0_crt_params(RSA *r, BIGNUM *dmp1, BIGNUM *dmq1, BIGNUM *iqmp)
  * Is it better to export RSA_PRIME_INFO structure
  * and related functions to let user pass a triplet?
  */
-int RSA_set0_multi_prime_params(RSA *r, BIGNUM *primes[], BIGNUM *exps[],
+int __cdecl RSA_set0_multi_prime_params(RSA *r, BIGNUM *primes[], BIGNUM *exps[],
                                 BIGNUM *coeffs[], int pnum)
 {
     STACK_OF(RSA_PRIME_INFO) *prime_infos, *old = NULL;
@@ -324,7 +324,7 @@ int RSA_set0_multi_prime_params(RSA *r, BIGNUM *primes[], BIGNUM *exps[],
     return 0;
 }
 
-void RSA_get0_key(const RSA *r,
+void __cdecl RSA_get0_key(const RSA *r,
                   const BIGNUM **n, const BIGNUM **e, const BIGNUM **d)
 {
     if (n != NULL)
@@ -335,7 +335,7 @@ void RSA_get0_key(const RSA *r,
         *d = r->d;
 }
 
-void RSA_get0_factors(const RSA *r, const BIGNUM **p, const BIGNUM **q)
+void __cdecl RSA_get0_factors(const RSA *r, const BIGNUM **p, const BIGNUM **q)
 {
     if (p != NULL)
         *p = r->p;
@@ -343,7 +343,7 @@ void RSA_get0_factors(const RSA *r, const BIGNUM **p, const BIGNUM **q)
         *q = r->q;
 }
 
-int RSA_get_multi_prime_extra_count(const RSA *r)
+int __cdecl RSA_get_multi_prime_extra_count(const RSA *r)
 {
     int pnum;
 
@@ -353,7 +353,7 @@ int RSA_get_multi_prime_extra_count(const RSA *r)
     return pnum;
 }
 
-int RSA_get0_multi_prime_factors(const RSA *r, const BIGNUM *primes[])
+int __cdecl RSA_get0_multi_prime_factors(const RSA *r, const BIGNUM *primes[])
 {
     int pnum, i;
     RSA_PRIME_INFO *pinfo;
@@ -373,7 +373,7 @@ int RSA_get0_multi_prime_factors(const RSA *r, const BIGNUM *primes[])
     return 1;
 }
 
-void RSA_get0_crt_params(const RSA *r,
+void __cdecl RSA_get0_crt_params(const RSA *r,
                          const BIGNUM **dmp1, const BIGNUM **dmq1,
                          const BIGNUM **iqmp)
 {
@@ -385,7 +385,7 @@ void RSA_get0_crt_params(const RSA *r,
         *iqmp = r->iqmp;
 }
 
-int RSA_get0_multi_prime_crt_params(const RSA *r, const BIGNUM *exps[],
+int __cdecl RSA_get0_multi_prime_crt_params(const RSA *r, const BIGNUM *exps[],
                                     const BIGNUM *coeffs[])
 {
     int pnum;
@@ -411,73 +411,73 @@ int RSA_get0_multi_prime_crt_params(const RSA *r, const BIGNUM *exps[],
     return 1;
 }
 
-const BIGNUM *RSA_get0_n(const RSA *r)
+const BIGNUM * __cdecl RSA_get0_n(const RSA *r)
 {
     return r->n;
 }
 
-const BIGNUM *RSA_get0_e(const RSA *r)
+const BIGNUM * __cdecl RSA_get0_e(const RSA *r)
 {
     return r->e;
 }
 
-const BIGNUM *RSA_get0_d(const RSA *r)
+const BIGNUM * __cdecl RSA_get0_d(const RSA *r)
 {
     return r->d;
 }
 
-const BIGNUM *RSA_get0_p(const RSA *r)
+const BIGNUM * __cdecl RSA_get0_p(const RSA *r)
 {
     return r->p;
 }
 
-const BIGNUM *RSA_get0_q(const RSA *r)
+const BIGNUM * __cdecl RSA_get0_q(const RSA *r)
 {
     return r->q;
 }
 
-const BIGNUM *RSA_get0_dmp1(const RSA *r)
+const BIGNUM * __cdecl RSA_get0_dmp1(const RSA *r)
 {
     return r->dmp1;
 }
 
-const BIGNUM *RSA_get0_dmq1(const RSA *r)
+const BIGNUM * __cdecl RSA_get0_dmq1(const RSA *r)
 {
     return r->dmq1;
 }
 
-const BIGNUM *RSA_get0_iqmp(const RSA *r)
+const BIGNUM * __cdecl RSA_get0_iqmp(const RSA *r)
 {
     return r->iqmp;
 }
 
-void RSA_clear_flags(RSA *r, int flags)
+void __cdecl RSA_clear_flags(RSA *r, int flags)
 {
     r->flags &= ~flags;
 }
 
-int RSA_test_flags(const RSA *r, int flags)
+int __cdecl RSA_test_flags(const RSA *r, int flags)
 {
     return r->flags & flags;
 }
 
-void RSA_set_flags(RSA *r, int flags)
+void __cdecl RSA_set_flags(RSA *r, int flags)
 {
     r->flags |= flags;
 }
 
-int RSA_get_version(RSA *r)
+int __cdecl RSA_get_version(RSA *r)
 {
     /* { two-prime(0), multi(1) } */
     return r->version;
 }
 
-ENGINE *RSA_get0_engine(const RSA *r)
+ENGINE * __cdecl RSA_get0_engine(const RSA *r)
 {
     return r->engine;
 }
 
-int RSA_pkey_ctx_ctrl(EVP_PKEY_CTX *ctx, int optype, int cmd, int p1, void *p2)
+int __cdecl RSA_pkey_ctx_ctrl(EVP_PKEY_CTX *ctx, int optype, int cmd, int p1, void *p2)
 {
     /* If key type not RSA or RSA-PSS return error */
     if (ctx != NULL && ctx->pmeth != NULL
diff --git a/crypto/rsa/rsa_locl.h b/crypto/rsa/rsa_locl.h
index 2b94462a94..6cedbac835 100644
--- a/crypto/rsa/rsa_locl.h
+++ b/crypto/rsa/rsa_locl.h
@@ -67,23 +67,23 @@ struct rsa_st {
 
 struct rsa_meth_st {
     char *name;
-    int (*rsa_pub_enc) (int flen, const unsigned char *from,
+    int (__cdecl *rsa_pub_enc) (int flen, const unsigned char *from,
                         unsigned char *to, RSA *rsa, int padding);
-    int (*rsa_pub_dec) (int flen, const unsigned char *from,
+    int (__cdecl *rsa_pub_dec) (int flen, const unsigned char *from,
                         unsigned char *to, RSA *rsa, int padding);
-    int (*rsa_priv_enc) (int flen, const unsigned char *from,
+    int (__cdecl *rsa_priv_enc) (int flen, const unsigned char *from,
                          unsigned char *to, RSA *rsa, int padding);
-    int (*rsa_priv_dec) (int flen, const unsigned char *from,
+    int (__cdecl *rsa_priv_dec) (int flen, const unsigned char *from,
                          unsigned char *to, RSA *rsa, int padding);
     /* Can be null */
-    int (*rsa_mod_exp) (BIGNUM *r0, const BIGNUM *I, RSA *rsa, BN_CTX *ctx);
+    int (__cdecl *rsa_mod_exp) (BIGNUM *r0, const BIGNUM *I, RSA *rsa, BN_CTX *ctx);
     /* Can be null */
-    int (*bn_mod_exp) (BIGNUM *r, const BIGNUM *a, const BIGNUM *p,
+    int (__cdecl *bn_mod_exp) (BIGNUM *r, const BIGNUM *a, const BIGNUM *p,
                        const BIGNUM *m, BN_CTX *ctx, BN_MONT_CTX *m_ctx);
     /* called at new */
-    int (*init) (RSA *rsa);
+    int (__cdecl *init) (RSA *rsa);
     /* called at free */
-    int (*finish) (RSA *rsa);
+    int (__cdecl *finish) (RSA *rsa);
     /* RSA_METHOD_FLAG_* things */
     int flags;
     /* may be needed! */
@@ -94,11 +94,11 @@ struct rsa_meth_st {
      * this to work the RSA_public_decrypt() and RSA_private_encrypt() should
      * *NOT* be used RSA_sign(), RSA_verify() should be used instead.
      */
-    int (*rsa_sign) (int type,
+    int (__cdecl *rsa_sign) (int type,
                      const unsigned char *m, unsigned int m_length,
                      unsigned char *sigret, unsigned int *siglen,
                      const RSA *rsa);
-    int (*rsa_verify) (int dtype, const unsigned char *m,
+    int (__cdecl *rsa_verify) (int dtype, const unsigned char *m,
                        unsigned int m_length, const unsigned char *sigbuf,
                        unsigned int siglen, const RSA *rsa);
     /*
@@ -107,8 +107,8 @@ struct rsa_meth_st {
      * rewired, but one day it would be nice to assume there are no such
      * things as "builtin software" implementations.
      */
-    int (*rsa_keygen) (RSA *rsa, int bits, BIGNUM *e, BN_GENCB *cb);
-    int (*rsa_multi_prime_keygen) (RSA *rsa, int bits, int primes,
+    int (__cdecl *rsa_keygen) (RSA *rsa, int bits, BIGNUM *e, BN_GENCB *cb);
+    int (__cdecl *rsa_multi_prime_keygen) (RSA *rsa, int bits, int primes,
                                    BIGNUM *e, BN_GENCB *cb);
 };
 
@@ -125,8 +125,8 @@ RSA_PSS_PARAMS *rsa_pss_params_create(const EVP_MD *sigmd,
 int rsa_pss_get_param(const RSA_PSS_PARAMS *pss, const EVP_MD **pmd,
                       const EVP_MD **pmgf1md, int *psaltlen);
 /* internal function to clear and free multi-prime parameters */
-void rsa_multip_info_free_ex(RSA_PRIME_INFO *pinfo);
-void rsa_multip_info_free(RSA_PRIME_INFO *pinfo);
+void __cdecl rsa_multip_info_free_ex(RSA_PRIME_INFO *pinfo);
+void __cdecl rsa_multip_info_free(RSA_PRIME_INFO *pinfo);
 RSA_PRIME_INFO *rsa_multip_info_new(void);
 int rsa_multip_calc_product(RSA *rsa);
 int rsa_multip_cap(int bits);
diff --git a/crypto/rsa/rsa_meth.c b/crypto/rsa/rsa_meth.c
index def19f375f..2f4d322293 100644
--- a/crypto/rsa/rsa_meth.c
+++ b/crypto/rsa/rsa_meth.c
@@ -11,7 +11,7 @@
 #include "rsa_locl.h"
 #include <openssl/err.h>
 
-RSA_METHOD *RSA_meth_new(const char *name, int flags)
+RSA_METHOD * __cdecl RSA_meth_new(const char *name, int flags)
 {
     RSA_METHOD *meth = OPENSSL_zalloc(sizeof(*meth));
 
@@ -29,7 +29,7 @@ RSA_METHOD *RSA_meth_new(const char *name, int flags)
     return NULL;
 }
 
-void RSA_meth_free(RSA_METHOD *meth)
+void __cdecl RSA_meth_free(RSA_METHOD *meth)
 {
     if (meth != NULL) {
         OPENSSL_free(meth->name);
@@ -37,7 +37,7 @@ void RSA_meth_free(RSA_METHOD *meth)
     }
 }
 
-RSA_METHOD *RSA_meth_dup(const RSA_METHOD *meth)
+RSA_METHOD * __cdecl RSA_meth_dup(const RSA_METHOD *meth)
 {
     RSA_METHOD *ret = OPENSSL_malloc(sizeof(*ret));
 
@@ -55,12 +55,12 @@ RSA_METHOD *RSA_meth_dup(const RSA_METHOD *meth)
     return NULL;
 }
 
-const char *RSA_meth_get0_name(const RSA_METHOD *meth)
+const char * __cdecl RSA_meth_get0_name(const RSA_METHOD *meth)
 {
     return meth->name;
 }
 
-int RSA_meth_set1_name(RSA_METHOD *meth, const char *name)
+int __cdecl RSA_meth_set1_name(RSA_METHOD *meth, const char *name)
 {
     char *tmpname = OPENSSL_strdup(name);
 
@@ -75,37 +75,37 @@ int RSA_meth_set1_name(RSA_METHOD *meth, const char *name)
     return 1;
 }
 
-int RSA_meth_get_flags(const RSA_METHOD *meth)
+int __cdecl RSA_meth_get_flags(const RSA_METHOD *meth)
 {
     return meth->flags;
 }
 
-int RSA_meth_set_flags(RSA_METHOD *meth, int flags)
+int __cdecl RSA_meth_set_flags(RSA_METHOD *meth, int flags)
 {
     meth->flags = flags;
     return 1;
 }
 
-void *RSA_meth_get0_app_data(const RSA_METHOD *meth)
+void * __cdecl RSA_meth_get0_app_data(const RSA_METHOD *meth)
 {
     return meth->app_data;
 }
 
-int RSA_meth_set0_app_data(RSA_METHOD *meth, void *app_data)
+int __cdecl RSA_meth_set0_app_data(RSA_METHOD *meth, void *app_data)
 {
     meth->app_data = app_data;
     return 1;
 }
 
-int (*RSA_meth_get_pub_enc(const RSA_METHOD *meth))
+int (__cdecl *RSA_meth_get_pub_enc(const RSA_METHOD *meth))
     (int flen, const unsigned char *from,
      unsigned char *to, RSA *rsa, int padding)
 {
     return meth->rsa_pub_enc;
 }
 
-int RSA_meth_set_pub_enc(RSA_METHOD *meth,
-                         int (*pub_enc) (int flen, const unsigned char *from,
+int __cdecl RSA_meth_set_pub_enc(RSA_METHOD *meth,
+                         int (__cdecl *pub_enc) (int flen, const unsigned char *from,
                                          unsigned char *to, RSA *rsa,
                                          int padding))
 {
@@ -113,15 +113,15 @@ int RSA_meth_set_pub_enc(RSA_METHOD *meth,
     return 1;
 }
 
-int (*RSA_meth_get_pub_dec(const RSA_METHOD *meth))
+int (__cdecl *RSA_meth_get_pub_dec(const RSA_METHOD *meth))
     (int flen, const unsigned char *from,
      unsigned char *to, RSA *rsa, int padding)
 {
     return meth->rsa_pub_dec;
 }
 
-int RSA_meth_set_pub_dec(RSA_METHOD *meth,
-                         int (*pub_dec) (int flen, const unsigned char *from,
+int __cdecl RSA_meth_set_pub_dec(RSA_METHOD *meth,
+                         int (__cdecl *pub_dec) (int flen, const unsigned char *from,
                                          unsigned char *to, RSA *rsa,
                                          int padding))
 {
@@ -129,15 +129,15 @@ int RSA_meth_set_pub_dec(RSA_METHOD *meth,
     return 1;
 }
 
-int (*RSA_meth_get_priv_enc(const RSA_METHOD *meth))
+int (__cdecl *RSA_meth_get_priv_enc(const RSA_METHOD *meth))
     (int flen, const unsigned char *from,
      unsigned char *to, RSA *rsa, int padding)
 {
     return meth->rsa_priv_enc;
 }
 
-int RSA_meth_set_priv_enc(RSA_METHOD *meth,
-                          int (*priv_enc) (int flen, const unsigned char *from,
+int __cdecl RSA_meth_set_priv_enc(RSA_METHOD *meth,
+                          int (__cdecl *priv_enc) (int flen, const unsigned char *from,
                                            unsigned char *to, RSA *rsa,
                                            int padding))
 {
@@ -145,15 +145,15 @@ int RSA_meth_set_priv_enc(RSA_METHOD *meth,
     return 1;
 }
 
-int (*RSA_meth_get_priv_dec(const RSA_METHOD *meth))
+int (__cdecl *RSA_meth_get_priv_dec(const RSA_METHOD *meth))
     (int flen, const unsigned char *from,
      unsigned char *to, RSA *rsa, int padding)
 {
     return meth->rsa_priv_dec;
 }
 
-int RSA_meth_set_priv_dec(RSA_METHOD *meth,
-                          int (*priv_dec) (int flen, const unsigned char *from,
+int __cdecl RSA_meth_set_priv_dec(RSA_METHOD *meth,
+                          int (__cdecl *priv_dec) (int flen, const unsigned char *from,
                                            unsigned char *to, RSA *rsa,
                                            int padding))
 {
@@ -162,14 +162,14 @@ int RSA_meth_set_priv_dec(RSA_METHOD *meth,
 }
 
     /* Can be null */
-int (*RSA_meth_get_mod_exp(const RSA_METHOD *meth))
+int (__cdecl *RSA_meth_get_mod_exp(const RSA_METHOD *meth))
     (BIGNUM *r0, const BIGNUM *i, RSA *rsa, BN_CTX *ctx)
 {
     return meth->rsa_mod_exp;
 }
 
-int RSA_meth_set_mod_exp(RSA_METHOD *meth,
-                         int (*mod_exp) (BIGNUM *r0, const BIGNUM *i, RSA *rsa,
+int __cdecl RSA_meth_set_mod_exp(RSA_METHOD *meth,
+                         int (__cdecl *mod_exp) (BIGNUM *r0, const BIGNUM *i, RSA *rsa,
                                          BN_CTX *ctx))
 {
     meth->rsa_mod_exp = mod_exp;
@@ -177,15 +177,15 @@ int RSA_meth_set_mod_exp(RSA_METHOD *meth,
 }
 
     /* Can be null */
-int (*RSA_meth_get_bn_mod_exp(const RSA_METHOD *meth))
+int (__cdecl *RSA_meth_get_bn_mod_exp(const RSA_METHOD *meth))
     (BIGNUM *r, const BIGNUM *a, const BIGNUM *p,
      const BIGNUM *m, BN_CTX *ctx, BN_MONT_CTX *m_ctx)
 {
     return meth->bn_mod_exp;
 }
 
-int RSA_meth_set_bn_mod_exp(RSA_METHOD *meth,
-                            int (*bn_mod_exp) (BIGNUM *r,
+int __cdecl RSA_meth_set_bn_mod_exp(RSA_METHOD *meth,
+                            int (__cdecl *bn_mod_exp) (BIGNUM *r,
                                                const BIGNUM *a,
                                                const BIGNUM *p,
                                                const BIGNUM *m,
@@ -197,30 +197,30 @@ int RSA_meth_set_bn_mod_exp(RSA_METHOD *meth,
 }
 
     /* called at new */
-int (*RSA_meth_get_init(const RSA_METHOD *meth)) (RSA *rsa)
+int (__cdecl *RSA_meth_get_init(const RSA_METHOD *meth)) (RSA *rsa)
 {
     return meth->init;
 }
 
-int RSA_meth_set_init(RSA_METHOD *meth, int (*init) (RSA *rsa))
+int __cdecl RSA_meth_set_init(RSA_METHOD *meth, int (__cdecl *init) (RSA *rsa))
 {
     meth->init = init;
     return 1;
 }
 
     /* called at free */
-int (*RSA_meth_get_finish(const RSA_METHOD *meth)) (RSA *rsa)
+int (__cdecl *RSA_meth_get_finish(const RSA_METHOD *meth)) (RSA *rsa)
 {
     return meth->finish;
 }
 
-int RSA_meth_set_finish(RSA_METHOD *meth, int (*finish) (RSA *rsa))
+int __cdecl RSA_meth_set_finish(RSA_METHOD *meth, int (__cdecl *finish) (RSA *rsa))
 {
     meth->finish = finish;
     return 1;
 }
 
-int (*RSA_meth_get_sign(const RSA_METHOD *meth))
+int (__cdecl *RSA_meth_get_sign(const RSA_METHOD *meth))
     (int type,
      const unsigned char *m, unsigned int m_length,
      unsigned char *sigret, unsigned int *siglen,
@@ -229,8 +229,8 @@ int (*RSA_meth_get_sign(const RSA_METHOD *meth))
     return meth->rsa_sign;
 }
 
-int RSA_meth_set_sign(RSA_METHOD *meth,
-                      int (*sign) (int type, const unsigned char *m,
+int __cdecl RSA_meth_set_sign(RSA_METHOD *meth,
+                      int (__cdecl *sign) (int type, const unsigned char *m,
                                    unsigned int m_length,
                                    unsigned char *sigret, unsigned int *siglen,
                                    const RSA *rsa))
@@ -239,7 +239,7 @@ int RSA_meth_set_sign(RSA_METHOD *meth,
     return 1;
 }
 
-int (*RSA_meth_get_verify(const RSA_METHOD *meth))
+int (__cdecl *RSA_meth_get_verify(const RSA_METHOD *meth))
     (int dtype, const unsigned char *m,
      unsigned int m_length, const unsigned char *sigbuf,
      unsigned int siglen, const RSA *rsa)
@@ -247,8 +247,8 @@ int (*RSA_meth_get_verify(const RSA_METHOD *meth))
     return meth->rsa_verify;
 }
 
-int RSA_meth_set_verify(RSA_METHOD *meth,
-                        int (*verify) (int dtype, const unsigned char *m,
+int __cdecl RSA_meth_set_verify(RSA_METHOD *meth,
+                        int (__cdecl *verify) (int dtype, const unsigned char *m,
                                        unsigned int m_length,
                                        const unsigned char *sigbuf,
                                        unsigned int siglen, const RSA *rsa))
@@ -257,28 +257,28 @@ int RSA_meth_set_verify(RSA_METHOD *meth,
     return 1;
 }
 
-int (*RSA_meth_get_keygen(const RSA_METHOD *meth))
+int (__cdecl *RSA_meth_get_keygen(const RSA_METHOD *meth))
     (RSA *rsa, int bits, BIGNUM *e, BN_GENCB *cb)
 {
     return meth->rsa_keygen;
 }
 
-int RSA_meth_set_keygen(RSA_METHOD *meth,
-                        int (*keygen) (RSA *rsa, int bits, BIGNUM *e,
+int __cdecl RSA_meth_set_keygen(RSA_METHOD *meth,
+                        int (__cdecl *keygen) (RSA *rsa, int bits, BIGNUM *e,
                                        BN_GENCB *cb))
 {
     meth->rsa_keygen = keygen;
     return 1;
 }
 
-int (*RSA_meth_get_multi_prime_keygen(const RSA_METHOD *meth))
+int (__cdecl *RSA_meth_get_multi_prime_keygen(const RSA_METHOD *meth))
     (RSA *rsa, int bits, int primes, BIGNUM *e, BN_GENCB *cb)
 {
     return meth->rsa_multi_prime_keygen;
 }
 
-int RSA_meth_set_multi_prime_keygen(RSA_METHOD *meth,
-                                    int (*keygen) (RSA *rsa, int bits,
+int __cdecl RSA_meth_set_multi_prime_keygen(RSA_METHOD *meth,
+                                    int (__cdecl *keygen) (RSA *rsa, int bits,
                                                    int primes, BIGNUM *e,
                                                    BN_GENCB *cb))
 {
diff --git a/crypto/rsa/rsa_mp.c b/crypto/rsa/rsa_mp.c
index e7e810823b..b8c7a7396c 100644
--- a/crypto/rsa/rsa_mp.c
+++ b/crypto/rsa/rsa_mp.c
@@ -12,14 +12,14 @@
 #include <openssl/err.h>
 #include "rsa_locl.h"
 
-void rsa_multip_info_free_ex(RSA_PRIME_INFO *pinfo)
+void __cdecl rsa_multip_info_free_ex(RSA_PRIME_INFO *pinfo)
 {
     /* free pp and pinfo only */
     BN_clear_free(pinfo->pp);
     OPENSSL_free(pinfo);
 }
 
-void rsa_multip_info_free(RSA_PRIME_INFO *pinfo)
+void __cdecl rsa_multip_info_free(RSA_PRIME_INFO *pinfo)
 {
     /* free a RSA_PRIME_INFO structure */
     BN_clear_free(pinfo->r);
diff --git a/crypto/rsa/rsa_none.c b/crypto/rsa/rsa_none.c
index f16cc67066..48f234447c 100644
--- a/crypto/rsa/rsa_none.c
+++ b/crypto/rsa/rsa_none.c
@@ -11,7 +11,7 @@
 #include <openssl/bn.h>
 #include <openssl/rsa.h>
 
-int RSA_padding_add_none(unsigned char *to, int tlen,
+int __cdecl RSA_padding_add_none(unsigned char *to, int tlen,
                          const unsigned char *from, int flen)
 {
     if (flen > tlen) {
@@ -28,7 +28,7 @@ int RSA_padding_add_none(unsigned char *to, int tlen,
     return 1;
 }
 
-int RSA_padding_check_none(unsigned char *to, int tlen,
+int __cdecl RSA_padding_check_none(unsigned char *to, int tlen,
                            const unsigned char *from, int flen, int num)
 {
 
diff --git a/crypto/rsa/rsa_oaep.c b/crypto/rsa/rsa_oaep.c
index 48b888bf27..d820603251 100644
--- a/crypto/rsa/rsa_oaep.c
+++ b/crypto/rsa/rsa_oaep.c
@@ -30,7 +30,7 @@
 #include <openssl/sha.h>
 #include "rsa_locl.h"
 
-int RSA_padding_add_PKCS1_OAEP(unsigned char *to, int tlen,
+int __cdecl RSA_padding_add_PKCS1_OAEP(unsigned char *to, int tlen,
                                const unsigned char *from, int flen,
                                const unsigned char *param, int plen)
 {
@@ -38,7 +38,7 @@ int RSA_padding_add_PKCS1_OAEP(unsigned char *to, int tlen,
                                            param, plen, NULL, NULL);
 }
 
-int RSA_padding_add_PKCS1_OAEP_mgf1(unsigned char *to, int tlen,
+int __cdecl RSA_padding_add_PKCS1_OAEP_mgf1(unsigned char *to, int tlen,
                                     const unsigned char *from, int flen,
                                     const unsigned char *param, int plen,
                                     const EVP_MD *md, const EVP_MD *mgf1md)
@@ -105,7 +105,7 @@ int RSA_padding_add_PKCS1_OAEP_mgf1(unsigned char *to, int tlen,
     return rv;
 }
 
-int RSA_padding_check_PKCS1_OAEP(unsigned char *to, int tlen,
+int __cdecl RSA_padding_check_PKCS1_OAEP(unsigned char *to, int tlen,
                                  const unsigned char *from, int flen, int num,
                                  const unsigned char *param, int plen)
 {
@@ -113,7 +113,7 @@ int RSA_padding_check_PKCS1_OAEP(unsigned char *to, int tlen,
                                              param, plen, NULL, NULL);
 }
 
-int RSA_padding_check_PKCS1_OAEP_mgf1(unsigned char *to, int tlen,
+int __cdecl RSA_padding_check_PKCS1_OAEP_mgf1(unsigned char *to, int tlen,
                                       const unsigned char *from, int flen,
                                       int num, const unsigned char *param,
                                       int plen, const EVP_MD *md,
@@ -270,7 +270,7 @@ int RSA_padding_check_PKCS1_OAEP_mgf1(unsigned char *to, int tlen,
     return constant_time_select_int(good, mlen, -1);
 }
 
-int PKCS1_MGF1(unsigned char *mask, long len,
+int __cdecl PKCS1_MGF1(unsigned char *mask, long len,
                const unsigned char *seed, long seedlen, const EVP_MD *dgst)
 {
     long i, outlen = 0;
diff --git a/crypto/rsa/rsa_ossl.c b/crypto/rsa/rsa_ossl.c
index c8c3b7886a..cfdf6fc078 100644
--- a/crypto/rsa/rsa_ossl.c
+++ b/crypto/rsa/rsa_ossl.c
@@ -12,18 +12,18 @@
 #include "rsa_locl.h"
 #include "internal/constant_time_locl.h"
 
-static int rsa_ossl_public_encrypt(int flen, const unsigned char *from,
+static int __cdecl rsa_ossl_public_encrypt(int flen, const unsigned char *from,
                                   unsigned char *to, RSA *rsa, int padding);
-static int rsa_ossl_private_encrypt(int flen, const unsigned char *from,
+static int __cdecl rsa_ossl_private_encrypt(int flen, const unsigned char *from,
                                    unsigned char *to, RSA *rsa, int padding);
-static int rsa_ossl_public_decrypt(int flen, const unsigned char *from,
+static int __cdecl rsa_ossl_public_decrypt(int flen, const unsigned char *from,
                                   unsigned char *to, RSA *rsa, int padding);
-static int rsa_ossl_private_decrypt(int flen, const unsigned char *from,
+static int __cdecl rsa_ossl_private_decrypt(int flen, const unsigned char *from,
                                    unsigned char *to, RSA *rsa, int padding);
-static int rsa_ossl_mod_exp(BIGNUM *r0, const BIGNUM *i, RSA *rsa,
+static int __cdecl rsa_ossl_mod_exp(BIGNUM *r0, const BIGNUM *i, RSA *rsa,
                            BN_CTX *ctx);
-static int rsa_ossl_init(RSA *rsa);
-static int rsa_ossl_finish(RSA *rsa);
+static int __cdecl rsa_ossl_init(RSA *rsa);
+static int __cdecl rsa_ossl_finish(RSA *rsa);
 static RSA_METHOD rsa_pkcs1_ossl_meth = {
     "OpenSSL PKCS#1 RSA",
     rsa_ossl_public_encrypt,
@@ -45,27 +45,27 @@ static RSA_METHOD rsa_pkcs1_ossl_meth = {
 
 static const RSA_METHOD *default_RSA_meth = &rsa_pkcs1_ossl_meth;
 
-void RSA_set_default_method(const RSA_METHOD *meth)
+void __cdecl RSA_set_default_method(const RSA_METHOD *meth)
 {
     default_RSA_meth = meth;
 }
 
-const RSA_METHOD *RSA_get_default_method(void)
+const RSA_METHOD * __cdecl RSA_get_default_method(void)
 {
     return default_RSA_meth;
 }
 
-const RSA_METHOD *RSA_PKCS1_OpenSSL(void)
+const RSA_METHOD * __cdecl RSA_PKCS1_OpenSSL(void)
 {
     return &rsa_pkcs1_ossl_meth;
 }
 
-const RSA_METHOD *RSA_null_method(void)
+const RSA_METHOD * __cdecl RSA_null_method(void)
 {
     return NULL;
 }
 
-static int rsa_ossl_public_encrypt(int flen, const unsigned char *from,
+static int __cdecl rsa_ossl_public_encrypt(int flen, const unsigned char *from,
                                   unsigned char *to, RSA *rsa, int padding)
 {
     BIGNUM *f, *ret;
@@ -230,7 +230,7 @@ static int rsa_blinding_invert(BN_BLINDING *b, BIGNUM *f, BIGNUM *unblind,
 }
 
 /* signing */
-static int rsa_ossl_private_encrypt(int flen, const unsigned char *from,
+static int __cdecl rsa_ossl_private_encrypt(int flen, const unsigned char *from,
                                    unsigned char *to, RSA *rsa, int padding)
 {
     BIGNUM *f, *ret, *res;
@@ -364,7 +364,7 @@ static int rsa_ossl_private_encrypt(int flen, const unsigned char *from,
     return r;
 }
 
-static int rsa_ossl_private_decrypt(int flen, const unsigned char *from,
+static int __cdecl rsa_ossl_private_decrypt(int flen, const unsigned char *from,
                                    unsigned char *to, RSA *rsa, int padding)
 {
     BIGNUM *f, *ret;
@@ -499,7 +499,7 @@ static int rsa_ossl_private_decrypt(int flen, const unsigned char *from,
 }
 
 /* signature verification */
-static int rsa_ossl_public_decrypt(int flen, const unsigned char *from,
+static int __cdecl rsa_ossl_public_decrypt(int flen, const unsigned char *from,
                                   unsigned char *to, RSA *rsa, int padding)
 {
     BIGNUM *f, *ret;
@@ -594,7 +594,7 @@ static int rsa_ossl_public_decrypt(int flen, const unsigned char *from,
     return r;
 }
 
-static int rsa_ossl_mod_exp(BIGNUM *r0, const BIGNUM *I, RSA *rsa, BN_CTX *ctx)
+static int __cdecl rsa_ossl_mod_exp(BIGNUM *r0, const BIGNUM *I, RSA *rsa, BN_CTX *ctx)
 {
     BIGNUM *r1, *m1, *vrfy, *r2, *m[RSA_MAX_PRIME_NUM - 2];
     int ret = 0, i, ex_primes = 0, smooth = 0;
@@ -954,13 +954,13 @@ static int rsa_ossl_mod_exp(BIGNUM *r0, const BIGNUM *I, RSA *rsa, BN_CTX *ctx)
     return ret;
 }
 
-static int rsa_ossl_init(RSA *rsa)
+static int __cdecl rsa_ossl_init(RSA *rsa)
 {
     rsa->flags |= RSA_FLAG_CACHE_PUBLIC | RSA_FLAG_CACHE_PRIVATE;
     return 1;
 }
 
-static int rsa_ossl_finish(RSA *rsa)
+static int __cdecl rsa_ossl_finish(RSA *rsa)
 {
     int i;
     RSA_PRIME_INFO *pinfo;
diff --git a/crypto/rsa/rsa_pk1.c b/crypto/rsa/rsa_pk1.c
index 5260d12f4c..16ebe629e7 100644
--- a/crypto/rsa/rsa_pk1.c
+++ b/crypto/rsa/rsa_pk1.c
@@ -15,7 +15,7 @@
 #include <openssl/rsa.h>
 #include <openssl/rand.h>
 
-int RSA_padding_add_PKCS1_type_1(unsigned char *to, int tlen,
+int __cdecl RSA_padding_add_PKCS1_type_1(unsigned char *to, int tlen,
                                  const unsigned char *from, int flen)
 {
     int j;
@@ -41,7 +41,7 @@ int RSA_padding_add_PKCS1_type_1(unsigned char *to, int tlen,
     return 1;
 }
 
-int RSA_padding_check_PKCS1_type_1(unsigned char *to, int tlen,
+int __cdecl RSA_padding_check_PKCS1_type_1(unsigned char *to, int tlen,
                                    const unsigned char *from, int flen,
                                    int num)
 {
@@ -114,7 +114,7 @@ int RSA_padding_check_PKCS1_type_1(unsigned char *to, int tlen,
     return j;
 }
 
-int RSA_padding_add_PKCS1_type_2(unsigned char *to, int tlen,
+int __cdecl RSA_padding_add_PKCS1_type_2(unsigned char *to, int tlen,
                                  const unsigned char *from, int flen)
 {
     int i, j;
@@ -151,7 +151,7 @@ int RSA_padding_add_PKCS1_type_2(unsigned char *to, int tlen,
     return 1;
 }
 
-int RSA_padding_check_PKCS1_type_2(unsigned char *to, int tlen,
+int __cdecl RSA_padding_check_PKCS1_type_2(unsigned char *to, int tlen,
                                    const unsigned char *from, int flen,
                                    int num)
 {
diff --git a/crypto/rsa/rsa_pmeth.c b/crypto/rsa/rsa_pmeth.c
index 082ab8fd8a..edc6b546c4 100644
--- a/crypto/rsa/rsa_pmeth.c
+++ b/crypto/rsa/rsa_pmeth.c
@@ -50,7 +50,7 @@ typedef struct {
 /* True if PSS parameters are restricted */
 #define rsa_pss_restricted(rctx) (rctx->min_saltlen != -1)
 
-static int pkey_rsa_init(EVP_PKEY_CTX *ctx)
+static int __cdecl pkey_rsa_init(EVP_PKEY_CTX *ctx)
 {
     RSA_PKEY_CTX *rctx = OPENSSL_zalloc(sizeof(*rctx));
 
@@ -72,7 +72,7 @@ static int pkey_rsa_init(EVP_PKEY_CTX *ctx)
     return 1;
 }
 
-static int pkey_rsa_copy(EVP_PKEY_CTX *dst, EVP_PKEY_CTX *src)
+static int __cdecl pkey_rsa_copy(EVP_PKEY_CTX *dst, EVP_PKEY_CTX *src)
 {
     RSA_PKEY_CTX *dctx, *sctx;
 
@@ -99,7 +99,7 @@ static int pkey_rsa_copy(EVP_PKEY_CTX *dst, EVP_PKEY_CTX *src)
     return 1;
 }
 
-static int setup_tbuf(RSA_PKEY_CTX *ctx, EVP_PKEY_CTX *pk)
+static int __cdecl setup_tbuf(RSA_PKEY_CTX *ctx, EVP_PKEY_CTX *pk)
 {
     if (ctx->tbuf != NULL)
         return 1;
@@ -110,7 +110,7 @@ static int setup_tbuf(RSA_PKEY_CTX *ctx, EVP_PKEY_CTX *pk)
     return 1;
 }
 
-static void pkey_rsa_cleanup(EVP_PKEY_CTX *ctx)
+static void __cdecl pkey_rsa_cleanup(EVP_PKEY_CTX *ctx)
 {
     RSA_PKEY_CTX *rctx = ctx->data;
     if (rctx) {
@@ -121,7 +121,7 @@ static void pkey_rsa_cleanup(EVP_PKEY_CTX *ctx)
     }
 }
 
-static int pkey_rsa_sign(EVP_PKEY_CTX *ctx, unsigned char *sig,
+static int __cdecl pkey_rsa_sign(EVP_PKEY_CTX *ctx, unsigned char *sig,
                          size_t *siglen, const unsigned char *tbs,
                          size_t tbslen)
 {
@@ -188,7 +188,7 @@ static int pkey_rsa_sign(EVP_PKEY_CTX *ctx, unsigned char *sig,
     return 1;
 }
 
-static int pkey_rsa_verifyrecover(EVP_PKEY_CTX *ctx,
+static int __cdecl pkey_rsa_verifyrecover(EVP_PKEY_CTX *ctx,
                                   unsigned char *rout, size_t *routlen,
                                   const unsigned char *sig, size_t siglen)
 {
@@ -238,7 +238,7 @@ static int pkey_rsa_verifyrecover(EVP_PKEY_CTX *ctx,
     return 1;
 }
 
-static int pkey_rsa_verify(EVP_PKEY_CTX *ctx,
+static int __cdecl pkey_rsa_verify(EVP_PKEY_CTX *ctx,
                            const unsigned char *sig, size_t siglen,
                            const unsigned char *tbs, size_t tbslen)
 {
@@ -290,7 +290,7 @@ static int pkey_rsa_verify(EVP_PKEY_CTX *ctx,
 
 }
 
-static int pkey_rsa_encrypt(EVP_PKEY_CTX *ctx,
+static int __cdecl pkey_rsa_encrypt(EVP_PKEY_CTX *ctx,
                             unsigned char *out, size_t *outlen,
                             const unsigned char *in, size_t inlen)
 {
@@ -319,7 +319,7 @@ static int pkey_rsa_encrypt(EVP_PKEY_CTX *ctx,
     return 1;
 }
 
-static int pkey_rsa_decrypt(EVP_PKEY_CTX *ctx,
+static int __cdecl pkey_rsa_decrypt(EVP_PKEY_CTX *ctx,
                             unsigned char *out, size_t *outlen,
                             const unsigned char *in, size_t inlen)
 {
@@ -347,7 +347,7 @@ static int pkey_rsa_decrypt(EVP_PKEY_CTX *ctx,
     return ret;
 }
 
-static int check_padding_md(const EVP_MD *md, int padding)
+static int __cdecl check_padding_md(const EVP_MD *md, int padding)
 {
     int mdnid;
 
@@ -396,7 +396,7 @@ static int check_padding_md(const EVP_MD *md, int padding)
     return 1;
 }
 
-static int pkey_rsa_ctrl(EVP_PKEY_CTX *ctx, int type, int p1, void *p2)
+static int __cdecl pkey_rsa_ctrl(EVP_PKEY_CTX *ctx, int type, int p1, void *p2)
 {
     RSA_PKEY_CTX *rctx = ctx->data;
 
@@ -586,7 +586,7 @@ static int pkey_rsa_ctrl(EVP_PKEY_CTX *ctx, int type, int p1, void *p2)
     }
 }
 
-static int pkey_rsa_ctrl_str(EVP_PKEY_CTX *ctx,
+static int __cdecl pkey_rsa_ctrl_str(EVP_PKEY_CTX *ctx,
                              const char *type, const char *value)
 {
     if (value == NULL) {
@@ -699,7 +699,7 @@ static int pkey_rsa_ctrl_str(EVP_PKEY_CTX *ctx,
 }
 
 /* Set PSS parameters when generating a key, if necessary */
-static int rsa_set_pss_param(RSA *rsa, EVP_PKEY_CTX *ctx)
+static int __cdecl rsa_set_pss_param(RSA *rsa, EVP_PKEY_CTX *ctx)
 {
     RSA_PKEY_CTX *rctx = ctx->data;
 
@@ -715,7 +715,7 @@ static int rsa_set_pss_param(RSA *rsa, EVP_PKEY_CTX *ctx)
     return 1;
 }
 
-static int pkey_rsa_keygen(EVP_PKEY_CTX *ctx, EVP_PKEY *pkey)
+static int __cdecl pkey_rsa_keygen(EVP_PKEY_CTX *ctx, EVP_PKEY *pkey)
 {
     RSA *rsa = NULL;
     RSA_PKEY_CTX *rctx = ctx->data;
@@ -794,7 +794,7 @@ const EVP_PKEY_METHOD rsa_pkey_meth = {
  * sanity and sets any restrictions on key usage.
  */
 
-static int pkey_pss_init(EVP_PKEY_CTX *ctx)
+static int __cdecl pkey_pss_init(EVP_PKEY_CTX *ctx)
 {
     RSA *rsa;
     RSA_PKEY_CTX *rctx = ctx->data;
diff --git a/crypto/rsa/rsa_prn.c b/crypto/rsa/rsa_prn.c
index b5f4bce2a3..0768f15a6f 100644
--- a/crypto/rsa/rsa_prn.c
+++ b/crypto/rsa/rsa_prn.c
@@ -13,7 +13,7 @@
 #include <openssl/evp.h>
 
 #ifndef OPENSSL_NO_STDIO
-int RSA_print_fp(FILE *fp, const RSA *x, int off)
+int __cdecl RSA_print_fp(FILE *fp, const RSA *x, int off)
 {
     BIO *b;
     int ret;
@@ -29,7 +29,7 @@ int RSA_print_fp(FILE *fp, const RSA *x, int off)
 }
 #endif
 
-int RSA_print(BIO *bp, const RSA *x, int off)
+int __cdecl RSA_print(BIO *bp, const RSA *x, int off)
 {
     EVP_PKEY *pk;
     int ret;
diff --git a/crypto/rsa/rsa_pss.c b/crypto/rsa/rsa_pss.c
index f7c575d00a..3705014c3c 100644
--- a/crypto/rsa/rsa_pss.c
+++ b/crypto/rsa/rsa_pss.c
@@ -22,14 +22,14 @@ static const unsigned char zeroes[] = { 0, 0, 0, 0, 0, 0, 0, 0 };
 # pragma optimize("g", off)
 #endif
 
-int RSA_verify_PKCS1_PSS(RSA *rsa, const unsigned char *mHash,
+int __cdecl RSA_verify_PKCS1_PSS(RSA *rsa, const unsigned char *mHash,
                          const EVP_MD *Hash, const unsigned char *EM,
                          int sLen)
 {
     return RSA_verify_PKCS1_PSS_mgf1(rsa, mHash, Hash, NULL, EM, sLen);
 }
 
-int RSA_verify_PKCS1_PSS_mgf1(RSA *rsa, const unsigned char *mHash,
+int __cdecl RSA_verify_PKCS1_PSS_mgf1(RSA *rsa, const unsigned char *mHash,
                               const EVP_MD *Hash, const EVP_MD *mgf1Hash,
                               const unsigned char *EM, int sLen)
 {
@@ -135,14 +135,14 @@ int RSA_verify_PKCS1_PSS_mgf1(RSA *rsa, const unsigned char *mHash,
 
 }
 
-int RSA_padding_add_PKCS1_PSS(RSA *rsa, unsigned char *EM,
+int __cdecl RSA_padding_add_PKCS1_PSS(RSA *rsa, unsigned char *EM,
                               const unsigned char *mHash,
                               const EVP_MD *Hash, int sLen)
 {
     return RSA_padding_add_PKCS1_PSS_mgf1(rsa, EM, mHash, Hash, NULL, sLen);
 }
 
-int RSA_padding_add_PKCS1_PSS_mgf1(RSA *rsa, unsigned char *EM,
+int __cdecl RSA_padding_add_PKCS1_PSS_mgf1(RSA *rsa, unsigned char *EM,
                                    const unsigned char *mHash,
                                    const EVP_MD *Hash, const EVP_MD *mgf1Hash,
                                    int sLen)
diff --git a/crypto/rsa/rsa_saos.c b/crypto/rsa/rsa_saos.c
index 8336f32f16..2faeb5c0fc 100644
--- a/crypto/rsa/rsa_saos.c
+++ b/crypto/rsa/rsa_saos.c
@@ -14,7 +14,7 @@
 #include <openssl/objects.h>
 #include <openssl/x509.h>
 
-int RSA_sign_ASN1_OCTET_STRING(int type,
+int __cdecl RSA_sign_ASN1_OCTET_STRING(int type,
                                const unsigned char *m, unsigned int m_len,
                                unsigned char *sigret, unsigned int *siglen,
                                RSA *rsa)
@@ -51,7 +51,7 @@ int RSA_sign_ASN1_OCTET_STRING(int type,
     return ret;
 }
 
-int RSA_verify_ASN1_OCTET_STRING(int dtype,
+int __cdecl RSA_verify_ASN1_OCTET_STRING(int dtype,
                                  const unsigned char *m,
                                  unsigned int m_len, unsigned char *sigbuf,
                                  unsigned int siglen, RSA *rsa)
diff --git a/crypto/rsa/rsa_sign.c b/crypto/rsa/rsa_sign.c
index 952d24fb8a..8cfe0dc07e 100644
--- a/crypto/rsa/rsa_sign.c
+++ b/crypto/rsa/rsa_sign.c
@@ -66,7 +66,7 @@ static int encode_pkcs1(unsigned char **out, int *out_len, int type,
     return 1;
 }
 
-int RSA_sign(int type, const unsigned char *m, unsigned int m_len,
+int __cdecl RSA_sign(int type, const unsigned char *m, unsigned int m_len,
              unsigned char *sigret, unsigned int *siglen, RSA *rsa)
 {
     int encrypt_len, encoded_len = 0, ret = 0;
@@ -236,7 +236,7 @@ err:
     return ret;
 }
 
-int RSA_verify(int type, const unsigned char *m, unsigned int m_len,
+int __cdecl RSA_verify(int type, const unsigned char *m, unsigned int m_len,
                const unsigned char *sigbuf, unsigned int siglen, RSA *rsa)
 {
 
diff --git a/crypto/rsa/rsa_ssl.c b/crypto/rsa/rsa_ssl.c
index 3859128a6d..593c08f469 100644
--- a/crypto/rsa/rsa_ssl.c
+++ b/crypto/rsa/rsa_ssl.c
@@ -14,7 +14,7 @@
 #include <openssl/rand.h>
 #include "internal/constant_time_locl.h"
 
-int RSA_padding_add_SSLv23(unsigned char *to, int tlen,
+int __cdecl RSA_padding_add_SSLv23(unsigned char *to, int tlen,
                            const unsigned char *from, int flen)
 {
     int i, j;
@@ -58,7 +58,7 @@ int RSA_padding_add_SSLv23(unsigned char *to, int tlen,
  * if nul delimiter is not preceded by 8 consecutive 0x03 bytes. It also
  * preserves error code reporting for backward compatibility.
  */
-int RSA_padding_check_SSLv23(unsigned char *to, int tlen,
+int __cdecl RSA_padding_check_SSLv23(unsigned char *to, int tlen,
                              const unsigned char *from, int flen, int num)
 {
     int i;
diff --git a/crypto/rsa/rsa_x931.c b/crypto/rsa/rsa_x931.c
index 7b0486c0f2..033c9d2cd4 100644
--- a/crypto/rsa/rsa_x931.c
+++ b/crypto/rsa/rsa_x931.c
@@ -13,7 +13,7 @@
 #include <openssl/rsa.h>
 #include <openssl/objects.h>
 
-int RSA_padding_add_X931(unsigned char *to, int tlen,
+int __cdecl RSA_padding_add_X931(unsigned char *to, int tlen,
                          const unsigned char *from, int flen)
 {
     int j;
@@ -50,7 +50,7 @@ int RSA_padding_add_X931(unsigned char *to, int tlen,
     return 1;
 }
 
-int RSA_padding_check_X931(unsigned char *to, int tlen,
+int __cdecl RSA_padding_check_X931(unsigned char *to, int tlen,
                            const unsigned char *from, int flen, int num)
 {
     int i = 0, j;
@@ -97,7 +97,7 @@ int RSA_padding_check_X931(unsigned char *to, int tlen,
 
 /* Translate between X931 hash ids and NIDs */
 
-int RSA_X931_hash_id(int nid)
+int __cdecl RSA_X931_hash_id(int nid)
 {
     switch (nid) {
     case NID_sha1:
diff --git a/crypto/rsa/rsa_x931g.c b/crypto/rsa/rsa_x931g.c
index e7ac476bb4..339ff0bccd 100644
--- a/crypto/rsa/rsa_x931g.c
+++ b/crypto/rsa/rsa_x931g.c
@@ -16,7 +16,7 @@
 
 /* X9.31 RSA key derivation and generation */
 
-int RSA_X931_derive_ex(RSA *rsa, BIGNUM *p1, BIGNUM *p2, BIGNUM *q1,
+int __cdecl RSA_X931_derive_ex(RSA *rsa, BIGNUM *p1, BIGNUM *p2, BIGNUM *q1,
                        BIGNUM *q2, const BIGNUM *Xp1, const BIGNUM *Xp2,
                        const BIGNUM *Xp, const BIGNUM *Xq1, const BIGNUM *Xq2,
                        const BIGNUM *Xq, const BIGNUM *e, BN_GENCB *cb)
@@ -141,7 +141,7 @@ int RSA_X931_derive_ex(RSA *rsa, BIGNUM *p1, BIGNUM *p2, BIGNUM *q1,
 
 }
 
-int RSA_X931_generate_key_ex(RSA *rsa, int bits, const BIGNUM *e,
+int __cdecl RSA_X931_generate_key_ex(RSA *rsa, int bits, const BIGNUM *e,
                              BN_GENCB *cb)
 {
     int ok = 0;
diff --git a/crypto/seed/seed.c b/crypto/seed/seed.c
index d62da91ede..26fb50f491 100644
--- a/crypto/seed/seed.c
+++ b/crypto/seed/seed.c
@@ -437,7 +437,7 @@ static const seed_word KC[] = {
 };
 # endif
 
-void SEED_set_key(const unsigned char rawkey[SEED_KEY_LENGTH],
+void __cdecl SEED_set_key(const unsigned char rawkey[SEED_KEY_LENGTH],
                   SEED_KEY_SCHEDULE *ks)
 {
     seed_word x1, x2, x3, x4;
@@ -496,7 +496,7 @@ void SEED_set_key(const unsigned char rawkey[SEED_KEY_LENGTH],
 # endif
 }
 
-void SEED_encrypt(const unsigned char s[SEED_BLOCK_SIZE],
+void __cdecl SEED_encrypt(const unsigned char s[SEED_BLOCK_SIZE],
                   unsigned char d[SEED_BLOCK_SIZE],
                   const SEED_KEY_SCHEDULE *ks)
 {
@@ -541,7 +541,7 @@ void SEED_encrypt(const unsigned char s[SEED_BLOCK_SIZE],
     word2char(x2, d + 12);
 }
 
-void SEED_decrypt(const unsigned char s[SEED_BLOCK_SIZE],
+void __cdecl SEED_decrypt(const unsigned char s[SEED_BLOCK_SIZE],
                   unsigned char d[SEED_BLOCK_SIZE],
                   const SEED_KEY_SCHEDULE *ks)
 {
diff --git a/crypto/seed/seed_cbc.c b/crypto/seed/seed_cbc.c
index c9a4fe217b..08d3e13b2f 100644
--- a/crypto/seed/seed_cbc.c
+++ b/crypto/seed/seed_cbc.c
@@ -10,7 +10,7 @@
 #include <openssl/seed.h>
 #include <openssl/modes.h>
 
-void SEED_cbc_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl SEED_cbc_encrypt(const unsigned char *in, unsigned char *out,
                       size_t len, const SEED_KEY_SCHEDULE *ks,
                       unsigned char ivec[SEED_BLOCK_SIZE], int enc)
 {
diff --git a/crypto/seed/seed_cfb.c b/crypto/seed/seed_cfb.c
index 2aee1ffe39..69b08634f5 100644
--- a/crypto/seed/seed_cfb.c
+++ b/crypto/seed/seed_cfb.c
@@ -10,7 +10,7 @@
 #include <openssl/seed.h>
 #include <openssl/modes.h>
 
-void SEED_cfb128_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl SEED_cfb128_encrypt(const unsigned char *in, unsigned char *out,
                          size_t len, const SEED_KEY_SCHEDULE *ks,
                          unsigned char ivec[SEED_BLOCK_SIZE], int *num,
                          int enc)
diff --git a/crypto/seed/seed_ecb.c b/crypto/seed/seed_ecb.c
index b6e301ccda..97f43eade7 100644
--- a/crypto/seed/seed_ecb.c
+++ b/crypto/seed/seed_ecb.c
@@ -9,7 +9,7 @@
 
 #include <openssl/seed.h>
 
-void SEED_ecb_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl SEED_ecb_encrypt(const unsigned char *in, unsigned char *out,
                       const SEED_KEY_SCHEDULE *ks, int enc)
 {
     if (enc)
diff --git a/crypto/seed/seed_ofb.c b/crypto/seed/seed_ofb.c
index b455540585..c492e24486 100644
--- a/crypto/seed/seed_ofb.c
+++ b/crypto/seed/seed_ofb.c
@@ -10,7 +10,7 @@
 #include <openssl/seed.h>
 #include <openssl/modes.h>
 
-void SEED_ofb128_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl SEED_ofb128_encrypt(const unsigned char *in, unsigned char *out,
                          size_t len, const SEED_KEY_SCHEDULE *ks,
                          unsigned char ivec[SEED_BLOCK_SIZE], int *num)
 {
diff --git a/crypto/sha/keccak1600.c b/crypto/sha/keccak1600.c
index 55a44023d5..9e3e805b1b 100644
--- a/crypto/sha/keccak1600.c
+++ b/crypto/sha/keccak1600.c
@@ -1146,7 +1146,7 @@ void SHA3_sponge(const unsigned char *inp, size_t len,
 
 # include <stdio.h>
 
-int main()
+int __cdecl main()
 {
     /*
      * This is 5-bit SHAKE128 test from http://csrc.nist.gov/groups/ST/toolkit/examples.html#aHashing
diff --git a/crypto/sha/sha1_one.c b/crypto/sha/sha1_one.c
index e5b38211d2..5807649c8f 100644
--- a/crypto/sha/sha1_one.c
+++ b/crypto/sha/sha1_one.c
@@ -12,7 +12,7 @@
 #include <openssl/crypto.h>
 #include <openssl/sha.h>
 
-unsigned char *SHA1(const unsigned char *d, size_t n, unsigned char *md)
+unsigned char * __cdecl SHA1(const unsigned char *d, size_t n, unsigned char *md)
 {
     SHA_CTX c;
     static unsigned char m[SHA_DIGEST_LENGTH];
diff --git a/crypto/sha/sha256.c b/crypto/sha/sha256.c
index bf78f075ee..840ae90b65 100644
--- a/crypto/sha/sha256.c
+++ b/crypto/sha/sha256.c
@@ -16,7 +16,7 @@
 #include <openssl/sha.h>
 #include <openssl/opensslv.h>
 
-int SHA224_Init(SHA256_CTX *c)
+int __cdecl SHA224_Init(SHA256_CTX *c)
 {
     memset(c, 0, sizeof(*c));
     c->h[0] = 0xc1059ed8UL;
@@ -31,7 +31,7 @@ int SHA224_Init(SHA256_CTX *c)
     return 1;
 }
 
-int SHA256_Init(SHA256_CTX *c)
+int __cdecl SHA256_Init(SHA256_CTX *c)
 {
     memset(c, 0, sizeof(*c));
     c->h[0] = 0x6a09e667UL;
@@ -46,7 +46,7 @@ int SHA256_Init(SHA256_CTX *c)
     return 1;
 }
 
-unsigned char *SHA224(const unsigned char *d, size_t n, unsigned char *md)
+unsigned char * __cdecl SHA224(const unsigned char *d, size_t n, unsigned char *md)
 {
     SHA256_CTX c;
     static unsigned char m[SHA224_DIGEST_LENGTH];
@@ -60,7 +60,7 @@ unsigned char *SHA224(const unsigned char *d, size_t n, unsigned char *md)
     return md;
 }
 
-unsigned char *SHA256(const unsigned char *d, size_t n, unsigned char *md)
+unsigned char * __cdecl SHA256(const unsigned char *d, size_t n, unsigned char *md)
 {
     SHA256_CTX c;
     static unsigned char m[SHA256_DIGEST_LENGTH];
@@ -74,12 +74,12 @@ unsigned char *SHA256(const unsigned char *d, size_t n, unsigned char *md)
     return md;
 }
 
-int SHA224_Update(SHA256_CTX *c, const void *data, size_t len)
+int __cdecl SHA224_Update(SHA256_CTX *c, const void *data, size_t len)
 {
     return SHA256_Update(c, data, len);
 }
 
-int SHA224_Final(unsigned char *md, SHA256_CTX *c)
+int __cdecl SHA224_Final(unsigned char *md, SHA256_CTX *c)
 {
     return SHA256_Final(md, c);
 }
diff --git a/crypto/sha/sha512.c b/crypto/sha/sha512.c
index 50b65ee811..70fb22e657 100644
--- a/crypto/sha/sha512.c
+++ b/crypto/sha/sha512.c
@@ -96,7 +96,7 @@ int sha512_256_init(SHA512_CTX *c)
     return 1;
 }
 
-int SHA384_Init(SHA512_CTX *c)
+int __cdecl SHA384_Init(SHA512_CTX *c)
 {
     c->h[0] = U64(0xcbbb9d5dc1059ed8);
     c->h[1] = U64(0x629a292a367cd507);
@@ -114,7 +114,7 @@ int SHA384_Init(SHA512_CTX *c)
     return 1;
 }
 
-int SHA512_Init(SHA512_CTX *c)
+int __cdecl SHA512_Init(SHA512_CTX *c)
 {
     c->h[0] = U64(0x6a09e667f3bcc908);
     c->h[1] = U64(0xbb67ae8584caa73b);
@@ -137,7 +137,7 @@ static
 #endif
 void sha512_block_data_order(SHA512_CTX *ctx, const void *in, size_t num);
 
-int SHA512_Final(unsigned char *md, SHA512_CTX *c)
+int __cdecl SHA512_Final(unsigned char *md, SHA512_CTX *c)
 {
     unsigned char *p = (unsigned char *)c->u.p;
     size_t n = c->num;
@@ -256,12 +256,12 @@ int SHA512_Final(unsigned char *md, SHA512_CTX *c)
     return 1;
 }
 
-int SHA384_Final(unsigned char *md, SHA512_CTX *c)
+int __cdecl SHA384_Final(unsigned char *md, SHA512_CTX *c)
 {
     return SHA512_Final(md, c);
 }
 
-int SHA512_Update(SHA512_CTX *c, const void *_data, size_t len)
+int __cdecl SHA512_Update(SHA512_CTX *c, const void *_data, size_t len)
 {
     SHA_LONG64 l;
     unsigned char *p = c->u.p;
@@ -309,12 +309,12 @@ int SHA512_Update(SHA512_CTX *c, const void *_data, size_t len)
     return 1;
 }
 
-int SHA384_Update(SHA512_CTX *c, const void *data, size_t len)
+int __cdecl SHA384_Update(SHA512_CTX *c, const void *data, size_t len)
 {
     return SHA512_Update(c, data, len);
 }
 
-void SHA512_Transform(SHA512_CTX *c, const unsigned char *data)
+void __cdecl SHA512_Transform(SHA512_CTX *c, const unsigned char *data)
 {
 #ifndef SHA512_BLOCK_CAN_MANAGE_UNALIGNED_DATA
     if ((size_t)data % sizeof(c->u.d[0]) != 0)
@@ -323,7 +323,7 @@ void SHA512_Transform(SHA512_CTX *c, const unsigned char *data)
     sha512_block_data_order(c, data, 1);
 }
 
-unsigned char *SHA384(const unsigned char *d, size_t n, unsigned char *md)
+unsigned char * __cdecl SHA384(const unsigned char *d, size_t n, unsigned char *md)
 {
     SHA512_CTX c;
     static unsigned char m[SHA384_DIGEST_LENGTH];
@@ -337,7 +337,7 @@ unsigned char *SHA384(const unsigned char *d, size_t n, unsigned char *md)
     return md;
 }
 
-unsigned char *SHA512(const unsigned char *d, size_t n, unsigned char *md)
+unsigned char * __cdecl SHA512(const unsigned char *d, size_t n, unsigned char *md)
 {
     SHA512_CTX c;
     static unsigned char m[SHA512_DIGEST_LENGTH];
diff --git a/crypto/sha/sha_locl.h b/crypto/sha/sha_locl.h
index 4e5a090382..20df4dc95f 100644
--- a/crypto/sha/sha_locl.h
+++ b/crypto/sha/sha_locl.h
@@ -50,7 +50,7 @@ void sha1_block_data_order(SHA_CTX *c, const void *p, size_t num);
 #define INIT_DATA_h3 0x10325476UL
 #define INIT_DATA_h4 0xc3d2e1f0UL
 
-int HASH_INIT(SHA_CTX *c)
+int __cdecl HASH_INIT(SHA_CTX *c)
 {
     memset(c, 0, sizeof(*c));
     c->h0 = INIT_DATA_h0;
diff --git a/crypto/siphash/siphash_ameth.c b/crypto/siphash/siphash_ameth.c
index c0ab7efae4..8cc1cc152d 100644
--- a/crypto/siphash/siphash_ameth.c
+++ b/crypto/siphash/siphash_ameth.c
@@ -20,12 +20,12 @@
  * SIPHASH output length and to free up a SIPHASH key.
  */
 
-static int siphash_size(const EVP_PKEY *pkey)
+static int __cdecl siphash_size(const EVP_PKEY *pkey)
 {
     return SIPHASH_MAX_DIGEST_SIZE;
 }
 
-static void siphash_key_free(EVP_PKEY *pkey)
+static void __cdecl siphash_key_free(EVP_PKEY *pkey)
 {
     ASN1_OCTET_STRING *os = EVP_PKEY_get0(pkey);
 
@@ -36,18 +36,18 @@ static void siphash_key_free(EVP_PKEY *pkey)
     }
 }
 
-static int siphash_pkey_ctrl(EVP_PKEY *pkey, int op, long arg1, void *arg2)
+static int __cdecl siphash_pkey_ctrl(EVP_PKEY *pkey, int op, long arg1, void *arg2)
 {
     /* nothing (including ASN1_PKEY_CTRL_DEFAULT_MD_NID), is supported */
     return -2;
 }
 
-static int siphash_pkey_public_cmp(const EVP_PKEY *a, const EVP_PKEY *b)
+static int __cdecl siphash_pkey_public_cmp(const EVP_PKEY *a, const EVP_PKEY *b)
 {
     return ASN1_OCTET_STRING_cmp(EVP_PKEY_get0(a), EVP_PKEY_get0(b));
 }
 
-static int siphash_set_priv_key(EVP_PKEY *pkey, const unsigned char *priv,
+static int __cdecl siphash_set_priv_key(EVP_PKEY *pkey, const unsigned char *priv,
                                 size_t len)
 {
     ASN1_OCTET_STRING *os;
@@ -68,7 +68,7 @@ static int siphash_set_priv_key(EVP_PKEY *pkey, const unsigned char *priv,
     return 1;
 }
 
-static int siphash_get_priv_key(const EVP_PKEY *pkey, unsigned char *priv,
+static int __cdecl siphash_get_priv_key(const EVP_PKEY *pkey, unsigned char *priv,
                                 size_t *len)
 {
     ASN1_OCTET_STRING *os = (ASN1_OCTET_STRING *)pkey->pkey.ptr;
diff --git a/crypto/siphash/siphash_pmeth.c b/crypto/siphash/siphash_pmeth.c
index 66e552fec5..6756f3a1d7 100644
--- a/crypto/siphash/siphash_pmeth.c
+++ b/crypto/siphash/siphash_pmeth.c
@@ -24,7 +24,7 @@ typedef struct siphash_pkey_ctx_st {
     SIPHASH ctx;
 } SIPHASH_PKEY_CTX;
 
-static int pkey_siphash_init(EVP_PKEY_CTX *ctx)
+static int __cdecl pkey_siphash_init(EVP_PKEY_CTX *ctx)
 {
     SIPHASH_PKEY_CTX *pctx;
 
@@ -39,7 +39,7 @@ static int pkey_siphash_init(EVP_PKEY_CTX *ctx)
     return 1;
 }
 
-static void pkey_siphash_cleanup(EVP_PKEY_CTX *ctx)
+static void __cdecl pkey_siphash_cleanup(EVP_PKEY_CTX *ctx)
 {
     SIPHASH_PKEY_CTX *pctx = EVP_PKEY_CTX_get_data(ctx);
 
@@ -50,7 +50,7 @@ static void pkey_siphash_cleanup(EVP_PKEY_CTX *ctx)
     }
 }
 
-static int pkey_siphash_copy(EVP_PKEY_CTX *dst, EVP_PKEY_CTX *src)
+static int __cdecl pkey_siphash_copy(EVP_PKEY_CTX *dst, EVP_PKEY_CTX *src)
 {
     SIPHASH_PKEY_CTX *sctx, *dctx;
 
@@ -69,7 +69,7 @@ static int pkey_siphash_copy(EVP_PKEY_CTX *dst, EVP_PKEY_CTX *src)
     return 1;
 }
 
-static int pkey_siphash_keygen(EVP_PKEY_CTX *ctx, EVP_PKEY *pkey)
+static int __cdecl pkey_siphash_keygen(EVP_PKEY_CTX *ctx, EVP_PKEY *pkey)
 {
     ASN1_OCTET_STRING *key;
     SIPHASH_PKEY_CTX *pctx = EVP_PKEY_CTX_get_data(ctx);
@@ -82,7 +82,7 @@ static int pkey_siphash_keygen(EVP_PKEY_CTX *ctx, EVP_PKEY *pkey)
     return EVP_PKEY_assign_SIPHASH(pkey, key);
 }
 
-static int int_update(EVP_MD_CTX *ctx, const void *data, size_t count)
+static int __cdecl int_update(EVP_MD_CTX *ctx, const void *data, size_t count)
 {
     SIPHASH_PKEY_CTX *pctx = EVP_PKEY_CTX_get_data(EVP_MD_CTX_pkey_ctx(ctx));
 
@@ -90,7 +90,7 @@ static int int_update(EVP_MD_CTX *ctx, const void *data, size_t count)
     return 1;
 }
 
-static int siphash_signctx_init(EVP_PKEY_CTX *ctx, EVP_MD_CTX *mctx)
+static int __cdecl siphash_signctx_init(EVP_PKEY_CTX *ctx, EVP_MD_CTX *mctx)
 {
     SIPHASH_PKEY_CTX *pctx = EVP_PKEY_CTX_get_data(ctx);
     const unsigned char* key;
@@ -103,7 +103,7 @@ static int siphash_signctx_init(EVP_PKEY_CTX *ctx, EVP_MD_CTX *mctx)
     EVP_MD_CTX_set_update_fn(mctx, int_update);
     return SipHash_Init(&pctx->ctx, key, 0, 0);
 }
-static int siphash_signctx(EVP_PKEY_CTX *ctx, unsigned char *sig, size_t *siglen,
+static int __cdecl siphash_signctx(EVP_PKEY_CTX *ctx, unsigned char *sig, size_t *siglen,
                             EVP_MD_CTX *mctx)
 {
     SIPHASH_PKEY_CTX *pctx = ctx->data;
@@ -114,7 +114,7 @@ static int siphash_signctx(EVP_PKEY_CTX *ctx, unsigned char *sig, size_t *siglen
     return 1;
 }
 
-static int pkey_siphash_ctrl(EVP_PKEY_CTX *ctx, int type, int p1, void *p2)
+static int __cdecl pkey_siphash_ctrl(EVP_PKEY_CTX *ctx, int type, int p1, void *p2)
 {
     SIPHASH_PKEY_CTX *pctx = EVP_PKEY_CTX_get_data(ctx);
     const unsigned char *key;
@@ -153,7 +153,7 @@ static int pkey_siphash_ctrl(EVP_PKEY_CTX *ctx, int type, int p1, void *p2)
     return 1;
 }
 
-static int pkey_siphash_ctrl_str(EVP_PKEY_CTX *ctx,
+static int __cdecl pkey_siphash_ctrl_str(EVP_PKEY_CTX *ctx,
                                   const char *type, const char *value)
 {
     if (value == NULL)
diff --git a/crypto/sm2/sm2_pmeth.c b/crypto/sm2/sm2_pmeth.c
index d187699cc4..d0bcdd35cc 100644
--- a/crypto/sm2/sm2_pmeth.c
+++ b/crypto/sm2/sm2_pmeth.c
@@ -29,7 +29,7 @@ typedef struct {
     int id_set;
 } SM2_PKEY_CTX;
 
-static int pkey_sm2_init(EVP_PKEY_CTX *ctx)
+static int __cdecl pkey_sm2_init(EVP_PKEY_CTX *ctx)
 {
     SM2_PKEY_CTX *smctx;
 
@@ -42,7 +42,7 @@ static int pkey_sm2_init(EVP_PKEY_CTX *ctx)
     return 1;
 }
 
-static void pkey_sm2_cleanup(EVP_PKEY_CTX *ctx)
+static void __cdecl pkey_sm2_cleanup(EVP_PKEY_CTX *ctx)
 {
     SM2_PKEY_CTX *smctx = ctx->data;
 
@@ -54,7 +54,7 @@ static void pkey_sm2_cleanup(EVP_PKEY_CTX *ctx)
     }
 }
 
-static int pkey_sm2_copy(EVP_PKEY_CTX *dst, EVP_PKEY_CTX *src)
+static int __cdecl pkey_sm2_copy(EVP_PKEY_CTX *dst, EVP_PKEY_CTX *src)
 {
     SM2_PKEY_CTX *dctx, *sctx;
 
@@ -85,7 +85,7 @@ static int pkey_sm2_copy(EVP_PKEY_CTX *dst, EVP_PKEY_CTX *src)
     return 1;
 }
 
-static int pkey_sm2_sign(EVP_PKEY_CTX *ctx, unsigned char *sig, size_t *siglen,
+static int __cdecl pkey_sm2_sign(EVP_PKEY_CTX *ctx, unsigned char *sig, size_t *siglen,
                          const unsigned char *tbs, size_t tbslen)
 {
     int ret;
@@ -115,7 +115,7 @@ static int pkey_sm2_sign(EVP_PKEY_CTX *ctx, unsigned char *sig, size_t *siglen,
     return 1;
 }
 
-static int pkey_sm2_verify(EVP_PKEY_CTX *ctx,
+static int __cdecl pkey_sm2_verify(EVP_PKEY_CTX *ctx,
                            const unsigned char *sig, size_t siglen,
                            const unsigned char *tbs, size_t tbslen)
 {
@@ -124,7 +124,7 @@ static int pkey_sm2_verify(EVP_PKEY_CTX *ctx,
     return sm2_verify(tbs, tbslen, sig, siglen, ec);
 }
 
-static int pkey_sm2_encrypt(EVP_PKEY_CTX *ctx,
+static int __cdecl pkey_sm2_encrypt(EVP_PKEY_CTX *ctx,
                             unsigned char *out, size_t *outlen,
                             const unsigned char *in, size_t inlen)
 {
@@ -142,7 +142,7 @@ static int pkey_sm2_encrypt(EVP_PKEY_CTX *ctx,
     return sm2_encrypt(ec, md, in, inlen, out, outlen);
 }
 
-static int pkey_sm2_decrypt(EVP_PKEY_CTX *ctx,
+static int __cdecl pkey_sm2_decrypt(EVP_PKEY_CTX *ctx,
                             unsigned char *out, size_t *outlen,
                             const unsigned char *in, size_t inlen)
 {
@@ -160,7 +160,7 @@ static int pkey_sm2_decrypt(EVP_PKEY_CTX *ctx,
     return sm2_decrypt(ec, md, in, inlen, out, outlen);
 }
 
-static int pkey_sm2_ctrl(EVP_PKEY_CTX *ctx, int type, int p1, void *p2)
+static int __cdecl pkey_sm2_ctrl(EVP_PKEY_CTX *ctx, int type, int p1, void *p2)
 {
     SM2_PKEY_CTX *smctx = ctx->data;
     EC_GROUP *group;
@@ -225,7 +225,7 @@ static int pkey_sm2_ctrl(EVP_PKEY_CTX *ctx, int type, int p1, void *p2)
     }
 }
 
-static int pkey_sm2_ctrl_str(EVP_PKEY_CTX *ctx,
+static int __cdecl pkey_sm2_ctrl_str(EVP_PKEY_CTX *ctx,
                              const char *type, const char *value)
 {
     if (strcmp(type, "ec_paramgen_curve") == 0) {
@@ -253,7 +253,7 @@ static int pkey_sm2_ctrl_str(EVP_PKEY_CTX *ctx,
     return -2;
 }
 
-static int pkey_sm2_digest_custom(EVP_PKEY_CTX *ctx, EVP_MD_CTX *mctx)
+static int __cdecl pkey_sm2_digest_custom(EVP_PKEY_CTX *ctx, EVP_MD_CTX *mctx)
 {
     uint8_t z[EVP_MAX_MD_SIZE];
     SM2_PKEY_CTX *smctx = ctx->data;
diff --git a/crypto/sm3/m_sm3.c b/crypto/sm3/m_sm3.c
index 85538dc8af..0fd19fa0d6 100644
--- a/crypto/sm3/m_sm3.c
+++ b/crypto/sm3/m_sm3.c
@@ -15,17 +15,17 @@
 # include "internal/evp_int.h"
 # include "internal/sm3.h"
 
-static int init(EVP_MD_CTX *ctx)
+static int __cdecl init(EVP_MD_CTX *ctx)
 {
     return sm3_init(EVP_MD_CTX_md_data(ctx));
 }
 
-static int update(EVP_MD_CTX *ctx, const void *data, size_t count)
+static int __cdecl update(EVP_MD_CTX *ctx, const void *data, size_t count)
 {
     return sm3_update(EVP_MD_CTX_md_data(ctx), data, count);
 }
 
-static int final(EVP_MD_CTX *ctx, unsigned char *md)
+static int __cdecl final(EVP_MD_CTX *ctx, unsigned char *md)
 {
     return sm3_final(md, EVP_MD_CTX_md_data(ctx));
 }
@@ -44,7 +44,7 @@ static const EVP_MD sm3_md = {
     sizeof(EVP_MD *) + sizeof(SM3_CTX),
 };
 
-const EVP_MD *EVP_sm3(void)
+const EVP_MD * __cdecl EVP_sm3(void)
 {
     return &sm3_md;
 }
diff --git a/crypto/sm3/sm3.c b/crypto/sm3/sm3.c
index 1588dd115a..da11aeaa23 100644
--- a/crypto/sm3/sm3.c
+++ b/crypto/sm3/sm3.c
@@ -12,7 +12,7 @@
 #include <openssl/e_os2.h>
 #include "sm3_locl.h"
 
-int sm3_init(SM3_CTX *c)
+int __cdecl sm3_init(SM3_CTX *c)
 {
     memset(c, 0, sizeof(*c));
     c->A = SM3_A;
diff --git a/crypto/sm3/sm3_locl.h b/crypto/sm3/sm3_locl.h
index efa6db57c6..ec24600d91 100644
--- a/crypto/sm3/sm3_locl.h
+++ b/crypto/sm3/sm3_locl.h
@@ -34,7 +34,7 @@
       } while (0)
 #define HASH_BLOCK_DATA_ORDER   sm3_block_data_order
 
-void sm3_transform(SM3_CTX *c, const unsigned char *data);
+void __cdecl sm3_transform(SM3_CTX *c, const unsigned char *data);
 
 #include "internal/md32_common.h"
 
diff --git a/crypto/sparcv9cap.c b/crypto/sparcv9cap.c
index c8c567536b..3595a8dabf 100644
--- a/crypto/sparcv9cap.c
+++ b/crypto/sparcv9cap.c
@@ -99,7 +99,7 @@ unsigned long _sparcv9_random(void);
 size_t _sparcv9_vis1_instrument_bus(unsigned int *, size_t);
 size_t _sparcv9_vis1_instrument_bus2(unsigned int *, size_t, size_t);
 
-uint32_t OPENSSL_rdtsc(void)
+uint32_t __cdecl OPENSSL_rdtsc(void)
 {
     if (OPENSSL_sparcv9cap_P[0] & SPARCV9_TICK_PRIVILEGED)
 #if defined(__sun) && defined(__SVR4)
@@ -111,7 +111,7 @@ uint32_t OPENSSL_rdtsc(void)
         return _sparcv9_rdtick();
 }
 
-size_t OPENSSL_instrument_bus(unsigned int *out, size_t cnt)
+size_t __cdecl OPENSSL_instrument_bus(unsigned int *out, size_t cnt)
 {
     if ((OPENSSL_sparcv9cap_P[0] & (SPARCV9_TICK_PRIVILEGED | SPARCV9_BLK)) ==
         SPARCV9_BLK)
@@ -120,7 +120,7 @@ size_t OPENSSL_instrument_bus(unsigned int *out, size_t cnt)
         return 0;
 }
 
-size_t OPENSSL_instrument_bus2(unsigned int *out, size_t cnt, size_t max)
+size_t __cdecl OPENSSL_instrument_bus2(unsigned int *out, size_t cnt, size_t max)
 {
     if ((OPENSSL_sparcv9cap_P[0] & (SPARCV9_TICK_PRIVILEGED | SPARCV9_BLK)) ==
         SPARCV9_BLK)
diff --git a/crypto/srp/srp_lib.c b/crypto/srp/srp_lib.c
index ca20f6d097..8a5697622f 100644
--- a/crypto/srp/srp_lib.c
+++ b/crypto/srp/srp_lib.c
@@ -49,13 +49,13 @@ static BIGNUM *srp_Calc_k(const BIGNUM *N, const BIGNUM *g)
     return srp_Calc_xy(N, g, N);
 }
 
-BIGNUM *SRP_Calc_u(const BIGNUM *A, const BIGNUM *B, const BIGNUM *N)
+BIGNUM * __cdecl SRP_Calc_u(const BIGNUM *A, const BIGNUM *B, const BIGNUM *N)
 {
     /* k = SHA1(PAD(A) || PAD(B) ) -- tls-srp draft 8 */
     return srp_Calc_xy(A, B, N);
 }
 
-BIGNUM *SRP_Calc_server_key(const BIGNUM *A, const BIGNUM *v, const BIGNUM *u,
+BIGNUM * __cdecl SRP_Calc_server_key(const BIGNUM *A, const BIGNUM *v, const BIGNUM *u,
                             const BIGNUM *b, const BIGNUM *N)
 {
     BIGNUM *tmp = NULL, *S = NULL;
@@ -85,7 +85,7 @@ BIGNUM *SRP_Calc_server_key(const BIGNUM *A, const BIGNUM *v, const BIGNUM *u,
     return S;
 }
 
-BIGNUM *SRP_Calc_B(const BIGNUM *b, const BIGNUM *N, const BIGNUM *g,
+BIGNUM * __cdecl SRP_Calc_B(const BIGNUM *b, const BIGNUM *N, const BIGNUM *g,
                    const BIGNUM *v)
 {
     BIGNUM *kv = NULL, *gb = NULL;
@@ -117,7 +117,7 @@ BIGNUM *SRP_Calc_B(const BIGNUM *b, const BIGNUM *N, const BIGNUM *g,
     return B;
 }
 
-BIGNUM *SRP_Calc_x(const BIGNUM *s, const char *user, const char *pass)
+BIGNUM * __cdecl SRP_Calc_x(const BIGNUM *s, const char *user, const char *pass)
 {
     unsigned char dig[SHA_DIGEST_LENGTH];
     EVP_MD_CTX *ctxt;
@@ -157,7 +157,7 @@ BIGNUM *SRP_Calc_x(const BIGNUM *s, const char *user, const char *pass)
     return res;
 }
 
-BIGNUM *SRP_Calc_A(const BIGNUM *a, const BIGNUM *N, const BIGNUM *g)
+BIGNUM * __cdecl SRP_Calc_A(const BIGNUM *a, const BIGNUM *N, const BIGNUM *g)
 {
     BN_CTX *bn_ctx;
     BIGNUM *A = NULL;
@@ -173,7 +173,7 @@ BIGNUM *SRP_Calc_A(const BIGNUM *a, const BIGNUM *N, const BIGNUM *g)
     return A;
 }
 
-BIGNUM *SRP_Calc_client_key(const BIGNUM *N, const BIGNUM *B, const BIGNUM *g,
+BIGNUM * __cdecl SRP_Calc_client_key(const BIGNUM *N, const BIGNUM *B, const BIGNUM *g,
                             const BIGNUM *x, const BIGNUM *a, const BIGNUM *u)
 {
     BIGNUM *tmp = NULL, *tmp2 = NULL, *tmp3 = NULL, *k = NULL, *K = NULL;
@@ -236,7 +236,7 @@ int SRP_Verify_B_mod_N(const BIGNUM *B, const BIGNUM *N)
     return ret;
 }
 
-int SRP_Verify_A_mod_N(const BIGNUM *A, const BIGNUM *N)
+int __cdecl SRP_Verify_A_mod_N(const BIGNUM *A, const BIGNUM *N)
 {
     /* Checks if A % N == 0 */
     return SRP_Verify_B_mod_N(A, N);
@@ -258,7 +258,7 @@ static SRP_gN knowngN[] = {
  * Check if G and N are known parameters. The values have been generated
  * from the ietf-tls-srp draft version 8
  */
-char *SRP_check_known_gN_param(const BIGNUM *g, const BIGNUM *N)
+char * __cdecl SRP_check_known_gN_param(const BIGNUM *g, const BIGNUM *N)
 {
     size_t i;
     if ((g == NULL) || (N == NULL))
@@ -271,7 +271,7 @@ char *SRP_check_known_gN_param(const BIGNUM *g, const BIGNUM *N)
     return NULL;
 }
 
-SRP_gN *SRP_get_default_gN(const char *id)
+SRP_gN * __cdecl SRP_get_default_gN(const char *id)
 {
     size_t i;
 
diff --git a/crypto/srp/srp_vfy.c b/crypto/srp/srp_vfy.c
index eb279dd418..0762cdf97c 100644
--- a/crypto/srp/srp_vfy.c
+++ b/crypto/srp/srp_vfy.c
@@ -173,7 +173,7 @@ static int t_tob64(char *dst, const unsigned char *src, int size)
     return 1;
 }
 
-void SRP_user_pwd_free(SRP_user_pwd *user_pwd)
+void __cdecl SRP_user_pwd_free(SRP_user_pwd *user_pwd)
 {
     if (user_pwd == NULL)
         return;
@@ -268,7 +268,7 @@ static SRP_user_pwd *srp_user_pwd_dup(SRP_user_pwd *src)
     return ret;
 }
 
-SRP_VBASE *SRP_VBASE_new(char *seed_key)
+SRP_VBASE * __cdecl SRP_VBASE_new(char *seed_key)
 {
     SRP_VBASE *vb = OPENSSL_malloc(sizeof(*vb));
 
@@ -291,7 +291,7 @@ SRP_VBASE *SRP_VBASE_new(char *seed_key)
     return vb;
 }
 
-void SRP_VBASE_free(SRP_VBASE *vb)
+void __cdecl SRP_VBASE_free(SRP_VBASE *vb)
 {
     if (!vb)
         return;
@@ -379,7 +379,7 @@ static BIGNUM *SRP_gN_place_bn(STACK_OF(SRP_gN_cache) *gN_cache, char *ch)
  * string(username):base64(v):base64(salt):int(index)
  */
 
-int SRP_VBASE_init(SRP_VBASE *vb, char *verifier_file)
+int __cdecl SRP_VBASE_init(SRP_VBASE *vb, char *verifier_file)
 {
     int error_code;
     STACK_OF(SRP_gN) *SRP_gN_tab = sk_SRP_gN_new_null();
@@ -526,7 +526,7 @@ SRP_user_pwd *SRP_VBASE_get_by_user(SRP_VBASE *vb, char *username)
  * Ownership of the returned pointer is released to the caller.
  * In other words, caller must free the result once done.
  */
-SRP_user_pwd *SRP_VBASE_get1_by_user(SRP_VBASE *vb, char *username)
+SRP_user_pwd * __cdecl SRP_VBASE_get1_by_user(SRP_VBASE *vb, char *username)
 {
     SRP_user_pwd *user;
     unsigned char digv[SHA_DIGEST_LENGTH];
@@ -578,7 +578,7 @@ SRP_user_pwd *SRP_VBASE_get1_by_user(SRP_VBASE *vb, char *username)
 /*
  * create a verifier (*salt,*verifier,g and N are in base64)
  */
-char *SRP_create_verifier(const char *user, const char *pass, char **salt,
+char * __cdecl SRP_create_verifier(const char *user, const char *pass, char **salt,
                           char **verifier, const char *N, const char *g)
 {
     int len;
@@ -676,7 +676,7 @@ char *SRP_create_verifier(const char *user, const char *pass, char **salt,
  * The caller is responsible for freeing the allocated *salt and *verifier
  * BIGNUMS.
  */
-int SRP_create_verifier_BN(const char *user, const char *pass, BIGNUM **salt,
+int __cdecl SRP_create_verifier_BN(const char *user, const char *pass, BIGNUM **salt,
                            BIGNUM **verifier, const BIGNUM *N,
                            const BIGNUM *g)
 {
diff --git a/crypto/stack/stack.c b/crypto/stack/stack.c
index 975515db59..e064cdd379 100644
--- a/crypto/stack/stack.c
+++ b/crypto/stack/stack.c
@@ -31,7 +31,7 @@ struct stack_st {
     OPENSSL_sk_compfunc comp;
 };
 
-OPENSSL_sk_compfunc OPENSSL_sk_set_cmp_func(OPENSSL_STACK *sk, OPENSSL_sk_compfunc c)
+OPENSSL_sk_compfunc __cdecl OPENSSL_sk_set_cmp_func(OPENSSL_STACK *sk, OPENSSL_sk_compfunc c)
 {
     OPENSSL_sk_compfunc old = sk->comp;
 
@@ -42,7 +42,7 @@ OPENSSL_sk_compfunc OPENSSL_sk_set_cmp_func(OPENSSL_STACK *sk, OPENSSL_sk_compfu
     return old;
 }
 
-OPENSSL_STACK *OPENSSL_sk_dup(const OPENSSL_STACK *sk)
+OPENSSL_STACK * __cdecl OPENSSL_sk_dup(const OPENSSL_STACK *sk)
 {
     OPENSSL_STACK *ret;
 
@@ -70,7 +70,7 @@ OPENSSL_STACK *OPENSSL_sk_dup(const OPENSSL_STACK *sk)
     return NULL;
 }
 
-OPENSSL_STACK *OPENSSL_sk_deep_copy(const OPENSSL_STACK *sk,
+OPENSSL_STACK * __cdecl OPENSSL_sk_deep_copy(const OPENSSL_STACK *sk,
                              OPENSSL_sk_copyfunc copy_func,
                              OPENSSL_sk_freefunc free_func)
 {
@@ -113,12 +113,12 @@ OPENSSL_STACK *OPENSSL_sk_deep_copy(const OPENSSL_STACK *sk,
     return ret;
 }
 
-OPENSSL_STACK *OPENSSL_sk_new_null(void)
+OPENSSL_STACK * __cdecl OPENSSL_sk_new_null(void)
 {
     return OPENSSL_sk_new_reserve(NULL, 0);
 }
 
-OPENSSL_STACK *OPENSSL_sk_new(OPENSSL_sk_compfunc c)
+OPENSSL_STACK * __cdecl OPENSSL_sk_new(OPENSSL_sk_compfunc c)
 {
     return OPENSSL_sk_new_reserve(c, 0);
 }
@@ -204,7 +204,7 @@ static int sk_reserve(OPENSSL_STACK *st, int n, int exact)
     return 1;
 }
 
-OPENSSL_STACK *OPENSSL_sk_new_reserve(OPENSSL_sk_compfunc c, int n)
+OPENSSL_STACK * __cdecl OPENSSL_sk_new_reserve(OPENSSL_sk_compfunc c, int n)
 {
     OPENSSL_STACK *st = OPENSSL_zalloc(sizeof(OPENSSL_STACK));
 
@@ -224,7 +224,7 @@ OPENSSL_STACK *OPENSSL_sk_new_reserve(OPENSSL_sk_compfunc c, int n)
     return st;
 }
 
-int OPENSSL_sk_reserve(OPENSSL_STACK *st, int n)
+int __cdecl OPENSSL_sk_reserve(OPENSSL_STACK *st, int n)
 {
     if (st == NULL)
         return 0;
@@ -234,7 +234,7 @@ int OPENSSL_sk_reserve(OPENSSL_STACK *st, int n)
     return sk_reserve(st, n, 1);
 }
 
-int OPENSSL_sk_insert(OPENSSL_STACK *st, const void *data, int loc)
+int __cdecl OPENSSL_sk_insert(OPENSSL_STACK *st, const void *data, int loc)
 {
     if (st == NULL || st->num == max_nodes)
         return 0;
@@ -266,7 +266,7 @@ static ossl_inline void *internal_delete(OPENSSL_STACK *st, int loc)
     return (void *)ret;
 }
 
-void *OPENSSL_sk_delete_ptr(OPENSSL_STACK *st, const void *p)
+void * __cdecl OPENSSL_sk_delete_ptr(OPENSSL_STACK *st, const void *p)
 {
     int i;
 
@@ -276,7 +276,7 @@ void *OPENSSL_sk_delete_ptr(OPENSSL_STACK *st, const void *p)
     return NULL;
 }
 
-void *OPENSSL_sk_delete(OPENSSL_STACK *st, int loc)
+void * __cdecl OPENSSL_sk_delete(OPENSSL_STACK *st, int loc)
 {
     if (st == NULL || loc < 0 || loc >= st->num)
         return NULL;
@@ -313,43 +313,43 @@ static int internal_find(OPENSSL_STACK *st, const void *data,
     return r == NULL ? -1 : (int)((const void **)r - st->data);
 }
 
-int OPENSSL_sk_find(OPENSSL_STACK *st, const void *data)
+int __cdecl OPENSSL_sk_find(OPENSSL_STACK *st, const void *data)
 {
     return internal_find(st, data, OBJ_BSEARCH_FIRST_VALUE_ON_MATCH);
 }
 
-int OPENSSL_sk_find_ex(OPENSSL_STACK *st, const void *data)
+int __cdecl OPENSSL_sk_find_ex(OPENSSL_STACK *st, const void *data)
 {
     return internal_find(st, data, OBJ_BSEARCH_VALUE_ON_NOMATCH);
 }
 
-int OPENSSL_sk_push(OPENSSL_STACK *st, const void *data)
+int __cdecl OPENSSL_sk_push(OPENSSL_STACK *st, const void *data)
 {
     if (st == NULL)
         return -1;
     return OPENSSL_sk_insert(st, data, st->num);
 }
 
-int OPENSSL_sk_unshift(OPENSSL_STACK *st, const void *data)
+int __cdecl OPENSSL_sk_unshift(OPENSSL_STACK *st, const void *data)
 {
     return OPENSSL_sk_insert(st, data, 0);
 }
 
-void *OPENSSL_sk_shift(OPENSSL_STACK *st)
+void * __cdecl OPENSSL_sk_shift(OPENSSL_STACK *st)
 {
     if (st == NULL || st->num == 0)
         return NULL;
     return internal_delete(st, 0);
 }
 
-void *OPENSSL_sk_pop(OPENSSL_STACK *st)
+void * __cdecl OPENSSL_sk_pop(OPENSSL_STACK *st)
 {
     if (st == NULL || st->num == 0)
         return NULL;
     return internal_delete(st, st->num - 1);
 }
 
-void OPENSSL_sk_zero(OPENSSL_STACK *st)
+void __cdecl OPENSSL_sk_zero(OPENSSL_STACK *st)
 {
     if (st == NULL || st->num == 0)
         return;
@@ -357,7 +357,7 @@ void OPENSSL_sk_zero(OPENSSL_STACK *st)
     st->num = 0;
 }
 
-void OPENSSL_sk_pop_free(OPENSSL_STACK *st, OPENSSL_sk_freefunc func)
+void __cdecl OPENSSL_sk_pop_free(OPENSSL_STACK *st, OPENSSL_sk_freefunc func)
 {
     int i;
 
@@ -369,7 +369,7 @@ void OPENSSL_sk_pop_free(OPENSSL_STACK *st, OPENSSL_sk_freefunc func)
     OPENSSL_sk_free(st);
 }
 
-void OPENSSL_sk_free(OPENSSL_STACK *st)
+void __cdecl OPENSSL_sk_free(OPENSSL_STACK *st)
 {
     if (st == NULL)
         return;
@@ -377,19 +377,19 @@ void OPENSSL_sk_free(OPENSSL_STACK *st)
     OPENSSL_free(st);
 }
 
-int OPENSSL_sk_num(const OPENSSL_STACK *st)
+int __cdecl OPENSSL_sk_num(const OPENSSL_STACK *st)
 {
     return st == NULL ? -1 : st->num;
 }
 
-void *OPENSSL_sk_value(const OPENSSL_STACK *st, int i)
+void * __cdecl OPENSSL_sk_value(const OPENSSL_STACK *st, int i)
 {
     if (st == NULL || i < 0 || i >= st->num)
         return NULL;
     return (void *)st->data[i];
 }
 
-void *OPENSSL_sk_set(OPENSSL_STACK *st, int i, const void *data)
+void * __cdecl OPENSSL_sk_set(OPENSSL_STACK *st, int i, const void *data)
 {
     if (st == NULL || i < 0 || i >= st->num)
         return NULL;
@@ -398,7 +398,7 @@ void *OPENSSL_sk_set(OPENSSL_STACK *st, int i, const void *data)
     return (void *)st->data[i];
 }
 
-void OPENSSL_sk_sort(OPENSSL_STACK *st)
+void __cdecl OPENSSL_sk_sort(OPENSSL_STACK *st)
 {
     if (st != NULL && !st->sorted && st->comp != NULL) {
         if (st->num > 1)
@@ -407,7 +407,7 @@ void OPENSSL_sk_sort(OPENSSL_STACK *st)
     }
 }
 
-int OPENSSL_sk_is_sorted(const OPENSSL_STACK *st)
+int __cdecl OPENSSL_sk_is_sorted(const OPENSSL_STACK *st)
 {
     return st == NULL ? 1 : st->sorted;
 }
diff --git a/crypto/store/loader_file.c b/crypto/store/loader_file.c
index 6f569ee62d..56d9c82e1e 100644
--- a/crypto/store/loader_file.c
+++ b/crypto/store/loader_file.c
@@ -94,7 +94,7 @@ struct pem_pass_data {
     const char *prompt_info;
 };
 
-static int file_fill_pem_pass_data(struct pem_pass_data *pass_data,
+static int __cdecl file_fill_pem_pass_data(struct pem_pass_data *pass_data,
                                    const char *prompt_info,
                                    const UI_METHOD *ui_method, void *ui_data)
 {
@@ -157,7 +157,7 @@ static int file_get_pem_pass(char *buf, int num, int w, void *data)
  * Output:
  *    a OSSL_STORE_INFO
  */
-typedef OSSL_STORE_INFO *(*file_try_decode_fn)(const char *pem_name,
+typedef OSSL_STORE_INFO *(__cdecl *file_try_decode_fn)(const char *pem_name,
                                                const char *pem_header,
                                                const unsigned char *blob,
                                                size_t len, void **handler_ctx,
@@ -169,13 +169,13 @@ typedef OSSL_STORE_INFO *(*file_try_decode_fn)(const char *pem_name,
  * with the handler_ctx, otherwise 0.  This is only used when the handler is
  * marked repeatable.
  */
-typedef int (*file_eof_fn)(void *handler_ctx);
+typedef int (__cdecl *file_eof_fn)(void *handler_ctx);
 /*
  * The destroy_ctx function is used to destroy the handler_ctx that was
  * initiated by a repeatable try_decode function.  This is only used when
  * the handler is marked repeatable.
  */
-typedef void (*file_destroy_ctx_fn)(void **handler_ctx);
+typedef void (__cdecl *file_destroy_ctx_fn)(void **handler_ctx);
 
 typedef struct file_handler_st {
     const char *name;
@@ -192,7 +192,7 @@ typedef struct file_handler_st {
  * extracting all the interesting data from it and storing them internally,
  * then serving them one piece at a time.
  */
-static OSSL_STORE_INFO *try_decode_PKCS12(const char *pem_name,
+static OSSL_STORE_INFO * __cdecl try_decode_PKCS12(const char *pem_name,
                                           const char *pem_header,
                                           const unsigned char *blob,
                                           size_t len, void **pctx,
@@ -292,14 +292,14 @@ static OSSL_STORE_INFO *try_decode_PKCS12(const char *pem_name,
     return store_info;
 }
 
-static int eof_PKCS12(void *ctx_)
+static int __cdecl eof_PKCS12(void *ctx_)
 {
     STACK_OF(OSSL_STORE_INFO) *ctx = ctx_;
 
     return ctx == NULL || sk_OSSL_STORE_INFO_num(ctx) == 0;
 }
 
-static void destroy_ctx_PKCS12(void **pctx)
+static void __cdecl destroy_ctx_PKCS12(void **pctx)
 {
     STACK_OF(OSSL_STORE_INFO) *ctx = *pctx;
 
@@ -320,7 +320,7 @@ static FILE_HANDLER PKCS12_handler = {
  * into a new blob, which is returned as an EMBEDDED STORE_INFO.  The whole
  * decoding process will then start over with the new blob.
  */
-static OSSL_STORE_INFO *try_decode_PKCS8Encrypted(const char *pem_name,
+static OSSL_STORE_INFO * __cdecl try_decode_PKCS8Encrypted(const char *pem_name,
                                                   const char *pem_header,
                                                   const unsigned char *blob,
                                                   size_t len, void **pctx,
@@ -396,7 +396,7 @@ static FILE_HANDLER PKCS8Encrypted_handler = {
  * the PEM name).
  */
 int pem_check_suffix(const char *pem_str, const char *suffix);
-static OSSL_STORE_INFO *try_decode_PrivateKey(const char *pem_name,
+static OSSL_STORE_INFO * __cdecl try_decode_PrivateKey(const char *pem_name,
                                               const char *pem_header,
                                               const unsigned char *blob,
                                               size_t len, void **pctx,
@@ -472,7 +472,7 @@ static FILE_HANDLER PrivateKey_handler = {
 /*
  * Public key decoder.  Only supports SubjectPublicKeyInfo formatted keys.
  */
-static OSSL_STORE_INFO *try_decode_PUBKEY(const char *pem_name,
+static OSSL_STORE_INFO * __cdecl try_decode_PUBKEY(const char *pem_name,
                                           const char *pem_header,
                                           const unsigned char *blob,
                                           size_t len, void **pctx,
@@ -506,7 +506,7 @@ static FILE_HANDLER PUBKEY_handler = {
 /*
  * Key parameter decoder.
  */
-static OSSL_STORE_INFO *try_decode_params(const char *pem_name,
+static OSSL_STORE_INFO * __cdecl try_decode_params(const char *pem_name,
                                           const char *pem_header,
                                           const unsigned char *blob,
                                           size_t len, void **pctx,
@@ -589,7 +589,7 @@ static FILE_HANDLER params_handler = {
 /*
  * X.509 certificate decoder.
  */
-static OSSL_STORE_INFO *try_decode_X509Certificate(const char *pem_name,
+static OSSL_STORE_INFO * __cdecl try_decode_X509Certificate(const char *pem_name,
                                                    const char *pem_header,
                                                    const unsigned char *blob,
                                                    size_t len, void **pctx,
@@ -639,7 +639,7 @@ static FILE_HANDLER X509Certificate_handler = {
 /*
  * X.509 CRL decoder.
  */
-static OSSL_STORE_INFO *try_decode_X509CRL(const char *pem_name,
+static OSSL_STORE_INFO * __cdecl try_decode_X509CRL(const char *pem_name,
                                            const char *pem_header,
                                            const unsigned char *blob,
                                            size_t len, void **pctx,
@@ -738,7 +738,7 @@ struct ossl_store_loader_ctx_st {
     int expected_type;
 };
 
-static void OSSL_STORE_LOADER_CTX_free(OSSL_STORE_LOADER_CTX *ctx)
+static void __cdecl OSSL_STORE_LOADER_CTX_free(OSSL_STORE_LOADER_CTX *ctx)
 {
     if (ctx->type == is_dir) {
         OPENSSL_free(ctx->_.dir.uri);
@@ -752,7 +752,7 @@ static void OSSL_STORE_LOADER_CTX_free(OSSL_STORE_LOADER_CTX *ctx)
     OPENSSL_free(ctx);
 }
 
-static OSSL_STORE_LOADER_CTX *file_open(const OSSL_STORE_LOADER *loader,
+static OSSL_STORE_LOADER_CTX * __cdecl file_open(const OSSL_STORE_LOADER *loader,
                                         const char *uri,
                                         const UI_METHOD *ui_method,
                                         void *ui_data)
@@ -892,7 +892,7 @@ static OSSL_STORE_LOADER_CTX *file_open(const OSSL_STORE_LOADER *loader,
     return NULL;
 }
 
-static int file_ctrl(OSSL_STORE_LOADER_CTX *ctx, int cmd, va_list args)
+static int __cdecl file_ctrl(OSSL_STORE_LOADER_CTX *ctx, int cmd, va_list args)
 {
     int ret = 1;
 
@@ -923,13 +923,13 @@ static int file_ctrl(OSSL_STORE_LOADER_CTX *ctx, int cmd, va_list args)
     return ret;
 }
 
-static int file_expect(OSSL_STORE_LOADER_CTX *ctx, int expected)
+static int __cdecl file_expect(OSSL_STORE_LOADER_CTX *ctx, int expected)
 {
     ctx->expected_type = expected;
     return 1;
 }
 
-static int file_find(OSSL_STORE_LOADER_CTX *ctx, OSSL_STORE_SEARCH *search)
+static int __cdecl file_find(OSSL_STORE_LOADER_CTX *ctx, OSSL_STORE_SEARCH *search)
 {
     /*
      * If ctx == NULL, the library is looking to know if this loader supports
@@ -977,7 +977,7 @@ OSSL_STORE_LOADER_CTX *ossl_store_file_attach_pem_bio_int(BIO *bp)
     return ctx;
 }
 
-static OSSL_STORE_INFO *file_load_try_decode(OSSL_STORE_LOADER_CTX *ctx,
+static OSSL_STORE_INFO * __cdecl file_load_try_decode(OSSL_STORE_LOADER_CTX *ctx,
                                              const char *pem_name,
                                              const char *pem_header,
                                              unsigned char *data, size_t len,
@@ -1066,7 +1066,7 @@ static OSSL_STORE_INFO *file_load_try_decode(OSSL_STORE_LOADER_CTX *ctx,
     return result;
 }
 
-static OSSL_STORE_INFO *file_load_try_repeat(OSSL_STORE_LOADER_CTX *ctx,
+static OSSL_STORE_INFO * __cdecl file_load_try_repeat(OSSL_STORE_LOADER_CTX *ctx,
                                              const UI_METHOD *ui_method,
                                              void *ui_data)
 {
@@ -1089,14 +1089,14 @@ static OSSL_STORE_INFO *file_load_try_repeat(OSSL_STORE_LOADER_CTX *ctx,
     return result;
 }
 
-static void pem_free_flag(void *pem_data, int secure, size_t num)
+static void __cdecl pem_free_flag(void *pem_data, int secure, size_t num)
 {
     if (secure)
         OPENSSL_secure_clear_free(pem_data, num);
     else
         OPENSSL_free(pem_data);
 }
-static int file_read_pem(BIO *bp, char **pem_name, char **pem_header,
+static int __cdecl file_read_pem(BIO *bp, char **pem_name, char **pem_header,
                          unsigned char **data, long *len,
                          const UI_METHOD *ui_method,
                          void *ui_data, int secure)
@@ -1129,7 +1129,7 @@ static int file_read_pem(BIO *bp, char **pem_name, char **pem_header,
     return 1;
 }
 
-static int file_read_asn1(BIO *bp, unsigned char **data, long *len)
+static int __cdecl file_read_asn1(BIO *bp, unsigned char **data, long *len)
 {
     BUF_MEM *mem = NULL;
 
@@ -1143,7 +1143,7 @@ static int file_read_asn1(BIO *bp, unsigned char **data, long *len)
     return 1;
 }
 
-static int ends_with_dirsep(const char *uri)
+static int __cdecl ends_with_dirsep(const char *uri)
 {
     if (*uri != '\0')
         uri += strlen(uri) - 1;
@@ -1157,7 +1157,7 @@ static int ends_with_dirsep(const char *uri)
     return *uri == '/';
 }
 
-static int file_name_to_uri(OSSL_STORE_LOADER_CTX *ctx, const char *name,
+static int __cdecl file_name_to_uri(OSSL_STORE_LOADER_CTX *ctx, const char *name,
                             char **data)
 {
     assert(name != NULL);
@@ -1180,7 +1180,7 @@ static int file_name_to_uri(OSSL_STORE_LOADER_CTX *ctx, const char *name,
     return 1;
 }
 
-static int file_name_check(OSSL_STORE_LOADER_CTX *ctx, const char *name)
+static int __cdecl file_name_check(OSSL_STORE_LOADER_CTX *ctx, const char *name)
 {
     const char *p = NULL;
 
@@ -1242,9 +1242,9 @@ static int file_name_check(OSSL_STORE_LOADER_CTX *ctx, const char *name)
     return *p == '\0';
 }
 
-static int file_eof(OSSL_STORE_LOADER_CTX *ctx);
-static int file_error(OSSL_STORE_LOADER_CTX *ctx);
-static OSSL_STORE_INFO *file_load(OSSL_STORE_LOADER_CTX *ctx,
+static int __cdecl file_eof(OSSL_STORE_LOADER_CTX *ctx);
+static int __cdecl file_error(OSSL_STORE_LOADER_CTX *ctx);
+static OSSL_STORE_INFO * __cdecl file_load(OSSL_STORE_LOADER_CTX *ctx,
                                   const UI_METHOD *ui_method, void *ui_data)
 {
     OSSL_STORE_INFO *result = NULL;
@@ -1379,12 +1379,12 @@ static OSSL_STORE_INFO *file_load(OSSL_STORE_LOADER_CTX *ctx,
     return result;
 }
 
-static int file_error(OSSL_STORE_LOADER_CTX *ctx)
+static int __cdecl file_error(OSSL_STORE_LOADER_CTX *ctx)
 {
     return ctx->errcnt > 0;
 }
 
-static int file_eof(OSSL_STORE_LOADER_CTX *ctx)
+static int __cdecl file_eof(OSSL_STORE_LOADER_CTX *ctx)
 {
     if (ctx->type == is_dir)
         return ctx->_.dir.end_reached;
@@ -1395,7 +1395,7 @@ static int file_eof(OSSL_STORE_LOADER_CTX *ctx)
     return BIO_eof(ctx->_.file.file);
 }
 
-static int file_close(OSSL_STORE_LOADER_CTX *ctx)
+static int __cdecl file_close(OSSL_STORE_LOADER_CTX *ctx)
 {
     if (ctx->type == is_dir) {
         OPENSSL_DIR_end(&ctx->_.dir.ctx);
@@ -1426,7 +1426,7 @@ static OSSL_STORE_LOADER file_loader =
         file_close
     };
 
-static void store_file_loader_deinit(void)
+static void __cdecl store_file_loader_deinit(void)
 {
     ossl_store_unregister_loader_int(file_loader.scheme);
 }
diff --git a/crypto/store/store_err.c b/crypto/store/store_err.c
index 5a8a8404dd..0394642586 100644
--- a/crypto/store/store_err.c
+++ b/crypto/store/store_err.c
@@ -134,7 +134,7 @@ static const ERR_STRING_DATA OSSL_STORE_str_reasons[] = {
 
 #endif
 
-int ERR_load_OSSL_STORE_strings(void)
+int __cdecl ERR_load_OSSL_STORE_strings(void)
 {
 #ifndef OPENSSL_NO_ERR
     if (ERR_func_error_string(OSSL_STORE_str_functs[0].error) == NULL) {
diff --git a/crypto/store/store_lib.c b/crypto/store/store_lib.c
index 7de2e31f55..2cba9b5aa5 100644
--- a/crypto/store/store_lib.c
+++ b/crypto/store/store_lib.c
@@ -34,7 +34,7 @@ struct ossl_store_ctx_st {
     int loading;
 };
 
-OSSL_STORE_CTX *OSSL_STORE_open(const char *uri, const UI_METHOD *ui_method,
+OSSL_STORE_CTX * __cdecl OSSL_STORE_open(const char *uri, const UI_METHOD *ui_method,
                                 void *ui_data,
                                 OSSL_STORE_post_process_info_fn post_process,
                                 void *post_process_data)
@@ -114,7 +114,7 @@ OSSL_STORE_CTX *OSSL_STORE_open(const char *uri, const UI_METHOD *ui_method,
     return NULL;
 }
 
-int OSSL_STORE_ctrl(OSSL_STORE_CTX *ctx, int cmd, ...)
+int __cdecl OSSL_STORE_ctrl(OSSL_STORE_CTX *ctx, int cmd, ...)
 {
     va_list args;
     int ret;
@@ -126,14 +126,14 @@ int OSSL_STORE_ctrl(OSSL_STORE_CTX *ctx, int cmd, ...)
     return ret;
 }
 
-int OSSL_STORE_vctrl(OSSL_STORE_CTX *ctx, int cmd, va_list args)
+int __cdecl OSSL_STORE_vctrl(OSSL_STORE_CTX *ctx, int cmd, va_list args)
 {
     if (ctx->loader->ctrl != NULL)
         return ctx->loader->ctrl(ctx->loader_ctx, cmd, args);
     return 0;
 }
 
-int OSSL_STORE_expect(OSSL_STORE_CTX *ctx, int expected_type)
+int __cdecl OSSL_STORE_expect(OSSL_STORE_CTX *ctx, int expected_type)
 {
     if (ctx->loading) {
         OSSL_STOREerr(OSSL_STORE_F_OSSL_STORE_EXPECT,
@@ -147,7 +147,7 @@ int OSSL_STORE_expect(OSSL_STORE_CTX *ctx, int expected_type)
     return 1;
 }
 
-int OSSL_STORE_find(OSSL_STORE_CTX *ctx, OSSL_STORE_SEARCH *search)
+int __cdecl OSSL_STORE_find(OSSL_STORE_CTX *ctx, OSSL_STORE_SEARCH *search)
 {
     if (ctx->loading) {
         OSSL_STOREerr(OSSL_STORE_F_OSSL_STORE_FIND,
@@ -163,7 +163,7 @@ int OSSL_STORE_find(OSSL_STORE_CTX *ctx, OSSL_STORE_SEARCH *search)
     return ctx->loader->find(ctx->loader_ctx, search);
 }
 
-OSSL_STORE_INFO *OSSL_STORE_load(OSSL_STORE_CTX *ctx)
+OSSL_STORE_INFO * __cdecl OSSL_STORE_load(OSSL_STORE_CTX *ctx)
 {
     OSSL_STORE_INFO *v = NULL;
 
@@ -206,17 +206,17 @@ OSSL_STORE_INFO *OSSL_STORE_load(OSSL_STORE_CTX *ctx)
     return v;
 }
 
-int OSSL_STORE_error(OSSL_STORE_CTX *ctx)
+int __cdecl OSSL_STORE_error(OSSL_STORE_CTX *ctx)
 {
     return ctx->loader->error(ctx->loader_ctx);
 }
 
-int OSSL_STORE_eof(OSSL_STORE_CTX *ctx)
+int __cdecl OSSL_STORE_eof(OSSL_STORE_CTX *ctx)
 {
     return ctx->loader->eof(ctx->loader_ctx);
 }
 
-int OSSL_STORE_close(OSSL_STORE_CTX *ctx)
+int __cdecl OSSL_STORE_close(OSSL_STORE_CTX *ctx)
 {
     int loader_ret = ctx->loader->close(ctx->loader_ctx);
 
@@ -243,7 +243,7 @@ static OSSL_STORE_INFO *store_info_new(int type, void *data)
     return info;
 }
 
-OSSL_STORE_INFO *OSSL_STORE_INFO_new_NAME(char *name)
+OSSL_STORE_INFO * __cdecl OSSL_STORE_INFO_new_NAME(char *name)
 {
     OSSL_STORE_INFO *info = store_info_new(OSSL_STORE_INFO_NAME, NULL);
 
@@ -259,7 +259,7 @@ OSSL_STORE_INFO *OSSL_STORE_INFO_new_NAME(char *name)
     return info;
 }
 
-int OSSL_STORE_INFO_set0_NAME_description(OSSL_STORE_INFO *info, char *desc)
+int __cdecl OSSL_STORE_INFO_set0_NAME_description(OSSL_STORE_INFO *info, char *desc)
 {
     if (info->type != OSSL_STORE_INFO_NAME) {
         OSSL_STOREerr(OSSL_STORE_F_OSSL_STORE_INFO_SET0_NAME_DESCRIPTION,
@@ -271,7 +271,7 @@ int OSSL_STORE_INFO_set0_NAME_description(OSSL_STORE_INFO *info, char *desc)
 
     return 1;
 }
-OSSL_STORE_INFO *OSSL_STORE_INFO_new_PARAMS(EVP_PKEY *params)
+OSSL_STORE_INFO * __cdecl OSSL_STORE_INFO_new_PARAMS(EVP_PKEY *params)
 {
     OSSL_STORE_INFO *info = store_info_new(OSSL_STORE_INFO_PARAMS, params);
 
@@ -281,7 +281,7 @@ OSSL_STORE_INFO *OSSL_STORE_INFO_new_PARAMS(EVP_PKEY *params)
     return info;
 }
 
-OSSL_STORE_INFO *OSSL_STORE_INFO_new_PKEY(EVP_PKEY *pkey)
+OSSL_STORE_INFO * __cdecl OSSL_STORE_INFO_new_PKEY(EVP_PKEY *pkey)
 {
     OSSL_STORE_INFO *info = store_info_new(OSSL_STORE_INFO_PKEY, pkey);
 
@@ -291,7 +291,7 @@ OSSL_STORE_INFO *OSSL_STORE_INFO_new_PKEY(EVP_PKEY *pkey)
     return info;
 }
 
-OSSL_STORE_INFO *OSSL_STORE_INFO_new_CERT(X509 *x509)
+OSSL_STORE_INFO * __cdecl OSSL_STORE_INFO_new_CERT(X509 *x509)
 {
     OSSL_STORE_INFO *info = store_info_new(OSSL_STORE_INFO_CERT, x509);
 
@@ -301,7 +301,7 @@ OSSL_STORE_INFO *OSSL_STORE_INFO_new_CERT(X509 *x509)
     return info;
 }
 
-OSSL_STORE_INFO *OSSL_STORE_INFO_new_CRL(X509_CRL *crl)
+OSSL_STORE_INFO * __cdecl OSSL_STORE_INFO_new_CRL(X509_CRL *crl)
 {
     OSSL_STORE_INFO *info = store_info_new(OSSL_STORE_INFO_CRL, crl);
 
@@ -314,19 +314,19 @@ OSSL_STORE_INFO *OSSL_STORE_INFO_new_CRL(X509_CRL *crl)
 /*
  * Functions to try to extract data from a OSSL_STORE_INFO.
  */
-int OSSL_STORE_INFO_get_type(const OSSL_STORE_INFO *info)
+int __cdecl OSSL_STORE_INFO_get_type(const OSSL_STORE_INFO *info)
 {
     return info->type;
 }
 
-const char *OSSL_STORE_INFO_get0_NAME(const OSSL_STORE_INFO *info)
+const char * __cdecl OSSL_STORE_INFO_get0_NAME(const OSSL_STORE_INFO *info)
 {
     if (info->type == OSSL_STORE_INFO_NAME)
         return info->_.name.name;
     return NULL;
 }
 
-char *OSSL_STORE_INFO_get1_NAME(const OSSL_STORE_INFO *info)
+char * __cdecl OSSL_STORE_INFO_get1_NAME(const OSSL_STORE_INFO *info)
 {
     if (info->type == OSSL_STORE_INFO_NAME) {
         char *ret = OPENSSL_strdup(info->_.name.name);
@@ -341,14 +341,14 @@ char *OSSL_STORE_INFO_get1_NAME(const OSSL_STORE_INFO *info)
     return NULL;
 }
 
-const char *OSSL_STORE_INFO_get0_NAME_description(const OSSL_STORE_INFO *info)
+const char * __cdecl OSSL_STORE_INFO_get0_NAME_description(const OSSL_STORE_INFO *info)
 {
     if (info->type == OSSL_STORE_INFO_NAME)
         return info->_.name.desc;
     return NULL;
 }
 
-char *OSSL_STORE_INFO_get1_NAME_description(const OSSL_STORE_INFO *info)
+char * __cdecl OSSL_STORE_INFO_get1_NAME_description(const OSSL_STORE_INFO *info)
 {
     if (info->type == OSSL_STORE_INFO_NAME) {
         char *ret = OPENSSL_strdup(info->_.name.desc
@@ -364,14 +364,14 @@ char *OSSL_STORE_INFO_get1_NAME_description(const OSSL_STORE_INFO *info)
     return NULL;
 }
 
-EVP_PKEY *OSSL_STORE_INFO_get0_PARAMS(const OSSL_STORE_INFO *info)
+EVP_PKEY * __cdecl OSSL_STORE_INFO_get0_PARAMS(const OSSL_STORE_INFO *info)
 {
     if (info->type == OSSL_STORE_INFO_PARAMS)
         return info->_.params;
     return NULL;
 }
 
-EVP_PKEY *OSSL_STORE_INFO_get1_PARAMS(const OSSL_STORE_INFO *info)
+EVP_PKEY * __cdecl OSSL_STORE_INFO_get1_PARAMS(const OSSL_STORE_INFO *info)
 {
     if (info->type == OSSL_STORE_INFO_PARAMS) {
         EVP_PKEY_up_ref(info->_.params);
@@ -382,14 +382,14 @@ EVP_PKEY *OSSL_STORE_INFO_get1_PARAMS(const OSSL_STORE_INFO *info)
     return NULL;
 }
 
-EVP_PKEY *OSSL_STORE_INFO_get0_PKEY(const OSSL_STORE_INFO *info)
+EVP_PKEY * __cdecl OSSL_STORE_INFO_get0_PKEY(const OSSL_STORE_INFO *info)
 {
     if (info->type == OSSL_STORE_INFO_PKEY)
         return info->_.pkey;
     return NULL;
 }
 
-EVP_PKEY *OSSL_STORE_INFO_get1_PKEY(const OSSL_STORE_INFO *info)
+EVP_PKEY * __cdecl OSSL_STORE_INFO_get1_PKEY(const OSSL_STORE_INFO *info)
 {
     if (info->type == OSSL_STORE_INFO_PKEY) {
         EVP_PKEY_up_ref(info->_.pkey);
@@ -400,14 +400,14 @@ EVP_PKEY *OSSL_STORE_INFO_get1_PKEY(const OSSL_STORE_INFO *info)
     return NULL;
 }
 
-X509 *OSSL_STORE_INFO_get0_CERT(const OSSL_STORE_INFO *info)
+X509 * __cdecl OSSL_STORE_INFO_get0_CERT(const OSSL_STORE_INFO *info)
 {
     if (info->type == OSSL_STORE_INFO_CERT)
         return info->_.x509;
     return NULL;
 }
 
-X509 *OSSL_STORE_INFO_get1_CERT(const OSSL_STORE_INFO *info)
+X509 * __cdecl OSSL_STORE_INFO_get1_CERT(const OSSL_STORE_INFO *info)
 {
     if (info->type == OSSL_STORE_INFO_CERT) {
         X509_up_ref(info->_.x509);
@@ -418,14 +418,14 @@ X509 *OSSL_STORE_INFO_get1_CERT(const OSSL_STORE_INFO *info)
     return NULL;
 }
 
-X509_CRL *OSSL_STORE_INFO_get0_CRL(const OSSL_STORE_INFO *info)
+X509_CRL * __cdecl OSSL_STORE_INFO_get0_CRL(const OSSL_STORE_INFO *info)
 {
     if (info->type == OSSL_STORE_INFO_CRL)
         return info->_.crl;
     return NULL;
 }
 
-X509_CRL *OSSL_STORE_INFO_get1_CRL(const OSSL_STORE_INFO *info)
+X509_CRL * __cdecl OSSL_STORE_INFO_get1_CRL(const OSSL_STORE_INFO *info)
 {
     if (info->type == OSSL_STORE_INFO_CRL) {
         X509_CRL_up_ref(info->_.crl);
@@ -439,7 +439,7 @@ X509_CRL *OSSL_STORE_INFO_get1_CRL(const OSSL_STORE_INFO *info)
 /*
  * Free the OSSL_STORE_INFO
  */
-void OSSL_STORE_INFO_free(OSSL_STORE_INFO *info)
+void __cdecl OSSL_STORE_INFO_free(OSSL_STORE_INFO *info)
 {
     if (info != NULL) {
         switch (info->type) {
@@ -468,7 +468,7 @@ void OSSL_STORE_INFO_free(OSSL_STORE_INFO *info)
     }
 }
 
-int OSSL_STORE_supports_search(OSSL_STORE_CTX *ctx, int search_type)
+int __cdecl OSSL_STORE_supports_search(OSSL_STORE_CTX *ctx, int search_type)
 {
     OSSL_STORE_SEARCH tmp_search;
 
@@ -479,7 +479,7 @@ int OSSL_STORE_supports_search(OSSL_STORE_CTX *ctx, int search_type)
 }
 
 /* Search term constructors */
-OSSL_STORE_SEARCH *OSSL_STORE_SEARCH_by_name(X509_NAME *name)
+OSSL_STORE_SEARCH * __cdecl OSSL_STORE_SEARCH_by_name(X509_NAME *name)
 {
     OSSL_STORE_SEARCH *search = OPENSSL_zalloc(sizeof(*search));
 
@@ -494,7 +494,7 @@ OSSL_STORE_SEARCH *OSSL_STORE_SEARCH_by_name(X509_NAME *name)
     return search;
 }
 
-OSSL_STORE_SEARCH *OSSL_STORE_SEARCH_by_issuer_serial(X509_NAME *name,
+OSSL_STORE_SEARCH * __cdecl OSSL_STORE_SEARCH_by_issuer_serial(X509_NAME *name,
                                                     const ASN1_INTEGER *serial)
 {
     OSSL_STORE_SEARCH *search = OPENSSL_zalloc(sizeof(*search));
@@ -511,7 +511,7 @@ OSSL_STORE_SEARCH *OSSL_STORE_SEARCH_by_issuer_serial(X509_NAME *name,
     return search;
 }
 
-OSSL_STORE_SEARCH *OSSL_STORE_SEARCH_by_key_fingerprint(const EVP_MD *digest,
+OSSL_STORE_SEARCH * __cdecl OSSL_STORE_SEARCH_by_key_fingerprint(const EVP_MD *digest,
                                                         const unsigned char
                                                         *bytes, size_t len)
 {
@@ -541,7 +541,7 @@ OSSL_STORE_SEARCH *OSSL_STORE_SEARCH_by_key_fingerprint(const EVP_MD *digest,
     return search;
 }
 
-OSSL_STORE_SEARCH *OSSL_STORE_SEARCH_by_alias(const char *alias)
+OSSL_STORE_SEARCH * __cdecl OSSL_STORE_SEARCH_by_alias(const char *alias)
 {
     OSSL_STORE_SEARCH *search = OPENSSL_zalloc(sizeof(*search));
 
@@ -558,41 +558,41 @@ OSSL_STORE_SEARCH *OSSL_STORE_SEARCH_by_alias(const char *alias)
 }
 
 /* Search term destructor */
-void OSSL_STORE_SEARCH_free(OSSL_STORE_SEARCH *search)
+void __cdecl OSSL_STORE_SEARCH_free(OSSL_STORE_SEARCH *search)
 {
     OPENSSL_free(search);
 }
 
 /* Search term accessors */
-int OSSL_STORE_SEARCH_get_type(const OSSL_STORE_SEARCH *criterion)
+int __cdecl OSSL_STORE_SEARCH_get_type(const OSSL_STORE_SEARCH *criterion)
 {
     return criterion->search_type;
 }
 
-X509_NAME *OSSL_STORE_SEARCH_get0_name(OSSL_STORE_SEARCH *criterion)
+X509_NAME * __cdecl OSSL_STORE_SEARCH_get0_name(OSSL_STORE_SEARCH *criterion)
 {
     return criterion->name;
 }
 
-const ASN1_INTEGER *OSSL_STORE_SEARCH_get0_serial(const OSSL_STORE_SEARCH
+const ASN1_INTEGER * __cdecl OSSL_STORE_SEARCH_get0_serial(const OSSL_STORE_SEARCH
                                                  *criterion)
 {
     return criterion->serial;
 }
 
-const unsigned char *OSSL_STORE_SEARCH_get0_bytes(const OSSL_STORE_SEARCH
+const unsigned char * __cdecl OSSL_STORE_SEARCH_get0_bytes(const OSSL_STORE_SEARCH
                                                   *criterion, size_t *length)
 {
     *length = criterion->stringlength;
     return criterion->string;
 }
 
-const char *OSSL_STORE_SEARCH_get0_string(const OSSL_STORE_SEARCH *criterion)
+const char * __cdecl OSSL_STORE_SEARCH_get0_string(const OSSL_STORE_SEARCH *criterion)
 {
     return (const char *)criterion->string;
 }
 
-const EVP_MD *OSSL_STORE_SEARCH_get0_digest(const OSSL_STORE_SEARCH *criterion)
+const EVP_MD * __cdecl OSSL_STORE_SEARCH_get0_digest(const OSSL_STORE_SEARCH *criterion)
 {
     return criterion->digest;
 }
diff --git a/crypto/store/store_register.c b/crypto/store/store_register.c
index e68cb3c568..1bffbf7fec 100644
--- a/crypto/store/store_register.c
+++ b/crypto/store/store_register.c
@@ -28,7 +28,7 @@ DEFINE_RUN_ONCE_STATIC(do_registry_init)
  *  Functions for manipulating OSSL_STORE_LOADERs
  */
 
-OSSL_STORE_LOADER *OSSL_STORE_LOADER_new(ENGINE *e, const char *scheme)
+OSSL_STORE_LOADER * __cdecl OSSL_STORE_LOADER_new(ENGINE *e, const char *scheme)
 {
     OSSL_STORE_LOADER *res = NULL;
 
@@ -54,73 +54,73 @@ OSSL_STORE_LOADER *OSSL_STORE_LOADER_new(ENGINE *e, const char *scheme)
     return res;
 }
 
-const ENGINE *OSSL_STORE_LOADER_get0_engine(const OSSL_STORE_LOADER *loader)
+const ENGINE * __cdecl OSSL_STORE_LOADER_get0_engine(const OSSL_STORE_LOADER *loader)
 {
     return loader->engine;
 }
 
-const char *OSSL_STORE_LOADER_get0_scheme(const OSSL_STORE_LOADER *loader)
+const char * __cdecl OSSL_STORE_LOADER_get0_scheme(const OSSL_STORE_LOADER *loader)
 {
     return loader->scheme;
 }
 
-int OSSL_STORE_LOADER_set_open(OSSL_STORE_LOADER *loader,
+int __cdecl OSSL_STORE_LOADER_set_open(OSSL_STORE_LOADER *loader,
                                OSSL_STORE_open_fn open_function)
 {
     loader->open = open_function;
     return 1;
 }
 
-int OSSL_STORE_LOADER_set_ctrl(OSSL_STORE_LOADER *loader,
+int __cdecl OSSL_STORE_LOADER_set_ctrl(OSSL_STORE_LOADER *loader,
                                OSSL_STORE_ctrl_fn ctrl_function)
 {
     loader->ctrl = ctrl_function;
     return 1;
 }
 
-int OSSL_STORE_LOADER_set_expect(OSSL_STORE_LOADER *loader,
+int __cdecl OSSL_STORE_LOADER_set_expect(OSSL_STORE_LOADER *loader,
                                  OSSL_STORE_expect_fn expect_function)
 {
     loader->expect = expect_function;
     return 1;
 }
 
-int OSSL_STORE_LOADER_set_find(OSSL_STORE_LOADER *loader,
+int __cdecl OSSL_STORE_LOADER_set_find(OSSL_STORE_LOADER *loader,
                                OSSL_STORE_find_fn find_function)
 {
     loader->find = find_function;
     return 1;
 }
 
-int OSSL_STORE_LOADER_set_load(OSSL_STORE_LOADER *loader,
+int __cdecl OSSL_STORE_LOADER_set_load(OSSL_STORE_LOADER *loader,
                                OSSL_STORE_load_fn load_function)
 {
     loader->load = load_function;
     return 1;
 }
 
-int OSSL_STORE_LOADER_set_eof(OSSL_STORE_LOADER *loader,
+int __cdecl OSSL_STORE_LOADER_set_eof(OSSL_STORE_LOADER *loader,
                               OSSL_STORE_eof_fn eof_function)
 {
     loader->eof = eof_function;
     return 1;
 }
 
-int OSSL_STORE_LOADER_set_error(OSSL_STORE_LOADER *loader,
+int __cdecl OSSL_STORE_LOADER_set_error(OSSL_STORE_LOADER *loader,
                                 OSSL_STORE_error_fn error_function)
 {
     loader->error = error_function;
     return 1;
 }
 
-int OSSL_STORE_LOADER_set_close(OSSL_STORE_LOADER *loader,
+int __cdecl OSSL_STORE_LOADER_set_close(OSSL_STORE_LOADER *loader,
                                 OSSL_STORE_close_fn close_function)
 {
     loader->close = close_function;
     return 1;
 }
 
-void OSSL_STORE_LOADER_free(OSSL_STORE_LOADER *loader)
+void __cdecl OSSL_STORE_LOADER_free(OSSL_STORE_LOADER *loader)
 {
     OPENSSL_free(loader);
 }
@@ -129,12 +129,12 @@ void OSSL_STORE_LOADER_free(OSSL_STORE_LOADER *loader)
  *  Functions for registering OSSL_STORE_LOADERs
  */
 
-static unsigned long store_loader_hash(const OSSL_STORE_LOADER *v)
+static unsigned long __cdecl store_loader_hash(const OSSL_STORE_LOADER *v)
 {
     return OPENSSL_LH_strhash(v->scheme);
 }
 
-static int store_loader_cmp(const OSSL_STORE_LOADER *a,
+static int __cdecl store_loader_cmp(const OSSL_STORE_LOADER *a,
                             const OSSL_STORE_LOADER *b)
 {
     assert(a->scheme != NULL && b->scheme != NULL);
@@ -196,7 +196,7 @@ int ossl_store_register_loader_int(OSSL_STORE_LOADER *loader)
 
     return ok;
 }
-int OSSL_STORE_register_loader(OSSL_STORE_LOADER *loader)
+int __cdecl OSSL_STORE_register_loader(OSSL_STORE_LOADER *loader)
 {
     if (!ossl_store_init_once())
         return 0;
@@ -267,7 +267,7 @@ OSSL_STORE_LOADER *ossl_store_unregister_loader_int(const char *scheme)
 
     return loader;
 }
-OSSL_STORE_LOADER *OSSL_STORE_unregister_loader(const char *scheme)
+OSSL_STORE_LOADER * __cdecl OSSL_STORE_unregister_loader(const char *scheme)
 {
     if (!ossl_store_init_once())
         return 0;
@@ -288,7 +288,7 @@ void ossl_store_destroy_loaders_int(void)
  */
 
 IMPLEMENT_LHASH_DOALL_ARG_CONST(OSSL_STORE_LOADER, void);
-int OSSL_STORE_do_all_loaders(void (*do_function) (const OSSL_STORE_LOADER
+int __cdecl OSSL_STORE_do_all_loaders(void (*do_function) (const OSSL_STORE_LOADER
                                                    *loader, void *do_arg),
                               void *do_arg)
 {
diff --git a/crypto/store/store_strings.c b/crypto/store/store_strings.c
index 76cf316483..02064b35d2 100644
--- a/crypto/store/store_strings.c
+++ b/crypto/store/store_strings.c
@@ -17,7 +17,7 @@ static char *type_strings[] = {
     "CRL"                        /* OSSL_STORE_INFO_CRL */
 };
 
-const char *OSSL_STORE_INFO_type_string(int type)
+const char * __cdecl OSSL_STORE_INFO_type_string(int type)
 {
     int types = sizeof(type_strings) / sizeof(type_strings[0]);
 
diff --git a/crypto/threads_none.c b/crypto/threads_none.c
index aabf0e0dc0..da33715da3 100644
--- a/crypto/threads_none.c
+++ b/crypto/threads_none.c
@@ -17,7 +17,7 @@
 #  include <unistd.h>
 # endif
 
-CRYPTO_RWLOCK *CRYPTO_THREAD_lock_new(void)
+CRYPTO_RWLOCK * __cdecl CRYPTO_THREAD_lock_new(void)
 {
     CRYPTO_RWLOCK *lock;
 
@@ -31,28 +31,28 @@ CRYPTO_RWLOCK *CRYPTO_THREAD_lock_new(void)
     return lock;
 }
 
-int CRYPTO_THREAD_read_lock(CRYPTO_RWLOCK *lock)
+int __cdecl CRYPTO_THREAD_read_lock(CRYPTO_RWLOCK *lock)
 {
     if (!ossl_assert(*(unsigned int *)lock == 1))
         return 0;
     return 1;
 }
 
-int CRYPTO_THREAD_write_lock(CRYPTO_RWLOCK *lock)
+int __cdecl CRYPTO_THREAD_write_lock(CRYPTO_RWLOCK *lock)
 {
     if (!ossl_assert(*(unsigned int *)lock == 1))
         return 0;
     return 1;
 }
 
-int CRYPTO_THREAD_unlock(CRYPTO_RWLOCK *lock)
+int __cdecl CRYPTO_THREAD_unlock(CRYPTO_RWLOCK *lock)
 {
     if (!ossl_assert(*(unsigned int *)lock == 1))
         return 0;
     return 1;
 }
 
-void CRYPTO_THREAD_lock_free(CRYPTO_RWLOCK *lock) {
+void __cdecl CRYPTO_THREAD_lock_free(CRYPTO_RWLOCK *lock) {
     if (lock == NULL)
         return;
 
@@ -62,7 +62,7 @@ void CRYPTO_THREAD_lock_free(CRYPTO_RWLOCK *lock) {
     return;
 }
 
-int CRYPTO_THREAD_run_once(CRYPTO_ONCE *once, void (*init)(void))
+int __cdecl CRYPTO_THREAD_run_once(CRYPTO_ONCE *once, void (__cdecl *init)(void))
 {
     if (*once != 0)
         return 1;
@@ -77,7 +77,7 @@ int CRYPTO_THREAD_run_once(CRYPTO_ONCE *once, void (*init)(void))
 
 static void *thread_local_storage[OPENSSL_CRYPTO_THREAD_LOCAL_KEY_MAX];
 
-int CRYPTO_THREAD_init_local(CRYPTO_THREAD_LOCAL *key, void (*cleanup)(void *))
+int __cdecl CRYPTO_THREAD_init_local(CRYPTO_THREAD_LOCAL *key, void (*cleanup)(void *))
 {
     static unsigned int thread_local_key = 0;
 
@@ -91,7 +91,7 @@ int CRYPTO_THREAD_init_local(CRYPTO_THREAD_LOCAL *key, void (*cleanup)(void *))
     return 1;
 }
 
-void *CRYPTO_THREAD_get_local(CRYPTO_THREAD_LOCAL *key)
+void * __cdecl CRYPTO_THREAD_get_local(CRYPTO_THREAD_LOCAL *key)
 {
     if (*key >= OPENSSL_CRYPTO_THREAD_LOCAL_KEY_MAX)
         return NULL;
@@ -99,7 +99,7 @@ void *CRYPTO_THREAD_get_local(CRYPTO_THREAD_LOCAL *key)
     return thread_local_storage[*key];
 }
 
-int CRYPTO_THREAD_set_local(CRYPTO_THREAD_LOCAL *key, void *val)
+int __cdecl CRYPTO_THREAD_set_local(CRYPTO_THREAD_LOCAL *key, void *val)
 {
     if (*key >= OPENSSL_CRYPTO_THREAD_LOCAL_KEY_MAX)
         return 0;
@@ -109,23 +109,23 @@ int CRYPTO_THREAD_set_local(CRYPTO_THREAD_LOCAL *key, void *val)
     return 1;
 }
 
-int CRYPTO_THREAD_cleanup_local(CRYPTO_THREAD_LOCAL *key)
+int __cdecl CRYPTO_THREAD_cleanup_local(CRYPTO_THREAD_LOCAL *key)
 {
     *key = OPENSSL_CRYPTO_THREAD_LOCAL_KEY_MAX + 1;
     return 1;
 }
 
-CRYPTO_THREAD_ID CRYPTO_THREAD_get_current_id(void)
+CRYPTO_THREAD_ID __cdecl CRYPTO_THREAD_get_current_id(void)
 {
     return 0;
 }
 
-int CRYPTO_THREAD_compare_id(CRYPTO_THREAD_ID a, CRYPTO_THREAD_ID b)
+int __cdecl CRYPTO_THREAD_compare_id(CRYPTO_THREAD_ID a, CRYPTO_THREAD_ID b)
 {
     return (a == b);
 }
 
-int CRYPTO_atomic_add(int *val, int amount, int *ret, CRYPTO_RWLOCK *lock)
+int __cdecl CRYPTO_atomic_add(int *val, int amount, int *ret, CRYPTO_RWLOCK *lock)
 {
     *val += amount;
     *ret  = *val;
@@ -133,12 +133,12 @@ int CRYPTO_atomic_add(int *val, int amount, int *ret, CRYPTO_RWLOCK *lock)
     return 1;
 }
 
-int openssl_init_fork_handlers(void)
+int __cdecl openssl_init_fork_handlers(void)
 {
     return 0;
 }
 
-int openssl_get_fork_id(void)
+int __cdecl openssl_get_fork_id(void)
 {
 # if defined(OPENSSL_SYS_UNIX)
     return getpid();
diff --git a/crypto/threads_pthread.c b/crypto/threads_pthread.c
index 1774a2b2ac..7d2dba5de7 100644
--- a/crypto/threads_pthread.c
+++ b/crypto/threads_pthread.c
@@ -21,7 +21,7 @@
 #  define USE_RWLOCK
 # endif
 
-CRYPTO_RWLOCK *CRYPTO_THREAD_lock_new(void)
+CRYPTO_RWLOCK * __cdecl CRYPTO_THREAD_lock_new(void)
 {
 # ifdef USE_RWLOCK
     CRYPTO_RWLOCK *lock;
@@ -59,7 +59,7 @@ CRYPTO_RWLOCK *CRYPTO_THREAD_lock_new(void)
     return lock;
 }
 
-int CRYPTO_THREAD_read_lock(CRYPTO_RWLOCK *lock)
+int __cdecl CRYPTO_THREAD_read_lock(CRYPTO_RWLOCK *lock)
 {
 # ifdef USE_RWLOCK
     if (pthread_rwlock_rdlock(lock) != 0)
@@ -72,7 +72,7 @@ int CRYPTO_THREAD_read_lock(CRYPTO_RWLOCK *lock)
     return 1;
 }
 
-int CRYPTO_THREAD_write_lock(CRYPTO_RWLOCK *lock)
+int __cdecl CRYPTO_THREAD_write_lock(CRYPTO_RWLOCK *lock)
 {
 # ifdef USE_RWLOCK
     if (pthread_rwlock_wrlock(lock) != 0)
@@ -85,7 +85,7 @@ int CRYPTO_THREAD_write_lock(CRYPTO_RWLOCK *lock)
     return 1;
 }
 
-int CRYPTO_THREAD_unlock(CRYPTO_RWLOCK *lock)
+int __cdecl CRYPTO_THREAD_unlock(CRYPTO_RWLOCK *lock)
 {
 # ifdef USE_RWLOCK
     if (pthread_rwlock_unlock(lock) != 0)
@@ -98,7 +98,7 @@ int CRYPTO_THREAD_unlock(CRYPTO_RWLOCK *lock)
     return 1;
 }
 
-void CRYPTO_THREAD_lock_free(CRYPTO_RWLOCK *lock)
+void __cdecl CRYPTO_THREAD_lock_free(CRYPTO_RWLOCK *lock)
 {
     if (lock == NULL)
         return;
@@ -113,7 +113,7 @@ void CRYPTO_THREAD_lock_free(CRYPTO_RWLOCK *lock)
     return;
 }
 
-int CRYPTO_THREAD_run_once(CRYPTO_ONCE *once, void (*init)(void))
+int __cdecl CRYPTO_THREAD_run_once(CRYPTO_ONCE *once, void (__cdecl *init)(void))
 {
     if (pthread_once(once, init) != 0)
         return 0;
@@ -160,7 +160,7 @@ int CRYPTO_THREAD_compare_id(CRYPTO_THREAD_ID a, CRYPTO_THREAD_ID b)
     return pthread_equal(a, b);
 }
 
-int CRYPTO_atomic_add(int *val, int amount, int *ret, CRYPTO_RWLOCK *lock)
+int __cdecl CRYPTO_atomic_add(int *val, int amount, int *ret, CRYPTO_RWLOCK *lock)
 {
 # if defined(__GNUC__) && defined(__ATOMIC_ACQ_REL)
     if (__atomic_is_lock_free(sizeof(*val), val)) {
@@ -190,7 +190,7 @@ static void fork_once_func(void)
 }
 # endif
 
-int openssl_init_fork_handlers(void)
+int __cdecl openssl_init_fork_handlers(void)
 {
 # ifdef OPENSSL_SYS_UNIX
     if (pthread_once(&fork_once_control, fork_once_func) == 0)
@@ -199,7 +199,7 @@ int openssl_init_fork_handlers(void)
     return 0;
 }
 
-int openssl_get_fork_id(void)
+int __cdecl openssl_get_fork_id(void)
 {
     return getpid();
 }
diff --git a/crypto/threads_win.c b/crypto/threads_win.c
index 44a360fcab..745f61f342 100644
--- a/crypto/threads_win.c
+++ b/crypto/threads_win.c
@@ -15,7 +15,7 @@
 
 #if defined(OPENSSL_THREADS) && !defined(CRYPTO_TDEBUG) && defined(OPENSSL_SYS_WINDOWS)
 
-CRYPTO_RWLOCK *CRYPTO_THREAD_lock_new(void)
+CRYPTO_RWLOCK * __cdecl CRYPTO_THREAD_lock_new(void)
 {
     CRYPTO_RWLOCK *lock;
 
@@ -37,25 +37,25 @@ CRYPTO_RWLOCK *CRYPTO_THREAD_lock_new(void)
     return lock;
 }
 
-int CRYPTO_THREAD_read_lock(CRYPTO_RWLOCK *lock)
+int __cdecl CRYPTO_THREAD_read_lock(CRYPTO_RWLOCK *lock)
 {
     EnterCriticalSection(lock);
     return 1;
 }
 
-int CRYPTO_THREAD_write_lock(CRYPTO_RWLOCK *lock)
+int __cdecl CRYPTO_THREAD_write_lock(CRYPTO_RWLOCK *lock)
 {
     EnterCriticalSection(lock);
     return 1;
 }
 
-int CRYPTO_THREAD_unlock(CRYPTO_RWLOCK *lock)
+int __cdecl CRYPTO_THREAD_unlock(CRYPTO_RWLOCK *lock)
 {
     LeaveCriticalSection(lock);
     return 1;
 }
 
-void CRYPTO_THREAD_lock_free(CRYPTO_RWLOCK *lock)
+void __cdecl CRYPTO_THREAD_lock_free(CRYPTO_RWLOCK *lock)
 {
     if (lock == NULL)
         return;
@@ -74,7 +74,7 @@ void CRYPTO_THREAD_lock_free(CRYPTO_RWLOCK *lock)
  * We don't use InitOnceExecuteOnce because that isn't available in WinXP which
  * we still have to support.
  */
-int CRYPTO_THREAD_run_once(CRYPTO_ONCE *once, void (*init)(void))
+int __cdecl CRYPTO_THREAD_run_once(CRYPTO_ONCE *once, void (__cdecl *init)(void))
 {
     LONG volatile *lock = (LONG *)once;
     LONG result;
@@ -94,7 +94,7 @@ int CRYPTO_THREAD_run_once(CRYPTO_ONCE *once, void (*init)(void))
     return (*lock == ONCE_DONE);
 }
 
-int CRYPTO_THREAD_init_local(CRYPTO_THREAD_LOCAL *key, void (*cleanup)(void *))
+int __cdecl CRYPTO_THREAD_init_local(CRYPTO_THREAD_LOCAL *key, void (__cdecl *cleanup)(void *))
 {
     *key = TlsAlloc();
     if (*key == TLS_OUT_OF_INDEXES)
@@ -103,7 +103,7 @@ int CRYPTO_THREAD_init_local(CRYPTO_THREAD_LOCAL *key, void (*cleanup)(void *))
     return 1;
 }
 
-void *CRYPTO_THREAD_get_local(CRYPTO_THREAD_LOCAL *key)
+void * __cdecl CRYPTO_THREAD_get_local(CRYPTO_THREAD_LOCAL *key)
 {
     DWORD last_error;
     void *ret;
@@ -127,7 +127,7 @@ void *CRYPTO_THREAD_get_local(CRYPTO_THREAD_LOCAL *key)
     return ret;
 }
 
-int CRYPTO_THREAD_set_local(CRYPTO_THREAD_LOCAL *key, void *val)
+int __cdecl CRYPTO_THREAD_set_local(CRYPTO_THREAD_LOCAL *key, void *val)
 {
     if (TlsSetValue(*key, val) == 0)
         return 0;
@@ -135,7 +135,7 @@ int CRYPTO_THREAD_set_local(CRYPTO_THREAD_LOCAL *key, void *val)
     return 1;
 }
 
-int CRYPTO_THREAD_cleanup_local(CRYPTO_THREAD_LOCAL *key)
+int __cdecl CRYPTO_THREAD_cleanup_local(CRYPTO_THREAD_LOCAL *key)
 {
     if (TlsFree(*key) == 0)
         return 0;
@@ -143,28 +143,28 @@ int CRYPTO_THREAD_cleanup_local(CRYPTO_THREAD_LOCAL *key)
     return 1;
 }
 
-CRYPTO_THREAD_ID CRYPTO_THREAD_get_current_id(void)
+CRYPTO_THREAD_ID __cdecl CRYPTO_THREAD_get_current_id(void)
 {
     return GetCurrentThreadId();
 }
 
-int CRYPTO_THREAD_compare_id(CRYPTO_THREAD_ID a, CRYPTO_THREAD_ID b)
+int __cdecl CRYPTO_THREAD_compare_id(CRYPTO_THREAD_ID a, CRYPTO_THREAD_ID b)
 {
     return (a == b);
 }
 
-int CRYPTO_atomic_add(int *val, int amount, int *ret, CRYPTO_RWLOCK *lock)
+int __cdecl CRYPTO_atomic_add(int *val, int amount, int *ret, CRYPTO_RWLOCK *lock)
 {
     *ret = InterlockedExchangeAdd(val, amount) + amount;
     return 1;
 }
 
-int openssl_init_fork_handlers(void)
+int __cdecl openssl_init_fork_handlers(void)
 {
     return 0;
 }
 
-int openssl_get_fork_id(void)
+int __cdecl openssl_get_fork_id(void)
 {
     return 0;
 }
diff --git a/crypto/ts/ts_asn1.c b/crypto/ts/ts_asn1.c
index 8707207082..ff5b77c36c 100644
--- a/crypto/ts/ts_asn1.c
+++ b/crypto/ts/ts_asn1.c
@@ -19,24 +19,24 @@ ASN1_SEQUENCE(TS_MSG_IMPRINT) = {
 
 IMPLEMENT_ASN1_FUNCTIONS_const(TS_MSG_IMPRINT)
 IMPLEMENT_ASN1_DUP_FUNCTION(TS_MSG_IMPRINT)
-TS_MSG_IMPRINT *d2i_TS_MSG_IMPRINT_bio(BIO *bp, TS_MSG_IMPRINT **a)
+TS_MSG_IMPRINT * __cdecl d2i_TS_MSG_IMPRINT_bio(BIO *bp, TS_MSG_IMPRINT **a)
 {
     return ASN1_d2i_bio_of(TS_MSG_IMPRINT, TS_MSG_IMPRINT_new,
                            d2i_TS_MSG_IMPRINT, bp, a);
 }
 
-int i2d_TS_MSG_IMPRINT_bio(BIO *bp, TS_MSG_IMPRINT *a)
+int __cdecl i2d_TS_MSG_IMPRINT_bio(BIO *bp, TS_MSG_IMPRINT *a)
 {
     return ASN1_i2d_bio_of_const(TS_MSG_IMPRINT, i2d_TS_MSG_IMPRINT, bp, a);
 }
 #ifndef OPENSSL_NO_STDIO
-TS_MSG_IMPRINT *d2i_TS_MSG_IMPRINT_fp(FILE *fp, TS_MSG_IMPRINT **a)
+TS_MSG_IMPRINT * __cdecl d2i_TS_MSG_IMPRINT_fp(FILE *fp, TS_MSG_IMPRINT **a)
 {
     return ASN1_d2i_fp_of(TS_MSG_IMPRINT, TS_MSG_IMPRINT_new,
                           d2i_TS_MSG_IMPRINT, fp, a);
 }
 
-int i2d_TS_MSG_IMPRINT_fp(FILE *fp, TS_MSG_IMPRINT *a)
+int __cdecl i2d_TS_MSG_IMPRINT_fp(FILE *fp, TS_MSG_IMPRINT *a)
 {
     return ASN1_i2d_fp_of_const(TS_MSG_IMPRINT, i2d_TS_MSG_IMPRINT, fp, a);
 }
@@ -53,22 +53,22 @@ ASN1_SEQUENCE(TS_REQ) = {
 
 IMPLEMENT_ASN1_FUNCTIONS_const(TS_REQ)
 IMPLEMENT_ASN1_DUP_FUNCTION(TS_REQ)
-TS_REQ *d2i_TS_REQ_bio(BIO *bp, TS_REQ **a)
+TS_REQ * __cdecl d2i_TS_REQ_bio(BIO *bp, TS_REQ **a)
 {
     return ASN1_d2i_bio_of(TS_REQ, TS_REQ_new, d2i_TS_REQ, bp, a);
 }
 
-int i2d_TS_REQ_bio(BIO *bp, TS_REQ *a)
+int __cdecl i2d_TS_REQ_bio(BIO *bp, TS_REQ *a)
 {
     return ASN1_i2d_bio_of_const(TS_REQ, i2d_TS_REQ, bp, a);
 }
 #ifndef OPENSSL_NO_STDIO
-TS_REQ *d2i_TS_REQ_fp(FILE *fp, TS_REQ **a)
+TS_REQ * __cdecl d2i_TS_REQ_fp(FILE *fp, TS_REQ **a)
 {
     return ASN1_d2i_fp_of(TS_REQ, TS_REQ_new, d2i_TS_REQ, fp, a);
 }
 
-int i2d_TS_REQ_fp(FILE *fp, TS_REQ *a)
+int __cdecl i2d_TS_REQ_fp(FILE *fp, TS_REQ *a)
 {
     return ASN1_i2d_fp_of_const(TS_REQ, i2d_TS_REQ, fp, a);
 }
@@ -98,24 +98,24 @@ ASN1_SEQUENCE(TS_TST_INFO) = {
 
 IMPLEMENT_ASN1_FUNCTIONS_const(TS_TST_INFO)
 IMPLEMENT_ASN1_DUP_FUNCTION(TS_TST_INFO)
-TS_TST_INFO *d2i_TS_TST_INFO_bio(BIO *bp, TS_TST_INFO **a)
+TS_TST_INFO * __cdecl d2i_TS_TST_INFO_bio(BIO *bp, TS_TST_INFO **a)
 {
     return ASN1_d2i_bio_of(TS_TST_INFO, TS_TST_INFO_new, d2i_TS_TST_INFO, bp,
                            a);
 }
 
-int i2d_TS_TST_INFO_bio(BIO *bp, TS_TST_INFO *a)
+int __cdecl i2d_TS_TST_INFO_bio(BIO *bp, TS_TST_INFO *a)
 {
     return ASN1_i2d_bio_of_const(TS_TST_INFO, i2d_TS_TST_INFO, bp, a);
 }
 #ifndef OPENSSL_NO_STDIO
-TS_TST_INFO *d2i_TS_TST_INFO_fp(FILE *fp, TS_TST_INFO **a)
+TS_TST_INFO * __cdecl d2i_TS_TST_INFO_fp(FILE *fp, TS_TST_INFO **a)
 {
     return ASN1_d2i_fp_of(TS_TST_INFO, TS_TST_INFO_new, d2i_TS_TST_INFO, fp,
                           a);
 }
 
-int i2d_TS_TST_INFO_fp(FILE *fp, TS_TST_INFO *a)
+int __cdecl i2d_TS_TST_INFO_fp(FILE *fp, TS_TST_INFO *a)
 {
     return ASN1_i2d_fp_of_const(TS_TST_INFO, i2d_TS_TST_INFO, fp, a);
 }
@@ -180,22 +180,22 @@ IMPLEMENT_ASN1_FUNCTIONS_const(TS_RESP)
 
 IMPLEMENT_ASN1_DUP_FUNCTION(TS_RESP)
 
-TS_RESP *d2i_TS_RESP_bio(BIO *bp, TS_RESP **a)
+TS_RESP * __cdecl d2i_TS_RESP_bio(BIO *bp, TS_RESP **a)
 {
     return ASN1_d2i_bio_of(TS_RESP, TS_RESP_new, d2i_TS_RESP, bp, a);
 }
 
-int i2d_TS_RESP_bio(BIO *bp, TS_RESP *a)
+int __cdecl i2d_TS_RESP_bio(BIO *bp, TS_RESP *a)
 {
     return ASN1_i2d_bio_of_const(TS_RESP, i2d_TS_RESP, bp, a);
 }
 #ifndef OPENSSL_NO_STDIO
-TS_RESP *d2i_TS_RESP_fp(FILE *fp, TS_RESP **a)
+TS_RESP * __cdecl d2i_TS_RESP_fp(FILE *fp, TS_RESP **a)
 {
     return ASN1_d2i_fp_of(TS_RESP, TS_RESP_new, d2i_TS_RESP, fp, a);
 }
 
-int i2d_TS_RESP_fp(FILE *fp, TS_RESP *a)
+int __cdecl i2d_TS_RESP_fp(FILE *fp, TS_RESP *a)
 {
     return ASN1_i2d_fp_of_const(TS_RESP, i2d_TS_RESP, fp, a);
 }
@@ -243,7 +243,7 @@ IMPLEMENT_ASN1_FUNCTIONS_const(ESS_SIGNING_CERT_V2)
 IMPLEMENT_ASN1_DUP_FUNCTION(ESS_SIGNING_CERT_V2)
 
 /* Getting encapsulated TS_TST_INFO object from PKCS7. */
-TS_TST_INFO *PKCS7_to_TS_TST_INFO(PKCS7 *token)
+TS_TST_INFO * __cdecl PKCS7_to_TS_TST_INFO(PKCS7 *token)
 {
     PKCS7_SIGNED *pkcs7_signed;
     PKCS7 *enveloped;
diff --git a/crypto/ts/ts_conf.c b/crypto/ts/ts_conf.c
index 625089a59b..d315780109 100644
--- a/crypto/ts/ts_conf.c
+++ b/crypto/ts/ts_conf.c
@@ -41,7 +41,7 @@
 
 /* Function definitions for certificate and key loading. */
 
-X509 *TS_CONF_load_cert(const char *file)
+X509 * __cdecl TS_CONF_load_cert(const char *file)
 {
     BIO *cert = NULL;
     X509 *x = NULL;
@@ -56,7 +56,7 @@ X509 *TS_CONF_load_cert(const char *file)
     return x;
 }
 
-STACK_OF(X509) *TS_CONF_load_certs(const char *file)
+STACK_OF(X509) * __cdecl TS_CONF_load_certs(const char *file)
 {
     BIO *certs = NULL;
     STACK_OF(X509) *othercerts = NULL;
@@ -84,7 +84,7 @@ STACK_OF(X509) *TS_CONF_load_certs(const char *file)
     return othercerts;
 }
 
-EVP_PKEY *TS_CONF_load_key(const char *file, const char *pass)
+EVP_PKEY * __cdecl TS_CONF_load_key(const char *file, const char *pass)
 {
     BIO *key = NULL;
     EVP_PKEY *pkey = NULL;
@@ -113,7 +113,7 @@ static void ts_CONF_invalid(const char *name, const char *tag)
     ERR_add_error_data(3, name, "::", tag);
 }
 
-const char *TS_CONF_get_tsa_section(CONF *conf, const char *section)
+const char * __cdecl TS_CONF_get_tsa_section(CONF *conf, const char *section)
 {
     if (!section) {
         section = NCONF_get_string(conf, BASE_SECTION, ENV_DEFAULT_TSA);
@@ -123,7 +123,7 @@ const char *TS_CONF_get_tsa_section(CONF *conf, const char *section)
     return section;
 }
 
-int TS_CONF_set_serial(CONF *conf, const char *section, TS_serial_cb cb,
+int __cdecl TS_CONF_set_serial(CONF *conf, const char *section, TS_serial_cb cb,
                        TS_RESP_CTX *ctx)
 {
     int ret = 0;
@@ -141,7 +141,7 @@ int TS_CONF_set_serial(CONF *conf, const char *section, TS_serial_cb cb,
 
 #ifndef OPENSSL_NO_ENGINE
 
-int TS_CONF_set_crypto_device(CONF *conf, const char *section,
+int __cdecl TS_CONF_set_crypto_device(CONF *conf, const char *section,
                               const char *device)
 {
     int ret = 0;
@@ -158,7 +158,7 @@ int TS_CONF_set_crypto_device(CONF *conf, const char *section,
     return ret;
 }
 
-int TS_CONF_set_default_engine(const char *name)
+int __cdecl TS_CONF_set_default_engine(const char *name)
 {
     ENGINE *e = NULL;
     int ret = 0;
@@ -185,7 +185,7 @@ int TS_CONF_set_default_engine(const char *name)
 
 #endif
 
-int TS_CONF_set_signer_cert(CONF *conf, const char *section,
+int __cdecl TS_CONF_set_signer_cert(CONF *conf, const char *section,
                             const char *cert, TS_RESP_CTX *ctx)
 {
     int ret = 0;
@@ -209,7 +209,7 @@ int TS_CONF_set_signer_cert(CONF *conf, const char *section,
     return ret;
 }
 
-int TS_CONF_set_certs(CONF *conf, const char *section, const char *certs,
+int __cdecl TS_CONF_set_certs(CONF *conf, const char *section, const char *certs,
                       TS_RESP_CTX *ctx)
 {
     int ret = 0;
@@ -231,7 +231,7 @@ int TS_CONF_set_certs(CONF *conf, const char *section, const char *certs,
     return ret;
 }
 
-int TS_CONF_set_signer_key(CONF *conf, const char *section,
+int __cdecl TS_CONF_set_signer_key(CONF *conf, const char *section,
                            const char *key, const char *pass,
                            TS_RESP_CTX *ctx)
 {
@@ -254,7 +254,7 @@ int TS_CONF_set_signer_key(CONF *conf, const char *section,
     return ret;
 }
 
-int TS_CONF_set_signer_digest(CONF *conf, const char *section,
+int __cdecl TS_CONF_set_signer_digest(CONF *conf, const char *section,
                               const char *md, TS_RESP_CTX *ctx)
 {
     int ret = 0;
@@ -278,7 +278,7 @@ int TS_CONF_set_signer_digest(CONF *conf, const char *section,
     return ret;
 }
 
-int TS_CONF_set_def_policy(CONF *conf, const char *section,
+int __cdecl TS_CONF_set_def_policy(CONF *conf, const char *section,
                            const char *policy, TS_RESP_CTX *ctx)
 {
     int ret = 0;
@@ -302,7 +302,7 @@ int TS_CONF_set_def_policy(CONF *conf, const char *section,
     return ret;
 }
 
-int TS_CONF_set_policies(CONF *conf, const char *section, TS_RESP_CTX *ctx)
+int __cdecl TS_CONF_set_policies(CONF *conf, const char *section, TS_RESP_CTX *ctx)
 {
     int ret = 0;
     int i;
@@ -334,7 +334,7 @@ int TS_CONF_set_policies(CONF *conf, const char *section, TS_RESP_CTX *ctx)
     return ret;
 }
 
-int TS_CONF_set_digests(CONF *conf, const char *section, TS_RESP_CTX *ctx)
+int __cdecl TS_CONF_set_digests(CONF *conf, const char *section, TS_RESP_CTX *ctx)
 {
     int ret = 0;
     int i;
@@ -372,7 +372,7 @@ int TS_CONF_set_digests(CONF *conf, const char *section, TS_RESP_CTX *ctx)
     return ret;
 }
 
-int TS_CONF_set_accuracy(CONF *conf, const char *section, TS_RESP_CTX *ctx)
+int __cdecl TS_CONF_set_accuracy(CONF *conf, const char *section, TS_RESP_CTX *ctx)
 {
     int ret = 0;
     int i;
@@ -409,7 +409,7 @@ int TS_CONF_set_accuracy(CONF *conf, const char *section, TS_RESP_CTX *ctx)
     return ret;
 }
 
-int TS_CONF_set_clock_precision_digits(CONF *conf, const char *section,
+int __cdecl TS_CONF_set_clock_precision_digits(CONF *conf, const char *section,
                                        TS_RESP_CTX *ctx)
 {
     int ret = 0;
@@ -451,24 +451,24 @@ static int ts_CONF_add_flag(CONF *conf, const char *section,
     return 1;
 }
 
-int TS_CONF_set_ordering(CONF *conf, const char *section, TS_RESP_CTX *ctx)
+int __cdecl TS_CONF_set_ordering(CONF *conf, const char *section, TS_RESP_CTX *ctx)
 {
     return ts_CONF_add_flag(conf, section, ENV_ORDERING, TS_ORDERING, ctx);
 }
 
-int TS_CONF_set_tsa_name(CONF *conf, const char *section, TS_RESP_CTX *ctx)
+int __cdecl TS_CONF_set_tsa_name(CONF *conf, const char *section, TS_RESP_CTX *ctx)
 {
     return ts_CONF_add_flag(conf, section, ENV_TSA_NAME, TS_TSA_NAME, ctx);
 }
 
-int TS_CONF_set_ess_cert_id_chain(CONF *conf, const char *section,
+int __cdecl TS_CONF_set_ess_cert_id_chain(CONF *conf, const char *section,
                                   TS_RESP_CTX *ctx)
 {
     return ts_CONF_add_flag(conf, section, ENV_ESS_CERT_ID_CHAIN,
                             TS_ESS_CERT_ID_CHAIN, ctx);
 }
 
-int TS_CONF_set_ess_cert_id_digest(CONF *conf, const char *section,
+int __cdecl TS_CONF_set_ess_cert_id_digest(CONF *conf, const char *section,
                                    TS_RESP_CTX *ctx)
 {
     int ret = 0;
diff --git a/crypto/ts/ts_err.c b/crypto/ts/ts_err.c
index 1f3854d849..a2c67ebcf6 100644
--- a/crypto/ts/ts_err.c
+++ b/crypto/ts/ts_err.c
@@ -172,7 +172,7 @@ static const ERR_STRING_DATA TS_str_reasons[] = {
 
 #endif
 
-int ERR_load_TS_strings(void)
+int __cdecl ERR_load_TS_strings(void)
 {
 #ifndef OPENSSL_NO_ERR
     if (ERR_func_error_string(TS_str_functs[0].error) == NULL) {
diff --git a/crypto/ts/ts_lib.c b/crypto/ts/ts_lib.c
index ce2e12c593..e01b8284a8 100644
--- a/crypto/ts/ts_lib.c
+++ b/crypto/ts/ts_lib.c
@@ -16,7 +16,7 @@
 #include <openssl/ts.h>
 #include "ts_lcl.h"
 
-int TS_ASN1_INTEGER_print_bio(BIO *bio, const ASN1_INTEGER *num)
+int __cdecl TS_ASN1_INTEGER_print_bio(BIO *bio, const ASN1_INTEGER *num)
 {
     BIGNUM *num_bn;
     int result = 0;
@@ -35,7 +35,7 @@ int TS_ASN1_INTEGER_print_bio(BIO *bio, const ASN1_INTEGER *num)
     return result;
 }
 
-int TS_OBJ_print_bio(BIO *bio, const ASN1_OBJECT *obj)
+int __cdecl TS_OBJ_print_bio(BIO *bio, const ASN1_OBJECT *obj)
 {
     char obj_txt[128];
 
@@ -45,7 +45,7 @@ int TS_OBJ_print_bio(BIO *bio, const ASN1_OBJECT *obj)
     return 1;
 }
 
-int TS_ext_print_bio(BIO *bio, const STACK_OF(X509_EXTENSION) *extensions)
+int __cdecl TS_ext_print_bio(BIO *bio, const STACK_OF(X509_EXTENSION) *extensions)
 {
     int i, critical, n;
     X509_EXTENSION *ex;
@@ -70,14 +70,14 @@ int TS_ext_print_bio(BIO *bio, const STACK_OF(X509_EXTENSION) *extensions)
     return 1;
 }
 
-int TS_X509_ALGOR_print_bio(BIO *bio, const X509_ALGOR *alg)
+int __cdecl TS_X509_ALGOR_print_bio(BIO *bio, const X509_ALGOR *alg)
 {
     int i = OBJ_obj2nid(alg->algorithm);
     return BIO_printf(bio, "Hash Algorithm: %s\n",
                       (i == NID_undef) ? "UNKNOWN" : OBJ_nid2ln(i));
 }
 
-int TS_MSG_IMPRINT_print_bio(BIO *bio, TS_MSG_IMPRINT *a)
+int __cdecl TS_MSG_IMPRINT_print_bio(BIO *bio, TS_MSG_IMPRINT *a)
 {
     ASN1_OCTET_STRING *msg;
 
diff --git a/crypto/ts/ts_req_print.c b/crypto/ts/ts_req_print.c
index 0dedf47d92..69b9f51302 100644
--- a/crypto/ts/ts_req_print.c
+++ b/crypto/ts/ts_req_print.c
@@ -15,7 +15,7 @@
 #include <openssl/ts.h>
 #include "ts_lcl.h"
 
-int TS_REQ_print_bio(BIO *bio, TS_REQ *a)
+int __cdecl TS_REQ_print_bio(BIO *bio, TS_REQ *a)
 {
     int v;
     ASN1_OBJECT *policy_id;
diff --git a/crypto/ts/ts_req_utils.c b/crypto/ts/ts_req_utils.c
index 2073d3395d..2c480cf495 100644
--- a/crypto/ts/ts_req_utils.c
+++ b/crypto/ts/ts_req_utils.c
@@ -14,17 +14,17 @@
 #include <openssl/ts.h>
 #include "ts_lcl.h"
 
-int TS_REQ_set_version(TS_REQ *a, long version)
+int __cdecl TS_REQ_set_version(TS_REQ *a, long version)
 {
     return ASN1_INTEGER_set(a->version, version);
 }
 
-long TS_REQ_get_version(const TS_REQ *a)
+long __cdecl TS_REQ_get_version(const TS_REQ *a)
 {
     return ASN1_INTEGER_get(a->version);
 }
 
-int TS_REQ_set_msg_imprint(TS_REQ *a, TS_MSG_IMPRINT *msg_imprint)
+int __cdecl TS_REQ_set_msg_imprint(TS_REQ *a, TS_MSG_IMPRINT *msg_imprint)
 {
     TS_MSG_IMPRINT *new_msg_imprint;
 
@@ -40,12 +40,12 @@ int TS_REQ_set_msg_imprint(TS_REQ *a, TS_MSG_IMPRINT *msg_imprint)
     return 1;
 }
 
-TS_MSG_IMPRINT *TS_REQ_get_msg_imprint(TS_REQ *a)
+TS_MSG_IMPRINT * __cdecl TS_REQ_get_msg_imprint(TS_REQ *a)
 {
     return a->msg_imprint;
 }
 
-int TS_MSG_IMPRINT_set_algo(TS_MSG_IMPRINT *a, X509_ALGOR *alg)
+int __cdecl TS_MSG_IMPRINT_set_algo(TS_MSG_IMPRINT *a, X509_ALGOR *alg)
 {
     X509_ALGOR *new_alg;
 
@@ -61,22 +61,22 @@ int TS_MSG_IMPRINT_set_algo(TS_MSG_IMPRINT *a, X509_ALGOR *alg)
     return 1;
 }
 
-X509_ALGOR *TS_MSG_IMPRINT_get_algo(TS_MSG_IMPRINT *a)
+X509_ALGOR * __cdecl TS_MSG_IMPRINT_get_algo(TS_MSG_IMPRINT *a)
 {
     return a->hash_algo;
 }
 
-int TS_MSG_IMPRINT_set_msg(TS_MSG_IMPRINT *a, unsigned char *d, int len)
+int __cdecl TS_MSG_IMPRINT_set_msg(TS_MSG_IMPRINT *a, unsigned char *d, int len)
 {
     return ASN1_OCTET_STRING_set(a->hashed_msg, d, len);
 }
 
-ASN1_OCTET_STRING *TS_MSG_IMPRINT_get_msg(TS_MSG_IMPRINT *a)
+ASN1_OCTET_STRING * __cdecl TS_MSG_IMPRINT_get_msg(TS_MSG_IMPRINT *a)
 {
     return a->hashed_msg;
 }
 
-int TS_REQ_set_policy_id(TS_REQ *a, const ASN1_OBJECT *policy)
+int __cdecl TS_REQ_set_policy_id(TS_REQ *a, const ASN1_OBJECT *policy)
 {
     ASN1_OBJECT *new_policy;
 
@@ -92,12 +92,12 @@ int TS_REQ_set_policy_id(TS_REQ *a, const ASN1_OBJECT *policy)
     return 1;
 }
 
-ASN1_OBJECT *TS_REQ_get_policy_id(TS_REQ *a)
+ASN1_OBJECT * __cdecl TS_REQ_get_policy_id(TS_REQ *a)
 {
     return a->policy_id;
 }
 
-int TS_REQ_set_nonce(TS_REQ *a, const ASN1_INTEGER *nonce)
+int __cdecl TS_REQ_set_nonce(TS_REQ *a, const ASN1_INTEGER *nonce)
 {
     ASN1_INTEGER *new_nonce;
 
@@ -113,28 +113,28 @@ int TS_REQ_set_nonce(TS_REQ *a, const ASN1_INTEGER *nonce)
     return 1;
 }
 
-const ASN1_INTEGER *TS_REQ_get_nonce(const TS_REQ *a)
+const ASN1_INTEGER * __cdecl TS_REQ_get_nonce(const TS_REQ *a)
 {
     return a->nonce;
 }
 
-int TS_REQ_set_cert_req(TS_REQ *a, int cert_req)
+int __cdecl TS_REQ_set_cert_req(TS_REQ *a, int cert_req)
 {
     a->cert_req = cert_req ? 0xFF : 0x00;
     return 1;
 }
 
-int TS_REQ_get_cert_req(const TS_REQ *a)
+int __cdecl TS_REQ_get_cert_req(const TS_REQ *a)
 {
     return a->cert_req ? 1 : 0;
 }
 
-STACK_OF(X509_EXTENSION) *TS_REQ_get_exts(TS_REQ *a)
+STACK_OF(X509_EXTENSION) * __cdecl TS_REQ_get_exts(TS_REQ *a)
 {
     return a->extensions;
 }
 
-void TS_REQ_ext_free(TS_REQ *a)
+void __cdecl TS_REQ_ext_free(TS_REQ *a)
 {
     if (!a)
         return;
@@ -142,42 +142,42 @@ void TS_REQ_ext_free(TS_REQ *a)
     a->extensions = NULL;
 }
 
-int TS_REQ_get_ext_count(TS_REQ *a)
+int __cdecl TS_REQ_get_ext_count(TS_REQ *a)
 {
     return X509v3_get_ext_count(a->extensions);
 }
 
-int TS_REQ_get_ext_by_NID(TS_REQ *a, int nid, int lastpos)
+int __cdecl TS_REQ_get_ext_by_NID(TS_REQ *a, int nid, int lastpos)
 {
     return X509v3_get_ext_by_NID(a->extensions, nid, lastpos);
 }
 
-int TS_REQ_get_ext_by_OBJ(TS_REQ *a, const ASN1_OBJECT *obj, int lastpos)
+int __cdecl TS_REQ_get_ext_by_OBJ(TS_REQ *a, const ASN1_OBJECT *obj, int lastpos)
 {
     return X509v3_get_ext_by_OBJ(a->extensions, obj, lastpos);
 }
 
-int TS_REQ_get_ext_by_critical(TS_REQ *a, int crit, int lastpos)
+int __cdecl TS_REQ_get_ext_by_critical(TS_REQ *a, int crit, int lastpos)
 {
     return X509v3_get_ext_by_critical(a->extensions, crit, lastpos);
 }
 
-X509_EXTENSION *TS_REQ_get_ext(TS_REQ *a, int loc)
+X509_EXTENSION * __cdecl TS_REQ_get_ext(TS_REQ *a, int loc)
 {
     return X509v3_get_ext(a->extensions, loc);
 }
 
-X509_EXTENSION *TS_REQ_delete_ext(TS_REQ *a, int loc)
+X509_EXTENSION * __cdecl TS_REQ_delete_ext(TS_REQ *a, int loc)
 {
     return X509v3_delete_ext(a->extensions, loc);
 }
 
-int TS_REQ_add_ext(TS_REQ *a, X509_EXTENSION *ex, int loc)
+int __cdecl TS_REQ_add_ext(TS_REQ *a, X509_EXTENSION *ex, int loc)
 {
     return X509v3_add_ext(&a->extensions, ex, loc) != NULL;
 }
 
-void *TS_REQ_get_ext_d2i(TS_REQ *a, int nid, int *crit, int *idx)
+void * __cdecl TS_REQ_get_ext_d2i(TS_REQ *a, int nid, int *crit, int *idx)
 {
     return X509V3_get_d2i(a->extensions, nid, crit, idx);
 }
diff --git a/crypto/ts/ts_rsp_print.c b/crypto/ts/ts_rsp_print.c
index 6eb0ec8d75..9d0e9b2fc4 100644
--- a/crypto/ts/ts_rsp_print.c
+++ b/crypto/ts/ts_rsp_print.c
@@ -25,7 +25,7 @@ static int ts_status_map_print(BIO *bio, const struct status_map_st *a,
 static int ts_ACCURACY_print_bio(BIO *bio, const TS_ACCURACY *accuracy);
 
 
-int TS_RESP_print_bio(BIO *bio, TS_RESP *a)
+int __cdecl TS_RESP_print_bio(BIO *bio, TS_RESP *a)
 {
     BIO_printf(bio, "Status info:\n");
     TS_STATUS_INFO_print_bio(bio, a->status_info);
@@ -39,7 +39,7 @@ int TS_RESP_print_bio(BIO *bio, TS_RESP *a)
     return 1;
 }
 
-int TS_STATUS_INFO_print_bio(BIO *bio, TS_STATUS_INFO *a)
+int __cdecl TS_STATUS_INFO_print_bio(BIO *bio, TS_STATUS_INFO *a)
 {
     static const char *status_map[] = {
         "Granted.",
@@ -115,7 +115,7 @@ static int ts_status_map_print(BIO *bio, const struct status_map_st *a,
     return lines;
 }
 
-int TS_TST_INFO_print_bio(BIO *bio, TS_TST_INFO *a)
+int __cdecl TS_TST_INFO_print_bio(BIO *bio, TS_TST_INFO *a)
 {
     int v;
 
diff --git a/crypto/ts/ts_rsp_sign.c b/crypto/ts/ts_rsp_sign.c
index 1b2b84ef6b..4e5131031f 100644
--- a/crypto/ts/ts_rsp_sign.c
+++ b/crypto/ts/ts_rsp_sign.c
@@ -117,7 +117,7 @@ static int def_extension_cb(struct TS_resp_ctx *ctx, X509_EXTENSION *ext,
 
 /* TS_RESP_CTX management functions. */
 
-TS_RESP_CTX *TS_RESP_CTX_new(void)
+TS_RESP_CTX * __cdecl TS_RESP_CTX_new(void)
 {
     TS_RESP_CTX *ctx;
 
@@ -135,7 +135,7 @@ TS_RESP_CTX *TS_RESP_CTX_new(void)
     return ctx;
 }
 
-void TS_RESP_CTX_free(TS_RESP_CTX *ctx)
+void __cdecl TS_RESP_CTX_free(TS_RESP_CTX *ctx)
 {
     if (!ctx)
         return;
@@ -152,7 +152,7 @@ void TS_RESP_CTX_free(TS_RESP_CTX *ctx)
     OPENSSL_free(ctx);
 }
 
-int TS_RESP_CTX_set_signer_cert(TS_RESP_CTX *ctx, X509 *signer)
+int __cdecl TS_RESP_CTX_set_signer_cert(TS_RESP_CTX *ctx, X509 *signer)
 {
     if (X509_check_purpose(signer, X509_PURPOSE_TIMESTAMP_SIGN, 0) != 1) {
         TSerr(TS_F_TS_RESP_CTX_SET_SIGNER_CERT,
@@ -165,7 +165,7 @@ int TS_RESP_CTX_set_signer_cert(TS_RESP_CTX *ctx, X509 *signer)
     return 1;
 }
 
-int TS_RESP_CTX_set_signer_key(TS_RESP_CTX *ctx, EVP_PKEY *key)
+int __cdecl TS_RESP_CTX_set_signer_key(TS_RESP_CTX *ctx, EVP_PKEY *key)
 {
     EVP_PKEY_free(ctx->signer_key);
     ctx->signer_key = key;
@@ -174,13 +174,13 @@ int TS_RESP_CTX_set_signer_key(TS_RESP_CTX *ctx, EVP_PKEY *key)
     return 1;
 }
 
-int TS_RESP_CTX_set_signer_digest(TS_RESP_CTX *ctx, const EVP_MD *md)
+int __cdecl TS_RESP_CTX_set_signer_digest(TS_RESP_CTX *ctx, const EVP_MD *md)
 {
     ctx->signer_md = md;
     return 1;
 }
 
-int TS_RESP_CTX_set_def_policy(TS_RESP_CTX *ctx, const ASN1_OBJECT *def_policy)
+int __cdecl TS_RESP_CTX_set_def_policy(TS_RESP_CTX *ctx, const ASN1_OBJECT *def_policy)
 {
     ASN1_OBJECT_free(ctx->default_policy);
     if ((ctx->default_policy = OBJ_dup(def_policy)) == NULL)
@@ -191,7 +191,7 @@ int TS_RESP_CTX_set_def_policy(TS_RESP_CTX *ctx, const ASN1_OBJECT *def_policy)
     return 0;
 }
 
-int TS_RESP_CTX_set_certs(TS_RESP_CTX *ctx, STACK_OF(X509) *certs)
+int __cdecl TS_RESP_CTX_set_certs(TS_RESP_CTX *ctx, STACK_OF(X509) *certs)
 {
 
     sk_X509_pop_free(ctx->certs, X509_free);
@@ -206,7 +206,7 @@ int TS_RESP_CTX_set_certs(TS_RESP_CTX *ctx, STACK_OF(X509) *certs)
     return 1;
 }
 
-int TS_RESP_CTX_add_policy(TS_RESP_CTX *ctx, const ASN1_OBJECT *policy)
+int __cdecl TS_RESP_CTX_add_policy(TS_RESP_CTX *ctx, const ASN1_OBJECT *policy)
 {
     ASN1_OBJECT *copy = NULL;
 
@@ -225,7 +225,7 @@ int TS_RESP_CTX_add_policy(TS_RESP_CTX *ctx, const ASN1_OBJECT *policy)
     return 0;
 }
 
-int TS_RESP_CTX_add_md(TS_RESP_CTX *ctx, const EVP_MD *md)
+int __cdecl TS_RESP_CTX_add_md(TS_RESP_CTX *ctx, const EVP_MD *md)
 {
     if (ctx->mds == NULL
         && (ctx->mds = sk_EVP_MD_new_null()) == NULL)
@@ -247,7 +247,7 @@ int TS_RESP_CTX_add_md(TS_RESP_CTX *ctx, const EVP_MD *md)
         ASN1_INTEGER_free(ctx->micros);         \
         ctx->micros = NULL;
 
-int TS_RESP_CTX_set_accuracy(TS_RESP_CTX *ctx,
+int __cdecl TS_RESP_CTX_set_accuracy(TS_RESP_CTX *ctx,
                              int secs, int millis, int micros)
 {
 
@@ -272,31 +272,31 @@ int TS_RESP_CTX_set_accuracy(TS_RESP_CTX *ctx,
     return 0;
 }
 
-void TS_RESP_CTX_add_flags(TS_RESP_CTX *ctx, int flags)
+void __cdecl TS_RESP_CTX_add_flags(TS_RESP_CTX *ctx, int flags)
 {
     ctx->flags |= flags;
 }
 
-void TS_RESP_CTX_set_serial_cb(TS_RESP_CTX *ctx, TS_serial_cb cb, void *data)
+void __cdecl TS_RESP_CTX_set_serial_cb(TS_RESP_CTX *ctx, TS_serial_cb cb, void *data)
 {
     ctx->serial_cb = cb;
     ctx->serial_cb_data = data;
 }
 
-void TS_RESP_CTX_set_time_cb(TS_RESP_CTX *ctx, TS_time_cb cb, void *data)
+void __cdecl TS_RESP_CTX_set_time_cb(TS_RESP_CTX *ctx, TS_time_cb cb, void *data)
 {
     ctx->time_cb = cb;
     ctx->time_cb_data = data;
 }
 
-void TS_RESP_CTX_set_extension_cb(TS_RESP_CTX *ctx,
+void __cdecl TS_RESP_CTX_set_extension_cb(TS_RESP_CTX *ctx,
                                   TS_extension_cb cb, void *data)
 {
     ctx->extension_cb = cb;
     ctx->extension_cb_data = data;
 }
 
-int TS_RESP_CTX_set_status_info(TS_RESP_CTX *ctx,
+int __cdecl TS_RESP_CTX_set_status_info(TS_RESP_CTX *ctx,
                                 int status, const char *text)
 {
     TS_STATUS_INFO *si = NULL;
@@ -329,7 +329,7 @@ int TS_RESP_CTX_set_status_info(TS_RESP_CTX *ctx,
     return ret;
 }
 
-int TS_RESP_CTX_set_status_info_cond(TS_RESP_CTX *ctx,
+int __cdecl TS_RESP_CTX_set_status_info_cond(TS_RESP_CTX *ctx,
                                      int status, const char *text)
 {
     int ret = 1;
@@ -341,7 +341,7 @@ int TS_RESP_CTX_set_status_info_cond(TS_RESP_CTX *ctx,
     return ret;
 }
 
-int TS_RESP_CTX_add_failure_info(TS_RESP_CTX *ctx, int failure)
+int __cdecl TS_RESP_CTX_add_failure_info(TS_RESP_CTX *ctx, int failure)
 {
     TS_STATUS_INFO *si = ctx->response->status_info;
     if (si->failure_info == NULL
@@ -355,17 +355,17 @@ int TS_RESP_CTX_add_failure_info(TS_RESP_CTX *ctx, int failure)
     return 0;
 }
 
-TS_REQ *TS_RESP_CTX_get_request(TS_RESP_CTX *ctx)
+TS_REQ * __cdecl TS_RESP_CTX_get_request(TS_RESP_CTX *ctx)
 {
     return ctx->request;
 }
 
-TS_TST_INFO *TS_RESP_CTX_get_tst_info(TS_RESP_CTX *ctx)
+TS_TST_INFO * __cdecl TS_RESP_CTX_get_tst_info(TS_RESP_CTX *ctx)
 {
     return ctx->tst_info;
 }
 
-int TS_RESP_CTX_set_clock_precision_digits(TS_RESP_CTX *ctx,
+int __cdecl TS_RESP_CTX_set_clock_precision_digits(TS_RESP_CTX *ctx,
                                            unsigned precision)
 {
     if (precision > TS_MAX_CLOCK_PRECISION_DIGITS)
@@ -375,7 +375,7 @@ int TS_RESP_CTX_set_clock_precision_digits(TS_RESP_CTX *ctx,
 }
 
 /* Main entry method of the response generation. */
-TS_RESP *TS_RESP_create_response(TS_RESP_CTX *ctx, BIO *req_bio)
+TS_RESP * __cdecl TS_RESP_create_response(TS_RESP_CTX *ctx, BIO *req_bio)
 {
     ASN1_OBJECT *policy;
     TS_RESP *response;
@@ -1050,7 +1050,7 @@ static ASN1_GENERALIZEDTIME *TS_RESP_set_genTime_with_precision(
     return NULL;
 }
 
-int TS_RESP_CTX_set_ess_cert_id_digest(TS_RESP_CTX *ctx, const EVP_MD *md)
+int __cdecl TS_RESP_CTX_set_ess_cert_id_digest(TS_RESP_CTX *ctx, const EVP_MD *md)
 {
     ctx->ess_cert_id_digest = md;
     return 1;
diff --git a/crypto/ts/ts_rsp_utils.c b/crypto/ts/ts_rsp_utils.c
index 3ecee39a22..d3d3bcd01a 100644
--- a/crypto/ts/ts_rsp_utils.c
+++ b/crypto/ts/ts_rsp_utils.c
@@ -14,7 +14,7 @@
 #include <openssl/pkcs7.h>
 #include "ts_lcl.h"
 
-int TS_RESP_set_status_info(TS_RESP *a, TS_STATUS_INFO *status_info)
+int __cdecl TS_RESP_set_status_info(TS_RESP *a, TS_STATUS_INFO *status_info)
 {
     TS_STATUS_INFO *new_status_info;
 
@@ -31,13 +31,13 @@ int TS_RESP_set_status_info(TS_RESP *a, TS_STATUS_INFO *status_info)
     return 1;
 }
 
-TS_STATUS_INFO *TS_RESP_get_status_info(TS_RESP *a)
+TS_STATUS_INFO * __cdecl TS_RESP_get_status_info(TS_RESP *a)
 {
     return a->status_info;
 }
 
 /* Caller loses ownership of PKCS7 and TS_TST_INFO objects. */
-void TS_RESP_set_tst_info(TS_RESP *a, PKCS7 *p7, TS_TST_INFO *tst_info)
+void __cdecl TS_RESP_set_tst_info(TS_RESP *a, PKCS7 *p7, TS_TST_INFO *tst_info)
 {
     PKCS7_free(a->token);
     a->token = p7;
@@ -45,27 +45,27 @@ void TS_RESP_set_tst_info(TS_RESP *a, PKCS7 *p7, TS_TST_INFO *tst_info)
     a->tst_info = tst_info;
 }
 
-PKCS7 *TS_RESP_get_token(TS_RESP *a)
+PKCS7 * __cdecl TS_RESP_get_token(TS_RESP *a)
 {
     return a->token;
 }
 
-TS_TST_INFO *TS_RESP_get_tst_info(TS_RESP *a)
+TS_TST_INFO * __cdecl TS_RESP_get_tst_info(TS_RESP *a)
 {
     return a->tst_info;
 }
 
-int TS_TST_INFO_set_version(TS_TST_INFO *a, long version)
+int __cdecl TS_TST_INFO_set_version(TS_TST_INFO *a, long version)
 {
     return ASN1_INTEGER_set(a->version, version);
 }
 
-long TS_TST_INFO_get_version(const TS_TST_INFO *a)
+long __cdecl TS_TST_INFO_get_version(const TS_TST_INFO *a)
 {
     return ASN1_INTEGER_get(a->version);
 }
 
-int TS_TST_INFO_set_policy_id(TS_TST_INFO *a, ASN1_OBJECT *policy)
+int __cdecl TS_TST_INFO_set_policy_id(TS_TST_INFO *a, ASN1_OBJECT *policy)
 {
     ASN1_OBJECT *new_policy;
 
@@ -81,12 +81,12 @@ int TS_TST_INFO_set_policy_id(TS_TST_INFO *a, ASN1_OBJECT *policy)
     return 1;
 }
 
-ASN1_OBJECT *TS_TST_INFO_get_policy_id(TS_TST_INFO *a)
+ASN1_OBJECT * __cdecl TS_TST_INFO_get_policy_id(TS_TST_INFO *a)
 {
     return a->policy_id;
 }
 
-int TS_TST_INFO_set_msg_imprint(TS_TST_INFO *a, TS_MSG_IMPRINT *msg_imprint)
+int __cdecl TS_TST_INFO_set_msg_imprint(TS_TST_INFO *a, TS_MSG_IMPRINT *msg_imprint)
 {
     TS_MSG_IMPRINT *new_msg_imprint;
 
@@ -102,12 +102,12 @@ int TS_TST_INFO_set_msg_imprint(TS_TST_INFO *a, TS_MSG_IMPRINT *msg_imprint)
     return 1;
 }
 
-TS_MSG_IMPRINT *TS_TST_INFO_get_msg_imprint(TS_TST_INFO *a)
+TS_MSG_IMPRINT * __cdecl TS_TST_INFO_get_msg_imprint(TS_TST_INFO *a)
 {
     return a->msg_imprint;
 }
 
-int TS_TST_INFO_set_serial(TS_TST_INFO *a, const ASN1_INTEGER *serial)
+int __cdecl TS_TST_INFO_set_serial(TS_TST_INFO *a, const ASN1_INTEGER *serial)
 {
     ASN1_INTEGER *new_serial;
 
@@ -123,12 +123,12 @@ int TS_TST_INFO_set_serial(TS_TST_INFO *a, const ASN1_INTEGER *serial)
     return 1;
 }
 
-const ASN1_INTEGER *TS_TST_INFO_get_serial(const TS_TST_INFO *a)
+const ASN1_INTEGER * __cdecl TS_TST_INFO_get_serial(const TS_TST_INFO *a)
 {
     return a->serial;
 }
 
-int TS_TST_INFO_set_time(TS_TST_INFO *a, const ASN1_GENERALIZEDTIME *gtime)
+int __cdecl TS_TST_INFO_set_time(TS_TST_INFO *a, const ASN1_GENERALIZEDTIME *gtime)
 {
     ASN1_GENERALIZEDTIME *new_time;
 
@@ -144,12 +144,12 @@ int TS_TST_INFO_set_time(TS_TST_INFO *a, const ASN1_GENERALIZEDTIME *gtime)
     return 1;
 }
 
-const ASN1_GENERALIZEDTIME *TS_TST_INFO_get_time(const TS_TST_INFO *a)
+const ASN1_GENERALIZEDTIME * __cdecl TS_TST_INFO_get_time(const TS_TST_INFO *a)
 {
     return a->time;
 }
 
-int TS_TST_INFO_set_accuracy(TS_TST_INFO *a, TS_ACCURACY *accuracy)
+int __cdecl TS_TST_INFO_set_accuracy(TS_TST_INFO *a, TS_ACCURACY *accuracy)
 {
     TS_ACCURACY *new_accuracy;
 
@@ -165,12 +165,12 @@ int TS_TST_INFO_set_accuracy(TS_TST_INFO *a, TS_ACCURACY *accuracy)
     return 1;
 }
 
-TS_ACCURACY *TS_TST_INFO_get_accuracy(TS_TST_INFO *a)
+TS_ACCURACY * __cdecl TS_TST_INFO_get_accuracy(TS_TST_INFO *a)
 {
     return a->accuracy;
 }
 
-int TS_ACCURACY_set_seconds(TS_ACCURACY *a, const ASN1_INTEGER *seconds)
+int __cdecl TS_ACCURACY_set_seconds(TS_ACCURACY *a, const ASN1_INTEGER *seconds)
 {
     ASN1_INTEGER *new_seconds;
 
@@ -186,12 +186,12 @@ int TS_ACCURACY_set_seconds(TS_ACCURACY *a, const ASN1_INTEGER *seconds)
     return 1;
 }
 
-const ASN1_INTEGER *TS_ACCURACY_get_seconds(const TS_ACCURACY *a)
+const ASN1_INTEGER * __cdecl TS_ACCURACY_get_seconds(const TS_ACCURACY *a)
 {
     return a->seconds;
 }
 
-int TS_ACCURACY_set_millis(TS_ACCURACY *a, const ASN1_INTEGER *millis)
+int __cdecl TS_ACCURACY_set_millis(TS_ACCURACY *a, const ASN1_INTEGER *millis)
 {
     ASN1_INTEGER *new_millis = NULL;
 
@@ -209,12 +209,12 @@ int TS_ACCURACY_set_millis(TS_ACCURACY *a, const ASN1_INTEGER *millis)
     return 1;
 }
 
-const ASN1_INTEGER *TS_ACCURACY_get_millis(const TS_ACCURACY *a)
+const ASN1_INTEGER * __cdecl TS_ACCURACY_get_millis(const TS_ACCURACY *a)
 {
     return a->millis;
 }
 
-int TS_ACCURACY_set_micros(TS_ACCURACY *a, const ASN1_INTEGER *micros)
+int __cdecl TS_ACCURACY_set_micros(TS_ACCURACY *a, const ASN1_INTEGER *micros)
 {
     ASN1_INTEGER *new_micros = NULL;
 
@@ -232,23 +232,23 @@ int TS_ACCURACY_set_micros(TS_ACCURACY *a, const ASN1_INTEGER *micros)
     return 1;
 }
 
-const ASN1_INTEGER *TS_ACCURACY_get_micros(const TS_ACCURACY *a)
+const ASN1_INTEGER * __cdecl TS_ACCURACY_get_micros(const TS_ACCURACY *a)
 {
     return a->micros;
 }
 
-int TS_TST_INFO_set_ordering(TS_TST_INFO *a, int ordering)
+int __cdecl TS_TST_INFO_set_ordering(TS_TST_INFO *a, int ordering)
 {
     a->ordering = ordering ? 0xFF : 0x00;
     return 1;
 }
 
-int TS_TST_INFO_get_ordering(const TS_TST_INFO *a)
+int __cdecl TS_TST_INFO_get_ordering(const TS_TST_INFO *a)
 {
     return a->ordering ? 1 : 0;
 }
 
-int TS_TST_INFO_set_nonce(TS_TST_INFO *a, const ASN1_INTEGER *nonce)
+int __cdecl TS_TST_INFO_set_nonce(TS_TST_INFO *a, const ASN1_INTEGER *nonce)
 {
     ASN1_INTEGER *new_nonce;
 
@@ -264,12 +264,12 @@ int TS_TST_INFO_set_nonce(TS_TST_INFO *a, const ASN1_INTEGER *nonce)
     return 1;
 }
 
-const ASN1_INTEGER *TS_TST_INFO_get_nonce(const TS_TST_INFO *a)
+const ASN1_INTEGER * __cdecl TS_TST_INFO_get_nonce(const TS_TST_INFO *a)
 {
     return a->nonce;
 }
 
-int TS_TST_INFO_set_tsa(TS_TST_INFO *a, GENERAL_NAME *tsa)
+int __cdecl TS_TST_INFO_set_tsa(TS_TST_INFO *a, GENERAL_NAME *tsa)
 {
     GENERAL_NAME *new_tsa;
 
@@ -285,17 +285,17 @@ int TS_TST_INFO_set_tsa(TS_TST_INFO *a, GENERAL_NAME *tsa)
     return 1;
 }
 
-GENERAL_NAME *TS_TST_INFO_get_tsa(TS_TST_INFO *a)
+GENERAL_NAME * __cdecl TS_TST_INFO_get_tsa(TS_TST_INFO *a)
 {
     return a->tsa;
 }
 
-STACK_OF(X509_EXTENSION) *TS_TST_INFO_get_exts(TS_TST_INFO *a)
+STACK_OF(X509_EXTENSION) * __cdecl TS_TST_INFO_get_exts(TS_TST_INFO *a)
 {
     return a->extensions;
 }
 
-void TS_TST_INFO_ext_free(TS_TST_INFO *a)
+void __cdecl TS_TST_INFO_ext_free(TS_TST_INFO *a)
 {
     if (!a)
         return;
@@ -303,63 +303,63 @@ void TS_TST_INFO_ext_free(TS_TST_INFO *a)
     a->extensions = NULL;
 }
 
-int TS_TST_INFO_get_ext_count(TS_TST_INFO *a)
+int __cdecl TS_TST_INFO_get_ext_count(TS_TST_INFO *a)
 {
     return X509v3_get_ext_count(a->extensions);
 }
 
-int TS_TST_INFO_get_ext_by_NID(TS_TST_INFO *a, int nid, int lastpos)
+int __cdecl TS_TST_INFO_get_ext_by_NID(TS_TST_INFO *a, int nid, int lastpos)
 {
     return X509v3_get_ext_by_NID(a->extensions, nid, lastpos);
 }
 
-int TS_TST_INFO_get_ext_by_OBJ(TS_TST_INFO *a, const ASN1_OBJECT *obj, int lastpos)
+int __cdecl TS_TST_INFO_get_ext_by_OBJ(TS_TST_INFO *a, const ASN1_OBJECT *obj, int lastpos)
 {
     return X509v3_get_ext_by_OBJ(a->extensions, obj, lastpos);
 }
 
-int TS_TST_INFO_get_ext_by_critical(TS_TST_INFO *a, int crit, int lastpos)
+int __cdecl TS_TST_INFO_get_ext_by_critical(TS_TST_INFO *a, int crit, int lastpos)
 {
     return X509v3_get_ext_by_critical(a->extensions, crit, lastpos);
 }
 
-X509_EXTENSION *TS_TST_INFO_get_ext(TS_TST_INFO *a, int loc)
+X509_EXTENSION * __cdecl TS_TST_INFO_get_ext(TS_TST_INFO *a, int loc)
 {
     return X509v3_get_ext(a->extensions, loc);
 }
 
-X509_EXTENSION *TS_TST_INFO_delete_ext(TS_TST_INFO *a, int loc)
+X509_EXTENSION * __cdecl TS_TST_INFO_delete_ext(TS_TST_INFO *a, int loc)
 {
     return X509v3_delete_ext(a->extensions, loc);
 }
 
-int TS_TST_INFO_add_ext(TS_TST_INFO *a, X509_EXTENSION *ex, int loc)
+int __cdecl TS_TST_INFO_add_ext(TS_TST_INFO *a, X509_EXTENSION *ex, int loc)
 {
     return X509v3_add_ext(&a->extensions, ex, loc) != NULL;
 }
 
-void *TS_TST_INFO_get_ext_d2i(TS_TST_INFO *a, int nid, int *crit, int *idx)
+void * __cdecl TS_TST_INFO_get_ext_d2i(TS_TST_INFO *a, int nid, int *crit, int *idx)
 {
     return X509V3_get_d2i(a->extensions, nid, crit, idx);
 }
 
-int TS_STATUS_INFO_set_status(TS_STATUS_INFO *a, int i)
+int __cdecl TS_STATUS_INFO_set_status(TS_STATUS_INFO *a, int i)
 {
     return ASN1_INTEGER_set(a->status, i);
 }
 
-const ASN1_INTEGER *TS_STATUS_INFO_get0_status(const TS_STATUS_INFO *a)
+const ASN1_INTEGER * __cdecl TS_STATUS_INFO_get0_status(const TS_STATUS_INFO *a)
 {
     return a->status;
 }
 
 const STACK_OF(ASN1_UTF8STRING) *
-TS_STATUS_INFO_get0_text(const TS_STATUS_INFO *a)
+__cdecl TS_STATUS_INFO_get0_text(const TS_STATUS_INFO *a)
 {
     return a->text;
 }
 
-const ASN1_BIT_STRING *TS_STATUS_INFO_get0_failure_info(const TS_STATUS_INFO *a)
+const ASN1_BIT_STRING * __cdecl TS_STATUS_INFO_get0_failure_info(const TS_STATUS_INFO *a)
 {
     return a->failure_info;
 }
diff --git a/crypto/ts/ts_rsp_verify.c b/crypto/ts/ts_rsp_verify.c
index 9deda81b07..1e1382d953 100644
--- a/crypto/ts/ts_rsp_verify.c
+++ b/crypto/ts/ts_rsp_verify.c
@@ -87,7 +87,7 @@ static struct {
  *      - Verify the signature value.
  *      - Returns the signer certificate in 'signer', if 'signer' is not NULL.
  */
-int TS_RESP_verify_signature(PKCS7 *token, STACK_OF(X509) *certs,
+int __cdecl TS_RESP_verify_signature(PKCS7 *token, STACK_OF(X509) *certs,
                              X509_STORE *store, X509 **signer_out)
 {
     STACK_OF(PKCS7_SIGNER_INFO) *sinfos = NULL;
@@ -365,7 +365,7 @@ static int ts_issuer_serial_cmp(ESS_ISSUER_SERIAL *is, X509 *cert)
  *      - Gives an error message if the TS_TST_INFO is not present.
  *      - Calls _TS_RESP_verify_token to verify the token content.
  */
-int TS_RESP_verify_response(TS_VERIFY_CTX *ctx, TS_RESP *response)
+int __cdecl TS_RESP_verify_response(TS_VERIFY_CTX *ctx, TS_RESP *response)
 {
     PKCS7 *token = response->token;
     TS_TST_INFO *tst_info = response->tst_info;
@@ -385,7 +385,7 @@ int TS_RESP_verify_response(TS_VERIFY_CTX *ctx, TS_RESP *response)
  * Tries to extract a TS_TST_INFO structure from the PKCS7 token and
  * calls the internal int_TS_RESP_verify_token function for verifying it.
  */
-int TS_RESP_verify_token(TS_VERIFY_CTX *ctx, PKCS7 *token)
+int __cdecl TS_RESP_verify_token(TS_VERIFY_CTX *ctx, PKCS7 *token)
 {
     TS_TST_INFO *tst_info = PKCS7_to_TS_TST_INFO(token);
     int ret = 0;
diff --git a/crypto/ts/ts_verify_ctx.c b/crypto/ts/ts_verify_ctx.c
index d4792ee04f..19a4a6b2a0 100644
--- a/crypto/ts/ts_verify_ctx.c
+++ b/crypto/ts/ts_verify_ctx.c
@@ -12,7 +12,7 @@
 #include <openssl/ts.h>
 #include "ts_lcl.h"
 
-TS_VERIFY_CTX *TS_VERIFY_CTX_new(void)
+TS_VERIFY_CTX * __cdecl TS_VERIFY_CTX_new(void)
 {
     TS_VERIFY_CTX *ctx = OPENSSL_zalloc(sizeof(*ctx));
 
@@ -21,13 +21,13 @@ TS_VERIFY_CTX *TS_VERIFY_CTX_new(void)
     return ctx;
 }
 
-void TS_VERIFY_CTX_init(TS_VERIFY_CTX *ctx)
+void __cdecl TS_VERIFY_CTX_init(TS_VERIFY_CTX *ctx)
 {
     OPENSSL_assert(ctx != NULL);
     memset(ctx, 0, sizeof(*ctx));
 }
 
-void TS_VERIFY_CTX_free(TS_VERIFY_CTX *ctx)
+void __cdecl TS_VERIFY_CTX_free(TS_VERIFY_CTX *ctx)
 {
     if (!ctx)
         return;
@@ -36,38 +36,38 @@ void TS_VERIFY_CTX_free(TS_VERIFY_CTX *ctx)
     OPENSSL_free(ctx);
 }
 
-int TS_VERIFY_CTX_add_flags(TS_VERIFY_CTX *ctx, int f)
+int __cdecl TS_VERIFY_CTX_add_flags(TS_VERIFY_CTX *ctx, int f)
 {
     ctx->flags |= f;
     return ctx->flags;
 }
 
-int TS_VERIFY_CTX_set_flags(TS_VERIFY_CTX *ctx, int f)
+int __cdecl TS_VERIFY_CTX_set_flags(TS_VERIFY_CTX *ctx, int f)
 {
     ctx->flags = f;
     return ctx->flags;
 }
 
-BIO *TS_VERIFY_CTX_set_data(TS_VERIFY_CTX *ctx, BIO *b)
+BIO * __cdecl TS_VERIFY_CTX_set_data(TS_VERIFY_CTX *ctx, BIO *b)
 {
     ctx->data = b;
     return ctx->data;
 }
 
-X509_STORE *TS_VERIFY_CTX_set_store(TS_VERIFY_CTX *ctx, X509_STORE *s)
+X509_STORE * __cdecl TS_VERIFY_CTX_set_store(TS_VERIFY_CTX *ctx, X509_STORE *s)
 {
     ctx->store = s;
     return ctx->store;
 }
 
-STACK_OF(X509) *TS_VERIFY_CTS_set_certs(TS_VERIFY_CTX *ctx,
+STACK_OF(X509) * __cdecl TS_VERIFY_CTS_set_certs(TS_VERIFY_CTX *ctx,
                                         STACK_OF(X509) *certs)
 {
     ctx->certs = certs;
     return ctx->certs;
 }
 
-unsigned char *TS_VERIFY_CTX_set_imprint(TS_VERIFY_CTX *ctx,
+unsigned char * __cdecl TS_VERIFY_CTX_set_imprint(TS_VERIFY_CTX *ctx,
                                          unsigned char *hexstr, long len)
 {
     ctx->imprint = hexstr;
@@ -75,7 +75,7 @@ unsigned char *TS_VERIFY_CTX_set_imprint(TS_VERIFY_CTX *ctx,
     return ctx->imprint;
 }
 
-void TS_VERIFY_CTX_cleanup(TS_VERIFY_CTX *ctx)
+void __cdecl TS_VERIFY_CTX_cleanup(TS_VERIFY_CTX *ctx)
 {
     if (!ctx)
         return;
@@ -97,7 +97,7 @@ void TS_VERIFY_CTX_cleanup(TS_VERIFY_CTX *ctx)
     TS_VERIFY_CTX_init(ctx);
 }
 
-TS_VERIFY_CTX *TS_REQ_to_TS_VERIFY_CTX(TS_REQ *req, TS_VERIFY_CTX *ctx)
+TS_VERIFY_CTX * __cdecl TS_REQ_to_TS_VERIFY_CTX(TS_REQ *req, TS_VERIFY_CTX *ctx)
 {
     TS_VERIFY_CTX *ret = ctx;
     ASN1_OBJECT *policy;
diff --git a/crypto/txt_db/txt_db.c b/crypto/txt_db/txt_db.c
index c4e1782514..a3e49aa60d 100644
--- a/crypto/txt_db/txt_db.c
+++ b/crypto/txt_db/txt_db.c
@@ -17,7 +17,7 @@
 #undef BUFSIZE
 #define BUFSIZE 512
 
-TXT_DB *TXT_DB_read(BIO *in, int num)
+TXT_DB * __cdecl TXT_DB_read(BIO *in, int num)
 {
     TXT_DB *ret = NULL;
     int esc = 0;
@@ -127,7 +127,7 @@ TXT_DB *TXT_DB_read(BIO *in, int num)
     return NULL;
 }
 
-OPENSSL_STRING *TXT_DB_get_by_index(TXT_DB *db, int idx,
+OPENSSL_STRING * __cdecl TXT_DB_get_by_index(TXT_DB *db, int idx,
                                     OPENSSL_STRING *value)
 {
     OPENSSL_STRING *ret;
@@ -147,7 +147,7 @@ OPENSSL_STRING *TXT_DB_get_by_index(TXT_DB *db, int idx,
     return ret;
 }
 
-int TXT_DB_create_index(TXT_DB *db, int field, int (*qual) (OPENSSL_STRING *),
+int __cdecl TXT_DB_create_index(TXT_DB *db, int field, int (*qual) (OPENSSL_STRING *),
                         OPENSSL_LH_HASHFUNC hash, OPENSSL_LH_COMPFUNC cmp)
 {
     LHASH_OF(OPENSSL_STRING) *idx;
@@ -187,7 +187,7 @@ int TXT_DB_create_index(TXT_DB *db, int field, int (*qual) (OPENSSL_STRING *),
     return 1;
 }
 
-long TXT_DB_write(BIO *out, TXT_DB *db)
+long __cdecl TXT_DB_write(BIO *out, TXT_DB *db)
 {
     long i, j, n, nn, l, tot = 0;
     char *p, **pp, *f;
@@ -234,7 +234,7 @@ long TXT_DB_write(BIO *out, TXT_DB *db)
     return ret;
 }
 
-int TXT_DB_insert(TXT_DB *db, OPENSSL_STRING *row)
+int __cdecl TXT_DB_insert(TXT_DB *db, OPENSSL_STRING *row)
 {
     int i;
     OPENSSL_STRING *r;
@@ -279,7 +279,7 @@ int TXT_DB_insert(TXT_DB *db, OPENSSL_STRING *row)
     return 0;
 }
 
-void TXT_DB_free(TXT_DB *db)
+void __cdecl TXT_DB_free(TXT_DB *db)
 {
     int i, n;
     char **p, *max;
diff --git a/crypto/ui/ui_err.c b/crypto/ui/ui_err.c
index b806872c30..de4f1ca659 100644
--- a/crypto/ui/ui_err.c
+++ b/crypto/ui/ui_err.c
@@ -66,7 +66,7 @@ static const ERR_STRING_DATA UI_str_reasons[] = {
 
 #endif
 
-int ERR_load_UI_strings(void)
+int __cdecl ERR_load_UI_strings(void)
 {
 #ifndef OPENSSL_NO_ERR
     if (ERR_func_error_string(UI_str_functs[0].error) == NULL) {
diff --git a/crypto/ui/ui_lib.c b/crypto/ui/ui_lib.c
index f550972d3e..df3ab8a04b 100644
--- a/crypto/ui/ui_lib.c
+++ b/crypto/ui/ui_lib.c
@@ -15,12 +15,12 @@
 #include <openssl/err.h>
 #include "ui_locl.h"
 
-UI *UI_new(void)
+UI * __cdecl UI_new(void)
 {
     return UI_new_method(NULL);
 }
 
-UI *UI_new_method(const UI_METHOD *method)
+UI * __cdecl UI_new_method(const UI_METHOD *method)
 {
     UI *ret = OPENSSL_zalloc(sizeof(*ret));
 
@@ -49,7 +49,7 @@ UI *UI_new_method(const UI_METHOD *method)
     return ret;
 }
 
-static void free_string(UI_STRING *uis)
+static void __cdecl free_string(UI_STRING *uis)
 {
     if (uis->flags & OUT_STRING_FREEABLE) {
         OPENSSL_free((char *)uis->out_string);
@@ -70,7 +70,7 @@ static void free_string(UI_STRING *uis)
     OPENSSL_free(uis);
 }
 
-void UI_free(UI *ui)
+void __cdecl UI_free(UI *ui)
 {
     if (ui == NULL)
         return;
@@ -195,7 +195,7 @@ static int general_allocate_boolean(UI *ui,
  * Returns the index to the place in the stack or -1 for error.  Uses a
  * direct reference to the prompt.
  */
-int UI_add_input_string(UI *ui, const char *prompt, int flags,
+int __cdecl UI_add_input_string(UI *ui, const char *prompt, int flags,
                         char *result_buf, int minsize, int maxsize)
 {
     return general_allocate_string(ui, prompt, 0,
@@ -204,7 +204,7 @@ int UI_add_input_string(UI *ui, const char *prompt, int flags,
 }
 
 /* Same as UI_add_input_string(), excepts it takes a copy of the prompt */
-int UI_dup_input_string(UI *ui, const char *prompt, int flags,
+int __cdecl UI_dup_input_string(UI *ui, const char *prompt, int flags,
                         char *result_buf, int minsize, int maxsize)
 {
     char *prompt_copy = NULL;
@@ -222,7 +222,7 @@ int UI_dup_input_string(UI *ui, const char *prompt, int flags,
                                    maxsize, NULL);
 }
 
-int UI_add_verify_string(UI *ui, const char *prompt, int flags,
+int __cdecl UI_add_verify_string(UI *ui, const char *prompt, int flags,
                          char *result_buf, int minsize, int maxsize,
                          const char *test_buf)
 {
@@ -231,7 +231,7 @@ int UI_add_verify_string(UI *ui, const char *prompt, int flags,
                                    maxsize, test_buf);
 }
 
-int UI_dup_verify_string(UI *ui, const char *prompt, int flags,
+int __cdecl UI_dup_verify_string(UI *ui, const char *prompt, int flags,
                          char *result_buf, int minsize, int maxsize,
                          const char *test_buf)
 {
@@ -250,7 +250,7 @@ int UI_dup_verify_string(UI *ui, const char *prompt, int flags,
                                    maxsize, test_buf);
 }
 
-int UI_add_input_boolean(UI *ui, const char *prompt, const char *action_desc,
+int __cdecl UI_add_input_boolean(UI *ui, const char *prompt, const char *action_desc,
                          const char *ok_chars, const char *cancel_chars,
                          int flags, char *result_buf)
 {
@@ -259,7 +259,7 @@ int UI_add_input_boolean(UI *ui, const char *prompt, const char *action_desc,
                                     flags, result_buf);
 }
 
-int UI_dup_input_boolean(UI *ui, const char *prompt, const char *action_desc,
+int __cdecl UI_dup_input_boolean(UI *ui, const char *prompt, const char *action_desc,
                          const char *ok_chars, const char *cancel_chars,
                          int flags, char *result_buf)
 {
@@ -311,13 +311,13 @@ int UI_dup_input_boolean(UI *ui, const char *prompt, const char *action_desc,
     return -1;
 }
 
-int UI_add_info_string(UI *ui, const char *text)
+int __cdecl UI_add_info_string(UI *ui, const char *text)
 {
     return general_allocate_string(ui, text, 0, UIT_INFO, 0, NULL, 0, 0,
                                    NULL);
 }
 
-int UI_dup_info_string(UI *ui, const char *text)
+int __cdecl UI_dup_info_string(UI *ui, const char *text)
 {
     char *text_copy = NULL;
 
@@ -333,13 +333,13 @@ int UI_dup_info_string(UI *ui, const char *text)
                                    0, 0, NULL);
 }
 
-int UI_add_error_string(UI *ui, const char *text)
+int __cdecl UI_add_error_string(UI *ui, const char *text)
 {
     return general_allocate_string(ui, text, 0, UIT_ERROR, 0, NULL, 0, 0,
                                    NULL);
 }
 
-int UI_dup_error_string(UI *ui, const char *text)
+int __cdecl UI_dup_error_string(UI *ui, const char *text)
 {
     char *text_copy = NULL;
 
@@ -354,7 +354,7 @@ int UI_dup_error_string(UI *ui, const char *text)
                                    0, 0, NULL);
 }
 
-char *UI_construct_prompt(UI *ui, const char *object_desc,
+char * __cdecl UI_construct_prompt(UI *ui, const char *object_desc,
                           const char *object_name)
 {
     char *prompt = NULL;
@@ -389,7 +389,7 @@ char *UI_construct_prompt(UI *ui, const char *object_desc,
     return prompt;
 }
 
-void *UI_add_user_data(UI *ui, void *user_data)
+void * __cdecl UI_add_user_data(UI *ui, void *user_data)
 {
     void *old_data = ui->user_data;
 
@@ -402,7 +402,7 @@ void *UI_add_user_data(UI *ui, void *user_data)
     return old_data;
 }
 
-int UI_dup_user_data(UI *ui, void *user_data)
+int __cdecl UI_dup_user_data(UI *ui, void *user_data)
 {
     void *duplicate = NULL;
 
@@ -424,12 +424,12 @@ int UI_dup_user_data(UI *ui, void *user_data)
     return 0;
 }
 
-void *UI_get0_user_data(UI *ui)
+void * __cdecl UI_get0_user_data(UI *ui)
 {
     return ui->user_data;
 }
 
-const char *UI_get0_result(UI *ui, int i)
+const char * __cdecl UI_get0_result(UI *ui, int i)
 {
     if (i < 0) {
         UIerr(UI_F_UI_GET0_RESULT, UI_R_INDEX_TOO_SMALL);
@@ -442,7 +442,7 @@ const char *UI_get0_result(UI *ui, int i)
     return UI_get0_result_string(sk_UI_STRING_value(ui->strings, i));
 }
 
-int UI_get_result_length(UI *ui, int i)
+int __cdecl UI_get_result_length(UI *ui, int i)
 {
     if (i < 0) {
         UIerr(UI_F_UI_GET_RESULT_LENGTH, UI_R_INDEX_TOO_SMALL);
@@ -469,7 +469,7 @@ static int print_error(const char *str, size_t len, UI *ui)
     return 0;
 }
 
-int UI_process(UI *ui)
+int __cdecl UI_process(UI *ui)
 {
     int i, ok = 0;
     const char *state = "processing";
@@ -548,7 +548,7 @@ int UI_process(UI *ui)
     return ok;
 }
 
-int UI_ctrl(UI *ui, int cmd, long i, void *p, void (*f) (void))
+int __cdecl UI_ctrl(UI *ui, int cmd, long i, void *p, void (*f) (void))
 {
     if (ui == NULL) {
         UIerr(UI_F_UI_CTRL, ERR_R_PASSED_NULL_PARAMETER);
@@ -573,28 +573,28 @@ int UI_ctrl(UI *ui, int cmd, long i, void *p, void (*f) (void))
     return -1;
 }
 
-int UI_set_ex_data(UI *r, int idx, void *arg)
+int __cdecl UI_set_ex_data(UI *r, int idx, void *arg)
 {
     return CRYPTO_set_ex_data(&r->ex_data, idx, arg);
 }
 
-void *UI_get_ex_data(UI *r, int idx)
+void * __cdecl UI_get_ex_data(UI *r, int idx)
 {
     return CRYPTO_get_ex_data(&r->ex_data, idx);
 }
 
-const UI_METHOD *UI_get_method(UI *ui)
+const UI_METHOD * __cdecl UI_get_method(UI *ui)
 {
     return ui->meth;
 }
 
-const UI_METHOD *UI_set_method(UI *ui, const UI_METHOD *meth)
+const UI_METHOD * __cdecl UI_set_method(UI *ui, const UI_METHOD *meth)
 {
     ui->meth = meth;
     return ui->meth;
 }
 
-UI_METHOD *UI_create_method(const char *name)
+UI_METHOD * __cdecl UI_create_method(const char *name)
 {
     UI_METHOD *ui_method = NULL;
 
@@ -616,7 +616,7 @@ UI_METHOD *UI_create_method(const char *name)
  * (that is, it hasn't been allocated using UI_create_method(), you deserve
  * anything Murphy can throw at you and more! You have been warned.
  */
-void UI_destroy_method(UI_METHOD *ui_method)
+void __cdecl UI_destroy_method(UI_METHOD *ui_method)
 {
     if (ui_method == NULL)
         return;
@@ -627,7 +627,7 @@ void UI_destroy_method(UI_METHOD *ui_method)
     OPENSSL_free(ui_method);
 }
 
-int UI_method_set_opener(UI_METHOD *method, int (*opener) (UI *ui))
+int __cdecl UI_method_set_opener(UI_METHOD *method, int (__cdecl *opener) (UI *ui))
 {
     if (method != NULL) {
         method->ui_open_session = opener;
@@ -636,8 +636,8 @@ int UI_method_set_opener(UI_METHOD *method, int (*opener) (UI *ui))
     return -1;
 }
 
-int UI_method_set_writer(UI_METHOD *method,
-                         int (*writer) (UI *ui, UI_STRING *uis))
+int __cdecl UI_method_set_writer(UI_METHOD *method,
+                         int (__cdecl *writer) (UI *ui, UI_STRING *uis))
 {
     if (method != NULL) {
         method->ui_write_string = writer;
@@ -646,7 +646,7 @@ int UI_method_set_writer(UI_METHOD *method,
     return -1;
 }
 
-int UI_method_set_flusher(UI_METHOD *method, int (*flusher) (UI *ui))
+int __cdecl UI_method_set_flusher(UI_METHOD *method, int (__cdecl *flusher) (UI *ui))
 {
     if (method != NULL) {
         method->ui_flush = flusher;
@@ -655,8 +655,8 @@ int UI_method_set_flusher(UI_METHOD *method, int (*flusher) (UI *ui))
     return -1;
 }
 
-int UI_method_set_reader(UI_METHOD *method,
-                         int (*reader) (UI *ui, UI_STRING *uis))
+int __cdecl UI_method_set_reader(UI_METHOD *method,
+                         int (__cdecl *reader) (UI *ui, UI_STRING *uis))
 {
     if (method != NULL) {
         method->ui_read_string = reader;
@@ -665,7 +665,7 @@ int UI_method_set_reader(UI_METHOD *method,
     return -1;
 }
 
-int UI_method_set_closer(UI_METHOD *method, int (*closer) (UI *ui))
+int __cdecl UI_method_set_closer(UI_METHOD *method, int (__cdecl *closer) (UI *ui))
 {
     if (method != NULL) {
         method->ui_close_session = closer;
@@ -674,9 +674,9 @@ int UI_method_set_closer(UI_METHOD *method, int (*closer) (UI *ui))
     return -1;
 }
 
-int UI_method_set_data_duplicator(UI_METHOD *method,
-                                  void *(*duplicator) (UI *ui, void *ui_data),
-                                  void (*destructor)(UI *ui, void *ui_data))
+int __cdecl UI_method_set_data_duplicator(UI_METHOD *method,
+                                  void *(__cdecl *duplicator) (UI *ui, void *ui_data),
+                                  void (__cdecl *destructor)(UI *ui, void *ui_data))
 {
     if (method != NULL) {
         method->ui_duplicate_data = duplicator;
@@ -686,8 +686,8 @@ int UI_method_set_data_duplicator(UI_METHOD *method,
     return -1;
 }
 
-int UI_method_set_prompt_constructor(UI_METHOD *method,
-                                     char *(*prompt_constructor) (UI *ui,
+int __cdecl UI_method_set_prompt_constructor(UI_METHOD *method,
+                                     char *(__cdecl *prompt_constructor) (UI *ui,
                                                                   const char
                                                                   *object_desc,
                                                                   const char
@@ -700,47 +700,47 @@ int UI_method_set_prompt_constructor(UI_METHOD *method,
     return -1;
 }
 
-int UI_method_set_ex_data(UI_METHOD *method, int idx, void *data)
+int __cdecl UI_method_set_ex_data(UI_METHOD *method, int idx, void *data)
 {
     return CRYPTO_set_ex_data(&method->ex_data, idx, data);
 }
 
-int (*UI_method_get_opener(const UI_METHOD *method)) (UI *)
+int (__cdecl *UI_method_get_opener(const UI_METHOD *method)) (UI *)
 {
     if (method != NULL)
         return method->ui_open_session;
     return NULL;
 }
 
-int (*UI_method_get_writer(const UI_METHOD *method)) (UI *, UI_STRING *)
+int (__cdecl *UI_method_get_writer(const UI_METHOD *method)) (UI *, UI_STRING *)
 {
     if (method != NULL)
         return method->ui_write_string;
     return NULL;
 }
 
-int (*UI_method_get_flusher(const UI_METHOD *method)) (UI *)
+int (__cdecl *UI_method_get_flusher(const UI_METHOD *method)) (UI *)
 {
     if (method != NULL)
         return method->ui_flush;
     return NULL;
 }
 
-int (*UI_method_get_reader(const UI_METHOD *method)) (UI *, UI_STRING *)
+int (__cdecl *UI_method_get_reader(const UI_METHOD *method)) (UI *, UI_STRING *)
 {
     if (method != NULL)
         return method->ui_read_string;
     return NULL;
 }
 
-int (*UI_method_get_closer(const UI_METHOD *method)) (UI *)
+int (__cdecl *UI_method_get_closer(const UI_METHOD *method)) (UI *)
 {
     if (method != NULL)
         return method->ui_close_session;
     return NULL;
 }
 
-char *(*UI_method_get_prompt_constructor(const UI_METHOD *method))
+char *(__cdecl *UI_method_get_prompt_constructor(const UI_METHOD *method))
     (UI *, const char *, const char *)
 {
     if (method != NULL)
@@ -748,41 +748,41 @@ char *(*UI_method_get_prompt_constructor(const UI_METHOD *method))
     return NULL;
 }
 
-void *(*UI_method_get_data_duplicator(const UI_METHOD *method)) (UI *, void *)
+void *(__cdecl *UI_method_get_data_duplicator(const UI_METHOD *method)) (UI *, void *)
 {
     if (method != NULL)
         return method->ui_duplicate_data;
     return NULL;
 }
 
-void (*UI_method_get_data_destructor(const UI_METHOD *method)) (UI *, void *)
+void (__cdecl *UI_method_get_data_destructor(const UI_METHOD *method)) (UI *, void *)
 {
     if (method != NULL)
         return method->ui_destroy_data;
     return NULL;
 }
 
-const void *UI_method_get_ex_data(const UI_METHOD *method, int idx)
+const void * __cdecl UI_method_get_ex_data(const UI_METHOD *method, int idx)
 {
     return CRYPTO_get_ex_data(&method->ex_data, idx);
 }
 
-enum UI_string_types UI_get_string_type(UI_STRING *uis)
+enum UI_string_types __cdecl UI_get_string_type(UI_STRING *uis)
 {
     return uis->type;
 }
 
-int UI_get_input_flags(UI_STRING *uis)
+int __cdecl UI_get_input_flags(UI_STRING *uis)
 {
     return uis->input_flags;
 }
 
-const char *UI_get0_output_string(UI_STRING *uis)
+const char * __cdecl UI_get0_output_string(UI_STRING *uis)
 {
     return uis->out_string;
 }
 
-const char *UI_get0_action_string(UI_STRING *uis)
+const char * __cdecl UI_get0_action_string(UI_STRING *uis)
 {
     switch (uis->type) {
     case UIT_BOOLEAN:
@@ -797,7 +797,7 @@ const char *UI_get0_action_string(UI_STRING *uis)
     return NULL;
 }
 
-const char *UI_get0_result_string(UI_STRING *uis)
+const char * __cdecl UI_get0_result_string(UI_STRING *uis)
 {
     switch (uis->type) {
     case UIT_PROMPT:
@@ -812,7 +812,7 @@ const char *UI_get0_result_string(UI_STRING *uis)
     return NULL;
 }
 
-int UI_get_result_string_length(UI_STRING *uis)
+int __cdecl UI_get_result_string_length(UI_STRING *uis)
 {
     switch (uis->type) {
     case UIT_PROMPT:
@@ -827,7 +827,7 @@ int UI_get_result_string_length(UI_STRING *uis)
     return -1;
 }
 
-const char *UI_get0_test_string(UI_STRING *uis)
+const char * __cdecl UI_get0_test_string(UI_STRING *uis)
 {
     switch (uis->type) {
     case UIT_VERIFY:
@@ -842,7 +842,7 @@ const char *UI_get0_test_string(UI_STRING *uis)
     return NULL;
 }
 
-int UI_get_result_minsize(UI_STRING *uis)
+int __cdecl UI_get_result_minsize(UI_STRING *uis)
 {
     switch (uis->type) {
     case UIT_PROMPT:
@@ -857,7 +857,7 @@ int UI_get_result_minsize(UI_STRING *uis)
     return -1;
 }
 
-int UI_get_result_maxsize(UI_STRING *uis)
+int __cdecl UI_get_result_maxsize(UI_STRING *uis)
 {
     switch (uis->type) {
     case UIT_PROMPT:
@@ -872,7 +872,7 @@ int UI_get_result_maxsize(UI_STRING *uis)
     return -1;
 }
 
-int UI_set_result(UI *ui, UI_STRING *uis, const char *result)
+int __cdecl UI_set_result(UI *ui, UI_STRING *uis, const char *result)
 {
 #if 0
     /*
@@ -884,7 +884,7 @@ int UI_set_result(UI *ui, UI_STRING *uis, const char *result)
     return UI_set_result_ex(ui, uis, result, strlen(result));
 }
 
-int UI_set_result_ex(UI *ui, UI_STRING *uis, const char *result, int len)
+int __cdecl UI_set_result_ex(UI *ui, UI_STRING *uis, const char *result, int len)
 {
     ui->flags &= ~UI_FLAG_REDOABLE;
 
diff --git a/crypto/ui/ui_locl.h b/crypto/ui/ui_locl.h
index 19b33b8fc6..c128fc3515 100644
--- a/crypto/ui/ui_locl.h
+++ b/crypto/ui/ui_locl.h
@@ -28,21 +28,21 @@ struct ui_method_st {
      * whatever. This function should use the ex_data structure to save
      * intermediate data.
      */
-    int (*ui_open_session) (UI *ui);
-    int (*ui_write_string) (UI *ui, UI_STRING *uis);
+    int (__cdecl *ui_open_session) (UI *ui);
+    int (__cdecl *ui_write_string) (UI *ui, UI_STRING *uis);
     /*
      * Flush the output.  If a GUI dialog box is used, this function can be
      * used to actually display it.
      */
-    int (*ui_flush) (UI *ui);
-    int (*ui_read_string) (UI *ui, UI_STRING *uis);
-    int (*ui_close_session) (UI *ui);
+    int (__cdecl *ui_flush) (UI *ui);
+    int (__cdecl *ui_read_string) (UI *ui, UI_STRING *uis);
+    int (__cdecl *ui_close_session) (UI *ui);
     /*
      * Duplicate the ui_data that often comes alongside a ui_method.  This
      * allows some backends to save away UI information for later use.
      */
-    void *(*ui_duplicate_data) (UI *ui, void *ui_data);
-    void (*ui_destroy_data) (UI *ui, void *ui_data);
+    void *(__cdecl *ui_duplicate_data) (UI *ui, void *ui_data);
+    void (__cdecl *ui_destroy_data) (UI *ui, void *ui_data);
     /*
      * Construct a prompt in a user-defined manner.  object_desc is a textual
      * short description of the object, for example "pass phrase", and
@@ -50,7 +50,7 @@ struct ui_method_st {
      * name. The returned string shall always be allocated on the heap with
      * OPENSSL_malloc(), and need to be free'd with OPENSSL_free().
      */
-    char *(*ui_construct_prompt) (UI *ui, const char *object_desc,
+    char *(__cdecl *ui_construct_prompt) (UI *ui, const char *object_desc,
                                   const char *object_name);
     /*
      * UI_METHOD specific application data.
diff --git a/crypto/ui/ui_null.c b/crypto/ui/ui_null.c
index 9e5f6fca59..de87d40272 100644
--- a/crypto/ui/ui_null.c
+++ b/crypto/ui/ui_null.c
@@ -20,7 +20,7 @@ static const UI_METHOD ui_null = {
 };
 
 /* The method with all the built-in thingies */
-const UI_METHOD *UI_null(void)
+const UI_METHOD * __cdecl UI_null(void)
 {
     return &ui_null;
 }
diff --git a/crypto/ui/ui_openssl.c b/crypto/ui/ui_openssl.c
index 0ec9f0daf3..7fe4e634a5 100644
--- a/crypto/ui/ui_openssl.c
+++ b/crypto/ui/ui_openssl.c
@@ -159,7 +159,7 @@ struct IOSB {
 # ifdef SIGACTION
 static struct sigaction savsig[NX509_SIG];
 # else
-static void (*savsig[NX509_SIG]) (int);
+static void (__cdecl *savsig[NX509_SIG]) (int);
 # endif
 
 # ifdef OPENSSL_SYS_VMS
@@ -183,28 +183,28 @@ static int is_a_tty;
 /* Declare static functions */
 # if !defined(OPENSSL_SYS_WINCE)
 static int read_till_nl(FILE *);
-static void recsig(int);
-static void pushsig(void);
-static void popsig(void);
+static void __cdecl recsig(int);
+static void __cdecl pushsig(void);
+static void __cdecl popsig(void);
 # endif
 # if defined(OPENSSL_SYS_MSDOS) && !defined(_WIN32)
 static int noecho_fgets(char *buf, int size, FILE *tty);
 # endif
 static int read_string_inner(UI *ui, UI_STRING *uis, int echo, int strip_nl);
 
-static int read_string(UI *ui, UI_STRING *uis);
-static int write_string(UI *ui, UI_STRING *uis);
+static int __cdecl read_string(UI *ui, UI_STRING *uis);
+static int __cdecl write_string(UI *ui, UI_STRING *uis);
 
-static int open_console(UI *ui);
-static int echo_console(UI *ui);
-static int noecho_console(UI *ui);
-static int close_console(UI *ui);
+static int __cdecl open_console(UI *ui);
+static int __cdecl echo_console(UI *ui);
+static int __cdecl noecho_console(UI *ui);
+static int __cdecl close_console(UI *ui);
 
 /*
  * The following function makes sure that info and error strings are printed
  * before any prompt.
  */
-static int write_string(UI *ui, UI_STRING *uis)
+static int __cdecl write_string(UI *ui, UI_STRING *uis)
 {
     switch (UI_get_string_type(uis)) {
     case UIT_ERROR:
@@ -221,7 +221,7 @@ static int write_string(UI *ui, UI_STRING *uis)
     return 1;
 }
 
-static int read_string(UI *ui, UI_STRING *uis)
+static int __cdecl read_string(UI *ui, UI_STRING *uis)
 {
     int ok = 0;
 
@@ -374,7 +374,7 @@ static int read_string_inner(UI *ui, UI_STRING *uis, int echo, int strip_nl)
 }
 
 /* Internal functions to open, handle and close a channel to the console.  */
-static int open_console(UI *ui)
+static int __cdecl open_console(UI *ui)
 {
     CRYPTO_THREAD_write_lock(ui->lock);
     is_a_tty = 1;
@@ -481,7 +481,7 @@ static int open_console(UI *ui)
     return 1;
 }
 
-static int noecho_console(UI *ui)
+static int __cdecl noecho_console(UI *ui)
 {
 # ifdef TTY_FLAGS
     memcpy(&(tty_new), &(tty_orig), sizeof(tty_orig));
@@ -523,7 +523,7 @@ static int noecho_console(UI *ui)
     return 1;
 }
 
-static int echo_console(UI *ui)
+static int __cdecl echo_console(UI *ui)
 {
 # if defined(TTY_set) && !defined(OPENSSL_SYS_VMS)
     memcpy(&(tty_new), &(tty_orig), sizeof(tty_orig));
@@ -560,7 +560,7 @@ static int echo_console(UI *ui)
     return 1;
 }
 
-static int close_console(UI *ui)
+static int __cdecl close_console(UI *ui)
 {
     if (tty_in != stdin)
         fclose(tty_in);
@@ -584,7 +584,7 @@ static int close_console(UI *ui)
 
 # if !defined(OPENSSL_SYS_WINCE)
 /* Internal functions to handle signals and act on them */
-static void pushsig(void)
+static void __cdecl pushsig(void)
 {
 #  ifndef OPENSSL_SYS_WIN32
     int i;
@@ -630,7 +630,7 @@ static void pushsig(void)
 #  endif
 }
 
-static void popsig(void)
+static void __cdecl popsig(void)
 {
 #  ifdef OPENSSL_SYS_WIN32
     signal(SIGABRT, savsig[SIGABRT]);
@@ -659,7 +659,7 @@ static void popsig(void)
 #  endif
 }
 
-static void recsig(int i)
+static void __cdecl recsig(int i)
 {
     intr_signal = i;
 }
@@ -720,7 +720,7 @@ static UI_METHOD ui_openssl = {
 };
 
 /* The method with all the built-in console thingies */
-UI_METHOD *UI_OpenSSL(void)
+UI_METHOD * __cdecl UI_OpenSSL(void)
 {
     return &ui_openssl;
 }
@@ -733,12 +733,12 @@ static const UI_METHOD *default_UI_meth = NULL;
 
 #endif
 
-void UI_set_default_method(const UI_METHOD *meth)
+void __cdecl UI_set_default_method(const UI_METHOD *meth)
 {
     default_UI_meth = meth;
 }
 
-const UI_METHOD *UI_get_default_method(void)
+const UI_METHOD * __cdecl UI_get_default_method(void)
 {
     return default_UI_meth;
 }
diff --git a/crypto/ui/ui_util.c b/crypto/ui/ui_util.c
index b379324f9b..8b502f1bdb 100644
--- a/crypto/ui/ui_util.c
+++ b/crypto/ui/ui_util.c
@@ -15,7 +15,7 @@
 #define BUFSIZ 256
 #endif
 
-int UI_UTIL_read_pw_string(char *buf, int length, const char *prompt,
+int __cdecl UI_UTIL_read_pw_string(char *buf, int length, const char *prompt,
                            int verify)
 {
     char buff[BUFSIZ];
@@ -28,7 +28,7 @@ int UI_UTIL_read_pw_string(char *buf, int length, const char *prompt,
     return ret;
 }
 
-int UI_UTIL_read_pw(char *buf, char *buff, int size, const char *prompt,
+int __cdecl UI_UTIL_read_pw(char *buf, char *buff, int size, const char *prompt,
                     int verify)
 {
     int ok = 0;
@@ -60,7 +60,7 @@ struct pem_password_cb_data {
     int rwflag;
 };
 
-static void ui_new_method_data(void *parent, void *ptr, CRYPTO_EX_DATA *ad,
+static void __cdecl ui_new_method_data(void *parent, void *ptr, CRYPTO_EX_DATA *ad,
                                int idx, long argl, void *argp)
 {
     /*
@@ -69,7 +69,7 @@ static void ui_new_method_data(void *parent, void *ptr, CRYPTO_EX_DATA *ad,
      */
 }
 
-static int ui_dup_method_data(CRYPTO_EX_DATA *to, const CRYPTO_EX_DATA *from,
+static int __cdecl ui_dup_method_data(CRYPTO_EX_DATA *to, const CRYPTO_EX_DATA *from,
                               void *from_d, int idx, long argl, void *argp)
 {
     void **pptr = (void **)from_d;
@@ -78,7 +78,7 @@ static int ui_dup_method_data(CRYPTO_EX_DATA *to, const CRYPTO_EX_DATA *from,
     return 1;
 }
 
-static void ui_free_method_data(void *parent, void *ptr, CRYPTO_EX_DATA *ad,
+static void __cdecl ui_free_method_data(void *parent, void *ptr, CRYPTO_EX_DATA *ad,
                                 int idx, long argl, void *argp)
 {
     OPENSSL_free(ptr);
@@ -95,11 +95,11 @@ DEFINE_RUN_ONCE_STATIC(ui_method_data_index_init)
     return 1;
 }
 
-static int ui_open(UI *ui)
+static int __cdecl ui_open(UI *ui)
 {
     return 1;
 }
-static int ui_read(UI *ui, UI_STRING *uis)
+static int __cdecl ui_read(UI *ui, UI_STRING *uis)
 {
     switch (UI_get_string_type(uis)) {
     case UIT_PROMPT:
@@ -129,16 +129,16 @@ static int ui_read(UI *ui, UI_STRING *uis)
     }
     return 1;
 }
-static int ui_write(UI *ui, UI_STRING *uis)
+static int __cdecl ui_write(UI *ui, UI_STRING *uis)
 {
     return 1;
 }
-static int ui_close(UI *ui)
+static int __cdecl ui_close(UI *ui)
 {
     return 1;
 }
 
-UI_METHOD *UI_UTIL_wrap_read_pem_callback(pem_password_cb *cb, int rwflag)
+UI_METHOD * __cdecl UI_UTIL_wrap_read_pem_callback(pem_password_cb *cb, int rwflag)
 {
     struct pem_password_cb_data *data = NULL;
     UI_METHOD *ui_method = NULL;
diff --git a/crypto/uid.c b/crypto/uid.c
index 65b1171039..0bc9bc0d8c 100644
--- a/crypto/uid.c
+++ b/crypto/uid.c
@@ -12,7 +12,7 @@
 
 #if defined(OPENSSL_SYS_WIN32) || defined(OPENSSL_SYS_VXWORKS) || defined(OPENSSL_SYS_UEFI)
 
-int OPENSSL_issetugid(void)
+int __cdecl OPENSSL_issetugid(void)
 {
     return 0;
 }
@@ -21,7 +21,7 @@ int OPENSSL_issetugid(void)
 
 # include OPENSSL_UNISTD
 
-int OPENSSL_issetugid(void)
+int __cdecl OPENSSL_issetugid(void)
 {
     return issetugid();
 }
@@ -38,7 +38,7 @@ int OPENSSL_issetugid(void)
 #  endif
 # endif
 
-int OPENSSL_issetugid(void)
+int __cdecl OPENSSL_issetugid(void)
 {
 # ifdef OSSL_IMPLEMENT_GETAUXVAL
     return getauxval(AT_SECURE) != 0;
diff --git a/crypto/whrlpool/wp_dgst.c b/crypto/whrlpool/wp_dgst.c
index 1ac29803a4..ea24b4af62 100644
--- a/crypto/whrlpool/wp_dgst.c
+++ b/crypto/whrlpool/wp_dgst.c
@@ -56,13 +56,13 @@
 #include "wp_locl.h"
 #include <string.h>
 
-int WHIRLPOOL_Init(WHIRLPOOL_CTX *c)
+int __cdecl WHIRLPOOL_Init(WHIRLPOOL_CTX *c)
 {
     memset(c, 0, sizeof(*c));
     return 1;
 }
 
-int WHIRLPOOL_Update(WHIRLPOOL_CTX *c, const void *_inp, size_t bytes)
+int __cdecl WHIRLPOOL_Update(WHIRLPOOL_CTX *c, const void *_inp, size_t bytes)
 {
     /*
      * Well, largest suitable chunk size actually is
@@ -83,7 +83,7 @@ int WHIRLPOOL_Update(WHIRLPOOL_CTX *c, const void *_inp, size_t bytes)
     return 1;
 }
 
-void WHIRLPOOL_BitUpdate(WHIRLPOOL_CTX *c, const void *_inp, size_t bits)
+void __cdecl WHIRLPOOL_BitUpdate(WHIRLPOOL_CTX *c, const void *_inp, size_t bits)
 {
     size_t n;
     unsigned int bitoff = c->bitoff,
@@ -205,7 +205,7 @@ void WHIRLPOOL_BitUpdate(WHIRLPOOL_CTX *c, const void *_inp, size_t bits)
     }
 }
 
-int WHIRLPOOL_Final(unsigned char *md, WHIRLPOOL_CTX *c)
+int __cdecl WHIRLPOOL_Final(unsigned char *md, WHIRLPOOL_CTX *c)
 {
     unsigned int bitoff = c->bitoff, byteoff = bitoff / 8;
     size_t i, j, v;
@@ -244,7 +244,7 @@ int WHIRLPOOL_Final(unsigned char *md, WHIRLPOOL_CTX *c)
     return 0;
 }
 
-unsigned char *WHIRLPOOL(const void *inp, size_t bytes, unsigned char *md)
+unsigned char * __cdecl WHIRLPOOL(const void *inp, size_t bytes, unsigned char *md)
 {
     WHIRLPOOL_CTX ctx;
     static unsigned char m[WHIRLPOOL_DIGEST_LENGTH];
diff --git a/crypto/x509/by_dir.c b/crypto/x509/by_dir.c
index b691a83a0d..d421d67994 100644
--- a/crypto/x509/by_dir.c
+++ b/crypto/x509/by_dir.c
@@ -39,12 +39,12 @@ typedef struct lookup_dir_st {
     CRYPTO_RWLOCK *lock;
 } BY_DIR;
 
-static int dir_ctrl(X509_LOOKUP *ctx, int cmd, const char *argp, long argl,
+static int __cdecl dir_ctrl(X509_LOOKUP *ctx, int cmd, const char *argp, long argl,
                     char **ret);
-static int new_dir(X509_LOOKUP *lu);
-static void free_dir(X509_LOOKUP *lu);
-static int add_cert_dir(BY_DIR *ctx, const char *dir, int type);
-static int get_cert_by_subject(X509_LOOKUP *xl, X509_LOOKUP_TYPE type,
+static int __cdecl new_dir(X509_LOOKUP *lu);
+static void __cdecl free_dir(X509_LOOKUP *lu);
+static int __cdecl add_cert_dir(BY_DIR *ctx, const char *dir, int type);
+static int __cdecl get_cert_by_subject(X509_LOOKUP *xl, X509_LOOKUP_TYPE type,
                                X509_NAME *name, X509_OBJECT *ret);
 static X509_LOOKUP_METHOD x509_dir_lookup = {
     "Load certs from files in a directory",
@@ -59,12 +59,12 @@ static X509_LOOKUP_METHOD x509_dir_lookup = {
     NULL,                       /* get_by_alias */
 };
 
-X509_LOOKUP_METHOD *X509_LOOKUP_hash_dir(void)
+X509_LOOKUP_METHOD * __cdecl X509_LOOKUP_hash_dir(void)
 {
     return &x509_dir_lookup;
 }
 
-static int dir_ctrl(X509_LOOKUP *ctx, int cmd, const char *argp, long argl,
+static int __cdecl dir_ctrl(X509_LOOKUP *ctx, int cmd, const char *argp, long argl,
                     char **retp)
 {
     int ret = 0;
@@ -90,7 +90,7 @@ static int dir_ctrl(X509_LOOKUP *ctx, int cmd, const char *argp, long argl,
     return ret;
 }
 
-static int new_dir(X509_LOOKUP *lu)
+static int __cdecl new_dir(X509_LOOKUP *lu)
 {
     BY_DIR *a = OPENSSL_malloc(sizeof(*a));
 
@@ -118,12 +118,12 @@ static int new_dir(X509_LOOKUP *lu)
     return 0;
 }
 
-static void by_dir_hash_free(BY_DIR_HASH *hash)
+static void __cdecl by_dir_hash_free(BY_DIR_HASH *hash)
 {
     OPENSSL_free(hash);
 }
 
-static int by_dir_hash_cmp(const BY_DIR_HASH *const *a,
+static int __cdecl by_dir_hash_cmp(const BY_DIR_HASH *const *a,
                            const BY_DIR_HASH *const *b)
 {
     if ((*a)->hash > (*b)->hash)
@@ -133,14 +133,14 @@ static int by_dir_hash_cmp(const BY_DIR_HASH *const *a,
     return 0;
 }
 
-static void by_dir_entry_free(BY_DIR_ENTRY *ent)
+static void __cdecl by_dir_entry_free(BY_DIR_ENTRY *ent)
 {
     OPENSSL_free(ent->dir);
     sk_BY_DIR_HASH_pop_free(ent->hashes, by_dir_hash_free);
     OPENSSL_free(ent);
 }
 
-static void free_dir(X509_LOOKUP *lu)
+static void __cdecl free_dir(X509_LOOKUP *lu)
 {
     BY_DIR *a = (BY_DIR *)lu->method_data;
 
@@ -150,7 +150,7 @@ static void free_dir(X509_LOOKUP *lu)
     OPENSSL_free(a);
 }
 
-static int add_cert_dir(BY_DIR *ctx, const char *dir, int type)
+static int __cdecl add_cert_dir(BY_DIR *ctx, const char *dir, int type)
 {
     int j;
     size_t len;
@@ -208,7 +208,7 @@ static int add_cert_dir(BY_DIR *ctx, const char *dir, int type)
     return 1;
 }
 
-static int get_cert_by_subject(X509_LOOKUP *xl, X509_LOOKUP_TYPE type,
+static int __cdecl get_cert_by_subject(X509_LOOKUP *xl, X509_LOOKUP_TYPE type,
                                X509_NAME *name, X509_OBJECT *ret)
 {
     BY_DIR *ctx;
diff --git a/crypto/x509/by_file.c b/crypto/x509/by_file.c
index 244512c935..3929cf4673 100644
--- a/crypto/x509/by_file.c
+++ b/crypto/x509/by_file.c
@@ -17,7 +17,7 @@
 #include <openssl/pem.h>
 #include "x509_lcl.h"
 
-static int by_file_ctrl(X509_LOOKUP *ctx, int cmd, const char *argc,
+static int __cdecl by_file_ctrl(X509_LOOKUP *ctx, int cmd, const char *argc,
                         long argl, char **ret);
 static X509_LOOKUP_METHOD x509_file_lookup = {
     "Load file into cache",
@@ -32,12 +32,12 @@ static X509_LOOKUP_METHOD x509_file_lookup = {
     NULL,                       /* get_by_alias */
 };
 
-X509_LOOKUP_METHOD *X509_LOOKUP_file(void)
+X509_LOOKUP_METHOD * __cdecl X509_LOOKUP_file(void)
 {
     return &x509_file_lookup;
 }
 
-static int by_file_ctrl(X509_LOOKUP *ctx, int cmd, const char *argp,
+static int __cdecl by_file_ctrl(X509_LOOKUP *ctx, int cmd, const char *argp,
                         long argl, char **ret)
 {
     int ok = 0;
@@ -71,7 +71,7 @@ static int by_file_ctrl(X509_LOOKUP *ctx, int cmd, const char *argp,
     return ok;
 }
 
-int X509_load_cert_file(X509_LOOKUP *ctx, const char *file, int type)
+int __cdecl X509_load_cert_file(X509_LOOKUP *ctx, const char *file, int type)
 {
     int ret = 0;
     BIO *in = NULL;
@@ -128,7 +128,7 @@ int X509_load_cert_file(X509_LOOKUP *ctx, const char *file, int type)
     return ret;
 }
 
-int X509_load_crl_file(X509_LOOKUP *ctx, const char *file, int type)
+int __cdecl X509_load_crl_file(X509_LOOKUP *ctx, const char *file, int type)
 {
     int ret = 0;
     BIO *in = NULL;
@@ -185,7 +185,7 @@ int X509_load_crl_file(X509_LOOKUP *ctx, const char *file, int type)
     return ret;
 }
 
-int X509_load_cert_crl_file(X509_LOOKUP *ctx, const char *file, int type)
+int __cdecl X509_load_cert_crl_file(X509_LOOKUP *ctx, const char *file, int type)
 {
     STACK_OF(X509_INFO) *inf;
     X509_INFO *itmp;
diff --git a/crypto/x509/t_crl.c b/crypto/x509/t_crl.c
index 8e262912ff..9f6bd31d8a 100644
--- a/crypto/x509/t_crl.c
+++ b/crypto/x509/t_crl.c
@@ -16,7 +16,7 @@
 #include <openssl/x509v3.h>
 
 #ifndef OPENSSL_NO_STDIO
-int X509_CRL_print_fp(FILE *fp, X509_CRL *x)
+int __cdecl X509_CRL_print_fp(FILE *fp, X509_CRL *x)
 {
     BIO *b;
     int ret;
@@ -32,12 +32,12 @@ int X509_CRL_print_fp(FILE *fp, X509_CRL *x)
 }
 #endif
 
-int X509_CRL_print(BIO *out, X509_CRL *x)
+int __cdecl X509_CRL_print(BIO *out, X509_CRL *x)
 {
   return X509_CRL_print_ex(out, x, XN_FLAG_COMPAT);
 }
 
-int X509_CRL_print_ex(BIO *out, X509_CRL *x, unsigned long nmflag)
+int __cdecl X509_CRL_print_ex(BIO *out, X509_CRL *x, unsigned long nmflag)
 {
     STACK_OF(X509_REVOKED) *rev;
     X509_REVOKED *r;
diff --git a/crypto/x509/t_req.c b/crypto/x509/t_req.c
index dc3b4f262d..f1b6535cce 100644
--- a/crypto/x509/t_req.c
+++ b/crypto/x509/t_req.c
@@ -18,7 +18,7 @@
 #include <openssl/dsa.h>
 
 #ifndef OPENSSL_NO_STDIO
-int X509_REQ_print_fp(FILE *fp, X509_REQ *x)
+int __cdecl X509_REQ_print_fp(FILE *fp, X509_REQ *x)
 {
     BIO *b;
     int ret;
@@ -34,7 +34,7 @@ int X509_REQ_print_fp(FILE *fp, X509_REQ *x)
 }
 #endif
 
-int X509_REQ_print_ex(BIO *bp, X509_REQ *x, unsigned long nmflags,
+int __cdecl X509_REQ_print_ex(BIO *bp, X509_REQ *x, unsigned long nmflags,
                       unsigned long cflag)
 {
     long l;
@@ -208,7 +208,7 @@ int X509_REQ_print_ex(BIO *bp, X509_REQ *x, unsigned long nmflags,
     return 0;
 }
 
-int X509_REQ_print(BIO *bp, X509_REQ *x)
+int __cdecl X509_REQ_print(BIO *bp, X509_REQ *x)
 {
     return X509_REQ_print_ex(bp, x, XN_FLAG_COMPAT, X509_FLAG_COMPAT);
 }
diff --git a/crypto/x509/t_x509.c b/crypto/x509/t_x509.c
index ccacbe7cbf..2c386493ac 100644
--- a/crypto/x509/t_x509.c
+++ b/crypto/x509/t_x509.c
@@ -17,12 +17,12 @@
 #include "internal/asn1_int.h"
 
 #ifndef OPENSSL_NO_STDIO
-int X509_print_fp(FILE *fp, X509 *x)
+int __cdecl X509_print_fp(FILE *fp, X509 *x)
 {
     return X509_print_ex_fp(fp, x, XN_FLAG_COMPAT, X509_FLAG_COMPAT);
 }
 
-int X509_print_ex_fp(FILE *fp, X509 *x, unsigned long nmflag,
+int __cdecl X509_print_ex_fp(FILE *fp, X509 *x, unsigned long nmflag,
                      unsigned long cflag)
 {
     BIO *b;
@@ -39,12 +39,12 @@ int X509_print_ex_fp(FILE *fp, X509 *x, unsigned long nmflag,
 }
 #endif
 
-int X509_print(BIO *bp, X509 *x)
+int __cdecl X509_print(BIO *bp, X509 *x)
 {
     return X509_print_ex(bp, x, XN_FLAG_COMPAT, X509_FLAG_COMPAT);
 }
 
-int X509_print_ex(BIO *bp, X509 *x, unsigned long nmflags,
+int __cdecl X509_print_ex(BIO *bp, X509 *x, unsigned long nmflags,
                   unsigned long cflag)
 {
     long l;
@@ -218,7 +218,7 @@ int X509_print_ex(BIO *bp, X509 *x, unsigned long nmflags,
     return ret;
 }
 
-int X509_ocspid_print(BIO *bp, X509 *x)
+int __cdecl X509_ocspid_print(BIO *bp, X509 *x)
 {
     unsigned char *der = NULL;
     unsigned char *dertmp;
@@ -275,7 +275,7 @@ int X509_ocspid_print(BIO *bp, X509 *x)
     return 0;
 }
 
-int X509_signature_dump(BIO *bp, const ASN1_STRING *sig, int indent)
+int __cdecl X509_signature_dump(BIO *bp, const ASN1_STRING *sig, int indent)
 {
     const unsigned char *s;
     int i, n;
@@ -298,7 +298,7 @@ int X509_signature_dump(BIO *bp, const ASN1_STRING *sig, int indent)
     return 1;
 }
 
-int X509_signature_print(BIO *bp, const X509_ALGOR *sigalg,
+int __cdecl X509_signature_print(BIO *bp, const X509_ALGOR *sigalg,
                          const ASN1_STRING *sig)
 {
     int sig_nid;
@@ -324,7 +324,7 @@ int X509_signature_print(BIO *bp, const X509_ALGOR *sigalg,
     return 1;
 }
 
-int X509_aux_print(BIO *out, X509 *x, int indent)
+int __cdecl X509_aux_print(BIO *out, X509 *x, int indent)
 {
     char oidstr[80], first;
     STACK_OF(ASN1_OBJECT) *trust, *reject;
diff --git a/crypto/x509/x509_att.c b/crypto/x509/x509_att.c
index 3c4566d2e7..4034388283 100644
--- a/crypto/x509/x509_att.c
+++ b/crypto/x509/x509_att.c
@@ -17,12 +17,12 @@
 #include <openssl/x509v3.h>
 #include "x509_lcl.h"
 
-int X509at_get_attr_count(const STACK_OF(X509_ATTRIBUTE) *x)
+int __cdecl X509at_get_attr_count(const STACK_OF(X509_ATTRIBUTE) *x)
 {
     return sk_X509_ATTRIBUTE_num(x);
 }
 
-int X509at_get_attr_by_NID(const STACK_OF(X509_ATTRIBUTE) *x, int nid,
+int __cdecl X509at_get_attr_by_NID(const STACK_OF(X509_ATTRIBUTE) *x, int nid,
                            int lastpos)
 {
     const ASN1_OBJECT *obj = OBJ_nid2obj(nid);
@@ -32,7 +32,7 @@ int X509at_get_attr_by_NID(const STACK_OF(X509_ATTRIBUTE) *x, int nid,
     return X509at_get_attr_by_OBJ(x, obj, lastpos);
 }
 
-int X509at_get_attr_by_OBJ(const STACK_OF(X509_ATTRIBUTE) *sk,
+int __cdecl X509at_get_attr_by_OBJ(const STACK_OF(X509_ATTRIBUTE) *sk,
                            const ASN1_OBJECT *obj, int lastpos)
 {
     int n;
@@ -52,7 +52,7 @@ int X509at_get_attr_by_OBJ(const STACK_OF(X509_ATTRIBUTE) *sk,
     return -1;
 }
 
-X509_ATTRIBUTE *X509at_get_attr(const STACK_OF(X509_ATTRIBUTE) *x, int loc)
+X509_ATTRIBUTE * __cdecl X509at_get_attr(const STACK_OF(X509_ATTRIBUTE) *x, int loc)
 {
     if (x == NULL || sk_X509_ATTRIBUTE_num(x) <= loc || loc < 0)
         return NULL;
@@ -60,7 +60,7 @@ X509_ATTRIBUTE *X509at_get_attr(const STACK_OF(X509_ATTRIBUTE) *x, int loc)
     return sk_X509_ATTRIBUTE_value(x, loc);
 }
 
-X509_ATTRIBUTE *X509at_delete_attr(STACK_OF(X509_ATTRIBUTE) *x, int loc)
+X509_ATTRIBUTE * __cdecl X509at_delete_attr(STACK_OF(X509_ATTRIBUTE) *x, int loc)
 {
     X509_ATTRIBUTE *ret;
 
@@ -70,7 +70,7 @@ X509_ATTRIBUTE *X509at_delete_attr(STACK_OF(X509_ATTRIBUTE) *x, int loc)
     return ret;
 }
 
-STACK_OF(X509_ATTRIBUTE) *X509at_add1_attr(STACK_OF(X509_ATTRIBUTE) **x,
+STACK_OF(X509_ATTRIBUTE) * __cdecl X509at_add1_attr(STACK_OF(X509_ATTRIBUTE) **x,
                                            X509_ATTRIBUTE *attr)
 {
     X509_ATTRIBUTE *new_attr = NULL;
@@ -102,7 +102,7 @@ STACK_OF(X509_ATTRIBUTE) *X509at_add1_attr(STACK_OF(X509_ATTRIBUTE) **x,
     return NULL;
 }
 
-STACK_OF(X509_ATTRIBUTE) *X509at_add1_attr_by_OBJ(STACK_OF(X509_ATTRIBUTE)
+STACK_OF(X509_ATTRIBUTE) * __cdecl X509at_add1_attr_by_OBJ(STACK_OF(X509_ATTRIBUTE)
                                                   **x, const ASN1_OBJECT *obj,
                                                   int type,
                                                   const unsigned char *bytes,
@@ -118,7 +118,7 @@ STACK_OF(X509_ATTRIBUTE) *X509at_add1_attr_by_OBJ(STACK_OF(X509_ATTRIBUTE)
     return ret;
 }
 
-STACK_OF(X509_ATTRIBUTE) *X509at_add1_attr_by_NID(STACK_OF(X509_ATTRIBUTE)
+STACK_OF(X509_ATTRIBUTE) * __cdecl X509at_add1_attr_by_NID(STACK_OF(X509_ATTRIBUTE)
                                                   **x, int nid, int type,
                                                   const unsigned char *bytes,
                                                   int len)
@@ -133,7 +133,7 @@ STACK_OF(X509_ATTRIBUTE) *X509at_add1_attr_by_NID(STACK_OF(X509_ATTRIBUTE)
     return ret;
 }
 
-STACK_OF(X509_ATTRIBUTE) *X509at_add1_attr_by_txt(STACK_OF(X509_ATTRIBUTE)
+STACK_OF(X509_ATTRIBUTE) * __cdecl X509at_add1_attr_by_txt(STACK_OF(X509_ATTRIBUTE)
                                                   **x, const char *attrname,
                                                   int type,
                                                   const unsigned char *bytes,
@@ -149,7 +149,7 @@ STACK_OF(X509_ATTRIBUTE) *X509at_add1_attr_by_txt(STACK_OF(X509_ATTRIBUTE)
     return ret;
 }
 
-void *X509at_get0_data_by_OBJ(STACK_OF(X509_ATTRIBUTE) *x,
+void * __cdecl X509at_get0_data_by_OBJ(STACK_OF(X509_ATTRIBUTE) *x,
                               const ASN1_OBJECT *obj, int lastpos, int type)
 {
     int i;
@@ -165,7 +165,7 @@ void *X509at_get0_data_by_OBJ(STACK_OF(X509_ATTRIBUTE) *x,
     return X509_ATTRIBUTE_get0_data(at, 0, type, NULL);
 }
 
-X509_ATTRIBUTE *X509_ATTRIBUTE_create_by_NID(X509_ATTRIBUTE **attr, int nid,
+X509_ATTRIBUTE * __cdecl X509_ATTRIBUTE_create_by_NID(X509_ATTRIBUTE **attr, int nid,
                                              int atrtype, const void *data,
                                              int len)
 {
@@ -183,7 +183,7 @@ X509_ATTRIBUTE *X509_ATTRIBUTE_create_by_NID(X509_ATTRIBUTE **attr, int nid,
     return ret;
 }
 
-X509_ATTRIBUTE *X509_ATTRIBUTE_create_by_OBJ(X509_ATTRIBUTE **attr,
+X509_ATTRIBUTE * __cdecl X509_ATTRIBUTE_create_by_OBJ(X509_ATTRIBUTE **attr,
                                              const ASN1_OBJECT *obj,
                                              int atrtype, const void *data,
                                              int len)
@@ -213,7 +213,7 @@ X509_ATTRIBUTE *X509_ATTRIBUTE_create_by_OBJ(X509_ATTRIBUTE **attr,
     return NULL;
 }
 
-X509_ATTRIBUTE *X509_ATTRIBUTE_create_by_txt(X509_ATTRIBUTE **attr,
+X509_ATTRIBUTE * __cdecl X509_ATTRIBUTE_create_by_txt(X509_ATTRIBUTE **attr,
                                              const char *atrname, int type,
                                              const unsigned char *bytes,
                                              int len)
@@ -233,7 +233,7 @@ X509_ATTRIBUTE *X509_ATTRIBUTE_create_by_txt(X509_ATTRIBUTE **attr,
     return nattr;
 }
 
-int X509_ATTRIBUTE_set1_object(X509_ATTRIBUTE *attr, const ASN1_OBJECT *obj)
+int __cdecl X509_ATTRIBUTE_set1_object(X509_ATTRIBUTE *attr, const ASN1_OBJECT *obj)
 {
     if ((attr == NULL) || (obj == NULL))
         return 0;
@@ -242,7 +242,7 @@ int X509_ATTRIBUTE_set1_object(X509_ATTRIBUTE *attr, const ASN1_OBJECT *obj)
     return attr->object != NULL;
 }
 
-int X509_ATTRIBUTE_set1_data(X509_ATTRIBUTE *attr, int attrtype,
+int __cdecl X509_ATTRIBUTE_set1_data(X509_ATTRIBUTE *attr, int attrtype,
                              const void *data, int len)
 {
     ASN1_TYPE *ttmp = NULL;
@@ -293,21 +293,21 @@ int X509_ATTRIBUTE_set1_data(X509_ATTRIBUTE *attr, int attrtype,
     return 0;
 }
 
-int X509_ATTRIBUTE_count(const X509_ATTRIBUTE *attr)
+int __cdecl X509_ATTRIBUTE_count(const X509_ATTRIBUTE *attr)
 {
     if (attr == NULL)
         return 0;
     return sk_ASN1_TYPE_num(attr->set);
 }
 
-ASN1_OBJECT *X509_ATTRIBUTE_get0_object(X509_ATTRIBUTE *attr)
+ASN1_OBJECT * __cdecl X509_ATTRIBUTE_get0_object(X509_ATTRIBUTE *attr)
 {
     if (attr == NULL)
         return NULL;
     return attr->object;
 }
 
-void *X509_ATTRIBUTE_get0_data(X509_ATTRIBUTE *attr, int idx,
+void * __cdecl X509_ATTRIBUTE_get0_data(X509_ATTRIBUTE *attr, int idx,
                                int atrtype, void *data)
 {
     ASN1_TYPE *ttmp;
@@ -323,7 +323,7 @@ void *X509_ATTRIBUTE_get0_data(X509_ATTRIBUTE *attr, int idx,
     return ttmp->value.ptr;
 }
 
-ASN1_TYPE *X509_ATTRIBUTE_get0_type(X509_ATTRIBUTE *attr, int idx)
+ASN1_TYPE * __cdecl X509_ATTRIBUTE_get0_type(X509_ATTRIBUTE *attr, int idx)
 {
     if (attr == NULL)
         return NULL;
diff --git a/crypto/x509/x509_cmp.c b/crypto/x509/x509_cmp.c
index 833bfce1bf..801a64dd78 100644
--- a/crypto/x509/x509_cmp.c
+++ b/crypto/x509/x509_cmp.c
@@ -15,7 +15,7 @@
 #include <openssl/x509v3.h>
 #include "internal/x509_int.h"
 
-int X509_issuer_and_serial_cmp(const X509 *a, const X509 *b)
+int __cdecl X509_issuer_and_serial_cmp(const X509 *a, const X509 *b)
 {
     int i;
     const X509_CINF *ai, *bi;
@@ -29,7 +29,7 @@ int X509_issuer_and_serial_cmp(const X509 *a, const X509 *b)
 }
 
 #ifndef OPENSSL_NO_MD5
-unsigned long X509_issuer_and_serial_hash(X509 *a)
+unsigned long __cdecl X509_issuer_and_serial_hash(X509 *a)
 {
     unsigned long ret = 0;
     EVP_MD_CTX *ctx = EVP_MD_CTX_new();
@@ -59,65 +59,65 @@ unsigned long X509_issuer_and_serial_hash(X509 *a)
 }
 #endif
 
-int X509_issuer_name_cmp(const X509 *a, const X509 *b)
+int __cdecl X509_issuer_name_cmp(const X509 *a, const X509 *b)
 {
     return X509_NAME_cmp(a->cert_info.issuer, b->cert_info.issuer);
 }
 
-int X509_subject_name_cmp(const X509 *a, const X509 *b)
+int __cdecl X509_subject_name_cmp(const X509 *a, const X509 *b)
 {
     return X509_NAME_cmp(a->cert_info.subject, b->cert_info.subject);
 }
 
-int X509_CRL_cmp(const X509_CRL *a, const X509_CRL *b)
+int __cdecl X509_CRL_cmp(const X509_CRL *a, const X509_CRL *b)
 {
     return X509_NAME_cmp(a->crl.issuer, b->crl.issuer);
 }
 
-int X509_CRL_match(const X509_CRL *a, const X509_CRL *b)
+int __cdecl X509_CRL_match(const X509_CRL *a, const X509_CRL *b)
 {
     return memcmp(a->sha1_hash, b->sha1_hash, 20);
 }
 
-X509_NAME *X509_get_issuer_name(const X509 *a)
+X509_NAME * __cdecl X509_get_issuer_name(const X509 *a)
 {
     return a->cert_info.issuer;
 }
 
-unsigned long X509_issuer_name_hash(X509 *x)
+unsigned long __cdecl X509_issuer_name_hash(X509 *x)
 {
     return X509_NAME_hash(x->cert_info.issuer);
 }
 
 #ifndef OPENSSL_NO_MD5
-unsigned long X509_issuer_name_hash_old(X509 *x)
+unsigned long __cdecl X509_issuer_name_hash_old(X509 *x)
 {
     return X509_NAME_hash_old(x->cert_info.issuer);
 }
 #endif
 
-X509_NAME *X509_get_subject_name(const X509 *a)
+X509_NAME * __cdecl X509_get_subject_name(const X509 *a)
 {
     return a->cert_info.subject;
 }
 
-ASN1_INTEGER *X509_get_serialNumber(X509 *a)
+ASN1_INTEGER * __cdecl X509_get_serialNumber(X509 *a)
 {
     return &a->cert_info.serialNumber;
 }
 
-const ASN1_INTEGER *X509_get0_serialNumber(const X509 *a)
+const ASN1_INTEGER * __cdecl X509_get0_serialNumber(const X509 *a)
 {
     return &a->cert_info.serialNumber;
 }
 
-unsigned long X509_subject_name_hash(X509 *x)
+unsigned long __cdecl X509_subject_name_hash(X509 *x)
 {
     return X509_NAME_hash(x->cert_info.subject);
 }
 
 #ifndef OPENSSL_NO_MD5
-unsigned long X509_subject_name_hash_old(X509 *x)
+unsigned long __cdecl X509_subject_name_hash_old(X509 *x)
 {
     return X509_NAME_hash_old(x->cert_info.subject);
 }
@@ -131,7 +131,7 @@ unsigned long X509_subject_name_hash_old(X509 *x)
  * certain cert information is cached. So this is the point where the
  * "depth-first" constification tree has to halt with an evil cast.
  */
-int X509_cmp(const X509 *a, const X509 *b)
+int __cdecl X509_cmp(const X509 *a, const X509 *b)
 {
     int rv;
     /* ensure hash is valid */
@@ -153,7 +153,7 @@ int X509_cmp(const X509 *a, const X509 *b)
     return rv;
 }
 
-int X509_NAME_cmp(const X509_NAME *a, const X509_NAME *b)
+int __cdecl X509_NAME_cmp(const X509_NAME *a, const X509_NAME *b)
 {
     int ret;
 
@@ -180,7 +180,7 @@ int X509_NAME_cmp(const X509_NAME *a, const X509_NAME *b)
 
 }
 
-unsigned long X509_NAME_hash(X509_NAME *x)
+unsigned long __cdecl X509_NAME_hash(X509_NAME *x)
 {
     unsigned long ret = 0;
     unsigned char md[SHA_DIGEST_LENGTH];
@@ -203,7 +203,7 @@ unsigned long X509_NAME_hash(X509_NAME *x)
  * this is reasonably efficient.
  */
 
-unsigned long X509_NAME_hash_old(X509_NAME *x)
+unsigned long __cdecl X509_NAME_hash_old(X509_NAME *x)
 {
     EVP_MD_CTX *md_ctx = EVP_MD_CTX_new();
     unsigned long ret = 0;
@@ -228,7 +228,7 @@ unsigned long X509_NAME_hash_old(X509_NAME *x)
 #endif
 
 /* Search a stack of X509 for a match */
-X509 *X509_find_by_issuer_and_serial(STACK_OF(X509) *sk, X509_NAME *name,
+X509 * __cdecl X509_find_by_issuer_and_serial(STACK_OF(X509) *sk, X509_NAME *name,
                                      ASN1_INTEGER *serial)
 {
     int i;
@@ -248,7 +248,7 @@ X509 *X509_find_by_issuer_and_serial(STACK_OF(X509) *sk, X509_NAME *name,
     return NULL;
 }
 
-X509 *X509_find_by_subject(STACK_OF(X509) *sk, X509_NAME *name)
+X509 * __cdecl X509_find_by_subject(STACK_OF(X509) *sk, X509_NAME *name)
 {
     X509 *x509;
     int i;
@@ -261,21 +261,21 @@ X509 *X509_find_by_subject(STACK_OF(X509) *sk, X509_NAME *name)
     return NULL;
 }
 
-EVP_PKEY *X509_get0_pubkey(const X509 *x)
+EVP_PKEY * __cdecl X509_get0_pubkey(const X509 *x)
 {
     if (x == NULL)
         return NULL;
     return X509_PUBKEY_get0(x->cert_info.key);
 }
 
-EVP_PKEY *X509_get_pubkey(X509 *x)
+EVP_PKEY * __cdecl X509_get_pubkey(X509 *x)
 {
     if (x == NULL)
         return NULL;
     return X509_PUBKEY_get(x->cert_info.key);
 }
 
-int X509_check_private_key(const X509 *x, const EVP_PKEY *k)
+int __cdecl X509_check_private_key(const X509 *x, const EVP_PKEY *k)
 {
     const EVP_PKEY *xk;
     int ret;
@@ -343,7 +343,7 @@ static int check_suite_b(EVP_PKEY *pkey, int sign_nid, unsigned long *pflags)
     return X509_V_OK;
 }
 
-int X509_chain_check_suiteb(int *perror_depth, X509 *x, STACK_OF(X509) *chain,
+int __cdecl X509_chain_check_suiteb(int *perror_depth, X509 *x, STACK_OF(X509) *chain,
                             unsigned long flags)
 {
     int rv, i, sign_nid;
@@ -418,7 +418,7 @@ int X509_chain_check_suiteb(int *perror_depth, X509 *x, STACK_OF(X509) *chain,
     return rv;
 }
 
-int X509_CRL_check_suiteb(X509_CRL *crl, EVP_PKEY *pk, unsigned long flags)
+int __cdecl X509_CRL_check_suiteb(X509_CRL *crl, EVP_PKEY *pk, unsigned long flags)
 {
     int sign_nid;
     if (!(flags & X509_V_FLAG_SUITEB_128_LOS))
@@ -428,13 +428,13 @@ int X509_CRL_check_suiteb(X509_CRL *crl, EVP_PKEY *pk, unsigned long flags)
 }
 
 #else
-int X509_chain_check_suiteb(int *perror_depth, X509 *x, STACK_OF(X509) *chain,
+int __cdecl X509_chain_check_suiteb(int *perror_depth, X509 *x, STACK_OF(X509) *chain,
                             unsigned long flags)
 {
     return 0;
 }
 
-int X509_CRL_check_suiteb(X509_CRL *crl, EVP_PKEY *pk, unsigned long flags)
+int __cdecl X509_CRL_check_suiteb(X509_CRL *crl, EVP_PKEY *pk, unsigned long flags)
 {
     return 0;
 }
@@ -445,7 +445,7 @@ int X509_CRL_check_suiteb(X509_CRL *crl, EVP_PKEY *pk, unsigned long flags)
  * count but it has the same effect by duping the STACK and upping the ref of
  * each X509 structure.
  */
-STACK_OF(X509) *X509_chain_up_ref(STACK_OF(X509) *chain)
+STACK_OF(X509) * __cdecl X509_chain_up_ref(STACK_OF(X509) *chain)
 {
     STACK_OF(X509) *ret;
     int i;
diff --git a/crypto/x509/x509_d2.c b/crypto/x509/x509_d2.c
index 099ffda1e1..c2d57b99c5 100644
--- a/crypto/x509/x509_d2.c
+++ b/crypto/x509/x509_d2.c
@@ -12,7 +12,7 @@
 #include <openssl/crypto.h>
 #include <openssl/x509.h>
 
-int X509_STORE_set_default_paths(X509_STORE *ctx)
+int __cdecl X509_STORE_set_default_paths(X509_STORE *ctx)
 {
     X509_LOOKUP *lookup;
 
@@ -32,7 +32,7 @@ int X509_STORE_set_default_paths(X509_STORE *ctx)
     return 1;
 }
 
-int X509_STORE_load_locations(X509_STORE *ctx, const char *file,
+int __cdecl X509_STORE_load_locations(X509_STORE *ctx, const char *file,
                               const char *path)
 {
     X509_LOOKUP *lookup;
diff --git a/crypto/x509/x509_def.c b/crypto/x509/x509_def.c
index bfa8d7d852..a01c804bb4 100644
--- a/crypto/x509/x509_def.c
+++ b/crypto/x509/x509_def.c
@@ -12,32 +12,32 @@
 #include <openssl/crypto.h>
 #include <openssl/x509.h>
 
-const char *X509_get_default_private_dir(void)
+const char * __cdecl X509_get_default_private_dir(void)
 {
     return X509_PRIVATE_DIR;
 }
 
-const char *X509_get_default_cert_area(void)
+const char * __cdecl X509_get_default_cert_area(void)
 {
     return X509_CERT_AREA;
 }
 
-const char *X509_get_default_cert_dir(void)
+const char * __cdecl X509_get_default_cert_dir(void)
 {
     return X509_CERT_DIR;
 }
 
-const char *X509_get_default_cert_file(void)
+const char * __cdecl X509_get_default_cert_file(void)
 {
     return X509_CERT_FILE;
 }
 
-const char *X509_get_default_cert_dir_env(void)
+const char * __cdecl X509_get_default_cert_dir_env(void)
 {
     return X509_CERT_DIR_EVP;
 }
 
-const char *X509_get_default_cert_file_env(void)
+const char * __cdecl X509_get_default_cert_file_env(void)
 {
     return X509_CERT_FILE_EVP;
 }
diff --git a/crypto/x509/x509_err.c b/crypto/x509/x509_err.c
index c110d90809..b26899cc0f 100644
--- a/crypto/x509/x509_err.c
+++ b/crypto/x509/x509_err.c
@@ -171,7 +171,7 @@ static const ERR_STRING_DATA X509_str_reasons[] = {
 
 #endif
 
-int ERR_load_X509_strings(void)
+int __cdecl ERR_load_X509_strings(void)
 {
 #ifndef OPENSSL_NO_ERR
     if (ERR_func_error_string(X509_str_functs[0].error) == NULL) {
diff --git a/crypto/x509/x509_ext.c b/crypto/x509/x509_ext.c
index 2db843760c..60fdbb3a5f 100644
--- a/crypto/x509/x509_ext.c
+++ b/crypto/x509/x509_ext.c
@@ -16,143 +16,143 @@
 #include "internal/x509_int.h"
 #include <openssl/x509v3.h>
 
-int X509_CRL_get_ext_count(const X509_CRL *x)
+int __cdecl X509_CRL_get_ext_count(const X509_CRL *x)
 {
     return X509v3_get_ext_count(x->crl.extensions);
 }
 
-int X509_CRL_get_ext_by_NID(const X509_CRL *x, int nid, int lastpos)
+int __cdecl X509_CRL_get_ext_by_NID(const X509_CRL *x, int nid, int lastpos)
 {
     return X509v3_get_ext_by_NID(x->crl.extensions, nid, lastpos);
 }
 
-int X509_CRL_get_ext_by_OBJ(const X509_CRL *x, const ASN1_OBJECT *obj,
+int __cdecl X509_CRL_get_ext_by_OBJ(const X509_CRL *x, const ASN1_OBJECT *obj,
                             int lastpos)
 {
     return X509v3_get_ext_by_OBJ(x->crl.extensions, obj, lastpos);
 }
 
-int X509_CRL_get_ext_by_critical(const X509_CRL *x, int crit, int lastpos)
+int __cdecl X509_CRL_get_ext_by_critical(const X509_CRL *x, int crit, int lastpos)
 {
     return X509v3_get_ext_by_critical(x->crl.extensions, crit, lastpos);
 }
 
-X509_EXTENSION *X509_CRL_get_ext(const X509_CRL *x, int loc)
+X509_EXTENSION * __cdecl X509_CRL_get_ext(const X509_CRL *x, int loc)
 {
     return X509v3_get_ext(x->crl.extensions, loc);
 }
 
-X509_EXTENSION *X509_CRL_delete_ext(X509_CRL *x, int loc)
+X509_EXTENSION * __cdecl X509_CRL_delete_ext(X509_CRL *x, int loc)
 {
     return X509v3_delete_ext(x->crl.extensions, loc);
 }
 
-void *X509_CRL_get_ext_d2i(const X509_CRL *x, int nid, int *crit, int *idx)
+void * __cdecl X509_CRL_get_ext_d2i(const X509_CRL *x, int nid, int *crit, int *idx)
 {
     return X509V3_get_d2i(x->crl.extensions, nid, crit, idx);
 }
 
-int X509_CRL_add1_ext_i2d(X509_CRL *x, int nid, void *value, int crit,
+int __cdecl X509_CRL_add1_ext_i2d(X509_CRL *x, int nid, void *value, int crit,
                           unsigned long flags)
 {
     return X509V3_add1_i2d(&x->crl.extensions, nid, value, crit, flags);
 }
 
-int X509_CRL_add_ext(X509_CRL *x, X509_EXTENSION *ex, int loc)
+int __cdecl X509_CRL_add_ext(X509_CRL *x, X509_EXTENSION *ex, int loc)
 {
     return (X509v3_add_ext(&(x->crl.extensions), ex, loc) != NULL);
 }
 
-int X509_get_ext_count(const X509 *x)
+int __cdecl X509_get_ext_count(const X509 *x)
 {
     return X509v3_get_ext_count(x->cert_info.extensions);
 }
 
-int X509_get_ext_by_NID(const X509 *x, int nid, int lastpos)
+int __cdecl X509_get_ext_by_NID(const X509 *x, int nid, int lastpos)
 {
     return X509v3_get_ext_by_NID(x->cert_info.extensions, nid, lastpos);
 }
 
-int X509_get_ext_by_OBJ(const X509 *x, const ASN1_OBJECT *obj, int lastpos)
+int __cdecl X509_get_ext_by_OBJ(const X509 *x, const ASN1_OBJECT *obj, int lastpos)
 {
     return X509v3_get_ext_by_OBJ(x->cert_info.extensions, obj, lastpos);
 }
 
-int X509_get_ext_by_critical(const X509 *x, int crit, int lastpos)
+int __cdecl X509_get_ext_by_critical(const X509 *x, int crit, int lastpos)
 {
     return (X509v3_get_ext_by_critical
             (x->cert_info.extensions, crit, lastpos));
 }
 
-X509_EXTENSION *X509_get_ext(const X509 *x, int loc)
+X509_EXTENSION * __cdecl X509_get_ext(const X509 *x, int loc)
 {
     return X509v3_get_ext(x->cert_info.extensions, loc);
 }
 
-X509_EXTENSION *X509_delete_ext(X509 *x, int loc)
+X509_EXTENSION * __cdecl X509_delete_ext(X509 *x, int loc)
 {
     return X509v3_delete_ext(x->cert_info.extensions, loc);
 }
 
-int X509_add_ext(X509 *x, X509_EXTENSION *ex, int loc)
+int __cdecl X509_add_ext(X509 *x, X509_EXTENSION *ex, int loc)
 {
     return (X509v3_add_ext(&(x->cert_info.extensions), ex, loc) != NULL);
 }
 
-void *X509_get_ext_d2i(const X509 *x, int nid, int *crit, int *idx)
+void * __cdecl X509_get_ext_d2i(const X509 *x, int nid, int *crit, int *idx)
 {
     return X509V3_get_d2i(x->cert_info.extensions, nid, crit, idx);
 }
 
-int X509_add1_ext_i2d(X509 *x, int nid, void *value, int crit,
+int __cdecl X509_add1_ext_i2d(X509 *x, int nid, void *value, int crit,
                       unsigned long flags)
 {
     return X509V3_add1_i2d(&x->cert_info.extensions, nid, value, crit,
                            flags);
 }
 
-int X509_REVOKED_get_ext_count(const X509_REVOKED *x)
+int __cdecl X509_REVOKED_get_ext_count(const X509_REVOKED *x)
 {
     return X509v3_get_ext_count(x->extensions);
 }
 
-int X509_REVOKED_get_ext_by_NID(const X509_REVOKED *x, int nid, int lastpos)
+int __cdecl X509_REVOKED_get_ext_by_NID(const X509_REVOKED *x, int nid, int lastpos)
 {
     return X509v3_get_ext_by_NID(x->extensions, nid, lastpos);
 }
 
-int X509_REVOKED_get_ext_by_OBJ(const X509_REVOKED *x, const ASN1_OBJECT *obj,
+int __cdecl X509_REVOKED_get_ext_by_OBJ(const X509_REVOKED *x, const ASN1_OBJECT *obj,
                                 int lastpos)
 {
     return X509v3_get_ext_by_OBJ(x->extensions, obj, lastpos);
 }
 
-int X509_REVOKED_get_ext_by_critical(const X509_REVOKED *x, int crit, int lastpos)
+int __cdecl X509_REVOKED_get_ext_by_critical(const X509_REVOKED *x, int crit, int lastpos)
 {
     return X509v3_get_ext_by_critical(x->extensions, crit, lastpos);
 }
 
-X509_EXTENSION *X509_REVOKED_get_ext(const X509_REVOKED *x, int loc)
+X509_EXTENSION * __cdecl X509_REVOKED_get_ext(const X509_REVOKED *x, int loc)
 {
     return X509v3_get_ext(x->extensions, loc);
 }
 
-X509_EXTENSION *X509_REVOKED_delete_ext(X509_REVOKED *x, int loc)
+X509_EXTENSION * __cdecl X509_REVOKED_delete_ext(X509_REVOKED *x, int loc)
 {
     return X509v3_delete_ext(x->extensions, loc);
 }
 
-int X509_REVOKED_add_ext(X509_REVOKED *x, X509_EXTENSION *ex, int loc)
+int __cdecl X509_REVOKED_add_ext(X509_REVOKED *x, X509_EXTENSION *ex, int loc)
 {
     return (X509v3_add_ext(&(x->extensions), ex, loc) != NULL);
 }
 
-void *X509_REVOKED_get_ext_d2i(const X509_REVOKED *x, int nid, int *crit, int *idx)
+void * __cdecl X509_REVOKED_get_ext_d2i(const X509_REVOKED *x, int nid, int *crit, int *idx)
 {
     return X509V3_get_d2i(x->extensions, nid, crit, idx);
 }
 
-int X509_REVOKED_add1_ext_i2d(X509_REVOKED *x, int nid, void *value, int crit,
+int __cdecl X509_REVOKED_add1_ext_i2d(X509_REVOKED *x, int nid, void *value, int crit,
                               unsigned long flags)
 {
     return X509V3_add1_i2d(&x->extensions, nid, value, crit, flags);
diff --git a/crypto/x509/x509_lcl.h b/crypto/x509/x509_lcl.h
index c517a77456..9c29570caa 100644
--- a/crypto/x509/x509_lcl.h
+++ b/crypto/x509/x509_lcl.h
@@ -70,21 +70,21 @@ struct x509_crl_method_st {
 
 struct x509_lookup_method_st {
     char *name;
-    int (*new_item) (X509_LOOKUP *ctx);
-    void (*free) (X509_LOOKUP *ctx);
-    int (*init) (X509_LOOKUP *ctx);
-    int (*shutdown) (X509_LOOKUP *ctx);
-    int (*ctrl) (X509_LOOKUP *ctx, int cmd, const char *argc, long argl,
+    int (__cdecl *new_item) (X509_LOOKUP *ctx);
+    void (__cdecl *free) (X509_LOOKUP *ctx);
+    int (__cdecl *init) (X509_LOOKUP *ctx);
+    int (__cdecl *shutdown) (X509_LOOKUP *ctx);
+    int (__cdecl *ctrl) (X509_LOOKUP *ctx, int cmd, const char *argc, long argl,
                  char **ret);
-    int (*get_by_subject) (X509_LOOKUP *ctx, X509_LOOKUP_TYPE type,
+    int (__cdecl *get_by_subject) (X509_LOOKUP *ctx, X509_LOOKUP_TYPE type,
                            X509_NAME *name, X509_OBJECT *ret);
-    int (*get_by_issuer_serial) (X509_LOOKUP *ctx, X509_LOOKUP_TYPE type,
+    int (__cdecl *get_by_issuer_serial) (X509_LOOKUP *ctx, X509_LOOKUP_TYPE type,
                                  X509_NAME *name, ASN1_INTEGER *serial,
                                  X509_OBJECT *ret);
-    int (*get_by_fingerprint) (X509_LOOKUP *ctx, X509_LOOKUP_TYPE type,
+    int (__cdecl *get_by_fingerprint) (X509_LOOKUP *ctx, X509_LOOKUP_TYPE type,
                                const unsigned char *bytes, int len,
                                X509_OBJECT *ret);
-    int (*get_by_alias) (X509_LOOKUP *ctx, X509_LOOKUP_TYPE type,
+    int (__cdecl *get_by_alias) (X509_LOOKUP *ctx, X509_LOOKUP_TYPE type,
                          const char *str, int len, X509_OBJECT *ret);
 };
 
@@ -111,26 +111,26 @@ struct x509_store_st {
     X509_VERIFY_PARAM *param;
     /* Callbacks for various operations */
     /* called to verify a certificate */
-    int (*verify) (X509_STORE_CTX *ctx);
+    int (__cdecl *verify) (X509_STORE_CTX *ctx);
     /* error callback */
     int (*verify_cb) (int ok, X509_STORE_CTX *ctx);
     /* get issuers cert from ctx */
-    int (*get_issuer) (X509 **issuer, X509_STORE_CTX *ctx, X509 *x);
+    int (__cdecl *get_issuer) (X509 **issuer, X509_STORE_CTX *ctx, X509 *x);
     /* check issued */
-    int (*check_issued) (X509_STORE_CTX *ctx, X509 *x, X509 *issuer);
+    int (__cdecl *check_issued) (X509_STORE_CTX *ctx, X509 *x, X509 *issuer);
     /* Check revocation status of chain */
-    int (*check_revocation) (X509_STORE_CTX *ctx);
+    int (__cdecl *check_revocation) (X509_STORE_CTX *ctx);
     /* retrieve CRL */
-    int (*get_crl) (X509_STORE_CTX *ctx, X509_CRL **crl, X509 *x);
+    int (__cdecl *get_crl) (X509_STORE_CTX *ctx, X509_CRL **crl, X509 *x);
     /* Check CRL validity */
-    int (*check_crl) (X509_STORE_CTX *ctx, X509_CRL *crl);
+    int (__cdecl *check_crl) (X509_STORE_CTX *ctx, X509_CRL *crl);
     /* Check certificate against CRL */
-    int (*cert_crl) (X509_STORE_CTX *ctx, X509_CRL *crl, X509 *x);
+    int (__cdecl *cert_crl) (X509_STORE_CTX *ctx, X509_CRL *crl, X509 *x);
     /* Check policy status of the chain */
-    int (*check_policy) (X509_STORE_CTX *ctx);
-    STACK_OF(X509) *(*lookup_certs) (X509_STORE_CTX *ctx, X509_NAME *nm);
-    STACK_OF(X509_CRL) *(*lookup_crls) (X509_STORE_CTX *ctx, X509_NAME *nm);
-    int (*cleanup) (X509_STORE_CTX *ctx);
+    int (__cdecl *check_policy) (X509_STORE_CTX *ctx);
+    STACK_OF(X509) *(__cdecl *lookup_certs) (X509_STORE_CTX *ctx, X509_NAME *nm);
+    STACK_OF(X509_CRL) *(__cdecl *lookup_crls) (X509_STORE_CTX *ctx, X509_NAME *nm);
+    int (__cdecl *cleanup) (X509_STORE_CTX *ctx);
     CRYPTO_EX_DATA ex_data;
     CRYPTO_REF_COUNT references;
     CRYPTO_RWLOCK *lock;
diff --git a/crypto/x509/x509_lu.c b/crypto/x509/x509_lu.c
index b7d2e66574..8282d74796 100644
--- a/crypto/x509/x509_lu.c
+++ b/crypto/x509/x509_lu.c
@@ -15,7 +15,7 @@
 #include <openssl/x509v3.h>
 #include "x509_lcl.h"
 
-X509_LOOKUP *X509_LOOKUP_new(X509_LOOKUP_METHOD *method)
+X509_LOOKUP * __cdecl X509_LOOKUP_new(X509_LOOKUP_METHOD *method)
 {
     X509_LOOKUP *ret = OPENSSL_zalloc(sizeof(*ret));
 
@@ -32,7 +32,7 @@ X509_LOOKUP *X509_LOOKUP_new(X509_LOOKUP_METHOD *method)
     return ret;
 }
 
-void X509_LOOKUP_free(X509_LOOKUP *ctx)
+void __cdecl X509_LOOKUP_free(X509_LOOKUP *ctx)
 {
     if (ctx == NULL)
         return;
@@ -41,17 +41,17 @@ void X509_LOOKUP_free(X509_LOOKUP *ctx)
     OPENSSL_free(ctx);
 }
 
-int X509_STORE_lock(X509_STORE *s)
+int __cdecl X509_STORE_lock(X509_STORE *s)
 {
     return CRYPTO_THREAD_write_lock(s->lock);
 }
 
-int X509_STORE_unlock(X509_STORE *s)
+int __cdecl X509_STORE_unlock(X509_STORE *s)
 {
     return CRYPTO_THREAD_unlock(s->lock);
 }
 
-int X509_LOOKUP_init(X509_LOOKUP *ctx)
+int __cdecl X509_LOOKUP_init(X509_LOOKUP *ctx)
 {
     if (ctx->method == NULL)
         return 0;
@@ -61,7 +61,7 @@ int X509_LOOKUP_init(X509_LOOKUP *ctx)
         return 1;
 }
 
-int X509_LOOKUP_shutdown(X509_LOOKUP *ctx)
+int __cdecl X509_LOOKUP_shutdown(X509_LOOKUP *ctx)
 {
     if (ctx->method == NULL)
         return 0;
@@ -71,7 +71,7 @@ int X509_LOOKUP_shutdown(X509_LOOKUP *ctx)
         return 1;
 }
 
-int X509_LOOKUP_ctrl(X509_LOOKUP *ctx, int cmd, const char *argc, long argl,
+int __cdecl X509_LOOKUP_ctrl(X509_LOOKUP *ctx, int cmd, const char *argc, long argl,
                      char **ret)
 {
     if (ctx->method == NULL)
@@ -82,7 +82,7 @@ int X509_LOOKUP_ctrl(X509_LOOKUP *ctx, int cmd, const char *argc, long argl,
         return 1;
 }
 
-int X509_LOOKUP_by_subject(X509_LOOKUP *ctx, X509_LOOKUP_TYPE type,
+int __cdecl X509_LOOKUP_by_subject(X509_LOOKUP *ctx, X509_LOOKUP_TYPE type,
                            X509_NAME *name, X509_OBJECT *ret)
 {
     if ((ctx->method == NULL) || (ctx->method->get_by_subject == NULL))
@@ -92,7 +92,7 @@ int X509_LOOKUP_by_subject(X509_LOOKUP *ctx, X509_LOOKUP_TYPE type,
     return ctx->method->get_by_subject(ctx, type, name, ret);
 }
 
-int X509_LOOKUP_by_issuer_serial(X509_LOOKUP *ctx, X509_LOOKUP_TYPE type,
+int __cdecl X509_LOOKUP_by_issuer_serial(X509_LOOKUP *ctx, X509_LOOKUP_TYPE type,
                                  X509_NAME *name, ASN1_INTEGER *serial,
                                  X509_OBJECT *ret)
 {
@@ -101,7 +101,7 @@ int X509_LOOKUP_by_issuer_serial(X509_LOOKUP *ctx, X509_LOOKUP_TYPE type,
     return ctx->method->get_by_issuer_serial(ctx, type, name, serial, ret);
 }
 
-int X509_LOOKUP_by_fingerprint(X509_LOOKUP *ctx, X509_LOOKUP_TYPE type,
+int __cdecl X509_LOOKUP_by_fingerprint(X509_LOOKUP *ctx, X509_LOOKUP_TYPE type,
                                const unsigned char *bytes, int len,
                                X509_OBJECT *ret)
 {
@@ -110,7 +110,7 @@ int X509_LOOKUP_by_fingerprint(X509_LOOKUP *ctx, X509_LOOKUP_TYPE type,
     return ctx->method->get_by_fingerprint(ctx, type, bytes, len, ret);
 }
 
-int X509_LOOKUP_by_alias(X509_LOOKUP *ctx, X509_LOOKUP_TYPE type,
+int __cdecl X509_LOOKUP_by_alias(X509_LOOKUP *ctx, X509_LOOKUP_TYPE type,
                          const char *str, int len, X509_OBJECT *ret)
 {
     if ((ctx->method == NULL) || (ctx->method->get_by_alias == NULL))
@@ -118,24 +118,24 @@ int X509_LOOKUP_by_alias(X509_LOOKUP *ctx, X509_LOOKUP_TYPE type,
     return ctx->method->get_by_alias(ctx, type, str, len, ret);
 }
 
-int X509_LOOKUP_set_method_data(X509_LOOKUP *ctx, void *data)
+int __cdecl X509_LOOKUP_set_method_data(X509_LOOKUP *ctx, void *data)
 {
     ctx->method_data = data;
     return 1;
 }
 
-void *X509_LOOKUP_get_method_data(const X509_LOOKUP *ctx)
+void * __cdecl X509_LOOKUP_get_method_data(const X509_LOOKUP *ctx)
 {
     return ctx->method_data;
 }
 
-X509_STORE *X509_LOOKUP_get_store(const X509_LOOKUP *ctx)
+X509_STORE * __cdecl X509_LOOKUP_get_store(const X509_LOOKUP *ctx)
 {
     return ctx->store_ctx;
 }
 
 
-static int x509_object_cmp(const X509_OBJECT *const *a,
+static int __cdecl x509_object_cmp(const X509_OBJECT *const *a,
                            const X509_OBJECT *const *b)
 {
     int ret;
@@ -157,7 +157,7 @@ static int x509_object_cmp(const X509_OBJECT *const *a,
     return ret;
 }
 
-X509_STORE *X509_STORE_new(void)
+X509_STORE * __cdecl X509_STORE_new(void)
 {
     X509_STORE *ret = OPENSSL_zalloc(sizeof(*ret));
 
@@ -201,7 +201,7 @@ err:
     return NULL;
 }
 
-void X509_STORE_free(X509_STORE *vfy)
+void __cdecl X509_STORE_free(X509_STORE *vfy)
 {
     int i;
     STACK_OF(X509_LOOKUP) *sk;
@@ -230,7 +230,7 @@ void X509_STORE_free(X509_STORE *vfy)
     OPENSSL_free(vfy);
 }
 
-int X509_STORE_up_ref(X509_STORE *vfy)
+int __cdecl X509_STORE_up_ref(X509_STORE *vfy)
 {
     int i;
 
@@ -242,7 +242,7 @@ int X509_STORE_up_ref(X509_STORE *vfy)
     return ((i > 1) ? 1 : 0);
 }
 
-X509_LOOKUP *X509_STORE_add_lookup(X509_STORE *v, X509_LOOKUP_METHOD *m)
+X509_LOOKUP * __cdecl X509_STORE_add_lookup(X509_STORE *v, X509_LOOKUP_METHOD *m)
 {
     int i;
     STACK_OF(X509_LOOKUP) *sk;
@@ -271,7 +271,7 @@ X509_LOOKUP *X509_STORE_add_lookup(X509_STORE *v, X509_LOOKUP_METHOD *m)
     return NULL;
 }
 
-X509_OBJECT *X509_STORE_CTX_get_obj_by_subject(X509_STORE_CTX *vs,
+X509_OBJECT * __cdecl X509_STORE_CTX_get_obj_by_subject(X509_STORE_CTX *vs,
                                                X509_LOOKUP_TYPE type,
                                                X509_NAME *name)
 {
@@ -286,7 +286,7 @@ X509_OBJECT *X509_STORE_CTX_get_obj_by_subject(X509_STORE_CTX *vs,
     return ret;
 }
 
-int X509_STORE_CTX_get_by_subject(X509_STORE_CTX *vs, X509_LOOKUP_TYPE type,
+int __cdecl X509_STORE_CTX_get_by_subject(X509_STORE_CTX *vs, X509_LOOKUP_TYPE type,
                                   X509_NAME *name, X509_OBJECT *ret)
 {
     X509_STORE *store = vs->ctx;
@@ -365,7 +365,7 @@ static int x509_store_add(X509_STORE *store, void *x, int crl) {
     return ret;
 }
 
-int X509_STORE_add_cert(X509_STORE *ctx, X509 *x)
+int __cdecl X509_STORE_add_cert(X509_STORE *ctx, X509 *x)
 {
     if (!x509_store_add(ctx, x, 0)) {
         X509err(X509_F_X509_STORE_ADD_CERT, ERR_R_MALLOC_FAILURE);
@@ -374,7 +374,7 @@ int X509_STORE_add_cert(X509_STORE *ctx, X509 *x)
     return 1;
 }
 
-int X509_STORE_add_crl(X509_STORE *ctx, X509_CRL *x)
+int __cdecl X509_STORE_add_crl(X509_STORE *ctx, X509_CRL *x)
 {
     if (!x509_store_add(ctx, x, 1)) {
         X509err(X509_F_X509_STORE_ADD_CRL, ERR_R_MALLOC_FAILURE);
@@ -383,7 +383,7 @@ int X509_STORE_add_crl(X509_STORE *ctx, X509_CRL *x)
     return 1;
 }
 
-int X509_OBJECT_up_ref_count(X509_OBJECT *a)
+int __cdecl X509_OBJECT_up_ref_count(X509_OBJECT *a)
 {
     switch (a->type) {
     case X509_LU_NONE:
@@ -396,26 +396,26 @@ int X509_OBJECT_up_ref_count(X509_OBJECT *a)
     return 1;
 }
 
-X509 *X509_OBJECT_get0_X509(const X509_OBJECT *a)
+X509 * __cdecl X509_OBJECT_get0_X509(const X509_OBJECT *a)
 {
     if (a == NULL || a->type != X509_LU_X509)
         return NULL;
     return a->data.x509;
 }
 
-X509_CRL *X509_OBJECT_get0_X509_CRL(X509_OBJECT *a)
+X509_CRL * __cdecl X509_OBJECT_get0_X509_CRL(X509_OBJECT *a)
 {
     if (a == NULL || a->type != X509_LU_CRL)
         return NULL;
     return a->data.crl;
 }
 
-X509_LOOKUP_TYPE X509_OBJECT_get_type(const X509_OBJECT *a)
+X509_LOOKUP_TYPE __cdecl X509_OBJECT_get_type(const X509_OBJECT *a)
 {
     return a->type;
 }
 
-X509_OBJECT *X509_OBJECT_new(void)
+X509_OBJECT * __cdecl X509_OBJECT_new(void)
 {
     X509_OBJECT *ret = OPENSSL_zalloc(sizeof(*ret));
 
@@ -443,7 +443,7 @@ static void x509_object_free_internal(X509_OBJECT *a)
     }
 }
 
-int X509_OBJECT_set1_X509(X509_OBJECT *a, X509 *obj)
+int __cdecl X509_OBJECT_set1_X509(X509_OBJECT *a, X509 *obj)
 {
     if (a == NULL || !X509_up_ref(obj))
         return 0;
@@ -454,7 +454,7 @@ int X509_OBJECT_set1_X509(X509_OBJECT *a, X509 *obj)
     return 1;
 }
 
-int X509_OBJECT_set1_X509_CRL(X509_OBJECT *a, X509_CRL *obj)
+int __cdecl X509_OBJECT_set1_X509_CRL(X509_OBJECT *a, X509_CRL *obj)
 {
     if (a == NULL || !X509_CRL_up_ref(obj))
         return 0;
@@ -465,7 +465,7 @@ int X509_OBJECT_set1_X509_CRL(X509_OBJECT *a, X509_CRL *obj)
     return 1;
 }
 
-void X509_OBJECT_free(X509_OBJECT *a)
+void __cdecl X509_OBJECT_free(X509_OBJECT *a)
 {
     x509_object_free_internal(a);
     OPENSSL_free(a);
@@ -510,13 +510,13 @@ static int x509_object_idx_cnt(STACK_OF(X509_OBJECT) *h, X509_LOOKUP_TYPE type,
     return idx;
 }
 
-int X509_OBJECT_idx_by_subject(STACK_OF(X509_OBJECT) *h, X509_LOOKUP_TYPE type,
+int __cdecl X509_OBJECT_idx_by_subject(STACK_OF(X509_OBJECT) *h, X509_LOOKUP_TYPE type,
                                X509_NAME *name)
 {
     return x509_object_idx_cnt(h, type, name, NULL);
 }
 
-X509_OBJECT *X509_OBJECT_retrieve_by_subject(STACK_OF(X509_OBJECT) *h,
+X509_OBJECT * __cdecl X509_OBJECT_retrieve_by_subject(STACK_OF(X509_OBJECT) *h,
                                              X509_LOOKUP_TYPE type,
                                              X509_NAME *name)
 {
@@ -527,12 +527,12 @@ X509_OBJECT *X509_OBJECT_retrieve_by_subject(STACK_OF(X509_OBJECT) *h,
     return sk_X509_OBJECT_value(h, idx);
 }
 
-STACK_OF(X509_OBJECT) *X509_STORE_get0_objects(X509_STORE *v)
+STACK_OF(X509_OBJECT) * __cdecl X509_STORE_get0_objects(X509_STORE *v)
 {
     return v->objs;
 }
 
-STACK_OF(X509) *X509_STORE_CTX_get1_certs(X509_STORE_CTX *ctx, X509_NAME *nm)
+STACK_OF(X509) * __cdecl X509_STORE_CTX_get1_certs(X509_STORE_CTX *ctx, X509_NAME *nm)
 {
     int i, idx, cnt;
     STACK_OF(X509) *sk = NULL;
@@ -589,7 +589,7 @@ STACK_OF(X509) *X509_STORE_CTX_get1_certs(X509_STORE_CTX *ctx, X509_NAME *nm)
     return sk;
 }
 
-STACK_OF(X509_CRL) *X509_STORE_CTX_get1_crls(X509_STORE_CTX *ctx, X509_NAME *nm)
+STACK_OF(X509_CRL) * __cdecl X509_STORE_CTX_get1_crls(X509_STORE_CTX *ctx, X509_NAME *nm)
 {
     int i, idx, cnt;
     STACK_OF(X509_CRL) *sk = sk_X509_CRL_new_null();
@@ -634,7 +634,7 @@ STACK_OF(X509_CRL) *X509_STORE_CTX_get1_crls(X509_STORE_CTX *ctx, X509_NAME *nm)
     return sk;
 }
 
-X509_OBJECT *X509_OBJECT_retrieve_match(STACK_OF(X509_OBJECT) *h,
+X509_OBJECT * __cdecl X509_OBJECT_retrieve_match(STACK_OF(X509_OBJECT) *h,
                                         X509_OBJECT *x)
 {
     int idx, i, num;
@@ -674,7 +674,7 @@ X509_OBJECT *X509_OBJECT_retrieve_match(STACK_OF(X509_OBJECT) *h,
  *  0 certificate not found.
  * -1 some other error.
  */
-int X509_STORE_CTX_get1_issuer(X509 **issuer, X509_STORE_CTX *ctx, X509 *x)
+int __cdecl X509_STORE_CTX_get1_issuer(X509 **issuer, X509_STORE_CTX *ctx, X509 *x)
 {
     X509_NAME *xn;
     X509_OBJECT *obj = X509_OBJECT_new(), *pobj = NULL;
@@ -744,38 +744,38 @@ int X509_STORE_CTX_get1_issuer(X509 **issuer, X509_STORE_CTX *ctx, X509 *x)
     return ret;
 }
 
-int X509_STORE_set_flags(X509_STORE *ctx, unsigned long flags)
+int __cdecl X509_STORE_set_flags(X509_STORE *ctx, unsigned long flags)
 {
     return X509_VERIFY_PARAM_set_flags(ctx->param, flags);
 }
 
-int X509_STORE_set_depth(X509_STORE *ctx, int depth)
+int __cdecl X509_STORE_set_depth(X509_STORE *ctx, int depth)
 {
     X509_VERIFY_PARAM_set_depth(ctx->param, depth);
     return 1;
 }
 
-int X509_STORE_set_purpose(X509_STORE *ctx, int purpose)
+int __cdecl X509_STORE_set_purpose(X509_STORE *ctx, int purpose)
 {
     return X509_VERIFY_PARAM_set_purpose(ctx->param, purpose);
 }
 
-int X509_STORE_set_trust(X509_STORE *ctx, int trust)
+int __cdecl X509_STORE_set_trust(X509_STORE *ctx, int trust)
 {
     return X509_VERIFY_PARAM_set_trust(ctx->param, trust);
 }
 
-int X509_STORE_set1_param(X509_STORE *ctx, X509_VERIFY_PARAM *param)
+int __cdecl X509_STORE_set1_param(X509_STORE *ctx, X509_VERIFY_PARAM *param)
 {
     return X509_VERIFY_PARAM_set1(ctx->param, param);
 }
 
-X509_VERIFY_PARAM *X509_STORE_get0_param(X509_STORE *ctx)
+X509_VERIFY_PARAM * __cdecl X509_STORE_get0_param(X509_STORE *ctx)
 {
     return ctx->param;
 }
 
-void X509_STORE_set_verify(X509_STORE *ctx, X509_STORE_CTX_verify_fn verify)
+void __cdecl X509_STORE_set_verify(X509_STORE *ctx, X509_STORE_CTX_verify_fn verify)
 {
     ctx->verify = verify;
 }
@@ -785,18 +785,18 @@ X509_STORE_CTX_verify_fn X509_STORE_get_verify(X509_STORE *ctx)
     return ctx->verify;
 }
 
-void X509_STORE_set_verify_cb(X509_STORE *ctx,
+void __cdecl X509_STORE_set_verify_cb(X509_STORE *ctx,
                               X509_STORE_CTX_verify_cb verify_cb)
 {
     ctx->verify_cb = verify_cb;
 }
 
-X509_STORE_CTX_verify_cb X509_STORE_get_verify_cb(X509_STORE *ctx)
+X509_STORE_CTX_verify_cb __cdecl X509_STORE_get_verify_cb(X509_STORE *ctx)
 {
     return ctx->verify_cb;
 }
 
-void X509_STORE_set_get_issuer(X509_STORE *ctx,
+void __cdecl X509_STORE_set_get_issuer(X509_STORE *ctx,
                                X509_STORE_CTX_get_issuer_fn get_issuer)
 {
     ctx->get_issuer = get_issuer;
@@ -807,7 +807,7 @@ X509_STORE_CTX_get_issuer_fn X509_STORE_get_get_issuer(X509_STORE *ctx)
     return ctx->get_issuer;
 }
 
-void X509_STORE_set_check_issued(X509_STORE *ctx,
+void __cdecl X509_STORE_set_check_issued(X509_STORE *ctx,
                                  X509_STORE_CTX_check_issued_fn check_issued)
 {
     ctx->check_issued = check_issued;
@@ -818,7 +818,7 @@ X509_STORE_CTX_check_issued_fn X509_STORE_get_check_issued(X509_STORE *ctx)
     return ctx->check_issued;
 }
 
-void X509_STORE_set_check_revocation(X509_STORE *ctx,
+void __cdecl X509_STORE_set_check_revocation(X509_STORE *ctx,
                                      X509_STORE_CTX_check_revocation_fn check_revocation)
 {
     ctx->check_revocation = check_revocation;
@@ -829,7 +829,7 @@ X509_STORE_CTX_check_revocation_fn X509_STORE_get_check_revocation(X509_STORE *c
     return ctx->check_revocation;
 }
 
-void X509_STORE_set_get_crl(X509_STORE *ctx,
+void __cdecl X509_STORE_set_get_crl(X509_STORE *ctx,
                             X509_STORE_CTX_get_crl_fn get_crl)
 {
     ctx->get_crl = get_crl;
@@ -840,7 +840,7 @@ X509_STORE_CTX_get_crl_fn X509_STORE_get_get_crl(X509_STORE *ctx)
     return ctx->get_crl;
 }
 
-void X509_STORE_set_check_crl(X509_STORE *ctx,
+void __cdecl X509_STORE_set_check_crl(X509_STORE *ctx,
                               X509_STORE_CTX_check_crl_fn check_crl)
 {
     ctx->check_crl = check_crl;
@@ -851,7 +851,7 @@ X509_STORE_CTX_check_crl_fn X509_STORE_get_check_crl(X509_STORE *ctx)
     return ctx->check_crl;
 }
 
-void X509_STORE_set_cert_crl(X509_STORE *ctx,
+void __cdecl X509_STORE_set_cert_crl(X509_STORE *ctx,
                              X509_STORE_CTX_cert_crl_fn cert_crl)
 {
     ctx->cert_crl = cert_crl;
@@ -862,7 +862,7 @@ X509_STORE_CTX_cert_crl_fn X509_STORE_get_cert_crl(X509_STORE *ctx)
     return ctx->cert_crl;
 }
 
-void X509_STORE_set_check_policy(X509_STORE *ctx,
+void __cdecl X509_STORE_set_check_policy(X509_STORE *ctx,
                                  X509_STORE_CTX_check_policy_fn check_policy)
 {
     ctx->check_policy = check_policy;
@@ -873,7 +873,7 @@ X509_STORE_CTX_check_policy_fn X509_STORE_get_check_policy(X509_STORE *ctx)
     return ctx->check_policy;
 }
 
-void X509_STORE_set_lookup_certs(X509_STORE *ctx,
+void __cdecl X509_STORE_set_lookup_certs(X509_STORE *ctx,
                                  X509_STORE_CTX_lookup_certs_fn lookup_certs)
 {
     ctx->lookup_certs = lookup_certs;
@@ -884,7 +884,7 @@ X509_STORE_CTX_lookup_certs_fn X509_STORE_get_lookup_certs(X509_STORE *ctx)
     return ctx->lookup_certs;
 }
 
-void X509_STORE_set_lookup_crls(X509_STORE *ctx,
+void __cdecl X509_STORE_set_lookup_crls(X509_STORE *ctx,
                                 X509_STORE_CTX_lookup_crls_fn lookup_crls)
 {
     ctx->lookup_crls = lookup_crls;
@@ -895,7 +895,7 @@ X509_STORE_CTX_lookup_crls_fn X509_STORE_get_lookup_crls(X509_STORE *ctx)
     return ctx->lookup_crls;
 }
 
-void X509_STORE_set_cleanup(X509_STORE *ctx,
+void __cdecl X509_STORE_set_cleanup(X509_STORE *ctx,
                             X509_STORE_CTX_cleanup_fn ctx_cleanup)
 {
     ctx->cleanup = ctx_cleanup;
@@ -906,17 +906,17 @@ X509_STORE_CTX_cleanup_fn X509_STORE_get_cleanup(X509_STORE *ctx)
     return ctx->cleanup;
 }
 
-int X509_STORE_set_ex_data(X509_STORE *ctx, int idx, void *data)
+int __cdecl X509_STORE_set_ex_data(X509_STORE *ctx, int idx, void *data)
 {
     return CRYPTO_set_ex_data(&ctx->ex_data, idx, data);
 }
 
-void *X509_STORE_get_ex_data(X509_STORE *ctx, int idx)
+void * __cdecl X509_STORE_get_ex_data(X509_STORE *ctx, int idx)
 {
     return CRYPTO_get_ex_data(&ctx->ex_data, idx);
 }
 
-X509_STORE *X509_STORE_CTX_get0_store(X509_STORE_CTX *ctx)
+X509_STORE * __cdecl X509_STORE_CTX_get0_store(X509_STORE_CTX *ctx)
 {
     return ctx->ctx;
 }
diff --git a/crypto/x509/x509_meth.c b/crypto/x509/x509_meth.c
index 9dc587a092..f8e17d31ca 100644
--- a/crypto/x509/x509_meth.c
+++ b/crypto/x509/x509_meth.c
@@ -17,7 +17,7 @@
 #include <openssl/ossl_typ.h>
 #include "x509_lcl.h"
 
-X509_LOOKUP_METHOD *X509_LOOKUP_meth_new(const char *name)
+X509_LOOKUP_METHOD * __cdecl X509_LOOKUP_meth_new(const char *name)
 {
     X509_LOOKUP_METHOD *method = OPENSSL_zalloc(sizeof(X509_LOOKUP_METHOD));
 
@@ -36,68 +36,68 @@ err:
     return NULL;
 }
 
-void X509_LOOKUP_meth_free(X509_LOOKUP_METHOD *method)
+void  __cdecl X509_LOOKUP_meth_free(X509_LOOKUP_METHOD *method)
 {
     if (method != NULL)
         OPENSSL_free(method->name);
     OPENSSL_free(method);
 }
 
-int X509_LOOKUP_meth_set_new_item(X509_LOOKUP_METHOD *method,
-                                  int (*new_item) (X509_LOOKUP *ctx))
+int __cdecl X509_LOOKUP_meth_set_new_item(X509_LOOKUP_METHOD *method,
+                                  int (__cdecl *new_item) (X509_LOOKUP *ctx))
 {
     method->new_item = new_item;
     return 1;
 }
 
-int (*X509_LOOKUP_meth_get_new_item(const X509_LOOKUP_METHOD* method))
+int (__cdecl *X509_LOOKUP_meth_get_new_item(const X509_LOOKUP_METHOD* method))
     (X509_LOOKUP *ctx)
 {
     return method->new_item;
 }
 
-int X509_LOOKUP_meth_set_free(
+int __cdecl X509_LOOKUP_meth_set_free(
     X509_LOOKUP_METHOD *method,
-    void (*free_fn) (X509_LOOKUP *ctx))
+    void (__cdecl *free_fn) (X509_LOOKUP *ctx))
 {
     method->free = free_fn;
     return 1;
 }
 
-void (*X509_LOOKUP_meth_get_free(const X509_LOOKUP_METHOD* method))
+void (__cdecl *X509_LOOKUP_meth_get_free(const X509_LOOKUP_METHOD* method))
     (X509_LOOKUP *ctx)
 {
     return method->free;
 }
 
-int X509_LOOKUP_meth_set_init(X509_LOOKUP_METHOD *method,
-                              int (*init) (X509_LOOKUP *ctx))
+int __cdecl X509_LOOKUP_meth_set_init(X509_LOOKUP_METHOD *method,
+                              int (__cdecl *init) (X509_LOOKUP *ctx))
 {
     method->init = init;
     return 1;
 }
 
-int (*X509_LOOKUP_meth_get_init(const X509_LOOKUP_METHOD* method))
+int (__cdecl *X509_LOOKUP_meth_get_init(const X509_LOOKUP_METHOD* method))
     (X509_LOOKUP *ctx)
 {
     return method->init;
 }
 
-int X509_LOOKUP_meth_set_shutdown(
+int __cdecl X509_LOOKUP_meth_set_shutdown(
     X509_LOOKUP_METHOD *method,
-    int (*shutdown) (X509_LOOKUP *ctx))
+    int (__cdecl *shutdown) (X509_LOOKUP *ctx))
 {
     method->shutdown = shutdown;
     return 1;
 }
 
-int (*X509_LOOKUP_meth_get_shutdown(const X509_LOOKUP_METHOD* method))
+int (__cdecl *X509_LOOKUP_meth_get_shutdown(const X509_LOOKUP_METHOD* method))
     (X509_LOOKUP *ctx)
 {
     return method->shutdown;
 }
 
-int X509_LOOKUP_meth_set_ctrl(
+int __cdecl X509_LOOKUP_meth_set_ctrl(
     X509_LOOKUP_METHOD *method,
     X509_LOOKUP_ctrl_fn ctrl)
 {
@@ -110,7 +110,7 @@ X509_LOOKUP_ctrl_fn X509_LOOKUP_meth_get_ctrl(const X509_LOOKUP_METHOD *method)
     return method->ctrl;
 }
 
-int X509_LOOKUP_meth_set_get_by_subject(X509_LOOKUP_METHOD *method,
+int __cdecl X509_LOOKUP_meth_set_get_by_subject(X509_LOOKUP_METHOD *method,
     X509_LOOKUP_get_by_subject_fn get_by_subject)
 {
     method->get_by_subject = get_by_subject;
@@ -124,7 +124,7 @@ X509_LOOKUP_get_by_subject_fn X509_LOOKUP_meth_get_get_by_subject(
 }
 
 
-int X509_LOOKUP_meth_set_get_by_issuer_serial(X509_LOOKUP_METHOD *method,
+int __cdecl X509_LOOKUP_meth_set_get_by_issuer_serial(X509_LOOKUP_METHOD *method,
     X509_LOOKUP_get_by_issuer_serial_fn get_by_issuer_serial)
 {
     method->get_by_issuer_serial = get_by_issuer_serial;
@@ -138,7 +138,7 @@ X509_LOOKUP_get_by_issuer_serial_fn
 }
 
 
-int X509_LOOKUP_meth_set_get_by_fingerprint(X509_LOOKUP_METHOD *method,
+int __cdecl X509_LOOKUP_meth_set_get_by_fingerprint(X509_LOOKUP_METHOD *method,
     X509_LOOKUP_get_by_fingerprint_fn get_by_fingerprint)
 {
     method->get_by_fingerprint = get_by_fingerprint;
@@ -151,7 +151,7 @@ X509_LOOKUP_get_by_fingerprint_fn X509_LOOKUP_meth_get_get_by_fingerprint(
     return method->get_by_fingerprint;
 }
 
-int X509_LOOKUP_meth_set_get_by_alias(X509_LOOKUP_METHOD *method,
+int __cdecl X509_LOOKUP_meth_set_get_by_alias(X509_LOOKUP_METHOD *method,
                                       X509_LOOKUP_get_by_alias_fn get_by_alias)
 {
     method->get_by_alias = get_by_alias;
diff --git a/crypto/x509/x509_obj.c b/crypto/x509/x509_obj.c
index 85c39415c1..c4dbee92b6 100644
--- a/crypto/x509/x509_obj.c
+++ b/crypto/x509/x509_obj.c
@@ -21,7 +21,7 @@
 
 #define NAME_ONELINE_MAX    (1024 * 1024)
 
-char *X509_NAME_oneline(const X509_NAME *a, char *buf, int len)
+char * __cdecl X509_NAME_oneline(const X509_NAME *a, char *buf, int len)
 {
     const X509_NAME_ENTRY *ne;
     int i;
diff --git a/crypto/x509/x509_r2x.c b/crypto/x509/x509_r2x.c
index 3d72787d31..14169f9aff 100644
--- a/crypto/x509/x509_r2x.c
+++ b/crypto/x509/x509_r2x.c
@@ -17,7 +17,7 @@
 #include <openssl/objects.h>
 #include <openssl/buffer.h>
 
-X509 *X509_REQ_to_X509(X509_REQ *r, int days, EVP_PKEY *pkey)
+X509 * __cdecl X509_REQ_to_X509(X509_REQ *r, int days, EVP_PKEY *pkey)
 {
     X509 *ret = NULL;
     X509_CINF *xi = NULL;
diff --git a/crypto/x509/x509_req.c b/crypto/x509/x509_req.c
index 0bdbb81db8..b279429144 100644
--- a/crypto/x509/x509_req.c
+++ b/crypto/x509/x509_req.c
@@ -19,7 +19,7 @@
 #include <openssl/buffer.h>
 #include <openssl/pem.h>
 
-X509_REQ *X509_to_X509_REQ(X509 *x, EVP_PKEY *pkey, const EVP_MD *md)
+X509_REQ * __cdecl X509_to_X509_REQ(X509 *x, EVP_PKEY *pkey, const EVP_MD *md)
 {
     X509_REQ *ret;
     X509_REQ_INFO *ri;
@@ -60,26 +60,26 @@ X509_REQ *X509_to_X509_REQ(X509 *x, EVP_PKEY *pkey, const EVP_MD *md)
     return NULL;
 }
 
-EVP_PKEY *X509_REQ_get_pubkey(X509_REQ *req)
+EVP_PKEY * __cdecl X509_REQ_get_pubkey(X509_REQ *req)
 {
     if (req == NULL)
         return NULL;
     return X509_PUBKEY_get(req->req_info.pubkey);
 }
 
-EVP_PKEY *X509_REQ_get0_pubkey(X509_REQ *req)
+EVP_PKEY * __cdecl X509_REQ_get0_pubkey(X509_REQ *req)
 {
     if (req == NULL)
         return NULL;
     return X509_PUBKEY_get0(req->req_info.pubkey);
 }
 
-X509_PUBKEY *X509_REQ_get_X509_PUBKEY(X509_REQ *req)
+X509_PUBKEY * __cdecl X509_REQ_get_X509_PUBKEY(X509_REQ *req)
 {
     return req->req_info.pubkey;
 }
 
-int X509_REQ_check_private_key(X509_REQ *x, EVP_PKEY *k)
+int __cdecl X509_REQ_check_private_key(X509_REQ *x, EVP_PKEY *k)
 {
     EVP_PKEY *xk = NULL;
     int ok = 0;
@@ -128,7 +128,7 @@ static int ext_nid_list[] = { NID_ext_req, NID_ms_ext_req, NID_undef };
 
 static int *ext_nids = ext_nid_list;
 
-int X509_REQ_extension_nid(int req_nid)
+int __cdecl X509_REQ_extension_nid(int req_nid)
 {
     int i, nid;
     for (i = 0;; i++) {
@@ -140,17 +140,17 @@ int X509_REQ_extension_nid(int req_nid)
     }
 }
 
-int *X509_REQ_get_extension_nids(void)
+int * __cdecl X509_REQ_get_extension_nids(void)
 {
     return ext_nids;
 }
 
-void X509_REQ_set_extension_nids(int *nids)
+void __cdecl X509_REQ_set_extension_nids(int *nids)
 {
     ext_nids = nids;
 }
 
-STACK_OF(X509_EXTENSION) *X509_REQ_get_extensions(X509_REQ *req)
+STACK_OF(X509_EXTENSION) * __cdecl X509_REQ_get_extensions(X509_REQ *req)
 {
     X509_ATTRIBUTE *attr;
     ASN1_TYPE *ext = NULL;
@@ -180,7 +180,7 @@ STACK_OF(X509_EXTENSION) *X509_REQ_get_extensions(X509_REQ *req)
  * in case we want to create a non standard one.
  */
 
-int X509_REQ_add_extensions_nid(X509_REQ *req, STACK_OF(X509_EXTENSION) *exts,
+int __cdecl X509_REQ_add_extensions_nid(X509_REQ *req, STACK_OF(X509_EXTENSION) *exts,
                                 int nid)
 {
     int extlen;
@@ -197,47 +197,47 @@ int X509_REQ_add_extensions_nid(X509_REQ *req, STACK_OF(X509_EXTENSION) *exts,
 }
 
 /* This is the normal usage: use the "official" OID */
-int X509_REQ_add_extensions(X509_REQ *req, STACK_OF(X509_EXTENSION) *exts)
+int __cdecl X509_REQ_add_extensions(X509_REQ *req, STACK_OF(X509_EXTENSION) *exts)
 {
     return X509_REQ_add_extensions_nid(req, exts, NID_ext_req);
 }
 
 /* Request attribute functions */
 
-int X509_REQ_get_attr_count(const X509_REQ *req)
+int __cdecl X509_REQ_get_attr_count(const X509_REQ *req)
 {
     return X509at_get_attr_count(req->req_info.attributes);
 }
 
-int X509_REQ_get_attr_by_NID(const X509_REQ *req, int nid, int lastpos)
+int __cdecl X509_REQ_get_attr_by_NID(const X509_REQ *req, int nid, int lastpos)
 {
     return X509at_get_attr_by_NID(req->req_info.attributes, nid, lastpos);
 }
 
-int X509_REQ_get_attr_by_OBJ(const X509_REQ *req, const ASN1_OBJECT *obj,
+int __cdecl X509_REQ_get_attr_by_OBJ(const X509_REQ *req, const ASN1_OBJECT *obj,
                              int lastpos)
 {
     return X509at_get_attr_by_OBJ(req->req_info.attributes, obj, lastpos);
 }
 
-X509_ATTRIBUTE *X509_REQ_get_attr(const X509_REQ *req, int loc)
+X509_ATTRIBUTE * __cdecl X509_REQ_get_attr(const X509_REQ *req, int loc)
 {
     return X509at_get_attr(req->req_info.attributes, loc);
 }
 
-X509_ATTRIBUTE *X509_REQ_delete_attr(X509_REQ *req, int loc)
+X509_ATTRIBUTE * __cdecl X509_REQ_delete_attr(X509_REQ *req, int loc)
 {
     return X509at_delete_attr(req->req_info.attributes, loc);
 }
 
-int X509_REQ_add1_attr(X509_REQ *req, X509_ATTRIBUTE *attr)
+int __cdecl X509_REQ_add1_attr(X509_REQ *req, X509_ATTRIBUTE *attr)
 {
     if (X509at_add1_attr(&req->req_info.attributes, attr))
         return 1;
     return 0;
 }
 
-int X509_REQ_add1_attr_by_OBJ(X509_REQ *req,
+int __cdecl X509_REQ_add1_attr_by_OBJ(X509_REQ *req,
                               const ASN1_OBJECT *obj, int type,
                               const unsigned char *bytes, int len)
 {
@@ -247,7 +247,7 @@ int X509_REQ_add1_attr_by_OBJ(X509_REQ *req,
     return 0;
 }
 
-int X509_REQ_add1_attr_by_NID(X509_REQ *req,
+int __cdecl X509_REQ_add1_attr_by_NID(X509_REQ *req,
                               int nid, int type,
                               const unsigned char *bytes, int len)
 {
@@ -257,7 +257,7 @@ int X509_REQ_add1_attr_by_NID(X509_REQ *req,
     return 0;
 }
 
-int X509_REQ_add1_attr_by_txt(X509_REQ *req,
+int __cdecl X509_REQ_add1_attr_by_txt(X509_REQ *req,
                               const char *attrname, int type,
                               const unsigned char *bytes, int len)
 {
@@ -267,17 +267,17 @@ int X509_REQ_add1_attr_by_txt(X509_REQ *req,
     return 0;
 }
 
-long X509_REQ_get_version(const X509_REQ *req)
+long __cdecl X509_REQ_get_version(const X509_REQ *req)
 {
     return ASN1_INTEGER_get(req->req_info.version);
 }
 
-X509_NAME *X509_REQ_get_subject_name(const X509_REQ *req)
+X509_NAME * __cdecl X509_REQ_get_subject_name(const X509_REQ *req)
 {
     return req->req_info.subject;
 }
 
-void X509_REQ_get0_signature(const X509_REQ *req, const ASN1_BIT_STRING **psig,
+void __cdecl X509_REQ_get0_signature(const X509_REQ *req, const ASN1_BIT_STRING **psig,
                              const X509_ALGOR **palg)
 {
     if (psig != NULL)
@@ -286,12 +286,12 @@ void X509_REQ_get0_signature(const X509_REQ *req, const ASN1_BIT_STRING **psig,
         *palg = &req->sig_alg;
 }
 
-int X509_REQ_get_signature_nid(const X509_REQ *req)
+int __cdecl X509_REQ_get_signature_nid(const X509_REQ *req)
 {
     return OBJ_obj2nid(req->sig_alg.algorithm);
 }
 
-int i2d_re_X509_REQ_tbs(X509_REQ *req, unsigned char **pp)
+int __cdecl i2d_re_X509_REQ_tbs(X509_REQ *req, unsigned char **pp)
 {
     req->req_info.enc.modified = 1;
     return i2d_X509_REQ_INFO(&req->req_info, pp);
diff --git a/crypto/x509/x509_set.c b/crypto/x509/x509_set.c
index 3ab6bf3511..9fd06fd812 100644
--- a/crypto/x509/x509_set.c
+++ b/crypto/x509/x509_set.c
@@ -19,7 +19,7 @@
 #include "internal/x509_int.h"
 #include "x509_lcl.h"
 
-int X509_set_version(X509 *x, long version)
+int __cdecl X509_set_version(X509 *x, long version)
 {
     if (x == NULL)
         return 0;
@@ -35,7 +35,7 @@ int X509_set_version(X509 *x, long version)
     return ASN1_INTEGER_set(x->cert_info.version, version);
 }
 
-int X509_set_serialNumber(X509 *x, ASN1_INTEGER *serial)
+int __cdecl X509_set_serialNumber(X509 *x, ASN1_INTEGER *serial)
 {
     ASN1_INTEGER *in;
 
@@ -47,14 +47,14 @@ int X509_set_serialNumber(X509 *x, ASN1_INTEGER *serial)
     return 1;
 }
 
-int X509_set_issuer_name(X509 *x, X509_NAME *name)
+int __cdecl X509_set_issuer_name(X509 *x, X509_NAME *name)
 {
     if (x == NULL)
         return 0;
     return X509_NAME_set(&x->cert_info.issuer, name);
 }
 
-int X509_set_subject_name(X509 *x, X509_NAME *name)
+int __cdecl X509_set_subject_name(X509 *x, X509_NAME *name)
 {
     if (x == NULL)
         return 0;
@@ -75,28 +75,28 @@ int x509_set1_time(ASN1_TIME **ptm, const ASN1_TIME *tm)
     return (in != NULL);
 }
 
-int X509_set1_notBefore(X509 *x, const ASN1_TIME *tm)
+int __cdecl X509_set1_notBefore(X509 *x, const ASN1_TIME *tm)
 {
     if (x == NULL)
         return 0;
     return x509_set1_time(&x->cert_info.validity.notBefore, tm);
 }
 
-int X509_set1_notAfter(X509 *x, const ASN1_TIME *tm)
+int __cdecl X509_set1_notAfter(X509 *x, const ASN1_TIME *tm)
 {
     if (x == NULL)
         return 0;
     return x509_set1_time(&x->cert_info.validity.notAfter, tm);
 }
 
-int X509_set_pubkey(X509 *x, EVP_PKEY *pkey)
+int __cdecl X509_set_pubkey(X509 *x, EVP_PKEY *pkey)
 {
     if (x == NULL)
         return 0;
     return X509_PUBKEY_set(&(x->cert_info.key), pkey);
 }
 
-int X509_up_ref(X509 *x)
+int __cdecl X509_up_ref(X509 *x)
 {
     int i;
 
@@ -108,47 +108,47 @@ int X509_up_ref(X509 *x)
     return ((i > 1) ? 1 : 0);
 }
 
-long X509_get_version(const X509 *x)
+long __cdecl X509_get_version(const X509 *x)
 {
     return ASN1_INTEGER_get(x->cert_info.version);
 }
 
-const ASN1_TIME *X509_get0_notBefore(const X509 *x)
+const ASN1_TIME * __cdecl X509_get0_notBefore(const X509 *x)
 {
     return x->cert_info.validity.notBefore;
 }
 
-const ASN1_TIME *X509_get0_notAfter(const X509 *x)
+const ASN1_TIME * __cdecl X509_get0_notAfter(const X509 *x)
 {
     return x->cert_info.validity.notAfter;
 }
 
-ASN1_TIME *X509_getm_notBefore(const X509 *x)
+ASN1_TIME * __cdecl X509_getm_notBefore(const X509 *x)
 {
     return x->cert_info.validity.notBefore;
 }
 
-ASN1_TIME *X509_getm_notAfter(const X509 *x)
+ASN1_TIME * __cdecl X509_getm_notAfter(const X509 *x)
 {
     return x->cert_info.validity.notAfter;
 }
 
-int X509_get_signature_type(const X509 *x)
+int __cdecl X509_get_signature_type(const X509 *x)
 {
     return EVP_PKEY_type(OBJ_obj2nid(x->sig_alg.algorithm));
 }
 
-X509_PUBKEY *X509_get_X509_PUBKEY(const X509 *x)
+X509_PUBKEY * __cdecl X509_get_X509_PUBKEY(const X509 *x)
 {
     return x->cert_info.key;
 }
 
-const STACK_OF(X509_EXTENSION) *X509_get0_extensions(const X509 *x)
+const STACK_OF(X509_EXTENSION) * __cdecl X509_get0_extensions(const X509 *x)
 {
     return x->cert_info.extensions;
 }
 
-void X509_get0_uids(const X509 *x, const ASN1_BIT_STRING **piuid,
+void __cdecl X509_get0_uids(const X509 *x, const ASN1_BIT_STRING **piuid,
                     const ASN1_BIT_STRING **psuid)
 {
     if (piuid != NULL)
@@ -157,12 +157,12 @@ void X509_get0_uids(const X509 *x, const ASN1_BIT_STRING **piuid,
         *psuid = x->cert_info.subjectUID;
 }
 
-const X509_ALGOR *X509_get0_tbs_sigalg(const X509 *x)
+const X509_ALGOR * __cdecl X509_get0_tbs_sigalg(const X509 *x)
 {
     return &x->cert_info.signature;
 }
 
-int X509_SIG_INFO_get(const X509_SIG_INFO *siginf, int *mdnid, int *pknid,
+int __cdecl X509_SIG_INFO_get(const X509_SIG_INFO *siginf, int *mdnid, int *pknid,
                       int *secbits, uint32_t *flags)
 {
     if (mdnid != NULL)
@@ -176,7 +176,7 @@ int X509_SIG_INFO_get(const X509_SIG_INFO *siginf, int *mdnid, int *pknid,
     return (siginf->flags & X509_SIG_INFO_VALID) != 0;
 }
 
-void X509_SIG_INFO_set(X509_SIG_INFO *siginf, int mdnid, int pknid,
+void __cdecl X509_SIG_INFO_set(X509_SIG_INFO *siginf, int mdnid, int pknid,
                        int secbits, uint32_t flags)
 {
     siginf->mdnid = mdnid;
@@ -185,7 +185,7 @@ void X509_SIG_INFO_set(X509_SIG_INFO *siginf, int mdnid, int pknid,
     siginf->flags = flags;
 }
 
-int X509_get_signature_info(X509 *x, int *mdnid, int *pknid, int *secbits,
+int __cdecl X509_get_signature_info(X509 *x, int *mdnid, int *pknid, int *secbits,
                             uint32_t *flags)
 {
     X509_check_purpose(x, -1, -1);
diff --git a/crypto/x509/x509_trs.c b/crypto/x509/x509_trs.c
index d749af4d59..99b8022238 100644
--- a/crypto/x509/x509_trs.c
+++ b/crypto/x509/x509_trs.c
@@ -12,8 +12,8 @@
 #include <openssl/x509v3.h>
 #include "internal/x509_int.h"
 
-static int tr_cmp(const X509_TRUST *const *a, const X509_TRUST *const *b);
-static void trtable_free(X509_TRUST *p);
+static int __cdecl tr_cmp(const X509_TRUST *const *a, const X509_TRUST *const *b);
+static void __cdecl trtable_free(X509_TRUST *p);
 
 static int trust_1oidany(X509_TRUST *trust, X509 *x, int flags);
 static int trust_1oid(X509_TRUST *trust, X509 *x, int flags);
@@ -49,12 +49,12 @@ static X509_TRUST trstandard[] = {
 
 static STACK_OF(X509_TRUST) *trtable = NULL;
 
-static int tr_cmp(const X509_TRUST *const *a, const X509_TRUST *const *b)
+static int __cdecl tr_cmp(const X509_TRUST *const *a, const X509_TRUST *const *b)
 {
     return (*a)->trust - (*b)->trust;
 }
 
-int (*X509_TRUST_set_default(int (*trust) (int, X509 *, int))) (int, X509 *,
+int (* __cdecl X509_TRUST_set_default(int (*trust) (int, X509 *, int))) (int, X509 *,
                                                                 int) {
     int (*oldtrust) (int, X509 *, int);
     oldtrust = default_trust;
@@ -62,7 +62,7 @@ int (*X509_TRUST_set_default(int (*trust) (int, X509 *, int))) (int, X509 *,
     return oldtrust;
 }
 
-int X509_check_trust(X509 *x, int id, int flags)
+int __cdecl X509_check_trust(X509 *x, int id, int flags)
 {
     X509_TRUST *pt;
     int idx;
@@ -78,14 +78,14 @@ int X509_check_trust(X509 *x, int id, int flags)
     return pt->check_trust(pt, x, flags);
 }
 
-int X509_TRUST_get_count(void)
+int __cdecl X509_TRUST_get_count(void)
 {
     if (!trtable)
         return X509_TRUST_COUNT;
     return sk_X509_TRUST_num(trtable) + X509_TRUST_COUNT;
 }
 
-X509_TRUST *X509_TRUST_get0(int idx)
+X509_TRUST * __cdecl X509_TRUST_get0(int idx)
 {
     if (idx < 0)
         return NULL;
@@ -94,7 +94,7 @@ X509_TRUST *X509_TRUST_get0(int idx)
     return sk_X509_TRUST_value(trtable, idx - X509_TRUST_COUNT);
 }
 
-int X509_TRUST_get_by_id(int id)
+int __cdecl X509_TRUST_get_by_id(int id)
 {
     X509_TRUST tmp;
     int idx;
@@ -110,7 +110,7 @@ int X509_TRUST_get_by_id(int id)
     return idx + X509_TRUST_COUNT;
 }
 
-int X509_TRUST_set(int *t, int trust)
+int __cdecl X509_TRUST_set(int *t, int trust)
 {
     if (X509_TRUST_get_by_id(trust) == -1) {
         X509err(X509_F_X509_TRUST_SET, X509_R_INVALID_TRUST);
@@ -120,7 +120,7 @@ int X509_TRUST_set(int *t, int trust)
     return 1;
 }
 
-int X509_TRUST_add(int id, int flags, int (*ck) (X509_TRUST *, X509 *, int),
+int __cdecl X509_TRUST_add(int id, int flags, int (*ck) (X509_TRUST *, X509 *, int),
                    const char *name, int arg1, void *arg2)
 {
     int idx;
@@ -182,7 +182,7 @@ int X509_TRUST_add(int id, int flags, int (*ck) (X509_TRUST *, X509 *, int),
     return 0;
 }
 
-static void trtable_free(X509_TRUST *p)
+static void __cdecl trtable_free(X509_TRUST *p)
 {
     if (!p)
         return;
@@ -193,23 +193,23 @@ static void trtable_free(X509_TRUST *p)
     }
 }
 
-void X509_TRUST_cleanup(void)
+void __cdecl X509_TRUST_cleanup(void)
 {
     sk_X509_TRUST_pop_free(trtable, trtable_free);
     trtable = NULL;
 }
 
-int X509_TRUST_get_flags(const X509_TRUST *xp)
+int __cdecl X509_TRUST_get_flags(const X509_TRUST *xp)
 {
     return xp->flags;
 }
 
-char *X509_TRUST_get0_name(const X509_TRUST *xp)
+char * __cdecl X509_TRUST_get0_name(const X509_TRUST *xp)
 {
     return xp->name;
 }
 
-int X509_TRUST_get_trust(const X509_TRUST *xp)
+int __cdecl X509_TRUST_get_trust(const X509_TRUST *xp)
 {
     return xp->trust;
 }
diff --git a/crypto/x509/x509_txt.c b/crypto/x509/x509_txt.c
index 4755b39eb4..84ec34d2f3 100644
--- a/crypto/x509/x509_txt.c
+++ b/crypto/x509/x509_txt.c
@@ -18,7 +18,7 @@
 #include <openssl/x509.h>
 #include <openssl/objects.h>
 
-const char *X509_verify_cert_error_string(long n)
+const char * __cdecl X509_verify_cert_error_string(long n)
 {
     switch ((int)n) {
     case X509_V_OK:
diff --git a/crypto/x509/x509_v3.c b/crypto/x509/x509_v3.c
index 75ae767d60..e84a6ae8ca 100644
--- a/crypto/x509/x509_v3.c
+++ b/crypto/x509/x509_v3.c
@@ -17,14 +17,14 @@
 #include <openssl/x509v3.h>
 #include "x509_lcl.h"
 
-int X509v3_get_ext_count(const STACK_OF(X509_EXTENSION) *x)
+int __cdecl X509v3_get_ext_count(const STACK_OF(X509_EXTENSION) *x)
 {
     if (x == NULL)
         return 0;
     return sk_X509_EXTENSION_num(x);
 }
 
-int X509v3_get_ext_by_NID(const STACK_OF(X509_EXTENSION) *x, int nid,
+int __cdecl X509v3_get_ext_by_NID(const STACK_OF(X509_EXTENSION) *x, int nid,
                           int lastpos)
 {
     ASN1_OBJECT *obj;
@@ -35,7 +35,7 @@ int X509v3_get_ext_by_NID(const STACK_OF(X509_EXTENSION) *x, int nid,
     return X509v3_get_ext_by_OBJ(x, obj, lastpos);
 }
 
-int X509v3_get_ext_by_OBJ(const STACK_OF(X509_EXTENSION) *sk,
+int __cdecl X509v3_get_ext_by_OBJ(const STACK_OF(X509_EXTENSION) *sk,
                           const ASN1_OBJECT *obj, int lastpos)
 {
     int n;
@@ -55,7 +55,7 @@ int X509v3_get_ext_by_OBJ(const STACK_OF(X509_EXTENSION) *sk,
     return -1;
 }
 
-int X509v3_get_ext_by_critical(const STACK_OF(X509_EXTENSION) *sk, int crit,
+int __cdecl X509v3_get_ext_by_critical(const STACK_OF(X509_EXTENSION) *sk, int crit,
                                int lastpos)
 {
     int n;
@@ -75,7 +75,7 @@ int X509v3_get_ext_by_critical(const STACK_OF(X509_EXTENSION) *sk, int crit,
     return -1;
 }
 
-X509_EXTENSION *X509v3_get_ext(const STACK_OF(X509_EXTENSION) *x, int loc)
+X509_EXTENSION * __cdecl X509v3_get_ext(const STACK_OF(X509_EXTENSION) *x, int loc)
 {
     if (x == NULL || sk_X509_EXTENSION_num(x) <= loc || loc < 0)
         return NULL;
@@ -83,7 +83,7 @@ X509_EXTENSION *X509v3_get_ext(const STACK_OF(X509_EXTENSION) *x, int loc)
         return sk_X509_EXTENSION_value(x, loc);
 }
 
-X509_EXTENSION *X509v3_delete_ext(STACK_OF(X509_EXTENSION) *x, int loc)
+X509_EXTENSION * __cdecl X509v3_delete_ext(STACK_OF(X509_EXTENSION) *x, int loc)
 {
     X509_EXTENSION *ret;
 
@@ -93,7 +93,7 @@ X509_EXTENSION *X509v3_delete_ext(STACK_OF(X509_EXTENSION) *x, int loc)
     return ret;
 }
 
-STACK_OF(X509_EXTENSION) *X509v3_add_ext(STACK_OF(X509_EXTENSION) **x,
+STACK_OF(X509_EXTENSION) * __cdecl X509v3_add_ext(STACK_OF(X509_EXTENSION) **x,
                                          X509_EXTENSION *ex, int loc)
 {
     X509_EXTENSION *new_ex = NULL;
@@ -133,7 +133,7 @@ STACK_OF(X509_EXTENSION) *X509v3_add_ext(STACK_OF(X509_EXTENSION) **x,
     return NULL;
 }
 
-X509_EXTENSION *X509_EXTENSION_create_by_NID(X509_EXTENSION **ex, int nid,
+X509_EXTENSION * __cdecl X509_EXTENSION_create_by_NID(X509_EXTENSION **ex, int nid,
                                              int crit,
                                              ASN1_OCTET_STRING *data)
 {
@@ -151,7 +151,7 @@ X509_EXTENSION *X509_EXTENSION_create_by_NID(X509_EXTENSION **ex, int nid,
     return ret;
 }
 
-X509_EXTENSION *X509_EXTENSION_create_by_OBJ(X509_EXTENSION **ex,
+X509_EXTENSION * __cdecl X509_EXTENSION_create_by_OBJ(X509_EXTENSION **ex,
                                              const ASN1_OBJECT *obj, int crit,
                                              ASN1_OCTET_STRING *data)
 {
@@ -182,7 +182,7 @@ X509_EXTENSION *X509_EXTENSION_create_by_OBJ(X509_EXTENSION **ex,
     return NULL;
 }
 
-int X509_EXTENSION_set_object(X509_EXTENSION *ex, const ASN1_OBJECT *obj)
+int __cdecl X509_EXTENSION_set_object(X509_EXTENSION *ex, const ASN1_OBJECT *obj)
 {
     if ((ex == NULL) || (obj == NULL))
         return 0;
@@ -191,7 +191,7 @@ int X509_EXTENSION_set_object(X509_EXTENSION *ex, const ASN1_OBJECT *obj)
     return ex->object != NULL;
 }
 
-int X509_EXTENSION_set_critical(X509_EXTENSION *ex, int crit)
+int __cdecl X509_EXTENSION_set_critical(X509_EXTENSION *ex, int crit)
 {
     if (ex == NULL)
         return 0;
@@ -199,7 +199,7 @@ int X509_EXTENSION_set_critical(X509_EXTENSION *ex, int crit)
     return 1;
 }
 
-int X509_EXTENSION_set_data(X509_EXTENSION *ex, ASN1_OCTET_STRING *data)
+int __cdecl X509_EXTENSION_set_data(X509_EXTENSION *ex, ASN1_OCTET_STRING *data)
 {
     int i;
 
@@ -211,21 +211,21 @@ int X509_EXTENSION_set_data(X509_EXTENSION *ex, ASN1_OCTET_STRING *data)
     return 1;
 }
 
-ASN1_OBJECT *X509_EXTENSION_get_object(X509_EXTENSION *ex)
+ASN1_OBJECT * __cdecl X509_EXTENSION_get_object(X509_EXTENSION *ex)
 {
     if (ex == NULL)
         return NULL;
     return ex->object;
 }
 
-ASN1_OCTET_STRING *X509_EXTENSION_get_data(X509_EXTENSION *ex)
+ASN1_OCTET_STRING * __cdecl X509_EXTENSION_get_data(X509_EXTENSION *ex)
 {
     if (ex == NULL)
         return NULL;
     return &ex->value;
 }
 
-int X509_EXTENSION_get_critical(const X509_EXTENSION *ex)
+int __cdecl X509_EXTENSION_get_critical(const X509_EXTENSION *ex)
 {
     if (ex == NULL)
         return 0;
diff --git a/crypto/x509/x509_vfy.c b/crypto/x509/x509_vfy.c
index 6be2c71e86..fe14e68dd5 100644
--- a/crypto/x509/x509_vfy.c
+++ b/crypto/x509/x509_vfy.c
@@ -67,16 +67,16 @@ static int build_chain(X509_STORE_CTX *ctx);
 static int verify_chain(X509_STORE_CTX *ctx);
 static int dane_verify(X509_STORE_CTX *ctx);
 static int null_callback(int ok, X509_STORE_CTX *e);
-static int check_issued(X509_STORE_CTX *ctx, X509 *x, X509 *issuer);
+static int __cdecl check_issued(X509_STORE_CTX *ctx, X509 *x, X509 *issuer);
 static X509 *find_issuer(X509_STORE_CTX *ctx, STACK_OF(X509) *sk, X509 *x);
 static int check_chain_extensions(X509_STORE_CTX *ctx);
 static int check_name_constraints(X509_STORE_CTX *ctx);
 static int check_id(X509_STORE_CTX *ctx);
 static int check_trust(X509_STORE_CTX *ctx, int num_untrusted);
-static int check_revocation(X509_STORE_CTX *ctx);
+static int __cdecl check_revocation(X509_STORE_CTX *ctx);
 static int check_cert(X509_STORE_CTX *ctx);
-static int check_policy(X509_STORE_CTX *ctx);
-static int get_issuer_sk(X509 **issuer, X509_STORE_CTX *ctx, X509 *x);
+static int __cdecl check_policy(X509_STORE_CTX *ctx);
+static int __cdecl get_issuer_sk(X509 **issuer, X509_STORE_CTX *ctx, X509 *x);
 static int check_dane_issuer(X509_STORE_CTX *ctx, int depth);
 static int check_key_level(X509_STORE_CTX *ctx, X509 *cert);
 static int check_sig_level(X509_STORE_CTX *ctx, X509 *cert);
@@ -97,7 +97,7 @@ static int check_crl_chain(X509_STORE_CTX *ctx,
                            STACK_OF(X509) *cert_path,
                            STACK_OF(X509) *crl_path);
 
-static int internal_verify(X509_STORE_CTX *ctx);
+static int __cdecl internal_verify(X509_STORE_CTX *ctx);
 
 static int null_callback(int ok, X509_STORE_CTX *e)
 {
@@ -250,7 +250,7 @@ static int verify_chain(X509_STORE_CTX *ctx)
     return ok;
 }
 
-int X509_verify_cert(X509_STORE_CTX *ctx)
+int __cdecl X509_verify_cert(X509_STORE_CTX *ctx)
 {
     SSL_DANE *dane = ctx->dane;
     int ret;
@@ -325,7 +325,7 @@ static X509 *find_issuer(X509_STORE_CTX *ctx, STACK_OF(X509) *sk, X509 *x)
 
 /* Given a possible certificate and issuer check them */
 
-static int check_issued(X509_STORE_CTX *ctx, X509 *x, X509 *issuer)
+static int __cdecl check_issued(X509_STORE_CTX *ctx, X509 *x, X509 *issuer)
 {
     int ret;
     if (x == issuer)
@@ -351,7 +351,7 @@ static int check_issued(X509_STORE_CTX *ctx, X509 *x, X509 *issuer)
 
 /* Alternative lookup method: look from a STACK stored in other_ctx */
 
-static int get_issuer_sk(X509 **issuer, X509_STORE_CTX *ctx, X509 *x)
+static int __cdecl get_issuer_sk(X509 **issuer, X509_STORE_CTX *ctx, X509 *x)
 {
     *issuer = find_issuer(ctx, ctx->other_ctx, x);
     if (*issuer) {
@@ -361,7 +361,7 @@ static int get_issuer_sk(X509 **issuer, X509_STORE_CTX *ctx, X509 *x)
         return 0;
 }
 
-static STACK_OF(X509) *lookup_certs_sk(X509_STORE_CTX *ctx, X509_NAME *nm)
+static STACK_OF(X509) * __cdecl lookup_certs_sk(X509_STORE_CTX *ctx, X509_NAME *nm)
 {
     STACK_OF(X509) *sk = NULL;
     X509 *x;
@@ -841,7 +841,7 @@ static int check_trust(X509_STORE_CTX *ctx, int num_untrusted)
     return X509_TRUST_UNTRUSTED;
 }
 
-static int check_revocation(X509_STORE_CTX *ctx)
+static int __cdecl check_revocation(X509_STORE_CTX *ctx)
 {
     int i = 0, last = 0, ok = 0;
     if (!(ctx->param->flags & X509_V_FLAG_CRL_CHECK))
@@ -1481,7 +1481,7 @@ static int get_crl_delta(X509_STORE_CTX *ctx,
 }
 
 /* Check CRL validity */
-static int check_crl(X509_STORE_CTX *ctx, X509_CRL *crl)
+static int __cdecl check_crl(X509_STORE_CTX *ctx, X509_CRL *crl)
 {
     X509 *issuer = NULL;
     EVP_PKEY *ikey = NULL;
@@ -1557,7 +1557,7 @@ static int check_crl(X509_STORE_CTX *ctx, X509_CRL *crl)
 }
 
 /* Check certificate against CRL */
-static int cert_crl(X509_STORE_CTX *ctx, X509_CRL *crl, X509 *x)
+static int __cdecl cert_crl(X509_STORE_CTX *ctx, X509_CRL *crl, X509 *x)
 {
     X509_REVOKED *rev;
 
@@ -1585,7 +1585,7 @@ static int cert_crl(X509_STORE_CTX *ctx, X509_CRL *crl, X509 *x)
     return 1;
 }
 
-static int check_policy(X509_STORE_CTX *ctx)
+static int __cdecl check_policy(X509_STORE_CTX *ctx)
 {
     int ret;
 
@@ -1697,7 +1697,7 @@ int x509_check_cert_time(X509_STORE_CTX *ctx, X509 *x, int depth)
     return 1;
 }
 
-static int internal_verify(X509_STORE_CTX *ctx)
+static int __cdecl internal_verify(X509_STORE_CTX *ctx)
 {
     int n = sk_X509_num(ctx->chain) - 1;
     X509 *xi = sk_X509_value(ctx->chain, n);
@@ -1777,12 +1777,12 @@ static int internal_verify(X509_STORE_CTX *ctx)
     return 1;
 }
 
-int X509_cmp_current_time(const ASN1_TIME *ctm)
+int __cdecl X509_cmp_current_time(const ASN1_TIME *ctm)
 {
     return X509_cmp_time(ctm, NULL);
 }
 
-int X509_cmp_time(const ASN1_TIME *ctm, time_t *cmp_time)
+int __cdecl X509_cmp_time(const ASN1_TIME *ctm, time_t *cmp_time)
 {
     static const size_t utctime_length = sizeof("YYMMDDHHMMSSZ") - 1;
     static const size_t generalizedtime_length = sizeof("YYYYMMDDHHMMSSZ") - 1;
@@ -1851,17 +1851,17 @@ int X509_cmp_time(const ASN1_TIME *ctm, time_t *cmp_time)
     return ret;
 }
 
-ASN1_TIME *X509_gmtime_adj(ASN1_TIME *s, long adj)
+ASN1_TIME * __cdecl X509_gmtime_adj(ASN1_TIME *s, long adj)
 {
     return X509_time_adj(s, adj, NULL);
 }
 
-ASN1_TIME *X509_time_adj(ASN1_TIME *s, long offset_sec, time_t *in_tm)
+ASN1_TIME * __cdecl X509_time_adj(ASN1_TIME *s, long offset_sec, time_t *in_tm)
 {
     return X509_time_adj_ex(s, 0, offset_sec, in_tm);
 }
 
-ASN1_TIME *X509_time_adj_ex(ASN1_TIME *s,
+ASN1_TIME * __cdecl X509_time_adj_ex(ASN1_TIME *s,
                             int offset_day, long offset_sec, time_t *in_tm)
 {
     time_t t;
@@ -1880,7 +1880,7 @@ ASN1_TIME *X509_time_adj_ex(ASN1_TIME *s,
     return ASN1_TIME_adj(s, t, offset_day, offset_sec);
 }
 
-int X509_get_pubkey_parameters(EVP_PKEY *pkey, STACK_OF(X509) *chain)
+int __cdecl X509_get_pubkey_parameters(EVP_PKEY *pkey, STACK_OF(X509) *chain)
 {
     EVP_PKEY *ktmp = NULL, *ktmp2;
     int i, j;
@@ -1917,7 +1917,7 @@ int X509_get_pubkey_parameters(EVP_PKEY *pkey, STACK_OF(X509) *chain)
 
 /* Make a delta CRL as the diff between two full CRLs */
 
-X509_CRL *X509_CRL_diff(X509_CRL *base, X509_CRL *newer,
+X509_CRL * __cdecl X509_CRL_diff(X509_CRL *base, X509_CRL *newer,
                         EVP_PKEY *skey, const EVP_MD *md, unsigned int flags)
 {
     X509_CRL *crl = NULL;
@@ -2022,84 +2022,84 @@ X509_CRL *X509_CRL_diff(X509_CRL *base, X509_CRL *newer,
     return NULL;
 }
 
-int X509_STORE_CTX_set_ex_data(X509_STORE_CTX *ctx, int idx, void *data)
+int __cdecl X509_STORE_CTX_set_ex_data(X509_STORE_CTX *ctx, int idx, void *data)
 {
     return CRYPTO_set_ex_data(&ctx->ex_data, idx, data);
 }
 
-void *X509_STORE_CTX_get_ex_data(X509_STORE_CTX *ctx, int idx)
+void * __cdecl X509_STORE_CTX_get_ex_data(X509_STORE_CTX *ctx, int idx)
 {
     return CRYPTO_get_ex_data(&ctx->ex_data, idx);
 }
 
-int X509_STORE_CTX_get_error(X509_STORE_CTX *ctx)
+int __cdecl X509_STORE_CTX_get_error(X509_STORE_CTX *ctx)
 {
     return ctx->error;
 }
 
-void X509_STORE_CTX_set_error(X509_STORE_CTX *ctx, int err)
+void __cdecl X509_STORE_CTX_set_error(X509_STORE_CTX *ctx, int err)
 {
     ctx->error = err;
 }
 
-int X509_STORE_CTX_get_error_depth(X509_STORE_CTX *ctx)
+int __cdecl X509_STORE_CTX_get_error_depth(X509_STORE_CTX *ctx)
 {
     return ctx->error_depth;
 }
 
-void X509_STORE_CTX_set_error_depth(X509_STORE_CTX *ctx, int depth)
+void __cdecl X509_STORE_CTX_set_error_depth(X509_STORE_CTX *ctx, int depth)
 {
     ctx->error_depth = depth;
 }
 
-X509 *X509_STORE_CTX_get_current_cert(X509_STORE_CTX *ctx)
+X509 * __cdecl X509_STORE_CTX_get_current_cert(X509_STORE_CTX *ctx)
 {
     return ctx->current_cert;
 }
 
-void X509_STORE_CTX_set_current_cert(X509_STORE_CTX *ctx, X509 *x)
+void __cdecl X509_STORE_CTX_set_current_cert(X509_STORE_CTX *ctx, X509 *x)
 {
     ctx->current_cert = x;
 }
 
-STACK_OF(X509) *X509_STORE_CTX_get0_chain(X509_STORE_CTX *ctx)
+STACK_OF(X509) * __cdecl X509_STORE_CTX_get0_chain(X509_STORE_CTX *ctx)
 {
     return ctx->chain;
 }
 
-STACK_OF(X509) *X509_STORE_CTX_get1_chain(X509_STORE_CTX *ctx)
+STACK_OF(X509) * __cdecl X509_STORE_CTX_get1_chain(X509_STORE_CTX *ctx)
 {
     if (!ctx->chain)
         return NULL;
     return X509_chain_up_ref(ctx->chain);
 }
 
-X509 *X509_STORE_CTX_get0_current_issuer(X509_STORE_CTX *ctx)
+X509 * __cdecl X509_STORE_CTX_get0_current_issuer(X509_STORE_CTX *ctx)
 {
     return ctx->current_issuer;
 }
 
-X509_CRL *X509_STORE_CTX_get0_current_crl(X509_STORE_CTX *ctx)
+X509_CRL * __cdecl X509_STORE_CTX_get0_current_crl(X509_STORE_CTX *ctx)
 {
     return ctx->current_crl;
 }
 
-X509_STORE_CTX *X509_STORE_CTX_get0_parent_ctx(X509_STORE_CTX *ctx)
+X509_STORE_CTX * __cdecl X509_STORE_CTX_get0_parent_ctx(X509_STORE_CTX *ctx)
 {
     return ctx->parent;
 }
 
-void X509_STORE_CTX_set_cert(X509_STORE_CTX *ctx, X509 *x)
+void __cdecl X509_STORE_CTX_set_cert(X509_STORE_CTX *ctx, X509 *x)
 {
     ctx->cert = x;
 }
 
-void X509_STORE_CTX_set0_crls(X509_STORE_CTX *ctx, STACK_OF(X509_CRL) *sk)
+void __cdecl X509_STORE_CTX_set0_crls(X509_STORE_CTX *ctx, STACK_OF(X509_CRL) *sk)
 {
     ctx->crls = sk;
 }
 
-int X509_STORE_CTX_set_purpose(X509_STORE_CTX *ctx, int purpose)
+int __cdecl X509_STORE_CTX_set_purpose(X509_STORE_CTX *ctx, int purpose)
 {
     /*
      * XXX: Why isn't this function always used to set the associated trust?
@@ -2109,7 +2109,7 @@ int X509_STORE_CTX_set_purpose(X509_STORE_CTX *ctx, int purpose)
     return X509_STORE_CTX_purpose_inherit(ctx, 0, purpose, 0);
 }
 
-int X509_STORE_CTX_set_trust(X509_STORE_CTX *ctx, int trust)
+int __cdecl X509_STORE_CTX_set_trust(X509_STORE_CTX *ctx, int trust)
 {
     /*
      * XXX: See above, this function would only be needed when the default
@@ -2129,7 +2129,7 @@ int X509_STORE_CTX_set_trust(X509_STORE_CTX *ctx, int trust)
  * client/server.
  */
 
-int X509_STORE_CTX_purpose_inherit(X509_STORE_CTX *ctx, int def_purpose,
+int __cdecl X509_STORE_CTX_purpose_inherit(X509_STORE_CTX *ctx, int def_purpose,
                                    int purpose, int trust)
 {
     int idx;
@@ -2180,7 +2180,7 @@ int X509_STORE_CTX_purpose_inherit(X509_STORE_CTX *ctx, int def_purpose,
     return 1;
 }
 
-X509_STORE_CTX *X509_STORE_CTX_new(void)
+X509_STORE_CTX * __cdecl X509_STORE_CTX_new(void)
 {
     X509_STORE_CTX *ctx = OPENSSL_zalloc(sizeof(*ctx));
 
@@ -2191,7 +2191,7 @@ X509_STORE_CTX *X509_STORE_CTX_new(void)
     return ctx;
 }
 
-void X509_STORE_CTX_free(X509_STORE_CTX *ctx)
+void __cdecl X509_STORE_CTX_free(X509_STORE_CTX *ctx)
 {
     if (ctx == NULL)
         return;
@@ -2200,7 +2200,7 @@ void X509_STORE_CTX_free(X509_STORE_CTX *ctx)
     OPENSSL_free(ctx);
 }
 
-int X509_STORE_CTX_init(X509_STORE_CTX *ctx, X509_STORE *store, X509 *x509,
+int __cdecl X509_STORE_CTX_init(X509_STORE_CTX *ctx, X509_STORE *store, X509 *x509,
                         STACK_OF(X509) *chain)
 {
     int ret = 1;
@@ -2342,14 +2342,14 @@ int X509_STORE_CTX_init(X509_STORE_CTX *ctx, X509_STORE *store, X509 *x509,
  * Set alternative lookup method: just a STACK of trusted certificates. This
  * avoids X509_STORE nastiness where it isn't needed.
  */
-void X509_STORE_CTX_set0_trusted_stack(X509_STORE_CTX *ctx, STACK_OF(X509) *sk)
+void __cdecl X509_STORE_CTX_set0_trusted_stack(X509_STORE_CTX *ctx, STACK_OF(X509) *sk)
 {
     ctx->other_ctx = sk;
     ctx->get_issuer = get_issuer_sk;
     ctx->lookup_certs = lookup_certs_sk;
 }
 
-void X509_STORE_CTX_cleanup(X509_STORE_CTX *ctx)
+void __cdecl X509_STORE_CTX_cleanup(X509_STORE_CTX *ctx)
 {
     /*
      * We need to be idempotent because, unfortunately, free() also calls
@@ -2375,55 +2375,55 @@ void X509_STORE_CTX_cleanup(X509_STORE_CTX *ctx)
     memset(&ctx->ex_data, 0, sizeof(ctx->ex_data));
 }
 
-void X509_STORE_CTX_set_depth(X509_STORE_CTX *ctx, int depth)
+void __cdecl X509_STORE_CTX_set_depth(X509_STORE_CTX *ctx, int depth)
 {
     X509_VERIFY_PARAM_set_depth(ctx->param, depth);
 }
 
-void X509_STORE_CTX_set_flags(X509_STORE_CTX *ctx, unsigned long flags)
+void __cdecl X509_STORE_CTX_set_flags(X509_STORE_CTX *ctx, unsigned long flags)
 {
     X509_VERIFY_PARAM_set_flags(ctx->param, flags);
 }
 
-void X509_STORE_CTX_set_time(X509_STORE_CTX *ctx, unsigned long flags,
+void __cdecl X509_STORE_CTX_set_time(X509_STORE_CTX *ctx, unsigned long flags,
                              time_t t)
 {
     X509_VERIFY_PARAM_set_time(ctx->param, t);
 }
 
-X509 *X509_STORE_CTX_get0_cert(X509_STORE_CTX *ctx)
+X509 * __cdecl X509_STORE_CTX_get0_cert(X509_STORE_CTX *ctx)
 {
     return ctx->cert;
 }
 
-STACK_OF(X509) *X509_STORE_CTX_get0_untrusted(X509_STORE_CTX *ctx)
+STACK_OF(X509) * __cdecl X509_STORE_CTX_get0_untrusted(X509_STORE_CTX *ctx)
 {
     return ctx->untrusted;
 }
 
-void X509_STORE_CTX_set0_untrusted(X509_STORE_CTX *ctx, STACK_OF(X509) *sk)
+void __cdecl X509_STORE_CTX_set0_untrusted(X509_STORE_CTX *ctx, STACK_OF(X509) *sk)
 {
     ctx->untrusted = sk;
 }
 
-void X509_STORE_CTX_set0_verified_chain(X509_STORE_CTX *ctx, STACK_OF(X509) *sk)
+void __cdecl X509_STORE_CTX_set0_verified_chain(X509_STORE_CTX *ctx, STACK_OF(X509) *sk)
 {
     sk_X509_pop_free(ctx->chain, X509_free);
     ctx->chain = sk;
 }
 
-void X509_STORE_CTX_set_verify_cb(X509_STORE_CTX *ctx,
+void __cdecl X509_STORE_CTX_set_verify_cb(X509_STORE_CTX *ctx,
                                   X509_STORE_CTX_verify_cb verify_cb)
 {
     ctx->verify_cb = verify_cb;
 }
 
-X509_STORE_CTX_verify_cb X509_STORE_CTX_get_verify_cb(X509_STORE_CTX *ctx)
+X509_STORE_CTX_verify_cb __cdecl X509_STORE_CTX_get_verify_cb(X509_STORE_CTX *ctx)
 {
     return ctx->verify_cb;
 }
 
-void X509_STORE_CTX_set_verify(X509_STORE_CTX *ctx,
+void __cdecl X509_STORE_CTX_set_verify(X509_STORE_CTX *ctx,
                                X509_STORE_CTX_verify_fn verify)
 {
     ctx->verify = verify;
@@ -2484,22 +2484,22 @@ X509_STORE_CTX_cleanup_fn X509_STORE_CTX_get_cleanup(X509_STORE_CTX *ctx)
     return ctx->cleanup;
 }
 
-X509_POLICY_TREE *X509_STORE_CTX_get0_policy_tree(X509_STORE_CTX *ctx)
+X509_POLICY_TREE * __cdecl X509_STORE_CTX_get0_policy_tree(X509_STORE_CTX *ctx)
 {
     return ctx->tree;
 }
 
-int X509_STORE_CTX_get_explicit_policy(X509_STORE_CTX *ctx)
+int __cdecl X509_STORE_CTX_get_explicit_policy(X509_STORE_CTX *ctx)
 {
     return ctx->explicit_policy;
 }
 
-int X509_STORE_CTX_get_num_untrusted(X509_STORE_CTX *ctx)
+int __cdecl X509_STORE_CTX_get_num_untrusted(X509_STORE_CTX *ctx)
 {
     return ctx->num_untrusted;
 }
 
-int X509_STORE_CTX_set_default(X509_STORE_CTX *ctx, const char *name)
+int __cdecl X509_STORE_CTX_set_default(X509_STORE_CTX *ctx, const char *name)
 {
     const X509_VERIFY_PARAM *param;
     param = X509_VERIFY_PARAM_lookup(name);
@@ -2508,18 +2508,18 @@ int X509_STORE_CTX_set_default(X509_STORE_CTX *ctx, const char *name)
     return X509_VERIFY_PARAM_inherit(ctx->param, param);
 }
 
-X509_VERIFY_PARAM *X509_STORE_CTX_get0_param(X509_STORE_CTX *ctx)
+X509_VERIFY_PARAM * __cdecl X509_STORE_CTX_get0_param(X509_STORE_CTX *ctx)
 {
     return ctx->param;
 }
 
-void X509_STORE_CTX_set0_param(X509_STORE_CTX *ctx, X509_VERIFY_PARAM *param)
+void __cdecl X509_STORE_CTX_set0_param(X509_STORE_CTX *ctx, X509_VERIFY_PARAM *param)
 {
     X509_VERIFY_PARAM_free(ctx->param);
     ctx->param = param;
 }
 
-void X509_STORE_CTX_set0_dane(X509_STORE_CTX *ctx, SSL_DANE *dane)
+void __cdecl X509_STORE_CTX_set0_dane(X509_STORE_CTX *ctx, SSL_DANE *dane)
 {
     ctx->dane = dane;
 }
diff --git a/crypto/x509/x509_vpm.c b/crypto/x509/x509_vpm.c
index aea186295c..5d0ff0bce8 100644
--- a/crypto/x509/x509_vpm.c
+++ b/crypto/x509/x509_vpm.c
@@ -23,12 +23,12 @@
 #define SET_HOST 0
 #define ADD_HOST 1
 
-static char *str_copy(const char *s)
+static char * __cdecl str_copy(const char *s)
 {
     return OPENSSL_strdup(s);
 }
 
-static void str_free(char *s)
+static void __cdecl str_free(char *s)
 {
     OPENSSL_free(s);
 }
@@ -79,7 +79,7 @@ static int int_x509_param_set_hosts(X509_VERIFY_PARAM *vpm, int mode,
 }
 
 
-X509_VERIFY_PARAM *X509_VERIFY_PARAM_new(void)
+X509_VERIFY_PARAM * __cdecl X509_VERIFY_PARAM_new(void)
 {
     X509_VERIFY_PARAM *param;
 
@@ -95,7 +95,7 @@ X509_VERIFY_PARAM *X509_VERIFY_PARAM_new(void)
     return param;
 }
 
-void X509_VERIFY_PARAM_free(X509_VERIFY_PARAM *param)
+void __cdecl X509_VERIFY_PARAM_free(X509_VERIFY_PARAM *param)
 {
     if (param == NULL)
         return;
@@ -151,7 +151,7 @@ void X509_VERIFY_PARAM_free(X509_VERIFY_PARAM *param)
         if (test_x509_verify_param_copy(field, def)) \
                 dest->field = src->field
 
-int X509_VERIFY_PARAM_inherit(X509_VERIFY_PARAM *dest,
+int __cdecl X509_VERIFY_PARAM_inherit(X509_VERIFY_PARAM *dest,
                               const X509_VERIFY_PARAM *src)
 {
     unsigned long inh_flags;
@@ -225,7 +225,7 @@ int X509_VERIFY_PARAM_inherit(X509_VERIFY_PARAM *dest,
     return 1;
 }
 
-int X509_VERIFY_PARAM_set1(X509_VERIFY_PARAM *to,
+int __cdecl X509_VERIFY_PARAM_set1(X509_VERIFY_PARAM *to,
                            const X509_VERIFY_PARAM *from)
 {
     unsigned long save_flags = to->inh_flags;
@@ -258,7 +258,7 @@ static int int_x509_param_set1(char **pdest, size_t *pdestlen,
     return 1;
 }
 
-int X509_VERIFY_PARAM_set1_name(X509_VERIFY_PARAM *param, const char *name)
+int __cdecl X509_VERIFY_PARAM_set1_name(X509_VERIFY_PARAM *param, const char *name)
 {
     OPENSSL_free(param->name);
     param->name = OPENSSL_strdup(name);
@@ -267,7 +267,7 @@ int X509_VERIFY_PARAM_set1_name(X509_VERIFY_PARAM *param, const char *name)
     return 0;
 }
 
-int X509_VERIFY_PARAM_set_flags(X509_VERIFY_PARAM *param, unsigned long flags)
+int __cdecl X509_VERIFY_PARAM_set_flags(X509_VERIFY_PARAM *param, unsigned long flags)
 {
     param->flags |= flags;
     if (flags & X509_V_FLAG_POLICY_MASK)
@@ -275,61 +275,61 @@ int X509_VERIFY_PARAM_set_flags(X509_VERIFY_PARAM *param, unsigned long flags)
     return 1;
 }
 
-int X509_VERIFY_PARAM_clear_flags(X509_VERIFY_PARAM *param,
+int __cdecl X509_VERIFY_PARAM_clear_flags(X509_VERIFY_PARAM *param,
                                   unsigned long flags)
 {
     param->flags &= ~flags;
     return 1;
 }
 
-unsigned long X509_VERIFY_PARAM_get_flags(X509_VERIFY_PARAM *param)
+unsigned long __cdecl X509_VERIFY_PARAM_get_flags(X509_VERIFY_PARAM *param)
 {
     return param->flags;
 }
 
-uint32_t X509_VERIFY_PARAM_get_inh_flags(const X509_VERIFY_PARAM *param)
+uint32_t __cdecl X509_VERIFY_PARAM_get_inh_flags(const X509_VERIFY_PARAM *param)
 {
     return param->inh_flags;
 }
 
-int X509_VERIFY_PARAM_set_inh_flags(X509_VERIFY_PARAM *param, uint32_t flags)
+int __cdecl X509_VERIFY_PARAM_set_inh_flags(X509_VERIFY_PARAM *param, uint32_t flags)
 {
     param->inh_flags = flags;
     return 1;
 }
 
-int X509_VERIFY_PARAM_set_purpose(X509_VERIFY_PARAM *param, int purpose)
+int __cdecl X509_VERIFY_PARAM_set_purpose(X509_VERIFY_PARAM *param, int purpose)
 {
     return X509_PURPOSE_set(&param->purpose, purpose);
 }
 
-int X509_VERIFY_PARAM_set_trust(X509_VERIFY_PARAM *param, int trust)
+int __cdecl X509_VERIFY_PARAM_set_trust(X509_VERIFY_PARAM *param, int trust)
 {
     return X509_TRUST_set(&param->trust, trust);
 }
 
-void X509_VERIFY_PARAM_set_depth(X509_VERIFY_PARAM *param, int depth)
+void __cdecl X509_VERIFY_PARAM_set_depth(X509_VERIFY_PARAM *param, int depth)
 {
     param->depth = depth;
 }
 
-void X509_VERIFY_PARAM_set_auth_level(X509_VERIFY_PARAM *param, int auth_level)
+void __cdecl X509_VERIFY_PARAM_set_auth_level(X509_VERIFY_PARAM *param, int auth_level)
 {
     param->auth_level = auth_level;
 }
 
-time_t X509_VERIFY_PARAM_get_time(const X509_VERIFY_PARAM *param)
+time_t __cdecl X509_VERIFY_PARAM_get_time(const X509_VERIFY_PARAM *param)
 {
     return param->check_time;
 }
 
-void X509_VERIFY_PARAM_set_time(X509_VERIFY_PARAM *param, time_t t)
+void __cdecl X509_VERIFY_PARAM_set_time(X509_VERIFY_PARAM *param, time_t t)
 {
     param->check_time = t;
     param->flags |= X509_V_FLAG_USE_CHECK_TIME;
 }
 
-int X509_VERIFY_PARAM_add0_policy(X509_VERIFY_PARAM *param,
+int __cdecl X509_VERIFY_PARAM_add0_policy(X509_VERIFY_PARAM *param,
                                   ASN1_OBJECT *policy)
 {
     if (!param->policies) {
@@ -342,7 +342,7 @@ int X509_VERIFY_PARAM_add0_policy(X509_VERIFY_PARAM *param,
     return 1;
 }
 
-int X509_VERIFY_PARAM_set1_policies(X509_VERIFY_PARAM *param,
+int __cdecl X509_VERIFY_PARAM_set1_policies(X509_VERIFY_PARAM *param,
                                     STACK_OF(ASN1_OBJECT) *policies)
 {
     int i;
@@ -375,30 +375,30 @@ int X509_VERIFY_PARAM_set1_policies(X509_VERIFY_PARAM *param,
     return 1;
 }
 
-int X509_VERIFY_PARAM_set1_host(X509_VERIFY_PARAM *param,
+int __cdecl X509_VERIFY_PARAM_set1_host(X509_VERIFY_PARAM *param,
                                 const char *name, size_t namelen)
 {
     return int_x509_param_set_hosts(param, SET_HOST, name, namelen);
 }
 
-int X509_VERIFY_PARAM_add1_host(X509_VERIFY_PARAM *param,
+int __cdecl X509_VERIFY_PARAM_add1_host(X509_VERIFY_PARAM *param,
                                 const char *name, size_t namelen)
 {
     return int_x509_param_set_hosts(param, ADD_HOST, name, namelen);
 }
 
-void X509_VERIFY_PARAM_set_hostflags(X509_VERIFY_PARAM *param,
+void __cdecl X509_VERIFY_PARAM_set_hostflags(X509_VERIFY_PARAM *param,
                                      unsigned int flags)
 {
     param->hostflags = flags;
 }
 
-unsigned int X509_VERIFY_PARAM_get_hostflags(const X509_VERIFY_PARAM *param)
+unsigned int __cdecl X509_VERIFY_PARAM_get_hostflags(const X509_VERIFY_PARAM *param)
 {
     return param->hostflags;
 }
 
-char *X509_VERIFY_PARAM_get0_peername(X509_VERIFY_PARAM *param)
+char * __cdecl X509_VERIFY_PARAM_get0_peername(X509_VERIFY_PARAM *param)
 {
     return param->peername;
 }
@@ -408,7 +408,7 @@ char *X509_VERIFY_PARAM_get0_peername(X509_VERIFY_PARAM *param)
  * at the target.  If the source is a NULL parameter structure, free and zero
  * the target peername.
  */
-void X509_VERIFY_PARAM_move_peername(X509_VERIFY_PARAM *to,
+void __cdecl X509_VERIFY_PARAM_move_peername(X509_VERIFY_PARAM *to,
                                      X509_VERIFY_PARAM *from)
 {
     char *peername = (from != NULL) ? from->peername : NULL;
@@ -421,14 +421,14 @@ void X509_VERIFY_PARAM_move_peername(X509_VERIFY_PARAM *to,
         from->peername = NULL;
 }
 
-int X509_VERIFY_PARAM_set1_email(X509_VERIFY_PARAM *param,
+int __cdecl X509_VERIFY_PARAM_set1_email(X509_VERIFY_PARAM *param,
                                  const char *email, size_t emaillen)
 {
     return int_x509_param_set1(&param->email, &param->emaillen,
                                email, emaillen);
 }
 
-int X509_VERIFY_PARAM_set1_ip(X509_VERIFY_PARAM *param,
+int __cdecl X509_VERIFY_PARAM_set1_ip(X509_VERIFY_PARAM *param,
                               const unsigned char *ip, size_t iplen)
 {
     if (iplen != 0 && iplen != 4 && iplen != 16)
@@ -437,7 +437,7 @@ int X509_VERIFY_PARAM_set1_ip(X509_VERIFY_PARAM *param,
                                (char *)ip, iplen);
 }
 
-int X509_VERIFY_PARAM_set1_ip_asc(X509_VERIFY_PARAM *param, const char *ipasc)
+int __cdecl X509_VERIFY_PARAM_set1_ip_asc(X509_VERIFY_PARAM *param, const char *ipasc)
 {
     unsigned char ipout[16];
     size_t iplen;
@@ -448,17 +448,17 @@ int X509_VERIFY_PARAM_set1_ip_asc(X509_VERIFY_PARAM *param, const char *ipasc)
     return X509_VERIFY_PARAM_set1_ip(param, ipout, iplen);
 }
 
-int X509_VERIFY_PARAM_get_depth(const X509_VERIFY_PARAM *param)
+int __cdecl X509_VERIFY_PARAM_get_depth(const X509_VERIFY_PARAM *param)
 {
     return param->depth;
 }
 
-int X509_VERIFY_PARAM_get_auth_level(const X509_VERIFY_PARAM *param)
+int __cdecl X509_VERIFY_PARAM_get_auth_level(const X509_VERIFY_PARAM *param)
 {
     return param->auth_level;
 }
 
-const char *X509_VERIFY_PARAM_get0_name(const X509_VERIFY_PARAM *param)
+const char * __cdecl X509_VERIFY_PARAM_get0_name(const X509_VERIFY_PARAM *param)
 {
     return param->name;
 }
@@ -531,7 +531,7 @@ static const X509_VERIFY_PARAM default_table[] = {
 
 static STACK_OF(X509_VERIFY_PARAM) *param_table = NULL;
 
-static int table_cmp(const X509_VERIFY_PARAM *a, const X509_VERIFY_PARAM *b)
+static int __cdecl table_cmp(const X509_VERIFY_PARAM *a, const X509_VERIFY_PARAM *b)
 {
     return strcmp(a->name, b->name);
 }
@@ -539,13 +539,13 @@ static int table_cmp(const X509_VERIFY_PARAM *a, const X509_VERIFY_PARAM *b)
 DECLARE_OBJ_BSEARCH_CMP_FN(X509_VERIFY_PARAM, X509_VERIFY_PARAM, table);
 IMPLEMENT_OBJ_BSEARCH_CMP_FN(X509_VERIFY_PARAM, X509_VERIFY_PARAM, table);
 
-static int param_cmp(const X509_VERIFY_PARAM *const *a,
+static int __cdecl param_cmp(const X509_VERIFY_PARAM *const *a,
                      const X509_VERIFY_PARAM *const *b)
 {
     return strcmp((*a)->name, (*b)->name);
 }
 
-int X509_VERIFY_PARAM_add0_table(X509_VERIFY_PARAM *param)
+int __cdecl X509_VERIFY_PARAM_add0_table(X509_VERIFY_PARAM *param)
 {
     int idx;
     X509_VERIFY_PARAM *ptmp;
@@ -565,7 +565,7 @@ int X509_VERIFY_PARAM_add0_table(X509_VERIFY_PARAM *param)
     return 1;
 }
 
-int X509_VERIFY_PARAM_get_count(void)
+int __cdecl X509_VERIFY_PARAM_get_count(void)
 {
     int num = OSSL_NELEM(default_table);
     if (param_table)
@@ -573,7 +573,7 @@ int X509_VERIFY_PARAM_get_count(void)
     return num;
 }
 
-const X509_VERIFY_PARAM *X509_VERIFY_PARAM_get0(int id)
+const X509_VERIFY_PARAM * __cdecl X509_VERIFY_PARAM_get0(int id)
 {
     int num = OSSL_NELEM(default_table);
     if (id < num)
@@ -581,7 +581,7 @@ const X509_VERIFY_PARAM *X509_VERIFY_PARAM_get0(int id)
     return sk_X509_VERIFY_PARAM_value(param_table, id - num);
 }
 
-const X509_VERIFY_PARAM *X509_VERIFY_PARAM_lookup(const char *name)
+const X509_VERIFY_PARAM * __cdecl X509_VERIFY_PARAM_lookup(const char *name)
 {
     int idx;
     X509_VERIFY_PARAM pm;
@@ -595,7 +595,7 @@ const X509_VERIFY_PARAM *X509_VERIFY_PARAM_lookup(const char *name)
     return OBJ_bsearch_table(&pm, default_table, OSSL_NELEM(default_table));
 }
 
-void X509_VERIFY_PARAM_table_cleanup(void)
+void __cdecl X509_VERIFY_PARAM_table_cleanup(void)
 {
     sk_X509_VERIFY_PARAM_pop_free(param_table, X509_VERIFY_PARAM_free);
     param_table = NULL;
diff --git a/crypto/x509/x509cset.c b/crypto/x509/x509cset.c
index 7645ce3759..d03353c4f2 100644
--- a/crypto/x509/x509cset.c
+++ b/crypto/x509/x509cset.c
@@ -16,7 +16,7 @@
 #include <openssl/x509.h>
 #include "internal/x509_int.h"
 
-int X509_CRL_set_version(X509_CRL *x, long version)
+int __cdecl X509_CRL_set_version(X509_CRL *x, long version)
 {
     if (x == NULL)
         return 0;
@@ -27,28 +27,28 @@ int X509_CRL_set_version(X509_CRL *x, long version)
     return ASN1_INTEGER_set(x->crl.version, version);
 }
 
-int X509_CRL_set_issuer_name(X509_CRL *x, X509_NAME *name)
+int __cdecl X509_CRL_set_issuer_name(X509_CRL *x, X509_NAME *name)
 {
     if (x == NULL)
         return 0;
     return X509_NAME_set(&x->crl.issuer, name);
 }
 
-int X509_CRL_set1_lastUpdate(X509_CRL *x, const ASN1_TIME *tm)
+int __cdecl X509_CRL_set1_lastUpdate(X509_CRL *x, const ASN1_TIME *tm)
 {
     if (x == NULL)
         return 0;
     return x509_set1_time(&x->crl.lastUpdate, tm);
 }
 
-int X509_CRL_set1_nextUpdate(X509_CRL *x, const ASN1_TIME *tm)
+int __cdecl X509_CRL_set1_nextUpdate(X509_CRL *x, const ASN1_TIME *tm)
 {
     if (x == NULL)
         return 0;
     return x509_set1_time(&x->crl.nextUpdate, tm);
 }
 
-int X509_CRL_sort(X509_CRL *c)
+int __cdecl X509_CRL_sort(X509_CRL *c)
 {
     int i;
     X509_REVOKED *r;
@@ -64,7 +64,7 @@ int X509_CRL_sort(X509_CRL *c)
     return 1;
 }
 
-int X509_CRL_up_ref(X509_CRL *crl)
+int __cdecl X509_CRL_up_ref(X509_CRL *crl)
 {
     int i;
 
@@ -76,17 +76,17 @@ int X509_CRL_up_ref(X509_CRL *crl)
     return ((i > 1) ? 1 : 0);
 }
 
-long X509_CRL_get_version(const X509_CRL *crl)
+long __cdecl X509_CRL_get_version(const X509_CRL *crl)
 {
     return ASN1_INTEGER_get(crl->crl.version);
 }
 
-const ASN1_TIME *X509_CRL_get0_lastUpdate(const X509_CRL *crl)
+const ASN1_TIME * __cdecl X509_CRL_get0_lastUpdate(const X509_CRL *crl)
 {
     return crl->crl.lastUpdate;
 }
 
-const ASN1_TIME *X509_CRL_get0_nextUpdate(const X509_CRL *crl)
+const ASN1_TIME * __cdecl X509_CRL_get0_nextUpdate(const X509_CRL *crl)
 {
     return crl->crl.nextUpdate;
 }
@@ -103,22 +103,22 @@ ASN1_TIME *X509_CRL_get_nextUpdate(X509_CRL *crl)
 }
 #endif
 
-X509_NAME *X509_CRL_get_issuer(const X509_CRL *crl)
+X509_NAME * __cdecl X509_CRL_get_issuer(const X509_CRL *crl)
 {
     return crl->crl.issuer;
 }
 
-const STACK_OF(X509_EXTENSION) *X509_CRL_get0_extensions(const X509_CRL *crl)
+const STACK_OF(X509_EXTENSION) * __cdecl X509_CRL_get0_extensions(const X509_CRL *crl)
 {
     return crl->crl.extensions;
 }
 
-STACK_OF(X509_REVOKED) *X509_CRL_get_REVOKED(X509_CRL *crl)
+STACK_OF(X509_REVOKED) * __cdecl X509_CRL_get_REVOKED(X509_CRL *crl)
 {
     return crl->crl.revoked;
 }
 
-void X509_CRL_get0_signature(const X509_CRL *crl, const ASN1_BIT_STRING **psig,
+void __cdecl X509_CRL_get0_signature(const X509_CRL *crl, const ASN1_BIT_STRING **psig,
                              const X509_ALGOR **palg)
 {
     if (psig != NULL)
@@ -127,17 +127,17 @@ void X509_CRL_get0_signature(const X509_CRL *crl, const ASN1_BIT_STRING **psig,
         *palg = &crl->sig_alg;
 }
 
-int X509_CRL_get_signature_nid(const X509_CRL *crl)
+int __cdecl X509_CRL_get_signature_nid(const X509_CRL *crl)
 {
     return OBJ_obj2nid(crl->sig_alg.algorithm);
 }
 
-const ASN1_TIME *X509_REVOKED_get0_revocationDate(const X509_REVOKED *x)
+const ASN1_TIME * __cdecl X509_REVOKED_get0_revocationDate(const X509_REVOKED *x)
 {
     return x->revocationDate;
 }
 
-int X509_REVOKED_set_revocationDate(X509_REVOKED *x, ASN1_TIME *tm)
+int __cdecl X509_REVOKED_set_revocationDate(X509_REVOKED *x, ASN1_TIME *tm)
 {
     ASN1_TIME *in;
 
@@ -154,12 +154,12 @@ int X509_REVOKED_set_revocationDate(X509_REVOKED *x, ASN1_TIME *tm)
     return (in != NULL);
 }
 
-const ASN1_INTEGER *X509_REVOKED_get0_serialNumber(const X509_REVOKED *x)
+const ASN1_INTEGER * __cdecl X509_REVOKED_get0_serialNumber(const X509_REVOKED *x)
 {
     return &x->serialNumber;
 }
 
-int X509_REVOKED_set_serialNumber(X509_REVOKED *x, ASN1_INTEGER *serial)
+int __cdecl X509_REVOKED_set_serialNumber(X509_REVOKED *x, ASN1_INTEGER *serial)
 {
     ASN1_INTEGER *in;
 
@@ -171,12 +171,12 @@ int X509_REVOKED_set_serialNumber(X509_REVOKED *x, ASN1_INTEGER *serial)
     return 1;
 }
 
-const STACK_OF(X509_EXTENSION) *X509_REVOKED_get0_extensions(const X509_REVOKED *r)
+const STACK_OF(X509_EXTENSION) * __cdecl X509_REVOKED_get0_extensions(const X509_REVOKED *r)
 {
     return r->extensions;
 }
 
-int i2d_re_X509_CRL_tbs(X509_CRL *crl, unsigned char **pp)
+int __cdecl i2d_re_X509_CRL_tbs(X509_CRL *crl, unsigned char **pp)
 {
     crl->crl.enc.modified = 1;
     return i2d_X509_CRL_INFO(&crl->crl, pp);
diff --git a/crypto/x509/x509name.c b/crypto/x509/x509name.c
index 64a73e793f..f4cb081a1f 100644
--- a/crypto/x509/x509name.c
+++ b/crypto/x509/x509name.c
@@ -16,7 +16,7 @@
 #include <openssl/x509.h>
 #include "internal/x509_int.h"
 
-int X509_NAME_get_text_by_NID(X509_NAME *name, int nid, char *buf, int len)
+int __cdecl X509_NAME_get_text_by_NID(X509_NAME *name, int nid, char *buf, int len)
 {
     ASN1_OBJECT *obj;
 
@@ -26,7 +26,7 @@ int X509_NAME_get_text_by_NID(X509_NAME *name, int nid, char *buf, int len)
     return X509_NAME_get_text_by_OBJ(name, obj, buf, len);
 }
 
-int X509_NAME_get_text_by_OBJ(X509_NAME *name, const ASN1_OBJECT *obj,
+int __cdecl X509_NAME_get_text_by_OBJ(X509_NAME *name, const ASN1_OBJECT *obj,
                               char *buf, int len)
 {
     int i;
@@ -46,14 +46,14 @@ int X509_NAME_get_text_by_OBJ(X509_NAME *name, const ASN1_OBJECT *obj,
     return i;
 }
 
-int X509_NAME_entry_count(const X509_NAME *name)
+int __cdecl X509_NAME_entry_count(const X509_NAME *name)
 {
     if (name == NULL)
         return 0;
     return sk_X509_NAME_ENTRY_num(name->entries);
 }
 
-int X509_NAME_get_index_by_NID(X509_NAME *name, int nid, int lastpos)
+int __cdecl X509_NAME_get_index_by_NID(X509_NAME *name, int nid, int lastpos)
 {
     ASN1_OBJECT *obj;
 
@@ -64,7 +64,7 @@ int X509_NAME_get_index_by_NID(X509_NAME *name, int nid, int lastpos)
 }
 
 /* NOTE: you should be passing -1, not 0 as lastpos */
-int X509_NAME_get_index_by_OBJ(X509_NAME *name, const ASN1_OBJECT *obj, int lastpos)
+int __cdecl X509_NAME_get_index_by_OBJ(X509_NAME *name, const ASN1_OBJECT *obj, int lastpos)
 {
     int n;
     X509_NAME_ENTRY *ne;
@@ -84,7 +84,7 @@ int X509_NAME_get_index_by_OBJ(X509_NAME *name, const ASN1_OBJECT *obj, int last
     return -1;
 }
 
-X509_NAME_ENTRY *X509_NAME_get_entry(const X509_NAME *name, int loc)
+X509_NAME_ENTRY * __cdecl X509_NAME_get_entry(const X509_NAME *name, int loc)
 {
     if (name == NULL || sk_X509_NAME_ENTRY_num(name->entries) <= loc
         || loc < 0)
@@ -93,7 +93,7 @@ X509_NAME_ENTRY *X509_NAME_get_entry(const X509_NAME *name, int loc)
     return sk_X509_NAME_ENTRY_value(name->entries, loc);
 }
 
-X509_NAME_ENTRY *X509_NAME_delete_entry(X509_NAME *name, int loc)
+X509_NAME_ENTRY * __cdecl X509_NAME_delete_entry(X509_NAME *name, int loc)
 {
     X509_NAME_ENTRY *ret;
     int i, n, set_prev, set_next;
@@ -133,7 +133,7 @@ X509_NAME_ENTRY *X509_NAME_delete_entry(X509_NAME *name, int loc)
     return ret;
 }
 
-int X509_NAME_add_entry_by_OBJ(X509_NAME *name, const ASN1_OBJECT *obj, int type,
+int __cdecl X509_NAME_add_entry_by_OBJ(X509_NAME *name, const ASN1_OBJECT *obj, int type,
                                const unsigned char *bytes, int len, int loc,
                                int set)
 {
@@ -148,7 +148,7 @@ int X509_NAME_add_entry_by_OBJ(X509_NAME *name, const ASN1_OBJECT *obj, int type
     return ret;
 }
 
-int X509_NAME_add_entry_by_NID(X509_NAME *name, int nid, int type,
+int __cdecl X509_NAME_add_entry_by_NID(X509_NAME *name, int nid, int type,
                                const unsigned char *bytes, int len, int loc,
                                int set)
 {
@@ -162,7 +162,7 @@ int X509_NAME_add_entry_by_NID(X509_NAME *name, int nid, int type,
     return ret;
 }
 
-int X509_NAME_add_entry_by_txt(X509_NAME *name, const char *field, int type,
+int __cdecl X509_NAME_add_entry_by_txt(X509_NAME *name, const char *field, int type,
                                const unsigned char *bytes, int len, int loc,
                                int set)
 {
@@ -180,7 +180,7 @@ int X509_NAME_add_entry_by_txt(X509_NAME *name, const char *field, int type,
  * if set is -1, append to previous set, 0 'a new one', and 1, prepend to the
  * guy we are about to stomp on.
  */
-int X509_NAME_add_entry(X509_NAME *name, const X509_NAME_ENTRY *ne, int loc,
+int __cdecl X509_NAME_add_entry(X509_NAME *name, const X509_NAME_ENTRY *ne, int loc,
                         int set)
 {
     X509_NAME_ENTRY *new_name = NULL;
@@ -238,7 +238,7 @@ int X509_NAME_add_entry(X509_NAME *name, const X509_NAME_ENTRY *ne, int loc,
     return 0;
 }
 
-X509_NAME_ENTRY *X509_NAME_ENTRY_create_by_txt(X509_NAME_ENTRY **ne,
+X509_NAME_ENTRY * __cdecl X509_NAME_ENTRY_create_by_txt(X509_NAME_ENTRY **ne,
                                                const char *field, int type,
                                                const unsigned char *bytes,
                                                int len)
@@ -258,7 +258,7 @@ X509_NAME_ENTRY *X509_NAME_ENTRY_create_by_txt(X509_NAME_ENTRY **ne,
     return nentry;
 }
 
-X509_NAME_ENTRY *X509_NAME_ENTRY_create_by_NID(X509_NAME_ENTRY **ne, int nid,
+X509_NAME_ENTRY * __cdecl X509_NAME_ENTRY_create_by_NID(X509_NAME_ENTRY **ne, int nid,
                                                int type,
                                                const unsigned char *bytes,
                                                int len)
@@ -276,7 +276,7 @@ X509_NAME_ENTRY *X509_NAME_ENTRY_create_by_NID(X509_NAME_ENTRY **ne, int nid,
     return nentry;
 }
 
-X509_NAME_ENTRY *X509_NAME_ENTRY_create_by_OBJ(X509_NAME_ENTRY **ne,
+X509_NAME_ENTRY * __cdecl X509_NAME_ENTRY_create_by_OBJ(X509_NAME_ENTRY **ne,
                                                const ASN1_OBJECT *obj, int type,
                                                const unsigned char *bytes,
                                                int len)
@@ -303,7 +303,7 @@ X509_NAME_ENTRY *X509_NAME_ENTRY_create_by_OBJ(X509_NAME_ENTRY **ne,
     return NULL;
 }
 
-int X509_NAME_ENTRY_set_object(X509_NAME_ENTRY *ne, const ASN1_OBJECT *obj)
+int __cdecl X509_NAME_ENTRY_set_object(X509_NAME_ENTRY *ne, const ASN1_OBJECT *obj)
 {
     if ((ne == NULL) || (obj == NULL)) {
         X509err(X509_F_X509_NAME_ENTRY_SET_OBJECT,
@@ -315,7 +315,7 @@ int X509_NAME_ENTRY_set_object(X509_NAME_ENTRY *ne, const ASN1_OBJECT *obj)
     return ((ne->object == NULL) ? 0 : 1);
 }
 
-int X509_NAME_ENTRY_set_data(X509_NAME_ENTRY *ne, int type,
+int __cdecl X509_NAME_ENTRY_set_data(X509_NAME_ENTRY *ne, int type,
                              const unsigned char *bytes, int len)
 {
     int i;
@@ -340,21 +340,21 @@ int X509_NAME_ENTRY_set_data(X509_NAME_ENTRY *ne, int type,
     return 1;
 }
 
-ASN1_OBJECT *X509_NAME_ENTRY_get_object(const X509_NAME_ENTRY *ne)
+ASN1_OBJECT * __cdecl X509_NAME_ENTRY_get_object(const X509_NAME_ENTRY *ne)
 {
     if (ne == NULL)
         return NULL;
     return ne->object;
 }
 
-ASN1_STRING *X509_NAME_ENTRY_get_data(const X509_NAME_ENTRY *ne)
+ASN1_STRING * __cdecl X509_NAME_ENTRY_get_data(const X509_NAME_ENTRY *ne)
 {
     if (ne == NULL)
         return NULL;
     return ne->value;
 }
 
-int X509_NAME_ENTRY_set(const X509_NAME_ENTRY *ne)
+int __cdecl X509_NAME_ENTRY_set(const X509_NAME_ENTRY *ne)
 {
     return ne->set;
 }
diff --git a/crypto/x509/x509rset.c b/crypto/x509/x509rset.c
index e8921b82a8..8cdd49e9fe 100644
--- a/crypto/x509/x509rset.c
+++ b/crypto/x509/x509rset.c
@@ -15,7 +15,7 @@
 #include <openssl/x509.h>
 #include "internal/x509_int.h"
 
-int X509_REQ_set_version(X509_REQ *x, long version)
+int __cdecl X509_REQ_set_version(X509_REQ *x, long version)
 {
     if (x == NULL)
         return 0;
@@ -23,7 +23,7 @@ int X509_REQ_set_version(X509_REQ *x, long version)
     return ASN1_INTEGER_set(x->req_info.version, version);
 }
 
-int X509_REQ_set_subject_name(X509_REQ *x, X509_NAME *name)
+int __cdecl X509_REQ_set_subject_name(X509_REQ *x, X509_NAME *name)
 {
     if (x == NULL)
         return 0;
@@ -31,7 +31,7 @@ int X509_REQ_set_subject_name(X509_REQ *x, X509_NAME *name)
     return X509_NAME_set(&x->req_info.subject, name);
 }
 
-int X509_REQ_set_pubkey(X509_REQ *x, EVP_PKEY *pkey)
+int __cdecl X509_REQ_set_pubkey(X509_REQ *x, EVP_PKEY *pkey)
 {
     if (x == NULL)
         return 0;
diff --git a/crypto/x509/x509spki.c b/crypto/x509/x509spki.c
index fd8162af6d..1741684abf 100644
--- a/crypto/x509/x509spki.c
+++ b/crypto/x509/x509spki.c
@@ -11,14 +11,14 @@
 #include "internal/cryptlib.h"
 #include <openssl/x509.h>
 
-int NETSCAPE_SPKI_set_pubkey(NETSCAPE_SPKI *x, EVP_PKEY *pkey)
+int __cdecl NETSCAPE_SPKI_set_pubkey(NETSCAPE_SPKI *x, EVP_PKEY *pkey)
 {
     if ((x == NULL) || (x->spkac == NULL))
         return 0;
     return X509_PUBKEY_set(&(x->spkac->pubkey), pkey);
 }
 
-EVP_PKEY *NETSCAPE_SPKI_get_pubkey(NETSCAPE_SPKI *x)
+EVP_PKEY * __cdecl NETSCAPE_SPKI_get_pubkey(NETSCAPE_SPKI *x)
 {
     if ((x == NULL) || (x->spkac == NULL))
         return NULL;
@@ -27,7 +27,7 @@ EVP_PKEY *NETSCAPE_SPKI_get_pubkey(NETSCAPE_SPKI *x)
 
 /* Load a Netscape SPKI from a base64 encoded string */
 
-NETSCAPE_SPKI *NETSCAPE_SPKI_b64_decode(const char *str, int len)
+NETSCAPE_SPKI * __cdecl NETSCAPE_SPKI_b64_decode(const char *str, int len)
 {
     unsigned char *spki_der;
     const unsigned char *p;
@@ -53,7 +53,7 @@ NETSCAPE_SPKI *NETSCAPE_SPKI_b64_decode(const char *str, int len)
 
 /* Generate a base64 encoded string from an SPKI */
 
-char *NETSCAPE_SPKI_b64_encode(NETSCAPE_SPKI *spki)
+char * __cdecl NETSCAPE_SPKI_b64_encode(NETSCAPE_SPKI *spki)
 {
     unsigned char *der_spki, *p;
     char *b64_str;
diff --git a/crypto/x509/x509type.c b/crypto/x509/x509type.c
index 0e33b424be..5a60d47c15 100644
--- a/crypto/x509/x509type.c
+++ b/crypto/x509/x509type.c
@@ -13,7 +13,7 @@
 #include <openssl/objects.h>
 #include <openssl/x509.h>
 
-int X509_certificate_type(const X509 *x, const EVP_PKEY *pkey)
+int __cdecl X509_certificate_type(const X509 *x, const EVP_PKEY *pkey)
 {
     const EVP_PKEY *pk;
     int ret = 0, i;
diff --git a/crypto/x509/x_all.c b/crypto/x509/x_all.c
index 24e4114601..09ef572f27 100644
--- a/crypto/x509/x_all.c
+++ b/crypto/x509/x_all.c
@@ -19,7 +19,7 @@
 #include <openssl/dsa.h>
 #include <openssl/x509v3.h>
 
-int X509_verify(X509 *a, EVP_PKEY *r)
+int __cdecl X509_verify(X509 *a, EVP_PKEY *r)
 {
     if (X509_ALGOR_cmp(&a->sig_alg, &a->cert_info.signature))
         return 0;
@@ -27,19 +27,19 @@ int X509_verify(X509 *a, EVP_PKEY *r)
                              &a->signature, &a->cert_info, r));
 }
 
-int X509_REQ_verify(X509_REQ *a, EVP_PKEY *r)
+int __cdecl X509_REQ_verify(X509_REQ *a, EVP_PKEY *r)
 {
     return (ASN1_item_verify(ASN1_ITEM_rptr(X509_REQ_INFO),
                              &a->sig_alg, a->signature, &a->req_info, r));
 }
 
-int NETSCAPE_SPKI_verify(NETSCAPE_SPKI *a, EVP_PKEY *r)
+int __cdecl NETSCAPE_SPKI_verify(NETSCAPE_SPKI *a, EVP_PKEY *r)
 {
     return (ASN1_item_verify(ASN1_ITEM_rptr(NETSCAPE_SPKAC),
                              &a->sig_algor, a->signature, a->spkac, r));
 }
 
-int X509_sign(X509 *x, EVP_PKEY *pkey, const EVP_MD *md)
+int __cdecl X509_sign(X509 *x, EVP_PKEY *pkey, const EVP_MD *md)
 {
     x->cert_info.enc.modified = 1;
     return (ASN1_item_sign(ASN1_ITEM_rptr(X509_CINF), &x->cert_info.signature,
@@ -47,7 +47,7 @@ int X509_sign(X509 *x, EVP_PKEY *pkey, const EVP_MD *md)
                            md));
 }
 
-int X509_sign_ctx(X509 *x, EVP_MD_CTX *ctx)
+int __cdecl X509_sign_ctx(X509 *x, EVP_MD_CTX *ctx)
 {
     x->cert_info.enc.modified = 1;
     return ASN1_item_sign_ctx(ASN1_ITEM_rptr(X509_CINF),
@@ -56,34 +56,34 @@ int X509_sign_ctx(X509 *x, EVP_MD_CTX *ctx)
 }
 
 #ifndef OPENSSL_NO_OCSP
-int X509_http_nbio(OCSP_REQ_CTX *rctx, X509 **pcert)
+int __cdecl X509_http_nbio(OCSP_REQ_CTX *rctx, X509 **pcert)
 {
     return OCSP_REQ_CTX_nbio_d2i(rctx,
                                  (ASN1_VALUE **)pcert, ASN1_ITEM_rptr(X509));
 }
 #endif
 
-int X509_REQ_sign(X509_REQ *x, EVP_PKEY *pkey, const EVP_MD *md)
+int __cdecl X509_REQ_sign(X509_REQ *x, EVP_PKEY *pkey, const EVP_MD *md)
 {
     return (ASN1_item_sign(ASN1_ITEM_rptr(X509_REQ_INFO), &x->sig_alg, NULL,
                            x->signature, &x->req_info, pkey, md));
 }
 
-int X509_REQ_sign_ctx(X509_REQ *x, EVP_MD_CTX *ctx)
+int __cdecl X509_REQ_sign_ctx(X509_REQ *x, EVP_MD_CTX *ctx)
 {
     return ASN1_item_sign_ctx(ASN1_ITEM_rptr(X509_REQ_INFO),
                               &x->sig_alg, NULL, x->signature, &x->req_info,
                               ctx);
 }
 
-int X509_CRL_sign(X509_CRL *x, EVP_PKEY *pkey, const EVP_MD *md)
+int __cdecl X509_CRL_sign(X509_CRL *x, EVP_PKEY *pkey, const EVP_MD *md)
 {
     x->crl.enc.modified = 1;
     return (ASN1_item_sign(ASN1_ITEM_rptr(X509_CRL_INFO), &x->crl.sig_alg,
                            &x->sig_alg, &x->signature, &x->crl, pkey, md));
 }
 
-int X509_CRL_sign_ctx(X509_CRL *x, EVP_MD_CTX *ctx)
+int __cdecl X509_CRL_sign_ctx(X509_CRL *x, EVP_MD_CTX *ctx)
 {
     x->crl.enc.modified = 1;
     return ASN1_item_sign_ctx(ASN1_ITEM_rptr(X509_CRL_INFO),
@@ -92,7 +92,7 @@ int X509_CRL_sign_ctx(X509_CRL *x, EVP_MD_CTX *ctx)
 }
 
 #ifndef OPENSSL_NO_OCSP
-int X509_CRL_http_nbio(OCSP_REQ_CTX *rctx, X509_CRL **pcrl)
+int __cdecl X509_CRL_http_nbio(OCSP_REQ_CTX *rctx, X509_CRL **pcrl)
 {
     return OCSP_REQ_CTX_nbio_d2i(rctx,
                                  (ASN1_VALUE **)pcrl,
@@ -100,96 +100,96 @@ int X509_CRL_http_nbio(OCSP_REQ_CTX *rctx, X509_CRL **pcrl)
 }
 #endif
 
-int NETSCAPE_SPKI_sign(NETSCAPE_SPKI *x, EVP_PKEY *pkey, const EVP_MD *md)
+int __cdecl NETSCAPE_SPKI_sign(NETSCAPE_SPKI *x, EVP_PKEY *pkey, const EVP_MD *md)
 {
     return (ASN1_item_sign(ASN1_ITEM_rptr(NETSCAPE_SPKAC), &x->sig_algor, NULL,
                            x->signature, x->spkac, pkey, md));
 }
 
 #ifndef OPENSSL_NO_STDIO
-X509 *d2i_X509_fp(FILE *fp, X509 **x509)
+X509 * __cdecl d2i_X509_fp(FILE *fp, X509 **x509)
 {
     return ASN1_item_d2i_fp(ASN1_ITEM_rptr(X509), fp, x509);
 }
 
-int i2d_X509_fp(FILE *fp, X509 *x509)
+int __cdecl i2d_X509_fp(FILE *fp, X509 *x509)
 {
     return ASN1_item_i2d_fp(ASN1_ITEM_rptr(X509), fp, x509);
 }
 #endif
 
-X509 *d2i_X509_bio(BIO *bp, X509 **x509)
+X509 * __cdecl d2i_X509_bio(BIO *bp, X509 **x509)
 {
     return ASN1_item_d2i_bio(ASN1_ITEM_rptr(X509), bp, x509);
 }
 
-int i2d_X509_bio(BIO *bp, X509 *x509)
+int __cdecl i2d_X509_bio(BIO *bp, X509 *x509)
 {
     return ASN1_item_i2d_bio(ASN1_ITEM_rptr(X509), bp, x509);
 }
 
 #ifndef OPENSSL_NO_STDIO
-X509_CRL *d2i_X509_CRL_fp(FILE *fp, X509_CRL **crl)
+X509_CRL * __cdecl d2i_X509_CRL_fp(FILE *fp, X509_CRL **crl)
 {
     return ASN1_item_d2i_fp(ASN1_ITEM_rptr(X509_CRL), fp, crl);
 }
 
-int i2d_X509_CRL_fp(FILE *fp, X509_CRL *crl)
+int __cdecl i2d_X509_CRL_fp(FILE *fp, X509_CRL *crl)
 {
     return ASN1_item_i2d_fp(ASN1_ITEM_rptr(X509_CRL), fp, crl);
 }
 #endif
 
-X509_CRL *d2i_X509_CRL_bio(BIO *bp, X509_CRL **crl)
+X509_CRL * __cdecl d2i_X509_CRL_bio(BIO *bp, X509_CRL **crl)
 {
     return ASN1_item_d2i_bio(ASN1_ITEM_rptr(X509_CRL), bp, crl);
 }
 
-int i2d_X509_CRL_bio(BIO *bp, X509_CRL *crl)
+int __cdecl i2d_X509_CRL_bio(BIO *bp, X509_CRL *crl)
 {
     return ASN1_item_i2d_bio(ASN1_ITEM_rptr(X509_CRL), bp, crl);
 }
 
 #ifndef OPENSSL_NO_STDIO
-PKCS7 *d2i_PKCS7_fp(FILE *fp, PKCS7 **p7)
+PKCS7 * __cdecl d2i_PKCS7_fp(FILE *fp, PKCS7 **p7)
 {
     return ASN1_item_d2i_fp(ASN1_ITEM_rptr(PKCS7), fp, p7);
 }
 
-int i2d_PKCS7_fp(FILE *fp, PKCS7 *p7)
+int __cdecl i2d_PKCS7_fp(FILE *fp, PKCS7 *p7)
 {
     return ASN1_item_i2d_fp(ASN1_ITEM_rptr(PKCS7), fp, p7);
 }
 #endif
 
-PKCS7 *d2i_PKCS7_bio(BIO *bp, PKCS7 **p7)
+PKCS7 * __cdecl d2i_PKCS7_bio(BIO *bp, PKCS7 **p7)
 {
     return ASN1_item_d2i_bio(ASN1_ITEM_rptr(PKCS7), bp, p7);
 }
 
-int i2d_PKCS7_bio(BIO *bp, PKCS7 *p7)
+int __cdecl i2d_PKCS7_bio(BIO *bp, PKCS7 *p7)
 {
     return ASN1_item_i2d_bio(ASN1_ITEM_rptr(PKCS7), bp, p7);
 }
 
 #ifndef OPENSSL_NO_STDIO
-X509_REQ *d2i_X509_REQ_fp(FILE *fp, X509_REQ **req)
+X509_REQ * __cdecl d2i_X509_REQ_fp(FILE *fp, X509_REQ **req)
 {
     return ASN1_item_d2i_fp(ASN1_ITEM_rptr(X509_REQ), fp, req);
 }
 
-int i2d_X509_REQ_fp(FILE *fp, X509_REQ *req)
+int __cdecl i2d_X509_REQ_fp(FILE *fp, X509_REQ *req)
 {
     return ASN1_item_i2d_fp(ASN1_ITEM_rptr(X509_REQ), fp, req);
 }
 #endif
 
-X509_REQ *d2i_X509_REQ_bio(BIO *bp, X509_REQ **req)
+X509_REQ * __cdecl d2i_X509_REQ_bio(BIO *bp, X509_REQ **req)
 {
     return ASN1_item_d2i_bio(ASN1_ITEM_rptr(X509_REQ), bp, req);
 }
 
-int i2d_X509_REQ_bio(BIO *bp, X509_REQ *req)
+int __cdecl i2d_X509_REQ_bio(BIO *bp, X509_REQ *req)
 {
     return ASN1_item_i2d_bio(ASN1_ITEM_rptr(X509_REQ), bp, req);
 }
@@ -197,65 +197,65 @@ int i2d_X509_REQ_bio(BIO *bp, X509_REQ *req)
 #ifndef OPENSSL_NO_RSA
 
 # ifndef OPENSSL_NO_STDIO
-RSA *d2i_RSAPrivateKey_fp(FILE *fp, RSA **rsa)
+RSA * __cdecl d2i_RSAPrivateKey_fp(FILE *fp, RSA **rsa)
 {
     return ASN1_item_d2i_fp(ASN1_ITEM_rptr(RSAPrivateKey), fp, rsa);
 }
 
-int i2d_RSAPrivateKey_fp(FILE *fp, RSA *rsa)
+int __cdecl i2d_RSAPrivateKey_fp(FILE *fp, RSA *rsa)
 {
     return ASN1_item_i2d_fp(ASN1_ITEM_rptr(RSAPrivateKey), fp, rsa);
 }
 
-RSA *d2i_RSAPublicKey_fp(FILE *fp, RSA **rsa)
+RSA * __cdecl d2i_RSAPublicKey_fp(FILE *fp, RSA **rsa)
 {
     return ASN1_item_d2i_fp(ASN1_ITEM_rptr(RSAPublicKey), fp, rsa);
 }
 
-RSA *d2i_RSA_PUBKEY_fp(FILE *fp, RSA **rsa)
+RSA * __cdecl d2i_RSA_PUBKEY_fp(FILE *fp, RSA **rsa)
 {
-    return ASN1_d2i_fp((void *(*)(void))
+    return ASN1_d2i_fp((void *(__cdecl *)(void))
                        RSA_new, (D2I_OF(void)) d2i_RSA_PUBKEY, fp,
                        (void **)rsa);
 }
 
-int i2d_RSAPublicKey_fp(FILE *fp, RSA *rsa)
+int __cdecl i2d_RSAPublicKey_fp(FILE *fp, RSA *rsa)
 {
     return ASN1_item_i2d_fp(ASN1_ITEM_rptr(RSAPublicKey), fp, rsa);
 }
 
-int i2d_RSA_PUBKEY_fp(FILE *fp, RSA *rsa)
+int __cdecl i2d_RSA_PUBKEY_fp(FILE *fp, RSA *rsa)
 {
     return ASN1_i2d_fp((I2D_OF(void))i2d_RSA_PUBKEY, fp, rsa);
 }
 # endif
 
-RSA *d2i_RSAPrivateKey_bio(BIO *bp, RSA **rsa)
+RSA * __cdecl d2i_RSAPrivateKey_bio(BIO *bp, RSA **rsa)
 {
     return ASN1_item_d2i_bio(ASN1_ITEM_rptr(RSAPrivateKey), bp, rsa);
 }
 
-int i2d_RSAPrivateKey_bio(BIO *bp, RSA *rsa)
+int __cdecl i2d_RSAPrivateKey_bio(BIO *bp, RSA *rsa)
 {
     return ASN1_item_i2d_bio(ASN1_ITEM_rptr(RSAPrivateKey), bp, rsa);
 }
 
-RSA *d2i_RSAPublicKey_bio(BIO *bp, RSA **rsa)
+RSA * __cdecl d2i_RSAPublicKey_bio(BIO *bp, RSA **rsa)
 {
     return ASN1_item_d2i_bio(ASN1_ITEM_rptr(RSAPublicKey), bp, rsa);
 }
 
-RSA *d2i_RSA_PUBKEY_bio(BIO *bp, RSA **rsa)
+RSA * __cdecl d2i_RSA_PUBKEY_bio(BIO *bp, RSA **rsa)
 {
     return ASN1_d2i_bio_of(RSA, RSA_new, d2i_RSA_PUBKEY, bp, rsa);
 }
 
-int i2d_RSAPublicKey_bio(BIO *bp, RSA *rsa)
+int __cdecl i2d_RSAPublicKey_bio(BIO *bp, RSA *rsa)
 {
     return ASN1_item_i2d_bio(ASN1_ITEM_rptr(RSAPublicKey), bp, rsa);
 }
 
-int i2d_RSA_PUBKEY_bio(BIO *bp, RSA *rsa)
+int __cdecl i2d_RSA_PUBKEY_bio(BIO *bp, RSA *rsa)
 {
     return ASN1_i2d_bio_of(RSA, i2d_RSA_PUBKEY, bp, rsa);
 }
@@ -263,43 +263,43 @@ int i2d_RSA_PUBKEY_bio(BIO *bp, RSA *rsa)
 
 #ifndef OPENSSL_NO_DSA
 # ifndef OPENSSL_NO_STDIO
-DSA *d2i_DSAPrivateKey_fp(FILE *fp, DSA **dsa)
+DSA * __cdecl d2i_DSAPrivateKey_fp(FILE *fp, DSA **dsa)
 {
     return ASN1_d2i_fp_of(DSA, DSA_new, d2i_DSAPrivateKey, fp, dsa);
 }
 
-int i2d_DSAPrivateKey_fp(FILE *fp, DSA *dsa)
+int __cdecl i2d_DSAPrivateKey_fp(FILE *fp, DSA *dsa)
 {
     return ASN1_i2d_fp_of_const(DSA, i2d_DSAPrivateKey, fp, dsa);
 }
 
-DSA *d2i_DSA_PUBKEY_fp(FILE *fp, DSA **dsa)
+DSA * __cdecl d2i_DSA_PUBKEY_fp(FILE *fp, DSA **dsa)
 {
     return ASN1_d2i_fp_of(DSA, DSA_new, d2i_DSA_PUBKEY, fp, dsa);
 }
 
-int i2d_DSA_PUBKEY_fp(FILE *fp, DSA *dsa)
+int __cdecl i2d_DSA_PUBKEY_fp(FILE *fp, DSA *dsa)
 {
     return ASN1_i2d_fp_of(DSA, i2d_DSA_PUBKEY, fp, dsa);
 }
 # endif
 
-DSA *d2i_DSAPrivateKey_bio(BIO *bp, DSA **dsa)
+DSA * __cdecl d2i_DSAPrivateKey_bio(BIO *bp, DSA **dsa)
 {
     return ASN1_d2i_bio_of(DSA, DSA_new, d2i_DSAPrivateKey, bp, dsa);
 }
 
-int i2d_DSAPrivateKey_bio(BIO *bp, DSA *dsa)
+int __cdecl i2d_DSAPrivateKey_bio(BIO *bp, DSA *dsa)
 {
     return ASN1_i2d_bio_of_const(DSA, i2d_DSAPrivateKey, bp, dsa);
 }
 
-DSA *d2i_DSA_PUBKEY_bio(BIO *bp, DSA **dsa)
+DSA * __cdecl d2i_DSA_PUBKEY_bio(BIO *bp, DSA **dsa)
 {
     return ASN1_d2i_bio_of(DSA, DSA_new, d2i_DSA_PUBKEY, bp, dsa);
 }
 
-int i2d_DSA_PUBKEY_bio(BIO *bp, DSA *dsa)
+int __cdecl i2d_DSA_PUBKEY_bio(BIO *bp, DSA *dsa)
 {
     return ASN1_i2d_bio_of(DSA, i2d_DSA_PUBKEY, bp, dsa);
 }
@@ -308,48 +308,48 @@ int i2d_DSA_PUBKEY_bio(BIO *bp, DSA *dsa)
 
 #ifndef OPENSSL_NO_EC
 # ifndef OPENSSL_NO_STDIO
-EC_KEY *d2i_EC_PUBKEY_fp(FILE *fp, EC_KEY **eckey)
+EC_KEY * __cdecl d2i_EC_PUBKEY_fp(FILE *fp, EC_KEY **eckey)
 {
     return ASN1_d2i_fp_of(EC_KEY, EC_KEY_new, d2i_EC_PUBKEY, fp, eckey);
 }
 
-int i2d_EC_PUBKEY_fp(FILE *fp, EC_KEY *eckey)
+int __cdecl i2d_EC_PUBKEY_fp(FILE *fp, EC_KEY *eckey)
 {
     return ASN1_i2d_fp_of(EC_KEY, i2d_EC_PUBKEY, fp, eckey);
 }
 
-EC_KEY *d2i_ECPrivateKey_fp(FILE *fp, EC_KEY **eckey)
+EC_KEY * __cdecl d2i_ECPrivateKey_fp(FILE *fp, EC_KEY **eckey)
 {
     return ASN1_d2i_fp_of(EC_KEY, EC_KEY_new, d2i_ECPrivateKey, fp, eckey);
 }
 
-int i2d_ECPrivateKey_fp(FILE *fp, EC_KEY *eckey)
+int __cdecl i2d_ECPrivateKey_fp(FILE *fp, EC_KEY *eckey)
 {
     return ASN1_i2d_fp_of(EC_KEY, i2d_ECPrivateKey, fp, eckey);
 }
 # endif
-EC_KEY *d2i_EC_PUBKEY_bio(BIO *bp, EC_KEY **eckey)
+EC_KEY * __cdecl d2i_EC_PUBKEY_bio(BIO *bp, EC_KEY **eckey)
 {
     return ASN1_d2i_bio_of(EC_KEY, EC_KEY_new, d2i_EC_PUBKEY, bp, eckey);
 }
 
-int i2d_EC_PUBKEY_bio(BIO *bp, EC_KEY *ecdsa)
+int __cdecl i2d_EC_PUBKEY_bio(BIO *bp, EC_KEY *ecdsa)
 {
     return ASN1_i2d_bio_of(EC_KEY, i2d_EC_PUBKEY, bp, ecdsa);
 }
 
-EC_KEY *d2i_ECPrivateKey_bio(BIO *bp, EC_KEY **eckey)
+EC_KEY * __cdecl d2i_ECPrivateKey_bio(BIO *bp, EC_KEY **eckey)
 {
     return ASN1_d2i_bio_of(EC_KEY, EC_KEY_new, d2i_ECPrivateKey, bp, eckey);
 }
 
-int i2d_ECPrivateKey_bio(BIO *bp, EC_KEY *eckey)
+int __cdecl i2d_ECPrivateKey_bio(BIO *bp, EC_KEY *eckey)
 {
     return ASN1_i2d_bio_of(EC_KEY, i2d_ECPrivateKey, bp, eckey);
 }
 #endif
 
-int X509_pubkey_digest(const X509 *data, const EVP_MD *type,
+int __cdecl X509_pubkey_digest(const X509 *data, const EVP_MD *type,
                        unsigned char *md, unsigned int *len)
 {
     ASN1_BIT_STRING *key;
@@ -359,7 +359,7 @@ int X509_pubkey_digest(const X509 *data, const EVP_MD *type,
     return EVP_Digest(key->data, key->length, md, len, type, NULL);
 }
 
-int X509_digest(const X509 *data, const EVP_MD *type, unsigned char *md,
+int __cdecl X509_digest(const X509 *data, const EVP_MD *type, unsigned char *md,
                 unsigned int *len)
 {
     if (type == EVP_sha1() && (data->ex_flags & EXFLAG_SET) != 0) {
@@ -373,7 +373,7 @@ int X509_digest(const X509 *data, const EVP_MD *type, unsigned char *md,
             (ASN1_ITEM_rptr(X509), type, (char *)data, md, len));
 }
 
-int X509_CRL_digest(const X509_CRL *data, const EVP_MD *type,
+int __cdecl X509_CRL_digest(const X509_CRL *data, const EVP_MD *type,
                     unsigned char *md, unsigned int *len)
 {
     if (type == EVP_sha1() && (data->flags & EXFLAG_SET) != 0) {
@@ -387,21 +387,21 @@ int X509_CRL_digest(const X509_CRL *data, const EVP_MD *type,
             (ASN1_ITEM_rptr(X509_CRL), type, (char *)data, md, len));
 }
 
-int X509_REQ_digest(const X509_REQ *data, const EVP_MD *type,
+int __cdecl X509_REQ_digest(const X509_REQ *data, const EVP_MD *type,
                     unsigned char *md, unsigned int *len)
 {
     return (ASN1_item_digest
             (ASN1_ITEM_rptr(X509_REQ), type, (char *)data, md, len));
 }
 
-int X509_NAME_digest(const X509_NAME *data, const EVP_MD *type,
+int __cdecl X509_NAME_digest(const X509_NAME *data, const EVP_MD *type,
                      unsigned char *md, unsigned int *len)
 {
     return (ASN1_item_digest
             (ASN1_ITEM_rptr(X509_NAME), type, (char *)data, md, len));
 }
 
-int PKCS7_ISSUER_AND_SERIAL_digest(PKCS7_ISSUER_AND_SERIAL *data,
+int __cdecl PKCS7_ISSUER_AND_SERIAL_digest(PKCS7_ISSUER_AND_SERIAL *data,
                                    const EVP_MD *type, unsigned char *md,
                                    unsigned int *len)
 {
@@ -410,42 +410,42 @@ int PKCS7_ISSUER_AND_SERIAL_digest(PKCS7_ISSUER_AND_SERIAL *data,
 }
 
 #ifndef OPENSSL_NO_STDIO
-X509_SIG *d2i_PKCS8_fp(FILE *fp, X509_SIG **p8)
+X509_SIG * __cdecl d2i_PKCS8_fp(FILE *fp, X509_SIG **p8)
 {
     return ASN1_d2i_fp_of(X509_SIG, X509_SIG_new, d2i_X509_SIG, fp, p8);
 }
 
-int i2d_PKCS8_fp(FILE *fp, X509_SIG *p8)
+int __cdecl i2d_PKCS8_fp(FILE *fp, X509_SIG *p8)
 {
     return ASN1_i2d_fp_of(X509_SIG, i2d_X509_SIG, fp, p8);
 }
 #endif
 
-X509_SIG *d2i_PKCS8_bio(BIO *bp, X509_SIG **p8)
+X509_SIG * __cdecl d2i_PKCS8_bio(BIO *bp, X509_SIG **p8)
 {
     return ASN1_d2i_bio_of(X509_SIG, X509_SIG_new, d2i_X509_SIG, bp, p8);
 }
 
-int i2d_PKCS8_bio(BIO *bp, X509_SIG *p8)
+int __cdecl i2d_PKCS8_bio(BIO *bp, X509_SIG *p8)
 {
     return ASN1_i2d_bio_of(X509_SIG, i2d_X509_SIG, bp, p8);
 }
 
 #ifndef OPENSSL_NO_STDIO
-PKCS8_PRIV_KEY_INFO *d2i_PKCS8_PRIV_KEY_INFO_fp(FILE *fp,
+PKCS8_PRIV_KEY_INFO * __cdecl d2i_PKCS8_PRIV_KEY_INFO_fp(FILE *fp,
                                                 PKCS8_PRIV_KEY_INFO **p8inf)
 {
     return ASN1_d2i_fp_of(PKCS8_PRIV_KEY_INFO, PKCS8_PRIV_KEY_INFO_new,
                           d2i_PKCS8_PRIV_KEY_INFO, fp, p8inf);
 }
 
-int i2d_PKCS8_PRIV_KEY_INFO_fp(FILE *fp, PKCS8_PRIV_KEY_INFO *p8inf)
+int __cdecl i2d_PKCS8_PRIV_KEY_INFO_fp(FILE *fp, PKCS8_PRIV_KEY_INFO *p8inf)
 {
     return ASN1_i2d_fp_of(PKCS8_PRIV_KEY_INFO, i2d_PKCS8_PRIV_KEY_INFO, fp,
                           p8inf);
 }
 
-int i2d_PKCS8PrivateKeyInfo_fp(FILE *fp, EVP_PKEY *key)
+int __cdecl i2d_PKCS8PrivateKeyInfo_fp(FILE *fp, EVP_PKEY *key)
 {
     PKCS8_PRIV_KEY_INFO *p8inf;
     int ret;
@@ -457,42 +457,42 @@ int i2d_PKCS8PrivateKeyInfo_fp(FILE *fp, EVP_PKEY *key)
     return ret;
 }
 
-int i2d_PrivateKey_fp(FILE *fp, EVP_PKEY *pkey)
+int __cdecl i2d_PrivateKey_fp(FILE *fp, EVP_PKEY *pkey)
 {
     return ASN1_i2d_fp_of(EVP_PKEY, i2d_PrivateKey, fp, pkey);
 }
 
-EVP_PKEY *d2i_PrivateKey_fp(FILE *fp, EVP_PKEY **a)
+EVP_PKEY * __cdecl d2i_PrivateKey_fp(FILE *fp, EVP_PKEY **a)
 {
     return ASN1_d2i_fp_of(EVP_PKEY, EVP_PKEY_new, d2i_AutoPrivateKey, fp, a);
 }
 
-int i2d_PUBKEY_fp(FILE *fp, EVP_PKEY *pkey)
+int __cdecl i2d_PUBKEY_fp(FILE *fp, EVP_PKEY *pkey)
 {
     return ASN1_i2d_fp_of(EVP_PKEY, i2d_PUBKEY, fp, pkey);
 }
 
-EVP_PKEY *d2i_PUBKEY_fp(FILE *fp, EVP_PKEY **a)
+EVP_PKEY * __cdecl d2i_PUBKEY_fp(FILE *fp, EVP_PKEY **a)
 {
     return ASN1_d2i_fp_of(EVP_PKEY, EVP_PKEY_new, d2i_PUBKEY, fp, a);
 }
 
 #endif
 
-PKCS8_PRIV_KEY_INFO *d2i_PKCS8_PRIV_KEY_INFO_bio(BIO *bp,
+PKCS8_PRIV_KEY_INFO * __cdecl d2i_PKCS8_PRIV_KEY_INFO_bio(BIO *bp,
                                                  PKCS8_PRIV_KEY_INFO **p8inf)
 {
     return ASN1_d2i_bio_of(PKCS8_PRIV_KEY_INFO, PKCS8_PRIV_KEY_INFO_new,
                            d2i_PKCS8_PRIV_KEY_INFO, bp, p8inf);
 }
 
-int i2d_PKCS8_PRIV_KEY_INFO_bio(BIO *bp, PKCS8_PRIV_KEY_INFO *p8inf)
+int __cdecl i2d_PKCS8_PRIV_KEY_INFO_bio(BIO *bp, PKCS8_PRIV_KEY_INFO *p8inf)
 {
     return ASN1_i2d_bio_of(PKCS8_PRIV_KEY_INFO, i2d_PKCS8_PRIV_KEY_INFO, bp,
                            p8inf);
 }
 
-int i2d_PKCS8PrivateKeyInfo_bio(BIO *bp, EVP_PKEY *key)
+int __cdecl i2d_PKCS8PrivateKeyInfo_bio(BIO *bp, EVP_PKEY *key)
 {
     PKCS8_PRIV_KEY_INFO *p8inf;
     int ret;
@@ -504,22 +504,22 @@ int i2d_PKCS8PrivateKeyInfo_bio(BIO *bp, EVP_PKEY *key)
     return ret;
 }
 
-int i2d_PrivateKey_bio(BIO *bp, EVP_PKEY *pkey)
+int __cdecl i2d_PrivateKey_bio(BIO *bp, EVP_PKEY *pkey)
 {
     return ASN1_i2d_bio_of(EVP_PKEY, i2d_PrivateKey, bp, pkey);
 }
 
-EVP_PKEY *d2i_PrivateKey_bio(BIO *bp, EVP_PKEY **a)
+EVP_PKEY * __cdecl d2i_PrivateKey_bio(BIO *bp, EVP_PKEY **a)
 {
     return ASN1_d2i_bio_of(EVP_PKEY, EVP_PKEY_new, d2i_AutoPrivateKey, bp, a);
 }
 
-int i2d_PUBKEY_bio(BIO *bp, EVP_PKEY *pkey)
+int __cdecl i2d_PUBKEY_bio(BIO *bp, EVP_PKEY *pkey)
 {
     return ASN1_i2d_bio_of(EVP_PKEY, i2d_PUBKEY, bp, pkey);
 }
 
-EVP_PKEY *d2i_PUBKEY_bio(BIO *bp, EVP_PKEY **a)
+EVP_PKEY * __cdecl d2i_PUBKEY_bio(BIO *bp, EVP_PKEY **a)
 {
     return ASN1_d2i_bio_of(EVP_PKEY, EVP_PKEY_new, d2i_PUBKEY, bp, a);
 }
diff --git a/crypto/x509/x_attrib.c b/crypto/x509/x_attrib.c
index 9a41e547cb..420de628e6 100644
--- a/crypto/x509/x_attrib.c
+++ b/crypto/x509/x_attrib.c
@@ -33,7 +33,7 @@ ASN1_SEQUENCE(X509_ATTRIBUTE) = {
 IMPLEMENT_ASN1_FUNCTIONS(X509_ATTRIBUTE)
 IMPLEMENT_ASN1_DUP_FUNCTION(X509_ATTRIBUTE)
 
-X509_ATTRIBUTE *X509_ATTRIBUTE_create(int nid, int atrtype, void *value)
+X509_ATTRIBUTE * __cdecl X509_ATTRIBUTE_create(int nid, int atrtype, void *value)
 {
     X509_ATTRIBUTE *ret = NULL;
     ASN1_TYPE *val = NULL;
diff --git a/crypto/x509/x_crl.c b/crypto/x509/x_crl.c
index 12ab3cca42..325944b810 100644
--- a/crypto/x509/x_crl.c
+++ b/crypto/x509/x_crl.c
@@ -15,7 +15,7 @@
 #include <openssl/x509v3.h>
 #include "x509_lcl.h"
 
-static int X509_REVOKED_cmp(const X509_REVOKED *const *a,
+static int __cdecl X509_REVOKED_cmp(const X509_REVOKED *const *a,
                             const X509_REVOKED *const *b);
 static void setup_idp(X509_CRL *crl, ISSUING_DIST_POINT *idp);
 
@@ -311,14 +311,14 @@ IMPLEMENT_ASN1_FUNCTIONS(X509_CRL)
 
 IMPLEMENT_ASN1_DUP_FUNCTION(X509_CRL)
 
-static int X509_REVOKED_cmp(const X509_REVOKED *const *a,
+static int __cdecl X509_REVOKED_cmp(const X509_REVOKED *const *a,
                             const X509_REVOKED *const *b)
 {
     return (ASN1_STRING_cmp((ASN1_STRING *)&(*a)->serialNumber,
                             (ASN1_STRING *)&(*b)->serialNumber));
 }
 
-int X509_CRL_add0_revoked(X509_CRL *crl, X509_REVOKED *rev)
+int __cdecl X509_CRL_add0_revoked(X509_CRL *crl, X509_REVOKED *rev)
 {
     X509_CRL_INFO *inf;
 
@@ -333,14 +333,14 @@ int X509_CRL_add0_revoked(X509_CRL *crl, X509_REVOKED *rev)
     return 1;
 }
 
-int X509_CRL_verify(X509_CRL *crl, EVP_PKEY *r)
+int __cdecl X509_CRL_verify(X509_CRL *crl, EVP_PKEY *r)
 {
     if (crl->meth->crl_verify)
         return crl->meth->crl_verify(crl, r);
     return 0;
 }
 
-int X509_CRL_get0_by_serial(X509_CRL *crl,
+int __cdecl X509_CRL_get0_by_serial(X509_CRL *crl,
                             X509_REVOKED **ret, ASN1_INTEGER *serial)
 {
     if (crl->meth->crl_lookup)
@@ -348,7 +348,7 @@ int X509_CRL_get0_by_serial(X509_CRL *crl,
     return 0;
 }
 
-int X509_CRL_get0_by_cert(X509_CRL *crl, X509_REVOKED **ret, X509 *x)
+int __cdecl X509_CRL_get0_by_cert(X509_CRL *crl, X509_REVOKED **ret, X509 *x)
 {
     if (crl->meth->crl_lookup)
         return crl->meth->crl_lookup(crl, ret,
@@ -429,7 +429,7 @@ static int def_crl_lookup(X509_CRL *crl,
     return 0;
 }
 
-void X509_CRL_set_default_method(const X509_CRL_METHOD *meth)
+void __cdecl X509_CRL_set_default_method(const X509_CRL_METHOD *meth)
 {
     if (meth == NULL)
         default_crl_method = &int_crl_meth;
@@ -437,7 +437,7 @@ void X509_CRL_set_default_method(const X509_CRL_METHOD *meth)
         default_crl_method = meth;
 }
 
-X509_CRL_METHOD *X509_CRL_METHOD_new(int (*crl_init) (X509_CRL *crl),
+X509_CRL_METHOD * __cdecl X509_CRL_METHOD_new(int (*crl_init) (X509_CRL *crl),
                                      int (*crl_free) (X509_CRL *crl),
                                      int (*crl_lookup) (X509_CRL *crl,
                                                         X509_REVOKED **ret,
@@ -460,19 +460,19 @@ X509_CRL_METHOD *X509_CRL_METHOD_new(int (*crl_init) (X509_CRL *crl),
     return m;
 }
 
-void X509_CRL_METHOD_free(X509_CRL_METHOD *m)
+void __cdecl X509_CRL_METHOD_free(X509_CRL_METHOD *m)
 {
     if (m == NULL || !(m->flags & X509_CRL_METHOD_DYNAMIC))
         return;
     OPENSSL_free(m);
 }
 
-void X509_CRL_set_meth_data(X509_CRL *crl, void *dat)
+void __cdecl X509_CRL_set_meth_data(X509_CRL *crl, void *dat)
 {
     crl->meth_data = dat;
 }
 
-void *X509_CRL_get_meth_data(X509_CRL *crl)
+void * __cdecl X509_CRL_get_meth_data(X509_CRL *crl)
 {
     return crl->meth_data;
 }
diff --git a/crypto/x509/x_name.c b/crypto/x509/x_name.c
index a1e9bbdb66..bb2415f2ec 100644
--- a/crypto/x509/x_name.c
+++ b/crypto/x509/x_name.c
@@ -125,12 +125,12 @@ static void x509_name_ex_free(ASN1_VALUE **pval, const ASN1_ITEM *it)
     *pval = NULL;
 }
 
-static void local_sk_X509_NAME_ENTRY_free(STACK_OF(X509_NAME_ENTRY) *ne)
+static void __cdecl local_sk_X509_NAME_ENTRY_free(STACK_OF(X509_NAME_ENTRY) *ne)
 {
     sk_X509_NAME_ENTRY_free(ne);
 }
 
-static void local_sk_X509_NAME_ENTRY_pop_free(STACK_OF(X509_NAME_ENTRY) *ne)
+static void __cdecl local_sk_X509_NAME_ENTRY_pop_free(STACK_OF(X509_NAME_ENTRY) *ne)
 {
     sk_X509_NAME_ENTRY_pop_free(ne, X509_NAME_ENTRY_free);
 }
@@ -479,7 +479,7 @@ static int i2d_name_canon(STACK_OF(STACK_OF_X509_NAME_ENTRY) * _intname,
     return len;
 }
 
-int X509_NAME_set(X509_NAME **xn, X509_NAME *name)
+int __cdecl X509_NAME_set(X509_NAME **xn, X509_NAME *name)
 {
     if (*xn == name)
         return *xn != NULL;
@@ -490,7 +490,7 @@ int X509_NAME_set(X509_NAME **xn, X509_NAME *name)
     return 1;
 }
 
-int X509_NAME_print(BIO *bp, const X509_NAME *name, int obase)
+int __cdecl X509_NAME_print(BIO *bp, const X509_NAME *name, int obase)
 {
     char *s, *c, *b;
     int l, i;
@@ -537,7 +537,7 @@ int X509_NAME_print(BIO *bp, const X509_NAME *name, int obase)
     return 0;
 }
 
-int X509_NAME_get0_der(X509_NAME *nm, const unsigned char **pder,
+int __cdecl X509_NAME_get0_der(X509_NAME *nm, const unsigned char **pder,
                        size_t *pderlen)
 {
     /* Make sure encoding is valid */
diff --git a/crypto/x509/x_pubkey.c b/crypto/x509/x_pubkey.c
index 1c87b8268e..38e6e2223e 100644
--- a/crypto/x509/x_pubkey.c
+++ b/crypto/x509/x_pubkey.c
@@ -57,7 +57,7 @@ ASN1_SEQUENCE_cb(X509_PUBKEY, pubkey_cb) = {
 
 IMPLEMENT_ASN1_FUNCTIONS(X509_PUBKEY)
 
-int X509_PUBKEY_set(X509_PUBKEY **x, EVP_PKEY *pkey)
+int __cdecl X509_PUBKEY_set(X509_PUBKEY **x, EVP_PKEY *pkey)
 {
     X509_PUBKEY *pk = NULL;
 
@@ -138,7 +138,7 @@ static int x509_pubkey_decode(EVP_PKEY **ppkey, X509_PUBKEY *key)
     return 0;
 }
 
-EVP_PKEY *X509_PUBKEY_get0(X509_PUBKEY *key)
+EVP_PKEY * __cdecl X509_PUBKEY_get0(X509_PUBKEY *key)
 {
     EVP_PKEY *ret = NULL;
 
@@ -166,7 +166,7 @@ EVP_PKEY *X509_PUBKEY_get0(X509_PUBKEY *key)
     return NULL;
 }
 
-EVP_PKEY *X509_PUBKEY_get(X509_PUBKEY *key)
+EVP_PKEY * __cdecl X509_PUBKEY_get(X509_PUBKEY *key)
 {
     EVP_PKEY *ret = X509_PUBKEY_get0(key);
     if (ret != NULL)
@@ -179,7 +179,7 @@ EVP_PKEY *X509_PUBKEY_get(X509_PUBKEY *key)
  * decode as X509_PUBKEY
  */
 
-EVP_PKEY *d2i_PUBKEY(EVP_PKEY **a, const unsigned char **pp, long length)
+EVP_PKEY * __cdecl d2i_PUBKEY(EVP_PKEY **a, const unsigned char **pp, long length)
 {
     X509_PUBKEY *xpk;
     EVP_PKEY *pktmp;
@@ -200,7 +200,7 @@ EVP_PKEY *d2i_PUBKEY(EVP_PKEY **a, const unsigned char **pp, long length)
     return pktmp;
 }
 
-int i2d_PUBKEY(EVP_PKEY *a, unsigned char **pp)
+int __cdecl i2d_PUBKEY(EVP_PKEY *a, unsigned char **pp)
 {
     X509_PUBKEY *xpk = NULL;
     int ret;
@@ -217,7 +217,7 @@ int i2d_PUBKEY(EVP_PKEY *a, unsigned char **pp)
  * The following are equivalents but which return RSA and DSA keys
  */
 #ifndef OPENSSL_NO_RSA
-RSA *d2i_RSA_PUBKEY(RSA **a, const unsigned char **pp, long length)
+RSA * __cdecl d2i_RSA_PUBKEY(RSA **a, const unsigned char **pp, long length)
 {
     EVP_PKEY *pkey;
     RSA *key;
@@ -238,7 +238,7 @@ RSA *d2i_RSA_PUBKEY(RSA **a, const unsigned char **pp, long length)
     return key;
 }
 
-int i2d_RSA_PUBKEY(RSA *a, unsigned char **pp)
+int __cdecl i2d_RSA_PUBKEY(RSA *a, unsigned char **pp)
 {
     EVP_PKEY *pktmp;
     int ret;
@@ -257,7 +257,7 @@ int i2d_RSA_PUBKEY(RSA *a, unsigned char **pp)
 #endif
 
 #ifndef OPENSSL_NO_DSA
-DSA *d2i_DSA_PUBKEY(DSA **a, const unsigned char **pp, long length)
+DSA * __cdecl d2i_DSA_PUBKEY(DSA **a, const unsigned char **pp, long length)
 {
     EVP_PKEY *pkey;
     DSA *key;
@@ -278,7 +278,7 @@ DSA *d2i_DSA_PUBKEY(DSA **a, const unsigned char **pp, long length)
     return key;
 }
 
-int i2d_DSA_PUBKEY(DSA *a, unsigned char **pp)
+int __cdecl i2d_DSA_PUBKEY(DSA *a, unsigned char **pp)
 {
     EVP_PKEY *pktmp;
     int ret;
@@ -297,7 +297,7 @@ int i2d_DSA_PUBKEY(DSA *a, unsigned char **pp)
 #endif
 
 #ifndef OPENSSL_NO_EC
-EC_KEY *d2i_EC_PUBKEY(EC_KEY **a, const unsigned char **pp, long length)
+EC_KEY * __cdecl d2i_EC_PUBKEY(EC_KEY **a, const unsigned char **pp, long length)
 {
     EVP_PKEY *pkey;
     EC_KEY *key;
@@ -318,7 +318,7 @@ EC_KEY *d2i_EC_PUBKEY(EC_KEY **a, const unsigned char **pp, long length)
     return key;
 }
 
-int i2d_EC_PUBKEY(EC_KEY *a, unsigned char **pp)
+int __cdecl i2d_EC_PUBKEY(EC_KEY *a, unsigned char **pp)
 {
     EVP_PKEY *pktmp;
     int ret;
@@ -335,7 +335,7 @@ int i2d_EC_PUBKEY(EC_KEY *a, unsigned char **pp)
 }
 #endif
 
-int X509_PUBKEY_set0_param(X509_PUBKEY *pub, ASN1_OBJECT *aobj,
+int __cdecl X509_PUBKEY_set0_param(X509_PUBKEY *pub, ASN1_OBJECT *aobj,
                            int ptype, void *pval,
                            unsigned char *penc, int penclen)
 {
@@ -352,7 +352,7 @@ int X509_PUBKEY_set0_param(X509_PUBKEY *pub, ASN1_OBJECT *aobj,
     return 1;
 }
 
-int X509_PUBKEY_get0_param(ASN1_OBJECT **ppkalg,
+int __cdecl X509_PUBKEY_get0_param(ASN1_OBJECT **ppkalg,
                            const unsigned char **pk, int *ppklen,
                            X509_ALGOR **pa, X509_PUBKEY *pub)
 {
@@ -367,7 +367,7 @@ int X509_PUBKEY_get0_param(ASN1_OBJECT **ppkalg,
     return 1;
 }
 
-ASN1_BIT_STRING *X509_get0_pubkey_bitstr(const X509 *x)
+ASN1_BIT_STRING * __cdecl X509_get0_pubkey_bitstr(const X509 *x)
 {
     if (x == NULL)
         return NULL;
diff --git a/crypto/x509/x_x509.c b/crypto/x509/x_x509.c
index afe59c46c5..cefbdfa4c1 100644
--- a/crypto/x509/x_x509.c
+++ b/crypto/x509/x_x509.c
@@ -110,12 +110,12 @@ IMPLEMENT_ASN1_FUNCTIONS(X509)
 
 IMPLEMENT_ASN1_DUP_FUNCTION(X509)
 
-int X509_set_ex_data(X509 *r, int idx, void *arg)
+int __cdecl X509_set_ex_data(X509 *r, int idx, void *arg)
 {
     return CRYPTO_set_ex_data(&r->ex_data, idx, arg);
 }
 
-void *X509_get_ex_data(X509 *r, int idx)
+void * __cdecl X509_get_ex_data(X509 *r, int idx)
 {
     return CRYPTO_get_ex_data(&r->ex_data, idx);
 }
@@ -127,7 +127,7 @@ void *X509_get_ex_data(X509 *r, int idx)
  * reliable source such as local storage.
  */
 
-X509 *d2i_X509_AUX(X509 **a, const unsigned char **pp, long length)
+X509 * __cdecl d2i_X509_AUX(X509 **a, const unsigned char **pp, long length)
 {
     const unsigned char *q;
     X509 *ret;
@@ -197,7 +197,7 @@ static int i2d_x509_aux_internal(X509 *a, unsigned char **pp)
  * the allocation, nor can we allow i2d_X509_CERT_AUX() to increment the
  * allocated buffer.
  */
-int i2d_X509_AUX(X509 *a, unsigned char **pp)
+int __cdecl i2d_X509_AUX(X509 *a, unsigned char **pp)
 {
     int length;
     unsigned char *tmp;
@@ -226,13 +226,13 @@ int i2d_X509_AUX(X509 *a, unsigned char **pp)
     return length;
 }
 
-int i2d_re_X509_tbs(X509 *x, unsigned char **pp)
+int __cdecl i2d_re_X509_tbs(X509 *x, unsigned char **pp)
 {
     x->cert_info.enc.modified = 1;
     return i2d_X509_CINF(&x->cert_info, pp);
 }
 
-void X509_get0_signature(const ASN1_BIT_STRING **psig,
+void __cdecl X509_get0_signature(const ASN1_BIT_STRING **psig,
                          const X509_ALGOR **palg, const X509 *x)
 {
     if (psig)
@@ -241,7 +241,7 @@ void X509_get0_signature(const ASN1_BIT_STRING **psig,
         *palg = &x->sig_alg;
 }
 
-int X509_get_signature_nid(const X509 *x)
+int __cdecl X509_get_signature_nid(const X509 *x)
 {
     return OBJ_obj2nid(x->sig_alg.algorithm);
 }
diff --git a/crypto/x509/x_x509a.c b/crypto/x509/x_x509a.c
index 8c9ad71d1b..f58ecabe95 100644
--- a/crypto/x509/x_x509a.c
+++ b/crypto/x509/x_x509a.c
@@ -33,7 +33,7 @@ ASN1_SEQUENCE(X509_CERT_AUX) = {
 
 IMPLEMENT_ASN1_FUNCTIONS(X509_CERT_AUX)
 
-int X509_trusted(const X509 *x)
+int __cdecl X509_trusted(const X509 *x)
 {
     return x->aux ? 1 : 0;
 }
@@ -47,7 +47,7 @@ static X509_CERT_AUX *aux_get(X509 *x)
     return x->aux;
 }
 
-int X509_alias_set1(X509 *x, const unsigned char *name, int len)
+int __cdecl X509_alias_set1(X509 *x, const unsigned char *name, int len)
 {
     X509_CERT_AUX *aux;
     if (!name) {
@@ -64,7 +64,7 @@ int X509_alias_set1(X509 *x, const unsigned char *name, int len)
     return ASN1_STRING_set(aux->alias, name, len);
 }
 
-int X509_keyid_set1(X509 *x, const unsigned char *id, int len)
+int __cdecl X509_keyid_set1(X509 *x, const unsigned char *id, int len)
 {
     X509_CERT_AUX *aux;
     if (!id) {
@@ -82,7 +82,7 @@ int X509_keyid_set1(X509 *x, const unsigned char *id, int len)
     return ASN1_STRING_set(aux->keyid, id, len);
 }
 
-unsigned char *X509_alias_get0(X509 *x, int *len)
+unsigned char * __cdecl X509_alias_get0(X509 *x, int *len)
 {
     if (!x->aux || !x->aux->alias)
         return NULL;
@@ -91,7 +91,7 @@ unsigned char *X509_alias_get0(X509 *x, int *len)
     return x->aux->alias->data;
 }
 
-unsigned char *X509_keyid_get0(X509 *x, int *len)
+unsigned char * __cdecl X509_keyid_get0(X509 *x, int *len)
 {
     if (!x->aux || !x->aux->keyid)
         return NULL;
@@ -100,7 +100,7 @@ unsigned char *X509_keyid_get0(X509 *x, int *len)
     return x->aux->keyid->data;
 }
 
-int X509_add1_trust_object(X509 *x, const ASN1_OBJECT *obj)
+int __cdecl X509_add1_trust_object(X509 *x, const ASN1_OBJECT *obj)
 {
     X509_CERT_AUX *aux;
     ASN1_OBJECT *objtmp = NULL;
@@ -121,7 +121,7 @@ int X509_add1_trust_object(X509 *x, const ASN1_OBJECT *obj)
     return 0;
 }
 
-int X509_add1_reject_object(X509 *x, const ASN1_OBJECT *obj)
+int __cdecl X509_add1_reject_object(X509 *x, const ASN1_OBJECT *obj)
 {
     X509_CERT_AUX *aux;
     ASN1_OBJECT *objtmp;
@@ -138,7 +138,7 @@ int X509_add1_reject_object(X509 *x, const ASN1_OBJECT *obj)
     return 0;
 }
 
-void X509_trust_clear(X509 *x)
+void __cdecl X509_trust_clear(X509 *x)
 {
     if (x->aux) {
         sk_ASN1_OBJECT_pop_free(x->aux->trust, ASN1_OBJECT_free);
@@ -146,7 +146,7 @@ void X509_trust_clear(X509 *x)
     }
 }
 
-void X509_reject_clear(X509 *x)
+void __cdecl X509_reject_clear(X509 *x)
 {
     if (x->aux) {
         sk_ASN1_OBJECT_pop_free(x->aux->reject, ASN1_OBJECT_free);
@@ -154,14 +154,14 @@ void X509_reject_clear(X509 *x)
     }
 }
 
-STACK_OF(ASN1_OBJECT) *X509_get0_trust_objects(X509 *x)
+STACK_OF(ASN1_OBJECT) * __cdecl X509_get0_trust_objects(X509 *x)
 {
     if (x->aux != NULL)
         return x->aux->trust;
     return NULL;
 }
 
-STACK_OF(ASN1_OBJECT) *X509_get0_reject_objects(X509 *x)
+STACK_OF(ASN1_OBJECT) * __cdecl X509_get0_reject_objects(X509 *x)
 {
     if (x->aux != NULL)
         return x->aux->reject;
diff --git a/crypto/x509v3/pcy_cache.c b/crypto/x509v3/pcy_cache.c
index 623870b1f6..42194005c7 100644
--- a/crypto/x509v3/pcy_cache.c
+++ b/crypto/x509v3/pcy_cache.c
@@ -14,7 +14,7 @@
 
 #include "pcy_int.h"
 
-static int policy_data_cmp(const X509_POLICY_DATA *const *a,
+static int __cdecl policy_data_cmp(const X509_POLICY_DATA *const *a,
                            const X509_POLICY_DATA *const *b);
 static int policy_cache_set_int(long *out, ASN1_INTEGER *value);
 
@@ -207,7 +207,7 @@ X509_POLICY_DATA *policy_cache_find_data(const X509_POLICY_CACHE *cache,
     return sk_X509_POLICY_DATA_value(cache->data, idx);
 }
 
-static int policy_data_cmp(const X509_POLICY_DATA *const *a,
+static int __cdecl policy_data_cmp(const X509_POLICY_DATA *const *a,
                            const X509_POLICY_DATA *const *b)
 {
     return OBJ_cmp((*a)->valid_policy, (*b)->valid_policy);
diff --git a/crypto/x509v3/pcy_data.c b/crypto/x509v3/pcy_data.c
index bd3bb0e40d..1ce8f6ce77 100644
--- a/crypto/x509v3/pcy_data.c
+++ b/crypto/x509v3/pcy_data.c
@@ -15,7 +15,7 @@
 
 /* Policy Node routines */
 
-void policy_data_free(X509_POLICY_DATA *data)
+void __cdecl policy_data_free(X509_POLICY_DATA *data)
 {
     if (data == NULL)
         return;
diff --git a/crypto/x509v3/pcy_int.h b/crypto/x509v3/pcy_int.h
index 5daf78de45..8f16cd61a3 100644
--- a/crypto/x509v3/pcy_int.h
+++ b/crypto/x509v3/pcy_int.h
@@ -137,7 +137,7 @@ struct X509_POLICY_TREE_st {
 
 X509_POLICY_DATA *policy_data_new(POLICYINFO *policy, const ASN1_OBJECT *id,
                                   int crit);
-void policy_data_free(X509_POLICY_DATA *data);
+void __cdecl policy_data_free(X509_POLICY_DATA *data);
 
 X509_POLICY_DATA *policy_cache_find_data(const X509_POLICY_CACHE *cache,
                                          const ASN1_OBJECT *id);
@@ -160,7 +160,7 @@ X509_POLICY_NODE *level_add_node(X509_POLICY_LEVEL *level,
                                  X509_POLICY_DATA *data,
                                  X509_POLICY_NODE *parent,
                                  X509_POLICY_TREE *tree);
-void policy_node_free(X509_POLICY_NODE *node);
+void __cdecl policy_node_free(X509_POLICY_NODE *node);
 int policy_node_match(const X509_POLICY_LEVEL *lvl,
                       const X509_POLICY_NODE *node, const ASN1_OBJECT *oid);
 
diff --git a/crypto/x509v3/pcy_lib.c b/crypto/x509v3/pcy_lib.c
index 67f7eafc6e..72cb9a7032 100644
--- a/crypto/x509v3/pcy_lib.c
+++ b/crypto/x509v3/pcy_lib.c
@@ -17,14 +17,14 @@
 
 /* X509_POLICY_TREE stuff */
 
-int X509_policy_tree_level_count(const X509_POLICY_TREE *tree)
+int __cdecl X509_policy_tree_level_count(const X509_POLICY_TREE *tree)
 {
     if (!tree)
         return 0;
     return tree->nlevel;
 }
 
-X509_POLICY_LEVEL *X509_policy_tree_get0_level(const X509_POLICY_TREE *tree,
+X509_POLICY_LEVEL * __cdecl X509_policy_tree_get0_level(const X509_POLICY_TREE *tree,
                                                int i)
 {
     if (!tree || (i < 0) || (i >= tree->nlevel))
@@ -32,7 +32,7 @@ X509_POLICY_LEVEL *X509_policy_tree_get0_level(const X509_POLICY_TREE *tree,
     return tree->levels + i;
 }
 
-STACK_OF(X509_POLICY_NODE) *X509_policy_tree_get0_policies(const
+STACK_OF(X509_POLICY_NODE) * __cdecl X509_policy_tree_get0_policies(const
                                                            X509_POLICY_TREE
                                                            *tree)
 {
@@ -41,7 +41,7 @@ STACK_OF(X509_POLICY_NODE) *X509_policy_tree_get0_policies(const
     return tree->auth_policies;
 }
 
-STACK_OF(X509_POLICY_NODE) *X509_policy_tree_get0_user_policies(const
+STACK_OF(X509_POLICY_NODE) * __cdecl X509_policy_tree_get0_user_policies(const
                                                                 X509_POLICY_TREE
                                                                 *tree)
 {
@@ -55,7 +55,7 @@ STACK_OF(X509_POLICY_NODE) *X509_policy_tree_get0_user_policies(const
 
 /* X509_POLICY_LEVEL stuff */
 
-int X509_policy_level_node_count(X509_POLICY_LEVEL *level)
+int __cdecl X509_policy_level_node_count(X509_POLICY_LEVEL *level)
 {
     int n;
     if (!level)
@@ -69,7 +69,7 @@ int X509_policy_level_node_count(X509_POLICY_LEVEL *level)
     return n;
 }
 
-X509_POLICY_NODE *X509_policy_level_get0_node(X509_POLICY_LEVEL *level, int i)
+X509_POLICY_NODE * __cdecl X509_policy_level_get0_node(X509_POLICY_LEVEL *level, int i)
 {
     if (!level)
         return NULL;
@@ -83,14 +83,14 @@ X509_POLICY_NODE *X509_policy_level_get0_node(X509_POLICY_LEVEL *level, int i)
 
 /* X509_POLICY_NODE stuff */
 
-const ASN1_OBJECT *X509_policy_node_get0_policy(const X509_POLICY_NODE *node)
+const ASN1_OBJECT * __cdecl X509_policy_node_get0_policy(const X509_POLICY_NODE *node)
 {
     if (!node)
         return NULL;
     return node->data->valid_policy;
 }
 
-STACK_OF(POLICYQUALINFO) *X509_policy_node_get0_qualifiers(const
+STACK_OF(POLICYQUALINFO) * __cdecl X509_policy_node_get0_qualifiers(const
                                                            X509_POLICY_NODE
                                                            *node)
 {
@@ -99,7 +99,7 @@ STACK_OF(POLICYQUALINFO) *X509_policy_node_get0_qualifiers(const
     return node->data->qualifier_set;
 }
 
-const X509_POLICY_NODE *X509_policy_node_get0_parent(const X509_POLICY_NODE
+const X509_POLICY_NODE * __cdecl X509_policy_node_get0_parent(const X509_POLICY_NODE
                                                      *node)
 {
     if (!node)
diff --git a/crypto/x509v3/pcy_node.c b/crypto/x509v3/pcy_node.c
index 1ffe98498b..f43bf9b52a 100644
--- a/crypto/x509v3/pcy_node.c
+++ b/crypto/x509v3/pcy_node.c
@@ -14,7 +14,7 @@
 
 #include "pcy_int.h"
 
-static int node_cmp(const X509_POLICY_NODE *const *a,
+static int __cdecl node_cmp(const X509_POLICY_NODE *const *a,
                     const X509_POLICY_NODE *const *b)
 {
     return OBJ_cmp((*a)->data->valid_policy, (*b)->data->valid_policy);
@@ -113,7 +113,7 @@ X509_POLICY_NODE *level_add_node(X509_POLICY_LEVEL *level,
     return NULL;
 }
 
-void policy_node_free(X509_POLICY_NODE *node)
+void __cdecl policy_node_free(X509_POLICY_NODE *node)
 {
     OPENSSL_free(node);
 }
diff --git a/crypto/x509v3/pcy_tree.c b/crypto/x509v3/pcy_tree.c
index 87f51d001b..00699729bf 100644
--- a/crypto/x509v3/pcy_tree.c
+++ b/crypto/x509v3/pcy_tree.c
@@ -598,13 +598,13 @@ static int tree_evaluate(X509_POLICY_TREE *tree)
     return X509_PCY_TREE_VALID;
 }
 
-static void exnode_free(X509_POLICY_NODE *node)
+static void __cdecl exnode_free(X509_POLICY_NODE *node)
 {
     if (node->data && (node->data->flags & POLICY_DATA_FLAG_EXTRA_NODE))
         OPENSSL_free(node);
 }
 
-void X509_policy_tree_free(X509_POLICY_TREE *tree)
+void __cdecl X509_policy_tree_free(X509_POLICY_TREE *tree)
 {
     X509_POLICY_LEVEL *curr;
     int i;
@@ -635,7 +635,7 @@ void X509_policy_tree_free(X509_POLICY_TREE *tree)
  *  X509_PCY_TREE_INTERNAL: Internal error, most likely malloc
  *  X509_PCY_TREE_VALID:    Success (null tree if empty or bare TA)
  */
-int X509_policy_check(X509_POLICY_TREE **ptree, int *pexplicit_policy,
+int __cdecl X509_policy_check(X509_POLICY_TREE **ptree, int *pexplicit_policy,
                       STACK_OF(X509) *certs,
                       STACK_OF(ASN1_OBJECT) *policy_oids, unsigned int flags)
 {
diff --git a/crypto/x509v3/v3_addr.c b/crypto/x509v3/v3_addr.c
index bb58e04846..b982dc1f44 100644
--- a/crypto/x509v3/v3_addr.c
+++ b/crypto/x509v3/v3_addr.c
@@ -82,7 +82,7 @@ static int length_from_afi(const unsigned afi)
 /*
  * Extract the AFI from an IPAddressFamily.
  */
-unsigned int X509v3_addr_get_afi(const IPAddressFamily *f)
+unsigned int __cdecl X509v3_addr_get_afi(const IPAddressFamily *f)
 {
     if (f == NULL
             || f->addressFamily == NULL
@@ -195,7 +195,7 @@ static int i2r_IPAddressOrRanges(BIO *out,
 /*
  * i2r handler for an IPAddrBlocks extension.
  */
-static int i2r_IPAddrBlocks(const X509V3_EXT_METHOD *method,
+static int __cdecl i2r_IPAddrBlocks(const X509V3_EXT_METHOD *method,
                             void *ext, BIO *out, int indent)
 {
     const IPAddrBlocks *addr = ext;
@@ -316,7 +316,7 @@ static int IPAddressOrRange_cmp(const IPAddressOrRange *a,
  * IPv4-specific closure over IPAddressOrRange_cmp, since sk_sort()
  * comparison routines are only allowed two arguments.
  */
-static int v4IPAddressOrRange_cmp(const IPAddressOrRange *const *a,
+static int __cdecl v4IPAddressOrRange_cmp(const IPAddressOrRange *const *a,
                                   const IPAddressOrRange *const *b)
 {
     return IPAddressOrRange_cmp(*a, *b, 4);
@@ -326,7 +326,7 @@ static int v4IPAddressOrRange_cmp(const IPAddressOrRange *const *a,
  * IPv6-specific closure over IPAddressOrRange_cmp, since sk_sort()
  * comparison routines are only allowed two arguments.
  */
-static int v6IPAddressOrRange_cmp(const IPAddressOrRange *const *a,
+static int __cdecl v6IPAddressOrRange_cmp(const IPAddressOrRange *const *a,
                                   const IPAddressOrRange *const *b)
 {
     return IPAddressOrRange_cmp(*a, *b, 16);
@@ -526,7 +526,7 @@ static IPAddressFamily *make_IPAddressFamily(IPAddrBlocks *addr,
 /*
  * Add an inheritance element.
  */
-int X509v3_addr_add_inherit(IPAddrBlocks *addr,
+int __cdecl X509v3_addr_add_inherit(IPAddrBlocks *addr,
                             const unsigned afi, const unsigned *safi)
 {
     IPAddressFamily *f = make_IPAddressFamily(addr, afi, safi);
@@ -582,7 +582,7 @@ static IPAddressOrRanges *make_prefix_or_range(IPAddrBlocks *addr,
 /*
  * Add a prefix.
  */
-int X509v3_addr_add_prefix(IPAddrBlocks *addr,
+int __cdecl X509v3_addr_add_prefix(IPAddrBlocks *addr,
                            const unsigned afi,
                            const unsigned *safi,
                            unsigned char *a, const int prefixlen)
@@ -600,7 +600,7 @@ int X509v3_addr_add_prefix(IPAddrBlocks *addr,
 /*
  * Add a range.
  */
-int X509v3_addr_add_range(IPAddrBlocks *addr,
+int __cdecl X509v3_addr_add_range(IPAddrBlocks *addr,
                           const unsigned afi,
                           const unsigned *safi,
                           unsigned char *min, unsigned char *max)
@@ -640,7 +640,7 @@ static int extract_min_max(IPAddressOrRange *aor,
 /*
  * Public wrapper for extract_min_max().
  */
-int X509v3_addr_get_range(IPAddressOrRange *aor,
+int __cdecl X509v3_addr_get_range(IPAddressOrRange *aor,
                           const unsigned afi,
                           unsigned char *min,
                           unsigned char *max, const int length)
@@ -666,7 +666,7 @@ int X509v3_addr_get_range(IPAddressOrRange *aor,
  * null-SAFI rule to apply only within a single AFI, which is what I
  * would have expected and is what the following code implements.
  */
-static int IPAddressFamily_cmp(const IPAddressFamily *const *a_,
+static int __cdecl IPAddressFamily_cmp(const IPAddressFamily *const *a_,
                                const IPAddressFamily *const *b_)
 {
     const ASN1_OCTET_STRING *a = (*a_)->addressFamily;
@@ -679,7 +679,7 @@ static int IPAddressFamily_cmp(const IPAddressFamily *const *a_,
 /*
  * Check whether an IPAddrBLocks is in canonical form.
  */
-int X509v3_addr_is_canonical(IPAddrBlocks *addr)
+int __cdecl X509v3_addr_is_canonical(IPAddrBlocks *addr)
 {
     unsigned char a_min[ADDR_RAW_BUF_LEN], a_max[ADDR_RAW_BUF_LEN];
     unsigned char b_min[ADDR_RAW_BUF_LEN], b_max[ADDR_RAW_BUF_LEN];
@@ -863,7 +863,7 @@ static int IPAddressOrRanges_canonize(IPAddressOrRanges *aors,
 /*
  * Whack an IPAddrBlocks extension into canonical form.
  */
-int X509v3_addr_canonize(IPAddrBlocks *addr)
+int __cdecl X509v3_addr_canonize(IPAddrBlocks *addr)
 {
     int i;
     for (i = 0; i < sk_IPAddressFamily_num(addr); i++) {
@@ -884,7 +884,7 @@ int X509v3_addr_canonize(IPAddrBlocks *addr)
 /*
  * v2i handler for the IPAddrBlocks extension.
  */
-static void *v2i_IPAddrBlocks(const struct v3_ext_method *method,
+static void * __cdecl v2i_IPAddrBlocks(const struct v3_ext_method *method,
                               struct v3_ext_ctx *ctx,
                               STACK_OF(CONF_VALUE) *values)
 {
@@ -1073,7 +1073,7 @@ const X509V3_EXT_METHOD v3_addr = {
 /*
  * Figure out whether extension sues inheritance.
  */
-int X509v3_addr_inherits(IPAddrBlocks *addr)
+int __cdecl X509v3_addr_inherits(IPAddrBlocks *addr)
 {
     int i;
     if (addr == NULL)
@@ -1126,7 +1126,7 @@ static int addr_contains(IPAddressOrRanges *parent,
 /*
  * Test whether a is a subset of b.
  */
-int X509v3_addr_subset(IPAddrBlocks *a, IPAddrBlocks *b)
+int __cdecl X509v3_addr_subset(IPAddrBlocks *a, IPAddrBlocks *b)
 {
     int i;
     if (a == NULL || a == b)
@@ -1285,7 +1285,7 @@ static int addr_validate_path_internal(X509_STORE_CTX *ctx,
 /*
  * RFC 3779 2.3 path validation -- called from X509_verify_cert().
  */
-int X509v3_addr_validate_path(X509_STORE_CTX *ctx)
+int __cdecl X509v3_addr_validate_path(X509_STORE_CTX *ctx)
 {
     if (ctx->chain == NULL
             || sk_X509_num(ctx->chain) == 0
@@ -1300,7 +1300,7 @@ int X509v3_addr_validate_path(X509_STORE_CTX *ctx)
  * RFC 3779 2.3 path validation of an extension.
  * Test whether chain covers extension.
  */
-int X509v3_addr_validate_resource_set(STACK_OF(X509) *chain,
+int __cdecl X509v3_addr_validate_resource_set(STACK_OF(X509) *chain,
                                   IPAddrBlocks *ext, int allow_inheritance)
 {
     if (ext == NULL)
diff --git a/crypto/x509v3/v3_admis.c b/crypto/x509v3/v3_admis.c
index c8e75191bb..07f74d7147 100644
--- a/crypto/x509v3/v3_admis.c
+++ b/crypto/x509v3/v3_admis.c
@@ -51,7 +51,7 @@ IMPLEMENT_ASN1_FUNCTIONS(PROFESSION_INFO)
 IMPLEMENT_ASN1_FUNCTIONS(ADMISSIONS)
 IMPLEMENT_ASN1_FUNCTIONS(ADMISSION_SYNTAX)
 
-static int i2r_ADMISSION_SYNTAX(const struct v3_ext_method *method, void *in,
+static int __cdecl i2r_ADMISSION_SYNTAX(const struct v3_ext_method *method, void *in,
                                 BIO *bp, int ind);
 
 const X509V3_EXT_METHOD v3_ext_admission = {
@@ -116,7 +116,7 @@ err:
     return 0;
 }
 
-static int i2r_ADMISSION_SYNTAX(const struct v3_ext_method *method, void *in,
+static int __cdecl i2r_ADMISSION_SYNTAX(const struct v3_ext_method *method, void *in,
                                 BIO *bp, int ind)
 {
     ADMISSION_SYNTAX * admission = (ADMISSION_SYNTAX *)in;
@@ -203,152 +203,152 @@ err:
     return -1;
 }
 
-const ASN1_OBJECT *NAMING_AUTHORITY_get0_authorityId(const NAMING_AUTHORITY *n)
+const ASN1_OBJECT * __cdecl NAMING_AUTHORITY_get0_authorityId(const NAMING_AUTHORITY *n)
 {
     return n->namingAuthorityId;
 }
 
-void NAMING_AUTHORITY_set0_authorityId(NAMING_AUTHORITY *n, ASN1_OBJECT* id)
+void __cdecl NAMING_AUTHORITY_set0_authorityId(NAMING_AUTHORITY *n, ASN1_OBJECT* id)
 {
     ASN1_OBJECT_free(n->namingAuthorityId);
     n->namingAuthorityId = id;
 }
 
-const ASN1_IA5STRING *NAMING_AUTHORITY_get0_authorityURL(
+const ASN1_IA5STRING * __cdecl NAMING_AUTHORITY_get0_authorityURL(
     const NAMING_AUTHORITY *n)
 {
     return n->namingAuthorityUrl;
 }
 
-void NAMING_AUTHORITY_set0_authorityURL(NAMING_AUTHORITY *n, ASN1_IA5STRING* u)
+void __cdecl NAMING_AUTHORITY_set0_authorityURL(NAMING_AUTHORITY *n, ASN1_IA5STRING* u)
 {
     ASN1_IA5STRING_free(n->namingAuthorityUrl);
     n->namingAuthorityUrl = u;
 }
 
-const ASN1_STRING *NAMING_AUTHORITY_get0_authorityText(
+const ASN1_STRING * __cdecl NAMING_AUTHORITY_get0_authorityText(
     const NAMING_AUTHORITY *n)
 {
     return n->namingAuthorityText;
 }
 
-void NAMING_AUTHORITY_set0_authorityText(NAMING_AUTHORITY *n, ASN1_STRING* t)
+void __cdecl NAMING_AUTHORITY_set0_authorityText(NAMING_AUTHORITY *n, ASN1_STRING* t)
 {
     ASN1_IA5STRING_free(n->namingAuthorityText);
     n->namingAuthorityText = t;
 }
 
-const GENERAL_NAME *ADMISSION_SYNTAX_get0_admissionAuthority(const ADMISSION_SYNTAX *as)
+const GENERAL_NAME * __cdecl ADMISSION_SYNTAX_get0_admissionAuthority(const ADMISSION_SYNTAX *as)
 {
     return as->admissionAuthority;
 }
 
-void ADMISSION_SYNTAX_set0_admissionAuthority(ADMISSION_SYNTAX *as,
+void __cdecl ADMISSION_SYNTAX_set0_admissionAuthority(ADMISSION_SYNTAX *as,
                                               GENERAL_NAME *aa)
 {
     GENERAL_NAME_free(as->admissionAuthority);
     as->admissionAuthority = aa;
 }
 
-const STACK_OF(ADMISSIONS) *ADMISSION_SYNTAX_get0_contentsOfAdmissions(const ADMISSION_SYNTAX *as)
+const STACK_OF(ADMISSIONS) * __cdecl ADMISSION_SYNTAX_get0_contentsOfAdmissions(const ADMISSION_SYNTAX *as)
 {
     return as->contentsOfAdmissions;
 }
 
-void ADMISSION_SYNTAX_set0_contentsOfAdmissions(ADMISSION_SYNTAX *as,
+void __cdecl ADMISSION_SYNTAX_set0_contentsOfAdmissions(ADMISSION_SYNTAX *as,
                                                 STACK_OF(ADMISSIONS) *a)
 {
     sk_ADMISSIONS_pop_free(as->contentsOfAdmissions, ADMISSIONS_free);
     as->contentsOfAdmissions = a;
 }
 
-const GENERAL_NAME *ADMISSIONS_get0_admissionAuthority(const ADMISSIONS *a)
+const GENERAL_NAME * __cdecl ADMISSIONS_get0_admissionAuthority(const ADMISSIONS *a)
 {
     return a->admissionAuthority;
 }
 
-void ADMISSIONS_set0_admissionAuthority(ADMISSIONS *a, GENERAL_NAME *aa)
+void __cdecl ADMISSIONS_set0_admissionAuthority(ADMISSIONS *a, GENERAL_NAME *aa)
 {
     GENERAL_NAME_free(a->admissionAuthority);
     a->admissionAuthority = aa;
 }
 
-const NAMING_AUTHORITY *ADMISSIONS_get0_namingAuthority(const ADMISSIONS *a)
+const NAMING_AUTHORITY * __cdecl ADMISSIONS_get0_namingAuthority(const ADMISSIONS *a)
 {
     return a->namingAuthority;
 }
 
-void ADMISSIONS_set0_namingAuthority(ADMISSIONS *a, NAMING_AUTHORITY *na)
+void __cdecl ADMISSIONS_set0_namingAuthority(ADMISSIONS *a, NAMING_AUTHORITY *na)
 {
     NAMING_AUTHORITY_free(a->namingAuthority);
     a->namingAuthority = na;
 }
 
-const PROFESSION_INFOS *ADMISSIONS_get0_professionInfos(const ADMISSIONS *a)
+const PROFESSION_INFOS * __cdecl ADMISSIONS_get0_professionInfos(const ADMISSIONS *a)
 {
     return a->professionInfos;
 }
 
-void ADMISSIONS_set0_professionInfos(ADMISSIONS *a, PROFESSION_INFOS *pi)
+void __cdecl ADMISSIONS_set0_professionInfos(ADMISSIONS *a, PROFESSION_INFOS *pi)
 {
     sk_PROFESSION_INFO_pop_free(a->professionInfos, PROFESSION_INFO_free);
     a->professionInfos = pi;
 }
 
-const ASN1_OCTET_STRING *PROFESSION_INFO_get0_addProfessionInfo(const PROFESSION_INFO *pi)
+const ASN1_OCTET_STRING * __cdecl PROFESSION_INFO_get0_addProfessionInfo(const PROFESSION_INFO *pi)
 {
     return pi->addProfessionInfo;
 }
 
-void PROFESSION_INFO_set0_addProfessionInfo(PROFESSION_INFO *pi,
+void __cdecl PROFESSION_INFO_set0_addProfessionInfo(PROFESSION_INFO *pi,
                                             ASN1_OCTET_STRING *aos)
 {
     ASN1_OCTET_STRING_free(pi->addProfessionInfo);
     pi->addProfessionInfo = aos;
 }
 
-const NAMING_AUTHORITY *PROFESSION_INFO_get0_namingAuthority(const PROFESSION_INFO *pi)
+const NAMING_AUTHORITY * __cdecl PROFESSION_INFO_get0_namingAuthority(const PROFESSION_INFO *pi)
 {
     return pi->namingAuthority;
 }
 
-void PROFESSION_INFO_set0_namingAuthority(PROFESSION_INFO *pi,
+void __cdecl PROFESSION_INFO_set0_namingAuthority(PROFESSION_INFO *pi,
                                           NAMING_AUTHORITY *na)
 {
     NAMING_AUTHORITY_free(pi->namingAuthority);
     pi->namingAuthority = na;
 }
 
-const STACK_OF(ASN1_STRING) *PROFESSION_INFO_get0_professionItems(const PROFESSION_INFO *pi)
+const STACK_OF(ASN1_STRING) * __cdecl PROFESSION_INFO_get0_professionItems(const PROFESSION_INFO *pi)
 {
     return pi->professionItems;
 }
 
-void PROFESSION_INFO_set0_professionItems(PROFESSION_INFO *pi,
+void __cdecl PROFESSION_INFO_set0_professionItems(PROFESSION_INFO *pi,
                                           STACK_OF(ASN1_STRING) *as)
 {
     sk_ASN1_STRING_pop_free(pi->professionItems, ASN1_STRING_free);
     pi->professionItems = as;
 }
 
-const STACK_OF(ASN1_OBJECT) *PROFESSION_INFO_get0_professionOIDs(const PROFESSION_INFO *pi)
+const STACK_OF(ASN1_OBJECT) * __cdecl PROFESSION_INFO_get0_professionOIDs(const PROFESSION_INFO *pi)
 {
     return pi->professionOIDs;
 }
 
-void PROFESSION_INFO_set0_professionOIDs(PROFESSION_INFO *pi,
+void __cdecl PROFESSION_INFO_set0_professionOIDs(PROFESSION_INFO *pi,
                                          STACK_OF(ASN1_OBJECT) *po)
 {
     sk_ASN1_OBJECT_pop_free(pi->professionOIDs, ASN1_OBJECT_free);
     pi->professionOIDs = po;
 }
 
-const ASN1_PRINTABLESTRING *PROFESSION_INFO_get0_registrationNumber(const PROFESSION_INFO *pi)
+const ASN1_PRINTABLESTRING * __cdecl PROFESSION_INFO_get0_registrationNumber(const PROFESSION_INFO *pi)
 {
     return pi->registrationNumber;
 }
 
-void PROFESSION_INFO_set0_registrationNumber(PROFESSION_INFO *pi,
+void __cdecl PROFESSION_INFO_set0_registrationNumber(PROFESSION_INFO *pi,
                                              ASN1_PRINTABLESTRING *rn)
 {
     ASN1_PRINTABLESTRING_free(pi->registrationNumber);
diff --git a/crypto/x509v3/v3_alt.c b/crypto/x509v3/v3_alt.c
index dfcb9094f4..4777ad2496 100644
--- a/crypto/x509v3/v3_alt.c
+++ b/crypto/x509v3/v3_alt.c
@@ -46,7 +46,7 @@ const X509V3_EXT_METHOD v3_alt[3] = {
      NULL, NULL, NULL, NULL},
 };
 
-STACK_OF(CONF_VALUE) *i2v_GENERAL_NAMES(X509V3_EXT_METHOD *method,
+STACK_OF(CONF_VALUE) * __cdecl i2v_GENERAL_NAMES(X509V3_EXT_METHOD *method,
                                         GENERAL_NAMES *gens,
                                         STACK_OF(CONF_VALUE) *ret)
 {
@@ -61,7 +61,7 @@ STACK_OF(CONF_VALUE) *i2v_GENERAL_NAMES(X509V3_EXT_METHOD *method,
     return ret;
 }
 
-STACK_OF(CONF_VALUE) *i2v_GENERAL_NAME(X509V3_EXT_METHOD *method,
+STACK_OF(CONF_VALUE) * __cdecl i2v_GENERAL_NAME(X509V3_EXT_METHOD *method,
                                        GENERAL_NAME *gen,
                                        STACK_OF(CONF_VALUE) *ret)
 {
@@ -138,7 +138,7 @@ STACK_OF(CONF_VALUE) *i2v_GENERAL_NAME(X509V3_EXT_METHOD *method,
     return ret;
 }
 
-int GENERAL_NAME_print(BIO *out, GENERAL_NAME *gen)
+int __cdecl GENERAL_NAME_print(BIO *out, GENERAL_NAME *gen)
 {
     unsigned char *p;
     int i;
@@ -375,7 +375,7 @@ static int copy_email(X509V3_CTX *ctx, GENERAL_NAMES *gens, int move_p)
 
 }
 
-GENERAL_NAMES *v2i_GENERAL_NAMES(const X509V3_EXT_METHOD *method,
+GENERAL_NAMES * __cdecl v2i_GENERAL_NAMES(const X509V3_EXT_METHOD *method,
                                  X509V3_CTX *ctx, STACK_OF(CONF_VALUE) *nval)
 {
     GENERAL_NAME *gen;
@@ -403,13 +403,13 @@ GENERAL_NAMES *v2i_GENERAL_NAMES(const X509V3_EXT_METHOD *method,
     return NULL;
 }
 
-GENERAL_NAME *v2i_GENERAL_NAME(const X509V3_EXT_METHOD *method,
+GENERAL_NAME * __cdecl v2i_GENERAL_NAME(const X509V3_EXT_METHOD *method,
                                X509V3_CTX *ctx, CONF_VALUE *cnf)
 {
     return v2i_GENERAL_NAME_ex(NULL, method, ctx, cnf, 0);
 }
 
-GENERAL_NAME *a2i_GENERAL_NAME(GENERAL_NAME *out,
+GENERAL_NAME * __cdecl a2i_GENERAL_NAME(GENERAL_NAME *out,
                                const X509V3_EXT_METHOD *method,
                                X509V3_CTX *ctx, int gen_type, const char *value,
                                int is_nc)
@@ -500,7 +500,7 @@ GENERAL_NAME *a2i_GENERAL_NAME(GENERAL_NAME *out,
     return NULL;
 }
 
-GENERAL_NAME *v2i_GENERAL_NAME_ex(GENERAL_NAME *out,
+GENERAL_NAME * __cdecl v2i_GENERAL_NAME_ex(GENERAL_NAME *out,
                                   const X509V3_EXT_METHOD *method,
                                   X509V3_CTX *ctx, CONF_VALUE *cnf, int is_nc)
 {
diff --git a/crypto/x509v3/v3_asid.c b/crypto/x509v3/v3_asid.c
index 089f2ae29f..589e16d3e5 100644
--- a/crypto/x509v3/v3_asid.c
+++ b/crypto/x509v3/v3_asid.c
@@ -106,7 +106,7 @@ static int i2r_ASIdentifierChoice(BIO *out,
 /*
  * i2r method for an ASIdentifier extension.
  */
-static int i2r_ASIdentifiers(const X509V3_EXT_METHOD *method,
+static int __cdecl i2r_ASIdentifiers(const X509V3_EXT_METHOD *method,
                              void *ext, BIO *out, int indent)
 {
     ASIdentifiers *asid = ext;
@@ -119,7 +119,7 @@ static int i2r_ASIdentifiers(const X509V3_EXT_METHOD *method,
 /*
  * Sort comparison function for a sequence of ASIdOrRange elements.
  */
-static int ASIdOrRange_cmp(const ASIdOrRange *const *a_,
+static int __cdecl ASIdOrRange_cmp(const ASIdOrRange *const *a_,
                            const ASIdOrRange *const *b_)
 {
     const ASIdOrRange *a = *a_, *b = *b_;
@@ -150,7 +150,7 @@ static int ASIdOrRange_cmp(const ASIdOrRange *const *a_,
 /*
  * Add an inherit element.
  */
-int X509v3_asid_add_inherit(ASIdentifiers *asid, int which)
+int __cdecl X509v3_asid_add_inherit(ASIdentifiers *asid, int which)
 {
     ASIdentifierChoice **choice;
     if (asid == NULL)
@@ -178,7 +178,7 @@ int X509v3_asid_add_inherit(ASIdentifiers *asid, int which)
 /*
  * Add an ID or range to an ASIdentifierChoice.
  */
-int X509v3_asid_add_id_or_range(ASIdentifiers *asid,
+int __cdecl X509v3_asid_add_id_or_range(ASIdentifiers *asid,
                                 int which, ASN1_INTEGER *min, ASN1_INTEGER *max)
 {
     ASIdentifierChoice **choice;
@@ -338,7 +338,7 @@ static int ASIdentifierChoice_is_canonical(ASIdentifierChoice *choice)
 /*
  * Check whether an ASIdentifier extension is in canonical form.
  */
-int X509v3_asid_is_canonical(ASIdentifiers *asid)
+int __cdecl X509v3_asid_is_canonical(ASIdentifiers *asid)
 {
     return (asid == NULL ||
             (ASIdentifierChoice_is_canonical(asid->asnum) &&
@@ -490,7 +490,7 @@ static int ASIdentifierChoice_canonize(ASIdentifierChoice *choice)
 /*
  * Whack an ASIdentifier extension into canonical form.
  */
-int X509v3_asid_canonize(ASIdentifiers *asid)
+int __cdecl X509v3_asid_canonize(ASIdentifiers *asid)
 {
     return (asid == NULL ||
             (ASIdentifierChoice_canonize(asid->asnum) &&
@@ -500,7 +500,7 @@ int X509v3_asid_canonize(ASIdentifiers *asid)
 /*
  * v2i method for an ASIdentifier extension.
  */
-static void *v2i_ASIdentifiers(const struct v3_ext_method *method,
+static void * __cdecl v2i_ASIdentifiers(const struct v3_ext_method *method,
                                struct v3_ext_ctx *ctx,
                                STACK_OF(CONF_VALUE) *values)
 {
@@ -638,7 +638,7 @@ const X509V3_EXT_METHOD v3_asid = {
 /*
  * Figure out whether extension uses inheritance.
  */
-int X509v3_asid_inherits(ASIdentifiers *asid)
+int __cdecl X509v3_asid_inherits(ASIdentifiers *asid)
 {
     return (asid != NULL &&
             ((asid->asnum != NULL &&
@@ -684,7 +684,7 @@ static int asid_contains(ASIdOrRanges *parent, ASIdOrRanges *child)
 /*
  * Test whether a is a subset of b.
  */
-int X509v3_asid_subset(ASIdentifiers *a, ASIdentifiers *b)
+int __cdecl X509v3_asid_subset(ASIdentifiers *a, ASIdentifiers *b)
 {
     return (a == NULL ||
             a == b ||
@@ -850,7 +850,7 @@ static int asid_validate_path_internal(X509_STORE_CTX *ctx,
 /*
  * RFC 3779 3.3 path validation -- called from X509_verify_cert().
  */
-int X509v3_asid_validate_path(X509_STORE_CTX *ctx)
+int __cdecl X509v3_asid_validate_path(X509_STORE_CTX *ctx)
 {
     if (ctx->chain == NULL
             || sk_X509_num(ctx->chain) == 0
@@ -865,7 +865,7 @@ int X509v3_asid_validate_path(X509_STORE_CTX *ctx)
  * RFC 3779 3.3 path validation of an extension.
  * Test whether chain covers extension.
  */
-int X509v3_asid_validate_resource_set(STACK_OF(X509) *chain,
+int __cdecl X509v3_asid_validate_resource_set(STACK_OF(X509) *chain,
                                       ASIdentifiers *ext, int allow_inheritance)
 {
     if (ext == NULL)
diff --git a/crypto/x509v3/v3_bitst.c b/crypto/x509v3/v3_bitst.c
index 4802116ba0..b9455e0352 100644
--- a/crypto/x509v3/v3_bitst.c
+++ b/crypto/x509v3/v3_bitst.c
@@ -43,7 +43,7 @@ EXT_BITSTRING(NID_netscape_cert_type, ns_cert_type_table);
 const X509V3_EXT_METHOD v3_key_usage =
 EXT_BITSTRING(NID_key_usage, key_usage_type_table);
 
-STACK_OF(CONF_VALUE) *i2v_ASN1_BIT_STRING(X509V3_EXT_METHOD *method,
+STACK_OF(CONF_VALUE) * __cdecl i2v_ASN1_BIT_STRING(X509V3_EXT_METHOD *method,
                                           ASN1_BIT_STRING *bits,
                                           STACK_OF(CONF_VALUE) *ret)
 {
@@ -55,7 +55,7 @@ STACK_OF(CONF_VALUE) *i2v_ASN1_BIT_STRING(X509V3_EXT_METHOD *method,
     return ret;
 }
 
-ASN1_BIT_STRING *v2i_ASN1_BIT_STRING(X509V3_EXT_METHOD *method,
+ASN1_BIT_STRING * __cdecl v2i_ASN1_BIT_STRING(X509V3_EXT_METHOD *method,
                                      X509V3_CTX *ctx,
                                      STACK_OF(CONF_VALUE) *nval)
 {
diff --git a/crypto/x509v3/v3_conf.c b/crypto/x509v3/v3_conf.c
index 7acaebfa22..130e8f731f 100644
--- a/crypto/x509v3/v3_conf.c
+++ b/crypto/x509v3/v3_conf.c
@@ -24,8 +24,8 @@ static X509_EXTENSION *do_ext_nconf(CONF *conf, X509V3_CTX *ctx, int ext_nid,
 static X509_EXTENSION *v3_generic_extension(const char *ext, const char *value,
                                             int crit, int type,
                                             X509V3_CTX *ctx);
-static char *conf_lhash_get_string(void *db, const char *section, const char *value);
-static STACK_OF(CONF_VALUE) *conf_lhash_get_section(void *db, const char *section);
+static char * __cdecl conf_lhash_get_string(void *db, const char *section, const char *value);
+static STACK_OF(CONF_VALUE) * __cdecl conf_lhash_get_section(void *db, const char *section);
 static X509_EXTENSION *do_ext_i2d(const X509V3_EXT_METHOD *method,
                                   int ext_nid, int crit, void *ext_struc);
 static unsigned char *generic_asn1(const char *value, X509V3_CTX *ctx,
@@ -33,7 +33,7 @@ static unsigned char *generic_asn1(const char *value, X509V3_CTX *ctx,
 /* CONF *conf:  Config file    */
 /* char *name:  Name    */
 /* char *value:  Value    */
-X509_EXTENSION *X509V3_EXT_nconf(CONF *conf, X509V3_CTX *ctx, const char *name,
+X509_EXTENSION * __cdecl X509V3_EXT_nconf(CONF *conf, X509V3_CTX *ctx, const char *name,
                                  const char *value)
 {
     int crit;
@@ -52,7 +52,7 @@ X509_EXTENSION *X509V3_EXT_nconf(CONF *conf, X509V3_CTX *ctx, const char *name,
 
 /* CONF *conf:  Config file    */
 /* char *value:  Value    */
-X509_EXTENSION *X509V3_EXT_nconf_nid(CONF *conf, X509V3_CTX *ctx, int ext_nid,
+X509_EXTENSION * __cdecl X509V3_EXT_nconf_nid(CONF *conf, X509V3_CTX *ctx, int ext_nid,
                                      const char *value)
 {
     int crit;
@@ -174,7 +174,7 @@ static X509_EXTENSION *do_ext_i2d(const X509V3_EXT_METHOD *method,
 
 /* Given an internal structure, nid and critical flag create an extension */
 
-X509_EXTENSION *X509V3_EXT_i2d(int ext_nid, int crit, void *ext_struc)
+X509_EXTENSION * __cdecl X509V3_EXT_i2d(int ext_nid, int crit, void *ext_struc)
 {
     const X509V3_EXT_METHOD *method;
 
@@ -297,7 +297,7 @@ static void delete_ext(STACK_OF(X509_EXTENSION) *sk, X509_EXTENSION *dext)
  * file section to an extension STACK.
  */
 
-int X509V3_EXT_add_nconf_sk(CONF *conf, X509V3_CTX *ctx, const char *section,
+int __cdecl X509V3_EXT_add_nconf_sk(CONF *conf, X509V3_CTX *ctx, const char *section,
                             STACK_OF(X509_EXTENSION) **sk)
 {
     X509_EXTENSION *ext;
@@ -328,7 +328,7 @@ int X509V3_EXT_add_nconf_sk(CONF *conf, X509V3_CTX *ctx, const char *section,
  * Convenience functions to add extensions to a certificate, CRL and request
  */
 
-int X509V3_EXT_add_nconf(CONF *conf, X509V3_CTX *ctx, const char *section,
+int __cdecl X509V3_EXT_add_nconf(CONF *conf, X509V3_CTX *ctx, const char *section,
                          X509 *cert)
 {
     STACK_OF(X509_EXTENSION) **sk = NULL;
@@ -339,7 +339,7 @@ int X509V3_EXT_add_nconf(CONF *conf, X509V3_CTX *ctx, const char *section,
 
 /* Same as above but for a CRL */
 
-int X509V3_EXT_CRL_add_nconf(CONF *conf, X509V3_CTX *ctx, const char *section,
+int __cdecl X509V3_EXT_CRL_add_nconf(CONF *conf, X509V3_CTX *ctx, const char *section,
                              X509_CRL *crl)
 {
     STACK_OF(X509_EXTENSION) **sk = NULL;
@@ -350,7 +350,7 @@ int X509V3_EXT_CRL_add_nconf(CONF *conf, X509V3_CTX *ctx, const char *section,
 
 /* Add extensions to certificate request */
 
-int X509V3_EXT_REQ_add_nconf(CONF *conf, X509V3_CTX *ctx, const char *section,
+int __cdecl X509V3_EXT_REQ_add_nconf(CONF *conf, X509V3_CTX *ctx, const char *section,
                              X509_REQ *req)
 {
     STACK_OF(X509_EXTENSION) *extlist = NULL, **sk = NULL;
@@ -367,7 +367,7 @@ int X509V3_EXT_REQ_add_nconf(CONF *conf, X509V3_CTX *ctx, const char *section,
 
 /* Config database functions */
 
-char *X509V3_get_string(X509V3_CTX *ctx, const char *name, const char *section)
+char * __cdecl X509V3_get_string(X509V3_CTX *ctx, const char *name, const char *section)
 {
     if (!ctx->db || !ctx->db_meth || !ctx->db_meth->get_string) {
         X509V3err(X509V3_F_X509V3_GET_STRING, X509V3_R_OPERATION_NOT_DEFINED);
@@ -378,7 +378,7 @@ char *X509V3_get_string(X509V3_CTX *ctx, const char *name, const char *section)
     return NULL;
 }
 
-STACK_OF(CONF_VALUE) *X509V3_get_section(X509V3_CTX *ctx, const char *section)
+STACK_OF(CONF_VALUE) * __cdecl X509V3_get_section(X509V3_CTX *ctx, const char *section)
 {
     if (!ctx->db || !ctx->db_meth || !ctx->db_meth->get_section) {
         X509V3err(X509V3_F_X509V3_GET_SECTION,
@@ -390,7 +390,7 @@ STACK_OF(CONF_VALUE) *X509V3_get_section(X509V3_CTX *ctx, const char *section)
     return NULL;
 }
 
-void X509V3_string_free(X509V3_CTX *ctx, char *str)
+void __cdecl X509V3_string_free(X509V3_CTX *ctx, char *str)
 {
     if (!str)
         return;
@@ -398,7 +398,7 @@ void X509V3_string_free(X509V3_CTX *ctx, char *str)
         ctx->db_meth->free_string(ctx->db, str);
 }
 
-void X509V3_section_free(X509V3_CTX *ctx, STACK_OF(CONF_VALUE) *section)
+void __cdecl X509V3_section_free(X509V3_CTX *ctx, STACK_OF(CONF_VALUE) *section)
 {
     if (!section)
         return;
@@ -406,12 +406,12 @@ void X509V3_section_free(X509V3_CTX *ctx, STACK_OF(CONF_VALUE) *section)
         ctx->db_meth->free_section(ctx->db, section);
 }
 
-static char *nconf_get_string(void *db, const char *section, const char *value)
+static char * __cdecl nconf_get_string(void *db, const char *section, const char *value)
 {
     return NCONF_get_string(db, section, value);
 }
 
-static STACK_OF(CONF_VALUE) *nconf_get_section(void *db, const char *section)
+static STACK_OF(CONF_VALUE) * __cdecl nconf_get_section(void *db, const char *section)
 {
     return NCONF_get_section(db, section);
 }
@@ -423,13 +423,13 @@ static X509V3_CONF_METHOD nconf_method = {
     NULL
 };
 
-void X509V3_set_nconf(X509V3_CTX *ctx, CONF *conf)
+void __cdecl X509V3_set_nconf(X509V3_CTX *ctx, CONF *conf)
 {
     ctx->db_meth = &nconf_method;
     ctx->db = conf;
 }
 
-void X509V3_set_ctx(X509V3_CTX *ctx, X509 *issuer, X509 *subj, X509_REQ *req,
+void __cdecl X509V3_set_ctx(X509V3_CTX *ctx, X509 *issuer, X509 *subj, X509_REQ *req,
                     X509_CRL *crl, int flags)
 {
     ctx->issuer_cert = issuer;
@@ -441,7 +441,7 @@ void X509V3_set_ctx(X509V3_CTX *ctx, X509 *issuer, X509 *subj, X509_REQ *req,
 
 /* Old conf compatibility functions */
 
-X509_EXTENSION *X509V3_EXT_conf(LHASH_OF(CONF_VALUE) *conf, X509V3_CTX *ctx,
+X509_EXTENSION * __cdecl X509V3_EXT_conf(LHASH_OF(CONF_VALUE) *conf, X509V3_CTX *ctx,
                                 const char *name, const char *value)
 {
     CONF ctmp;
@@ -451,7 +451,7 @@ X509_EXTENSION *X509V3_EXT_conf(LHASH_OF(CONF_VALUE) *conf, X509V3_CTX *ctx,
 
 /* LHASH *conf:  Config file    */
 /* char *value:  Value    */
-X509_EXTENSION *X509V3_EXT_conf_nid(LHASH_OF(CONF_VALUE) *conf,
+X509_EXTENSION * __cdecl X509V3_EXT_conf_nid(LHASH_OF(CONF_VALUE) *conf,
                                     X509V3_CTX *ctx, int ext_nid, const char *value)
 {
     CONF ctmp;
@@ -459,12 +459,12 @@ X509_EXTENSION *X509V3_EXT_conf_nid(LHASH_OF(CONF_VALUE) *conf,
     return X509V3_EXT_nconf_nid(&ctmp, ctx, ext_nid, value);
 }
 
-static char *conf_lhash_get_string(void *db, const char *section, const char *value)
+static char * __cdecl conf_lhash_get_string(void *db, const char *section, const char *value)
 {
     return CONF_get_string(db, section, value);
 }
 
-static STACK_OF(CONF_VALUE) *conf_lhash_get_section(void *db, const char *section)
+static STACK_OF(CONF_VALUE) * __cdecl conf_lhash_get_section(void *db, const char *section)
 {
     return CONF_get_section(db, section);
 }
@@ -476,13 +476,13 @@ static X509V3_CONF_METHOD conf_lhash_method = {
     NULL
 };
 
-void X509V3_set_conf_lhash(X509V3_CTX *ctx, LHASH_OF(CONF_VALUE) *lhash)
+void __cdecl X509V3_set_conf_lhash(X509V3_CTX *ctx, LHASH_OF(CONF_VALUE) *lhash)
 {
     ctx->db_meth = &conf_lhash_method;
     ctx->db = lhash;
 }
 
-int X509V3_EXT_add_conf(LHASH_OF(CONF_VALUE) *conf, X509V3_CTX *ctx,
+int __cdecl X509V3_EXT_add_conf(LHASH_OF(CONF_VALUE) *conf, X509V3_CTX *ctx,
                         const char *section, X509 *cert)
 {
     CONF ctmp;
@@ -492,7 +492,7 @@ int X509V3_EXT_add_conf(LHASH_OF(CONF_VALUE) *conf, X509V3_CTX *ctx,
 
 /* Same as above but for a CRL */
 
-int X509V3_EXT_CRL_add_conf(LHASH_OF(CONF_VALUE) *conf, X509V3_CTX *ctx,
+int __cdecl X509V3_EXT_CRL_add_conf(LHASH_OF(CONF_VALUE) *conf, X509V3_CTX *ctx,
                             const char *section, X509_CRL *crl)
 {
     CONF ctmp;
@@ -502,7 +502,7 @@ int X509V3_EXT_CRL_add_conf(LHASH_OF(CONF_VALUE) *conf, X509V3_CTX *ctx,
 
 /* Add extensions to certificate request */
 
-int X509V3_EXT_REQ_add_conf(LHASH_OF(CONF_VALUE) *conf, X509V3_CTX *ctx,
+int __cdecl X509V3_EXT_REQ_add_conf(LHASH_OF(CONF_VALUE) *conf, X509V3_CTX *ctx,
                             const char *section, X509_REQ *req)
 {
     CONF ctmp;
diff --git a/crypto/x509v3/v3_cpols.c b/crypto/x509v3/v3_cpols.c
index 7a47fd38b3..e3f1e8eb4b 100644
--- a/crypto/x509v3/v3_cpols.c
+++ b/crypto/x509v3/v3_cpols.c
@@ -474,7 +474,7 @@ static void print_notice(BIO *out, USERNOTICE *notice, int indent)
                    notice->exptext->data);
 }
 
-void X509_POLICY_NODE_print(BIO *out, X509_POLICY_NODE *node, int indent)
+void __cdecl X509_POLICY_NODE_print(BIO *out, X509_POLICY_NODE *node, int indent)
 {
     const X509_POLICY_DATA *dat = node->data;
 
diff --git a/crypto/x509v3/v3_crld.c b/crypto/x509v3/v3_crld.c
index 6cba4240ab..5de3e7caad 100644
--- a/crypto/x509v3/v3_crld.c
+++ b/crypto/x509v3/v3_crld.c
@@ -17,9 +17,9 @@
 #include "internal/x509_int.h"
 #include "ext_dat.h"
 
-static void *v2i_crld(const X509V3_EXT_METHOD *method,
+static void * __cdecl v2i_crld(const X509V3_EXT_METHOD *method,
                       X509V3_CTX *ctx, STACK_OF(CONF_VALUE) *nval);
-static int i2r_crldp(const X509V3_EXT_METHOD *method, void *pcrldp, BIO *out,
+static int __cdecl i2r_crldp(const X509V3_EXT_METHOD *method, void *pcrldp, BIO *out,
                      int indent);
 
 const X509V3_EXT_METHOD v3_crld = {
@@ -234,7 +234,7 @@ static DIST_POINT *crldp_from_section(X509V3_CTX *ctx,
     return NULL;
 }
 
-static void *v2i_crld(const X509V3_EXT_METHOD *method,
+static void * __cdecl v2i_crld(const X509V3_EXT_METHOD *method,
                       X509V3_CTX *ctx, STACK_OF(CONF_VALUE) *nval)
 {
     STACK_OF(DIST_POINT) *crld;
@@ -341,9 +341,9 @@ ASN1_SEQUENCE(ISSUING_DIST_POINT) = {
 
 IMPLEMENT_ASN1_FUNCTIONS(ISSUING_DIST_POINT)
 
-static int i2r_idp(const X509V3_EXT_METHOD *method, void *pidp, BIO *out,
+static int __cdecl i2r_idp(const X509V3_EXT_METHOD *method, void *pidp, BIO *out,
                    int indent);
-static void *v2i_idp(const X509V3_EXT_METHOD *method, X509V3_CTX *ctx,
+static void * __cdecl v2i_idp(const X509V3_EXT_METHOD *method, X509V3_CTX *ctx,
                      STACK_OF(CONF_VALUE) *nval);
 
 const X509V3_EXT_METHOD v3_idp = {
@@ -357,7 +357,7 @@ const X509V3_EXT_METHOD v3_idp = {
     NULL
 };
 
-static void *v2i_idp(const X509V3_EXT_METHOD *method, X509V3_CTX *ctx,
+static void * __cdecl v2i_idp(const X509V3_EXT_METHOD *method, X509V3_CTX *ctx,
                      STACK_OF(CONF_VALUE) *nval)
 {
     ISSUING_DIST_POINT *idp = NULL;
@@ -432,7 +432,7 @@ static int print_distpoint(BIO *out, DIST_POINT_NAME *dpn, int indent)
     return 1;
 }
 
-static int i2r_idp(const X509V3_EXT_METHOD *method, void *pidp, BIO *out,
+static int __cdecl i2r_idp(const X509V3_EXT_METHOD *method, void *pidp, BIO *out,
                    int indent)
 {
     ISSUING_DIST_POINT *idp = pidp;
@@ -456,7 +456,7 @@ static int i2r_idp(const X509V3_EXT_METHOD *method, void *pidp, BIO *out,
     return 1;
 }
 
-static int i2r_crldp(const X509V3_EXT_METHOD *method, void *pcrldp, BIO *out,
+static int __cdecl i2r_crldp(const X509V3_EXT_METHOD *method, void *pcrldp, BIO *out,
                      int indent)
 {
     STACK_OF(DIST_POINT) *crld = pcrldp;
@@ -477,7 +477,7 @@ static int i2r_crldp(const X509V3_EXT_METHOD *method, void *pcrldp, BIO *out,
     return 1;
 }
 
-int DIST_POINT_set_dpname(DIST_POINT_NAME *dpn, X509_NAME *iname)
+int __cdecl DIST_POINT_set_dpname(DIST_POINT_NAME *dpn, X509_NAME *iname)
 {
     int i;
     STACK_OF(X509_NAME_ENTRY) *frag;
diff --git a/crypto/x509v3/v3_enum.c b/crypto/x509v3/v3_enum.c
index 3b0f197444..af09309ba7 100644
--- a/crypto/x509v3/v3_enum.c
+++ b/crypto/x509v3/v3_enum.c
@@ -38,7 +38,7 @@ const X509V3_EXT_METHOD v3_crl_reason = {
     crl_reasons
 };
 
-char *i2s_ASN1_ENUMERATED_TABLE(X509V3_EXT_METHOD *method,
+char * __cdecl i2s_ASN1_ENUMERATED_TABLE(X509V3_EXT_METHOD *method,
                                 const ASN1_ENUMERATED *e)
 {
     ENUMERATED_NAMES *enam;
diff --git a/crypto/x509v3/v3_extku.c b/crypto/x509v3/v3_extku.c
index 91b24376ed..244e5dc586 100644
--- a/crypto/x509v3/v3_extku.c
+++ b/crypto/x509v3/v3_extku.c
@@ -14,10 +14,10 @@
 #include <openssl/x509v3.h>
 #include "ext_dat.h"
 
-static void *v2i_EXTENDED_KEY_USAGE(const X509V3_EXT_METHOD *method,
+static void * __cdecl v2i_EXTENDED_KEY_USAGE(const X509V3_EXT_METHOD *method,
                                     X509V3_CTX *ctx,
                                     STACK_OF(CONF_VALUE) *nval);
-static STACK_OF(CONF_VALUE) *i2v_EXTENDED_KEY_USAGE(const X509V3_EXT_METHOD
+static STACK_OF(CONF_VALUE) * __cdecl i2v_EXTENDED_KEY_USAGE(const X509V3_EXT_METHOD
                                                     *method, void *eku, STACK_OF(CONF_VALUE)
                                                     *extlist);
 
@@ -50,7 +50,7 @@ ASN1_ITEM_TEMPLATE_END(EXTENDED_KEY_USAGE)
 
 IMPLEMENT_ASN1_FUNCTIONS(EXTENDED_KEY_USAGE)
 
-static STACK_OF(CONF_VALUE) *i2v_EXTENDED_KEY_USAGE(const X509V3_EXT_METHOD
+static STACK_OF(CONF_VALUE) * __cdecl i2v_EXTENDED_KEY_USAGE(const X509V3_EXT_METHOD
                                                     *method, void *a, STACK_OF(CONF_VALUE)
                                                     *ext_list)
 {
@@ -66,7 +66,7 @@ static STACK_OF(CONF_VALUE) *i2v_EXTENDED_KEY_USAGE(const X509V3_EXT_METHOD
     return ext_list;
 }
 
-static void *v2i_EXTENDED_KEY_USAGE(const X509V3_EXT_METHOD *method,
+static void * __cdecl v2i_EXTENDED_KEY_USAGE(const X509V3_EXT_METHOD *method,
                                     X509V3_CTX *ctx,
                                     STACK_OF(CONF_VALUE) *nval)
 {
diff --git a/crypto/x509v3/v3_genn.c b/crypto/x509v3/v3_genn.c
index 23e3bc4565..97206f9f04 100644
--- a/crypto/x509v3/v3_genn.c
+++ b/crypto/x509v3/v3_genn.c
@@ -50,7 +50,7 @@ ASN1_ITEM_TEMPLATE_END(GENERAL_NAMES)
 
 IMPLEMENT_ASN1_FUNCTIONS(GENERAL_NAMES)
 
-GENERAL_NAME *GENERAL_NAME_dup(GENERAL_NAME *a)
+GENERAL_NAME * __cdecl GENERAL_NAME_dup(GENERAL_NAME *a)
 {
     return (GENERAL_NAME *)ASN1_dup((i2d_of_void *)i2d_GENERAL_NAME,
                                     (d2i_of_void *)d2i_GENERAL_NAME,
@@ -58,7 +58,7 @@ GENERAL_NAME *GENERAL_NAME_dup(GENERAL_NAME *a)
 }
 
 /* Returns 0 if they are equal, != 0 otherwise. */
-int GENERAL_NAME_cmp(GENERAL_NAME *a, GENERAL_NAME *b)
+int __cdecl GENERAL_NAME_cmp(GENERAL_NAME *a, GENERAL_NAME *b)
 {
     int result = -1;
 
@@ -96,7 +96,7 @@ int GENERAL_NAME_cmp(GENERAL_NAME *a, GENERAL_NAME *b)
 }
 
 /* Returns 0 if they are equal, != 0 otherwise. */
-int OTHERNAME_cmp(OTHERNAME *a, OTHERNAME *b)
+int __cdecl OTHERNAME_cmp(OTHERNAME *a, OTHERNAME *b)
 {
     int result = -1;
 
@@ -110,7 +110,7 @@ int OTHERNAME_cmp(OTHERNAME *a, OTHERNAME *b)
     return result;
 }
 
-void GENERAL_NAME_set0_value(GENERAL_NAME *a, int type, void *value)
+void __cdecl GENERAL_NAME_set0_value(GENERAL_NAME *a, int type, void *value)
 {
     switch (type) {
     case GEN_X400:
@@ -143,7 +143,7 @@ void GENERAL_NAME_set0_value(GENERAL_NAME *a, int type, void *value)
     a->type = type;
 }
 
-void *GENERAL_NAME_get0_value(const GENERAL_NAME *a, int *ptype)
+void * __cdecl GENERAL_NAME_get0_value(const GENERAL_NAME *a, int *ptype)
 {
     if (ptype)
         *ptype = a->type;
@@ -174,7 +174,7 @@ void *GENERAL_NAME_get0_value(const GENERAL_NAME *a, int *ptype)
     }
 }
 
-int GENERAL_NAME_set0_othername(GENERAL_NAME *gen,
+int __cdecl GENERAL_NAME_set0_othername(GENERAL_NAME *gen,
                                 ASN1_OBJECT *oid, ASN1_TYPE *value)
 {
     OTHERNAME *oth;
@@ -188,7 +188,7 @@ int GENERAL_NAME_set0_othername(GENERAL_NAME *gen,
     return 1;
 }
 
-int GENERAL_NAME_get0_otherName(const GENERAL_NAME *gen,
+int __cdecl GENERAL_NAME_get0_otherName(const GENERAL_NAME *gen,
                                 ASN1_OBJECT **poid, ASN1_TYPE **pvalue)
 {
     if (gen->type != GEN_OTHERNAME)
diff --git a/crypto/x509v3/v3_ia5.c b/crypto/x509v3/v3_ia5.c
index c1170d4616..6e56a6e01a 100644
--- a/crypto/x509v3/v3_ia5.c
+++ b/crypto/x509v3/v3_ia5.c
@@ -25,7 +25,7 @@ const X509V3_EXT_METHOD v3_ns_ia5_list[8] = {
     EXT_END
 };
 
-char *i2s_ASN1_IA5STRING(X509V3_EXT_METHOD *method, ASN1_IA5STRING *ia5)
+char * __cdecl i2s_ASN1_IA5STRING(X509V3_EXT_METHOD *method, ASN1_IA5STRING *ia5)
 {
     char *tmp;
 
@@ -40,7 +40,7 @@ char *i2s_ASN1_IA5STRING(X509V3_EXT_METHOD *method, ASN1_IA5STRING *ia5)
     return tmp;
 }
 
-ASN1_IA5STRING *s2i_ASN1_IA5STRING(X509V3_EXT_METHOD *method,
+ASN1_IA5STRING * __cdecl s2i_ASN1_IA5STRING(X509V3_EXT_METHOD *method,
                                    X509V3_CTX *ctx, const char *str)
 {
     ASN1_IA5STRING *ia5;
diff --git a/crypto/x509v3/v3_info.c b/crypto/x509v3/v3_info.c
index 7af9e23ae8..b6f7fe4614 100644
--- a/crypto/x509v3/v3_info.c
+++ b/crypto/x509v3/v3_info.c
@@ -155,7 +155,7 @@ static AUTHORITY_INFO_ACCESS *v2i_AUTHORITY_INFO_ACCESS(X509V3_EXT_METHOD
     return NULL;
 }
 
-int i2a_ACCESS_DESCRIPTION(BIO *bp, const ACCESS_DESCRIPTION *a)
+int __cdecl i2a_ACCESS_DESCRIPTION(BIO *bp, const ACCESS_DESCRIPTION *a)
 {
     i2a_ASN1_OBJECT(bp, a->method);
     return 2;
diff --git a/crypto/x509v3/v3_lib.c b/crypto/x509v3/v3_lib.c
index 97c1cbc20f..e1157024a3 100644
--- a/crypto/x509v3/v3_lib.c
+++ b/crypto/x509v3/v3_lib.c
@@ -18,11 +18,11 @@
 
 static STACK_OF(X509V3_EXT_METHOD) *ext_list = NULL;
 
-static int ext_cmp(const X509V3_EXT_METHOD *const *a,
+static int __cdecl ext_cmp(const X509V3_EXT_METHOD *const *a,
                    const X509V3_EXT_METHOD *const *b);
-static void ext_list_free(X509V3_EXT_METHOD *ext);
+static void __cdecl ext_list_free(X509V3_EXT_METHOD *ext);
 
-int X509V3_EXT_add(X509V3_EXT_METHOD *ext)
+int __cdecl X509V3_EXT_add(X509V3_EXT_METHOD *ext)
 {
     if (ext_list == NULL
         && (ext_list = sk_X509V3_EXT_METHOD_new(ext_cmp)) == NULL) {
@@ -36,7 +36,7 @@ int X509V3_EXT_add(X509V3_EXT_METHOD *ext)
     return 1;
 }
 
-static int ext_cmp(const X509V3_EXT_METHOD *const *a,
+static int __cdecl ext_cmp(const X509V3_EXT_METHOD *const *a,
                    const X509V3_EXT_METHOD *const *b)
 {
     return ((*a)->ext_nid - (*b)->ext_nid);
@@ -49,7 +49,7 @@ IMPLEMENT_OBJ_BSEARCH_CMP_FN(const X509V3_EXT_METHOD *,
 
 #include "standard_exts.h"
 
-const X509V3_EXT_METHOD *X509V3_EXT_get_nid(int nid)
+const X509V3_EXT_METHOD * __cdecl X509V3_EXT_get_nid(int nid)
 {
     X509V3_EXT_METHOD tmp;
     const X509V3_EXT_METHOD *t = &tmp, *const *ret;
@@ -67,7 +67,7 @@ const X509V3_EXT_METHOD *X509V3_EXT_get_nid(int nid)
     return sk_X509V3_EXT_METHOD_value(ext_list, idx);
 }
 
-const X509V3_EXT_METHOD *X509V3_EXT_get(X509_EXTENSION *ext)
+const X509V3_EXT_METHOD * __cdecl X509V3_EXT_get(X509_EXTENSION *ext)
 {
     int nid;
     if ((nid = OBJ_obj2nid(X509_EXTENSION_get_object(ext))) == NID_undef)
@@ -75,7 +75,7 @@ const X509V3_EXT_METHOD *X509V3_EXT_get(X509_EXTENSION *ext)
     return X509V3_EXT_get_nid(nid);
 }
 
-int X509V3_EXT_add_list(X509V3_EXT_METHOD *extlist)
+int __cdecl X509V3_EXT_add_list(X509V3_EXT_METHOD *extlist)
 {
     for (; extlist->ext_nid != -1; extlist++)
         if (!X509V3_EXT_add(extlist))
@@ -83,7 +83,7 @@ int X509V3_EXT_add_list(X509V3_EXT_METHOD *extlist)
     return 1;
 }
 
-int X509V3_EXT_add_alias(int nid_to, int nid_from)
+int __cdecl X509V3_EXT_add_alias(int nid_to, int nid_from)
 {
     const X509V3_EXT_METHOD *ext;
     X509V3_EXT_METHOD *tmpext;
@@ -102,13 +102,13 @@ int X509V3_EXT_add_alias(int nid_to, int nid_from)
     return X509V3_EXT_add(tmpext);
 }
 
-void X509V3_EXT_cleanup(void)
+void __cdecl X509V3_EXT_cleanup(void)
 {
     sk_X509V3_EXT_METHOD_pop_free(ext_list, ext_list_free);
     ext_list = NULL;
 }
 
-static void ext_list_free(X509V3_EXT_METHOD *ext)
+static void __cdecl ext_list_free(X509V3_EXT_METHOD *ext)
 {
     if (ext->ext_flags & X509V3_EXT_DYNAMIC)
         OPENSSL_free(ext);
@@ -119,14 +119,14 @@ static void ext_list_free(X509V3_EXT_METHOD *ext)
  * they are now kept in ext_dat.h.
  */
 
-int X509V3_add_standard_extensions(void)
+int __cdecl X509V3_add_standard_extensions(void)
 {
     return 1;
 }
 
 /* Return an extension internal structure */
 
-void *X509V3_EXT_d2i(X509_EXTENSION *ext)
+void * __cdecl X509V3_EXT_d2i(X509_EXTENSION *ext)
 {
     const X509V3_EXT_METHOD *method;
     const unsigned char *p;
@@ -159,7 +159,7 @@ void *X509V3_EXT_d2i(X509_EXTENSION *ext)
  * -2 extension occurs more than once.
  */
 
-void *X509V3_get_d2i(const STACK_OF(X509_EXTENSION) *x, int nid, int *crit,
+void * __cdecl X509V3_get_d2i(const STACK_OF(X509_EXTENSION) *x, int nid, int *crit,
                      int *idx)
 {
     int lastpos, i;
@@ -215,7 +215,7 @@ void *X509V3_get_d2i(const STACK_OF(X509_EXTENSION) *x, int nid, int *crit,
  * 'value' arguments (if relevant) are the extensions internal structure.
  */
 
-int X509V3_add1_i2d(STACK_OF(X509_EXTENSION) **x, int nid, void *value,
+int __cdecl X509V3_add1_i2d(STACK_OF(X509_EXTENSION) **x, int nid, void *value,
                     int crit, unsigned long flags)
 {
     int errcode, extidx = -1;
diff --git a/crypto/x509v3/v3_ncons.c b/crypto/x509v3/v3_ncons.c
index 9a2cd5af00..e208faf3c3 100644
--- a/crypto/x509v3/v3_ncons.c
+++ b/crypto/x509v3/v3_ncons.c
@@ -18,10 +18,10 @@
 #include "internal/x509_int.h"
 #include "ext_dat.h"
 
-static void *v2i_NAME_CONSTRAINTS(const X509V3_EXT_METHOD *method,
+static void * __cdecl v2i_NAME_CONSTRAINTS(const X509V3_EXT_METHOD *method,
                                   X509V3_CTX *ctx,
                                   STACK_OF(CONF_VALUE) *nval);
-static int i2r_NAME_CONSTRAINTS(const X509V3_EXT_METHOD *method, void *a,
+static int __cdecl i2r_NAME_CONSTRAINTS(const X509V3_EXT_METHOD *method, void *a,
                                 BIO *bp, int ind);
 static int do_i2r_name_constraints(const X509V3_EXT_METHOD *method,
                                    STACK_OF(GENERAL_SUBTREE) *trees, BIO *bp,
@@ -103,7 +103,7 @@ static int ia5casecmp(const char *s1, const char *s2)
     return ia5ncasecmp(s1, s2, SIZE_MAX);
 }
 
-static void *v2i_NAME_CONSTRAINTS(const X509V3_EXT_METHOD *method,
+static void * __cdecl v2i_NAME_CONSTRAINTS(const X509V3_EXT_METHOD *method,
                                   X509V3_CTX *ctx, STACK_OF(CONF_VALUE) *nval)
 {
     int i;
@@ -151,7 +151,7 @@ static void *v2i_NAME_CONSTRAINTS(const X509V3_EXT_METHOD *method,
     return NULL;
 }
 
-static int i2r_NAME_CONSTRAINTS(const X509V3_EXT_METHOD *method, void *a,
+static int __cdecl i2r_NAME_CONSTRAINTS(const X509V3_EXT_METHOD *method, void *a,
                                 BIO *bp, int ind)
 {
     NAME_CONSTRAINTS *ncons = a;
@@ -234,7 +234,7 @@ static int add_lengths(int *out, int a, int b)
  *  X509_V_ERR_UNSUPPORTED_NAME_SYNTAX: bad or unsupported syntax of name
  */
 
-int NAME_CONSTRAINTS_check(X509 *x, NAME_CONSTRAINTS *nc)
+int __cdecl NAME_CONSTRAINTS_check(X509 *x, NAME_CONSTRAINTS *nc)
 {
     int r, i, name_count, constraint_count;
     X509_NAME *nm;
@@ -393,7 +393,7 @@ static int cn2dnsid(ASN1_STRING *cn, unsigned char **dnsid, size_t *idlen)
 /*
  * Check CN against DNS-ID name constraints.
  */
-int NAME_CONSTRAINTS_check_CN(X509 *x, NAME_CONSTRAINTS *nc)
+int __cdecl NAME_CONSTRAINTS_check_CN(X509 *x, NAME_CONSTRAINTS *nc)
 {
     int r, i;
     X509_NAME *nm = X509_get_subject_name(x);
diff --git a/crypto/x509v3/v3_pcons.c b/crypto/x509v3/v3_pcons.c
index 24f7ff49e5..313eb9e129 100644
--- a/crypto/x509v3/v3_pcons.c
+++ b/crypto/x509v3/v3_pcons.c
@@ -15,10 +15,10 @@
 #include <openssl/x509v3.h>
 #include "ext_dat.h"
 
-static STACK_OF(CONF_VALUE) *i2v_POLICY_CONSTRAINTS(const X509V3_EXT_METHOD
+static STACK_OF(CONF_VALUE) * __cdecl i2v_POLICY_CONSTRAINTS(const X509V3_EXT_METHOD
                                                     *method, void *bcons, STACK_OF(CONF_VALUE)
                                                     *extlist);
-static void *v2i_POLICY_CONSTRAINTS(const X509V3_EXT_METHOD *method,
+static void * __cdecl v2i_POLICY_CONSTRAINTS(const X509V3_EXT_METHOD *method,
                                     X509V3_CTX *ctx,
                                     STACK_OF(CONF_VALUE) *values);
 
@@ -40,7 +40,7 @@ ASN1_SEQUENCE(POLICY_CONSTRAINTS) = {
 
 IMPLEMENT_ASN1_ALLOC_FUNCTIONS(POLICY_CONSTRAINTS)
 
-static STACK_OF(CONF_VALUE) *i2v_POLICY_CONSTRAINTS(const X509V3_EXT_METHOD
+static STACK_OF(CONF_VALUE) * __cdecl i2v_POLICY_CONSTRAINTS(const X509V3_EXT_METHOD
                                                     *method, void *a, STACK_OF(CONF_VALUE)
                                                     *extlist)
 {
@@ -52,7 +52,7 @@ static STACK_OF(CONF_VALUE) *i2v_POLICY_CONSTRAINTS(const X509V3_EXT_METHOD
     return extlist;
 }
 
-static void *v2i_POLICY_CONSTRAINTS(const X509V3_EXT_METHOD *method,
+static void * __cdecl v2i_POLICY_CONSTRAINTS(const X509V3_EXT_METHOD *method,
                                     X509V3_CTX *ctx,
                                     STACK_OF(CONF_VALUE) *values)
 {
diff --git a/crypto/x509v3/v3_pmaps.c b/crypto/x509v3/v3_pmaps.c
index 5b6a2af0fb..cc6cb0caeb 100644
--- a/crypto/x509v3/v3_pmaps.c
+++ b/crypto/x509v3/v3_pmaps.c
@@ -14,9 +14,9 @@
 #include <openssl/x509v3.h>
 #include "ext_dat.h"
 
-static void *v2i_POLICY_MAPPINGS(const X509V3_EXT_METHOD *method,
+static void * __cdecl v2i_POLICY_MAPPINGS(const X509V3_EXT_METHOD *method,
                                  X509V3_CTX *ctx, STACK_OF(CONF_VALUE) *nval);
-static STACK_OF(CONF_VALUE) *i2v_POLICY_MAPPINGS(const X509V3_EXT_METHOD
+static STACK_OF(CONF_VALUE) * __cdecl i2v_POLICY_MAPPINGS(const X509V3_EXT_METHOD
                                                  *method, void *pmps, STACK_OF(CONF_VALUE)
                                                  *extlist);
 
@@ -43,7 +43,7 @@ ASN1_ITEM_TEMPLATE_END(POLICY_MAPPINGS)
 
 IMPLEMENT_ASN1_ALLOC_FUNCTIONS(POLICY_MAPPING)
 
-static STACK_OF(CONF_VALUE) *i2v_POLICY_MAPPINGS(const X509V3_EXT_METHOD
+static STACK_OF(CONF_VALUE) * __cdecl i2v_POLICY_MAPPINGS(const X509V3_EXT_METHOD
                                                  *method, void *a, STACK_OF(CONF_VALUE)
                                                  *ext_list)
 {
@@ -62,7 +62,7 @@ static STACK_OF(CONF_VALUE) *i2v_POLICY_MAPPINGS(const X509V3_EXT_METHOD
     return ext_list;
 }
 
-static void *v2i_POLICY_MAPPINGS(const X509V3_EXT_METHOD *method,
+static void * __cdecl v2i_POLICY_MAPPINGS(const X509V3_EXT_METHOD *method,
                                  X509V3_CTX *ctx, STACK_OF(CONF_VALUE) *nval)
 {
     POLICY_MAPPING *pmap = NULL;
diff --git a/crypto/x509v3/v3_prn.c b/crypto/x509v3/v3_prn.c
index f384c342ac..6ad337701e 100644
--- a/crypto/x509v3/v3_prn.c
+++ b/crypto/x509v3/v3_prn.c
@@ -21,7 +21,7 @@ static int unknown_ext_print(BIO *out, const unsigned char *ext, int extlen,
 
 /* Print out a name+value stack */
 
-void X509V3_EXT_val_prn(BIO *out, STACK_OF(CONF_VALUE) *val, int indent,
+void __cdecl X509V3_EXT_val_prn(BIO *out, STACK_OF(CONF_VALUE) *val, int indent,
                         int ml)
 {
     int i;
@@ -66,7 +66,7 @@ void X509V3_EXT_val_prn(BIO *out, STACK_OF(CONF_VALUE) *val, int indent,
 
 /* Main routine: print out a general extension */
 
-int X509V3_EXT_print(BIO *out, X509_EXTENSION *ext, unsigned long flag,
+int __cdecl X509V3_EXT_print(BIO *out, X509_EXTENSION *ext, unsigned long flag,
                      int indent)
 {
     void *ext_str = NULL;
@@ -135,7 +135,7 @@ int X509V3_EXT_print(BIO *out, X509_EXTENSION *ext, unsigned long flag,
     return ok;
 }
 
-int X509V3_extensions_print(BIO *bp, const char *title,
+int __cdecl X509V3_extensions_print(BIO *bp, const char *title,
                             const STACK_OF(X509_EXTENSION) *exts,
                             unsigned long flag, int indent)
 {
@@ -196,7 +196,7 @@ static int unknown_ext_print(BIO *out, const unsigned char *ext, int extlen,
 }
 
 #ifndef OPENSSL_NO_STDIO
-int X509V3_EXT_print_fp(FILE *fp, X509_EXTENSION *ext, int flag, int indent)
+int __cdecl X509V3_EXT_print_fp(FILE *fp, X509_EXTENSION *ext, int flag, int indent)
 {
     BIO *bio_tmp;
     int ret;
diff --git a/crypto/x509v3/v3_purp.c b/crypto/x509v3/v3_purp.c
index 2f06289d19..80d9919b38 100644
--- a/crypto/x509v3/v3_purp.c
+++ b/crypto/x509v3/v3_purp.c
@@ -36,8 +36,8 @@ static int check_purpose_timestamp_sign(const X509_PURPOSE *xp, const X509 *x,
 static int no_check(const X509_PURPOSE *xp, const X509 *x, int ca);
 static int ocsp_helper(const X509_PURPOSE *xp, const X509 *x, int ca);
 
-static int xp_cmp(const X509_PURPOSE *const *a, const X509_PURPOSE *const *b);
-static void xptable_free(X509_PURPOSE *p);
+static int __cdecl xp_cmp(const X509_PURPOSE *const *a, const X509_PURPOSE *const *b);
+static void __cdecl xptable_free(X509_PURPOSE *p);
 
 static X509_PURPOSE xstandard[] = {
     {X509_PURPOSE_SSL_CLIENT, X509_TRUST_SSL_CLIENT, 0,
@@ -65,7 +65,7 @@ static X509_PURPOSE xstandard[] = {
 
 static STACK_OF(X509_PURPOSE) *xptable = NULL;
 
-static int xp_cmp(const X509_PURPOSE *const *a, const X509_PURPOSE *const *b)
+static int __cdecl xp_cmp(const X509_PURPOSE *const *a, const X509_PURPOSE *const *b)
 {
     return (*a)->purpose - (*b)->purpose;
 }
@@ -75,7 +75,7 @@ static int xp_cmp(const X509_PURPOSE *const *a, const X509_PURPOSE *const *b)
  * really can't because it does recalculate hashes and do other non-const
  * things.
  */
-int X509_check_purpose(X509 *x, int id, int ca)
+int __cdecl X509_check_purpose(X509 *x, int id, int ca)
 {
     int idx;
     const X509_PURPOSE *pt;
@@ -92,7 +92,7 @@ int X509_check_purpose(X509 *x, int id, int ca)
     return pt->check_purpose(pt, x, ca);
 }
 
-int X509_PURPOSE_set(int *p, int purpose)
+int __cdecl X509_PURPOSE_set(int *p, int purpose)
 {
     if (X509_PURPOSE_get_by_id(purpose) == -1) {
         X509V3err(X509V3_F_X509_PURPOSE_SET, X509V3_R_INVALID_PURPOSE);
@@ -102,14 +102,14 @@ int X509_PURPOSE_set(int *p, int purpose)
     return 1;
 }
 
-int X509_PURPOSE_get_count(void)
+int __cdecl X509_PURPOSE_get_count(void)
 {
     if (!xptable)
         return X509_PURPOSE_COUNT;
     return sk_X509_PURPOSE_num(xptable) + X509_PURPOSE_COUNT;
 }
 
-X509_PURPOSE *X509_PURPOSE_get0(int idx)
+X509_PURPOSE * __cdecl X509_PURPOSE_get0(int idx)
 {
     if (idx < 0)
         return NULL;
@@ -118,7 +118,7 @@ X509_PURPOSE *X509_PURPOSE_get0(int idx)
     return sk_X509_PURPOSE_value(xptable, idx - X509_PURPOSE_COUNT);
 }
 
-int X509_PURPOSE_get_by_sname(const char *sname)
+int __cdecl X509_PURPOSE_get_by_sname(const char *sname)
 {
     int i;
     X509_PURPOSE *xptmp;
@@ -130,7 +130,7 @@ int X509_PURPOSE_get_by_sname(const char *sname)
     return -1;
 }
 
-int X509_PURPOSE_get_by_id(int purpose)
+int __cdecl X509_PURPOSE_get_by_id(int purpose)
 {
     X509_PURPOSE tmp;
     int idx;
@@ -146,7 +146,7 @@ int X509_PURPOSE_get_by_id(int purpose)
     return idx + X509_PURPOSE_COUNT;
 }
 
-int X509_PURPOSE_add(int id, int trust, int flags,
+int __cdecl X509_PURPOSE_add(int id, int trust, int flags,
                      int (*ck) (const X509_PURPOSE *, const X509 *, int),
                      const char *name, const char *sname, void *arg)
 {
@@ -214,7 +214,7 @@ int X509_PURPOSE_add(int id, int trust, int flags,
     return 0;
 }
 
-static void xptable_free(X509_PURPOSE *p)
+static void __cdecl xptable_free(X509_PURPOSE *p)
 {
     if (!p)
         return;
@@ -227,33 +227,33 @@ static void xptable_free(X509_PURPOSE *p)
     }
 }
 
-void X509_PURPOSE_cleanup(void)
+void __cdecl X509_PURPOSE_cleanup(void)
 {
     sk_X509_PURPOSE_pop_free(xptable, xptable_free);
     xptable = NULL;
 }
 
-int X509_PURPOSE_get_id(const X509_PURPOSE *xp)
+int __cdecl X509_PURPOSE_get_id(const X509_PURPOSE *xp)
 {
     return xp->purpose;
 }
 
-char *X509_PURPOSE_get0_name(const X509_PURPOSE *xp)
+char * __cdecl X509_PURPOSE_get0_name(const X509_PURPOSE *xp)
 {
     return xp->name;
 }
 
-char *X509_PURPOSE_get0_sname(const X509_PURPOSE *xp)
+char * __cdecl X509_PURPOSE_get0_sname(const X509_PURPOSE *xp)
 {
     return xp->sname;
 }
 
-int X509_PURPOSE_get_trust(const X509_PURPOSE *xp)
+int __cdecl X509_PURPOSE_get_trust(const X509_PURPOSE *xp)
 {
     return xp->trust;
 }
 
-static int nid_cmp(const int *a, const int *b)
+static int __cdecl nid_cmp(const int *a, const int *b)
 {
     return *a - *b;
 }
@@ -261,7 +261,7 @@ static int nid_cmp(const int *a, const int *b)
 DECLARE_OBJ_BSEARCH_CMP_FN(int, int, nid);
 IMPLEMENT_OBJ_BSEARCH_CMP_FN(int, int, nid);
 
-int X509_supported_extension(X509_EXTENSION *ex)
+int __cdecl X509_supported_extension(X509_EXTENSION *ex)
 {
     /*
      * This table is a list of the NIDs of supported extensions: that is
@@ -549,17 +549,17 @@ static int check_ca(const X509 *x)
     }
 }
 
-void X509_set_proxy_flag(X509 *x)
+void __cdecl X509_set_proxy_flag(X509 *x)
 {
     x->ex_flags |= EXFLAG_PROXY;
 }
 
-void X509_set_proxy_pathlen(X509 *x, long l)
+void __cdecl X509_set_proxy_pathlen(X509 *x, long l)
 {
     x->ex_pcpathlen = l;
 }
 
-int X509_check_ca(X509 *x)
+int __cdecl X509_check_ca(X509 *x)
 {
     x509v3_cache_extensions(x);
 
@@ -770,7 +770,7 @@ static int no_check(const X509_PURPOSE *xp, const X509 *x, int ca)
  * codes for X509_verify_cert()
  */
 
-int X509_check_issued(X509 *issuer, X509 *subject)
+int __cdecl X509_check_issued(X509 *issuer, X509 *subject)
 {
     if (X509_NAME_cmp(X509_get_subject_name(issuer),
                       X509_get_issuer_name(subject)))
@@ -793,7 +793,7 @@ int X509_check_issued(X509 *issuer, X509 *subject)
     return X509_V_OK;
 }
 
-int X509_check_akid(X509 *issuer, AUTHORITY_KEYID *akid)
+int __cdecl X509_check_akid(X509 *issuer, AUTHORITY_KEYID *akid)
 {
 
     if (!akid)
@@ -832,14 +832,14 @@ int X509_check_akid(X509 *issuer, AUTHORITY_KEYID *akid)
     return X509_V_OK;
 }
 
-uint32_t X509_get_extension_flags(X509 *x)
+uint32_t __cdecl X509_get_extension_flags(X509 *x)
 {
     /* Call for side-effect of computing hash and caching extensions */
     X509_check_purpose(x, -1, -1);
     return x->ex_flags;
 }
 
-uint32_t X509_get_key_usage(X509 *x)
+uint32_t __cdecl X509_get_key_usage(X509 *x)
 {
     /* Call for side-effect of computing hash and caching extensions */
     X509_check_purpose(x, -1, -1);
@@ -848,7 +848,7 @@ uint32_t X509_get_key_usage(X509 *x)
     return UINT32_MAX;
 }
 
-uint32_t X509_get_extended_key_usage(X509 *x)
+uint32_t __cdecl X509_get_extended_key_usage(X509 *x)
 {
     /* Call for side-effect of computing hash and caching extensions */
     X509_check_purpose(x, -1, -1);
@@ -857,35 +857,35 @@ uint32_t X509_get_extended_key_usage(X509 *x)
     return UINT32_MAX;
 }
 
-const ASN1_OCTET_STRING *X509_get0_subject_key_id(X509 *x)
+const ASN1_OCTET_STRING * __cdecl X509_get0_subject_key_id(X509 *x)
 {
     /* Call for side-effect of computing hash and caching extensions */
     X509_check_purpose(x, -1, -1);
     return x->skid;
 }
 
-const ASN1_OCTET_STRING *X509_get0_authority_key_id(X509 *x)
+const ASN1_OCTET_STRING * __cdecl X509_get0_authority_key_id(X509 *x)
 {
     /* Call for side-effect of computing hash and caching extensions */
     X509_check_purpose(x, -1, -1);
     return (x->akid != NULL ? x->akid->keyid : NULL);
 }
 
-const GENERAL_NAMES *X509_get0_authority_issuer(X509 *x)
+const GENERAL_NAMES * __cdecl X509_get0_authority_issuer(X509 *x)
 {
     /* Call for side-effect of computing hash and caching extensions */
     X509_check_purpose(x, -1, -1);
     return (x->akid != NULL ? x->akid->issuer : NULL);
 }
 
-const ASN1_INTEGER *X509_get0_authority_serial(X509 *x)
+const ASN1_INTEGER * __cdecl X509_get0_authority_serial(X509 *x)
 {
     /* Call for side-effect of computing hash and caching extensions */
     X509_check_purpose(x, -1, -1);
     return (x->akid != NULL ? x->akid->serial : NULL);
 }
 
-long X509_get_pathlen(X509 *x)
+long __cdecl X509_get_pathlen(X509 *x)
 {
     /* Called for side effect of caching extensions */
     if (X509_check_purpose(x, -1, -1) != 1
@@ -894,7 +894,7 @@ long X509_get_pathlen(X509 *x)
     return x->ex_pathlen;
 }
 
-long X509_get_proxy_pathlen(X509 *x)
+long __cdecl X509_get_proxy_pathlen(X509 *x)
 {
     /* Called for side effect of caching extensions */
     if (X509_check_purpose(x, -1, -1) != 1
diff --git a/crypto/x509v3/v3_skey.c b/crypto/x509v3/v3_skey.c
index 749f51b2f0..af3a006e63 100644
--- a/crypto/x509v3/v3_skey.c
+++ b/crypto/x509v3/v3_skey.c
@@ -24,13 +24,13 @@ const X509V3_EXT_METHOD v3_skey_id = {
     NULL
 };
 
-char *i2s_ASN1_OCTET_STRING(X509V3_EXT_METHOD *method,
+char * __cdecl i2s_ASN1_OCTET_STRING(X509V3_EXT_METHOD *method,
                             const ASN1_OCTET_STRING *oct)
 {
     return OPENSSL_buf2hexstr(oct->data, oct->length);
 }
 
-ASN1_OCTET_STRING *s2i_ASN1_OCTET_STRING(X509V3_EXT_METHOD *method,
+ASN1_OCTET_STRING * __cdecl s2i_ASN1_OCTET_STRING(X509V3_EXT_METHOD *method,
                                          X509V3_CTX *ctx, const char *str)
 {
     ASN1_OCTET_STRING *oct;
diff --git a/crypto/x509v3/v3_sxnet.c b/crypto/x509v3/v3_sxnet.c
index 89cda01be2..945fcc9d70 100644
--- a/crypto/x509v3/v3_sxnet.c
+++ b/crypto/x509v3/v3_sxnet.c
@@ -101,7 +101,7 @@ static SXNET *sxnet_v2i(X509V3_EXT_METHOD *method, X509V3_CTX *ctx,
 
 /* Add an id given the zone as an ASCII number */
 
-int SXNET_add_id_asc(SXNET **psx, const char *zone, const char *user, int userlen)
+int __cdecl SXNET_add_id_asc(SXNET **psx, const char *zone, const char *user, int userlen)
 {
     ASN1_INTEGER *izone;
 
@@ -114,7 +114,7 @@ int SXNET_add_id_asc(SXNET **psx, const char *zone, const char *user, int userle
 
 /* Add an id given the zone as an unsigned long */
 
-int SXNET_add_id_ulong(SXNET **psx, unsigned long lzone, const char *user,
+int __cdecl SXNET_add_id_ulong(SXNET **psx, unsigned long lzone, const char *user,
                        int userlen)
 {
     ASN1_INTEGER *izone;
@@ -134,7 +134,7 @@ int SXNET_add_id_ulong(SXNET **psx, unsigned long lzone, const char *user,
  * passed integer and doesn't make a copy so don't free it up afterwards.
  */
 
-int SXNET_add_id_INTEGER(SXNET **psx, ASN1_INTEGER *zone, const char *user,
+int __cdecl SXNET_add_id_INTEGER(SXNET **psx, ASN1_INTEGER *zone, const char *user,
                          int userlen)
 {
     SXNET *sx = NULL;
@@ -183,7 +183,7 @@ int SXNET_add_id_INTEGER(SXNET **psx, ASN1_INTEGER *zone, const char *user,
     return 0;
 }
 
-ASN1_OCTET_STRING *SXNET_get_id_asc(SXNET *sx, const char *zone)
+ASN1_OCTET_STRING * __cdecl SXNET_get_id_asc(SXNET *sx, const char *zone)
 {
     ASN1_INTEGER *izone;
     ASN1_OCTET_STRING *oct;
@@ -197,7 +197,7 @@ ASN1_OCTET_STRING *SXNET_get_id_asc(SXNET *sx, const char *zone)
     return oct;
 }
 
-ASN1_OCTET_STRING *SXNET_get_id_ulong(SXNET *sx, unsigned long lzone)
+ASN1_OCTET_STRING * __cdecl SXNET_get_id_ulong(SXNET *sx, unsigned long lzone)
 {
     ASN1_INTEGER *izone;
     ASN1_OCTET_STRING *oct;
@@ -213,7 +213,7 @@ ASN1_OCTET_STRING *SXNET_get_id_ulong(SXNET *sx, unsigned long lzone)
     return oct;
 }
 
-ASN1_OCTET_STRING *SXNET_get_id_INTEGER(SXNET *sx, ASN1_INTEGER *zone)
+ASN1_OCTET_STRING * __cdecl SXNET_get_id_INTEGER(SXNET *sx, ASN1_INTEGER *zone)
 {
     SXNETID *id;
     int i;
diff --git a/crypto/x509v3/v3_utl.c b/crypto/x509v3/v3_utl.c
index c9b40d2c76..572f35f9df 100644
--- a/crypto/x509v3/v3_utl.c
+++ b/crypto/x509v3/v3_utl.c
@@ -21,10 +21,10 @@
 #include "ext_dat.h"
 
 static char *strip_spaces(char *name);
-static int sk_strcmp(const char *const *a, const char *const *b);
+static int __cdecl sk_strcmp(const char *const *a, const char *const *b);
 static STACK_OF(OPENSSL_STRING) *get_email(X509_NAME *name,
                                            GENERAL_NAMES *gens);
-static void str_free(OPENSSL_STRING str);
+static void __cdecl str_free(OPENSSL_STRING str);
 static int append_ia5(STACK_OF(OPENSSL_STRING) **sk, const ASN1_IA5STRING *email);
 
 static int ipv4_from_asc(unsigned char *v4, const char *in);
@@ -34,7 +34,7 @@ static int ipv6_hex(unsigned char *out, const char *in, int inlen);
 
 /* Add a CONF_VALUE name value pair to stack */
 
-int X509V3_add_value(const char *name, const char *value,
+int __cdecl X509V3_add_value(const char *name, const char *value,
                      STACK_OF(CONF_VALUE) **extlist)
 {
     CONF_VALUE *vtmp = NULL;
@@ -67,7 +67,7 @@ int X509V3_add_value(const char *name, const char *value,
     return 0;
 }
 
-int X509V3_add_value_uchar(const char *name, const unsigned char *value,
+int __cdecl X509V3_add_value_uchar(const char *name, const unsigned char *value,
                            STACK_OF(CONF_VALUE) **extlist)
 {
     return X509V3_add_value(name, (const char *)value, extlist);
@@ -75,7 +75,7 @@ int X509V3_add_value_uchar(const char *name, const unsigned char *value,
 
 /* Free function for STACK_OF(CONF_VALUE) */
 
-void X509V3_conf_free(CONF_VALUE *conf)
+void __cdecl X509V3_conf_free(CONF_VALUE *conf)
 {
     if (!conf)
         return;
@@ -85,7 +85,7 @@ void X509V3_conf_free(CONF_VALUE *conf)
     OPENSSL_free(conf);
 }
 
-int X509V3_add_value_bool(const char *name, int asn1_bool,
+int __cdecl X509V3_add_value_bool(const char *name, int asn1_bool,
                           STACK_OF(CONF_VALUE) **extlist)
 {
     if (asn1_bool)
@@ -93,7 +93,7 @@ int X509V3_add_value_bool(const char *name, int asn1_bool,
     return X509V3_add_value(name, "FALSE", extlist);
 }
 
-int X509V3_add_value_bool_nf(const char *name, int asn1_bool,
+int __cdecl X509V3_add_value_bool_nf(const char *name, int asn1_bool,
                              STACK_OF(CONF_VALUE) **extlist)
 {
     if (asn1_bool)
@@ -138,7 +138,7 @@ static char *bignum_to_string(const BIGNUM *bn)
     return ret;
 }
 
-char *i2s_ASN1_ENUMERATED(X509V3_EXT_METHOD *method, const ASN1_ENUMERATED *a)
+char * __cdecl i2s_ASN1_ENUMERATED(X509V3_EXT_METHOD *method, const ASN1_ENUMERATED *a)
 {
     BIGNUM *bntmp = NULL;
     char *strtmp = NULL;
@@ -152,7 +152,7 @@ char *i2s_ASN1_ENUMERATED(X509V3_EXT_METHOD *method, const ASN1_ENUMERATED *a)
     return strtmp;
 }
 
-char *i2s_ASN1_INTEGER(X509V3_EXT_METHOD *method, const ASN1_INTEGER *a)
+char * __cdecl i2s_ASN1_INTEGER(X509V3_EXT_METHOD *method, const ASN1_INTEGER *a)
 {
     BIGNUM *bntmp = NULL;
     char *strtmp = NULL;
@@ -166,7 +166,7 @@ char *i2s_ASN1_INTEGER(X509V3_EXT_METHOD *method, const ASN1_INTEGER *a)
     return strtmp;
 }
 
-ASN1_INTEGER *s2i_ASN1_INTEGER(X509V3_EXT_METHOD *method, const char *value)
+ASN1_INTEGER * __cdecl s2i_ASN1_INTEGER(X509V3_EXT_METHOD *method, const char *value)
 {
     BIGNUM *bn = NULL;
     ASN1_INTEGER *aint;
@@ -219,7 +219,7 @@ ASN1_INTEGER *s2i_ASN1_INTEGER(X509V3_EXT_METHOD *method, const char *value)
     return aint;
 }
 
-int X509V3_add_value_int(const char *name, const ASN1_INTEGER *aint,
+int __cdecl X509V3_add_value_int(const char *name, const ASN1_INTEGER *aint,
                          STACK_OF(CONF_VALUE) **extlist)
 {
     char *strtmp;
@@ -234,7 +234,7 @@ int X509V3_add_value_int(const char *name, const ASN1_INTEGER *aint,
     return ret;
 }
 
-int X509V3_get_value_bool(const CONF_VALUE *value, int *asn1_bool)
+int __cdecl X509V3_get_value_bool(const CONF_VALUE *value, int *asn1_bool)
 {
     const char *btmp;
 
@@ -265,7 +265,7 @@ int X509V3_get_value_bool(const CONF_VALUE *value, int *asn1_bool)
     return 0;
 }
 
-int X509V3_get_value_int(const CONF_VALUE *value, ASN1_INTEGER **aint)
+int __cdecl X509V3_get_value_int(const CONF_VALUE *value, ASN1_INTEGER **aint)
 {
     ASN1_INTEGER *itmp;
 
@@ -284,7 +284,7 @@ int X509V3_get_value_int(const CONF_VALUE *value, ASN1_INTEGER **aint)
  * #define DEBUG
  */
 
-STACK_OF(CONF_VALUE) *X509V3_parse_list(const char *line)
+STACK_OF(CONF_VALUE) * __cdecl X509V3_parse_list(const char *line)
 {
     char *p, *q, c;
     char *ntmp, *vtmp;
@@ -410,12 +410,12 @@ int name_cmp(const char *name, const char *cmp)
     return 1;
 }
 
-static int sk_strcmp(const char *const *a, const char *const *b)
+static int __cdecl sk_strcmp(const char *const *a, const char *const *b)
 {
     return strcmp(*a, *b);
 }
 
-STACK_OF(OPENSSL_STRING) *X509_get1_email(X509 *x)
+STACK_OF(OPENSSL_STRING) * __cdecl X509_get1_email(X509 *x)
 {
     GENERAL_NAMES *gens;
     STACK_OF(OPENSSL_STRING) *ret;
@@ -426,7 +426,7 @@ STACK_OF(OPENSSL_STRING) *X509_get1_email(X509 *x)
     return ret;
 }
 
-STACK_OF(OPENSSL_STRING) *X509_get1_ocsp(X509 *x)
+STACK_OF(OPENSSL_STRING) * __cdecl X509_get1_ocsp(X509 *x)
 {
     AUTHORITY_INFO_ACCESS *info;
     STACK_OF(OPENSSL_STRING) *ret = NULL;
@@ -449,7 +449,7 @@ STACK_OF(OPENSSL_STRING) *X509_get1_ocsp(X509 *x)
     return ret;
 }
 
-STACK_OF(OPENSSL_STRING) *X509_REQ_get1_email(X509_REQ *x)
+STACK_OF(OPENSSL_STRING) * __cdecl X509_REQ_get1_email(X509_REQ *x)
 {
     GENERAL_NAMES *gens;
     STACK_OF(X509_EXTENSION) *exts;
@@ -491,7 +491,7 @@ static STACK_OF(OPENSSL_STRING) *get_email(X509_NAME *name,
     return ret;
 }
 
-static void str_free(OPENSSL_STRING str)
+static void __cdecl str_free(OPENSSL_STRING str)
 {
     OPENSSL_free(str);
 }
@@ -521,7 +521,7 @@ static int append_ia5(STACK_OF(OPENSSL_STRING) **sk, const ASN1_IA5STRING *email
     return 1;
 }
 
-void X509_email_free(STACK_OF(OPENSSL_STRING) *sk)
+void __cdecl X509_email_free(STACK_OF(OPENSSL_STRING) *sk)
 {
     sk_OPENSSL_STRING_pop_free(sk, str_free);
 }
@@ -896,7 +896,7 @@ static int do_x509_check(X509 *x, const char *chk, size_t chklen,
     return 0;
 }
 
-int X509_check_host(X509 *x, const char *chk, size_t chklen,
+int __cdecl X509_check_host(X509 *x, const char *chk, size_t chklen,
                     unsigned int flags, char **peername)
 {
     if (chk == NULL)
@@ -915,7 +915,7 @@ int X509_check_host(X509 *x, const char *chk, size_t chklen,
     return do_x509_check(x, chk, chklen, flags, GEN_DNS, peername);
 }
 
-int X509_check_email(X509 *x, const char *chk, size_t chklen,
+int __cdecl X509_check_email(X509 *x, const char *chk, size_t chklen,
                      unsigned int flags)
 {
     if (chk == NULL)
@@ -934,7 +934,7 @@ int X509_check_email(X509 *x, const char *chk, size_t chklen,
     return do_x509_check(x, chk, chklen, flags, GEN_EMAIL, NULL);
 }
 
-int X509_check_ip(X509 *x, const unsigned char *chk, size_t chklen,
+int __cdecl X509_check_ip(X509 *x, const unsigned char *chk, size_t chklen,
                   unsigned int flags)
 {
     if (chk == NULL)
@@ -942,7 +942,7 @@ int X509_check_ip(X509 *x, const unsigned char *chk, size_t chklen,
     return do_x509_check(x, (char *)chk, chklen, flags, GEN_IPADD, NULL);
 }
 
-int X509_check_ip_asc(X509 *x, const char *ipasc, unsigned int flags)
+int __cdecl X509_check_ip_asc(X509 *x, const char *ipasc, unsigned int flags)
 {
     unsigned char ipout[16];
     size_t iplen;
@@ -960,7 +960,7 @@ int X509_check_ip_asc(X509 *x, const char *ipasc, unsigned int flags)
  * with RFC3280.
  */
 
-ASN1_OCTET_STRING *a2i_IPADDRESS(const char *ipasc)
+ASN1_OCTET_STRING * __cdecl a2i_IPADDRESS(const char *ipasc)
 {
     unsigned char ipout[16];
     ASN1_OCTET_STRING *ret;
@@ -983,7 +983,7 @@ ASN1_OCTET_STRING *a2i_IPADDRESS(const char *ipasc)
     return ret;
 }
 
-ASN1_OCTET_STRING *a2i_IPADDRESS_NC(const char *ipasc)
+ASN1_OCTET_STRING * __cdecl a2i_IPADDRESS_NC(const char *ipasc)
 {
     ASN1_OCTET_STRING *ret = NULL;
     unsigned char ipout[32];
@@ -1190,7 +1190,7 @@ static int ipv6_hex(unsigned char *out, const char *in, int inlen)
     return 1;
 }
 
-int X509V3_NAME_from_section(X509_NAME *nm, STACK_OF(CONF_VALUE) *dn_sk,
+int __cdecl X509V3_NAME_from_section(X509_NAME *nm, STACK_OF(CONF_VALUE) *dn_sk,
                              unsigned long chtype)
 {
     CONF_VALUE *v;
diff --git a/crypto/x509v3/v3err.c b/crypto/x509v3/v3err.c
index 4f2ea52a4a..604d518239 100644
--- a/crypto/x509v3/v3err.c
+++ b/crypto/x509v3/v3err.c
@@ -245,7 +245,7 @@ static const ERR_STRING_DATA X509V3_str_reasons[] = {
 
 #endif
 
-int ERR_load_X509V3_strings(void)
+int __cdecl ERR_load_X509V3_strings(void)
 {
 #ifndef OPENSSL_NO_ERR
     if (ERR_func_error_string(X509V3_str_functs[0].error) == NULL) {
diff --git a/demos/bio/client-arg.c b/demos/bio/client-arg.c
index e8d5e46ab5..64da8b8d55 100644
--- a/demos/bio/client-arg.c
+++ b/demos/bio/client-arg.c
@@ -11,7 +11,7 @@
 #include <openssl/err.h>
 #include <openssl/ssl.h>
 
-int main(int argc, char **argv)
+int __cdecl main(int argc, char **argv)
 {
     BIO *sbio = NULL, *out = NULL;
     int len;
diff --git a/demos/bio/client-conf.c b/demos/bio/client-conf.c
index e819030eec..223f1ca7d8 100644
--- a/demos/bio/client-conf.c
+++ b/demos/bio/client-conf.c
@@ -12,7 +12,7 @@
 #include <openssl/ssl.h>
 #include <openssl/conf.h>
 
-int main(int argc, char **argv)
+int __cdecl main(int argc, char **argv)
 {
     BIO *sbio = NULL, *out = NULL;
     int i, len, rv;
diff --git a/demos/bio/saccept.c b/demos/bio/saccept.c
index de86ae6322..5bd262f50d 100644
--- a/demos/bio/saccept.c
+++ b/demos/bio/saccept.c
@@ -45,7 +45,7 @@ void sigsetup(void)
     sigaction(SIGINT, &sa, NULL);
 }
 
-int main(int argc, char *argv[])
+int __cdecl main(int argc, char *argv[])
 {
     char *port = NULL;
     BIO *in = NULL;
diff --git a/demos/bio/sconnect.c b/demos/bio/sconnect.c
index db71f29afe..3a377a9399 100644
--- a/demos/bio/sconnect.c
+++ b/demos/bio/sconnect.c
@@ -25,7 +25,7 @@
 #define HOSTPORT "localhost:4433"
 #define CAFILE "root.pem"
 
-int main(int argc, char *argv[])
+int __cdecl main(int argc, char *argv[])
 {
     const char *hostport = HOSTPORT;
     const char *CAfile = CAFILE;
diff --git a/demos/bio/server-arg.c b/demos/bio/server-arg.c
index d80d070f7a..9f079641b6 100644
--- a/demos/bio/server-arg.c
+++ b/demos/bio/server-arg.c
@@ -20,7 +20,7 @@
 #include <openssl/err.h>
 #include <openssl/ssl.h>
 
-int main(int argc, char *argv[])
+int __cdecl main(int argc, char *argv[])
 {
     char *port = "*:4433";
     BIO *ssl_bio, *tmp;
diff --git a/demos/bio/server-cmod.c b/demos/bio/server-cmod.c
index f1079ad329..caf3f18340 100644
--- a/demos/bio/server-cmod.c
+++ b/demos/bio/server-cmod.c
@@ -19,7 +19,7 @@
 #include <openssl/ssl.h>
 #include <openssl/conf.h>
 
-int main(int argc, char *argv[])
+int __cdecl main(int argc, char *argv[])
 {
     unsigned char buf[512];
     char *port = "*:4433";
diff --git a/demos/bio/server-conf.c b/demos/bio/server-conf.c
index 4d1655bfc9..f2a0773e52 100644
--- a/demos/bio/server-conf.c
+++ b/demos/bio/server-conf.c
@@ -21,7 +21,7 @@
 #include <openssl/ssl.h>
 #include <openssl/conf.h>
 
-int main(int argc, char *argv[])
+int __cdecl main(int argc, char *argv[])
 {
     char *port = "*:4433";
     BIO *in = NULL;
diff --git a/demos/cms/cms_comp.c b/demos/cms/cms_comp.c
index 0d548f93ca..d11002dd80 100644
--- a/demos/cms/cms_comp.c
+++ b/demos/cms/cms_comp.c
@@ -12,7 +12,7 @@
 #include <openssl/cms.h>
 #include <openssl/err.h>
 
-int main(int argc, char **argv)
+int __cdecl main(int argc, char **argv)
 {
     BIO *in = NULL, *out = NULL;
     CMS_ContentInfo *cms = NULL;
diff --git a/demos/cms/cms_ddec.c b/demos/cms/cms_ddec.c
index 8f2e9aecb2..04e8e519f0 100644
--- a/demos/cms/cms_ddec.c
+++ b/demos/cms/cms_ddec.c
@@ -15,7 +15,7 @@
 #include <openssl/cms.h>
 #include <openssl/err.h>
 
-int main(int argc, char **argv)
+int __cdecl main(int argc, char **argv)
 {
     BIO *in = NULL, *out = NULL, *tbio = NULL, *dcont = NULL;
     X509 *rcert = NULL;
diff --git a/demos/cms/cms_dec.c b/demos/cms/cms_dec.c
index 4f9428b4e7..09bd72a002 100644
--- a/demos/cms/cms_dec.c
+++ b/demos/cms/cms_dec.c
@@ -12,7 +12,7 @@
 #include <openssl/cms.h>
 #include <openssl/err.h>
 
-int main(int argc, char **argv)
+int __cdecl main(int argc, char **argv)
 {
     BIO *in = NULL, *out = NULL, *tbio = NULL;
     X509 *rcert = NULL;
diff --git a/demos/cms/cms_denc.c b/demos/cms/cms_denc.c
index adba69b96d..62a73c390a 100644
--- a/demos/cms/cms_denc.c
+++ b/demos/cms/cms_denc.c
@@ -15,7 +15,7 @@
 #include <openssl/cms.h>
 #include <openssl/err.h>
 
-int main(int argc, char **argv)
+int __cdecl main(int argc, char **argv)
 {
     BIO *in = NULL, *out = NULL, *tbio = NULL, *dout = NULL;
     X509 *rcert = NULL;
diff --git a/demos/cms/cms_enc.c b/demos/cms/cms_enc.c
index 4d17d720c6..d9205aa679 100644
--- a/demos/cms/cms_enc.c
+++ b/demos/cms/cms_enc.c
@@ -12,7 +12,7 @@
 #include <openssl/cms.h>
 #include <openssl/err.h>
 
-int main(int argc, char **argv)
+int __cdecl main(int argc, char **argv)
 {
     BIO *in = NULL, *out = NULL, *tbio = NULL;
     X509 *rcert = NULL;
diff --git a/demos/cms/cms_sign.c b/demos/cms/cms_sign.c
index 15bd5b8dd9..8e1a1e2d98 100644
--- a/demos/cms/cms_sign.c
+++ b/demos/cms/cms_sign.c
@@ -12,7 +12,7 @@
 #include <openssl/cms.h>
 #include <openssl/err.h>
 
-int main(int argc, char **argv)
+int __cdecl main(int argc, char **argv)
 {
     BIO *in = NULL, *out = NULL, *tbio = NULL;
     X509 *scert = NULL;
diff --git a/demos/cms/cms_sign2.c b/demos/cms/cms_sign2.c
index 14ebf27775..e288b4b2cf 100644
--- a/demos/cms/cms_sign2.c
+++ b/demos/cms/cms_sign2.c
@@ -12,7 +12,7 @@
 #include <openssl/cms.h>
 #include <openssl/err.h>
 
-int main(int argc, char **argv)
+int __cdecl main(int argc, char **argv)
 {
     BIO *in = NULL, *out = NULL, *tbio = NULL;
     X509 *scert = NULL, *scert2 = NULL;
diff --git a/demos/cms/cms_uncomp.c b/demos/cms/cms_uncomp.c
index 3e3b4c4c6e..4251a09a77 100644
--- a/demos/cms/cms_uncomp.c
+++ b/demos/cms/cms_uncomp.c
@@ -12,7 +12,7 @@
 #include <openssl/cms.h>
 #include <openssl/err.h>
 
-int main(int argc, char **argv)
+int __cdecl main(int argc, char **argv)
 {
     BIO *in = NULL, *out = NULL;
     CMS_ContentInfo *cms = NULL;
diff --git a/demos/cms/cms_ver.c b/demos/cms/cms_ver.c
index 43c10e2513..b6d62a108a 100644
--- a/demos/cms/cms_ver.c
+++ b/demos/cms/cms_ver.c
@@ -12,7 +12,7 @@
 #include <openssl/cms.h>
 #include <openssl/err.h>
 
-int main(int argc, char **argv)
+int __cdecl main(int argc, char **argv)
 {
     BIO *in = NULL, *out = NULL, *tbio = NULL, *cont = NULL;
     X509_STORE *st = NULL;
diff --git a/demos/evp/aesccm.c b/demos/evp/aesccm.c
index cc4d0b5ee9..e06181d761 100644
--- a/demos/evp/aesccm.c
+++ b/demos/evp/aesccm.c
@@ -118,7 +118,7 @@ void aes_ccm_decrypt(void)
     EVP_CIPHER_CTX_free(ctx);
 }
 
-int main(int argc, char **argv)
+int __cdecl main(int argc, char **argv)
 {
     aes_ccm_encrypt();
     aes_ccm_decrypt();
diff --git a/demos/evp/aesgcm.c b/demos/evp/aesgcm.c
index 3cef27f991..420384af91 100644
--- a/demos/evp/aesgcm.c
+++ b/demos/evp/aesgcm.c
@@ -114,7 +114,7 @@ void aes_gcm_decrypt(void)
     EVP_CIPHER_CTX_free(ctx);
 }
 
-int main(int argc, char **argv)
+int __cdecl main(int argc, char **argv)
 {
     aes_gcm_encrypt();
     aes_gcm_decrypt();
diff --git a/demos/pkcs12/pkread.c b/demos/pkcs12/pkread.c
index e5f78f1b35..495bb16402 100644
--- a/demos/pkcs12/pkread.c
+++ b/demos/pkcs12/pkread.c
@@ -45,7 +45,7 @@ static char *find_friendly_name(PKCS12 *p12)
     return name;
 }
 
-int main(int argc, char **argv)
+int __cdecl main(int argc, char **argv)
 {
     FILE *fp;
     EVP_PKEY *pkey = NULL;
diff --git a/demos/pkcs12/pkwrite.c b/demos/pkcs12/pkwrite.c
index e14cf8327d..6fa4b99735 100644
--- a/demos/pkcs12/pkwrite.c
+++ b/demos/pkcs12/pkwrite.c
@@ -15,7 +15,7 @@
 
 /* Simple PKCS#12 file creator */
 
-int main(int argc, char **argv)
+int __cdecl main(int argc, char **argv)
 {
     FILE *fp;
     EVP_PKEY *pkey;
diff --git a/demos/smime/smdec.c b/demos/smime/smdec.c
index c4d1b090d9..3238f5bed5 100644
--- a/demos/smime/smdec.c
+++ b/demos/smime/smdec.c
@@ -12,7 +12,7 @@
 #include <openssl/pkcs7.h>
 #include <openssl/err.h>
 
-int main(int argc, char **argv)
+int __cdecl main(int argc, char **argv)
 {
     BIO *in = NULL, *out = NULL, *tbio = NULL;
     X509 *rcert = NULL;
diff --git a/demos/smime/smenc.c b/demos/smime/smenc.c
index 5d36e9a497..ec8107f7f8 100644
--- a/demos/smime/smenc.c
+++ b/demos/smime/smenc.c
@@ -12,7 +12,7 @@
 #include <openssl/pkcs7.h>
 #include <openssl/err.h>
 
-int main(int argc, char **argv)
+int __cdecl main(int argc, char **argv)
 {
     BIO *in = NULL, *out = NULL, *tbio = NULL;
     X509 *rcert = NULL;
diff --git a/demos/smime/smsign.c b/demos/smime/smsign.c
index ba0adb3974..3ccccfe2bb 100644
--- a/demos/smime/smsign.c
+++ b/demos/smime/smsign.c
@@ -12,7 +12,7 @@
 #include <openssl/pkcs7.h>
 #include <openssl/err.h>
 
-int main(int argc, char **argv)
+int __cdecl main(int argc, char **argv)
 {
     BIO *in = NULL, *out = NULL, *tbio = NULL;
     X509 *scert = NULL;
diff --git a/demos/smime/smsign2.c b/demos/smime/smsign2.c
index 2b7f45b294..80f8e3b518 100644
--- a/demos/smime/smsign2.c
+++ b/demos/smime/smsign2.c
@@ -12,7 +12,7 @@
 #include <openssl/pkcs7.h>
 #include <openssl/err.h>
 
-int main(int argc, char **argv)
+int __cdecl main(int argc, char **argv)
 {
     BIO *in = NULL, *out = NULL, *tbio = NULL;
     X509 *scert = NULL, *scert2 = NULL;
diff --git a/demos/smime/smver.c b/demos/smime/smver.c
index 75411c40d0..01cd21813f 100644
--- a/demos/smime/smver.c
+++ b/demos/smime/smver.c
@@ -12,7 +12,7 @@
 #include <openssl/pkcs7.h>
 #include <openssl/err.h>
 
-int main(int argc, char **argv)
+int __cdecl main(int argc, char **argv)
 {
     BIO *in = NULL, *out = NULL, *tbio = NULL, *cont = NULL;
     X509_STORE *st = NULL;
diff --git a/doc/man3/ASYNC_start_job.pod b/doc/man3/ASYNC_start_job.pod
index b06db76708..7aa6cac37e 100644
--- a/doc/man3/ASYNC_start_job.pod
+++ b/doc/man3/ASYNC_start_job.pod
@@ -244,7 +244,7 @@ The following example demonstrates how to use most of the core async APIs:
      return 1;
  }
 
- int main(void)
+ int __cdecl main(void)
  {
      ASYNC_JOB *job = NULL;
      ASYNC_WAIT_CTX *ctx = NULL;
diff --git a/doc/man3/EVP_DigestInit.pod b/doc/man3/EVP_DigestInit.pod
index 3e3e342297..bf10d3bb6f 100644
--- a/doc/man3/EVP_DigestInit.pod
+++ b/doc/man3/EVP_DigestInit.pod
@@ -313,7 +313,7 @@ digest name passed on the command line.
  #include <string.h>
  #include <openssl/evp.h>
 
- int main(int argc, char *argv[])
+ int __cdecl main(int argc, char *argv[])
  {
      EVP_MD_CTX *mdctx;
      const EVP_MD *md;
diff --git a/doc/man3/PKCS12_newpass.pod b/doc/man3/PKCS12_newpass.pod
index 5fc041bfbd..d8df52c083 100644
--- a/doc/man3/PKCS12_newpass.pod
+++ b/doc/man3/PKCS12_newpass.pod
@@ -45,7 +45,7 @@ the result to a new file.
  #include <openssl/err.h>
  #include <openssl/pkcs12.h>
 
- int main(int argc, char **argv)
+ int __cdecl main(int argc, char **argv)
  {
      FILE *fp;
      PKCS12 *p12;
diff --git a/engines/e_afalg.c b/engines/e_afalg.c
index 7f62d77e5b..cb415e39af 100644
--- a/engines/e_afalg.c
+++ b/engines/e_afalg.c
@@ -31,8 +31,8 @@
 #  warning "AFALG ENGINE requires Kernel Headers >= 4.1.0"
 #  warning "Skipping Compilation of AFALG engine"
 # endif
-void engine_load_afalg_int(void);
-void engine_load_afalg_int(void)
+void __cdecl engine_load_afalg_int(void);
+void __cdecl engine_load_afalg_int(void)
 {
 }
 #else
@@ -818,7 +818,7 @@ static ENGINE *engine_afalg(void)
     return ret;
 }
 
-void engine_load_afalg_int(void)
+void __cdecl engine_load_afalg_int(void)
 {
     ENGINE *toadd;
 
diff --git a/engines/e_capi.c b/engines/e_capi.c
index 37202b81f3..6ab8ca72e0 100644
--- a/engines/e_capi.c
+++ b/engines/e_capi.c
@@ -105,50 +105,50 @@ static const char *engine_capi_name = "CryptoAPI ENGINE";
 typedef struct CAPI_CTX_st CAPI_CTX;
 typedef struct CAPI_KEY_st CAPI_KEY;
 
-static void capi_addlasterror(void);
-static void capi_adderror(DWORD err);
+static void __cdecl capi_addlasterror(void);
+static void __cdecl capi_adderror(DWORD err);
 
-static void CAPI_trace(CAPI_CTX *ctx, char *format, ...);
+static void __cdecl CAPI_trace(CAPI_CTX *ctx, char *format, ...);
 
-static int capi_list_providers(CAPI_CTX *ctx, BIO *out);
-static int capi_list_containers(CAPI_CTX *ctx, BIO *out);
-int capi_list_certs(CAPI_CTX *ctx, BIO *out, char *storename);
-void capi_free_key(CAPI_KEY *key);
+static int __cdecl capi_list_providers(CAPI_CTX *ctx, BIO *out);
+static int __cdecl capi_list_containers(CAPI_CTX *ctx, BIO *out);
+int __cdecl capi_list_certs(CAPI_CTX *ctx, BIO *out, char *storename);
+void __cdecl capi_free_key(CAPI_KEY *key);
 
-static PCCERT_CONTEXT capi_find_cert(CAPI_CTX *ctx, const char *id,
+static PCCERT_CONTEXT __cdecl capi_find_cert(CAPI_CTX *ctx, const char *id,
                                      HCERTSTORE hstore);
 
-CAPI_KEY *capi_find_key(CAPI_CTX *ctx, const char *id);
+CAPI_KEY * __cdecl capi_find_key(CAPI_CTX *ctx, const char *id);
 
-static EVP_PKEY *capi_load_privkey(ENGINE *eng, const char *key_id,
+static EVP_PKEY * __cdecl capi_load_privkey(ENGINE *eng, const char *key_id,
                                    UI_METHOD *ui_method, void *callback_data);
-static int capi_rsa_sign(int dtype, const unsigned char *m,
+static int __cdecl capi_rsa_sign(int dtype, const unsigned char *m,
                          unsigned int m_len, unsigned char *sigret,
                          unsigned int *siglen, const RSA *rsa);
-static int capi_rsa_priv_enc(int flen, const unsigned char *from,
+static int __cdecl capi_rsa_priv_enc(int flen, const unsigned char *from,
                              unsigned char *to, RSA *rsa, int padding);
-static int capi_rsa_priv_dec(int flen, const unsigned char *from,
+static int __cdecl capi_rsa_priv_dec(int flen, const unsigned char *from,
                              unsigned char *to, RSA *rsa, int padding);
-static int capi_rsa_free(RSA *rsa);
+static int __cdecl capi_rsa_free(RSA *rsa);
 
 # ifndef OPENSSL_NO_DSA
-static DSA_SIG *capi_dsa_do_sign(const unsigned char *digest, int dlen,
+static DSA_SIG * __cdecl capi_dsa_do_sign(const unsigned char *digest, int dlen,
                                  DSA *dsa);
-static int capi_dsa_free(DSA *dsa);
+static int __cdecl capi_dsa_free(DSA *dsa);
 # endif
 
-static int capi_load_ssl_client_cert(ENGINE *e, SSL *ssl,
+static int __cdecl capi_load_ssl_client_cert(ENGINE *e, SSL *ssl,
                                      STACK_OF(X509_NAME) *ca_dn, X509 **pcert,
                                      EVP_PKEY **pkey, STACK_OF(X509) **pother,
                                      UI_METHOD *ui_method,
                                      void *callback_data);
 
-static int cert_select_simple(ENGINE *e, SSL *ssl, STACK_OF(X509) *certs);
+static int __cdecl cert_select_simple(ENGINE *e, SSL *ssl, STACK_OF(X509) *certs);
 # ifdef OPENSSL_CAPIENG_DIALOG
-static int cert_select_dialog(ENGINE *e, SSL *ssl, STACK_OF(X509) *certs);
+static int __cdecl cert_select_dialog(ENGINE *e, SSL *ssl, STACK_OF(X509) *certs);
 # endif
 
-void engine_load_capi_int(void);
+void __cdecl engine_load_capi_int(void);
 
 typedef PCCERT_CONTEXT(WINAPI *CERTDLG)(HCERTSTORE, HWND, LPCWSTR,
                                         LPCWSTR, DWORD, DWORD, void *);
@@ -187,16 +187,16 @@ struct CAPI_CTX_st {
 # define CAPI_DMP_PSKEY          0x10   /* Dump pseudo key (if possible) */
 # define CAPI_DMP_PKEYINFO       0x20   /* Dump key info (if possible) */
     DWORD dump_flags;
-    int (*client_cert_select) (ENGINE *e, SSL *ssl, STACK_OF(X509) *certs);
+    int (__cdecl *client_cert_select) (ENGINE *e, SSL *ssl, STACK_OF(X509) *certs);
     CERTDLG certselectdlg;
     GETCONSWIN getconswindow;
 };
 
-static CAPI_CTX *capi_ctx_new(void);
-static void capi_ctx_free(CAPI_CTX *ctx);
-static int capi_ctx_set_provname(CAPI_CTX *ctx, LPSTR pname, DWORD type,
+static CAPI_CTX * __cdecl capi_ctx_new(void);
+static void __cdecl capi_ctx_free(CAPI_CTX *ctx);
+static int __cdecl capi_ctx_set_provname(CAPI_CTX *ctx, LPSTR pname, DWORD type,
                                  int check);
-static int capi_ctx_set_provname_idx(CAPI_CTX *ctx, int idx);
+static int __cdecl capi_ctx_set_provname_idx(CAPI_CTX *ctx, int idx);
 
 # define CAPI_CMD_LIST_CERTS             ENGINE_CMD_BASE
 # define CAPI_CMD_LOOKUP_CERT            (ENGINE_CMD_BASE + 1)
@@ -280,7 +280,7 @@ static int rsa_capi_idx = -1;
 static int dsa_capi_idx = -1;
 static int cert_capi_idx = -1;
 
-static int capi_ctrl(ENGINE *e, int cmd, long i, void *p, void (*f) (void))
+static int __cdecl capi_ctrl(ENGINE *e, int cmd, long i, void *p, void (__cdecl *f) (void))
 {
     int ret = 1;
     CAPI_CTX *ctx;
@@ -403,7 +403,7 @@ static const WCHAR rsa_aes_cspname[] =
 static const WCHAR rsa_enh_cspname[] =
     L"Microsoft Enhanced Cryptographic Provider v1.0";
 
-static int capi_init(ENGINE *e)
+static int __cdecl capi_init(ENGINE *e)
 {
     CAPI_CTX *ctx;
     const RSA_METHOD *ossl_rsa_meth;
@@ -492,7 +492,7 @@ static int capi_init(ENGINE *e)
     return 1;
 }
 
-static int capi_destroy(ENGINE *e)
+static int __cdecl capi_destroy(ENGINE *e)
 {
     RSA_meth_free(capi_rsa_method);
     capi_rsa_method = NULL;
@@ -504,7 +504,7 @@ static int capi_destroy(ENGINE *e)
     return 1;
 }
 
-static int capi_finish(ENGINE *e)
+static int __cdecl capi_finish(ENGINE *e)
 {
     CAPI_CTX *ctx;
     ctx = ENGINE_get_ex_data(e, capi_idx);
@@ -527,7 +527,7 @@ struct CAPI_KEY_st {
     DWORD keyspec;
 };
 
-static int bind_capi(ENGINE *e)
+static int __cdecl bind_capi(ENGINE *e)
 {
     capi_rsa_method = RSA_meth_new("CryptoAPI RSA method", 0);
     if (capi_rsa_method == NULL)
@@ -567,7 +567,7 @@ static int bind_capi(ENGINE *e)
 }
 
 # ifndef OPENSSL_NO_DYNAMIC_ENGINE
-static int bind_helper(ENGINE *e, const char *id)
+static int __cdecl bind_helper(ENGINE *e, const char *id)
 {
     if (id && (strcmp(id, engine_capi_id) != 0))
         return 0;
@@ -591,7 +591,7 @@ static ENGINE *engine_capi(void)
     return ret;
 }
 
-void engine_load_capi_int(void)
+void __cdecl engine_load_capi_int(void)
 {
     /* Copied from eng_[openssl|dyn].c */
     ENGINE *toadd = engine_capi();
@@ -603,7 +603,7 @@ void engine_load_capi_int(void)
 }
 # endif
 
-static int lend_tobn(BIGNUM *bn, unsigned char *bin, int binlen)
+static int __cdecl lend_tobn(BIGNUM *bn, unsigned char *bin, int binlen)
 {
     int i;
     /*
@@ -625,7 +625,7 @@ static int lend_tobn(BIGNUM *bn, unsigned char *bin, int binlen)
 
 /* Given a CAPI_KEY get an EVP_PKEY structure */
 
-static EVP_PKEY *capi_get_pkey(ENGINE *eng, CAPI_KEY *key)
+static EVP_PKEY * __cdecl capi_get_pkey(ENGINE *eng, CAPI_KEY *key)
 {
     unsigned char *pubkey = NULL;
     DWORD len;
@@ -780,7 +780,7 @@ static EVP_PKEY *capi_get_pkey(ENGINE *eng, CAPI_KEY *key)
 
 }
 
-static EVP_PKEY *capi_load_privkey(ENGINE *eng, const char *key_id,
+static EVP_PKEY * __cdecl capi_load_privkey(ENGINE *eng, const char *key_id,
                                    UI_METHOD *ui_method, void *callback_data)
 {
     CAPI_CTX *ctx;
@@ -808,14 +808,14 @@ static EVP_PKEY *capi_load_privkey(ENGINE *eng, const char *key_id,
 
 /* CryptoAPI RSA operations */
 
-int capi_rsa_priv_enc(int flen, const unsigned char *from,
+int __cdecl capi_rsa_priv_enc(int flen, const unsigned char *from,
                       unsigned char *to, RSA *rsa, int padding)
 {
     CAPIerr(CAPI_F_CAPI_RSA_PRIV_ENC, CAPI_R_FUNCTION_NOT_SUPPORTED);
     return -1;
 }
 
-int capi_rsa_sign(int dtype, const unsigned char *m, unsigned int m_len,
+int __cdecl capi_rsa_sign(int dtype, const unsigned char *m, unsigned int m_len,
                   unsigned char *sigret, unsigned int *siglen, const RSA *rsa)
 {
     ALG_ID alg;
@@ -910,7 +910,7 @@ int capi_rsa_sign(int dtype, const unsigned char *m, unsigned int m_len,
     return ret;
 }
 
-int capi_rsa_priv_dec(int flen, const unsigned char *from,
+int __cdecl capi_rsa_priv_dec(int flen, const unsigned char *from,
                       unsigned char *to, RSA *rsa, int padding)
 {
     int i;
@@ -977,7 +977,7 @@ int capi_rsa_priv_dec(int flen, const unsigned char *from,
     return flen;
 }
 
-static int capi_rsa_free(RSA *rsa)
+static int __cdecl capi_rsa_free(RSA *rsa)
 {
     CAPI_KEY *capi_key;
     capi_key = RSA_get_ex_data(rsa, rsa_capi_idx);
@@ -989,7 +989,7 @@ static int capi_rsa_free(RSA *rsa)
 # ifndef OPENSSL_NO_DSA
 /* CryptoAPI DSA operations */
 
-static DSA_SIG *capi_dsa_do_sign(const unsigned char *digest, int dlen,
+static DSA_SIG * __cdecl capi_dsa_do_sign(const unsigned char *digest, int dlen,
                                  DSA *dsa)
 {
     HCRYPTHASH hash;
@@ -1057,7 +1057,7 @@ static DSA_SIG *capi_dsa_do_sign(const unsigned char *digest, int dlen,
     return ret;
 }
 
-static int capi_dsa_free(DSA *dsa)
+static int __cdecl capi_dsa_free(DSA *dsa)
 {
     CAPI_KEY *capi_key;
     capi_key = DSA_get_ex_data(dsa, dsa_capi_idx);
@@ -1067,7 +1067,7 @@ static int capi_dsa_free(DSA *dsa)
 }
 # endif
 
-static void capi_vtrace(CAPI_CTX *ctx, int level, char *format,
+static void __cdecl capi_vtrace(CAPI_CTX *ctx, int level, char *format,
                         va_list argptr)
 {
     BIO *out;
@@ -1083,7 +1083,7 @@ static void capi_vtrace(CAPI_CTX *ctx, int level, char *format,
     BIO_free(out);
 }
 
-static void CAPI_trace(CAPI_CTX *ctx, char *format, ...)
+static void __cdecl CAPI_trace(CAPI_CTX *ctx, char *format, ...)
 {
     va_list args;
     va_start(args, format);
@@ -1091,19 +1091,19 @@ static void CAPI_trace(CAPI_CTX *ctx, char *format, ...)
     va_end(args);
 }
 
-static void capi_addlasterror(void)
+static void __cdecl capi_addlasterror(void)
 {
     capi_adderror(GetLastError());
 }
 
-static void capi_adderror(DWORD err)
+static void __cdecl capi_adderror(DWORD err)
 {
     char errstr[10];
     BIO_snprintf(errstr, 10, "%lX", err);
     ERR_add_error_data(2, "Error code= 0x", errstr);
 }
 
-static char *wide_to_asc(LPCWSTR wstr)
+static char * __cdecl wide_to_asc(LPCWSTR wstr)
 {
     char *str;
     int len_0, sz;
@@ -1129,7 +1129,7 @@ static char *wide_to_asc(LPCWSTR wstr)
     return str;
 }
 
-static int capi_get_provname(CAPI_CTX *ctx, LPSTR *pname, DWORD *ptype,
+static int __cdecl capi_get_provname(CAPI_CTX *ctx, LPSTR *pname, DWORD *ptype,
                              DWORD idx)
 {
     DWORD len, err;
@@ -1171,7 +1171,7 @@ static int capi_get_provname(CAPI_CTX *ctx, LPSTR *pname, DWORD *ptype,
     return 1;
 }
 
-static int capi_list_providers(CAPI_CTX *ctx, BIO *out)
+static int __cdecl capi_list_providers(CAPI_CTX *ctx, BIO *out)
 {
     DWORD idx, ptype;
     int ret;
@@ -1190,7 +1190,7 @@ static int capi_list_providers(CAPI_CTX *ctx, BIO *out)
     return 1;
 }
 
-static int capi_list_containers(CAPI_CTX *ctx, BIO *out)
+static int __cdecl capi_list_containers(CAPI_CTX *ctx, BIO *out)
 {
     int ret = 1;
     HCRYPTPROV hprov;
@@ -1272,7 +1272,7 @@ static int capi_list_containers(CAPI_CTX *ctx, BIO *out)
     return ret;
 }
 
-static CRYPT_KEY_PROV_INFO *capi_get_prov_info(CAPI_CTX *ctx,
+static CRYPT_KEY_PROV_INFO * __cdecl capi_get_prov_info(CAPI_CTX *ctx,
                                                PCCERT_CONTEXT cert)
 {
     DWORD len;
@@ -1297,7 +1297,7 @@ static CRYPT_KEY_PROV_INFO *capi_get_prov_info(CAPI_CTX *ctx,
     return pinfo;
 }
 
-static void capi_dump_prov_info(CAPI_CTX *ctx, BIO *out,
+static void __cdecl capi_dump_prov_info(CAPI_CTX *ctx, BIO *out,
                                 CRYPT_KEY_PROV_INFO *pinfo)
 {
     char *provname = NULL, *contname = NULL;
@@ -1320,7 +1320,7 @@ static void capi_dump_prov_info(CAPI_CTX *ctx, BIO *out,
     OPENSSL_free(contname);
 }
 
-static char *capi_cert_get_fname(CAPI_CTX *ctx, PCCERT_CONTEXT cert)
+static char * __cdecl capi_cert_get_fname(CAPI_CTX *ctx, PCCERT_CONTEXT cert)
 {
     LPWSTR wfname;
     DWORD dlen;
@@ -1345,7 +1345,7 @@ static char *capi_cert_get_fname(CAPI_CTX *ctx, PCCERT_CONTEXT cert)
     return NULL;
 }
 
-static void capi_dump_cert(CAPI_CTX *ctx, BIO *out, PCCERT_CONTEXT cert)
+static void __cdecl capi_dump_cert(CAPI_CTX *ctx, BIO *out, PCCERT_CONTEXT cert)
 {
     X509 *x;
     const unsigned char *p;
@@ -1387,7 +1387,7 @@ static void capi_dump_cert(CAPI_CTX *ctx, BIO *out, PCCERT_CONTEXT cert)
     X509_free(x);
 }
 
-static HCERTSTORE capi_open_store(CAPI_CTX *ctx, char *storename)
+static HCERTSTORE __cdecl capi_open_store(CAPI_CTX *ctx, char *storename)
 {
     HCERTSTORE hstore;
 
@@ -1406,7 +1406,7 @@ static HCERTSTORE capi_open_store(CAPI_CTX *ctx, char *storename)
     return hstore;
 }
 
-int capi_list_certs(CAPI_CTX *ctx, BIO *out, char *id)
+int __cdecl capi_list_certs(CAPI_CTX *ctx, BIO *out, char *id)
 {
     char *storename;
     int idx;
@@ -1444,7 +1444,7 @@ int capi_list_certs(CAPI_CTX *ctx, BIO *out, char *id)
     return ret;
 }
 
-static PCCERT_CONTEXT capi_find_cert(CAPI_CTX *ctx, const char *id,
+static PCCERT_CONTEXT __cdecl capi_find_cert(CAPI_CTX *ctx, const char *id,
                                      HCERTSTORE hstore)
 {
     PCCERT_CONTEXT cert = NULL;
@@ -1475,7 +1475,7 @@ static PCCERT_CONTEXT capi_find_cert(CAPI_CTX *ctx, const char *id,
     }
 }
 
-static CAPI_KEY *capi_get_key(CAPI_CTX *ctx, const WCHAR *contname,
+static CAPI_KEY * __cdecl capi_get_key(CAPI_CTX *ctx, const WCHAR *contname,
                               const WCHAR *provname, DWORD ptype,
                               DWORD keyspec)
 {
@@ -1541,7 +1541,7 @@ static CAPI_KEY *capi_get_cert_key(CAPI_CTX *ctx, PCCERT_CONTEXT cert)
     return key;
 }
 
-CAPI_KEY *capi_find_key(CAPI_CTX *ctx, const char *id)
+CAPI_KEY * __cdecl capi_find_key(CAPI_CTX *ctx, const char *id)
 {
     PCCERT_CONTEXT cert;
     HCERTSTORE hstore;
@@ -1583,7 +1583,7 @@ CAPI_KEY *capi_find_key(CAPI_CTX *ctx, const char *id)
     return key;
 }
 
-void capi_free_key(CAPI_KEY *key)
+void __cdecl capi_free_key(CAPI_KEY *key)
 {
     if (!key)
         return;
@@ -1596,7 +1596,7 @@ void capi_free_key(CAPI_KEY *key)
 
 /* Initialize a CAPI_CTX structure */
 
-static CAPI_CTX *capi_ctx_new(void)
+static CAPI_CTX * __cdecl capi_ctx_new(void)
 {
     CAPI_CTX *ctx = OPENSSL_zalloc(sizeof(*ctx));
 
@@ -1614,7 +1614,7 @@ static CAPI_CTX *capi_ctx_new(void)
     return ctx;
 }
 
-static void capi_ctx_free(CAPI_CTX *ctx)
+static void __cdecl capi_ctx_free(CAPI_CTX *ctx)
 {
     CAPI_trace(ctx, "Calling capi_ctx_free with %lx\n", ctx);
     if (!ctx)
@@ -1626,7 +1626,7 @@ static void capi_ctx_free(CAPI_CTX *ctx)
     OPENSSL_free(ctx);
 }
 
-static int capi_ctx_set_provname(CAPI_CTX *ctx, LPSTR pname, DWORD type,
+static int __cdecl capi_ctx_set_provname(CAPI_CTX *ctx, LPSTR pname, DWORD type,
                                  int check)
 {
     LPSTR tmpcspname;
@@ -1661,7 +1661,7 @@ static int capi_ctx_set_provname(CAPI_CTX *ctx, LPSTR pname, DWORD type,
     return 1;
 }
 
-static int capi_ctx_set_provname_idx(CAPI_CTX *ctx, int idx)
+static int __cdecl capi_ctx_set_provname_idx(CAPI_CTX *ctx, int idx)
 {
     LPSTR pname;
     DWORD type;
@@ -1688,7 +1688,7 @@ static int cert_issuer_match(STACK_OF(X509_NAME) *ca_dn, X509 *x)
     return 0;
 }
 
-static int capi_load_ssl_client_cert(ENGINE *e, SSL *ssl,
+static int __cdecl capi_load_ssl_client_cert(ENGINE *e, SSL *ssl,
                                      STACK_OF(X509_NAME) *ca_dn, X509 **pcert,
                                      EVP_PKEY **pkey, STACK_OF(X509) **pother,
                                      UI_METHOD *ui_method,
@@ -1792,7 +1792,7 @@ static int capi_load_ssl_client_cert(ENGINE *e, SSL *ssl,
 
 /* Simple client cert selection function: always select first */
 
-static int cert_select_simple(ENGINE *e, SSL *ssl, STACK_OF(X509) *certs)
+static int __cdecl cert_select_simple(ENGINE *e, SSL *ssl, STACK_OF(X509) *certs)
 {
     return 0;
 }
@@ -1819,7 +1819,7 @@ static int cert_select_simple(ENGINE *e, SSL *ssl, STACK_OF(X509) *certs)
 #  define dlg_columns      CRYPTUI_SELECT_LOCATION_COLUMN \
                         |CRYPTUI_SELECT_INTENDEDUSE_COLUMN
 
-static int cert_select_dialog(ENGINE *e, SSL *ssl, STACK_OF(X509) *certs)
+static int __cdecl cert_select_dialog(ENGINE *e, SSL *ssl, STACK_OF(X509) *certs)
 {
     X509 *x;
     HCERTSTORE dstore;
@@ -1896,8 +1896,8 @@ OPENSSL_EXPORT
 
 IMPLEMENT_DYNAMIC_CHECK_FN()
 # else
-void engine_load_capi_int(void);
-void engine_load_capi_int(void)
+void __cdecl engine_load_capi_int(void);
+void __cdecl engine_load_capi_int(void)
 {
 }
 # endif
diff --git a/engines/e_dasync.c b/engines/e_dasync.c
index 5cdacb66a0..4c1b30ae40 100644
--- a/engines/e_dasync.c
+++ b/engines/e_dasync.c
@@ -313,7 +313,7 @@ static ENGINE *engine_dasync(void)
     return ret;
 }
 
-void engine_load_dasync_int(void)
+void __cdecl engine_load_dasync_int(void)
 {
     ENGINE *toadd = engine_dasync();
     if (!toadd)
diff --git a/engines/e_padlock.c b/engines/e_padlock.c
index a82c07e813..5d8dd93c8d 100644
--- a/engines/e_padlock.c
+++ b/engines/e_padlock.c
@@ -49,8 +49,8 @@ static ENGINE *ENGINE_padlock(void);
 #  endif
 
 #  ifdef OPENSSL_NO_DYNAMIC_ENGINE
-void engine_load_padlock_int(void);
-void engine_load_padlock_int(void)
+void __cdecl engine_load_padlock_int(void);
+void __cdecl engine_load_padlock_int(void)
 {
 /* On non-x86 CPUs it just returns. */
 #   ifdef COMPILE_HW_PADLOCK
diff --git a/fuzz/driver.c b/fuzz/driver.c
index 54d67de202..b9010d6987 100644
--- a/fuzz/driver.c
+++ b/fuzz/driver.c
@@ -32,7 +32,7 @@ int LLVMFuzzerTestOneInput(const uint8_t *buf, size_t len)
 
 #define BUF_SIZE 65536
 
-int main(int argc, char** argv)
+int __cdecl main(int argc, char** argv)
 {
     FuzzerInitialize(&argc, &argv);
 
diff --git a/fuzz/rand.inc b/fuzz/rand.inc
index f8b3277b94..d7955d85e7 100644
--- a/fuzz/rand.inc
+++ b/fuzz/rand.inc
@@ -9,7 +9,7 @@
  */
 #include <openssl/rand.h>
 
-static int fuzz_bytes(unsigned char *buf, int num)
+static int __cdecl fuzz_bytes(unsigned char *buf, int num)
 {
     unsigned char val = 1;
 
@@ -18,7 +18,7 @@ static int fuzz_bytes(unsigned char *buf, int num)
     return 1;
 }
 
-static int fuzz_status(void)
+static int __cdecl fuzz_status(void)
 {
     return 1;
 }
diff --git a/fuzz/test-corpus.c b/fuzz/test-corpus.c
index 86be5337e1..13e2cae10d 100644
--- a/fuzz/test-corpus.c
+++ b/fuzz/test-corpus.c
@@ -58,7 +58,7 @@ static void testfile(const char *pathname)
     fclose(f);
 }
 
-int main(int argc, char **argv) {
+int __cdecl main(int argc, char **argv) {
     int n;
 
     FuzzerInitialize(&argc, &argv);
diff --git a/include/internal/bio.h b/include/internal/bio.h
index c343b27629..82e474ba90 100644
--- a/include/internal/bio.h
+++ b/include/internal/bio.h
@@ -12,22 +12,22 @@
 struct bio_method_st {
     int type;
     char *name;
-    int (*bwrite) (BIO *, const char *, size_t, size_t *);
-    int (*bwrite_old) (BIO *, const char *, int);
-    int (*bread) (BIO *, char *, size_t, size_t *);
-    int (*bread_old) (BIO *, char *, int);
-    int (*bputs) (BIO *, const char *);
-    int (*bgets) (BIO *, char *, int);
-    long (*ctrl) (BIO *, int, long, void *);
-    int (*create) (BIO *);
-    int (*destroy) (BIO *);
-    long (*callback_ctrl) (BIO *, int, BIO_info_cb *);
+    int (__cdecl *bwrite) (BIO *, const char *, size_t, size_t *);
+    int (__cdecl *bwrite_old) (BIO *, const char *, int);
+    int (__cdecl *bread) (BIO *, char *, size_t, size_t *);
+    int (__cdecl *bread_old) (BIO *, char *, int);
+    int (__cdecl *bputs) (BIO *, const char *);
+    int (__cdecl *bgets) (BIO *, char *, int);
+    long (__cdecl *ctrl) (BIO *, int, long, void *);
+    int (__cdecl *create) (BIO *);
+    int (__cdecl *destroy) (BIO *);
+    long (__cdecl *callback_ctrl) (BIO *, int, BIO_info_cb *);
 };
 
-void bio_free_ex_data(BIO *bio);
-void bio_cleanup(void);
+void __cdecl bio_free_ex_data(BIO *bio);
+void __cdecl bio_cleanup(void);
 
 
 /* Old style to new style BIO_METHOD conversion functions */
-int bwrite_conv(BIO *bio, const char *data, size_t datal, size_t *written);
-int bread_conv(BIO *bio, char *data, size_t datal, size_t *read);
+int __cdecl bwrite_conv(BIO *bio, const char *data, size_t datal, size_t *written);
+int __cdecl bread_conv(BIO *bio, char *data, size_t datal, size_t *read);
diff --git a/include/internal/comp.h b/include/internal/comp.h
index ac6e38b474..ae18f6cdeb 100644
--- a/include/internal/comp.h
+++ b/include/internal/comp.h
@@ -9,4 +9,4 @@
 
 #include <openssl/comp.h>
 
-void comp_zlib_cleanup_int(void);
+void __cdecl comp_zlib_cleanup_int(void);
diff --git a/include/internal/conf.h b/include/internal/conf.h
index 29bc9f963c..88a1564e29 100644
--- a/include/internal/conf.h
+++ b/include/internal/conf.h
@@ -23,8 +23,8 @@ struct ossl_init_settings_st {
     unsigned long flags;
 };
 
-int openssl_config_int(const OPENSSL_INIT_SETTINGS *);
-void openssl_no_config_int(void);
-void conf_modules_free_int(void);
+int __cdecl openssl_config_int(const OPENSSL_INIT_SETTINGS *);
+void __cdecl openssl_no_config_int(void);
+void __cdecl conf_modules_free_int(void);
 
 #endif
diff --git a/include/internal/constant_time_locl.h b/include/internal/constant_time_locl.h
index 0193a653d4..f0b7474120 100644
--- a/include/internal/constant_time_locl.h
+++ b/include/internal/constant_time_locl.h
@@ -29,45 +29,45 @@
  */
 
 /* Returns the given value with the MSB copied to all the other bits. */
-static ossl_inline unsigned int constant_time_msb(unsigned int a);
+static ossl_inline unsigned int __cdecl constant_time_msb(unsigned int a);
 /* Convenience method for uint32_t. */
-static ossl_inline uint32_t constant_time_msb_32(uint32_t a);
+static ossl_inline uint32_t __cdecl constant_time_msb_32(uint32_t a);
 /* Convenience method for uint64_t. */
-static ossl_inline uint64_t constant_time_msb_64(uint64_t a);
+static ossl_inline uint64_t __cdecl constant_time_msb_64(uint64_t a);
 
 /* Returns 0xff..f if a < b and 0 otherwise. */
-static ossl_inline unsigned int constant_time_lt(unsigned int a,
+static ossl_inline unsigned int __cdecl constant_time_lt(unsigned int a,
                                                  unsigned int b);
 /* Convenience method for getting an 8-bit mask. */
-static ossl_inline unsigned char constant_time_lt_8(unsigned int a,
+static ossl_inline unsigned char __cdecl constant_time_lt_8(unsigned int a,
                                                     unsigned int b);
 /* Convenience method for uint64_t. */
-static ossl_inline uint64_t constant_time_lt_64(uint64_t a, uint64_t b);
+static ossl_inline uint64_t __cdecl constant_time_lt_64(uint64_t a, uint64_t b);
 
 /* Returns 0xff..f if a >= b and 0 otherwise. */
-static ossl_inline unsigned int constant_time_ge(unsigned int a,
+static ossl_inline unsigned int __cdecl constant_time_ge(unsigned int a,
                                                  unsigned int b);
 /* Convenience method for getting an 8-bit mask. */
-static ossl_inline unsigned char constant_time_ge_8(unsigned int a,
+static ossl_inline unsigned char __cdecl constant_time_ge_8(unsigned int a,
                                                     unsigned int b);
 
 /* Returns 0xff..f if a == 0 and 0 otherwise. */
-static ossl_inline unsigned int constant_time_is_zero(unsigned int a);
+static ossl_inline unsigned int __cdecl constant_time_is_zero(unsigned int a);
 /* Convenience method for getting an 8-bit mask. */
-static ossl_inline unsigned char constant_time_is_zero_8(unsigned int a);
+static ossl_inline unsigned char __cdecl constant_time_is_zero_8(unsigned int a);
 /* Convenience method for getting a 32-bit mask. */
-static ossl_inline uint32_t constant_time_is_zero_32(uint32_t a);
+static ossl_inline uint32_t __cdecl constant_time_is_zero_32(uint32_t a);
 
 /* Returns 0xff..f if a == b and 0 otherwise. */
-static ossl_inline unsigned int constant_time_eq(unsigned int a,
+static ossl_inline unsigned int __cdecl constant_time_eq(unsigned int a,
                                                  unsigned int b);
 /* Convenience method for getting an 8-bit mask. */
-static ossl_inline unsigned char constant_time_eq_8(unsigned int a,
+static ossl_inline unsigned char __cdecl constant_time_eq_8(unsigned int a,
                                                     unsigned int b);
 /* Signed integers. */
-static ossl_inline unsigned int constant_time_eq_int(int a, int b);
+static ossl_inline unsigned int __cdecl constant_time_eq_int(int a, int b);
 /* Convenience method for getting an 8-bit mask. */
-static ossl_inline unsigned char constant_time_eq_int_8(int a, int b);
+static ossl_inline unsigned char __cdecl constant_time_eq_int_8(int a, int b);
 
 /*-
  * Returns (mask & a) | (~mask & b).
@@ -76,139 +76,139 @@ static ossl_inline unsigned char constant_time_eq_int_8(int a, int b);
  * the select methods return either |a| (if |mask| is nonzero) or |b|
  * (if |mask| is zero).
  */
-static ossl_inline unsigned int constant_time_select(unsigned int mask,
+static ossl_inline unsigned int __cdecl constant_time_select(unsigned int mask,
                                                      unsigned int a,
                                                      unsigned int b);
 /* Convenience method for unsigned chars. */
-static ossl_inline unsigned char constant_time_select_8(unsigned char mask,
+static ossl_inline unsigned char __cdecl constant_time_select_8(unsigned char mask,
                                                         unsigned char a,
                                                         unsigned char b);
 
 /* Convenience method for uint32_t. */
-static ossl_inline uint32_t constant_time_select_32(uint32_t mask, uint32_t a,
+static ossl_inline uint32_t __cdecl constant_time_select_32(uint32_t mask, uint32_t a,
                                                     uint32_t b);
 
 /* Convenience method for uint64_t. */
-static ossl_inline uint64_t constant_time_select_64(uint64_t mask, uint64_t a,
+static ossl_inline uint64_t __cdecl constant_time_select_64(uint64_t mask, uint64_t a,
                                                     uint64_t b);
 /* Convenience method for signed integers. */
-static ossl_inline int constant_time_select_int(unsigned int mask, int a,
+static ossl_inline int __cdecl constant_time_select_int(unsigned int mask, int a,
                                                 int b);
 
 
-static ossl_inline unsigned int constant_time_msb(unsigned int a)
+static ossl_inline unsigned int __cdecl constant_time_msb(unsigned int a)
 {
     return 0 - (a >> (sizeof(a) * 8 - 1));
 }
 
 
-static ossl_inline uint32_t constant_time_msb_32(uint32_t a)
+static ossl_inline uint32_t __cdecl constant_time_msb_32(uint32_t a)
 {
     return 0 - (a >> 31);
 }
 
-static ossl_inline uint64_t constant_time_msb_64(uint64_t a)
+static ossl_inline uint64_t __cdecl constant_time_msb_64(uint64_t a)
 {
     return 0 - (a >> 63);
 }
 
-static ossl_inline size_t constant_time_msb_s(size_t a)
+static ossl_inline size_t __cdecl constant_time_msb_s(size_t a)
 {
     return 0 - (a >> (sizeof(a) * 8 - 1));
 }
 
-static ossl_inline unsigned int constant_time_lt(unsigned int a,
+static ossl_inline unsigned int __cdecl constant_time_lt(unsigned int a,
                                                  unsigned int b)
 {
     return constant_time_msb(a ^ ((a ^ b) | ((a - b) ^ b)));
 }
 
-static ossl_inline size_t constant_time_lt_s(size_t a, size_t b)
+static ossl_inline size_t __cdecl constant_time_lt_s(size_t a, size_t b)
 {
     return constant_time_msb_s(a ^ ((a ^ b) | ((a - b) ^ b)));
 }
 
-static ossl_inline unsigned char constant_time_lt_8(unsigned int a,
+static ossl_inline unsigned char __cdecl constant_time_lt_8(unsigned int a,
                                                     unsigned int b)
 {
     return (unsigned char)constant_time_lt(a, b);
 }
 
-static ossl_inline uint64_t constant_time_lt_64(uint64_t a, uint64_t b)
+static ossl_inline uint64_t __cdecl constant_time_lt_64(uint64_t a, uint64_t b)
 {
     return constant_time_msb_64(a ^ ((a ^ b) | ((a - b) ^ b)));
 }
 
-static ossl_inline unsigned int constant_time_ge(unsigned int a,
+static ossl_inline unsigned int __cdecl constant_time_ge(unsigned int a,
                                                  unsigned int b)
 {
     return ~constant_time_lt(a, b);
 }
 
-static ossl_inline size_t constant_time_ge_s(size_t a, size_t b)
+static ossl_inline size_t __cdecl constant_time_ge_s(size_t a, size_t b)
 {
     return ~constant_time_lt_s(a, b);
 }
 
-static ossl_inline unsigned char constant_time_ge_8(unsigned int a,
+static ossl_inline unsigned char __cdecl constant_time_ge_8(unsigned int a,
                                                     unsigned int b)
 {
     return (unsigned char)constant_time_ge(a, b);
 }
 
-static ossl_inline unsigned char constant_time_ge_8_s(size_t a, size_t b)
+static ossl_inline unsigned char __cdecl constant_time_ge_8_s(size_t a, size_t b)
 {
     return (unsigned char)constant_time_ge_s(a, b);
 }
 
-static ossl_inline unsigned int constant_time_is_zero(unsigned int a)
+static ossl_inline unsigned int __cdecl constant_time_is_zero(unsigned int a)
 {
     return constant_time_msb(~a & (a - 1));
 }
 
-static ossl_inline size_t constant_time_is_zero_s(size_t a)
+static ossl_inline size_t __cdecl constant_time_is_zero_s(size_t a)
 {
     return constant_time_msb_s(~a & (a - 1));
 }
 
-static ossl_inline unsigned char constant_time_is_zero_8(unsigned int a)
+static ossl_inline unsigned char __cdecl constant_time_is_zero_8(unsigned int a)
 {
     return (unsigned char)constant_time_is_zero(a);
 }
 
-static ossl_inline uint32_t constant_time_is_zero_32(uint32_t a)
+static ossl_inline uint32_t __cdecl constant_time_is_zero_32(uint32_t a)
 {
     return constant_time_msb_32(~a & (a - 1));
 }
 
-static ossl_inline unsigned int constant_time_eq(unsigned int a,
+static ossl_inline unsigned int __cdecl constant_time_eq(unsigned int a,
                                                  unsigned int b)
 {
     return constant_time_is_zero(a ^ b);
 }
 
-static ossl_inline size_t constant_time_eq_s(size_t a, size_t b)
+static ossl_inline size_t __cdecl constant_time_eq_s(size_t a, size_t b)
 {
     return constant_time_is_zero_s(a ^ b);
 }
 
-static ossl_inline unsigned char constant_time_eq_8(unsigned int a,
+static ossl_inline unsigned char __cdecl constant_time_eq_8(unsigned int a,
                                                     unsigned int b)
 {
     return (unsigned char)constant_time_eq(a, b);
 }
 
-static ossl_inline unsigned char constant_time_eq_8_s(size_t a, size_t b)
+static ossl_inline unsigned char __cdecl constant_time_eq_8_s(size_t a, size_t b)
 {
     return (unsigned char)constant_time_eq_s(a, b);
 }
 
-static ossl_inline unsigned int constant_time_eq_int(int a, int b)
+static ossl_inline unsigned int __cdecl constant_time_eq_int(int a, int b)
 {
     return constant_time_eq((unsigned)(a), (unsigned)(b));
 }
 
-static ossl_inline unsigned char constant_time_eq_int_8(int a, int b)
+static ossl_inline unsigned char __cdecl constant_time_eq_int_8(int a, int b)
 {
     return constant_time_eq_8((unsigned)(a), (unsigned)(b));
 }
@@ -220,7 +220,7 @@ static ossl_inline unsigned char constant_time_eq_int_8(int a, int b)
  * statements, which avoids the recognition of the select
  * and turning it into a conditional load or branch.
  */
-static ossl_inline unsigned int value_barrier(unsigned int a)
+static ossl_inline unsigned int __cdecl value_barrier(unsigned int a)
 {
 #if !defined(OPENSSL_NO_ASM) && defined(__GNUC__)
     unsigned int r;
@@ -232,7 +232,7 @@ static ossl_inline unsigned int value_barrier(unsigned int a)
 }
 
 /* Convenience method for uint32_t. */
-static ossl_inline uint32_t value_barrier_32(uint32_t a)
+static ossl_inline uint32_t __cdecl value_barrier_32(uint32_t a)
 {
 #if !defined(OPENSSL_NO_ASM) && defined(__GNUC__)
     uint32_t r;
@@ -244,7 +244,7 @@ static ossl_inline uint32_t value_barrier_32(uint32_t a)
 }
 
 /* Convenience method for uint64_t. */
-static ossl_inline uint64_t value_barrier_64(uint64_t a)
+static ossl_inline uint64_t __cdecl value_barrier_64(uint64_t a)
 {
 #if !defined(OPENSSL_NO_ASM) && defined(__GNUC__)
     uint64_t r;
@@ -256,7 +256,7 @@ static ossl_inline uint64_t value_barrier_64(uint64_t a)
 }
 
 /* Convenience method for size_t. */
-static ossl_inline size_t value_barrier_s(size_t a)
+static ossl_inline size_t __cdecl value_barrier_s(size_t a)
 {
 #if !defined(OPENSSL_NO_ASM) && defined(__GNUC__)
     size_t r;
@@ -267,46 +267,46 @@ static ossl_inline size_t value_barrier_s(size_t a)
     return r;
 }
 
-static ossl_inline unsigned int constant_time_select(unsigned int mask,
+static ossl_inline unsigned int __cdecl constant_time_select(unsigned int mask,
                                                      unsigned int a,
                                                      unsigned int b)
 {
     return (value_barrier(mask) & a) | (value_barrier(~mask) & b);
 }
 
-static ossl_inline size_t constant_time_select_s(size_t mask,
+static ossl_inline size_t __cdecl constant_time_select_s(size_t mask,
                                                  size_t a,
                                                  size_t b)
 {
     return (value_barrier_s(mask) & a) | (value_barrier_s(~mask) & b);
 }
 
-static ossl_inline unsigned char constant_time_select_8(unsigned char mask,
+static ossl_inline unsigned char __cdecl constant_time_select_8(unsigned char mask,
                                                         unsigned char a,
                                                         unsigned char b)
 {
     return (unsigned char)constant_time_select(mask, a, b);
 }
 
-static ossl_inline int constant_time_select_int(unsigned int mask, int a,
+static ossl_inline int __cdecl constant_time_select_int(unsigned int mask, int a,
                                                 int b)
 {
     return (int)constant_time_select(mask, (unsigned)(a), (unsigned)(b));
 }
 
-static ossl_inline int constant_time_select_int_s(size_t mask, int a, int b)
+static ossl_inline int __cdecl constant_time_select_int_s(size_t mask, int a, int b)
 {
     return (int)constant_time_select((unsigned)mask, (unsigned)(a),
                                       (unsigned)(b));
 }
 
-static ossl_inline uint32_t constant_time_select_32(uint32_t mask, uint32_t a,
+static ossl_inline uint32_t __cdecl constant_time_select_32(uint32_t mask, uint32_t a,
                                                     uint32_t b)
 {
     return (value_barrier_32(mask) & a) | (value_barrier_32(~mask) & b);
 }
 
-static ossl_inline uint64_t constant_time_select_64(uint64_t mask, uint64_t a,
+static ossl_inline uint64_t __cdecl constant_time_select_64(uint64_t mask, uint64_t a,
                                                     uint64_t b)
 {
     return (value_barrier_64(mask) & a) | (value_barrier_64(~mask) & b);
@@ -322,7 +322,7 @@ static ossl_inline uint64_t constant_time_select_64(uint64_t mask, uint64_t a,
  *     *b = tmp;
  * }
  */
-static ossl_inline void constant_time_cond_swap_32(uint32_t mask, uint32_t *a,
+static ossl_inline void __cdecl constant_time_cond_swap_32(uint32_t mask, uint32_t *a,
                                                    uint32_t *b)
 {
     uint32_t xor = *a ^ *b;
@@ -342,7 +342,7 @@ static ossl_inline void constant_time_cond_swap_32(uint32_t mask, uint32_t *a,
  *     *b = tmp;
  * }
  */
-static ossl_inline void constant_time_cond_swap_64(uint64_t mask, uint64_t *a,
+static ossl_inline void __cdecl constant_time_cond_swap_64(uint64_t mask, uint64_t *a,
                                                    uint64_t *b)
 {
     uint64_t xor = *a ^ *b;
@@ -357,7 +357,7 @@ static ossl_inline void constant_time_cond_swap_64(uint64_t mask, uint64_t *a,
  * Copies row number idx into out. rowsize and numrows are not considered
  * private.
  */
-static ossl_inline void constant_time_lookup(void *out,
+static ossl_inline void __cdecl constant_time_lookup(void *out,
                                              const void *table,
                                              size_t rowsize,
                                              size_t numrows,
@@ -382,6 +382,6 @@ static ossl_inline void constant_time_lookup(void *out,
  * Expected usage pattern is to unconditionally set error and then
  * wipe it if there was no actual error. |clear| is 1 or 0.
  */
-void err_clear_last_constant_time(int clear);
+void __cdecl err_clear_last_constant_time(int clear);
 
 #endif                          /* HEADER_CONSTANT_TIME_LOCL_H */
diff --git a/include/internal/cryptlib.h b/include/internal/cryptlib.h
index 23e17e5586..a8100fa9a7 100644
--- a/include/internal/cryptlib.h
+++ b/include/internal/cryptlib.h
@@ -28,7 +28,7 @@
 #ifdef NDEBUG
 # define ossl_assert(x) ((x) != 0)
 #else
-__owur static ossl_inline int ossl_assert_int(int expr, const char *exprstr,
+__owur static ossl_inline int __cdecl ossl_assert_int(int expr, const char *exprstr,
                                               const char *file, int line)
 {
     if (!expr)
@@ -75,25 +75,25 @@ DEFINE_LHASH_OF(MEM);
 # define DECIMAL_SIZE(type)      ((sizeof(type)*8+2)/3+1)
 # define HEX_SIZE(type)          (sizeof(type)*2)
 
-void OPENSSL_cpuid_setup(void);
+void __cdecl OPENSSL_cpuid_setup(void);
 extern unsigned int OPENSSL_ia32cap_P[];
-void OPENSSL_showfatal(const char *fmta, ...);
-void crypto_cleanup_all_ex_data_int(void);
-int openssl_init_fork_handlers(void);
-int openssl_get_fork_id(void);
+void __cdecl OPENSSL_showfatal(const char *fmta, ...);
+void __cdecl crypto_cleanup_all_ex_data_int(void);
+int __cdecl openssl_init_fork_handlers(void);
+int __cdecl openssl_get_fork_id(void);
 
-char *ossl_safe_getenv(const char *name);
+char * __cdecl ossl_safe_getenv(const char *name);
 
 extern CRYPTO_RWLOCK *memdbg_lock;
-int openssl_strerror_r(int errnum, char *buf, size_t buflen);
+int __cdecl openssl_strerror_r(int errnum, char *buf, size_t buflen);
 # if !defined(OPENSSL_NO_STDIO)
-FILE *openssl_fopen(const char *filename, const char *mode);
+FILE * __cdecl openssl_fopen(const char *filename, const char *mode);
 # else
-void *openssl_fopen(const char *filename, const char *mode);
+void * __cdecl openssl_fopen(const char *filename, const char *mode);
 # endif
 
-uint32_t OPENSSL_rdtsc(void);
-size_t OPENSSL_instrument_bus(unsigned int *, size_t);
-size_t OPENSSL_instrument_bus2(unsigned int *, size_t, size_t);
+uint32_t __cdecl OPENSSL_rdtsc(void);
+size_t __cdecl OPENSSL_instrument_bus(unsigned int *, size_t);
+size_t __cdecl OPENSSL_instrument_bus2(unsigned int *, size_t, size_t);
 
 #endif
diff --git a/include/internal/err.h b/include/internal/err.h
index d46b8bdb29..6bad3f0cf3 100644
--- a/include/internal/err.h
+++ b/include/internal/err.h
@@ -10,6 +10,6 @@
 #ifndef INTERNAL_ERR_H
 # define INTERNAL_ERR_H
 
-void err_free_strings_int(void);
+void __cdecl err_free_strings_int(void);
 
 #endif
diff --git a/include/internal/o_dir.h b/include/internal/o_dir.h
index e7b55e0c18..2854a6ad12 100644
--- a/include/internal/o_dir.h
+++ b/include/internal/o_dir.h
@@ -45,8 +45,8 @@ typedef struct OPENSSL_dir_context_st OPENSSL_DIR_CTX;
  * returns NULL on error or end-of-directory. If it is end-of-directory,
  * errno will be zero
  */
-const char *OPENSSL_DIR_read(OPENSSL_DIR_CTX **ctx, const char *directory);
+const char * __cdecl OPENSSL_DIR_read(OPENSSL_DIR_CTX **ctx, const char *directory);
 /* returns 1 on success, 0 on error */
-int OPENSSL_DIR_end(OPENSSL_DIR_CTX **ctx);
+int __cdecl OPENSSL_DIR_end(OPENSSL_DIR_CTX **ctx);
 
 #endif                          /* LPDIR_H */
diff --git a/include/internal/o_str.h b/include/internal/o_str.h
index 86403c9ee2..9b74164a3a 100644
--- a/include/internal/o_str.h
+++ b/include/internal/o_str.h
@@ -12,6 +12,6 @@
 
 # include <stddef.h>            /* to get size_t */
 
-int OPENSSL_memcmp(const void *p1, const void *p2, size_t n);
+int __cdecl OPENSSL_memcmp(const void *p1, const void *p2, size_t n);
 
 #endif
diff --git a/include/internal/refcount.h b/include/internal/refcount.h
index 6e1a840ef1..b6564e7f2f 100644
--- a/include/internal/refcount.h
+++ b/include/internal/refcount.h
@@ -29,7 +29,7 @@
 
 typedef _Atomic int CRYPTO_REF_COUNT;
 
-static inline int CRYPTO_UP_REF(_Atomic int *val, int *ret, void *lock)
+static inline int __cdecl CRYPTO_UP_REF(_Atomic int *val, int *ret, void *lock)
 {
     *ret = atomic_fetch_add_explicit(val, 1, memory_order_relaxed) + 1;
     return 1;
@@ -45,7 +45,7 @@ static inline int CRYPTO_UP_REF(_Atomic int *val, int *ret, void *lock)
  * to mutable members doesn't have to be serialized anymore, which would
  * otherwise imply an acquire fence. Hence conditional acquire fence...
  */
-static inline int CRYPTO_DOWN_REF(_Atomic int *val, int *ret, void *lock)
+static inline int __cdecl CRYPTO_DOWN_REF(_Atomic int *val, int *ret, void *lock)
 {
     *ret = atomic_fetch_sub_explicit(val, 1, memory_order_relaxed) - 1;
     if (*ret == 0)
@@ -59,13 +59,13 @@ static inline int CRYPTO_DOWN_REF(_Atomic int *val, int *ret, void *lock)
 
 typedef int CRYPTO_REF_COUNT;
 
-static __inline__ int CRYPTO_UP_REF(int *val, int *ret, void *lock)
+static __inline__ int __cdecl CRYPTO_UP_REF(int *val, int *ret, void *lock)
 {
     *ret = __atomic_fetch_add(val, 1, __ATOMIC_RELAXED) + 1;
     return 1;
 }
 
-static __inline__ int CRYPTO_DOWN_REF(int *val, int *ret, void *lock)
+static __inline__ int __cdecl CRYPTO_DOWN_REF(int *val, int *ret, void *lock)
 {
     *ret = __atomic_fetch_sub(val, 1, __ATOMIC_RELAXED) - 1;
     if (*ret == 0)
@@ -85,13 +85,13 @@ typedef volatile int CRYPTO_REF_COUNT;
 #    define _ARM_BARRIER_ISH _ARM64_BARRIER_ISH
 #   endif
 
-static __inline int CRYPTO_UP_REF(volatile int *val, int *ret, void *lock)
+static __inline int __cdecl CRYPTO_UP_REF(volatile int *val, int *ret, void *lock)
 {
     *ret = _InterlockedExchangeAdd_nf(val, 1) + 1;
     return 1;
 }
 
-static __inline int CRYPTO_DOWN_REF(volatile int *val, int *ret, void *lock)
+static __inline int __cdecl CRYPTO_DOWN_REF(volatile int *val, int *ret, void *lock)
 {
     *ret = _InterlockedExchangeAdd_nf(val, -1) - 1;
     if (*ret == 0)
@@ -111,13 +111,13 @@ static __inline int CRYPTO_DOWN_REF(volatile int *val, int *ret, void *lock)
 #    endif
 #   endif
 
-static __inline int CRYPTO_UP_REF(volatile int *val, int *ret, void *lock)
+static __inline int __cdecl CRYPTO_UP_REF(volatile int *val, int *ret, void *lock)
 {
     *ret = _InterlockedExchangeAdd(val, 1) + 1;
     return 1;
 }
 
-static __inline int CRYPTO_DOWN_REF(volatile int *val, int *ret, void *lock)
+static __inline int __cdecl CRYPTO_DOWN_REF(volatile int *val, int *ret, void *lock)
 {
     *ret = _InterlockedExchangeAdd(val, -1) - 1;
     return 1;
diff --git a/include/internal/sslconf.h b/include/internal/sslconf.h
index d538f8614f..8154650227 100644
--- a/include/internal/sslconf.h
+++ b/include/internal/sslconf.h
@@ -12,9 +12,9 @@
 
 typedef struct ssl_conf_cmd_st SSL_CONF_CMD;
 
-const SSL_CONF_CMD *conf_ssl_get(size_t idx, const char **name, size_t *cnt);
-int conf_ssl_name_find(const char *name, size_t *idx);
-void conf_ssl_get_cmd(const SSL_CONF_CMD *cmd, size_t idx, char **cmdstr,
+const SSL_CONF_CMD * __cdecl conf_ssl_get(size_t idx, const char **name, size_t *cnt);
+int __cdecl conf_ssl_name_find(const char *name, size_t *idx);
+void __cdecl conf_ssl_get_cmd(const SSL_CONF_CMD *cmd, size_t idx, char **cmdstr,
                       char **arg);
 
 #endif
diff --git a/include/internal/thread_once.h b/include/internal/thread_once.h
index 8f8aa6e1c4..a6c1edc4e6 100644
--- a/include/internal/thread_once.h
+++ b/include/internal/thread_once.h
@@ -24,13 +24,13 @@
  * }
  */
 #define DEFINE_RUN_ONCE(init)                   \
-    static int init(void);                     \
+    static int __cdecl init(void);                     \
     int init##_ossl_ret_ = 0;                   \
-    void init##_ossl_(void)                     \
+    void __cdecl init##_ossl_(void)                     \
     {                                           \
         init##_ossl_ret_ = init();              \
     }                                           \
-    static int init(void)
+    static int __cdecl init(void)
 
 /*
  * DECLARE_RUN_ONCE: Declare an initialiser function that should be run exactly
@@ -38,7 +38,7 @@
  */
 #define DECLARE_RUN_ONCE(init)                  \
     extern int init##_ossl_ret_;                \
-    void init##_ossl_(void);
+    void __cdecl init##_ossl_(void);
 
 /*
  * DEFINE_RUN_ONCE_STATIC: Define an initialiser function that should be run
@@ -56,13 +56,13 @@
  * }
  */
 #define DEFINE_RUN_ONCE_STATIC(init)            \
-    static int init(void);                     \
+    static int __cdecl init(void);                     \
     static int init##_ossl_ret_ = 0;            \
-    static void init##_ossl_(void)              \
+    static void __cdecl init##_ossl_(void)              \
     {                                           \
         init##_ossl_ret_ = init();              \
     }                                           \
-    static int init(void)
+    static int __cdecl init(void)
 
 /*
  * DEFINE_RUN_ONCE_STATIC_ALT: Define an alternative initialiser function. This
@@ -97,12 +97,12 @@
  * }
  */
 #define DEFINE_RUN_ONCE_STATIC_ALT(initalt, init) \
-    static int initalt(void);                     \
-    static void initalt##_ossl_(void)             \
+    static int __cdecl initalt(void);                     \
+    static void __cdecl initalt##_ossl_(void)             \
     {                                             \
         init##_ossl_ret_ = initalt();             \
     }                                             \
-    static int initalt(void)
+    static int __cdecl initalt(void)
 
 /*
  * RUN_ONCE - use CRYPTO_THREAD_run_once, and check if the init succeeded
diff --git a/include/openssl/aes.h b/include/openssl/aes.h
index 245c552abd..6f78f11053 100644
--- a/include/openssl/aes.h
+++ b/include/openssl/aes.h
@@ -38,49 +38,49 @@ struct aes_key_st {
 };
 typedef struct aes_key_st AES_KEY;
 
-const char *AES_options(void);
+const char * __cdecl AES_options(void);
 
-int AES_set_encrypt_key(const unsigned char *userKey, const int bits,
+int __cdecl AES_set_encrypt_key(const unsigned char *userKey, const int bits,
                         AES_KEY *key);
-int AES_set_decrypt_key(const unsigned char *userKey, const int bits,
+int __cdecl AES_set_decrypt_key(const unsigned char *userKey, const int bits,
                         AES_KEY *key);
 
-void AES_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl AES_encrypt(const unsigned char *in, unsigned char *out,
                  const AES_KEY *key);
-void AES_decrypt(const unsigned char *in, unsigned char *out,
+void __cdecl AES_decrypt(const unsigned char *in, unsigned char *out,
                  const AES_KEY *key);
 
-void AES_ecb_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl AES_ecb_encrypt(const unsigned char *in, unsigned char *out,
                      const AES_KEY *key, const int enc);
-void AES_cbc_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl AES_cbc_encrypt(const unsigned char *in, unsigned char *out,
                      size_t length, const AES_KEY *key,
                      unsigned char *ivec, const int enc);
-void AES_cfb128_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl AES_cfb128_encrypt(const unsigned char *in, unsigned char *out,
                         size_t length, const AES_KEY *key,
                         unsigned char *ivec, int *num, const int enc);
-void AES_cfb1_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl AES_cfb1_encrypt(const unsigned char *in, unsigned char *out,
                       size_t length, const AES_KEY *key,
                       unsigned char *ivec, int *num, const int enc);
-void AES_cfb8_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl AES_cfb8_encrypt(const unsigned char *in, unsigned char *out,
                       size_t length, const AES_KEY *key,
                       unsigned char *ivec, int *num, const int enc);
-void AES_ofb128_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl AES_ofb128_encrypt(const unsigned char *in, unsigned char *out,
                         size_t length, const AES_KEY *key,
                         unsigned char *ivec, int *num);
 /* NB: the IV is _two_ blocks long */
-void AES_ige_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl AES_ige_encrypt(const unsigned char *in, unsigned char *out,
                      size_t length, const AES_KEY *key,
                      unsigned char *ivec, const int enc);
 /* NB: the IV is _four_ blocks long */
-void AES_bi_ige_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl AES_bi_ige_encrypt(const unsigned char *in, unsigned char *out,
                         size_t length, const AES_KEY *key,
                         const AES_KEY *key2, const unsigned char *ivec,
                         const int enc);
 
-int AES_wrap_key(AES_KEY *key, const unsigned char *iv,
+int __cdecl AES_wrap_key(AES_KEY *key, const unsigned char *iv,
                  unsigned char *out,
                  const unsigned char *in, unsigned int inlen);
-int AES_unwrap_key(AES_KEY *key, const unsigned char *iv,
+int __cdecl AES_unwrap_key(AES_KEY *key, const unsigned char *iv,
                    unsigned char *out,
                    const unsigned char *in, unsigned int inlen);
 
diff --git a/include/openssl/asn1.h b/include/openssl/asn1.h
index 9522eec18f..30c2a14d7a 100644
--- a/include/openssl/asn1.h
+++ b/include/openssl/asn1.h
@@ -228,25 +228,25 @@ typedef struct ASN1_VALUE_st ASN1_VALUE;
         DECLARE_ASN1_ENCODE_FUNCTIONS(type, itname, name)
 
 # define DECLARE_ASN1_ENCODE_FUNCTIONS(type, itname, name) \
-        type *d2i_##name(type **a, const unsigned char **in, long len); \
-        int i2d_##name(type *a, unsigned char **out); \
+        type * __cdecl d2i_##name(type **a, const unsigned char **in, long len); \
+        int __cdecl i2d_##name(type *a, unsigned char **out); \
         DECLARE_ASN1_ITEM(itname)
 
 # define DECLARE_ASN1_ENCODE_FUNCTIONS_const(type, name) \
-        type *d2i_##name(type **a, const unsigned char **in, long len); \
-        int i2d_##name(const type *a, unsigned char **out); \
+        type * __cdecl d2i_##name(type **a, const unsigned char **in, long len); \
+        int __cdecl i2d_##name(const type *a, unsigned char **out); \
         DECLARE_ASN1_ITEM(name)
 
 # define DECLARE_ASN1_NDEF_FUNCTION(name) \
-        int i2d_##name##_NDEF(name *a, unsigned char **out);
+        int __cdecl i2d_##name##_NDEF(name *a, unsigned char **out);
 
 # define DECLARE_ASN1_FUNCTIONS_const(name) \
         DECLARE_ASN1_ALLOC_FUNCTIONS(name) \
         DECLARE_ASN1_ENCODE_FUNCTIONS_const(name, name)
 
 # define DECLARE_ASN1_ALLOC_FUNCTIONS_name(type, name) \
-        type *name##_new(void); \
-        void name##_free(type *a);
+        type * __cdecl name##_new(void); \
+        void __cdecl name##_free(type *a);
 
 # define DECLARE_ASN1_PRINT_FUNCTION(stname) \
         DECLARE_ASN1_PRINT_FUNCTION_fname(stname, stname)
@@ -255,23 +255,23 @@ typedef struct ASN1_VALUE_st ASN1_VALUE;
         int fname##_print_ctx(BIO *out, stname *x, int indent, \
                                          const ASN1_PCTX *pctx);
 
-# define D2I_OF(type) type *(*)(type **,const unsigned char **,long)
-# define I2D_OF(type) int (*)(type *,unsigned char **)
-# define I2D_OF_const(type) int (*)(const type *,unsigned char **)
+# define D2I_OF(type) type *(__cdecl *)(type **,const unsigned char **,long)
+# define I2D_OF(type) int (__cdecl *)(type *,unsigned char **)
+# define I2D_OF_const(type) int (__cdecl *)(const type *,unsigned char **)
 
 # define CHECKED_D2I_OF(type, d2i) \
     ((d2i_of_void*) (1 ? d2i : ((D2I_OF(type))0)))
 # define CHECKED_I2D_OF(type, i2d) \
     ((i2d_of_void*) (1 ? i2d : ((I2D_OF(type))0)))
 # define CHECKED_NEW_OF(type, xnew) \
-    ((void *(*)(void)) (1 ? xnew : ((type *(*)(void))0)))
+    ((void *(__cdecl *)(void)) (1 ? xnew : ((type *(__cdecl *)(void))0)))
 # define CHECKED_PTR_OF(type, p) \
     ((void*) (1 ? p : (type*)0))
 # define CHECKED_PPTR_OF(type, p) \
     ((void**) (1 ? p : (type**)0))
 
-# define TYPEDEF_D2I_OF(type) typedef type *d2i_of_##type(type **,const unsigned char **,long)
-# define TYPEDEF_I2D_OF(type) typedef int i2d_of_##type(type *,unsigned char **)
+# define TYPEDEF_D2I_OF(type) typedef type * __cdecl d2i_of_##type(type **,const unsigned char **,long)
+# define TYPEDEF_I2D_OF(type) typedef int __cdecl i2d_of_##type(type *,unsigned char **)
 # define TYPEDEF_D2I2D_OF(type) TYPEDEF_D2I_OF(type); TYPEDEF_I2D_OF(type)
 
 TYPEDEF_D2I2D_OF(void);
@@ -517,87 +517,87 @@ typedef struct BIT_STRING_BITNAME_st {
 
 DECLARE_ASN1_FUNCTIONS_fname(ASN1_TYPE, ASN1_ANY, ASN1_TYPE)
 
-int ASN1_TYPE_get(const ASN1_TYPE *a);
-void ASN1_TYPE_set(ASN1_TYPE *a, int type, void *value);
-int ASN1_TYPE_set1(ASN1_TYPE *a, int type, const void *value);
-int ASN1_TYPE_cmp(const ASN1_TYPE *a, const ASN1_TYPE *b);
+int __cdecl ASN1_TYPE_get(const ASN1_TYPE *a);
+void __cdecl ASN1_TYPE_set(ASN1_TYPE *a, int type, void *value);
+int __cdecl ASN1_TYPE_set1(ASN1_TYPE *a, int type, const void *value);
+int __cdecl ASN1_TYPE_cmp(const ASN1_TYPE *a, const ASN1_TYPE *b);
 
-ASN1_TYPE *ASN1_TYPE_pack_sequence(const ASN1_ITEM *it, void *s, ASN1_TYPE **t);
-void *ASN1_TYPE_unpack_sequence(const ASN1_ITEM *it, const ASN1_TYPE *t);
+ASN1_TYPE * __cdecl ASN1_TYPE_pack_sequence(const ASN1_ITEM *it, void *s, ASN1_TYPE **t);
+void * __cdecl ASN1_TYPE_unpack_sequence(const ASN1_ITEM *it, const ASN1_TYPE *t);
 
-ASN1_OBJECT *ASN1_OBJECT_new(void);
-void ASN1_OBJECT_free(ASN1_OBJECT *a);
-int i2d_ASN1_OBJECT(const ASN1_OBJECT *a, unsigned char **pp);
-ASN1_OBJECT *d2i_ASN1_OBJECT(ASN1_OBJECT **a, const unsigned char **pp,
+ASN1_OBJECT * __cdecl ASN1_OBJECT_new(void);
+void __cdecl ASN1_OBJECT_free(ASN1_OBJECT *a);
+int __cdecl i2d_ASN1_OBJECT(const ASN1_OBJECT *a, unsigned char **pp);
+ASN1_OBJECT * __cdecl d2i_ASN1_OBJECT(ASN1_OBJECT **a, const unsigned char **pp,
                              long length);
 
 DECLARE_ASN1_ITEM(ASN1_OBJECT)
 
 DEFINE_STACK_OF(ASN1_OBJECT)
 
-ASN1_STRING *ASN1_STRING_new(void);
-void ASN1_STRING_free(ASN1_STRING *a);
-void ASN1_STRING_clear_free(ASN1_STRING *a);
-int ASN1_STRING_copy(ASN1_STRING *dst, const ASN1_STRING *str);
-ASN1_STRING *ASN1_STRING_dup(const ASN1_STRING *a);
-ASN1_STRING *ASN1_STRING_type_new(int type);
-int ASN1_STRING_cmp(const ASN1_STRING *a, const ASN1_STRING *b);
+ASN1_STRING * __cdecl ASN1_STRING_new(void);
+void __cdecl ASN1_STRING_free(ASN1_STRING *a);
+void __cdecl ASN1_STRING_clear_free(ASN1_STRING *a);
+int __cdecl ASN1_STRING_copy(ASN1_STRING *dst, const ASN1_STRING *str);
+ASN1_STRING * __cdecl ASN1_STRING_dup(const ASN1_STRING *a);
+ASN1_STRING * __cdecl ASN1_STRING_type_new(int type);
+int __cdecl ASN1_STRING_cmp(const ASN1_STRING *a, const ASN1_STRING *b);
   /*
    * Since this is used to store all sorts of things, via macros, for now,
    * make its data void *
    */
-int ASN1_STRING_set(ASN1_STRING *str, const void *data, int len);
-void ASN1_STRING_set0(ASN1_STRING *str, void *data, int len);
-int ASN1_STRING_length(const ASN1_STRING *x);
-void ASN1_STRING_length_set(ASN1_STRING *x, int n);
-int ASN1_STRING_type(const ASN1_STRING *x);
+int __cdecl ASN1_STRING_set(ASN1_STRING *str, const void *data, int len);
+void __cdecl ASN1_STRING_set0(ASN1_STRING *str, void *data, int len);
+int __cdecl ASN1_STRING_length(const ASN1_STRING *x);
+void __cdecl ASN1_STRING_length_set(ASN1_STRING *x, int n);
+int __cdecl ASN1_STRING_type(const ASN1_STRING *x);
 DEPRECATEDIN_1_1_0(unsigned char *ASN1_STRING_data(ASN1_STRING *x))
-const unsigned char *ASN1_STRING_get0_data(const ASN1_STRING *x);
+const unsigned char * __cdecl ASN1_STRING_get0_data(const ASN1_STRING *x);
 
 DECLARE_ASN1_FUNCTIONS(ASN1_BIT_STRING)
-int ASN1_BIT_STRING_set(ASN1_BIT_STRING *a, unsigned char *d, int length);
-int ASN1_BIT_STRING_set_bit(ASN1_BIT_STRING *a, int n, int value);
-int ASN1_BIT_STRING_get_bit(const ASN1_BIT_STRING *a, int n);
-int ASN1_BIT_STRING_check(const ASN1_BIT_STRING *a,
+int __cdecl ASN1_BIT_STRING_set(ASN1_BIT_STRING *a, unsigned char *d, int length);
+int __cdecl ASN1_BIT_STRING_set_bit(ASN1_BIT_STRING *a, int n, int value);
+int __cdecl ASN1_BIT_STRING_get_bit(const ASN1_BIT_STRING *a, int n);
+int __cdecl ASN1_BIT_STRING_check(const ASN1_BIT_STRING *a,
                           const unsigned char *flags, int flags_len);
 
-int ASN1_BIT_STRING_name_print(BIO *out, ASN1_BIT_STRING *bs,
+int __cdecl ASN1_BIT_STRING_name_print(BIO *out, ASN1_BIT_STRING *bs,
                                BIT_STRING_BITNAME *tbl, int indent);
-int ASN1_BIT_STRING_num_asc(const char *name, BIT_STRING_BITNAME *tbl);
-int ASN1_BIT_STRING_set_asc(ASN1_BIT_STRING *bs, const char *name, int value,
+int __cdecl ASN1_BIT_STRING_num_asc(const char *name, BIT_STRING_BITNAME *tbl);
+int __cdecl ASN1_BIT_STRING_set_asc(ASN1_BIT_STRING *bs, const char *name, int value,
                             BIT_STRING_BITNAME *tbl);
 
 DECLARE_ASN1_FUNCTIONS(ASN1_INTEGER)
-ASN1_INTEGER *d2i_ASN1_UINTEGER(ASN1_INTEGER **a, const unsigned char **pp,
+ASN1_INTEGER * __cdecl d2i_ASN1_UINTEGER(ASN1_INTEGER **a, const unsigned char **pp,
                                 long length);
-ASN1_INTEGER *ASN1_INTEGER_dup(const ASN1_INTEGER *x);
-int ASN1_INTEGER_cmp(const ASN1_INTEGER *x, const ASN1_INTEGER *y);
+ASN1_INTEGER * __cdecl ASN1_INTEGER_dup(const ASN1_INTEGER *x);
+int __cdecl ASN1_INTEGER_cmp(const ASN1_INTEGER *x, const ASN1_INTEGER *y);
 
 DECLARE_ASN1_FUNCTIONS(ASN1_ENUMERATED)
 
-int ASN1_UTCTIME_check(const ASN1_UTCTIME *a);
-ASN1_UTCTIME *ASN1_UTCTIME_set(ASN1_UTCTIME *s, time_t t);
-ASN1_UTCTIME *ASN1_UTCTIME_adj(ASN1_UTCTIME *s, time_t t,
+int __cdecl ASN1_UTCTIME_check(const ASN1_UTCTIME *a);
+ASN1_UTCTIME * __cdecl ASN1_UTCTIME_set(ASN1_UTCTIME *s, time_t t);
+ASN1_UTCTIME * __cdecl ASN1_UTCTIME_adj(ASN1_UTCTIME *s, time_t t,
                                int offset_day, long offset_sec);
-int ASN1_UTCTIME_set_string(ASN1_UTCTIME *s, const char *str);
-int ASN1_UTCTIME_cmp_time_t(const ASN1_UTCTIME *s, time_t t);
+int __cdecl ASN1_UTCTIME_set_string(ASN1_UTCTIME *s, const char *str);
+int __cdecl ASN1_UTCTIME_cmp_time_t(const ASN1_UTCTIME *s, time_t t);
 
-int ASN1_GENERALIZEDTIME_check(const ASN1_GENERALIZEDTIME *a);
-ASN1_GENERALIZEDTIME *ASN1_GENERALIZEDTIME_set(ASN1_GENERALIZEDTIME *s,
+int __cdecl ASN1_GENERALIZEDTIME_check(const ASN1_GENERALIZEDTIME *a);
+ASN1_GENERALIZEDTIME * __cdecl ASN1_GENERALIZEDTIME_set(ASN1_GENERALIZEDTIME *s,
                                                time_t t);
-ASN1_GENERALIZEDTIME *ASN1_GENERALIZEDTIME_adj(ASN1_GENERALIZEDTIME *s,
+ASN1_GENERALIZEDTIME * __cdecl ASN1_GENERALIZEDTIME_adj(ASN1_GENERALIZEDTIME *s,
                                                time_t t, int offset_day,
                                                long offset_sec);
-int ASN1_GENERALIZEDTIME_set_string(ASN1_GENERALIZEDTIME *s, const char *str);
+int __cdecl ASN1_GENERALIZEDTIME_set_string(ASN1_GENERALIZEDTIME *s, const char *str);
 
-int ASN1_TIME_diff(int *pday, int *psec,
+int __cdecl ASN1_TIME_diff(int *pday, int *psec,
                    const ASN1_TIME *from, const ASN1_TIME *to);
 
 DECLARE_ASN1_FUNCTIONS(ASN1_OCTET_STRING)
-ASN1_OCTET_STRING *ASN1_OCTET_STRING_dup(const ASN1_OCTET_STRING *a);
-int ASN1_OCTET_STRING_cmp(const ASN1_OCTET_STRING *a,
+ASN1_OCTET_STRING * __cdecl ASN1_OCTET_STRING_dup(const ASN1_OCTET_STRING *a);
+int __cdecl ASN1_OCTET_STRING_cmp(const ASN1_OCTET_STRING *a,
                           const ASN1_OCTET_STRING *b);
-int ASN1_OCTET_STRING_set(ASN1_OCTET_STRING *str, const unsigned char *data,
+int __cdecl ASN1_OCTET_STRING_set(ASN1_OCTET_STRING *str, const unsigned char *data,
                           int len);
 
 DECLARE_ASN1_FUNCTIONS(ASN1_VISIBLESTRING)
@@ -606,8 +606,8 @@ DECLARE_ASN1_FUNCTIONS(ASN1_UTF8STRING)
 DECLARE_ASN1_FUNCTIONS(ASN1_NULL)
 DECLARE_ASN1_FUNCTIONS(ASN1_BMPSTRING)
 
-int UTF8_getc(const unsigned char *str, int len, unsigned long *val);
-int UTF8_putc(unsigned char *str, int len, unsigned long value);
+int __cdecl UTF8_getc(const unsigned char *str, int len, unsigned long *val);
+int __cdecl UTF8_putc(unsigned char *str, int len, unsigned long value);
 
 DECLARE_ASN1_FUNCTIONS_name(ASN1_STRING, ASN1_PRINTABLE)
 
@@ -623,69 +623,69 @@ DECLARE_ASN1_FUNCTIONS(ASN1_TIME)
 
 DECLARE_ASN1_ITEM(ASN1_OCTET_STRING_NDEF)
 
-ASN1_TIME *ASN1_TIME_set(ASN1_TIME *s, time_t t);
-ASN1_TIME *ASN1_TIME_adj(ASN1_TIME *s, time_t t,
+ASN1_TIME * __cdecl ASN1_TIME_set(ASN1_TIME *s, time_t t);
+ASN1_TIME * __cdecl ASN1_TIME_adj(ASN1_TIME *s, time_t t,
                          int offset_day, long offset_sec);
-int ASN1_TIME_check(const ASN1_TIME *t);
-ASN1_GENERALIZEDTIME *ASN1_TIME_to_generalizedtime(const ASN1_TIME *t,
+int __cdecl ASN1_TIME_check(const ASN1_TIME *t);
+ASN1_GENERALIZEDTIME * __cdecl ASN1_TIME_to_generalizedtime(const ASN1_TIME *t,
                                                    ASN1_GENERALIZEDTIME **out);
-int ASN1_TIME_set_string(ASN1_TIME *s, const char *str);
-int ASN1_TIME_set_string_X509(ASN1_TIME *s, const char *str);
-int ASN1_TIME_to_tm(const ASN1_TIME *s, struct tm *tm);
-int ASN1_TIME_normalize(ASN1_TIME *s);
-int ASN1_TIME_cmp_time_t(const ASN1_TIME *s, time_t t);
-int ASN1_TIME_compare(const ASN1_TIME *a, const ASN1_TIME *b);
-
-int i2a_ASN1_INTEGER(BIO *bp, const ASN1_INTEGER *a);
-int a2i_ASN1_INTEGER(BIO *bp, ASN1_INTEGER *bs, char *buf, int size);
-int i2a_ASN1_ENUMERATED(BIO *bp, const ASN1_ENUMERATED *a);
-int a2i_ASN1_ENUMERATED(BIO *bp, ASN1_ENUMERATED *bs, char *buf, int size);
-int i2a_ASN1_OBJECT(BIO *bp, const ASN1_OBJECT *a);
-int a2i_ASN1_STRING(BIO *bp, ASN1_STRING *bs, char *buf, int size);
-int i2a_ASN1_STRING(BIO *bp, const ASN1_STRING *a, int type);
-int i2t_ASN1_OBJECT(char *buf, int buf_len, const ASN1_OBJECT *a);
-
-int a2d_ASN1_OBJECT(unsigned char *out, int olen, const char *buf, int num);
-ASN1_OBJECT *ASN1_OBJECT_create(int nid, unsigned char *data, int len,
+int __cdecl ASN1_TIME_set_string(ASN1_TIME *s, const char *str);
+int __cdecl ASN1_TIME_set_string_X509(ASN1_TIME *s, const char *str);
+int __cdecl ASN1_TIME_to_tm(const ASN1_TIME *s, struct tm *tm);
+int __cdecl ASN1_TIME_normalize(ASN1_TIME *s);
+int __cdecl ASN1_TIME_cmp_time_t(const ASN1_TIME *s, time_t t);
+int __cdecl ASN1_TIME_compare(const ASN1_TIME *a, const ASN1_TIME *b);
+
+int __cdecl i2a_ASN1_INTEGER(BIO *bp, const ASN1_INTEGER *a);
+int __cdecl a2i_ASN1_INTEGER(BIO *bp, ASN1_INTEGER *bs, char *buf, int size);
+int __cdecl i2a_ASN1_ENUMERATED(BIO *bp, const ASN1_ENUMERATED *a);
+int __cdecl a2i_ASN1_ENUMERATED(BIO *bp, ASN1_ENUMERATED *bs, char *buf, int size);
+int __cdecl i2a_ASN1_OBJECT(BIO *bp, const ASN1_OBJECT *a);
+int __cdecl a2i_ASN1_STRING(BIO *bp, ASN1_STRING *bs, char *buf, int size);
+int __cdecl i2a_ASN1_STRING(BIO *bp, const ASN1_STRING *a, int type);
+int __cdecl i2t_ASN1_OBJECT(char *buf, int buf_len, const ASN1_OBJECT *a);
+
+int __cdecl a2d_ASN1_OBJECT(unsigned char *out, int olen, const char *buf, int num);
+ASN1_OBJECT * __cdecl ASN1_OBJECT_create(int nid, unsigned char *data, int len,
                                 const char *sn, const char *ln);
 
-int ASN1_INTEGER_get_int64(int64_t *pr, const ASN1_INTEGER *a);
-int ASN1_INTEGER_set_int64(ASN1_INTEGER *a, int64_t r);
-int ASN1_INTEGER_get_uint64(uint64_t *pr, const ASN1_INTEGER *a);
-int ASN1_INTEGER_set_uint64(ASN1_INTEGER *a, uint64_t r);
+int __cdecl ASN1_INTEGER_get_int64(int64_t *pr, const ASN1_INTEGER *a);
+int __cdecl ASN1_INTEGER_set_int64(ASN1_INTEGER *a, int64_t r);
+int __cdecl ASN1_INTEGER_get_uint64(uint64_t *pr, const ASN1_INTEGER *a);
+int __cdecl ASN1_INTEGER_set_uint64(ASN1_INTEGER *a, uint64_t r);
 
-int ASN1_INTEGER_set(ASN1_INTEGER *a, long v);
-long ASN1_INTEGER_get(const ASN1_INTEGER *a);
-ASN1_INTEGER *BN_to_ASN1_INTEGER(const BIGNUM *bn, ASN1_INTEGER *ai);
-BIGNUM *ASN1_INTEGER_to_BN(const ASN1_INTEGER *ai, BIGNUM *bn);
+int __cdecl ASN1_INTEGER_set(ASN1_INTEGER *a, long v);
+long __cdecl ASN1_INTEGER_get(const ASN1_INTEGER *a);
+ASN1_INTEGER * __cdecl BN_to_ASN1_INTEGER(const BIGNUM *bn, ASN1_INTEGER *ai);
+BIGNUM * __cdecl ASN1_INTEGER_to_BN(const ASN1_INTEGER *ai, BIGNUM *bn);
 
-int ASN1_ENUMERATED_get_int64(int64_t *pr, const ASN1_ENUMERATED *a);
-int ASN1_ENUMERATED_set_int64(ASN1_ENUMERATED *a, int64_t r);
+int __cdecl ASN1_ENUMERATED_get_int64(int64_t *pr, const ASN1_ENUMERATED *a);
+int __cdecl ASN1_ENUMERATED_set_int64(ASN1_ENUMERATED *a, int64_t r);
 
 
-int ASN1_ENUMERATED_set(ASN1_ENUMERATED *a, long v);
-long ASN1_ENUMERATED_get(const ASN1_ENUMERATED *a);
-ASN1_ENUMERATED *BN_to_ASN1_ENUMERATED(const BIGNUM *bn, ASN1_ENUMERATED *ai);
-BIGNUM *ASN1_ENUMERATED_to_BN(const ASN1_ENUMERATED *ai, BIGNUM *bn);
+int __cdecl ASN1_ENUMERATED_set(ASN1_ENUMERATED *a, long v);
+long __cdecl ASN1_ENUMERATED_get(const ASN1_ENUMERATED *a);
+ASN1_ENUMERATED * __cdecl BN_to_ASN1_ENUMERATED(const BIGNUM *bn, ASN1_ENUMERATED *ai);
+BIGNUM * __cdecl ASN1_ENUMERATED_to_BN(const ASN1_ENUMERATED *ai, BIGNUM *bn);
 
 /* General */
 /* given a string, return the correct type, max is the maximum length */
-int ASN1_PRINTABLE_type(const unsigned char *s, int max);
+int __cdecl ASN1_PRINTABLE_type(const unsigned char *s, int max);
 
-unsigned long ASN1_tag2bit(int tag);
+unsigned long __cdecl ASN1_tag2bit(int tag);
 
 /* SPECIALS */
-int ASN1_get_object(const unsigned char **pp, long *plength, int *ptag,
+int __cdecl ASN1_get_object(const unsigned char **pp, long *plength, int *ptag,
                     int *pclass, long omax);
-int ASN1_check_infinite_end(unsigned char **p, long len);
-int ASN1_const_check_infinite_end(const unsigned char **p, long len);
-void ASN1_put_object(unsigned char **pp, int constructed, int length,
+int __cdecl ASN1_check_infinite_end(unsigned char **p, long len);
+int __cdecl ASN1_const_check_infinite_end(const unsigned char **p, long len);
+void __cdecl ASN1_put_object(unsigned char **pp, int constructed, int length,
                      int tag, int xclass);
-int ASN1_put_eoc(unsigned char **pp);
-int ASN1_object_size(int constructed, int length, int tag);
+int __cdecl ASN1_put_eoc(unsigned char **pp);
+int __cdecl ASN1_object_size(int constructed, int length, int tag);
 
 /* Used to implement other functions */
-void *ASN1_dup(i2d_of_void *i2d, d2i_of_void *d2i, void *x);
+void * __cdecl ASN1_dup(i2d_of_void *i2d, d2i_of_void *d2i, void *x);
 
 # define ASN1_dup_of(type,i2d,d2i,x) \
     ((type*)ASN1_dup(CHECKED_I2D_OF(type, i2d), \
@@ -697,7 +697,7 @@ void *ASN1_dup(i2d_of_void *i2d, d2i_of_void *d2i, void *x);
                      CHECKED_D2I_OF(type, d2i), \
                      CHECKED_PTR_OF(const type, x)))
 
-void *ASN1_item_dup(const ASN1_ITEM *it, void *x);
+void * __cdecl ASN1_item_dup(const ASN1_ITEM *it, void *x);
 
 /* ASN1 alloc/free macros for when a type is only used internally */
 
@@ -706,16 +706,16 @@ void *ASN1_item_dup(const ASN1_ITEM *it, void *x);
                 ASN1_item_free(CHECKED_PTR_OF(type, x), ASN1_ITEM_rptr(type))
 
 # ifndef OPENSSL_NO_STDIO
-void *ASN1_d2i_fp(void *(*xnew) (void), d2i_of_void *d2i, FILE *in, void **x);
+void * __cdecl ASN1_d2i_fp(void *(__cdecl *xnew) (void), d2i_of_void *d2i, FILE *in, void **x);
 
 #  define ASN1_d2i_fp_of(type,xnew,d2i,in,x) \
-    ((type*)ASN1_d2i_fp(CHECKED_NEW_OF(type, xnew), \
+    ((type *)ASN1_d2i_fp(CHECKED_NEW_OF(type, xnew), \
                         CHECKED_D2I_OF(type, d2i), \
                         in, \
                         CHECKED_PPTR_OF(type, x)))
 
-void *ASN1_item_d2i_fp(const ASN1_ITEM *it, FILE *in, void *x);
-int ASN1_i2d_fp(i2d_of_void *i2d, FILE *out, void *x);
+void * __cdecl ASN1_item_d2i_fp(const ASN1_ITEM *it, FILE *in, void *x);
+int __cdecl ASN1_i2d_fp(i2d_of_void *i2d, FILE *out, void *x);
 
 #  define ASN1_i2d_fp_of(type,i2d,out,x) \
     (ASN1_i2d_fp(CHECKED_I2D_OF(type, i2d), \
@@ -727,22 +727,22 @@ int ASN1_i2d_fp(i2d_of_void *i2d, FILE *out, void *x);
                  out, \
                  CHECKED_PTR_OF(const type, x)))
 
-int ASN1_item_i2d_fp(const ASN1_ITEM *it, FILE *out, void *x);
-int ASN1_STRING_print_ex_fp(FILE *fp, const ASN1_STRING *str, unsigned long flags);
+int __cdecl ASN1_item_i2d_fp(const ASN1_ITEM *it, FILE *out, void *x);
+int __cdecl ASN1_STRING_print_ex_fp(FILE *fp, const ASN1_STRING *str, unsigned long flags);
 # endif
 
-int ASN1_STRING_to_UTF8(unsigned char **out, const ASN1_STRING *in);
+int __cdecl ASN1_STRING_to_UTF8(unsigned char **out, const ASN1_STRING *in);
 
-void *ASN1_d2i_bio(void *(*xnew) (void), d2i_of_void *d2i, BIO *in, void **x);
+void * __cdecl ASN1_d2i_bio(void * (__cdecl *xnew) (void), d2i_of_void *d2i, BIO *in, void **x);
 
 #  define ASN1_d2i_bio_of(type,xnew,d2i,in,x) \
-    ((type*)ASN1_d2i_bio( CHECKED_NEW_OF(type, xnew), \
+    ((type*) ASN1_d2i_bio( CHECKED_NEW_OF(type, xnew), \
                           CHECKED_D2I_OF(type, d2i), \
                           in, \
                           CHECKED_PPTR_OF(type, x)))
 
-void *ASN1_item_d2i_bio(const ASN1_ITEM *it, BIO *in, void *x);
-int ASN1_i2d_bio(i2d_of_void *i2d, BIO *out, unsigned char *x);
+void * __cdecl ASN1_item_d2i_bio(const ASN1_ITEM *it, BIO *in, void *x);
+int __cdecl ASN1_i2d_bio(i2d_of_void *i2d, BIO *out, unsigned char *x);
 
 #  define ASN1_i2d_bio_of(type,i2d,out,x) \
     (ASN1_i2d_bio(CHECKED_I2D_OF(type, i2d), \
@@ -754,69 +754,69 @@ int ASN1_i2d_bio(i2d_of_void *i2d, BIO *out, unsigned char *x);
                   out, \
                   CHECKED_PTR_OF(const type, x)))
 
-int ASN1_item_i2d_bio(const ASN1_ITEM *it, BIO *out, void *x);
-int ASN1_UTCTIME_print(BIO *fp, const ASN1_UTCTIME *a);
-int ASN1_GENERALIZEDTIME_print(BIO *fp, const ASN1_GENERALIZEDTIME *a);
-int ASN1_TIME_print(BIO *fp, const ASN1_TIME *a);
-int ASN1_STRING_print(BIO *bp, const ASN1_STRING *v);
-int ASN1_STRING_print_ex(BIO *out, const ASN1_STRING *str, unsigned long flags);
-int ASN1_buf_print(BIO *bp, const unsigned char *buf, size_t buflen, int off);
-int ASN1_bn_print(BIO *bp, const char *number, const BIGNUM *num,
+int __cdecl ASN1_item_i2d_bio(const ASN1_ITEM *it, BIO *out, void *x);
+int __cdecl ASN1_UTCTIME_print(BIO *fp, const ASN1_UTCTIME *a);
+int __cdecl ASN1_GENERALIZEDTIME_print(BIO *fp, const ASN1_GENERALIZEDTIME *a);
+int __cdecl ASN1_TIME_print(BIO *fp, const ASN1_TIME *a);
+int __cdecl ASN1_STRING_print(BIO *bp, const ASN1_STRING *v);
+int __cdecl ASN1_STRING_print_ex(BIO *out, const ASN1_STRING *str, unsigned long flags);
+int __cdecl ASN1_buf_print(BIO *bp, const unsigned char *buf, size_t buflen, int off);
+int __cdecl ASN1_bn_print(BIO *bp, const char *number, const BIGNUM *num,
                   unsigned char *buf, int off);
-int ASN1_parse(BIO *bp, const unsigned char *pp, long len, int indent);
-int ASN1_parse_dump(BIO *bp, const unsigned char *pp, long len, int indent,
+int __cdecl ASN1_parse(BIO *bp, const unsigned char *pp, long len, int indent);
+int __cdecl ASN1_parse_dump(BIO *bp, const unsigned char *pp, long len, int indent,
                     int dump);
-const char *ASN1_tag2str(int tag);
+const char * __cdecl ASN1_tag2str(int tag);
 
 /* Used to load and write Netscape format cert */
 
-int ASN1_UNIVERSALSTRING_to_string(ASN1_UNIVERSALSTRING *s);
+int __cdecl ASN1_UNIVERSALSTRING_to_string(ASN1_UNIVERSALSTRING *s);
 
-int ASN1_TYPE_set_octetstring(ASN1_TYPE *a, unsigned char *data, int len);
-int ASN1_TYPE_get_octetstring(const ASN1_TYPE *a, unsigned char *data, int max_len);
-int ASN1_TYPE_set_int_octetstring(ASN1_TYPE *a, long num,
+int __cdecl ASN1_TYPE_set_octetstring(ASN1_TYPE *a, unsigned char *data, int len);
+int __cdecl ASN1_TYPE_get_octetstring(const ASN1_TYPE *a, unsigned char *data, int max_len);
+int __cdecl ASN1_TYPE_set_int_octetstring(ASN1_TYPE *a, long num,
                                   unsigned char *data, int len);
-int ASN1_TYPE_get_int_octetstring(const ASN1_TYPE *a, long *num,
+int __cdecl ASN1_TYPE_get_int_octetstring(const ASN1_TYPE *a, long *num,
                                   unsigned char *data, int max_len);
 
-void *ASN1_item_unpack(const ASN1_STRING *oct, const ASN1_ITEM *it);
+void * __cdecl ASN1_item_unpack(const ASN1_STRING *oct, const ASN1_ITEM *it);
 
-ASN1_STRING *ASN1_item_pack(void *obj, const ASN1_ITEM *it,
+ASN1_STRING * __cdecl ASN1_item_pack(void *obj, const ASN1_ITEM *it,
                             ASN1_OCTET_STRING **oct);
 
-void ASN1_STRING_set_default_mask(unsigned long mask);
-int ASN1_STRING_set_default_mask_asc(const char *p);
-unsigned long ASN1_STRING_get_default_mask(void);
-int ASN1_mbstring_copy(ASN1_STRING **out, const unsigned char *in, int len,
+void __cdecl ASN1_STRING_set_default_mask(unsigned long mask);
+int __cdecl ASN1_STRING_set_default_mask_asc(const char *p);
+unsigned long __cdecl ASN1_STRING_get_default_mask(void);
+int __cdecl ASN1_mbstring_copy(ASN1_STRING **out, const unsigned char *in, int len,
                        int inform, unsigned long mask);
-int ASN1_mbstring_ncopy(ASN1_STRING **out, const unsigned char *in, int len,
+int __cdecl ASN1_mbstring_ncopy(ASN1_STRING **out, const unsigned char *in, int len,
                         int inform, unsigned long mask,
                         long minsize, long maxsize);
 
-ASN1_STRING *ASN1_STRING_set_by_NID(ASN1_STRING **out,
+ASN1_STRING * __cdecl ASN1_STRING_set_by_NID(ASN1_STRING **out,
                                     const unsigned char *in, int inlen,
                                     int inform, int nid);
-ASN1_STRING_TABLE *ASN1_STRING_TABLE_get(int nid);
-int ASN1_STRING_TABLE_add(int, long, long, unsigned long, unsigned long);
-void ASN1_STRING_TABLE_cleanup(void);
+ASN1_STRING_TABLE * __cdecl ASN1_STRING_TABLE_get(int nid);
+int __cdecl ASN1_STRING_TABLE_add(int, long, long, unsigned long, unsigned long);
+void __cdecl ASN1_STRING_TABLE_cleanup(void);
 
 /* ASN1 template functions */
 
 /* Old API compatible functions */
-ASN1_VALUE *ASN1_item_new(const ASN1_ITEM *it);
-void ASN1_item_free(ASN1_VALUE *val, const ASN1_ITEM *it);
-ASN1_VALUE *ASN1_item_d2i(ASN1_VALUE **val, const unsigned char **in,
+ASN1_VALUE * __cdecl ASN1_item_new(const ASN1_ITEM *it);
+void __cdecl ASN1_item_free(ASN1_VALUE *val, const ASN1_ITEM *it);
+ASN1_VALUE * __cdecl ASN1_item_d2i(ASN1_VALUE **val, const unsigned char **in,
                           long len, const ASN1_ITEM *it);
-int ASN1_item_i2d(ASN1_VALUE *val, unsigned char **out, const ASN1_ITEM *it);
-int ASN1_item_ndef_i2d(ASN1_VALUE *val, unsigned char **out,
+int __cdecl ASN1_item_i2d(ASN1_VALUE *val, unsigned char **out, const ASN1_ITEM *it);
+int __cdecl ASN1_item_ndef_i2d(ASN1_VALUE *val, unsigned char **out,
                        const ASN1_ITEM *it);
 
-void ASN1_add_oid_module(void);
-void ASN1_add_stable_module(void);
+void __cdecl ASN1_add_oid_module(void);
+void __cdecl ASN1_add_stable_module(void);
 
-ASN1_TYPE *ASN1_generate_nconf(const char *str, CONF *nconf);
-ASN1_TYPE *ASN1_generate_v3(const char *str, X509V3_CTX *cnf);
-int ASN1_str2mask(const char *str, unsigned long *pmask);
+ASN1_TYPE * __cdecl ASN1_generate_nconf(const char *str, CONF *nconf);
+ASN1_TYPE * __cdecl ASN1_generate_v3(const char *str, X509V3_CTX *cnf);
+int __cdecl ASN1_str2mask(const char *str, unsigned long *pmask);
 
 /* ASN1 Print flags */
 
@@ -839,46 +839,46 @@ int ASN1_str2mask(const char *str, unsigned long *pmask);
 /* Don't show structure name even at top level */
 # define ASN1_PCTX_FLAGS_NO_STRUCT_NAME          0x100
 
-int ASN1_item_print(BIO *out, ASN1_VALUE *ifld, int indent,
+int __cdecl ASN1_item_print(BIO *out, ASN1_VALUE *ifld, int indent,
                     const ASN1_ITEM *it, const ASN1_PCTX *pctx);
-ASN1_PCTX *ASN1_PCTX_new(void);
-void ASN1_PCTX_free(ASN1_PCTX *p);
-unsigned long ASN1_PCTX_get_flags(const ASN1_PCTX *p);
-void ASN1_PCTX_set_flags(ASN1_PCTX *p, unsigned long flags);
-unsigned long ASN1_PCTX_get_nm_flags(const ASN1_PCTX *p);
-void ASN1_PCTX_set_nm_flags(ASN1_PCTX *p, unsigned long flags);
-unsigned long ASN1_PCTX_get_cert_flags(const ASN1_PCTX *p);
-void ASN1_PCTX_set_cert_flags(ASN1_PCTX *p, unsigned long flags);
-unsigned long ASN1_PCTX_get_oid_flags(const ASN1_PCTX *p);
-void ASN1_PCTX_set_oid_flags(ASN1_PCTX *p, unsigned long flags);
-unsigned long ASN1_PCTX_get_str_flags(const ASN1_PCTX *p);
-void ASN1_PCTX_set_str_flags(ASN1_PCTX *p, unsigned long flags);
-
-ASN1_SCTX *ASN1_SCTX_new(int (*scan_cb) (ASN1_SCTX *ctx));
-void ASN1_SCTX_free(ASN1_SCTX *p);
-const ASN1_ITEM *ASN1_SCTX_get_item(ASN1_SCTX *p);
-const ASN1_TEMPLATE *ASN1_SCTX_get_template(ASN1_SCTX *p);
-unsigned long ASN1_SCTX_get_flags(ASN1_SCTX *p);
-void ASN1_SCTX_set_app_data(ASN1_SCTX *p, void *data);
-void *ASN1_SCTX_get_app_data(ASN1_SCTX *p);
-
-const BIO_METHOD *BIO_f_asn1(void);
-
-BIO *BIO_new_NDEF(BIO *out, ASN1_VALUE *val, const ASN1_ITEM *it);
-
-int i2d_ASN1_bio_stream(BIO *out, ASN1_VALUE *val, BIO *in, int flags,
+ASN1_PCTX * __cdecl ASN1_PCTX_new(void);
+void __cdecl ASN1_PCTX_free(ASN1_PCTX *p);
+unsigned long __cdecl ASN1_PCTX_get_flags(const ASN1_PCTX *p);
+void __cdecl ASN1_PCTX_set_flags(ASN1_PCTX *p, unsigned long flags);
+unsigned long __cdecl ASN1_PCTX_get_nm_flags(const ASN1_PCTX *p);
+void __cdecl ASN1_PCTX_set_nm_flags(ASN1_PCTX *p, unsigned long flags);
+unsigned long __cdecl ASN1_PCTX_get_cert_flags(const ASN1_PCTX *p);
+void __cdecl ASN1_PCTX_set_cert_flags(ASN1_PCTX *p, unsigned long flags);
+unsigned long __cdecl ASN1_PCTX_get_oid_flags(const ASN1_PCTX *p);
+void __cdecl ASN1_PCTX_set_oid_flags(ASN1_PCTX *p, unsigned long flags);
+unsigned long __cdecl ASN1_PCTX_get_str_flags(const ASN1_PCTX *p);
+void __cdecl ASN1_PCTX_set_str_flags(ASN1_PCTX *p, unsigned long flags);
+
+ASN1_SCTX * __cdecl ASN1_SCTX_new(int (*scan_cb) (ASN1_SCTX *ctx));
+void __cdecl ASN1_SCTX_free(ASN1_SCTX *p);
+const ASN1_ITEM * __cdecl ASN1_SCTX_get_item(ASN1_SCTX *p);
+const ASN1_TEMPLATE * __cdecl ASN1_SCTX_get_template(ASN1_SCTX *p);
+unsigned long __cdecl ASN1_SCTX_get_flags(ASN1_SCTX *p);
+void __cdecl ASN1_SCTX_set_app_data(ASN1_SCTX *p, void *data);
+void * __cdecl ASN1_SCTX_get_app_data(ASN1_SCTX *p);
+
+const BIO_METHOD * __cdecl BIO_f_asn1(void);
+
+BIO * __cdecl BIO_new_NDEF(BIO *out, ASN1_VALUE *val, const ASN1_ITEM *it);
+
+int __cdecl i2d_ASN1_bio_stream(BIO *out, ASN1_VALUE *val, BIO *in, int flags,
                         const ASN1_ITEM *it);
-int PEM_write_bio_ASN1_stream(BIO *out, ASN1_VALUE *val, BIO *in, int flags,
+int __cdecl PEM_write_bio_ASN1_stream(BIO *out, ASN1_VALUE *val, BIO *in, int flags,
                               const char *hdr, const ASN1_ITEM *it);
-int SMIME_write_ASN1(BIO *bio, ASN1_VALUE *val, BIO *data, int flags,
+int __cdecl SMIME_write_ASN1(BIO *bio, ASN1_VALUE *val, BIO *data, int flags,
                      int ctype_nid, int econt_nid,
                      STACK_OF(X509_ALGOR) *mdalgs, const ASN1_ITEM *it);
-ASN1_VALUE *SMIME_read_ASN1(BIO *bio, BIO **bcont, const ASN1_ITEM *it);
-int SMIME_crlf_copy(BIO *in, BIO *out, int flags);
-int SMIME_text(BIO *in, BIO *out);
+ASN1_VALUE * __cdecl SMIME_read_ASN1(BIO *bio, BIO **bcont, const ASN1_ITEM *it);
+int __cdecl SMIME_crlf_copy(BIO *in, BIO *out, int flags);
+int __cdecl SMIME_text(BIO *in, BIO *out);
 
-const ASN1_ITEM *ASN1_ITEM_lookup(const char *name);
-const ASN1_ITEM *ASN1_ITEM_get(size_t i);
+const ASN1_ITEM * __cdecl ASN1_ITEM_lookup(const char *name);
+const ASN1_ITEM * __cdecl ASN1_ITEM_get(size_t i);
 
 # ifdef  __cplusplus
 }
diff --git a/include/openssl/asn1err.h b/include/openssl/asn1err.h
index faed5a5518..10d838047e 100644
--- a/include/openssl/asn1err.h
+++ b/include/openssl/asn1err.h
@@ -18,7 +18,7 @@
 # ifdef  __cplusplus
 extern "C"
 # endif
-int ERR_load_ASN1_strings(void);
+int __cdecl ERR_load_ASN1_strings(void);
 
 /*
  * ASN1 function codes.
diff --git a/include/openssl/asn1t.h b/include/openssl/asn1t.h
index a450ba0d9d..4c086992ef 100644
--- a/include/openssl/asn1t.h
+++ b/include/openssl/asn1t.h
@@ -818,11 +818,11 @@ typedef struct ASN1_STREAM_ARG_st {
         }
 
 # define IMPLEMENT_ASN1_ALLOC_FUNCTIONS_fname(stname, itname, fname) \
-        stname *fname##_new(void) \
+        stname * __cdecl fname##_new(void) \
         { \
                 return (stname *)ASN1_item_new(ASN1_ITEM_rptr(itname)); \
         } \
-        void fname##_free(stname *a) \
+        void __cdecl fname##_free(stname *a) \
         { \
                 ASN1_item_free((ASN1_VALUE *)a, ASN1_ITEM_rptr(itname)); \
         }
@@ -832,17 +832,17 @@ typedef struct ASN1_STREAM_ARG_st {
         IMPLEMENT_ASN1_ALLOC_FUNCTIONS_fname(stname, itname, fname)
 
 # define IMPLEMENT_ASN1_ENCODE_FUNCTIONS_fname(stname, itname, fname) \
-        stname *d2i_##fname(stname **a, const unsigned char **in, long len) \
+        stname * __cdecl d2i_##fname(stname **a, const unsigned char **in, long len) \
         { \
                 return (stname *)ASN1_item_d2i((ASN1_VALUE **)a, in, len, ASN1_ITEM_rptr(itname));\
         } \
-        int i2d_##fname(stname *a, unsigned char **out) \
+        int __cdecl i2d_##fname(stname *a, unsigned char **out) \
         { \
                 return ASN1_item_i2d((ASN1_VALUE *)a, out, ASN1_ITEM_rptr(itname));\
         }
 
 # define IMPLEMENT_ASN1_NDEF_FUNCTION(stname) \
-        int i2d_##stname##_NDEF(stname *a, unsigned char **out) \
+        int __cdecl i2d_##stname##_NDEF(stname *a, unsigned char **out) \
         { \
                 return ASN1_item_ndef_i2d((ASN1_VALUE *)a, out, ASN1_ITEM_rptr(stname));\
         }
@@ -865,17 +865,17 @@ typedef struct ASN1_STREAM_ARG_st {
  * constification is done.
  */
 # define IMPLEMENT_ASN1_ENCODE_FUNCTIONS_const_fname(stname, itname, fname) \
-        stname *d2i_##fname(stname **a, const unsigned char **in, long len) \
+        stname * __cdecl d2i_##fname(stname **a, const unsigned char **in, long len) \
         { \
                 return (stname *)ASN1_item_d2i((ASN1_VALUE **)a, in, len, ASN1_ITEM_rptr(itname));\
         } \
-        int i2d_##fname(const stname *a, unsigned char **out) \
+        int __cdecl i2d_##fname(const stname *a, unsigned char **out) \
         { \
                 return ASN1_item_i2d((ASN1_VALUE *)a, out, ASN1_ITEM_rptr(itname));\
         }
 
 # define IMPLEMENT_ASN1_DUP_FUNCTION(stname) \
-        stname * stname##_dup(stname *x) \
+        stname * __cdecl stname##_dup(stname *x) \
         { \
         return ASN1_item_dup(ASN1_ITEM_rptr(stname), x); \
         }
@@ -929,14 +929,14 @@ DEFINE_STACK_OF(ASN1_VALUE)
 
 /* Functions used internally by the ASN1 code */
 
-int ASN1_item_ex_new(ASN1_VALUE **pval, const ASN1_ITEM *it);
-void ASN1_item_ex_free(ASN1_VALUE **pval, const ASN1_ITEM *it);
+int __cdecl ASN1_item_ex_new(ASN1_VALUE **pval, const ASN1_ITEM *it);
+void __cdecl ASN1_item_ex_free(ASN1_VALUE **pval, const ASN1_ITEM *it);
 
-int ASN1_item_ex_d2i(ASN1_VALUE **pval, const unsigned char **in, long len,
+int __cdecl ASN1_item_ex_d2i(ASN1_VALUE **pval, const unsigned char **in, long len,
                      const ASN1_ITEM *it, int tag, int aclass, char opt,
                      ASN1_TLC *ctx);
 
-int ASN1_item_ex_i2d(ASN1_VALUE **pval, unsigned char **out,
+int __cdecl ASN1_item_ex_i2d(ASN1_VALUE **pval, unsigned char **out,
                      const ASN1_ITEM *it, int tag, int aclass);
 
 #ifdef  __cplusplus
diff --git a/include/openssl/async.h b/include/openssl/async.h
index 7052b89052..51901c0738 100644
--- a/include/openssl/async.h
+++ b/include/openssl/async.h
@@ -37,37 +37,37 @@ typedef struct async_wait_ctx_st ASYNC_WAIT_CTX;
 #define ASYNC_PAUSE    2
 #define ASYNC_FINISH   3
 
-int ASYNC_init_thread(size_t max_size, size_t init_size);
-void ASYNC_cleanup_thread(void);
+int __cdecl ASYNC_init_thread(size_t max_size, size_t init_size);
+void __cdecl ASYNC_cleanup_thread(void);
 
 #ifdef OSSL_ASYNC_FD
-ASYNC_WAIT_CTX *ASYNC_WAIT_CTX_new(void);
-void ASYNC_WAIT_CTX_free(ASYNC_WAIT_CTX *ctx);
-int ASYNC_WAIT_CTX_set_wait_fd(ASYNC_WAIT_CTX *ctx, const void *key,
+ASYNC_WAIT_CTX * __cdecl ASYNC_WAIT_CTX_new(void);
+void __cdecl ASYNC_WAIT_CTX_free(ASYNC_WAIT_CTX *ctx);
+int __cdecl ASYNC_WAIT_CTX_set_wait_fd(ASYNC_WAIT_CTX *ctx, const void *key,
                                OSSL_ASYNC_FD fd,
                                void *custom_data,
-                               void (*cleanup)(ASYNC_WAIT_CTX *, const void *,
+                               void (__cdecl *cleanup)(ASYNC_WAIT_CTX *, const void *,
                                                OSSL_ASYNC_FD, void *));
-int ASYNC_WAIT_CTX_get_fd(ASYNC_WAIT_CTX *ctx, const void *key,
+int __cdecl ASYNC_WAIT_CTX_get_fd(ASYNC_WAIT_CTX *ctx, const void *key,
                         OSSL_ASYNC_FD *fd, void **custom_data);
-int ASYNC_WAIT_CTX_get_all_fds(ASYNC_WAIT_CTX *ctx, OSSL_ASYNC_FD *fd,
+int __cdecl ASYNC_WAIT_CTX_get_all_fds(ASYNC_WAIT_CTX *ctx, OSSL_ASYNC_FD *fd,
                                size_t *numfds);
-int ASYNC_WAIT_CTX_get_changed_fds(ASYNC_WAIT_CTX *ctx, OSSL_ASYNC_FD *addfd,
+int __cdecl ASYNC_WAIT_CTX_get_changed_fds(ASYNC_WAIT_CTX *ctx, OSSL_ASYNC_FD *addfd,
                                    size_t *numaddfds, OSSL_ASYNC_FD *delfd,
                                    size_t *numdelfds);
-int ASYNC_WAIT_CTX_clear_fd(ASYNC_WAIT_CTX *ctx, const void *key);
+int __cdecl ASYNC_WAIT_CTX_clear_fd(ASYNC_WAIT_CTX *ctx, const void *key);
 #endif
 
-int ASYNC_is_capable(void);
+int __cdecl ASYNC_is_capable(void);
 
-int ASYNC_start_job(ASYNC_JOB **job, ASYNC_WAIT_CTX *ctx, int *ret,
-                    int (*func)(void *), void *args, size_t size);
-int ASYNC_pause_job(void);
+int __cdecl ASYNC_start_job(ASYNC_JOB **job, ASYNC_WAIT_CTX *ctx, int *ret,
+                    int (__cdecl *func)(void *), void *args, size_t size);
+int __cdecl ASYNC_pause_job(void);
 
-ASYNC_JOB *ASYNC_get_current_job(void);
-ASYNC_WAIT_CTX *ASYNC_get_wait_ctx(ASYNC_JOB *job);
-void ASYNC_block_pause(void);
-void ASYNC_unblock_pause(void);
+ASYNC_JOB * __cdecl ASYNC_get_current_job(void);
+ASYNC_WAIT_CTX * __cdecl ASYNC_get_wait_ctx(ASYNC_JOB *job);
+void __cdecl ASYNC_block_pause(void);
+void __cdecl ASYNC_unblock_pause(void);
 
 
 # ifdef  __cplusplus
diff --git a/include/openssl/asyncerr.h b/include/openssl/asyncerr.h
index 91afbbb2f5..d404cafb75 100644
--- a/include/openssl/asyncerr.h
+++ b/include/openssl/asyncerr.h
@@ -18,7 +18,7 @@
 # ifdef  __cplusplus
 extern "C"
 # endif
-int ERR_load_ASYNC_strings(void);
+int __cdecl ERR_load_ASYNC_strings(void);
 
 /*
  * ASYNC function codes.
diff --git a/include/openssl/bio.h b/include/openssl/bio.h
index e1fddfb796..5e17758105 100644
--- a/include/openssl/bio.h
+++ b/include/openssl/bio.h
@@ -173,10 +173,10 @@ extern "C" {
 typedef union bio_addr_st BIO_ADDR;
 typedef struct bio_addrinfo_st BIO_ADDRINFO;
 
-int BIO_get_new_index(void);
-void BIO_set_flags(BIO *b, int flags);
-int BIO_test_flags(const BIO *b, int flags);
-void BIO_clear_flags(BIO *b, int flags);
+int __cdecl BIO_get_new_index(void);
+void __cdecl BIO_set_flags(BIO *b, int flags);
+int __cdecl BIO_test_flags(const BIO *b, int flags);
+void __cdecl BIO_clear_flags(BIO *b, int flags);
 
 # define BIO_get_flags(b) BIO_test_flags(b, ~(0x0))
 # define BIO_set_retry_special(b) \
@@ -232,32 +232,32 @@ void BIO_clear_flags(BIO *b, int flags);
 # define BIO_cb_pre(a)   (!((a)&BIO_CB_RETURN))
 # define BIO_cb_post(a)  ((a)&BIO_CB_RETURN)
 
-typedef long (*BIO_callback_fn)(BIO *b, int oper, const char *argp, int argi,
+typedef long (__cdecl *BIO_callback_fn)(BIO *b, int oper, const char *argp, int argi,
                                 long argl, long ret);
-typedef long (*BIO_callback_fn_ex)(BIO *b, int oper, const char *argp,
+typedef long (__cdecl *BIO_callback_fn_ex)(BIO *b, int oper, const char *argp,
                                    size_t len, int argi,
                                    long argl, int ret, size_t *processed);
 BIO_callback_fn BIO_get_callback(const BIO *b);
-void BIO_set_callback(BIO *b, BIO_callback_fn callback);
+void __cdecl BIO_set_callback(BIO *b, BIO_callback_fn callback);
 
 BIO_callback_fn_ex BIO_get_callback_ex(const BIO *b);
-void BIO_set_callback_ex(BIO *b, BIO_callback_fn_ex callback);
+void __cdecl BIO_set_callback_ex(BIO *b, BIO_callback_fn_ex callback);
 
-char *BIO_get_callback_arg(const BIO *b);
-void BIO_set_callback_arg(BIO *b, char *arg);
+char * __cdecl BIO_get_callback_arg(const BIO *b);
+void __cdecl BIO_set_callback_arg(BIO *b, char *arg);
 
 typedef struct bio_method_st BIO_METHOD;
 
-const char *BIO_method_name(const BIO *b);
-int BIO_method_type(const BIO *b);
+const char * __cdecl BIO_method_name(const BIO *b);
+int __cdecl BIO_method_type(const BIO *b);
 
-typedef int BIO_info_cb(BIO *, int, int);
+typedef int __cdecl BIO_info_cb(BIO *, int, int);
 typedef BIO_info_cb bio_info_cb;  /* backward compatibility */
 
 DEFINE_STACK_OF(BIO)
 
 /* Prefix and suffix callback in ASN1 BIO */
-typedef int asn1_ps_func (BIO *b, unsigned char **pbuf, int *plen,
+typedef int __cdecl asn1_ps_func (BIO *b, unsigned char **pbuf, int *plen,
                           void *parg);
 
 # ifndef OPENSSL_NO_SCTP
@@ -483,8 +483,8 @@ int BIO_read_filename(BIO *b, const char *name);
 # define BIO_pending(b)          (int)BIO_ctrl(b,BIO_CTRL_PENDING,0,NULL)
 # define BIO_wpending(b)         (int)BIO_ctrl(b,BIO_CTRL_WPENDING,0,NULL)
 /* ...pending macros have inappropriate return type */
-size_t BIO_ctrl_pending(BIO *b);
-size_t BIO_ctrl_wpending(BIO *b);
+size_t __cdecl BIO_ctrl_pending(BIO *b);
+size_t __cdecl BIO_ctrl_wpending(BIO *b);
 # define BIO_flush(b)            (int)BIO_ctrl(b,BIO_CTRL_FLUSH,0,NULL)
 # define BIO_get_info_callback(b,cbp) (int)BIO_ctrl(b,BIO_CTRL_GET_CALLBACK,0, \
                                                    cbp)
@@ -503,9 +503,9 @@ size_t BIO_ctrl_wpending(BIO *b);
 /* macros with inappropriate type -- but ...pending macros use int too: */
 # define BIO_get_write_guarantee(b) (int)BIO_ctrl(b,BIO_C_GET_WRITE_GUARANTEE,0,NULL)
 # define BIO_get_read_request(b)    (int)BIO_ctrl(b,BIO_C_GET_READ_REQUEST,0,NULL)
-size_t BIO_ctrl_get_write_guarantee(BIO *b);
-size_t BIO_ctrl_get_read_request(BIO *b);
-int BIO_ctrl_reset_read_request(BIO *b);
+size_t __cdecl BIO_ctrl_get_write_guarantee(BIO *b);
+size_t __cdecl BIO_ctrl_get_read_request(BIO *b);
+int __cdecl BIO_ctrl_reset_read_request(BIO *b);
 
 /* ctrl macros for dgram */
 # define BIO_ctrl_dgram_connect(b,peer)  \
@@ -525,162 +525,162 @@ int BIO_ctrl_reset_read_request(BIO *b);
 
 #define BIO_get_ex_new_index(l, p, newf, dupf, freef) \
     CRYPTO_get_ex_new_index(CRYPTO_EX_INDEX_BIO, l, p, newf, dupf, freef)
-int BIO_set_ex_data(BIO *bio, int idx, void *data);
-void *BIO_get_ex_data(BIO *bio, int idx);
-uint64_t BIO_number_read(BIO *bio);
-uint64_t BIO_number_written(BIO *bio);
+int __cdecl BIO_set_ex_data(BIO *bio, int idx, void *data);
+void * __cdecl BIO_get_ex_data(BIO *bio, int idx);
+uint64_t __cdecl BIO_number_read(BIO *bio);
+uint64_t __cdecl BIO_number_written(BIO *bio);
 
 /* For BIO_f_asn1() */
-int BIO_asn1_set_prefix(BIO *b, asn1_ps_func *prefix,
+int __cdecl BIO_asn1_set_prefix(BIO *b, asn1_ps_func *prefix,
                         asn1_ps_func *prefix_free);
-int BIO_asn1_get_prefix(BIO *b, asn1_ps_func **pprefix,
+int __cdecl BIO_asn1_get_prefix(BIO *b, asn1_ps_func **pprefix,
                         asn1_ps_func **pprefix_free);
-int BIO_asn1_set_suffix(BIO *b, asn1_ps_func *suffix,
+int __cdecl BIO_asn1_set_suffix(BIO *b, asn1_ps_func *suffix,
                         asn1_ps_func *suffix_free);
-int BIO_asn1_get_suffix(BIO *b, asn1_ps_func **psuffix,
+int __cdecl BIO_asn1_get_suffix(BIO *b, asn1_ps_func **psuffix,
                         asn1_ps_func **psuffix_free);
 
-const BIO_METHOD *BIO_s_file(void);
-BIO *BIO_new_file(const char *filename, const char *mode);
+const BIO_METHOD * __cdecl BIO_s_file(void);
+BIO * __cdecl BIO_new_file(const char *filename, const char *mode);
 # ifndef OPENSSL_NO_STDIO
-BIO *BIO_new_fp(FILE *stream, int close_flag);
+BIO * __cdecl BIO_new_fp(FILE *stream, int close_flag);
 # endif
-BIO *BIO_new(const BIO_METHOD *type);
-int BIO_free(BIO *a);
-void BIO_set_data(BIO *a, void *ptr);
-void *BIO_get_data(BIO *a);
-void BIO_set_init(BIO *a, int init);
-int BIO_get_init(BIO *a);
-void BIO_set_shutdown(BIO *a, int shut);
-int BIO_get_shutdown(BIO *a);
-void BIO_vfree(BIO *a);
-int BIO_up_ref(BIO *a);
-int BIO_read(BIO *b, void *data, int dlen);
-int BIO_read_ex(BIO *b, void *data, size_t dlen, size_t *readbytes);
-int BIO_gets(BIO *bp, char *buf, int size);
-int BIO_write(BIO *b, const void *data, int dlen);
-int BIO_write_ex(BIO *b, const void *data, size_t dlen, size_t *written);
-int BIO_puts(BIO *bp, const char *buf);
-int BIO_indent(BIO *b, int indent, int max);
-long BIO_ctrl(BIO *bp, int cmd, long larg, void *parg);
-long BIO_callback_ctrl(BIO *b, int cmd, BIO_info_cb *fp);
-void *BIO_ptr_ctrl(BIO *bp, int cmd, long larg);
-long BIO_int_ctrl(BIO *bp, int cmd, long larg, int iarg);
-BIO *BIO_push(BIO *b, BIO *append);
-BIO *BIO_pop(BIO *b);
-void BIO_free_all(BIO *a);
-BIO *BIO_find_type(BIO *b, int bio_type);
-BIO *BIO_next(BIO *b);
-void BIO_set_next(BIO *b, BIO *next);
-BIO *BIO_get_retry_BIO(BIO *bio, int *reason);
-int BIO_get_retry_reason(BIO *bio);
-void BIO_set_retry_reason(BIO *bio, int reason);
-BIO *BIO_dup_chain(BIO *in);
-
-int BIO_nread0(BIO *bio, char **buf);
-int BIO_nread(BIO *bio, char **buf, int num);
-int BIO_nwrite0(BIO *bio, char **buf);
-int BIO_nwrite(BIO *bio, char **buf, int num);
-
-long BIO_debug_callback(BIO *bio, int cmd, const char *argp, int argi,
+BIO * __cdecl BIO_new(const BIO_METHOD *type);
+int __cdecl BIO_free(BIO *a);
+void __cdecl BIO_set_data(BIO *a, void *ptr);
+void * __cdecl BIO_get_data(BIO *a);
+void __cdecl BIO_set_init(BIO *a, int init);
+int __cdecl BIO_get_init(BIO *a);
+void __cdecl BIO_set_shutdown(BIO *a, int shut);
+int __cdecl BIO_get_shutdown(BIO *a);
+void __cdecl BIO_vfree(BIO *a);
+int __cdecl BIO_up_ref(BIO *a);
+int __cdecl BIO_read(BIO *b, void *data, int dlen);
+int __cdecl BIO_read_ex(BIO *b, void *data, size_t dlen, size_t *readbytes);
+int __cdecl BIO_gets(BIO *bp, char *buf, int size);
+int __cdecl BIO_write(BIO *b, const void *data, int dlen);
+int __cdecl BIO_write_ex(BIO *b, const void *data, size_t dlen, size_t *written);
+int __cdecl BIO_puts(BIO *bp, const char *buf);
+int __cdecl BIO_indent(BIO *b, int indent, int max);
+long __cdecl BIO_ctrl(BIO *bp, int cmd, long larg, void *parg);
+long __cdecl BIO_callback_ctrl(BIO *b, int cmd, BIO_info_cb *fp);
+void * __cdecl BIO_ptr_ctrl(BIO *bp, int cmd, long larg);
+long __cdecl BIO_int_ctrl(BIO *bp, int cmd, long larg, int iarg);
+BIO * __cdecl BIO_push(BIO *b, BIO *append);
+BIO * __cdecl BIO_pop(BIO *b);
+void __cdecl BIO_free_all(BIO *a);
+BIO *__cdecl BIO_find_type(BIO *b, int bio_type);
+BIO * __cdecl BIO_next(BIO *b);
+void __cdecl BIO_set_next(BIO *b, BIO *next);
+BIO * __cdecl BIO_get_retry_BIO(BIO *bio, int *reason);
+int __cdecl BIO_get_retry_reason(BIO *bio);
+void __cdecl BIO_set_retry_reason(BIO *bio, int reason);
+BIO * __cdecl BIO_dup_chain(BIO *in);
+
+int __cdecl BIO_nread0(BIO *bio, char **buf);
+int __cdecl BIO_nread(BIO *bio, char **buf, int num);
+int __cdecl BIO_nwrite0(BIO *bio, char **buf);
+int __cdecl BIO_nwrite(BIO *bio, char **buf, int num);
+
+long __cdecl BIO_debug_callback(BIO *bio, int cmd, const char *argp, int argi,
                         long argl, long ret);
 
-const BIO_METHOD *BIO_s_mem(void);
-const BIO_METHOD *BIO_s_secmem(void);
-BIO *BIO_new_mem_buf(const void *buf, int len);
+const BIO_METHOD * __cdecl BIO_s_mem(void);
+const BIO_METHOD * __cdecl BIO_s_secmem(void);
+BIO * __cdecl BIO_new_mem_buf(const void *buf, int len);
 # ifndef OPENSSL_NO_SOCK
-const BIO_METHOD *BIO_s_socket(void);
-const BIO_METHOD *BIO_s_connect(void);
-const BIO_METHOD *BIO_s_accept(void);
+const BIO_METHOD * __cdecl BIO_s_socket(void);
+const BIO_METHOD * __cdecl BIO_s_connect(void);
+const BIO_METHOD * __cdecl BIO_s_accept(void);
 # endif
-const BIO_METHOD *BIO_s_fd(void);
-const BIO_METHOD *BIO_s_log(void);
-const BIO_METHOD *BIO_s_bio(void);
-const BIO_METHOD *BIO_s_null(void);
-const BIO_METHOD *BIO_f_null(void);
-const BIO_METHOD *BIO_f_buffer(void);
-const BIO_METHOD *BIO_f_linebuffer(void);
-const BIO_METHOD *BIO_f_nbio_test(void);
+const BIO_METHOD * __cdecl BIO_s_fd(void);
+const BIO_METHOD * __cdecl BIO_s_log(void);
+const BIO_METHOD * __cdecl BIO_s_bio(void);
+const BIO_METHOD * __cdecl BIO_s_null(void);
+const BIO_METHOD * __cdecl BIO_f_null(void);
+const BIO_METHOD * __cdecl BIO_f_buffer(void);
+const BIO_METHOD * __cdecl BIO_f_linebuffer(void);
+const BIO_METHOD * __cdecl BIO_f_nbio_test(void);
 # ifndef OPENSSL_NO_DGRAM
-const BIO_METHOD *BIO_s_datagram(void);
-int BIO_dgram_non_fatal_error(int error);
-BIO *BIO_new_dgram(int fd, int close_flag);
+const BIO_METHOD * __cdecl BIO_s_datagram(void);
+int __cdecl BIO_dgram_non_fatal_error(int error);
+BIO * __cdecl BIO_new_dgram(int fd, int close_flag);
 #  ifndef OPENSSL_NO_SCTP
-const BIO_METHOD *BIO_s_datagram_sctp(void);
-BIO *BIO_new_dgram_sctp(int fd, int close_flag);
-int BIO_dgram_is_sctp(BIO *bio);
-int BIO_dgram_sctp_notification_cb(BIO *b,
+const BIO_METHOD * __cdecl BIO_s_datagram_sctp(void);
+BIO * __cdecl BIO_new_dgram_sctp(int fd, int close_flag);
+int __cdecl BIO_dgram_is_sctp(BIO *bio);
+int __cdecl BIO_dgram_sctp_notification_cb(BIO *b,
                                    void (*handle_notifications) (BIO *bio,
                                                                  void *context,
                                                                  void *buf),
                                    void *context);
-int BIO_dgram_sctp_wait_for_dry(BIO *b);
-int BIO_dgram_sctp_msg_waiting(BIO *b);
+int __cdecl BIO_dgram_sctp_wait_for_dry(BIO *b);
+int __cdecl BIO_dgram_sctp_msg_waiting(BIO *b);
 #  endif
 # endif
 
 # ifndef OPENSSL_NO_SOCK
-int BIO_sock_should_retry(int i);
-int BIO_sock_non_fatal_error(int error);
+int __cdecl BIO_sock_should_retry(int i);
+int __cdecl BIO_sock_non_fatal_error(int error);
 # endif
 
-int BIO_fd_should_retry(int i);
-int BIO_fd_non_fatal_error(int error);
-int BIO_dump_cb(int (*cb) (const void *data, size_t len, void *u),
+int __cdecl BIO_fd_should_retry(int i);
+int __cdecl BIO_fd_non_fatal_error(int error);
+int __cdecl BIO_dump_cb(int (*cb) (const void *data, size_t len, void *u),
                 void *u, const char *s, int len);
-int BIO_dump_indent_cb(int (*cb) (const void *data, size_t len, void *u),
+int __cdecl BIO_dump_indent_cb(int (*cb) (const void *data, size_t len, void *u),
                        void *u, const char *s, int len, int indent);
-int BIO_dump(BIO *b, const char *bytes, int len);
-int BIO_dump_indent(BIO *b, const char *bytes, int len, int indent);
+int __cdecl BIO_dump(BIO *b, const char *bytes, int len);
+int __cdecl BIO_dump_indent(BIO *b, const char *bytes, int len, int indent);
 # ifndef OPENSSL_NO_STDIO
-int BIO_dump_fp(FILE *fp, const char *s, int len);
-int BIO_dump_indent_fp(FILE *fp, const char *s, int len, int indent);
+int __cdecl BIO_dump_fp(FILE *fp, const char *s, int len);
+int __cdecl BIO_dump_indent_fp(FILE *fp, const char *s, int len, int indent);
 # endif
-int BIO_hex_string(BIO *out, int indent, int width, unsigned char *data,
+int __cdecl BIO_hex_string(BIO *out, int indent, int width, unsigned char *data,
                    int datalen);
 
 # ifndef OPENSSL_NO_SOCK
-BIO_ADDR *BIO_ADDR_new(void);
-int BIO_ADDR_rawmake(BIO_ADDR *ap, int family,
+BIO_ADDR * __cdecl BIO_ADDR_new(void);
+int __cdecl BIO_ADDR_rawmake(BIO_ADDR *ap, int family,
                      const void *where, size_t wherelen, unsigned short port);
-void BIO_ADDR_free(BIO_ADDR *);
-void BIO_ADDR_clear(BIO_ADDR *ap);
-int BIO_ADDR_family(const BIO_ADDR *ap);
-int BIO_ADDR_rawaddress(const BIO_ADDR *ap, void *p, size_t *l);
-unsigned short BIO_ADDR_rawport(const BIO_ADDR *ap);
-char *BIO_ADDR_hostname_string(const BIO_ADDR *ap, int numeric);
-char *BIO_ADDR_service_string(const BIO_ADDR *ap, int numeric);
-char *BIO_ADDR_path_string(const BIO_ADDR *ap);
-
-const BIO_ADDRINFO *BIO_ADDRINFO_next(const BIO_ADDRINFO *bai);
-int BIO_ADDRINFO_family(const BIO_ADDRINFO *bai);
-int BIO_ADDRINFO_socktype(const BIO_ADDRINFO *bai);
-int BIO_ADDRINFO_protocol(const BIO_ADDRINFO *bai);
-const BIO_ADDR *BIO_ADDRINFO_address(const BIO_ADDRINFO *bai);
-void BIO_ADDRINFO_free(BIO_ADDRINFO *bai);
+void __cdecl BIO_ADDR_free(BIO_ADDR *);
+void __cdecl BIO_ADDR_clear(BIO_ADDR *ap);
+int __cdecl BIO_ADDR_family(const BIO_ADDR *ap);
+int __cdecl BIO_ADDR_rawaddress(const BIO_ADDR *ap, void *p, size_t *l);
+unsigned short __cdecl BIO_ADDR_rawport(const BIO_ADDR *ap);
+char * __cdecl BIO_ADDR_hostname_string(const BIO_ADDR *ap, int numeric);
+char * __cdecl BIO_ADDR_service_string(const BIO_ADDR *ap, int numeric);
+char * __cdecl BIO_ADDR_path_string(const BIO_ADDR *ap);
+
+const BIO_ADDRINFO * __cdecl BIO_ADDRINFO_next(const BIO_ADDRINFO *bai);
+int __cdecl BIO_ADDRINFO_family(const BIO_ADDRINFO *bai);
+int __cdecl BIO_ADDRINFO_socktype(const BIO_ADDRINFO *bai);
+int __cdecl BIO_ADDRINFO_protocol(const BIO_ADDRINFO *bai);
+const BIO_ADDR * __cdecl BIO_ADDRINFO_address(const BIO_ADDRINFO *bai);
+void __cdecl BIO_ADDRINFO_free(BIO_ADDRINFO *bai);
 
 enum BIO_hostserv_priorities {
     BIO_PARSE_PRIO_HOST, BIO_PARSE_PRIO_SERV
 };
-int BIO_parse_hostserv(const char *hostserv, char **host, char **service,
+int __cdecl BIO_parse_hostserv(const char *hostserv, char **host, char **service,
                        enum BIO_hostserv_priorities hostserv_prio);
 enum BIO_lookup_type {
     BIO_LOOKUP_CLIENT, BIO_LOOKUP_SERVER
 };
-int BIO_lookup(const char *host, const char *service,
+int __cdecl BIO_lookup(const char *host, const char *service,
                enum BIO_lookup_type lookup_type,
                int family, int socktype, BIO_ADDRINFO **res);
-int BIO_lookup_ex(const char *host, const char *service,
+int __cdecl BIO_lookup_ex(const char *host, const char *service,
                   int lookup_type, int family, int socktype, int protocol,
                   BIO_ADDRINFO **res);
-int BIO_sock_error(int sock);
-int BIO_socket_ioctl(int fd, long type, void *arg);
-int BIO_socket_nbio(int fd, int mode);
-int BIO_sock_init(void);
+int __cdecl BIO_sock_error(int sock);
+int __cdecl BIO_socket_ioctl(int fd, long type, void *arg);
+int __cdecl BIO_socket_nbio(int fd, int mode);
+int __cdecl BIO_sock_init(void);
 # if OPENSSL_API_COMPAT < 0x10100000L
 #  define BIO_sock_cleanup() while(0) continue
 # endif
-int BIO_set_tcp_ndelay(int sock, int turn_on);
+int __cdecl BIO_set_tcp_ndelay(int sock, int turn_on);
 
 DEPRECATEDIN_1_1_0(struct hostent *BIO_gethostbyname(const char *name))
 DEPRECATEDIN_1_1_0(int BIO_get_port(const char *str, unsigned short *port_ptr))
@@ -694,7 +694,7 @@ union BIO_sock_info_u {
 enum BIO_sock_info_type {
     BIO_SOCK_INFO_ADDRESS
 };
-int BIO_sock_info(int sock,
+int __cdecl BIO_sock_info(int sock,
                   enum BIO_sock_info_type type, union BIO_sock_info_u *info);
 
 #  define BIO_SOCK_REUSEADDR    0x01
@@ -703,21 +703,21 @@ int BIO_sock_info(int sock,
 #  define BIO_SOCK_NONBLOCK     0x08
 #  define BIO_SOCK_NODELAY      0x10
 
-int BIO_socket(int domain, int socktype, int protocol, int options);
-int BIO_connect(int sock, const BIO_ADDR *addr, int options);
-int BIO_bind(int sock, const BIO_ADDR *addr, int options);
-int BIO_listen(int sock, const BIO_ADDR *addr, int options);
-int BIO_accept_ex(int accept_sock, BIO_ADDR *addr, int options);
-int BIO_closesocket(int sock);
+int __cdecl BIO_socket(int domain, int socktype, int protocol, int options);
+int __cdecl BIO_connect(int sock, const BIO_ADDR *addr, int options);
+int __cdecl BIO_bind(int sock, const BIO_ADDR *addr, int options);
+int __cdecl BIO_listen(int sock, const BIO_ADDR *addr, int options);
+int __cdecl BIO_accept_ex(int accept_sock, BIO_ADDR *addr, int options);
+int __cdecl BIO_closesocket(int sock);
 
-BIO *BIO_new_socket(int sock, int close_flag);
-BIO *BIO_new_connect(const char *host_port);
-BIO *BIO_new_accept(const char *host_port);
+BIO * __cdecl BIO_new_socket(int sock, int close_flag);
+BIO * __cdecl BIO_new_connect(const char *host_port);
+BIO * __cdecl BIO_new_accept(const char *host_port);
 # endif /* OPENSSL_NO_SOCK*/
 
-BIO *BIO_new_fd(int fd, int close_flag);
+BIO * __cdecl BIO_new_fd(int fd, int close_flag);
 
-int BIO_new_bio_pair(BIO **bio1, size_t writebuf1,
+int __cdecl BIO_new_bio_pair(BIO **bio1, size_t writebuf1,
                      BIO **bio2, size_t writebuf2);
 /*
  * If successful, returns 1 and in *bio1, *bio2 two BIO pair endpoints.
@@ -725,7 +725,7 @@ int BIO_new_bio_pair(BIO **bio1, size_t writebuf1,
  * value.
  */
 
-void BIO_copy_next_retry(BIO *b);
+void __cdecl BIO_copy_next_retry(BIO *b);
 
 /*
  * long BIO_ghbn_ctrl(int cmd,int iarg,char *parg);
@@ -748,50 +748,50 @@ void BIO_copy_next_retry(BIO *b);
 #   endif
 #  endif
 # endif
-int BIO_printf(BIO *bio, const char *format, ...)
+int __cdecl BIO_printf(BIO *bio, const char *format, ...)
 ossl_bio__attr__((__format__(ossl_bio__printf__, 2, 3)));
-int BIO_vprintf(BIO *bio, const char *format, va_list args)
+int __cdecl BIO_vprintf(BIO *bio, const char *format, va_list args)
 ossl_bio__attr__((__format__(ossl_bio__printf__, 2, 0)));
-int BIO_snprintf(char *buf, size_t n, const char *format, ...)
+int __cdecl BIO_snprintf(char *buf, size_t n, const char *format, ...)
 ossl_bio__attr__((__format__(ossl_bio__printf__, 3, 4)));
-int BIO_vsnprintf(char *buf, size_t n, const char *format, va_list args)
+int __cdecl BIO_vsnprintf(char *buf, size_t n, const char *format, va_list args)
 ossl_bio__attr__((__format__(ossl_bio__printf__, 3, 0)));
 # undef ossl_bio__attr__
 # undef ossl_bio__printf__
 
 
-BIO_METHOD *BIO_meth_new(int type, const char *name);
-void BIO_meth_free(BIO_METHOD *biom);
-int (*BIO_meth_get_write(const BIO_METHOD *biom)) (BIO *, const char *, int);
-int (*BIO_meth_get_write_ex(const BIO_METHOD *biom)) (BIO *, const char *, size_t,
+BIO_METHOD *__cdecl BIO_meth_new(int type, const char *name);
+void __cdecl BIO_meth_free(BIO_METHOD *biom);
+int (__cdecl * BIO_meth_get_write(const BIO_METHOD *biom)) (BIO *, const char *, int);
+int (__cdecl * BIO_meth_get_write_ex(const BIO_METHOD *biom)) (BIO *, const char *, size_t,
                                                 size_t *);
-int BIO_meth_set_write(BIO_METHOD *biom,
-                       int (*write) (BIO *, const char *, int));
-int BIO_meth_set_write_ex(BIO_METHOD *biom,
-                       int (*bwrite) (BIO *, const char *, size_t, size_t *));
-int (*BIO_meth_get_read(const BIO_METHOD *biom)) (BIO *, char *, int);
-int (*BIO_meth_get_read_ex(const BIO_METHOD *biom)) (BIO *, char *, size_t, size_t *);
-int BIO_meth_set_read(BIO_METHOD *biom,
-                      int (*read) (BIO *, char *, int));
-int BIO_meth_set_read_ex(BIO_METHOD *biom,
-                         int (*bread) (BIO *, char *, size_t, size_t *));
-int (*BIO_meth_get_puts(const BIO_METHOD *biom)) (BIO *, const char *);
-int BIO_meth_set_puts(BIO_METHOD *biom,
-                      int (*puts) (BIO *, const char *));
-int (*BIO_meth_get_gets(const BIO_METHOD *biom)) (BIO *, char *, int);
-int BIO_meth_set_gets(BIO_METHOD *biom,
-                      int (*gets) (BIO *, char *, int));
-long (*BIO_meth_get_ctrl(const BIO_METHOD *biom)) (BIO *, int, long, void *);
-int BIO_meth_set_ctrl(BIO_METHOD *biom,
-                      long (*ctrl) (BIO *, int, long, void *));
-int (*BIO_meth_get_create(const BIO_METHOD *bion)) (BIO *);
-int BIO_meth_set_create(BIO_METHOD *biom, int (*create) (BIO *));
-int (*BIO_meth_get_destroy(const BIO_METHOD *biom)) (BIO *);
-int BIO_meth_set_destroy(BIO_METHOD *biom, int (*destroy) (BIO *));
-long (*BIO_meth_get_callback_ctrl(const BIO_METHOD *biom))
+int __cdecl BIO_meth_set_write(BIO_METHOD *biom,
+                       int (__cdecl *write) (BIO *, const char *, int));
+int __cdecl BIO_meth_set_write_ex(BIO_METHOD *biom,
+                       int (__cdecl *bwrite) (BIO *, const char *, size_t, size_t *));
+int (__cdecl * BIO_meth_get_read(const BIO_METHOD *biom)) (BIO *, char *, int);
+int (__cdecl * BIO_meth_get_read_ex(const BIO_METHOD *biom)) (BIO *, char *, size_t, size_t *);
+int __cdecl BIO_meth_set_read(BIO_METHOD *biom,
+                      int (__cdecl *read) (BIO *, char *, int));
+int __cdecl BIO_meth_set_read_ex(BIO_METHOD *biom,
+                         int (__cdecl *bread) (BIO *, char *, size_t, size_t *));
+int (__cdecl * BIO_meth_get_puts(const BIO_METHOD *biom)) (BIO *, const char *);
+int __cdecl BIO_meth_set_puts(BIO_METHOD *biom,
+                      int (__cdecl *puts) (BIO *, const char *));
+int (__cdecl * BIO_meth_get_gets(const BIO_METHOD *biom)) (BIO *, char *, int);
+int __cdecl BIO_meth_set_gets(BIO_METHOD *biom,
+                      int (__cdecl *gets) (BIO *, char *, int));
+long (__cdecl * BIO_meth_get_ctrl(const BIO_METHOD *biom)) (BIO *, int, long, void *);
+int __cdecl BIO_meth_set_ctrl(BIO_METHOD *biom,
+                      long (__cdecl *ctrl) (BIO *, int, long, void *));
+int (__cdecl * BIO_meth_get_create(const BIO_METHOD *bion)) (BIO *);
+int __cdecl BIO_meth_set_create(BIO_METHOD *biom, int (__cdecl *create) (BIO *));
+int (__cdecl * BIO_meth_get_destroy(const BIO_METHOD *biom)) (BIO *);
+int __cdecl BIO_meth_set_destroy(BIO_METHOD *biom, int (__cdecl *destroy) (BIO *));
+long (__cdecl * BIO_meth_get_callback_ctrl(const BIO_METHOD *biom))
                                  (BIO *, int, BIO_info_cb *);
-int BIO_meth_set_callback_ctrl(BIO_METHOD *biom,
-                               long (*callback_ctrl) (BIO *, int,
+int __cdecl BIO_meth_set_callback_ctrl(BIO_METHOD *biom,
+                               long (__cdecl *callback_ctrl) (BIO *, int,
                                                       BIO_info_cb *));
 
 # ifdef  __cplusplus
diff --git a/include/openssl/bioerr.h b/include/openssl/bioerr.h
index 46e2c96ee3..4c738bbb02 100644
--- a/include/openssl/bioerr.h
+++ b/include/openssl/bioerr.h
@@ -18,7 +18,7 @@
 # ifdef  __cplusplus
 extern "C"
 # endif
-int ERR_load_BIO_strings(void);
+int __cdecl ERR_load_BIO_strings(void);
 
 /*
  * BIO function codes.
diff --git a/include/openssl/blowfish.h b/include/openssl/blowfish.h
index cd3e460e98..a749b13ade 100644
--- a/include/openssl/blowfish.h
+++ b/include/openssl/blowfish.h
@@ -36,22 +36,22 @@ typedef struct bf_key_st {
     BF_LONG S[4 * 256];
 } BF_KEY;
 
-void BF_set_key(BF_KEY *key, int len, const unsigned char *data);
+void __cdecl BF_set_key(BF_KEY *key, int len, const unsigned char *data);
 
-void BF_encrypt(BF_LONG *data, const BF_KEY *key);
-void BF_decrypt(BF_LONG *data, const BF_KEY *key);
+void __cdecl BF_encrypt(BF_LONG *data, const BF_KEY *key);
+void __cdecl BF_decrypt(BF_LONG *data, const BF_KEY *key);
 
-void BF_ecb_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl BF_ecb_encrypt(const unsigned char *in, unsigned char *out,
                     const BF_KEY *key, int enc);
-void BF_cbc_encrypt(const unsigned char *in, unsigned char *out, long length,
+void __cdecl BF_cbc_encrypt(const unsigned char *in, unsigned char *out, long length,
                     const BF_KEY *schedule, unsigned char *ivec, int enc);
-void BF_cfb64_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl BF_cfb64_encrypt(const unsigned char *in, unsigned char *out,
                       long length, const BF_KEY *schedule,
                       unsigned char *ivec, int *num, int enc);
-void BF_ofb64_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl BF_ofb64_encrypt(const unsigned char *in, unsigned char *out,
                       long length, const BF_KEY *schedule,
                       unsigned char *ivec, int *num);
-const char *BF_options(void);
+const char * __cdecl BF_options(void);
 
 # ifdef  __cplusplus
 }
diff --git a/include/openssl/bn.h b/include/openssl/bn.h
index 8af05d00e5..8493b19144 100644
--- a/include/openssl/bn.h
+++ b/include/openssl/bn.h
@@ -67,8 +67,8 @@ extern "C" {
 #  define BN_FLG_FREE            0x8000 /* used for debugging */
 # endif
 
-void BN_set_flags(BIGNUM *b, int n);
-int BN_get_flags(const BIGNUM *b, int n);
+void __cdecl BN_set_flags(BIGNUM *b, int n);
+int __cdecl BN_get_flags(const BIGNUM *b, int n);
 
 /* Values for |top| in BN_rand() */
 #define BN_RAND_TOP_ANY    -1
@@ -85,23 +85,23 @@ int BN_get_flags(const BIGNUM *b, int n);
  * value |dest| should be a newly allocated BIGNUM obtained via BN_new() that
  * has not been otherwise initialised or used.
  */
-void BN_with_flags(BIGNUM *dest, const BIGNUM *b, int flags);
+void __cdecl BN_with_flags(BIGNUM *dest, const BIGNUM *b, int flags);
 
 /* Wrapper function to make using BN_GENCB easier */
-int BN_GENCB_call(BN_GENCB *cb, int a, int b);
+int __cdecl BN_GENCB_call(BN_GENCB *cb, int a, int b);
 
-BN_GENCB *BN_GENCB_new(void);
-void BN_GENCB_free(BN_GENCB *cb);
+BN_GENCB * __cdecl BN_GENCB_new(void);
+void __cdecl BN_GENCB_free(BN_GENCB *cb);
 
 /* Populate a BN_GENCB structure with an "old"-style callback */
-void BN_GENCB_set_old(BN_GENCB *gencb, void (*callback) (int, int, void *),
+void __cdecl BN_GENCB_set_old(BN_GENCB *gencb, void (__cdecl *callback) (int, int, void *),
                       void *cb_arg);
 
 /* Populate a BN_GENCB structure with a "new"-style callback */
-void BN_GENCB_set(BN_GENCB *gencb, int (*callback) (int, int, BN_GENCB *),
+void __cdecl BN_GENCB_set(BN_GENCB *gencb, int (__cdecl *callback) (int, int, BN_GENCB *),
                   void *cb_arg);
 
-void *BN_GENCB_get_arg(BN_GENCB *cb);
+void * __cdecl BN_GENCB_get_arg(BN_GENCB *cb);
 
 # define BN_prime_checks 0      /* default: select number of iterations based
                                  * on the size of the number */
@@ -180,15 +180,15 @@ void *BN_GENCB_get_arg(BN_GENCB *cb);
 
 # define BN_num_bytes(a) ((BN_num_bits(a)+7)/8)
 
-int BN_abs_is_word(const BIGNUM *a, const BN_ULONG w);
-int BN_is_zero(const BIGNUM *a);
-int BN_is_one(const BIGNUM *a);
-int BN_is_word(const BIGNUM *a, const BN_ULONG w);
-int BN_is_odd(const BIGNUM *a);
+int __cdecl BN_abs_is_word(const BIGNUM *a, const BN_ULONG w);
+int __cdecl BN_is_zero(const BIGNUM *a);
+int __cdecl BN_is_one(const BIGNUM *a);
+int __cdecl BN_is_word(const BIGNUM *a, const BN_ULONG w);
+int __cdecl BN_is_odd(const BIGNUM *a);
 
 # define BN_one(a)       (BN_set_word((a),1))
 
-void BN_zero_ex(BIGNUM *a);
+void __cdecl BN_zero_ex(BIGNUM *a);
 
 # if OPENSSL_API_COMPAT >= 0x00908000L
 #  define BN_zero(a)      BN_zero_ex(a)
@@ -196,202 +196,202 @@ void BN_zero_ex(BIGNUM *a);
 #  define BN_zero(a)      (BN_set_word((a),0))
 # endif
 
-const BIGNUM *BN_value_one(void);
-char *BN_options(void);
-BN_CTX *BN_CTX_new(void);
-BN_CTX *BN_CTX_secure_new(void);
-void BN_CTX_free(BN_CTX *c);
-void BN_CTX_start(BN_CTX *ctx);
-BIGNUM *BN_CTX_get(BN_CTX *ctx);
-void BN_CTX_end(BN_CTX *ctx);
-int BN_rand(BIGNUM *rnd, int bits, int top, int bottom);
-int BN_priv_rand(BIGNUM *rnd, int bits, int top, int bottom);
-int BN_rand_range(BIGNUM *rnd, const BIGNUM *range);
-int BN_priv_rand_range(BIGNUM *rnd, const BIGNUM *range);
-int BN_pseudo_rand(BIGNUM *rnd, int bits, int top, int bottom);
-int BN_pseudo_rand_range(BIGNUM *rnd, const BIGNUM *range);
-int BN_num_bits(const BIGNUM *a);
-int BN_num_bits_word(BN_ULONG l);
-int BN_security_bits(int L, int N);
-BIGNUM *BN_new(void);
-BIGNUM *BN_secure_new(void);
-void BN_clear_free(BIGNUM *a);
-BIGNUM *BN_copy(BIGNUM *a, const BIGNUM *b);
-void BN_swap(BIGNUM *a, BIGNUM *b);
-BIGNUM *BN_bin2bn(const unsigned char *s, int len, BIGNUM *ret);
-int BN_bn2bin(const BIGNUM *a, unsigned char *to);
-int BN_bn2binpad(const BIGNUM *a, unsigned char *to, int tolen);
-BIGNUM *BN_lebin2bn(const unsigned char *s, int len, BIGNUM *ret);
-int BN_bn2lebinpad(const BIGNUM *a, unsigned char *to, int tolen);
-BIGNUM *BN_mpi2bn(const unsigned char *s, int len, BIGNUM *ret);
-int BN_bn2mpi(const BIGNUM *a, unsigned char *to);
-int BN_sub(BIGNUM *r, const BIGNUM *a, const BIGNUM *b);
-int BN_usub(BIGNUM *r, const BIGNUM *a, const BIGNUM *b);
-int BN_uadd(BIGNUM *r, const BIGNUM *a, const BIGNUM *b);
-int BN_add(BIGNUM *r, const BIGNUM *a, const BIGNUM *b);
-int BN_mul(BIGNUM *r, const BIGNUM *a, const BIGNUM *b, BN_CTX *ctx);
-int BN_sqr(BIGNUM *r, const BIGNUM *a, BN_CTX *ctx);
+const BIGNUM * __cdecl BN_value_one(void);
+char * __cdecl BN_options(void);
+BN_CTX * __cdecl BN_CTX_new(void);
+BN_CTX * __cdecl BN_CTX_secure_new(void);
+void __cdecl BN_CTX_free(BN_CTX *c);
+void __cdecl BN_CTX_start(BN_CTX *ctx);
+BIGNUM * __cdecl BN_CTX_get(BN_CTX *ctx);
+void __cdecl BN_CTX_end(BN_CTX *ctx);
+int __cdecl BN_rand(BIGNUM *rnd, int bits, int top, int bottom);
+int __cdecl BN_priv_rand(BIGNUM *rnd, int bits, int top, int bottom);
+int __cdecl BN_rand_range(BIGNUM *rnd, const BIGNUM *range);
+int __cdecl BN_priv_rand_range(BIGNUM *rnd, const BIGNUM *range);
+int __cdecl BN_pseudo_rand(BIGNUM *rnd, int bits, int top, int bottom);
+int __cdecl BN_pseudo_rand_range(BIGNUM *rnd, const BIGNUM *range);
+int __cdecl BN_num_bits(const BIGNUM *a);
+int __cdecl BN_num_bits_word(BN_ULONG l);
+int __cdecl BN_security_bits(int L, int N);
+BIGNUM * __cdecl BN_new(void);
+BIGNUM * __cdecl BN_secure_new(void);
+void __cdecl BN_clear_free(BIGNUM *a);
+BIGNUM * __cdecl BN_copy(BIGNUM *a, const BIGNUM *b);
+void __cdecl BN_swap(BIGNUM *a, BIGNUM *b);
+BIGNUM * __cdecl BN_bin2bn(const unsigned char *s, int len, BIGNUM *ret);
+int __cdecl BN_bn2bin(const BIGNUM *a, unsigned char *to);
+int __cdecl BN_bn2binpad(const BIGNUM *a, unsigned char *to, int tolen);
+BIGNUM * __cdecl BN_lebin2bn(const unsigned char *s, int len, BIGNUM *ret);
+int __cdecl BN_bn2lebinpad(const BIGNUM *a, unsigned char *to, int tolen);
+BIGNUM * __cdecl BN_mpi2bn(const unsigned char *s, int len, BIGNUM *ret);
+int __cdecl BN_bn2mpi(const BIGNUM *a, unsigned char *to);
+int __cdecl BN_sub(BIGNUM *r, const BIGNUM *a, const BIGNUM *b);
+int __cdecl BN_usub(BIGNUM *r, const BIGNUM *a, const BIGNUM *b);
+int __cdecl BN_uadd(BIGNUM *r, const BIGNUM *a, const BIGNUM *b);
+int __cdecl BN_add(BIGNUM *r, const BIGNUM *a, const BIGNUM *b);
+int __cdecl BN_mul(BIGNUM *r, const BIGNUM *a, const BIGNUM *b, BN_CTX *ctx);
+int __cdecl BN_sqr(BIGNUM *r, const BIGNUM *a, BN_CTX *ctx);
 /** BN_set_negative sets sign of a BIGNUM
  * \param  b  pointer to the BIGNUM object
  * \param  n  0 if the BIGNUM b should be positive and a value != 0 otherwise
  */
-void BN_set_negative(BIGNUM *b, int n);
+void __cdecl BN_set_negative(BIGNUM *b, int n);
 /** BN_is_negative returns 1 if the BIGNUM is negative
  * \param  b  pointer to the BIGNUM object
  * \return 1 if a < 0 and 0 otherwise
  */
-int BN_is_negative(const BIGNUM *b);
+int __cdecl BN_is_negative(const BIGNUM *b);
 
-int BN_div(BIGNUM *dv, BIGNUM *rem, const BIGNUM *m, const BIGNUM *d,
+int __cdecl BN_div(BIGNUM *dv, BIGNUM *rem, const BIGNUM *m, const BIGNUM *d,
            BN_CTX *ctx);
 # define BN_mod(rem,m,d,ctx) BN_div(NULL,(rem),(m),(d),(ctx))
-int BN_nnmod(BIGNUM *r, const BIGNUM *m, const BIGNUM *d, BN_CTX *ctx);
-int BN_mod_add(BIGNUM *r, const BIGNUM *a, const BIGNUM *b, const BIGNUM *m,
+int __cdecl BN_nnmod(BIGNUM *r, const BIGNUM *m, const BIGNUM *d, BN_CTX *ctx);
+int __cdecl BN_mod_add(BIGNUM *r, const BIGNUM *a, const BIGNUM *b, const BIGNUM *m,
                BN_CTX *ctx);
-int BN_mod_add_quick(BIGNUM *r, const BIGNUM *a, const BIGNUM *b,
+int __cdecl BN_mod_add_quick(BIGNUM *r, const BIGNUM *a, const BIGNUM *b,
                      const BIGNUM *m);
-int BN_mod_sub(BIGNUM *r, const BIGNUM *a, const BIGNUM *b, const BIGNUM *m,
+int __cdecl BN_mod_sub(BIGNUM *r, const BIGNUM *a, const BIGNUM *b, const BIGNUM *m,
                BN_CTX *ctx);
-int BN_mod_sub_quick(BIGNUM *r, const BIGNUM *a, const BIGNUM *b,
+int __cdecl BN_mod_sub_quick(BIGNUM *r, const BIGNUM *a, const BIGNUM *b,
                      const BIGNUM *m);
-int BN_mod_mul(BIGNUM *r, const BIGNUM *a, const BIGNUM *b, const BIGNUM *m,
+int __cdecl BN_mod_mul(BIGNUM *r, const BIGNUM *a, const BIGNUM *b, const BIGNUM *m,
                BN_CTX *ctx);
-int BN_mod_sqr(BIGNUM *r, const BIGNUM *a, const BIGNUM *m, BN_CTX *ctx);
-int BN_mod_lshift1(BIGNUM *r, const BIGNUM *a, const BIGNUM *m, BN_CTX *ctx);
-int BN_mod_lshift1_quick(BIGNUM *r, const BIGNUM *a, const BIGNUM *m);
-int BN_mod_lshift(BIGNUM *r, const BIGNUM *a, int n, const BIGNUM *m,
+int __cdecl BN_mod_sqr(BIGNUM *r, const BIGNUM *a, const BIGNUM *m, BN_CTX *ctx);
+int __cdecl BN_mod_lshift1(BIGNUM *r, const BIGNUM *a, const BIGNUM *m, BN_CTX *ctx);
+int __cdecl BN_mod_lshift1_quick(BIGNUM *r, const BIGNUM *a, const BIGNUM *m);
+int __cdecl BN_mod_lshift(BIGNUM *r, const BIGNUM *a, int n, const BIGNUM *m,
                   BN_CTX *ctx);
-int BN_mod_lshift_quick(BIGNUM *r, const BIGNUM *a, int n, const BIGNUM *m);
-
-BN_ULONG BN_mod_word(const BIGNUM *a, BN_ULONG w);
-BN_ULONG BN_div_word(BIGNUM *a, BN_ULONG w);
-int BN_mul_word(BIGNUM *a, BN_ULONG w);
-int BN_add_word(BIGNUM *a, BN_ULONG w);
-int BN_sub_word(BIGNUM *a, BN_ULONG w);
-int BN_set_word(BIGNUM *a, BN_ULONG w);
-BN_ULONG BN_get_word(const BIGNUM *a);
-
-int BN_cmp(const BIGNUM *a, const BIGNUM *b);
-void BN_free(BIGNUM *a);
-int BN_is_bit_set(const BIGNUM *a, int n);
-int BN_lshift(BIGNUM *r, const BIGNUM *a, int n);
-int BN_lshift1(BIGNUM *r, const BIGNUM *a);
-int BN_exp(BIGNUM *r, const BIGNUM *a, const BIGNUM *p, BN_CTX *ctx);
-
-int BN_mod_exp(BIGNUM *r, const BIGNUM *a, const BIGNUM *p,
+int __cdecl BN_mod_lshift_quick(BIGNUM *r, const BIGNUM *a, int n, const BIGNUM *m);
+
+BN_ULONG __cdecl BN_mod_word(const BIGNUM *a, BN_ULONG w);
+BN_ULONG __cdecl BN_div_word(BIGNUM *a, BN_ULONG w);
+int __cdecl BN_mul_word(BIGNUM *a, BN_ULONG w);
+int __cdecl BN_add_word(BIGNUM *a, BN_ULONG w);
+int __cdecl BN_sub_word(BIGNUM *a, BN_ULONG w);
+int __cdecl BN_set_word(BIGNUM *a, BN_ULONG w);
+BN_ULONG __cdecl BN_get_word(const BIGNUM *a);
+
+int __cdecl BN_cmp(const BIGNUM *a, const BIGNUM *b);
+void __cdecl BN_free(BIGNUM *a);
+int __cdecl BN_is_bit_set(const BIGNUM *a, int n);
+int __cdecl BN_lshift(BIGNUM *r, const BIGNUM *a, int n);
+int __cdecl BN_lshift1(BIGNUM *r, const BIGNUM *a);
+int __cdecl BN_exp(BIGNUM *r, const BIGNUM *a, const BIGNUM *p, BN_CTX *ctx);
+
+int __cdecl BN_mod_exp(BIGNUM *r, const BIGNUM *a, const BIGNUM *p,
                const BIGNUM *m, BN_CTX *ctx);
-int BN_mod_exp_mont(BIGNUM *r, const BIGNUM *a, const BIGNUM *p,
+int __cdecl BN_mod_exp_mont(BIGNUM *r, const BIGNUM *a, const BIGNUM *p,
                     const BIGNUM *m, BN_CTX *ctx, BN_MONT_CTX *m_ctx);
-int BN_mod_exp_mont_consttime(BIGNUM *rr, const BIGNUM *a, const BIGNUM *p,
+int __cdecl BN_mod_exp_mont_consttime(BIGNUM *rr, const BIGNUM *a, const BIGNUM *p,
                               const BIGNUM *m, BN_CTX *ctx,
                               BN_MONT_CTX *in_mont);
-int BN_mod_exp_mont_word(BIGNUM *r, BN_ULONG a, const BIGNUM *p,
+int __cdecl BN_mod_exp_mont_word(BIGNUM *r, BN_ULONG a, const BIGNUM *p,
                          const BIGNUM *m, BN_CTX *ctx, BN_MONT_CTX *m_ctx);
-int BN_mod_exp2_mont(BIGNUM *r, const BIGNUM *a1, const BIGNUM *p1,
+int __cdecl BN_mod_exp2_mont(BIGNUM *r, const BIGNUM *a1, const BIGNUM *p1,
                      const BIGNUM *a2, const BIGNUM *p2, const BIGNUM *m,
                      BN_CTX *ctx, BN_MONT_CTX *m_ctx);
-int BN_mod_exp_simple(BIGNUM *r, const BIGNUM *a, const BIGNUM *p,
+int __cdecl BN_mod_exp_simple(BIGNUM *r, const BIGNUM *a, const BIGNUM *p,
                       const BIGNUM *m, BN_CTX *ctx);
 
-int BN_mask_bits(BIGNUM *a, int n);
+int __cdecl BN_mask_bits(BIGNUM *a, int n);
 # ifndef OPENSSL_NO_STDIO
-int BN_print_fp(FILE *fp, const BIGNUM *a);
+int __cdecl BN_print_fp(FILE *fp, const BIGNUM *a);
 # endif
-int BN_print(BIO *bio, const BIGNUM *a);
-int BN_reciprocal(BIGNUM *r, const BIGNUM *m, int len, BN_CTX *ctx);
-int BN_rshift(BIGNUM *r, const BIGNUM *a, int n);
-int BN_rshift1(BIGNUM *r, const BIGNUM *a);
-void BN_clear(BIGNUM *a);
-BIGNUM *BN_dup(const BIGNUM *a);
-int BN_ucmp(const BIGNUM *a, const BIGNUM *b);
-int BN_set_bit(BIGNUM *a, int n);
-int BN_clear_bit(BIGNUM *a, int n);
-char *BN_bn2hex(const BIGNUM *a);
-char *BN_bn2dec(const BIGNUM *a);
-int BN_hex2bn(BIGNUM **a, const char *str);
-int BN_dec2bn(BIGNUM **a, const char *str);
-int BN_asc2bn(BIGNUM **a, const char *str);
-int BN_gcd(BIGNUM *r, const BIGNUM *a, const BIGNUM *b, BN_CTX *ctx);
-int BN_kronecker(const BIGNUM *a, const BIGNUM *b, BN_CTX *ctx); /* returns
+int __cdecl BN_print(BIO *bio, const BIGNUM *a);
+int __cdecl BN_reciprocal(BIGNUM *r, const BIGNUM *m, int len, BN_CTX *ctx);
+int __cdecl BN_rshift(BIGNUM *r, const BIGNUM *a, int n);
+int __cdecl BN_rshift1(BIGNUM *r, const BIGNUM *a);
+void __cdecl BN_clear(BIGNUM *a);
+BIGNUM * __cdecl BN_dup(const BIGNUM *a);
+int __cdecl BN_ucmp(const BIGNUM *a, const BIGNUM *b);
+int __cdecl BN_set_bit(BIGNUM *a, int n);
+int __cdecl BN_clear_bit(BIGNUM *a, int n);
+char * __cdecl BN_bn2hex(const BIGNUM *a);
+char * __cdecl BN_bn2dec(const BIGNUM *a);
+int __cdecl BN_hex2bn(BIGNUM **a, const char *str);
+int __cdecl BN_dec2bn(BIGNUM **a, const char *str);
+int __cdecl BN_asc2bn(BIGNUM **a, const char *str);
+int __cdecl BN_gcd(BIGNUM *r, const BIGNUM *a, const BIGNUM *b, BN_CTX *ctx);
+int __cdecl BN_kronecker(const BIGNUM *a, const BIGNUM *b, BN_CTX *ctx); /* returns
                                                                   * -2 for
                                                                   * error */
-BIGNUM *BN_mod_inverse(BIGNUM *ret,
+BIGNUM * __cdecl BN_mod_inverse(BIGNUM *ret,
                        const BIGNUM *a, const BIGNUM *n, BN_CTX *ctx);
-BIGNUM *BN_mod_sqrt(BIGNUM *ret,
+BIGNUM * __cdecl BN_mod_sqrt(BIGNUM *ret,
                     const BIGNUM *a, const BIGNUM *n, BN_CTX *ctx);
 
-void BN_consttime_swap(BN_ULONG swap, BIGNUM *a, BIGNUM *b, int nwords);
+void __cdecl BN_consttime_swap(BN_ULONG swap, BIGNUM *a, BIGNUM *b, int nwords);
 
 /* Deprecated versions */
 DEPRECATEDIN_0_9_8(BIGNUM *BN_generate_prime(BIGNUM *ret, int bits, int safe,
                                              const BIGNUM *add,
                                              const BIGNUM *rem,
-                                             void (*callback) (int, int,
+                                             void (__cdecl *callback) (int, int,
                                                                void *),
                                              void *cb_arg))
 DEPRECATEDIN_0_9_8(int
                    BN_is_prime(const BIGNUM *p, int nchecks,
-                               void (*callback) (int, int, void *),
+                               void (__cdecl *callback) (int, int, void *),
                                BN_CTX *ctx, void *cb_arg))
 DEPRECATEDIN_0_9_8(int
                    BN_is_prime_fasttest(const BIGNUM *p, int nchecks,
-                                        void (*callback) (int, int, void *),
+                                        void (__cdecl *callback) (int, int, void *),
                                         BN_CTX *ctx, void *cb_arg,
                                         int do_trial_division))
 
 /* Newer versions */
-int BN_generate_prime_ex(BIGNUM *ret, int bits, int safe, const BIGNUM *add,
+int __cdecl BN_generate_prime_ex(BIGNUM *ret, int bits, int safe, const BIGNUM *add,
                          const BIGNUM *rem, BN_GENCB *cb);
-int BN_is_prime_ex(const BIGNUM *p, int nchecks, BN_CTX *ctx, BN_GENCB *cb);
-int BN_is_prime_fasttest_ex(const BIGNUM *p, int nchecks, BN_CTX *ctx,
+int __cdecl BN_is_prime_ex(const BIGNUM *p, int nchecks, BN_CTX *ctx, BN_GENCB *cb);
+int __cdecl BN_is_prime_fasttest_ex(const BIGNUM *p, int nchecks, BN_CTX *ctx,
                             int do_trial_division, BN_GENCB *cb);
 
-int BN_X931_generate_Xpq(BIGNUM *Xp, BIGNUM *Xq, int nbits, BN_CTX *ctx);
+int __cdecl BN_X931_generate_Xpq(BIGNUM *Xp, BIGNUM *Xq, int nbits, BN_CTX *ctx);
 
-int BN_X931_derive_prime_ex(BIGNUM *p, BIGNUM *p1, BIGNUM *p2,
+int __cdecl BN_X931_derive_prime_ex(BIGNUM *p, BIGNUM *p1, BIGNUM *p2,
                             const BIGNUM *Xp, const BIGNUM *Xp1,
                             const BIGNUM *Xp2, const BIGNUM *e, BN_CTX *ctx,
                             BN_GENCB *cb);
-int BN_X931_generate_prime_ex(BIGNUM *p, BIGNUM *p1, BIGNUM *p2, BIGNUM *Xp1,
+int __cdecl BN_X931_generate_prime_ex(BIGNUM *p, BIGNUM *p1, BIGNUM *p2, BIGNUM *Xp1,
                               BIGNUM *Xp2, const BIGNUM *Xp, const BIGNUM *e,
                               BN_CTX *ctx, BN_GENCB *cb);
 
-BN_MONT_CTX *BN_MONT_CTX_new(void);
-int BN_mod_mul_montgomery(BIGNUM *r, const BIGNUM *a, const BIGNUM *b,
+BN_MONT_CTX * __cdecl BN_MONT_CTX_new(void);
+int __cdecl BN_mod_mul_montgomery(BIGNUM *r, const BIGNUM *a, const BIGNUM *b,
                           BN_MONT_CTX *mont, BN_CTX *ctx);
-int BN_to_montgomery(BIGNUM *r, const BIGNUM *a, BN_MONT_CTX *mont,
+int __cdecl BN_to_montgomery(BIGNUM *r, const BIGNUM *a, BN_MONT_CTX *mont,
                      BN_CTX *ctx);
-int BN_from_montgomery(BIGNUM *r, const BIGNUM *a, BN_MONT_CTX *mont,
+int __cdecl BN_from_montgomery(BIGNUM *r, const BIGNUM *a, BN_MONT_CTX *mont,
                        BN_CTX *ctx);
-void BN_MONT_CTX_free(BN_MONT_CTX *mont);
-int BN_MONT_CTX_set(BN_MONT_CTX *mont, const BIGNUM *mod, BN_CTX *ctx);
-BN_MONT_CTX *BN_MONT_CTX_copy(BN_MONT_CTX *to, BN_MONT_CTX *from);
-BN_MONT_CTX *BN_MONT_CTX_set_locked(BN_MONT_CTX **pmont, CRYPTO_RWLOCK *lock,
+void __cdecl BN_MONT_CTX_free(BN_MONT_CTX *mont);
+int __cdecl BN_MONT_CTX_set(BN_MONT_CTX *mont, const BIGNUM *mod, BN_CTX *ctx);
+BN_MONT_CTX * __cdecl BN_MONT_CTX_copy(BN_MONT_CTX *to, BN_MONT_CTX *from);
+BN_MONT_CTX * __cdecl BN_MONT_CTX_set_locked(BN_MONT_CTX **pmont, CRYPTO_RWLOCK *lock,
                                     const BIGNUM *mod, BN_CTX *ctx);
 
 /* BN_BLINDING flags */
 # define BN_BLINDING_NO_UPDATE   0x00000001
 # define BN_BLINDING_NO_RECREATE 0x00000002
 
-BN_BLINDING *BN_BLINDING_new(const BIGNUM *A, const BIGNUM *Ai, BIGNUM *mod);
-void BN_BLINDING_free(BN_BLINDING *b);
-int BN_BLINDING_update(BN_BLINDING *b, BN_CTX *ctx);
-int BN_BLINDING_convert(BIGNUM *n, BN_BLINDING *b, BN_CTX *ctx);
-int BN_BLINDING_invert(BIGNUM *n, BN_BLINDING *b, BN_CTX *ctx);
-int BN_BLINDING_convert_ex(BIGNUM *n, BIGNUM *r, BN_BLINDING *b, BN_CTX *);
-int BN_BLINDING_invert_ex(BIGNUM *n, const BIGNUM *r, BN_BLINDING *b,
+BN_BLINDING * __cdecl BN_BLINDING_new(const BIGNUM *A, const BIGNUM *Ai, BIGNUM *mod);
+void __cdecl BN_BLINDING_free(BN_BLINDING *b);
+int __cdecl BN_BLINDING_update(BN_BLINDING *b, BN_CTX *ctx);
+int __cdecl BN_BLINDING_convert(BIGNUM *n, BN_BLINDING *b, BN_CTX *ctx);
+int __cdecl BN_BLINDING_invert(BIGNUM *n, BN_BLINDING *b, BN_CTX *ctx);
+int __cdecl BN_BLINDING_convert_ex(BIGNUM *n, BIGNUM *r, BN_BLINDING *b, BN_CTX *);
+int __cdecl BN_BLINDING_invert_ex(BIGNUM *n, const BIGNUM *r, BN_BLINDING *b,
                           BN_CTX *);
 
-int BN_BLINDING_is_current_thread(BN_BLINDING *b);
-void BN_BLINDING_set_current_thread(BN_BLINDING *b);
-int BN_BLINDING_lock(BN_BLINDING *b);
-int BN_BLINDING_unlock(BN_BLINDING *b);
+int __cdecl BN_BLINDING_is_current_thread(BN_BLINDING *b);
+void __cdecl BN_BLINDING_set_current_thread(BN_BLINDING *b);
+int __cdecl BN_BLINDING_lock(BN_BLINDING *b);
+int __cdecl BN_BLINDING_unlock(BN_BLINDING *b);
 
-unsigned long BN_BLINDING_get_flags(const BN_BLINDING *);
-void BN_BLINDING_set_flags(BN_BLINDING *, unsigned long);
-BN_BLINDING *BN_BLINDING_create_param(BN_BLINDING *b,
+unsigned long __cdecl BN_BLINDING_get_flags(const BN_BLINDING *);
+void __cdecl BN_BLINDING_set_flags(BN_BLINDING *, unsigned long);
+BN_BLINDING * __cdecl BN_BLINDING_create_param(BN_BLINDING *b,
                                       const BIGNUM *e, BIGNUM *m, BN_CTX *ctx,
-                                      int (*bn_mod_exp) (BIGNUM *r,
+                                      int (__cdecl *bn_mod_exp) (BIGNUM *r,
                                                          const BIGNUM *a,
                                                          const BIGNUM *p,
                                                          const BIGNUM *m,
@@ -403,14 +403,14 @@ DEPRECATEDIN_0_9_8(void BN_set_params(int mul, int high, int low, int mont))
 DEPRECATEDIN_0_9_8(int BN_get_params(int which)) /* 0, mul, 1 high, 2 low, 3
                                                   * mont */
 
-BN_RECP_CTX *BN_RECP_CTX_new(void);
-void BN_RECP_CTX_free(BN_RECP_CTX *recp);
-int BN_RECP_CTX_set(BN_RECP_CTX *recp, const BIGNUM *rdiv, BN_CTX *ctx);
-int BN_mod_mul_reciprocal(BIGNUM *r, const BIGNUM *x, const BIGNUM *y,
+BN_RECP_CTX * __cdecl BN_RECP_CTX_new(void);
+void __cdecl BN_RECP_CTX_free(BN_RECP_CTX *recp);
+int __cdecl BN_RECP_CTX_set(BN_RECP_CTX *recp, const BIGNUM *rdiv, BN_CTX *ctx);
+int __cdecl BN_mod_mul_reciprocal(BIGNUM *r, const BIGNUM *x, const BIGNUM *y,
                           BN_RECP_CTX *recp, BN_CTX *ctx);
-int BN_mod_exp_recp(BIGNUM *r, const BIGNUM *a, const BIGNUM *p,
+int __cdecl BN_mod_exp_recp(BIGNUM *r, const BIGNUM *a, const BIGNUM *p,
                     const BIGNUM *m, BN_CTX *ctx);
-int BN_div_recp(BIGNUM *dv, BIGNUM *rem, const BIGNUM *m,
+int __cdecl BN_div_recp(BIGNUM *dv, BIGNUM *rem, const BIGNUM *m,
                 BN_RECP_CTX *recp, BN_CTX *ctx);
 
 # ifndef OPENSSL_NO_EC2M
@@ -425,30 +425,30 @@ int BN_div_recp(BIGNUM *dv, BIGNUM *rem, const BIGNUM *m,
 /*
  * r = a + b
  */
-int BN_GF2m_add(BIGNUM *r, const BIGNUM *a, const BIGNUM *b);
+int __cdecl BN_GF2m_add(BIGNUM *r, const BIGNUM *a, const BIGNUM *b);
 #  define BN_GF2m_sub(r, a, b) BN_GF2m_add(r, a, b)
 /*
  * r=a mod p
  */
-int BN_GF2m_mod(BIGNUM *r, const BIGNUM *a, const BIGNUM *p);
+int __cdecl BN_GF2m_mod(BIGNUM *r, const BIGNUM *a, const BIGNUM *p);
 /* r = (a * b) mod p */
-int BN_GF2m_mod_mul(BIGNUM *r, const BIGNUM *a, const BIGNUM *b,
+int __cdecl BN_GF2m_mod_mul(BIGNUM *r, const BIGNUM *a, const BIGNUM *b,
                     const BIGNUM *p, BN_CTX *ctx);
 /* r = (a * a) mod p */
-int BN_GF2m_mod_sqr(BIGNUM *r, const BIGNUM *a, const BIGNUM *p, BN_CTX *ctx);
+int __cdecl BN_GF2m_mod_sqr(BIGNUM *r, const BIGNUM *a, const BIGNUM *p, BN_CTX *ctx);
 /* r = (1 / b) mod p */
-int BN_GF2m_mod_inv(BIGNUM *r, const BIGNUM *b, const BIGNUM *p, BN_CTX *ctx);
+int __cdecl BN_GF2m_mod_inv(BIGNUM *r, const BIGNUM *b, const BIGNUM *p, BN_CTX *ctx);
 /* r = (a / b) mod p */
-int BN_GF2m_mod_div(BIGNUM *r, const BIGNUM *a, const BIGNUM *b,
+int __cdecl BN_GF2m_mod_div(BIGNUM *r, const BIGNUM *a, const BIGNUM *b,
                     const BIGNUM *p, BN_CTX *ctx);
 /* r = (a ^ b) mod p */
-int BN_GF2m_mod_exp(BIGNUM *r, const BIGNUM *a, const BIGNUM *b,
+int __cdecl BN_GF2m_mod_exp(BIGNUM *r, const BIGNUM *a, const BIGNUM *b,
                     const BIGNUM *p, BN_CTX *ctx);
 /* r = sqrt(a) mod p */
-int BN_GF2m_mod_sqrt(BIGNUM *r, const BIGNUM *a, const BIGNUM *p,
+int __cdecl BN_GF2m_mod_sqrt(BIGNUM *r, const BIGNUM *a, const BIGNUM *p,
                      BN_CTX *ctx);
 /* r^2 + r = a mod p */
-int BN_GF2m_mod_solve_quad(BIGNUM *r, const BIGNUM *a, const BIGNUM *p,
+int __cdecl BN_GF2m_mod_solve_quad(BIGNUM *r, const BIGNUM *a, const BIGNUM *p,
                            BN_CTX *ctx);
 #  define BN_GF2m_cmp(a, b) BN_ucmp((a), (b))
 /*-
@@ -458,66 +458,66 @@ int BN_GF2m_mod_solve_quad(BIGNUM *r, const BIGNUM *a, const BIGNUM *p,
  * where m = p[0] > p[1] > ... > p[k] = 0.
  */
 /* r = a mod p */
-int BN_GF2m_mod_arr(BIGNUM *r, const BIGNUM *a, const int p[]);
+int __cdecl BN_GF2m_mod_arr(BIGNUM *r, const BIGNUM *a, const int p[]);
 /* r = (a * b) mod p */
-int BN_GF2m_mod_mul_arr(BIGNUM *r, const BIGNUM *a, const BIGNUM *b,
+int __cdecl BN_GF2m_mod_mul_arr(BIGNUM *r, const BIGNUM *a, const BIGNUM *b,
                         const int p[], BN_CTX *ctx);
 /* r = (a * a) mod p */
-int BN_GF2m_mod_sqr_arr(BIGNUM *r, const BIGNUM *a, const int p[],
+int __cdecl BN_GF2m_mod_sqr_arr(BIGNUM *r, const BIGNUM *a, const int p[],
                         BN_CTX *ctx);
 /* r = (1 / b) mod p */
-int BN_GF2m_mod_inv_arr(BIGNUM *r, const BIGNUM *b, const int p[],
+int __cdecl BN_GF2m_mod_inv_arr(BIGNUM *r, const BIGNUM *b, const int p[],
                         BN_CTX *ctx);
 /* r = (a / b) mod p */
-int BN_GF2m_mod_div_arr(BIGNUM *r, const BIGNUM *a, const BIGNUM *b,
+int __cdecl BN_GF2m_mod_div_arr(BIGNUM *r, const BIGNUM *a, const BIGNUM *b,
                         const int p[], BN_CTX *ctx);
 /* r = (a ^ b) mod p */
-int BN_GF2m_mod_exp_arr(BIGNUM *r, const BIGNUM *a, const BIGNUM *b,
+int __cdecl BN_GF2m_mod_exp_arr(BIGNUM *r, const BIGNUM *a, const BIGNUM *b,
                         const int p[], BN_CTX *ctx);
 /* r = sqrt(a) mod p */
-int BN_GF2m_mod_sqrt_arr(BIGNUM *r, const BIGNUM *a,
+int __cdecl BN_GF2m_mod_sqrt_arr(BIGNUM *r, const BIGNUM *a,
                          const int p[], BN_CTX *ctx);
 /* r^2 + r = a mod p */
-int BN_GF2m_mod_solve_quad_arr(BIGNUM *r, const BIGNUM *a,
+int __cdecl BN_GF2m_mod_solve_quad_arr(BIGNUM *r, const BIGNUM *a,
                                const int p[], BN_CTX *ctx);
-int BN_GF2m_poly2arr(const BIGNUM *a, int p[], int max);
-int BN_GF2m_arr2poly(const int p[], BIGNUM *a);
+int __cdecl BN_GF2m_poly2arr(const BIGNUM *a, int p[], int max);
+int __cdecl BN_GF2m_arr2poly(const int p[], BIGNUM *a);
 
 # endif
 
 /*
  * faster mod functions for the 'NIST primes' 0 <= a < p^2
  */
-int BN_nist_mod_192(BIGNUM *r, const BIGNUM *a, const BIGNUM *p, BN_CTX *ctx);
-int BN_nist_mod_224(BIGNUM *r, const BIGNUM *a, const BIGNUM *p, BN_CTX *ctx);
-int BN_nist_mod_256(BIGNUM *r, const BIGNUM *a, const BIGNUM *p, BN_CTX *ctx);
-int BN_nist_mod_384(BIGNUM *r, const BIGNUM *a, const BIGNUM *p, BN_CTX *ctx);
-int BN_nist_mod_521(BIGNUM *r, const BIGNUM *a, const BIGNUM *p, BN_CTX *ctx);
-
-const BIGNUM *BN_get0_nist_prime_192(void);
-const BIGNUM *BN_get0_nist_prime_224(void);
-const BIGNUM *BN_get0_nist_prime_256(void);
-const BIGNUM *BN_get0_nist_prime_384(void);
-const BIGNUM *BN_get0_nist_prime_521(void);
-
-int (*BN_nist_mod_func(const BIGNUM *p)) (BIGNUM *r, const BIGNUM *a,
+int __cdecl BN_nist_mod_192(BIGNUM *r, const BIGNUM *a, const BIGNUM *p, BN_CTX *ctx);
+int __cdecl BN_nist_mod_224(BIGNUM *r, const BIGNUM *a, const BIGNUM *p, BN_CTX *ctx);
+int __cdecl BN_nist_mod_256(BIGNUM *r, const BIGNUM *a, const BIGNUM *p, BN_CTX *ctx);
+int __cdecl BN_nist_mod_384(BIGNUM *r, const BIGNUM *a, const BIGNUM *p, BN_CTX *ctx);
+int __cdecl BN_nist_mod_521(BIGNUM *r, const BIGNUM *a, const BIGNUM *p, BN_CTX *ctx);
+
+const BIGNUM * __cdecl BN_get0_nist_prime_192(void);
+const BIGNUM * __cdecl BN_get0_nist_prime_224(void);
+const BIGNUM * __cdecl BN_get0_nist_prime_256(void);
+const BIGNUM * __cdecl BN_get0_nist_prime_384(void);
+const BIGNUM * __cdecl BN_get0_nist_prime_521(void);
+
+int (__cdecl *BN_nist_mod_func(const BIGNUM *p)) (BIGNUM *r, const BIGNUM *a,
                                           const BIGNUM *field, BN_CTX *ctx);
 
-int BN_generate_dsa_nonce(BIGNUM *out, const BIGNUM *range,
+int __cdecl BN_generate_dsa_nonce(BIGNUM *out, const BIGNUM *range,
                           const BIGNUM *priv, const unsigned char *message,
                           size_t message_len, BN_CTX *ctx);
 
 /* Primes from RFC 2409 */
-BIGNUM *BN_get_rfc2409_prime_768(BIGNUM *bn);
-BIGNUM *BN_get_rfc2409_prime_1024(BIGNUM *bn);
+BIGNUM * __cdecl BN_get_rfc2409_prime_768(BIGNUM *bn);
+BIGNUM * __cdecl BN_get_rfc2409_prime_1024(BIGNUM *bn);
 
 /* Primes from RFC 3526 */
-BIGNUM *BN_get_rfc3526_prime_1536(BIGNUM *bn);
-BIGNUM *BN_get_rfc3526_prime_2048(BIGNUM *bn);
-BIGNUM *BN_get_rfc3526_prime_3072(BIGNUM *bn);
-BIGNUM *BN_get_rfc3526_prime_4096(BIGNUM *bn);
-BIGNUM *BN_get_rfc3526_prime_6144(BIGNUM *bn);
-BIGNUM *BN_get_rfc3526_prime_8192(BIGNUM *bn);
+BIGNUM * __cdecl BN_get_rfc3526_prime_1536(BIGNUM *bn);
+BIGNUM * __cdecl BN_get_rfc3526_prime_2048(BIGNUM *bn);
+BIGNUM * __cdecl BN_get_rfc3526_prime_3072(BIGNUM *bn);
+BIGNUM * __cdecl BN_get_rfc3526_prime_4096(BIGNUM *bn);
+BIGNUM * __cdecl BN_get_rfc3526_prime_6144(BIGNUM *bn);
+BIGNUM * __cdecl BN_get_rfc3526_prime_8192(BIGNUM *bn);
 
 # if OPENSSL_API_COMPAT < 0x10100000L
 #  define get_rfc2409_prime_768 BN_get_rfc2409_prime_768
@@ -530,7 +530,7 @@ BIGNUM *BN_get_rfc3526_prime_8192(BIGNUM *bn);
 #  define get_rfc3526_prime_8192 BN_get_rfc3526_prime_8192
 # endif
 
-int BN_bntest_rand(BIGNUM *rnd, int bits, int top, int bottom);
+int __cdecl BN_bntest_rand(BIGNUM *rnd, int bits, int top, int bottom);
 
 
 # ifdef  __cplusplus
diff --git a/include/openssl/bnerr.h b/include/openssl/bnerr.h
index 9f3c7cfaab..0cd520583b 100644
--- a/include/openssl/bnerr.h
+++ b/include/openssl/bnerr.h
@@ -18,7 +18,7 @@
 # ifdef  __cplusplus
 extern "C"
 # endif
-int ERR_load_BN_strings(void);
+int __cdecl ERR_load_BN_strings(void);
 
 /*
  * BN function codes.
diff --git a/include/openssl/buffer.h b/include/openssl/buffer.h
index d2765766b7..951f045fc3 100644
--- a/include/openssl/buffer.h
+++ b/include/openssl/buffer.h
@@ -44,12 +44,12 @@ struct buf_mem_st {
 
 # define BUF_MEM_FLAG_SECURE  0x01
 
-BUF_MEM *BUF_MEM_new(void);
-BUF_MEM *BUF_MEM_new_ex(unsigned long flags);
-void BUF_MEM_free(BUF_MEM *a);
-size_t BUF_MEM_grow(BUF_MEM *str, size_t len);
-size_t BUF_MEM_grow_clean(BUF_MEM *str, size_t len);
-void BUF_reverse(unsigned char *out, const unsigned char *in, size_t siz);
+BUF_MEM * __cdecl BUF_MEM_new(void);
+BUF_MEM * __cdecl BUF_MEM_new_ex(unsigned long flags);
+void __cdecl BUF_MEM_free(BUF_MEM *a);
+size_t __cdecl BUF_MEM_grow(BUF_MEM *str, size_t len);
+size_t __cdecl BUF_MEM_grow_clean(BUF_MEM *str, size_t len);
+void __cdecl BUF_reverse(unsigned char *out, const unsigned char *in, size_t siz);
 
 
 # ifdef  __cplusplus
diff --git a/include/openssl/buffererr.h b/include/openssl/buffererr.h
index 04f6ff7a83..0a3c910d10 100644
--- a/include/openssl/buffererr.h
+++ b/include/openssl/buffererr.h
@@ -18,7 +18,7 @@
 # ifdef  __cplusplus
 extern "C"
 # endif
-int ERR_load_BUF_strings(void);
+int __cdecl ERR_load_BUF_strings(void);
 
 /*
  * BUF function codes.
diff --git a/include/openssl/camellia.h b/include/openssl/camellia.h
index 151f3c1349..c4d15f7db7 100644
--- a/include/openssl/camellia.h
+++ b/include/openssl/camellia.h
@@ -44,32 +44,32 @@ struct camellia_key_st {
 };
 typedef struct camellia_key_st CAMELLIA_KEY;
 
-int Camellia_set_key(const unsigned char *userKey, const int bits,
+int __cdecl Camellia_set_key(const unsigned char *userKey, const int bits,
                      CAMELLIA_KEY *key);
 
-void Camellia_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl Camellia_encrypt(const unsigned char *in, unsigned char *out,
                       const CAMELLIA_KEY *key);
-void Camellia_decrypt(const unsigned char *in, unsigned char *out,
+void __cdecl Camellia_decrypt(const unsigned char *in, unsigned char *out,
                       const CAMELLIA_KEY *key);
 
-void Camellia_ecb_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl Camellia_ecb_encrypt(const unsigned char *in, unsigned char *out,
                           const CAMELLIA_KEY *key, const int enc);
-void Camellia_cbc_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl Camellia_cbc_encrypt(const unsigned char *in, unsigned char *out,
                           size_t length, const CAMELLIA_KEY *key,
                           unsigned char *ivec, const int enc);
-void Camellia_cfb128_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl Camellia_cfb128_encrypt(const unsigned char *in, unsigned char *out,
                              size_t length, const CAMELLIA_KEY *key,
                              unsigned char *ivec, int *num, const int enc);
-void Camellia_cfb1_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl Camellia_cfb1_encrypt(const unsigned char *in, unsigned char *out,
                            size_t length, const CAMELLIA_KEY *key,
                            unsigned char *ivec, int *num, const int enc);
-void Camellia_cfb8_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl Camellia_cfb8_encrypt(const unsigned char *in, unsigned char *out,
                            size_t length, const CAMELLIA_KEY *key,
                            unsigned char *ivec, int *num, const int enc);
-void Camellia_ofb128_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl Camellia_ofb128_encrypt(const unsigned char *in, unsigned char *out,
                              size_t length, const CAMELLIA_KEY *key,
                              unsigned char *ivec, int *num);
-void Camellia_ctr128_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl Camellia_ctr128_encrypt(const unsigned char *in, unsigned char *out,
                              size_t length, const CAMELLIA_KEY *key,
                              unsigned char ivec[CAMELLIA_BLOCK_SIZE],
                              unsigned char ecount_buf[CAMELLIA_BLOCK_SIZE],
diff --git a/include/openssl/cast.h b/include/openssl/cast.h
index 2cc89ae013..095dc41b85 100644
--- a/include/openssl/cast.h
+++ b/include/openssl/cast.h
@@ -30,18 +30,18 @@ typedef struct cast_key_st {
     int short_key;              /* Use reduced rounds for short key */
 } CAST_KEY;
 
-void CAST_set_key(CAST_KEY *key, int len, const unsigned char *data);
-void CAST_ecb_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl CAST_set_key(CAST_KEY *key, int len, const unsigned char *data);
+void __cdecl CAST_ecb_encrypt(const unsigned char *in, unsigned char *out,
                       const CAST_KEY *key, int enc);
-void CAST_encrypt(CAST_LONG *data, const CAST_KEY *key);
-void CAST_decrypt(CAST_LONG *data, const CAST_KEY *key);
-void CAST_cbc_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl CAST_encrypt(CAST_LONG *data, const CAST_KEY *key);
+void __cdecl CAST_decrypt(CAST_LONG *data, const CAST_KEY *key);
+void __cdecl CAST_cbc_encrypt(const unsigned char *in, unsigned char *out,
                       long length, const CAST_KEY *ks, unsigned char *iv,
                       int enc);
-void CAST_cfb64_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl CAST_cfb64_encrypt(const unsigned char *in, unsigned char *out,
                         long length, const CAST_KEY *schedule,
                         unsigned char *ivec, int *num, int enc);
-void CAST_ofb64_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl CAST_ofb64_encrypt(const unsigned char *in, unsigned char *out,
                         long length, const CAST_KEY *schedule,
                         unsigned char *ivec, int *num);
 
diff --git a/include/openssl/cmac.h b/include/openssl/cmac.h
index 3535a9abf7..0e390a4e5d 100644
--- a/include/openssl/cmac.h
+++ b/include/openssl/cmac.h
@@ -21,17 +21,17 @@ extern "C" {
 /* Opaque */
 typedef struct CMAC_CTX_st CMAC_CTX;
 
-CMAC_CTX *CMAC_CTX_new(void);
-void CMAC_CTX_cleanup(CMAC_CTX *ctx);
-void CMAC_CTX_free(CMAC_CTX *ctx);
-EVP_CIPHER_CTX *CMAC_CTX_get0_cipher_ctx(CMAC_CTX *ctx);
-int CMAC_CTX_copy(CMAC_CTX *out, const CMAC_CTX *in);
+CMAC_CTX * __cdecl CMAC_CTX_new(void);
+void __cdecl CMAC_CTX_cleanup(CMAC_CTX *ctx);
+void __cdecl CMAC_CTX_free(CMAC_CTX *ctx);
+EVP_CIPHER_CTX * __cdecl CMAC_CTX_get0_cipher_ctx(CMAC_CTX *ctx);
+int __cdecl CMAC_CTX_copy(CMAC_CTX *out, const CMAC_CTX *in);
 
-int CMAC_Init(CMAC_CTX *ctx, const void *key, size_t keylen,
+int __cdecl CMAC_Init(CMAC_CTX *ctx, const void *key, size_t keylen,
               const EVP_CIPHER *cipher, ENGINE *impl);
-int CMAC_Update(CMAC_CTX *ctx, const void *data, size_t dlen);
-int CMAC_Final(CMAC_CTX *ctx, unsigned char *out, size_t *poutlen);
-int CMAC_resume(CMAC_CTX *ctx);
+int __cdecl CMAC_Update(CMAC_CTX *ctx, const void *data, size_t dlen);
+int __cdecl CMAC_Final(CMAC_CTX *ctx, unsigned char *out, size_t *poutlen);
+int __cdecl CMAC_resume(CMAC_CTX *ctx);
 
 #ifdef  __cplusplus
 }
diff --git a/include/openssl/cms.h b/include/openssl/cms.h
index c7627968c7..53350de147 100644
--- a/include/openssl/cms.h
+++ b/include/openssl/cms.h
@@ -74,257 +74,257 @@ DECLARE_ASN1_PRINT_FUNCTION(CMS_ContentInfo)
 # define CMS_KEY_PARAM                   0x40000
 # define CMS_ASCIICRLF                   0x80000
 
-const ASN1_OBJECT *CMS_get0_type(const CMS_ContentInfo *cms);
+const ASN1_OBJECT * __cdecl CMS_get0_type(const CMS_ContentInfo *cms);
 
-BIO *CMS_dataInit(CMS_ContentInfo *cms, BIO *icont);
-int CMS_dataFinal(CMS_ContentInfo *cms, BIO *bio);
+BIO * __cdecl CMS_dataInit(CMS_ContentInfo *cms, BIO *icont);
+int __cdecl CMS_dataFinal(CMS_ContentInfo *cms, BIO *bio);
 
-ASN1_OCTET_STRING **CMS_get0_content(CMS_ContentInfo *cms);
-int CMS_is_detached(CMS_ContentInfo *cms);
-int CMS_set_detached(CMS_ContentInfo *cms, int detached);
+ASN1_OCTET_STRING ** __cdecl CMS_get0_content(CMS_ContentInfo *cms);
+int __cdecl CMS_is_detached(CMS_ContentInfo *cms);
+int __cdecl CMS_set_detached(CMS_ContentInfo *cms, int detached);
 
 # ifdef HEADER_PEM_H
 DECLARE_PEM_rw_const(CMS, CMS_ContentInfo)
 # endif
-int CMS_stream(unsigned char ***boundary, CMS_ContentInfo *cms);
-CMS_ContentInfo *d2i_CMS_bio(BIO *bp, CMS_ContentInfo **cms);
-int i2d_CMS_bio(BIO *bp, CMS_ContentInfo *cms);
+int __cdecl CMS_stream(unsigned char ***boundary, CMS_ContentInfo *cms);
+CMS_ContentInfo * __cdecl d2i_CMS_bio(BIO *bp, CMS_ContentInfo **cms);
+int __cdecl i2d_CMS_bio(BIO *bp, CMS_ContentInfo *cms);
 
-BIO *BIO_new_CMS(BIO *out, CMS_ContentInfo *cms);
-int i2d_CMS_bio_stream(BIO *out, CMS_ContentInfo *cms, BIO *in, int flags);
-int PEM_write_bio_CMS_stream(BIO *out, CMS_ContentInfo *cms, BIO *in,
+BIO * __cdecl BIO_new_CMS(BIO *out, CMS_ContentInfo *cms);
+int __cdecl i2d_CMS_bio_stream(BIO *out, CMS_ContentInfo *cms, BIO *in, int flags);
+int __cdecl PEM_write_bio_CMS_stream(BIO *out, CMS_ContentInfo *cms, BIO *in,
                              int flags);
-CMS_ContentInfo *SMIME_read_CMS(BIO *bio, BIO **bcont);
-int SMIME_write_CMS(BIO *bio, CMS_ContentInfo *cms, BIO *data, int flags);
+CMS_ContentInfo * __cdecl SMIME_read_CMS(BIO *bio, BIO **bcont);
+int __cdecl SMIME_write_CMS(BIO *bio, CMS_ContentInfo *cms, BIO *data, int flags);
 
-int CMS_final(CMS_ContentInfo *cms, BIO *data, BIO *dcont,
+int __cdecl CMS_final(CMS_ContentInfo *cms, BIO *data, BIO *dcont,
               unsigned int flags);
 
-CMS_ContentInfo *CMS_sign(X509 *signcert, EVP_PKEY *pkey,
+CMS_ContentInfo * __cdecl CMS_sign(X509 *signcert, EVP_PKEY *pkey,
                           STACK_OF(X509) *certs, BIO *data,
                           unsigned int flags);
 
-CMS_ContentInfo *CMS_sign_receipt(CMS_SignerInfo *si,
+CMS_ContentInfo * __cdecl CMS_sign_receipt(CMS_SignerInfo *si,
                                   X509 *signcert, EVP_PKEY *pkey,
                                   STACK_OF(X509) *certs, unsigned int flags);
 
-int CMS_data(CMS_ContentInfo *cms, BIO *out, unsigned int flags);
-CMS_ContentInfo *CMS_data_create(BIO *in, unsigned int flags);
+int __cdecl CMS_data(CMS_ContentInfo *cms, BIO *out, unsigned int flags);
+CMS_ContentInfo * __cdecl CMS_data_create(BIO *in, unsigned int flags);
 
-int CMS_digest_verify(CMS_ContentInfo *cms, BIO *dcont, BIO *out,
+int __cdecl CMS_digest_verify(CMS_ContentInfo *cms, BIO *dcont, BIO *out,
                       unsigned int flags);
-CMS_ContentInfo *CMS_digest_create(BIO *in, const EVP_MD *md,
+CMS_ContentInfo * __cdecl CMS_digest_create(BIO *in, const EVP_MD *md,
                                    unsigned int flags);
 
-int CMS_EncryptedData_decrypt(CMS_ContentInfo *cms,
+int __cdecl CMS_EncryptedData_decrypt(CMS_ContentInfo *cms,
                               const unsigned char *key, size_t keylen,
                               BIO *dcont, BIO *out, unsigned int flags);
 
-CMS_ContentInfo *CMS_EncryptedData_encrypt(BIO *in, const EVP_CIPHER *cipher,
+CMS_ContentInfo * __cdecl CMS_EncryptedData_encrypt(BIO *in, const EVP_CIPHER *cipher,
                                            const unsigned char *key,
                                            size_t keylen, unsigned int flags);
 
-int CMS_EncryptedData_set1_key(CMS_ContentInfo *cms, const EVP_CIPHER *ciph,
+int __cdecl CMS_EncryptedData_set1_key(CMS_ContentInfo *cms, const EVP_CIPHER *ciph,
                                const unsigned char *key, size_t keylen);
 
-int CMS_verify(CMS_ContentInfo *cms, STACK_OF(X509) *certs,
+int __cdecl CMS_verify(CMS_ContentInfo *cms, STACK_OF(X509) *certs,
                X509_STORE *store, BIO *dcont, BIO *out, unsigned int flags);
 
-int CMS_verify_receipt(CMS_ContentInfo *rcms, CMS_ContentInfo *ocms,
+int __cdecl CMS_verify_receipt(CMS_ContentInfo *rcms, CMS_ContentInfo *ocms,
                        STACK_OF(X509) *certs,
                        X509_STORE *store, unsigned int flags);
 
-STACK_OF(X509) *CMS_get0_signers(CMS_ContentInfo *cms);
+STACK_OF(X509) * __cdecl CMS_get0_signers(CMS_ContentInfo *cms);
 
-CMS_ContentInfo *CMS_encrypt(STACK_OF(X509) *certs, BIO *in,
+CMS_ContentInfo * __cdecl CMS_encrypt(STACK_OF(X509) *certs, BIO *in,
                              const EVP_CIPHER *cipher, unsigned int flags);
 
-int CMS_decrypt(CMS_ContentInfo *cms, EVP_PKEY *pkey, X509 *cert,
+int __cdecl CMS_decrypt(CMS_ContentInfo *cms, EVP_PKEY *pkey, X509 *cert,
                 BIO *dcont, BIO *out, unsigned int flags);
 
-int CMS_decrypt_set1_pkey(CMS_ContentInfo *cms, EVP_PKEY *pk, X509 *cert);
-int CMS_decrypt_set1_key(CMS_ContentInfo *cms,
+int __cdecl CMS_decrypt_set1_pkey(CMS_ContentInfo *cms, EVP_PKEY *pk, X509 *cert);
+int __cdecl CMS_decrypt_set1_key(CMS_ContentInfo *cms,
                          unsigned char *key, size_t keylen,
                          const unsigned char *id, size_t idlen);
-int CMS_decrypt_set1_password(CMS_ContentInfo *cms,
+int __cdecl CMS_decrypt_set1_password(CMS_ContentInfo *cms,
                               unsigned char *pass, ossl_ssize_t passlen);
 
-STACK_OF(CMS_RecipientInfo) *CMS_get0_RecipientInfos(CMS_ContentInfo *cms);
-int CMS_RecipientInfo_type(CMS_RecipientInfo *ri);
-EVP_PKEY_CTX *CMS_RecipientInfo_get0_pkey_ctx(CMS_RecipientInfo *ri);
-CMS_ContentInfo *CMS_EnvelopedData_create(const EVP_CIPHER *cipher);
-CMS_RecipientInfo *CMS_add1_recipient_cert(CMS_ContentInfo *cms,
+STACK_OF(CMS_RecipientInfo) * __cdecl CMS_get0_RecipientInfos(CMS_ContentInfo *cms);
+int __cdecl CMS_RecipientInfo_type(CMS_RecipientInfo *ri);
+EVP_PKEY_CTX * __cdecl CMS_RecipientInfo_get0_pkey_ctx(CMS_RecipientInfo *ri);
+CMS_ContentInfo * __cdecl CMS_EnvelopedData_create(const EVP_CIPHER *cipher);
+CMS_RecipientInfo * __cdecl CMS_add1_recipient_cert(CMS_ContentInfo *cms,
                                            X509 *recip, unsigned int flags);
-int CMS_RecipientInfo_set0_pkey(CMS_RecipientInfo *ri, EVP_PKEY *pkey);
-int CMS_RecipientInfo_ktri_cert_cmp(CMS_RecipientInfo *ri, X509 *cert);
-int CMS_RecipientInfo_ktri_get0_algs(CMS_RecipientInfo *ri,
+int __cdecl CMS_RecipientInfo_set0_pkey(CMS_RecipientInfo *ri, EVP_PKEY *pkey);
+int __cdecl CMS_RecipientInfo_ktri_cert_cmp(CMS_RecipientInfo *ri, X509 *cert);
+int __cdecl CMS_RecipientInfo_ktri_get0_algs(CMS_RecipientInfo *ri,
                                      EVP_PKEY **pk, X509 **recip,
                                      X509_ALGOR **palg);
-int CMS_RecipientInfo_ktri_get0_signer_id(CMS_RecipientInfo *ri,
+int __cdecl CMS_RecipientInfo_ktri_get0_signer_id(CMS_RecipientInfo *ri,
                                           ASN1_OCTET_STRING **keyid,
                                           X509_NAME **issuer,
                                           ASN1_INTEGER **sno);
 
-CMS_RecipientInfo *CMS_add0_recipient_key(CMS_ContentInfo *cms, int nid,
+CMS_RecipientInfo * __cdecl CMS_add0_recipient_key(CMS_ContentInfo *cms, int nid,
                                           unsigned char *key, size_t keylen,
                                           unsigned char *id, size_t idlen,
                                           ASN1_GENERALIZEDTIME *date,
                                           ASN1_OBJECT *otherTypeId,
                                           ASN1_TYPE *otherType);
 
-int CMS_RecipientInfo_kekri_get0_id(CMS_RecipientInfo *ri,
+int __cdecl CMS_RecipientInfo_kekri_get0_id(CMS_RecipientInfo *ri,
                                     X509_ALGOR **palg,
                                     ASN1_OCTET_STRING **pid,
                                     ASN1_GENERALIZEDTIME **pdate,
                                     ASN1_OBJECT **potherid,
                                     ASN1_TYPE **pothertype);
 
-int CMS_RecipientInfo_set0_key(CMS_RecipientInfo *ri,
+int __cdecl CMS_RecipientInfo_set0_key(CMS_RecipientInfo *ri,
                                unsigned char *key, size_t keylen);
 
-int CMS_RecipientInfo_kekri_id_cmp(CMS_RecipientInfo *ri,
+int __cdecl CMS_RecipientInfo_kekri_id_cmp(CMS_RecipientInfo *ri,
                                    const unsigned char *id, size_t idlen);
 
-int CMS_RecipientInfo_set0_password(CMS_RecipientInfo *ri,
+int __cdecl CMS_RecipientInfo_set0_password(CMS_RecipientInfo *ri,
                                     unsigned char *pass,
                                     ossl_ssize_t passlen);
 
-CMS_RecipientInfo *CMS_add0_recipient_password(CMS_ContentInfo *cms,
+CMS_RecipientInfo * __cdecl CMS_add0_recipient_password(CMS_ContentInfo *cms,
                                                int iter, int wrap_nid,
                                                int pbe_nid,
                                                unsigned char *pass,
                                                ossl_ssize_t passlen,
                                                const EVP_CIPHER *kekciph);
 
-int CMS_RecipientInfo_decrypt(CMS_ContentInfo *cms, CMS_RecipientInfo *ri);
-int CMS_RecipientInfo_encrypt(CMS_ContentInfo *cms, CMS_RecipientInfo *ri);
+int __cdecl CMS_RecipientInfo_decrypt(CMS_ContentInfo *cms, CMS_RecipientInfo *ri);
+int __cdecl CMS_RecipientInfo_encrypt(CMS_ContentInfo *cms, CMS_RecipientInfo *ri);
 
-int CMS_uncompress(CMS_ContentInfo *cms, BIO *dcont, BIO *out,
+int __cdecl CMS_uncompress(CMS_ContentInfo *cms, BIO *dcont, BIO *out,
                    unsigned int flags);
-CMS_ContentInfo *CMS_compress(BIO *in, int comp_nid, unsigned int flags);
+CMS_ContentInfo * __cdecl CMS_compress(BIO *in, int comp_nid, unsigned int flags);
 
-int CMS_set1_eContentType(CMS_ContentInfo *cms, const ASN1_OBJECT *oid);
-const ASN1_OBJECT *CMS_get0_eContentType(CMS_ContentInfo *cms);
+int __cdecl CMS_set1_eContentType(CMS_ContentInfo *cms, const ASN1_OBJECT *oid);
+const ASN1_OBJECT * __cdecl CMS_get0_eContentType(CMS_ContentInfo *cms);
 
-CMS_CertificateChoices *CMS_add0_CertificateChoices(CMS_ContentInfo *cms);
-int CMS_add0_cert(CMS_ContentInfo *cms, X509 *cert);
-int CMS_add1_cert(CMS_ContentInfo *cms, X509 *cert);
-STACK_OF(X509) *CMS_get1_certs(CMS_ContentInfo *cms);
+CMS_CertificateChoices * __cdecl CMS_add0_CertificateChoices(CMS_ContentInfo *cms);
+int __cdecl CMS_add0_cert(CMS_ContentInfo *cms, X509 *cert);
+int __cdecl CMS_add1_cert(CMS_ContentInfo *cms, X509 *cert);
+STACK_OF(X509) * __cdecl CMS_get1_certs(CMS_ContentInfo *cms);
 
-CMS_RevocationInfoChoice *CMS_add0_RevocationInfoChoice(CMS_ContentInfo *cms);
-int CMS_add0_crl(CMS_ContentInfo *cms, X509_CRL *crl);
-int CMS_add1_crl(CMS_ContentInfo *cms, X509_CRL *crl);
-STACK_OF(X509_CRL) *CMS_get1_crls(CMS_ContentInfo *cms);
+CMS_RevocationInfoChoice * __cdecl CMS_add0_RevocationInfoChoice(CMS_ContentInfo *cms);
+int __cdecl CMS_add0_crl(CMS_ContentInfo *cms, X509_CRL *crl);
+int __cdecl CMS_add1_crl(CMS_ContentInfo *cms, X509_CRL *crl);
+STACK_OF(X509_CRL) * __cdecl CMS_get1_crls(CMS_ContentInfo *cms);
 
-int CMS_SignedData_init(CMS_ContentInfo *cms);
-CMS_SignerInfo *CMS_add1_signer(CMS_ContentInfo *cms,
+int __cdecl CMS_SignedData_init(CMS_ContentInfo *cms);
+CMS_SignerInfo * __cdecl CMS_add1_signer(CMS_ContentInfo *cms,
                                 X509 *signer, EVP_PKEY *pk, const EVP_MD *md,
                                 unsigned int flags);
-EVP_PKEY_CTX *CMS_SignerInfo_get0_pkey_ctx(CMS_SignerInfo *si);
-EVP_MD_CTX *CMS_SignerInfo_get0_md_ctx(CMS_SignerInfo *si);
-STACK_OF(CMS_SignerInfo) *CMS_get0_SignerInfos(CMS_ContentInfo *cms);
+EVP_PKEY_CTX * __cdecl CMS_SignerInfo_get0_pkey_ctx(CMS_SignerInfo *si);
+EVP_MD_CTX * __cdecl CMS_SignerInfo_get0_md_ctx(CMS_SignerInfo *si);
+STACK_OF(CMS_SignerInfo) * __cdecl CMS_get0_SignerInfos(CMS_ContentInfo *cms);
 
-void CMS_SignerInfo_set1_signer_cert(CMS_SignerInfo *si, X509 *signer);
-int CMS_SignerInfo_get0_signer_id(CMS_SignerInfo *si,
+void __cdecl CMS_SignerInfo_set1_signer_cert(CMS_SignerInfo *si, X509 *signer);
+int __cdecl CMS_SignerInfo_get0_signer_id(CMS_SignerInfo *si,
                                   ASN1_OCTET_STRING **keyid,
                                   X509_NAME **issuer, ASN1_INTEGER **sno);
-int CMS_SignerInfo_cert_cmp(CMS_SignerInfo *si, X509 *cert);
-int CMS_set1_signers_certs(CMS_ContentInfo *cms, STACK_OF(X509) *certs,
+int __cdecl CMS_SignerInfo_cert_cmp(CMS_SignerInfo *si, X509 *cert);
+int __cdecl CMS_set1_signers_certs(CMS_ContentInfo *cms, STACK_OF(X509) *certs,
                            unsigned int flags);
-void CMS_SignerInfo_get0_algs(CMS_SignerInfo *si, EVP_PKEY **pk,
+void __cdecl CMS_SignerInfo_get0_algs(CMS_SignerInfo *si, EVP_PKEY **pk,
                               X509 **signer, X509_ALGOR **pdig,
                               X509_ALGOR **psig);
-ASN1_OCTET_STRING *CMS_SignerInfo_get0_signature(CMS_SignerInfo *si);
-int CMS_SignerInfo_sign(CMS_SignerInfo *si);
-int CMS_SignerInfo_verify(CMS_SignerInfo *si);
-int CMS_SignerInfo_verify_content(CMS_SignerInfo *si, BIO *chain);
+ASN1_OCTET_STRING * __cdecl CMS_SignerInfo_get0_signature(CMS_SignerInfo *si);
+int __cdecl CMS_SignerInfo_sign(CMS_SignerInfo *si);
+int __cdecl CMS_SignerInfo_verify(CMS_SignerInfo *si);
+int __cdecl CMS_SignerInfo_verify_content(CMS_SignerInfo *si, BIO *chain);
 
-int CMS_add_smimecap(CMS_SignerInfo *si, STACK_OF(X509_ALGOR) *algs);
-int CMS_add_simple_smimecap(STACK_OF(X509_ALGOR) **algs,
+int __cdecl CMS_add_smimecap(CMS_SignerInfo *si, STACK_OF(X509_ALGOR) *algs);
+int __cdecl CMS_add_simple_smimecap(STACK_OF(X509_ALGOR) **algs,
                             int algnid, int keysize);
-int CMS_add_standard_smimecap(STACK_OF(X509_ALGOR) **smcap);
+int __cdecl CMS_add_standard_smimecap(STACK_OF(X509_ALGOR) **smcap);
 
-int CMS_signed_get_attr_count(const CMS_SignerInfo *si);
-int CMS_signed_get_attr_by_NID(const CMS_SignerInfo *si, int nid,
+int __cdecl CMS_signed_get_attr_count(const CMS_SignerInfo *si);
+int __cdecl CMS_signed_get_attr_by_NID(const CMS_SignerInfo *si, int nid,
                                int lastpos);
-int CMS_signed_get_attr_by_OBJ(const CMS_SignerInfo *si, const ASN1_OBJECT *obj,
+int __cdecl CMS_signed_get_attr_by_OBJ(const CMS_SignerInfo *si, const ASN1_OBJECT *obj,
                                int lastpos);
-X509_ATTRIBUTE *CMS_signed_get_attr(const CMS_SignerInfo *si, int loc);
-X509_ATTRIBUTE *CMS_signed_delete_attr(CMS_SignerInfo *si, int loc);
-int CMS_signed_add1_attr(CMS_SignerInfo *si, X509_ATTRIBUTE *attr);
-int CMS_signed_add1_attr_by_OBJ(CMS_SignerInfo *si,
+X509_ATTRIBUTE * __cdecl CMS_signed_get_attr(const CMS_SignerInfo *si, int loc);
+X509_ATTRIBUTE * __cdecl CMS_signed_delete_attr(CMS_SignerInfo *si, int loc);
+int __cdecl CMS_signed_add1_attr(CMS_SignerInfo *si, X509_ATTRIBUTE *attr);
+int __cdecl CMS_signed_add1_attr_by_OBJ(CMS_SignerInfo *si,
                                 const ASN1_OBJECT *obj, int type,
                                 const void *bytes, int len);
-int CMS_signed_add1_attr_by_NID(CMS_SignerInfo *si,
+int __cdecl CMS_signed_add1_attr_by_NID(CMS_SignerInfo *si,
                                 int nid, int type,
                                 const void *bytes, int len);
-int CMS_signed_add1_attr_by_txt(CMS_SignerInfo *si,
+int __cdecl CMS_signed_add1_attr_by_txt(CMS_SignerInfo *si,
                                 const char *attrname, int type,
                                 const void *bytes, int len);
-void *CMS_signed_get0_data_by_OBJ(CMS_SignerInfo *si, const ASN1_OBJECT *oid,
+void * __cdecl CMS_signed_get0_data_by_OBJ(CMS_SignerInfo *si, const ASN1_OBJECT *oid,
                                   int lastpos, int type);
 
-int CMS_unsigned_get_attr_count(const CMS_SignerInfo *si);
-int CMS_unsigned_get_attr_by_NID(const CMS_SignerInfo *si, int nid,
+int __cdecl CMS_unsigned_get_attr_count(const CMS_SignerInfo *si);
+int __cdecl CMS_unsigned_get_attr_by_NID(const CMS_SignerInfo *si, int nid,
                                  int lastpos);
-int CMS_unsigned_get_attr_by_OBJ(const CMS_SignerInfo *si,
+int __cdecl CMS_unsigned_get_attr_by_OBJ(const CMS_SignerInfo *si,
                                  const ASN1_OBJECT *obj, int lastpos);
-X509_ATTRIBUTE *CMS_unsigned_get_attr(const CMS_SignerInfo *si, int loc);
-X509_ATTRIBUTE *CMS_unsigned_delete_attr(CMS_SignerInfo *si, int loc);
-int CMS_unsigned_add1_attr(CMS_SignerInfo *si, X509_ATTRIBUTE *attr);
-int CMS_unsigned_add1_attr_by_OBJ(CMS_SignerInfo *si,
+X509_ATTRIBUTE * __cdecl CMS_unsigned_get_attr(const CMS_SignerInfo *si, int loc);
+X509_ATTRIBUTE * __cdecl CMS_unsigned_delete_attr(CMS_SignerInfo *si, int loc);
+int __cdecl CMS_unsigned_add1_attr(CMS_SignerInfo *si, X509_ATTRIBUTE *attr);
+int __cdecl CMS_unsigned_add1_attr_by_OBJ(CMS_SignerInfo *si,
                                   const ASN1_OBJECT *obj, int type,
                                   const void *bytes, int len);
-int CMS_unsigned_add1_attr_by_NID(CMS_SignerInfo *si,
+int __cdecl CMS_unsigned_add1_attr_by_NID(CMS_SignerInfo *si,
                                   int nid, int type,
                                   const void *bytes, int len);
-int CMS_unsigned_add1_attr_by_txt(CMS_SignerInfo *si,
+int __cdecl CMS_unsigned_add1_attr_by_txt(CMS_SignerInfo *si,
                                   const char *attrname, int type,
                                   const void *bytes, int len);
-void *CMS_unsigned_get0_data_by_OBJ(CMS_SignerInfo *si, ASN1_OBJECT *oid,
+void * __cdecl CMS_unsigned_get0_data_by_OBJ(CMS_SignerInfo *si, ASN1_OBJECT *oid,
                                     int lastpos, int type);
 
-int CMS_get1_ReceiptRequest(CMS_SignerInfo *si, CMS_ReceiptRequest **prr);
-CMS_ReceiptRequest *CMS_ReceiptRequest_create0(unsigned char *id, int idlen,
+int __cdecl CMS_get1_ReceiptRequest(CMS_SignerInfo *si, CMS_ReceiptRequest **prr);
+CMS_ReceiptRequest * __cdecl CMS_ReceiptRequest_create0(unsigned char *id, int idlen,
                                                int allorfirst,
                                                STACK_OF(GENERAL_NAMES)
                                                *receiptList, STACK_OF(GENERAL_NAMES)
                                                *receiptsTo);
-int CMS_add1_ReceiptRequest(CMS_SignerInfo *si, CMS_ReceiptRequest *rr);
-void CMS_ReceiptRequest_get0_values(CMS_ReceiptRequest *rr,
+int __cdecl CMS_add1_ReceiptRequest(CMS_SignerInfo *si, CMS_ReceiptRequest *rr);
+void __cdecl CMS_ReceiptRequest_get0_values(CMS_ReceiptRequest *rr,
                                     ASN1_STRING **pcid,
                                     int *pallorfirst,
                                     STACK_OF(GENERAL_NAMES) **plist,
                                     STACK_OF(GENERAL_NAMES) **prto);
-int CMS_RecipientInfo_kari_get0_alg(CMS_RecipientInfo *ri,
+int __cdecl CMS_RecipientInfo_kari_get0_alg(CMS_RecipientInfo *ri,
                                     X509_ALGOR **palg,
                                     ASN1_OCTET_STRING **pukm);
 STACK_OF(CMS_RecipientEncryptedKey)
-*CMS_RecipientInfo_kari_get0_reks(CMS_RecipientInfo *ri);
+* __cdecl CMS_RecipientInfo_kari_get0_reks(CMS_RecipientInfo *ri);
 
-int CMS_RecipientInfo_kari_get0_orig_id(CMS_RecipientInfo *ri,
+int __cdecl CMS_RecipientInfo_kari_get0_orig_id(CMS_RecipientInfo *ri,
                                         X509_ALGOR **pubalg,
                                         ASN1_BIT_STRING **pubkey,
                                         ASN1_OCTET_STRING **keyid,
                                         X509_NAME **issuer,
                                         ASN1_INTEGER **sno);
 
-int CMS_RecipientInfo_kari_orig_id_cmp(CMS_RecipientInfo *ri, X509 *cert);
+int __cdecl CMS_RecipientInfo_kari_orig_id_cmp(CMS_RecipientInfo *ri, X509 *cert);
 
-int CMS_RecipientEncryptedKey_get0_id(CMS_RecipientEncryptedKey *rek,
+int __cdecl CMS_RecipientEncryptedKey_get0_id(CMS_RecipientEncryptedKey *rek,
                                       ASN1_OCTET_STRING **keyid,
                                       ASN1_GENERALIZEDTIME **tm,
                                       CMS_OtherKeyAttribute **other,
                                       X509_NAME **issuer, ASN1_INTEGER **sno);
-int CMS_RecipientEncryptedKey_cert_cmp(CMS_RecipientEncryptedKey *rek,
+int __cdecl CMS_RecipientEncryptedKey_cert_cmp(CMS_RecipientEncryptedKey *rek,
                                        X509 *cert);
-int CMS_RecipientInfo_kari_set0_pkey(CMS_RecipientInfo *ri, EVP_PKEY *pk);
-EVP_CIPHER_CTX *CMS_RecipientInfo_kari_get0_ctx(CMS_RecipientInfo *ri);
-int CMS_RecipientInfo_kari_decrypt(CMS_ContentInfo *cms,
+int __cdecl CMS_RecipientInfo_kari_set0_pkey(CMS_RecipientInfo *ri, EVP_PKEY *pk);
+EVP_CIPHER_CTX * __cdecl CMS_RecipientInfo_kari_get0_ctx(CMS_RecipientInfo *ri);
+int __cdecl CMS_RecipientInfo_kari_decrypt(CMS_ContentInfo *cms,
                                    CMS_RecipientInfo *ri,
                                    CMS_RecipientEncryptedKey *rek);
 
-int CMS_SharedInfo_encode(unsigned char **pder, X509_ALGOR *kekalg,
+int __cdecl CMS_SharedInfo_encode(unsigned char **pder, X509_ALGOR *kekalg,
                           ASN1_OCTET_STRING *ukm, int keylen);
 
 /* Backward compatibility for spelling errors. */
diff --git a/include/openssl/cmserr.h b/include/openssl/cmserr.h
index 7dbc13dc93..1e794ee703 100644
--- a/include/openssl/cmserr.h
+++ b/include/openssl/cmserr.h
@@ -22,7 +22,7 @@
 #  ifdef  __cplusplus
 extern "C"
 #  endif
-int ERR_load_CMS_strings(void);
+int __cdecl ERR_load_CMS_strings(void);
 
 /*
  * CMS function codes.
diff --git a/include/openssl/comp.h b/include/openssl/comp.h
index d814d3cf25..d2806578e1 100644
--- a/include/openssl/comp.h
+++ b/include/openssl/comp.h
@@ -21,19 +21,19 @@ extern "C" {
 
 
 
-COMP_CTX *COMP_CTX_new(COMP_METHOD *meth);
-const COMP_METHOD *COMP_CTX_get_method(const COMP_CTX *ctx);
-int COMP_CTX_get_type(const COMP_CTX* comp);
-int COMP_get_type(const COMP_METHOD *meth);
-const char *COMP_get_name(const COMP_METHOD *meth);
-void COMP_CTX_free(COMP_CTX *ctx);
-
-int COMP_compress_block(COMP_CTX *ctx, unsigned char *out, int olen,
+COMP_CTX * __cdecl COMP_CTX_new(COMP_METHOD *meth);
+const COMP_METHOD * __cdecl COMP_CTX_get_method(const COMP_CTX *ctx);
+int __cdecl COMP_CTX_get_type(const COMP_CTX* comp);
+int __cdecl COMP_get_type(const COMP_METHOD *meth);
+const char * __cdecl COMP_get_name(const COMP_METHOD *meth);
+void __cdecl COMP_CTX_free(COMP_CTX *ctx);
+
+int __cdecl COMP_compress_block(COMP_CTX *ctx, unsigned char *out, int olen,
                         unsigned char *in, int ilen);
-int COMP_expand_block(COMP_CTX *ctx, unsigned char *out, int olen,
+int __cdecl COMP_expand_block(COMP_CTX *ctx, unsigned char *out, int olen,
                       unsigned char *in, int ilen);
 
-COMP_METHOD *COMP_zlib(void);
+COMP_METHOD * __cdecl COMP_zlib(void);
 
 #if OPENSSL_API_COMPAT < 0x10100000L
 #define COMP_zlib_cleanup() while(0) continue
@@ -41,7 +41,7 @@ COMP_METHOD *COMP_zlib(void);
 
 # ifdef HEADER_BIO_H
 #  ifdef ZLIB
-const BIO_METHOD *BIO_f_zlib(void);
+const BIO_METHOD * __cdecl BIO_f_zlib(void);
 #  endif
 # endif
 
diff --git a/include/openssl/comperr.h b/include/openssl/comperr.h
index 90231e9aa3..134ee4cfce 100644
--- a/include/openssl/comperr.h
+++ b/include/openssl/comperr.h
@@ -22,7 +22,7 @@
 #  ifdef  __cplusplus
 extern "C"
 #  endif
-int ERR_load_COMP_strings(void);
+int __cdecl ERR_load_COMP_strings(void);
 
 /*
  * COMP function codes.
diff --git a/include/openssl/conf.h b/include/openssl/conf.h
index 7336cd2f1d..de9fe93f0f 100644
--- a/include/openssl/conf.h
+++ b/include/openssl/conf.h
@@ -66,27 +66,27 @@ typedef void conf_finish_func (CONF_IMODULE *md);
 # define CONF_MFLAGS_IGNORE_MISSING_FILE 0x10
 # define CONF_MFLAGS_DEFAULT_SECTION     0x20
 
-int CONF_set_default_method(CONF_METHOD *meth);
-void CONF_set_nconf(CONF *conf, LHASH_OF(CONF_VALUE) *hash);
-LHASH_OF(CONF_VALUE) *CONF_load(LHASH_OF(CONF_VALUE) *conf, const char *file,
+int __cdecl CONF_set_default_method(CONF_METHOD *meth);
+void __cdecl CONF_set_nconf(CONF *conf, LHASH_OF(CONF_VALUE) *hash);
+LHASH_OF(CONF_VALUE) * __cdecl CONF_load(LHASH_OF(CONF_VALUE) *conf, const char *file,
                                 long *eline);
 # ifndef OPENSSL_NO_STDIO
-LHASH_OF(CONF_VALUE) *CONF_load_fp(LHASH_OF(CONF_VALUE) *conf, FILE *fp,
+LHASH_OF(CONF_VALUE) * __cdecl CONF_load_fp(LHASH_OF(CONF_VALUE) *conf, FILE *fp,
                                    long *eline);
 # endif
-LHASH_OF(CONF_VALUE) *CONF_load_bio(LHASH_OF(CONF_VALUE) *conf, BIO *bp,
+LHASH_OF(CONF_VALUE) * __cdecl CONF_load_bio(LHASH_OF(CONF_VALUE) *conf, BIO *bp,
                                     long *eline);
-STACK_OF(CONF_VALUE) *CONF_get_section(LHASH_OF(CONF_VALUE) *conf,
+STACK_OF(CONF_VALUE) * __cdecl CONF_get_section(LHASH_OF(CONF_VALUE) *conf,
                                        const char *section);
-char *CONF_get_string(LHASH_OF(CONF_VALUE) *conf, const char *group,
+char * __cdecl CONF_get_string(LHASH_OF(CONF_VALUE) *conf, const char *group,
                       const char *name);
-long CONF_get_number(LHASH_OF(CONF_VALUE) *conf, const char *group,
+long __cdecl CONF_get_number(LHASH_OF(CONF_VALUE) *conf, const char *group,
                      const char *name);
-void CONF_free(LHASH_OF(CONF_VALUE) *conf);
+void __cdecl CONF_free(LHASH_OF(CONF_VALUE) *conf);
 #ifndef OPENSSL_NO_STDIO
-int CONF_dump_fp(LHASH_OF(CONF_VALUE) *conf, FILE *out);
+int __cdecl CONF_dump_fp(LHASH_OF(CONF_VALUE) *conf, FILE *out);
 #endif
-int CONF_dump_bio(LHASH_OF(CONF_VALUE) *conf, BIO *out);
+int __cdecl CONF_dump_bio(LHASH_OF(CONF_VALUE) *conf, BIO *out);
 
 DEPRECATEDIN_1_1_0(void OPENSSL_config(const char *config_name))
 
@@ -106,60 +106,60 @@ struct conf_st {
     LHASH_OF(CONF_VALUE) *data;
 };
 
-CONF *NCONF_new(CONF_METHOD *meth);
-CONF_METHOD *NCONF_default(void);
-CONF_METHOD *NCONF_WIN32(void);
-void NCONF_free(CONF *conf);
-void NCONF_free_data(CONF *conf);
+CONF * __cdecl NCONF_new(CONF_METHOD *meth);
+CONF_METHOD * __cdecl NCONF_default(void);
+CONF_METHOD * __cdecl NCONF_WIN32(void);
+void __cdecl NCONF_free(CONF *conf);
+void __cdecl NCONF_free_data(CONF *conf);
 
-int NCONF_load(CONF *conf, const char *file, long *eline);
+int __cdecl NCONF_load(CONF *conf, const char *file, long *eline);
 # ifndef OPENSSL_NO_STDIO
-int NCONF_load_fp(CONF *conf, FILE *fp, long *eline);
+int __cdecl NCONF_load_fp(CONF *conf, FILE *fp, long *eline);
 # endif
-int NCONF_load_bio(CONF *conf, BIO *bp, long *eline);
-STACK_OF(CONF_VALUE) *NCONF_get_section(const CONF *conf,
+int __cdecl NCONF_load_bio(CONF *conf, BIO *bp, long *eline);
+STACK_OF(CONF_VALUE) * __cdecl NCONF_get_section(const CONF *conf,
                                         const char *section);
-char *NCONF_get_string(const CONF *conf, const char *group, const char *name);
-int NCONF_get_number_e(const CONF *conf, const char *group, const char *name,
+char * __cdecl NCONF_get_string(const CONF *conf, const char *group, const char *name);
+int __cdecl NCONF_get_number_e(const CONF *conf, const char *group, const char *name,
                        long *result);
 #ifndef OPENSSL_NO_STDIO
-int NCONF_dump_fp(const CONF *conf, FILE *out);
+int __cdecl NCONF_dump_fp(const CONF *conf, FILE *out);
 #endif
-int NCONF_dump_bio(const CONF *conf, BIO *out);
+int __cdecl NCONF_dump_bio(const CONF *conf, BIO *out);
 
 #define NCONF_get_number(c,g,n,r) NCONF_get_number_e(c,g,n,r)
 
 /* Module functions */
 
-int CONF_modules_load(const CONF *cnf, const char *appname,
+int __cdecl CONF_modules_load(const CONF *cnf, const char *appname,
                       unsigned long flags);
-int CONF_modules_load_file(const char *filename, const char *appname,
+int __cdecl CONF_modules_load_file(const char *filename, const char *appname,
                            unsigned long flags);
-void CONF_modules_unload(int all);
-void CONF_modules_finish(void);
+void __cdecl CONF_modules_unload(int all);
+void __cdecl CONF_modules_finish(void);
 #if OPENSSL_API_COMPAT < 0x10100000L
 # define CONF_modules_free() while(0) continue
 #endif
-int CONF_module_add(const char *name, conf_init_func *ifunc,
+int __cdecl CONF_module_add(const char *name, conf_init_func *ifunc,
                     conf_finish_func *ffunc);
 
-const char *CONF_imodule_get_name(const CONF_IMODULE *md);
-const char *CONF_imodule_get_value(const CONF_IMODULE *md);
-void *CONF_imodule_get_usr_data(const CONF_IMODULE *md);
-void CONF_imodule_set_usr_data(CONF_IMODULE *md, void *usr_data);
-CONF_MODULE *CONF_imodule_get_module(const CONF_IMODULE *md);
-unsigned long CONF_imodule_get_flags(const CONF_IMODULE *md);
-void CONF_imodule_set_flags(CONF_IMODULE *md, unsigned long flags);
-void *CONF_module_get_usr_data(CONF_MODULE *pmod);
-void CONF_module_set_usr_data(CONF_MODULE *pmod, void *usr_data);
+const char * __cdecl CONF_imodule_get_name(const CONF_IMODULE *md);
+const char * __cdecl CONF_imodule_get_value(const CONF_IMODULE *md);
+void * __cdecl CONF_imodule_get_usr_data(const CONF_IMODULE *md);
+void __cdecl CONF_imodule_set_usr_data(CONF_IMODULE *md, void *usr_data);
+CONF_MODULE * __cdecl CONF_imodule_get_module(const CONF_IMODULE *md);
+unsigned long __cdecl CONF_imodule_get_flags(const CONF_IMODULE *md);
+void __cdecl CONF_imodule_set_flags(CONF_IMODULE *md, unsigned long flags);
+void * __cdecl CONF_module_get_usr_data(CONF_MODULE *pmod);
+void __cdecl CONF_module_set_usr_data(CONF_MODULE *pmod, void *usr_data);
 
-char *CONF_get1_default_config_file(void);
+char * __cdecl CONF_get1_default_config_file(void);
 
-int CONF_parse_list(const char *list, int sep, int nospc,
+int __cdecl CONF_parse_list(const char *list, int sep, int nospc,
                     int (*list_cb) (const char *elem, int len, void *usr),
                     void *arg);
 
-void OPENSSL_load_builtin_modules(void);
+void __cdecl OPENSSL_load_builtin_modules(void);
 
 
 # ifdef  __cplusplus
diff --git a/include/openssl/conf_api.h b/include/openssl/conf_api.h
index a0275ad79b..093a9d4825 100644
--- a/include/openssl/conf_api.h
+++ b/include/openssl/conf_api.h
@@ -18,21 +18,21 @@ extern "C" {
 #endif
 
 /* Up until OpenSSL 0.9.5a, this was new_section */
-CONF_VALUE *_CONF_new_section(CONF *conf, const char *section);
+CONF_VALUE * __cdecl _CONF_new_section(CONF *conf, const char *section);
 /* Up until OpenSSL 0.9.5a, this was get_section */
-CONF_VALUE *_CONF_get_section(const CONF *conf, const char *section);
+CONF_VALUE * __cdecl _CONF_get_section(const CONF *conf, const char *section);
 /* Up until OpenSSL 0.9.5a, this was CONF_get_section */
-STACK_OF(CONF_VALUE) *_CONF_get_section_values(const CONF *conf,
+STACK_OF(CONF_VALUE) * __cdecl _CONF_get_section_values(const CONF *conf,
                                                const char *section);
 
-int _CONF_add_string(CONF *conf, CONF_VALUE *section, CONF_VALUE *value);
-char *_CONF_get_string(const CONF *conf, const char *section,
+int __cdecl _CONF_add_string(CONF *conf, CONF_VALUE *section, CONF_VALUE *value);
+char * __cdecl _CONF_get_string(const CONF *conf, const char *section,
                        const char *name);
-long _CONF_get_number(const CONF *conf, const char *section,
+long __cdecl _CONF_get_number(const CONF *conf, const char *section,
                       const char *name);
 
-int _CONF_new_data(CONF *conf);
-void _CONF_free_data(CONF *conf);
+int __cdecl _CONF_new_data(CONF *conf);
+void __cdecl _CONF_free_data(CONF *conf);
 
 #ifdef  __cplusplus
 }
diff --git a/include/openssl/conferr.h b/include/openssl/conferr.h
index 32b9229185..4bd6d6a051 100644
--- a/include/openssl/conferr.h
+++ b/include/openssl/conferr.h
@@ -18,7 +18,7 @@
 # ifdef  __cplusplus
 extern "C"
 # endif
-int ERR_load_CONF_strings(void);
+int __cdecl ERR_load_CONF_strings(void);
 
 /*
  * CONF function codes.
diff --git a/include/openssl/crypto.h b/include/openssl/crypto.h
index 7d0b526236..243b650820 100644
--- a/include/openssl/crypto.h
+++ b/include/openssl/crypto.h
@@ -66,13 +66,13 @@ typedef struct {
 
 typedef void CRYPTO_RWLOCK;
 
-CRYPTO_RWLOCK *CRYPTO_THREAD_lock_new(void);
-int CRYPTO_THREAD_read_lock(CRYPTO_RWLOCK *lock);
-int CRYPTO_THREAD_write_lock(CRYPTO_RWLOCK *lock);
-int CRYPTO_THREAD_unlock(CRYPTO_RWLOCK *lock);
-void CRYPTO_THREAD_lock_free(CRYPTO_RWLOCK *lock);
+CRYPTO_RWLOCK * __cdecl CRYPTO_THREAD_lock_new(void);
+int __cdecl CRYPTO_THREAD_read_lock(CRYPTO_RWLOCK *lock);
+int __cdecl CRYPTO_THREAD_write_lock(CRYPTO_RWLOCK *lock);
+int __cdecl CRYPTO_THREAD_unlock(CRYPTO_RWLOCK *lock);
+void __cdecl CRYPTO_THREAD_lock_free(CRYPTO_RWLOCK *lock);
 
-int CRYPTO_atomic_add(int *val, int amount, int *ret, CRYPTO_RWLOCK *lock);
+int __cdecl CRYPTO_atomic_add(int *val, int amount, int *ret, CRYPTO_RWLOCK *lock);
 
 /*
  * The following can be used to detect memory leaks in the library. If
@@ -112,7 +112,7 @@ DEFINE_STACK_OF(void)
 /* No longer needed, so this is a no-op */
 #define OPENSSL_malloc_init() while(0) continue
 
-int CRYPTO_mem_ctrl(int mode);
+int __cdecl CRYPTO_mem_ctrl(int mode);
 
 # define OPENSSL_malloc(num) \
         CRYPTO_malloc(num, OPENSSL_FILE, OPENSSL_LINE)
@@ -143,17 +143,17 @@ int CRYPTO_mem_ctrl(int mode);
 # define OPENSSL_secure_actual_size(ptr) \
         CRYPTO_secure_actual_size(ptr)
 
-size_t OPENSSL_strlcpy(char *dst, const char *src, size_t siz);
-size_t OPENSSL_strlcat(char *dst, const char *src, size_t siz);
-size_t OPENSSL_strnlen(const char *str, size_t maxlen);
-char *OPENSSL_buf2hexstr(const unsigned char *buffer, long len);
-unsigned char *OPENSSL_hexstr2buf(const char *str, long *len);
-int OPENSSL_hexchar2int(unsigned char c);
+size_t __cdecl OPENSSL_strlcpy(char *dst, const char *src, size_t siz);
+size_t __cdecl OPENSSL_strlcat(char *dst, const char *src, size_t siz);
+size_t __cdecl OPENSSL_strnlen(const char *str, size_t maxlen);
+char * __cdecl OPENSSL_buf2hexstr(const unsigned char *buffer, long len);
+unsigned char * __cdecl OPENSSL_hexstr2buf(const char *str, long *len);
+int __cdecl OPENSSL_hexchar2int(unsigned char c);
 
 # define OPENSSL_MALLOC_MAX_NELEMS(type)  (((1U<<(sizeof(int)*8-1))-1)/sizeof(type))
 
-unsigned long OpenSSL_version_num(void);
-const char *OpenSSL_version(int type);
+unsigned long __cdecl OpenSSL_version_num(void);
+const char * __cdecl OpenSSL_version(int type);
 # define OPENSSL_VERSION          0
 # define OPENSSL_CFLAGS           1
 # define OPENSSL_BUILT_ON         2
@@ -161,36 +161,36 @@ const char *OpenSSL_version(int type);
 # define OPENSSL_DIR              4
 # define OPENSSL_ENGINES_DIR      5
 
-int OPENSSL_issetugid(void);
+int __cdecl OPENSSL_issetugid(void);
 
-typedef void CRYPTO_EX_new (void *parent, void *ptr, CRYPTO_EX_DATA *ad,
+typedef void __cdecl CRYPTO_EX_new (void *parent, void *ptr, CRYPTO_EX_DATA *ad,
                            int idx, long argl, void *argp);
-typedef void CRYPTO_EX_free (void *parent, void *ptr, CRYPTO_EX_DATA *ad,
+typedef void __cdecl CRYPTO_EX_free (void *parent, void *ptr, CRYPTO_EX_DATA *ad,
                              int idx, long argl, void *argp);
-typedef int CRYPTO_EX_dup (CRYPTO_EX_DATA *to, const CRYPTO_EX_DATA *from,
+typedef int __cdecl CRYPTO_EX_dup (CRYPTO_EX_DATA *to, const CRYPTO_EX_DATA *from,
                            void *from_d, int idx, long argl, void *argp);
-__owur int CRYPTO_get_ex_new_index(int class_index, long argl, void *argp,
+__owur int __cdecl CRYPTO_get_ex_new_index(int class_index, long argl, void *argp,
                             CRYPTO_EX_new *new_func, CRYPTO_EX_dup *dup_func,
                             CRYPTO_EX_free *free_func);
 /* No longer use an index. */
-int CRYPTO_free_ex_index(int class_index, int idx);
+int __cdecl CRYPTO_free_ex_index(int class_index, int idx);
 
 /*
  * Initialise/duplicate/free CRYPTO_EX_DATA variables corresponding to a
  * given class (invokes whatever per-class callbacks are applicable)
  */
-int CRYPTO_new_ex_data(int class_index, void *obj, CRYPTO_EX_DATA *ad);
-int CRYPTO_dup_ex_data(int class_index, CRYPTO_EX_DATA *to,
+int __cdecl CRYPTO_new_ex_data(int class_index, void *obj, CRYPTO_EX_DATA *ad);
+int __cdecl CRYPTO_dup_ex_data(int class_index, CRYPTO_EX_DATA *to,
                        const CRYPTO_EX_DATA *from);
 
-void CRYPTO_free_ex_data(int class_index, void *obj, CRYPTO_EX_DATA *ad);
+void __cdecl CRYPTO_free_ex_data(int class_index, void *obj, CRYPTO_EX_DATA *ad);
 
 /*
  * Get/set data in a CRYPTO_EX_DATA variable corresponding to a particular
  * index (relative to the class type involved)
  */
-int CRYPTO_set_ex_data(CRYPTO_EX_DATA *ad, int idx, void *val);
-void *CRYPTO_get_ex_data(const CRYPTO_EX_DATA *ad, int idx);
+int __cdecl CRYPTO_set_ex_data(CRYPTO_EX_DATA *ad, int idx, void *val);
+void * __cdecl CRYPTO_get_ex_data(const CRYPTO_EX_DATA *ad, int idx);
 
 # if OPENSSL_API_COMPAT < 0x10100000L
 /*
@@ -253,49 +253,49 @@ typedef struct crypto_threadid_st {
 #  define CRYPTO_get_dynlock_destroy_callback()         (NULL)
 # endif /* OPENSSL_API_COMPAT < 0x10100000L */
 
-int CRYPTO_set_mem_functions(
-        void *(*m) (size_t, const char *, int),
-        void *(*r) (void *, size_t, const char *, int),
-        void (*f) (void *, const char *, int));
-int CRYPTO_set_mem_debug(int flag);
-void CRYPTO_get_mem_functions(
-        void *(**m) (size_t, const char *, int),
-        void *(**r) (void *, size_t, const char *, int),
-        void (**f) (void *, const char *, int));
-
-void *CRYPTO_malloc(size_t num, const char *file, int line);
-void *CRYPTO_zalloc(size_t num, const char *file, int line);
-void *CRYPTO_memdup(const void *str, size_t siz, const char *file, int line);
-char *CRYPTO_strdup(const char *str, const char *file, int line);
-char *CRYPTO_strndup(const char *str, size_t s, const char *file, int line);
-void CRYPTO_free(void *ptr, const char *file, int line);
-void CRYPTO_clear_free(void *ptr, size_t num, const char *file, int line);
-void *CRYPTO_realloc(void *addr, size_t num, const char *file, int line);
-void *CRYPTO_clear_realloc(void *addr, size_t old_num, size_t num,
+int __cdecl CRYPTO_set_mem_functions(
+        void *(__cdecl *m) (size_t, const char *, int),
+        void *(__cdecl *r) (void *, size_t, const char *, int),
+        void (__cdecl *f) (void *, const char *, int));
+int __cdecl CRYPTO_set_mem_debug(int flag);
+void __cdecl CRYPTO_get_mem_functions(
+        void *(__cdecl **m) (size_t, const char *, int),
+        void *(__cdecl **r) (void *, size_t, const char *, int),
+        void (__cdecl **f) (void *, const char *, int));
+
+void * __cdecl CRYPTO_malloc(size_t num, const char *file, int line);
+void * __cdecl CRYPTO_zalloc(size_t num, const char *file, int line);
+void * __cdecl CRYPTO_memdup(const void *str, size_t siz, const char *file, int line);
+char * __cdecl CRYPTO_strdup(const char *str, const char *file, int line);
+char * __cdecl CRYPTO_strndup(const char *str, size_t s, const char *file, int line);
+void __cdecl CRYPTO_free(void *ptr, const char *file, int line);
+void __cdecl CRYPTO_clear_free(void *ptr, size_t num, const char *file, int line);
+void * __cdecl CRYPTO_realloc(void *addr, size_t num, const char *file, int line);
+void * __cdecl CRYPTO_clear_realloc(void *addr, size_t old_num, size_t num,
                            const char *file, int line);
 
-int CRYPTO_secure_malloc_init(size_t sz, int minsize);
-int CRYPTO_secure_malloc_done(void);
-void *CRYPTO_secure_malloc(size_t num, const char *file, int line);
-void *CRYPTO_secure_zalloc(size_t num, const char *file, int line);
-void CRYPTO_secure_free(void *ptr, const char *file, int line);
-void CRYPTO_secure_clear_free(void *ptr, size_t num,
+int __cdecl CRYPTO_secure_malloc_init(size_t sz, int minsize);
+int __cdecl CRYPTO_secure_malloc_done(void);
+void * __cdecl CRYPTO_secure_malloc(size_t num, const char *file, int line);
+void * __cdecl CRYPTO_secure_zalloc(size_t num, const char *file, int line);
+void __cdecl CRYPTO_secure_free(void *ptr, const char *file, int line);
+void __cdecl CRYPTO_secure_clear_free(void *ptr, size_t num,
                               const char *file, int line);
-int CRYPTO_secure_allocated(const void *ptr);
-int CRYPTO_secure_malloc_initialized(void);
-size_t CRYPTO_secure_actual_size(void *ptr);
-size_t CRYPTO_secure_used(void);
+int __cdecl CRYPTO_secure_allocated(const void *ptr);
+int __cdecl CRYPTO_secure_malloc_initialized(void);
+size_t __cdecl CRYPTO_secure_actual_size(void *ptr);
+size_t __cdecl CRYPTO_secure_used(void);
 
-void OPENSSL_cleanse(void *ptr, size_t len);
+void __cdecl OPENSSL_cleanse(void *ptr, size_t len);
 
 # ifndef OPENSSL_NO_CRYPTO_MDEBUG
 #  define OPENSSL_mem_debug_push(info) \
         CRYPTO_mem_debug_push(info, OPENSSL_FILE, OPENSSL_LINE)
 #  define OPENSSL_mem_debug_pop() \
         CRYPTO_mem_debug_pop()
-int CRYPTO_mem_debug_push(const char *info, const char *file, int line);
-int CRYPTO_mem_debug_pop(void);
-void CRYPTO_get_alloc_counts(int *mcount, int *rcount, int *fcount);
+int __cdecl CRYPTO_mem_debug_push(const char *info, const char *file, int line);
+int __cdecl CRYPTO_mem_debug_pop(void);
+void __cdecl CRYPTO_get_alloc_counts(int *mcount, int *rcount, int *fcount);
 
 /*-
  * Debugging functions (enabled by CRYPTO_set_mem_debug(1))
@@ -303,44 +303,44 @@ void CRYPTO_get_alloc_counts(int *mcount, int *rcount, int *fcount);
  *   0:   called before the actual memory allocation has taken place
  *   1:   called after the actual memory allocation has taken place
  */
-void CRYPTO_mem_debug_malloc(void *addr, size_t num, int flag,
+void __cdecl CRYPTO_mem_debug_malloc(void *addr, size_t num, int flag,
         const char *file, int line);
-void CRYPTO_mem_debug_realloc(void *addr1, void *addr2, size_t num, int flag,
+void __cdecl CRYPTO_mem_debug_realloc(void *addr1, void *addr2, size_t num, int flag,
         const char *file, int line);
-void CRYPTO_mem_debug_free(void *addr, int flag,
+void __cdecl CRYPTO_mem_debug_free(void *addr, int flag,
         const char *file, int line);
 
-int CRYPTO_mem_leaks_cb(int (*cb) (const char *str, size_t len, void *u),
+int __cdecl CRYPTO_mem_leaks_cb(int (__cdecl *cb) (const char *str, size_t len, void *u),
                         void *u);
 #  ifndef OPENSSL_NO_STDIO
-int CRYPTO_mem_leaks_fp(FILE *);
+int __cdecl CRYPTO_mem_leaks_fp(FILE *);
 #  endif
-int CRYPTO_mem_leaks(BIO *bio);
+int __cdecl CRYPTO_mem_leaks(BIO *bio);
 # endif
 
 /* die if we have to */
-ossl_noreturn void OPENSSL_die(const char *assertion, const char *file, int line);
+ossl_noreturn void __cdecl OPENSSL_die(const char *assertion, const char *file, int line);
 # if OPENSSL_API_COMPAT < 0x10100000L
 #  define OpenSSLDie(f,l,a) OPENSSL_die((a),(f),(l))
 # endif
 # define OPENSSL_assert(e) \
     (void)((e) ? 0 : (OPENSSL_die("assertion failed: " #e, OPENSSL_FILE, OPENSSL_LINE), 1))
 
-int OPENSSL_isservice(void);
+int __cdecl OPENSSL_isservice(void);
 
-int FIPS_mode(void);
-int FIPS_mode_set(int r);
+int __cdecl FIPS_mode(void);
+int __cdecl FIPS_mode_set(int r);
 
-void OPENSSL_init(void);
+void __cdecl OPENSSL_init(void);
 # ifdef OPENSSL_SYS_UNIX
-void OPENSSL_fork_prepare(void);
-void OPENSSL_fork_parent(void);
-void OPENSSL_fork_child(void);
+void __cdecl OPENSSL_fork_prepare(void);
+void __cdecl OPENSSL_fork_parent(void);
+void __cdecl OPENSSL_fork_child(void);
 # endif
 
-struct tm *OPENSSL_gmtime(const time_t *timer, struct tm *result);
-int OPENSSL_gmtime_adj(struct tm *tm, int offset_day, long offset_sec);
-int OPENSSL_gmtime_diff(int *pday, int *psec,
+struct tm * __cdecl OPENSSL_gmtime(const time_t *timer, struct tm *result);
+int __cdecl OPENSSL_gmtime_adj(struct tm *tm, int offset_day, long offset_sec);
+int __cdecl OPENSSL_gmtime_diff(int *pday, int *psec,
                         const struct tm *from, const struct tm *to);
 
 /*
@@ -350,7 +350,7 @@ int OPENSSL_gmtime_diff(int *pday, int *psec,
  * into a defined order as the return value when a != b is undefined, other
  * than to be non-zero.
  */
-int CRYPTO_memcmp(const void * in_a, const void * in_b, size_t len);
+int __cdecl CRYPTO_memcmp(const void * in_a, const void * in_b, size_t len);
 
 /* Standard initialisation options */
 # define OPENSSL_INIT_NO_LOAD_CRYPTO_STRINGS 0x00000001L
@@ -384,22 +384,22 @@ int CRYPTO_memcmp(const void * in_a, const void * in_b, size_t len);
 
 
 /* Library initialisation functions */
-void OPENSSL_cleanup(void);
-int OPENSSL_init_crypto(uint64_t opts, const OPENSSL_INIT_SETTINGS *settings);
-int OPENSSL_atexit(void (*handler)(void));
-void OPENSSL_thread_stop(void);
+void __cdecl OPENSSL_cleanup(void);
+int __cdecl OPENSSL_init_crypto(uint64_t opts, const OPENSSL_INIT_SETTINGS *settings);
+int __cdecl OPENSSL_atexit(void (__cdecl *handler)(void));
+void __cdecl OPENSSL_thread_stop(void);
 
 /* Low-level control of initialization */
-OPENSSL_INIT_SETTINGS *OPENSSL_INIT_new(void);
+OPENSSL_INIT_SETTINGS * __cdecl OPENSSL_INIT_new(void);
 # ifndef OPENSSL_NO_STDIO
-int OPENSSL_INIT_set_config_filename(OPENSSL_INIT_SETTINGS *settings,
+int __cdecl OPENSSL_INIT_set_config_filename(OPENSSL_INIT_SETTINGS *settings,
                                      const char *config_filename);
-void OPENSSL_INIT_set_config_file_flags(OPENSSL_INIT_SETTINGS *settings,
+void __cdecl OPENSSL_INIT_set_config_file_flags(OPENSSL_INIT_SETTINGS *settings,
                                         unsigned long flags);
-int OPENSSL_INIT_set_config_appname(OPENSSL_INIT_SETTINGS *settings,
+int __cdecl OPENSSL_INIT_set_config_appname(OPENSSL_INIT_SETTINGS *settings,
                                     const char *config_appname);
 # endif
-void OPENSSL_INIT_free(OPENSSL_INIT_SETTINGS *settings);
+void __cdecl OPENSSL_INIT_free(OPENSSL_INIT_SETTINGS *settings);
 
 # if defined(OPENSSL_THREADS) && !defined(CRYPTO_TDEBUG)
 #  if defined(_WIN32)
@@ -428,15 +428,15 @@ typedef unsigned int CRYPTO_THREAD_ID;
 #  define CRYPTO_ONCE_STATIC_INIT 0
 # endif
 
-int CRYPTO_THREAD_run_once(CRYPTO_ONCE *once, void (*init)(void));
+int __cdecl CRYPTO_THREAD_run_once(CRYPTO_ONCE *once, void (__cdecl *init)(void));
 
-int CRYPTO_THREAD_init_local(CRYPTO_THREAD_LOCAL *key, void (*cleanup)(void *));
-void *CRYPTO_THREAD_get_local(CRYPTO_THREAD_LOCAL *key);
-int CRYPTO_THREAD_set_local(CRYPTO_THREAD_LOCAL *key, void *val);
-int CRYPTO_THREAD_cleanup_local(CRYPTO_THREAD_LOCAL *key);
+int __cdecl CRYPTO_THREAD_init_local(CRYPTO_THREAD_LOCAL *key, void (__cdecl *cleanup)(void *));
+void * __cdecl CRYPTO_THREAD_get_local(CRYPTO_THREAD_LOCAL *key);
+int __cdecl CRYPTO_THREAD_set_local(CRYPTO_THREAD_LOCAL *key, void *val);
+int __cdecl CRYPTO_THREAD_cleanup_local(CRYPTO_THREAD_LOCAL *key);
 
-CRYPTO_THREAD_ID CRYPTO_THREAD_get_current_id(void);
-int CRYPTO_THREAD_compare_id(CRYPTO_THREAD_ID a, CRYPTO_THREAD_ID b);
+CRYPTO_THREAD_ID __cdecl CRYPTO_THREAD_get_current_id(void);
+int __cdecl CRYPTO_THREAD_compare_id(CRYPTO_THREAD_ID a, CRYPTO_THREAD_ID b);
 
 
 # ifdef  __cplusplus
diff --git a/include/openssl/cryptoerr.h b/include/openssl/cryptoerr.h
index 3db5a4ee99..ec1f1e5d1a 100644
--- a/include/openssl/cryptoerr.h
+++ b/include/openssl/cryptoerr.h
@@ -18,7 +18,7 @@
 # ifdef  __cplusplus
 extern "C"
 # endif
-int ERR_load_CRYPTO_strings(void);
+int __cdecl ERR_load_CRYPTO_strings(void);
 
 /*
  * CRYPTO function codes.
diff --git a/include/openssl/ct.h b/include/openssl/ct.h
index d4262fa048..6b778647c3 100644
--- a/include/openssl/ct.h
+++ b/include/openssl/ct.h
@@ -67,36 +67,36 @@ DEFINE_STACK_OF(CTLOG)
  * The caller is responsible for calling CT_POLICY_EVAL_CTX_free when finished
  * with the CT_POLICY_EVAL_CTX.
  */
-CT_POLICY_EVAL_CTX *CT_POLICY_EVAL_CTX_new(void);
+CT_POLICY_EVAL_CTX * __cdecl CT_POLICY_EVAL_CTX_new(void);
 
 /* Deletes a policy evaluation context and anything it owns. */
-void CT_POLICY_EVAL_CTX_free(CT_POLICY_EVAL_CTX *ctx);
+void __cdecl CT_POLICY_EVAL_CTX_free(CT_POLICY_EVAL_CTX *ctx);
 
 /* Gets the peer certificate that the SCTs are for */
-X509* CT_POLICY_EVAL_CTX_get0_cert(const CT_POLICY_EVAL_CTX *ctx);
+X509* __cdecl CT_POLICY_EVAL_CTX_get0_cert(const CT_POLICY_EVAL_CTX *ctx);
 
 /*
  * Sets the certificate associated with the received SCTs.
  * Increments the reference count of cert.
  * Returns 1 on success, 0 otherwise.
  */
-int CT_POLICY_EVAL_CTX_set1_cert(CT_POLICY_EVAL_CTX *ctx, X509 *cert);
+int __cdecl CT_POLICY_EVAL_CTX_set1_cert(CT_POLICY_EVAL_CTX *ctx, X509 *cert);
 
 /* Gets the issuer of the aforementioned certificate */
-X509* CT_POLICY_EVAL_CTX_get0_issuer(const CT_POLICY_EVAL_CTX *ctx);
+X509* __cdecl CT_POLICY_EVAL_CTX_get0_issuer(const CT_POLICY_EVAL_CTX *ctx);
 
 /*
  * Sets the issuer of the certificate associated with the received SCTs.
  * Increments the reference count of issuer.
  * Returns 1 on success, 0 otherwise.
  */
-int CT_POLICY_EVAL_CTX_set1_issuer(CT_POLICY_EVAL_CTX *ctx, X509 *issuer);
+int __cdecl CT_POLICY_EVAL_CTX_set1_issuer(CT_POLICY_EVAL_CTX *ctx, X509 *issuer);
 
 /* Gets the CT logs that are trusted sources of SCTs */
-const CTLOG_STORE *CT_POLICY_EVAL_CTX_get0_log_store(const CT_POLICY_EVAL_CTX *ctx);
+const CTLOG_STORE * __cdecl CT_POLICY_EVAL_CTX_get0_log_store(const CT_POLICY_EVAL_CTX *ctx);
 
 /* Sets the log store that is in use. It must outlive the CT_POLICY_EVAL_CTX. */
-void CT_POLICY_EVAL_CTX_set_shared_CTLOG_STORE(CT_POLICY_EVAL_CTX *ctx,
+void __cdecl CT_POLICY_EVAL_CTX_set_shared_CTLOG_STORE(CT_POLICY_EVAL_CTX *ctx,
                                                CTLOG_STORE *log_store);
 
 /*
@@ -104,7 +104,7 @@ void CT_POLICY_EVAL_CTX_set_shared_CTLOG_STORE(CT_POLICY_EVAL_CTX *ctx,
  * current time when checking whether an SCT was issued in the future.
  * Such SCTs will fail validation, as required by RFC6962.
  */
-uint64_t CT_POLICY_EVAL_CTX_get_time(const CT_POLICY_EVAL_CTX *ctx);
+uint64_t __cdecl CT_POLICY_EVAL_CTX_get_time(const CT_POLICY_EVAL_CTX *ctx);
 
 /*
  * Sets the time to evaluate SCTs against, in milliseconds since the Unix epoch.
@@ -112,7 +112,7 @@ uint64_t CT_POLICY_EVAL_CTX_get_time(const CT_POLICY_EVAL_CTX *ctx);
  * been issued in the future. RFC6962 states that "TLS clients MUST reject SCTs
  * whose timestamp is in the future", so an SCT will not validate in this case.
  */
-void CT_POLICY_EVAL_CTX_set_time(CT_POLICY_EVAL_CTX *ctx, uint64_t time_in_ms);
+void __cdecl CT_POLICY_EVAL_CTX_set_time(CT_POLICY_EVAL_CTX *ctx, uint64_t time_in_ms);
 
 /*****************
  * SCT functions *
@@ -122,13 +122,13 @@ void CT_POLICY_EVAL_CTX_set_time(CT_POLICY_EVAL_CTX *ctx, uint64_t time_in_ms);
  * Creates a new, blank SCT.
  * The caller is responsible for calling SCT_free when finished with the SCT.
  */
-SCT *SCT_new(void);
+SCT * __cdecl SCT_new(void);
 
 /*
  * Creates a new SCT from some base64-encoded strings.
  * The caller is responsible for calling SCT_free when finished with the SCT.
  */
-SCT *SCT_new_from_base64(unsigned char version,
+SCT * __cdecl SCT_new_from_base64(unsigned char version,
                          const char *logid_base64,
                          ct_log_entry_type_t entry_type,
                          uint64_t timestamp,
@@ -138,74 +138,74 @@ SCT *SCT_new_from_base64(unsigned char version,
 /*
  * Frees the SCT and the underlying data structures.
  */
-void SCT_free(SCT *sct);
+void __cdecl SCT_free(SCT *sct);
 
 /*
  * Free a stack of SCTs, and the underlying SCTs themselves.
  * Intended to be compatible with X509V3_EXT_FREE.
  */
-void SCT_LIST_free(STACK_OF(SCT) *a);
+void __cdecl SCT_LIST_free(STACK_OF(SCT) *a);
 
 /*
  * Returns the version of the SCT.
  */
-sct_version_t SCT_get_version(const SCT *sct);
+sct_version_t __cdecl SCT_get_version(const SCT *sct);
 
 /*
  * Set the version of an SCT.
  * Returns 1 on success, 0 if the version is unrecognized.
  */
-__owur int SCT_set_version(SCT *sct, sct_version_t version);
+__owur int __cdecl SCT_set_version(SCT *sct, sct_version_t version);
 
 /*
  * Returns the log entry type of the SCT.
  */
-ct_log_entry_type_t SCT_get_log_entry_type(const SCT *sct);
+ct_log_entry_type_t __cdecl SCT_get_log_entry_type(const SCT *sct);
 
 /*
  * Set the log entry type of an SCT.
  * Returns 1 on success, 0 otherwise.
  */
-__owur int SCT_set_log_entry_type(SCT *sct, ct_log_entry_type_t entry_type);
+__owur int __cdecl SCT_set_log_entry_type(SCT *sct, ct_log_entry_type_t entry_type);
 
 /*
  * Gets the ID of the log that an SCT came from.
  * Ownership of the log ID remains with the SCT.
  * Returns the length of the log ID.
  */
-size_t SCT_get0_log_id(const SCT *sct, unsigned char **log_id);
+size_t __cdecl SCT_get0_log_id(const SCT *sct, unsigned char **log_id);
 
 /*
  * Set the log ID of an SCT to point directly to the *log_id specified.
  * The SCT takes ownership of the specified pointer.
  * Returns 1 on success, 0 otherwise.
  */
-__owur int SCT_set0_log_id(SCT *sct, unsigned char *log_id, size_t log_id_len);
+__owur int __cdecl SCT_set0_log_id(SCT *sct, unsigned char *log_id, size_t log_id_len);
 
 /*
  * Set the log ID of an SCT.
  * This makes a copy of the log_id.
  * Returns 1 on success, 0 otherwise.
  */
-__owur int SCT_set1_log_id(SCT *sct, const unsigned char *log_id,
+__owur int __cdecl SCT_set1_log_id(SCT *sct, const unsigned char *log_id,
                            size_t log_id_len);
 
 /*
  * Returns the timestamp for the SCT (epoch time in milliseconds).
  */
-uint64_t SCT_get_timestamp(const SCT *sct);
+uint64_t __cdecl SCT_get_timestamp(const SCT *sct);
 
 /*
  * Set the timestamp of an SCT (epoch time in milliseconds).
  */
-void SCT_set_timestamp(SCT *sct, uint64_t timestamp);
+void __cdecl SCT_set_timestamp(SCT *sct, uint64_t timestamp);
 
 /*
  * Return the NID for the signature used by the SCT.
  * For CT v1, this will be either NID_sha256WithRSAEncryption or
  * NID_ecdsa_with_SHA256 (or NID_undef if incorrect/unset).
  */
-int SCT_get_signature_nid(const SCT *sct);
+int __cdecl SCT_get_signature_nid(const SCT *sct);
 
 /*
  * Set the signature type of an SCT
@@ -213,27 +213,27 @@ int SCT_get_signature_nid(const SCT *sct);
  * NID_ecdsa_with_SHA256.
  * Returns 1 on success, 0 otherwise.
  */
-__owur int SCT_set_signature_nid(SCT *sct, int nid);
+__owur int __cdecl SCT_set_signature_nid(SCT *sct, int nid);
 
 /*
  * Set *ext to point to the extension data for the SCT. ext must not be NULL.
  * The SCT retains ownership of this pointer.
  * Returns length of the data pointed to.
  */
-size_t SCT_get0_extensions(const SCT *sct, unsigned char **ext);
+size_t __cdecl SCT_get0_extensions(const SCT *sct, unsigned char **ext);
 
 /*
  * Set the extensions of an SCT to point directly to the *ext specified.
  * The SCT takes ownership of the specified pointer.
  */
-void SCT_set0_extensions(SCT *sct, unsigned char *ext, size_t ext_len);
+void __cdecl SCT_set0_extensions(SCT *sct, unsigned char *ext, size_t ext_len);
 
 /*
  * Set the extensions of an SCT.
  * This takes a copy of the ext.
  * Returns 1 on success, 0 otherwise.
  */
-__owur int SCT_set1_extensions(SCT *sct, const unsigned char *ext,
+__owur int __cdecl SCT_set1_extensions(SCT *sct, const unsigned char *ext,
                                size_t ext_len);
 
 /*
@@ -241,36 +241,36 @@ __owur int SCT_set1_extensions(SCT *sct, const unsigned char *ext,
  * The SCT retains ownership of this pointer.
  * Returns length of the data pointed to.
  */
-size_t SCT_get0_signature(const SCT *sct, unsigned char **sig);
+size_t __cdecl SCT_get0_signature(const SCT *sct, unsigned char **sig);
 
 /*
  * Set the signature of an SCT to point directly to the *sig specified.
  * The SCT takes ownership of the specified pointer.
  */
-void SCT_set0_signature(SCT *sct, unsigned char *sig, size_t sig_len);
+void __cdecl SCT_set0_signature(SCT *sct, unsigned char *sig, size_t sig_len);
 
 /*
  * Set the signature of an SCT to be a copy of the *sig specified.
  * Returns 1 on success, 0 otherwise.
  */
-__owur int SCT_set1_signature(SCT *sct, const unsigned char *sig,
+__owur int __cdecl SCT_set1_signature(SCT *sct, const unsigned char *sig,
                               size_t sig_len);
 
 /*
  * The origin of this SCT, e.g. TLS extension, OCSP response, etc.
  */
-sct_source_t SCT_get_source(const SCT *sct);
+sct_source_t __cdecl SCT_get_source(const SCT *sct);
 
 /*
  * Set the origin of this SCT, e.g. TLS extension, OCSP response, etc.
  * Returns 1 on success, 0 otherwise.
  */
-__owur int SCT_set_source(SCT *sct, sct_source_t source);
+__owur int __cdecl SCT_set_source(SCT *sct, sct_source_t source);
 
 /*
  * Returns a text string describing the validation status of |sct|.
  */
-const char *SCT_validation_status_string(const SCT *sct);
+const char * __cdecl SCT_validation_status_string(const SCT *sct);
 
 /*
  * Pretty-prints an |sct| to |out|.
@@ -278,7 +278,7 @@ const char *SCT_validation_status_string(const SCT *sct);
  * If |logs| is not NULL, it will be used to lookup the CT log that the SCT came
  * from, so that the log name can be printed.
  */
-void SCT_print(const SCT *sct, BIO *out, int indent, const CTLOG_STORE *logs);
+void __cdecl SCT_print(const SCT *sct, BIO *out, int indent, const CTLOG_STORE *logs);
 
 /*
  * Pretty-prints an |sct_list| to |out|.
@@ -287,14 +287,14 @@ void SCT_print(const SCT *sct, BIO *out, int indent, const CTLOG_STORE *logs);
  * If |logs| is not NULL, it will be used to lookup the CT log that each SCT
  * came from, so that the log names can be printed.
  */
-void SCT_LIST_print(const STACK_OF(SCT) *sct_list, BIO *out, int indent,
+void __cdecl SCT_LIST_print(const STACK_OF(SCT) *sct_list, BIO *out, int indent,
                     const char *separator, const CTLOG_STORE *logs);
 
 /*
  * Gets the last result of validating this SCT.
  * If it has not been validated yet, returns SCT_VALIDATION_STATUS_NOT_SET.
  */
-sct_validation_status_t SCT_get_validation_status(const SCT *sct);
+sct_validation_status_t __cdecl SCT_get_validation_status(const SCT *sct);
 
 /*
  * Validates the given SCT with the provided context.
@@ -303,7 +303,7 @@ sct_validation_status_t SCT_get_validation_status(const SCT *sct);
  * Returns 0 if the SCT is invalid or could not be verified.
  * Returns -1 if an error occurs.
  */
-__owur int SCT_validate(SCT *sct, const CT_POLICY_EVAL_CTX *ctx);
+__owur int __cdecl SCT_validate(SCT *sct, const CT_POLICY_EVAL_CTX *ctx);
 
 /*
  * Validates the given list of SCTs with the provided context.
@@ -312,7 +312,7 @@ __owur int SCT_validate(SCT *sct, const CT_POLICY_EVAL_CTX *ctx);
  * Returns 0 if at least one SCT is invalid or could not be verified.
  * Returns a negative integer if an error occurs.
  */
-__owur int SCT_LIST_validate(const STACK_OF(SCT) *scts,
+__owur int __cdecl SCT_LIST_validate(const STACK_OF(SCT) *scts,
                              CT_POLICY_EVAL_CTX *ctx);
 
 
@@ -332,7 +332,7 @@ __owur int SCT_LIST_validate(const STACK_OF(SCT) *scts,
  * Returns < 0 on error, >= 0 indicating bytes written (or would have been)
  * on success.
  */
-__owur int i2o_SCT_LIST(const STACK_OF(SCT) *a, unsigned char **pp);
+__owur int __cdecl i2o_SCT_LIST(const STACK_OF(SCT) *a, unsigned char **pp);
 
 /*
  * Convert TLS format SCT list to a stack of SCTs.
@@ -344,7 +344,7 @@ __owur int i2o_SCT_LIST(const STACK_OF(SCT) *a, unsigned char **pp);
  * Upon failure, a NULL pointer will be returned, and the position of "*pp" is
  * not defined.
  */
-STACK_OF(SCT) *o2i_SCT_LIST(STACK_OF(SCT) **a, const unsigned char **pp,
+STACK_OF(SCT) * __cdecl o2i_SCT_LIST(STACK_OF(SCT) **a, const unsigned char **pp,
                             size_t len);
 
 /*
@@ -359,7 +359,7 @@ STACK_OF(SCT) *o2i_SCT_LIST(STACK_OF(SCT) **a, const unsigned char **pp,
  * Returns < 0 on error, >= 0 indicating bytes written (or would have been)
  * on success.
  */
-__owur int i2d_SCT_LIST(const STACK_OF(SCT) *a, unsigned char **pp);
+__owur int __cdecl i2d_SCT_LIST(const STACK_OF(SCT) *a, unsigned char **pp);
 
 /*
  * Parses an SCT list in DER format and returns it.
@@ -371,7 +371,7 @@ __owur int i2d_SCT_LIST(const STACK_OF(SCT) *a, unsigned char **pp);
  * Upon failure, a NULL pointer will be returned, and the position of "*pp" is
  * not defined.
  */
-STACK_OF(SCT) *d2i_SCT_LIST(STACK_OF(SCT) **a, const unsigned char **pp,
+STACK_OF(SCT) * __cdecl d2i_SCT_LIST(STACK_OF(SCT) **a, const unsigned char **pp,
                             long len);
 
 /*
@@ -383,7 +383,7 @@ STACK_OF(SCT) *d2i_SCT_LIST(STACK_OF(SCT) **a, const unsigned char **pp,
  * to it.
  * The length of the SCT in TLS format will be returned.
  */
-__owur int i2o_SCT(const SCT *sct, unsigned char **out);
+__owur int __cdecl i2o_SCT(const SCT *sct, unsigned char **out);
 
 /*
  * Parses an SCT in TLS format and returns it.
@@ -396,7 +396,7 @@ __owur int i2o_SCT(const SCT *sct, unsigned char **out);
  * If the SCT is an unsupported version, only the SCT's 'sct' and 'sct_len'
  * fields will be populated (with |in| and |len| respectively).
  */
-SCT *o2i_SCT(SCT **psct, const unsigned char **in, size_t len);
+SCT * __cdecl o2i_SCT(SCT **psct, const unsigned char **in, size_t len);
 
 /********************
  * CT log functions *
@@ -408,7 +408,7 @@ SCT *o2i_SCT(SCT **psct, const unsigned char **in, size_t len);
  * Returns NULL if malloc fails or if |public_key| cannot be converted to DER.
  * Should be deleted by the caller using CTLOG_free when no longer needed.
  */
-CTLOG *CTLOG_new(EVP_PKEY *public_key, const char *name);
+CTLOG * __cdecl CTLOG_new(EVP_PKEY *public_key, const char *name);
 
 /*
  * Creates a new CTLOG instance with the base64-encoded SubjectPublicKeyInfo DER
@@ -416,21 +416,21 @@ CTLOG *CTLOG_new(EVP_PKEY *public_key, const char *name);
  * Returns 1 on success, 0 on failure.
  * Should be deleted by the caller using CTLOG_free when no longer needed.
  */
-int CTLOG_new_from_base64(CTLOG ** ct_log,
+int __cdecl CTLOG_new_from_base64(CTLOG ** ct_log,
                           const char *pkey_base64, const char *name);
 
 /*
  * Deletes a CT log instance and its fields.
  */
-void CTLOG_free(CTLOG *log);
+void __cdecl CTLOG_free(CTLOG *log);
 
 /* Gets the name of the CT log */
-const char *CTLOG_get0_name(const CTLOG *log);
+const char * __cdecl CTLOG_get0_name(const CTLOG *log);
 /* Gets the ID of the CT log */
-void CTLOG_get0_log_id(const CTLOG *log, const uint8_t **log_id,
+void __cdecl CTLOG_get0_log_id(const CTLOG *log, const uint8_t **log_id,
                        size_t *log_id_len);
 /* Gets the public key of the CT log */
-EVP_PKEY *CTLOG_get0_public_key(const CTLOG *log);
+EVP_PKEY * __cdecl CTLOG_get0_public_key(const CTLOG *log);
 
 /**************************
  * CT log store functions *
@@ -440,18 +440,18 @@ EVP_PKEY *CTLOG_get0_public_key(const CTLOG *log);
  * Creates a new CT log store.
  * Should be deleted by the caller using CTLOG_STORE_free when no longer needed.
  */
-CTLOG_STORE *CTLOG_STORE_new(void);
+CTLOG_STORE * __cdecl CTLOG_STORE_new(void);
 
 /*
  * Deletes a CT log store and all of the CT log instances held within.
  */
-void CTLOG_STORE_free(CTLOG_STORE *store);
+void __cdecl CTLOG_STORE_free(CTLOG_STORE *store);
 
 /*
  * Finds a CT log in the store based on its log ID.
  * Returns the CT log, or NULL if no match is found.
  */
-const CTLOG *CTLOG_STORE_get0_log_by_id(const CTLOG_STORE *store,
+const CTLOG * __cdecl CTLOG_STORE_get0_log_by_id(const CTLOG_STORE *store,
                                         const uint8_t *log_id,
                                         size_t log_id_len);
 
@@ -459,7 +459,7 @@ const CTLOG *CTLOG_STORE_get0_log_by_id(const CTLOG_STORE *store,
  * Loads a CT log list into a |store| from a |file|.
  * Returns 1 if loading is successful, or 0 otherwise.
  */
-__owur int CTLOG_STORE_load_file(CTLOG_STORE *store, const char *file);
+__owur int __cdecl CTLOG_STORE_load_file(CTLOG_STORE *store, const char *file);
 
 /*
  * Loads the default CT log list into a |store|.
@@ -467,7 +467,7 @@ __owur int CTLOG_STORE_load_file(CTLOG_STORE *store, const char *file);
  * consulted to find the default file.
  * Returns 1 if loading is successful, or 0 otherwise.
  */
-__owur int CTLOG_STORE_load_default_file(CTLOG_STORE *store);
+__owur int __cdecl CTLOG_STORE_load_default_file(CTLOG_STORE *store);
 
 #  ifdef  __cplusplus
 }
diff --git a/include/openssl/cterr.h b/include/openssl/cterr.h
index feb7bc5663..a5cfb116bc 100644
--- a/include/openssl/cterr.h
+++ b/include/openssl/cterr.h
@@ -22,7 +22,7 @@
 #  ifdef  __cplusplus
 extern "C"
 #  endif
-int ERR_load_CT_strings(void);
+int __cdecl ERR_load_CT_strings(void);
 
 /*
  * CT function codes.
diff --git a/include/openssl/des.h b/include/openssl/des.h
index be4abbdfd0..e684a43b34 100644
--- a/include/openssl/des.h
+++ b/include/openssl/des.h
@@ -66,28 +66,28 @@ typedef struct DES_ks {
 OPENSSL_DECLARE_GLOBAL(int, DES_check_key); /* defaults to false */
 # define DES_check_key OPENSSL_GLOBAL_REF(DES_check_key)
 
-const char *DES_options(void);
-void DES_ecb3_encrypt(const_DES_cblock *input, DES_cblock *output,
+const char * __cdecl DES_options(void);
+void __cdecl DES_ecb3_encrypt(const_DES_cblock *input, DES_cblock *output,
                       DES_key_schedule *ks1, DES_key_schedule *ks2,
                       DES_key_schedule *ks3, int enc);
-DES_LONG DES_cbc_cksum(const unsigned char *input, DES_cblock *output,
+DES_LONG __cdecl DES_cbc_cksum(const unsigned char *input, DES_cblock *output,
                        long length, DES_key_schedule *schedule,
                        const_DES_cblock *ivec);
 /* DES_cbc_encrypt does not update the IV!  Use DES_ncbc_encrypt instead. */
-void DES_cbc_encrypt(const unsigned char *input, unsigned char *output,
+void __cdecl DES_cbc_encrypt(const unsigned char *input, unsigned char *output,
                      long length, DES_key_schedule *schedule,
                      DES_cblock *ivec, int enc);
-void DES_ncbc_encrypt(const unsigned char *input, unsigned char *output,
+void __cdecl DES_ncbc_encrypt(const unsigned char *input, unsigned char *output,
                       long length, DES_key_schedule *schedule,
                       DES_cblock *ivec, int enc);
-void DES_xcbc_encrypt(const unsigned char *input, unsigned char *output,
+void __cdecl DES_xcbc_encrypt(const unsigned char *input, unsigned char *output,
                       long length, DES_key_schedule *schedule,
                       DES_cblock *ivec, const_DES_cblock *inw,
                       const_DES_cblock *outw, int enc);
-void DES_cfb_encrypt(const unsigned char *in, unsigned char *out, int numbits,
+void __cdecl DES_cfb_encrypt(const unsigned char *in, unsigned char *out, int numbits,
                      long length, DES_key_schedule *schedule,
                      DES_cblock *ivec, int enc);
-void DES_ecb_encrypt(const_DES_cblock *input, DES_cblock *output,
+void __cdecl DES_ecb_encrypt(const_DES_cblock *input, DES_cblock *output,
                      DES_key_schedule *ks, int enc);
 
 /*
@@ -100,7 +100,7 @@ void DES_ecb_encrypt(const_DES_cblock *input, DES_cblock *output,
  * long's and ks is the DES_key_schedule to use.  enc, is non zero specifies
  * encryption, zero if decryption.
  */
-void DES_encrypt1(DES_LONG *data, DES_key_schedule *ks, int enc);
+void __cdecl DES_encrypt1(DES_LONG *data, DES_key_schedule *ks, int enc);
 
 /*
  * This functions is the same as DES_encrypt1() except that the DES initial
@@ -110,57 +110,57 @@ void DES_encrypt1(DES_LONG *data, DES_key_schedule *ks, int enc);
  * DES_encrypt2() DES_encrypt2() FP() is the same as DES_encrypt1()
  * DES_encrypt1() DES_encrypt1() except faster :-).
  */
-void DES_encrypt2(DES_LONG *data, DES_key_schedule *ks, int enc);
+void __cdecl DES_encrypt2(DES_LONG *data, DES_key_schedule *ks, int enc);
 
-void DES_encrypt3(DES_LONG *data, DES_key_schedule *ks1,
+void __cdecl DES_encrypt3(DES_LONG *data, DES_key_schedule *ks1,
                   DES_key_schedule *ks2, DES_key_schedule *ks3);
-void DES_decrypt3(DES_LONG *data, DES_key_schedule *ks1,
+void __cdecl DES_decrypt3(DES_LONG *data, DES_key_schedule *ks1,
                   DES_key_schedule *ks2, DES_key_schedule *ks3);
-void DES_ede3_cbc_encrypt(const unsigned char *input, unsigned char *output,
+void __cdecl DES_ede3_cbc_encrypt(const unsigned char *input, unsigned char *output,
                           long length,
                           DES_key_schedule *ks1, DES_key_schedule *ks2,
                           DES_key_schedule *ks3, DES_cblock *ivec, int enc);
-void DES_ede3_cfb64_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl DES_ede3_cfb64_encrypt(const unsigned char *in, unsigned char *out,
                             long length, DES_key_schedule *ks1,
                             DES_key_schedule *ks2, DES_key_schedule *ks3,
                             DES_cblock *ivec, int *num, int enc);
-void DES_ede3_cfb_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl DES_ede3_cfb_encrypt(const unsigned char *in, unsigned char *out,
                           int numbits, long length, DES_key_schedule *ks1,
                           DES_key_schedule *ks2, DES_key_schedule *ks3,
                           DES_cblock *ivec, int enc);
-void DES_ede3_ofb64_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl DES_ede3_ofb64_encrypt(const unsigned char *in, unsigned char *out,
                             long length, DES_key_schedule *ks1,
                             DES_key_schedule *ks2, DES_key_schedule *ks3,
                             DES_cblock *ivec, int *num);
-char *DES_fcrypt(const char *buf, const char *salt, char *ret);
-char *DES_crypt(const char *buf, const char *salt);
-void DES_ofb_encrypt(const unsigned char *in, unsigned char *out, int numbits,
+char * __cdecl DES_fcrypt(const char *buf, const char *salt, char *ret);
+char * __cdecl DES_crypt(const char *buf, const char *salt);
+void __cdecl DES_ofb_encrypt(const unsigned char *in, unsigned char *out, int numbits,
                      long length, DES_key_schedule *schedule,
                      DES_cblock *ivec);
-void DES_pcbc_encrypt(const unsigned char *input, unsigned char *output,
+void __cdecl DES_pcbc_encrypt(const unsigned char *input, unsigned char *output,
                       long length, DES_key_schedule *schedule,
                       DES_cblock *ivec, int enc);
-DES_LONG DES_quad_cksum(const unsigned char *input, DES_cblock output[],
+DES_LONG __cdecl DES_quad_cksum(const unsigned char *input, DES_cblock output[],
                         long length, int out_count, DES_cblock *seed);
-int DES_random_key(DES_cblock *ret);
-void DES_set_odd_parity(DES_cblock *key);
-int DES_check_key_parity(const_DES_cblock *key);
-int DES_is_weak_key(const_DES_cblock *key);
+int __cdecl DES_random_key(DES_cblock *ret);
+void __cdecl DES_set_odd_parity(DES_cblock *key);
+int __cdecl DES_check_key_parity(const_DES_cblock *key);
+int __cdecl DES_is_weak_key(const_DES_cblock *key);
 /*
  * DES_set_key (= set_key = DES_key_sched = key_sched) calls
  * DES_set_key_checked if global variable DES_check_key is set,
  * DES_set_key_unchecked otherwise.
  */
-int DES_set_key(const_DES_cblock *key, DES_key_schedule *schedule);
-int DES_key_sched(const_DES_cblock *key, DES_key_schedule *schedule);
-int DES_set_key_checked(const_DES_cblock *key, DES_key_schedule *schedule);
-void DES_set_key_unchecked(const_DES_cblock *key, DES_key_schedule *schedule);
-void DES_string_to_key(const char *str, DES_cblock *key);
-void DES_string_to_2keys(const char *str, DES_cblock *key1, DES_cblock *key2);
-void DES_cfb64_encrypt(const unsigned char *in, unsigned char *out,
+int __cdecl DES_set_key(const_DES_cblock *key, DES_key_schedule *schedule);
+int __cdecl DES_key_sched(const_DES_cblock *key, DES_key_schedule *schedule);
+int __cdecl DES_set_key_checked(const_DES_cblock *key, DES_key_schedule *schedule);
+void __cdecl DES_set_key_unchecked(const_DES_cblock *key, DES_key_schedule *schedule);
+void __cdecl DES_string_to_key(const char *str, DES_cblock *key);
+void __cdecl DES_string_to_2keys(const char *str, DES_cblock *key1, DES_cblock *key2);
+void __cdecl DES_cfb64_encrypt(const unsigned char *in, unsigned char *out,
                        long length, DES_key_schedule *schedule,
                        DES_cblock *ivec, int *num, int enc);
-void DES_ofb64_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl DES_ofb64_encrypt(const unsigned char *in, unsigned char *out,
                        long length, DES_key_schedule *schedule,
                        DES_cblock *ivec, int *num);
 
diff --git a/include/openssl/dh.h b/include/openssl/dh.h
index 3527540cdd..1e9e3f84cd 100644
--- a/include/openssl/dh.h
+++ b/include/openssl/dh.h
@@ -112,118 +112,118 @@ DECLARE_ASN1_ITEM(DHparams)
 # define i2d_DHxparams_bio(bp,x) \
     ASN1_i2d_bio_of_const(DH, i2d_DHxparams, bp, x)
 
-DH *DHparams_dup(DH *);
+DH * __cdecl DHparams_dup(DH *);
 
-const DH_METHOD *DH_OpenSSL(void);
+const DH_METHOD * __cdecl DH_OpenSSL(void);
 
-void DH_set_default_method(const DH_METHOD *meth);
-const DH_METHOD *DH_get_default_method(void);
-int DH_set_method(DH *dh, const DH_METHOD *meth);
-DH *DH_new_method(ENGINE *engine);
+void __cdecl DH_set_default_method(const DH_METHOD *meth);
+const DH_METHOD * __cdecl DH_get_default_method(void);
+int __cdecl DH_set_method(DH *dh, const DH_METHOD *meth);
+DH * __cdecl DH_new_method(ENGINE *engine);
 
-DH *DH_new(void);
-void DH_free(DH *dh);
-int DH_up_ref(DH *dh);
-int DH_bits(const DH *dh);
-int DH_size(const DH *dh);
-int DH_security_bits(const DH *dh);
+DH * __cdecl DH_new(void);
+void __cdecl DH_free(DH *dh);
+int __cdecl DH_up_ref(DH *dh);
+int __cdecl DH_bits(const DH *dh);
+int __cdecl DH_size(const DH *dh);
+int __cdecl DH_security_bits(const DH *dh);
 #define DH_get_ex_new_index(l, p, newf, dupf, freef) \
     CRYPTO_get_ex_new_index(CRYPTO_EX_INDEX_DH, l, p, newf, dupf, freef)
-int DH_set_ex_data(DH *d, int idx, void *arg);
-void *DH_get_ex_data(DH *d, int idx);
+int __cdecl DH_set_ex_data(DH *d, int idx, void *arg);
+void * __cdecl DH_get_ex_data(DH *d, int idx);
 
 /* Deprecated version */
 DEPRECATEDIN_0_9_8(DH *DH_generate_parameters(int prime_len, int generator,
-                                              void (*callback) (int, int,
+                                              void (__cdecl *callback) (int, int,
                                                                 void *),
                                               void *cb_arg))
 
 /* New version */
-int DH_generate_parameters_ex(DH *dh, int prime_len, int generator,
+int __cdecl DH_generate_parameters_ex(DH *dh, int prime_len, int generator,
                               BN_GENCB *cb);
 
-int DH_check_params_ex(const DH *dh);
-int DH_check_ex(const DH *dh);
-int DH_check_pub_key_ex(const DH *dh, const BIGNUM *pub_key);
-int DH_check_params(const DH *dh, int *ret);
-int DH_check(const DH *dh, int *codes);
-int DH_check_pub_key(const DH *dh, const BIGNUM *pub_key, int *codes);
-int DH_generate_key(DH *dh);
-int DH_compute_key(unsigned char *key, const BIGNUM *pub_key, DH *dh);
-int DH_compute_key_padded(unsigned char *key, const BIGNUM *pub_key, DH *dh);
-DH *d2i_DHparams(DH **a, const unsigned char **pp, long length);
-int i2d_DHparams(const DH *a, unsigned char **pp);
-DH *d2i_DHxparams(DH **a, const unsigned char **pp, long length);
-int i2d_DHxparams(const DH *a, unsigned char **pp);
+int __cdecl DH_check_params_ex(const DH *dh);
+int __cdecl DH_check_ex(const DH *dh);
+int __cdecl DH_check_pub_key_ex(const DH *dh, const BIGNUM *pub_key);
+int __cdecl DH_check_params(const DH *dh, int *ret);
+int __cdecl DH_check(const DH *dh, int *codes);
+int __cdecl DH_check_pub_key(const DH *dh, const BIGNUM *pub_key, int *codes);
+int __cdecl DH_generate_key(DH *dh);
+int __cdecl DH_compute_key(unsigned char *key, const BIGNUM *pub_key, DH *dh);
+int __cdecl DH_compute_key_padded(unsigned char *key, const BIGNUM *pub_key, DH *dh);
+DH * __cdecl d2i_DHparams(DH **a, const unsigned char **pp, long length);
+int __cdecl i2d_DHparams(const DH *a, unsigned char **pp);
+DH * __cdecl d2i_DHxparams(DH **a, const unsigned char **pp, long length);
+int __cdecl i2d_DHxparams(const DH *a, unsigned char **pp);
 # ifndef OPENSSL_NO_STDIO
-int DHparams_print_fp(FILE *fp, const DH *x);
+int __cdecl DHparams_print_fp(FILE *fp, const DH *x);
 # endif
-int DHparams_print(BIO *bp, const DH *x);
+int __cdecl DHparams_print(BIO *bp, const DH *x);
 
 /* RFC 5114 parameters */
-DH *DH_get_1024_160(void);
-DH *DH_get_2048_224(void);
-DH *DH_get_2048_256(void);
+DH * __cdecl DH_get_1024_160(void);
+DH * __cdecl DH_get_2048_224(void);
+DH * __cdecl DH_get_2048_256(void);
 
 /* Named parameters, currently RFC7919 */
-DH *DH_new_by_nid(int nid);
-int DH_get_nid(const DH *dh);
+DH * __cdecl DH_new_by_nid(int nid);
+int __cdecl DH_get_nid(const DH *dh);
 
 # ifndef OPENSSL_NO_CMS
 /* RFC2631 KDF */
-int DH_KDF_X9_42(unsigned char *out, size_t outlen,
+int __cdecl DH_KDF_X9_42(unsigned char *out, size_t outlen,
                  const unsigned char *Z, size_t Zlen,
                  ASN1_OBJECT *key_oid,
                  const unsigned char *ukm, size_t ukmlen, const EVP_MD *md);
 # endif
 
-void DH_get0_pqg(const DH *dh,
+void __cdecl DH_get0_pqg(const DH *dh,
                  const BIGNUM **p, const BIGNUM **q, const BIGNUM **g);
-int DH_set0_pqg(DH *dh, BIGNUM *p, BIGNUM *q, BIGNUM *g);
-void DH_get0_key(const DH *dh,
+int __cdecl DH_set0_pqg(DH *dh, BIGNUM *p, BIGNUM *q, BIGNUM *g);
+void __cdecl DH_get0_key(const DH *dh,
                  const BIGNUM **pub_key, const BIGNUM **priv_key);
-int DH_set0_key(DH *dh, BIGNUM *pub_key, BIGNUM *priv_key);
-const BIGNUM *DH_get0_p(const DH *dh);
-const BIGNUM *DH_get0_q(const DH *dh);
-const BIGNUM *DH_get0_g(const DH *dh);
-const BIGNUM *DH_get0_priv_key(const DH *dh);
-const BIGNUM *DH_get0_pub_key(const DH *dh);
-void DH_clear_flags(DH *dh, int flags);
-int DH_test_flags(const DH *dh, int flags);
-void DH_set_flags(DH *dh, int flags);
-ENGINE *DH_get0_engine(DH *d);
-long DH_get_length(const DH *dh);
-int DH_set_length(DH *dh, long length);
-
-DH_METHOD *DH_meth_new(const char *name, int flags);
-void DH_meth_free(DH_METHOD *dhm);
-DH_METHOD *DH_meth_dup(const DH_METHOD *dhm);
-const char *DH_meth_get0_name(const DH_METHOD *dhm);
-int DH_meth_set1_name(DH_METHOD *dhm, const char *name);
-int DH_meth_get_flags(const DH_METHOD *dhm);
-int DH_meth_set_flags(DH_METHOD *dhm, int flags);
-void *DH_meth_get0_app_data(const DH_METHOD *dhm);
-int DH_meth_set0_app_data(DH_METHOD *dhm, void *app_data);
-int (*DH_meth_get_generate_key(const DH_METHOD *dhm)) (DH *);
-int DH_meth_set_generate_key(DH_METHOD *dhm, int (*generate_key) (DH *));
-int (*DH_meth_get_compute_key(const DH_METHOD *dhm))
+int __cdecl DH_set0_key(DH *dh, BIGNUM *pub_key, BIGNUM *priv_key);
+const BIGNUM * __cdecl DH_get0_p(const DH *dh);
+const BIGNUM * __cdecl DH_get0_q(const DH *dh);
+const BIGNUM * __cdecl DH_get0_g(const DH *dh);
+const BIGNUM * __cdecl DH_get0_priv_key(const DH *dh);
+const BIGNUM * __cdecl DH_get0_pub_key(const DH *dh);
+void __cdecl DH_clear_flags(DH *dh, int flags);
+int __cdecl DH_test_flags(const DH *dh, int flags);
+void __cdecl DH_set_flags(DH *dh, int flags);
+ENGINE * __cdecl DH_get0_engine(DH *d);
+long __cdecl DH_get_length(const DH *dh);
+int __cdecl DH_set_length(DH *dh, long length);
+
+DH_METHOD * __cdecl DH_meth_new(const char *name, int flags);
+void __cdecl DH_meth_free(DH_METHOD *dhm);
+DH_METHOD * __cdecl DH_meth_dup(const DH_METHOD *dhm);
+const char * __cdecl DH_meth_get0_name(const DH_METHOD *dhm);
+int __cdecl DH_meth_set1_name(DH_METHOD *dhm, const char *name);
+int __cdecl DH_meth_get_flags(const DH_METHOD *dhm);
+int __cdecl DH_meth_set_flags(DH_METHOD *dhm, int flags);
+void * __cdecl DH_meth_get0_app_data(const DH_METHOD *dhm);
+int __cdecl DH_meth_set0_app_data(DH_METHOD *dhm, void *app_data);
+int (__cdecl *DH_meth_get_generate_key(const DH_METHOD *dhm)) (DH *);
+int __cdecl DH_meth_set_generate_key(DH_METHOD *dhm, int (__cdecl *generate_key) (DH *));
+int (__cdecl *DH_meth_get_compute_key(const DH_METHOD *dhm))
         (unsigned char *key, const BIGNUM *pub_key, DH *dh);
-int DH_meth_set_compute_key(DH_METHOD *dhm,
-        int (*compute_key) (unsigned char *key, const BIGNUM *pub_key, DH *dh));
-int (*DH_meth_get_bn_mod_exp(const DH_METHOD *dhm))
+int __cdecl DH_meth_set_compute_key(DH_METHOD *dhm,
+        int (__cdecl *compute_key) (unsigned char *key, const BIGNUM *pub_key, DH *dh));
+int (__cdecl *DH_meth_get_bn_mod_exp(const DH_METHOD *dhm))
     (const DH *, BIGNUM *, const BIGNUM *, const BIGNUM *, const BIGNUM *,
      BN_CTX *, BN_MONT_CTX *);
-int DH_meth_set_bn_mod_exp(DH_METHOD *dhm,
-    int (*bn_mod_exp) (const DH *, BIGNUM *, const BIGNUM *, const BIGNUM *,
+int __cdecl DH_meth_set_bn_mod_exp(DH_METHOD *dhm,
+    int (__cdecl *bn_mod_exp) (const DH *, BIGNUM *, const BIGNUM *, const BIGNUM *,
                        const BIGNUM *, BN_CTX *, BN_MONT_CTX *));
-int (*DH_meth_get_init(const DH_METHOD *dhm))(DH *);
-int DH_meth_set_init(DH_METHOD *dhm, int (*init)(DH *));
-int (*DH_meth_get_finish(const DH_METHOD *dhm)) (DH *);
-int DH_meth_set_finish(DH_METHOD *dhm, int (*finish) (DH *));
-int (*DH_meth_get_generate_params(const DH_METHOD *dhm))
+int (__cdecl *DH_meth_get_init(const DH_METHOD *dhm))(DH *);
+int __cdecl DH_meth_set_init(DH_METHOD *dhm, int (__cdecl *init)(DH *));
+int (__cdecl *DH_meth_get_finish(const DH_METHOD *dhm)) (DH *);
+int __cdecl DH_meth_set_finish(DH_METHOD *dhm, int (__cdecl *finish) (DH *));
+int (__cdecl *DH_meth_get_generate_params(const DH_METHOD *dhm))
         (DH *, int, int, BN_GENCB *);
-int DH_meth_set_generate_params(DH_METHOD *dhm,
-        int (*generate_params) (DH *, int, int, BN_GENCB *));
+int __cdecl DH_meth_set_generate_params(DH_METHOD *dhm,
+        int (__cdecl *generate_params) (DH *, int, int, BN_GENCB *));
 
 
 # define EVP_PKEY_CTX_set_dh_paramgen_prime_len(ctx, len) \
diff --git a/include/openssl/dherr.h b/include/openssl/dherr.h
index 916b3bed0b..7b3098fe06 100644
--- a/include/openssl/dherr.h
+++ b/include/openssl/dherr.h
@@ -22,7 +22,7 @@
 #  ifdef  __cplusplus
 extern "C"
 #  endif
-int ERR_load_DH_strings(void);
+int __cdecl ERR_load_DH_strings(void);
 
 /*
  * DH function codes.
diff --git a/include/openssl/dsa.h b/include/openssl/dsa.h
index 822eff347a..49b17c5350 100644
--- a/include/openssl/dsa.h
+++ b/include/openssl/dsa.h
@@ -71,47 +71,47 @@ typedef struct DSA_SIG_st DSA_SIG;
 # define d2i_DSAparams_bio(bp,x) ASN1_d2i_bio_of(DSA,DSA_new,d2i_DSAparams,bp,x)
 # define i2d_DSAparams_bio(bp,x) ASN1_i2d_bio_of_const(DSA,i2d_DSAparams,bp,x)
 
-DSA *DSAparams_dup(DSA *x);
-DSA_SIG *DSA_SIG_new(void);
-void DSA_SIG_free(DSA_SIG *a);
-int i2d_DSA_SIG(const DSA_SIG *a, unsigned char **pp);
-DSA_SIG *d2i_DSA_SIG(DSA_SIG **v, const unsigned char **pp, long length);
-void DSA_SIG_get0(const DSA_SIG *sig, const BIGNUM **pr, const BIGNUM **ps);
-int DSA_SIG_set0(DSA_SIG *sig, BIGNUM *r, BIGNUM *s);
-
-DSA_SIG *DSA_do_sign(const unsigned char *dgst, int dlen, DSA *dsa);
-int DSA_do_verify(const unsigned char *dgst, int dgst_len,
+DSA * __cdecl DSAparams_dup(DSA *x);
+DSA_SIG * __cdecl DSA_SIG_new(void);
+void __cdecl DSA_SIG_free(DSA_SIG *a);
+int __cdecl i2d_DSA_SIG(const DSA_SIG *a, unsigned char **pp);
+DSA_SIG * __cdecl d2i_DSA_SIG(DSA_SIG **v, const unsigned char **pp, long length);
+void __cdecl DSA_SIG_get0(const DSA_SIG *sig, const BIGNUM **pr, const BIGNUM **ps);
+int __cdecl DSA_SIG_set0(DSA_SIG *sig, BIGNUM *r, BIGNUM *s);
+
+DSA_SIG * __cdecl DSA_do_sign(const unsigned char *dgst, int dlen, DSA *dsa);
+int __cdecl DSA_do_verify(const unsigned char *dgst, int dgst_len,
                   DSA_SIG *sig, DSA *dsa);
 
-const DSA_METHOD *DSA_OpenSSL(void);
+const DSA_METHOD * __cdecl DSA_OpenSSL(void);
 
-void DSA_set_default_method(const DSA_METHOD *);
-const DSA_METHOD *DSA_get_default_method(void);
-int DSA_set_method(DSA *dsa, const DSA_METHOD *);
-const DSA_METHOD *DSA_get_method(DSA *d);
+void __cdecl DSA_set_default_method(const DSA_METHOD *);
+const DSA_METHOD * __cdecl DSA_get_default_method(void);
+int __cdecl DSA_set_method(DSA *dsa, const DSA_METHOD *);
+const DSA_METHOD * __cdecl DSA_get_method(DSA *d);
 
-DSA *DSA_new(void);
-DSA *DSA_new_method(ENGINE *engine);
-void DSA_free(DSA *r);
+DSA * __cdecl DSA_new(void);
+DSA * __cdecl DSA_new_method(ENGINE *engine);
+void __cdecl DSA_free(DSA *r);
 /* "up" the DSA object's reference count */
-int DSA_up_ref(DSA *r);
-int DSA_size(const DSA *);
-int DSA_bits(const DSA *d);
-int DSA_security_bits(const DSA *d);
+int __cdecl DSA_up_ref(DSA *r);
+int __cdecl DSA_size(const DSA *);
+int __cdecl DSA_bits(const DSA *d);
+int __cdecl DSA_security_bits(const DSA *d);
         /* next 4 return -1 on error */
-DEPRECATEDIN_1_2_0(int DSA_sign_setup(DSA *dsa, BN_CTX *ctx_in, BIGNUM **kinvp, BIGNUM **rp))
-int DSA_sign(int type, const unsigned char *dgst, int dlen,
+DEPRECATEDIN_1_2_0(int __cdecl DSA_sign_setup(DSA *dsa, BN_CTX *ctx_in, BIGNUM **kinvp, BIGNUM **rp))
+int __cdecl DSA_sign(int type, const unsigned char *dgst, int dlen,
              unsigned char *sig, unsigned int *siglen, DSA *dsa);
-int DSA_verify(int type, const unsigned char *dgst, int dgst_len,
+int __cdecl DSA_verify(int type, const unsigned char *dgst, int dgst_len,
                const unsigned char *sigbuf, int siglen, DSA *dsa);
 #define DSA_get_ex_new_index(l, p, newf, dupf, freef) \
     CRYPTO_get_ex_new_index(CRYPTO_EX_INDEX_DSA, l, p, newf, dupf, freef)
-int DSA_set_ex_data(DSA *d, int idx, void *arg);
-void *DSA_get_ex_data(DSA *d, int idx);
+int __cdecl DSA_set_ex_data(DSA *d, int idx, void *arg);
+void * __cdecl DSA_get_ex_data(DSA *d, int idx);
 
-DSA *d2i_DSAPublicKey(DSA **a, const unsigned char **pp, long length);
-DSA *d2i_DSAPrivateKey(DSA **a, const unsigned char **pp, long length);
-DSA *d2i_DSAparams(DSA **a, const unsigned char **pp, long length);
+DSA * __cdecl d2i_DSAPublicKey(DSA **a, const unsigned char **pp, long length);
+DSA * __cdecl d2i_DSAPrivateKey(DSA **a, const unsigned char **pp, long length);
+DSA * __cdecl d2i_DSAparams(DSA **a, const unsigned char **pp, long length);
 
 /* Deprecated version */
 DEPRECATEDIN_0_9_8(DSA *DSA_generate_parameters(int bits,
@@ -119,26 +119,26 @@ DEPRECATEDIN_0_9_8(DSA *DSA_generate_parameters(int bits,
                                                 int seed_len,
                                                 int *counter_ret,
                                                 unsigned long *h_ret, void
-                                                 (*callback) (int, int,
+                                                 (__cdecl *callback) (int, int,
                                                               void *),
                                                 void *cb_arg))
 
 /* New version */
-int DSA_generate_parameters_ex(DSA *dsa, int bits,
+int __cdecl DSA_generate_parameters_ex(DSA *dsa, int bits,
                                const unsigned char *seed, int seed_len,
                                int *counter_ret, unsigned long *h_ret,
                                BN_GENCB *cb);
 
-int DSA_generate_key(DSA *a);
-int i2d_DSAPublicKey(const DSA *a, unsigned char **pp);
-int i2d_DSAPrivateKey(const DSA *a, unsigned char **pp);
-int i2d_DSAparams(const DSA *a, unsigned char **pp);
+int __cdecl DSA_generate_key(DSA *a);
+int __cdecl i2d_DSAPublicKey(const DSA *a, unsigned char **pp);
+int __cdecl i2d_DSAPrivateKey(const DSA *a, unsigned char **pp);
+int __cdecl i2d_DSAparams(const DSA *a, unsigned char **pp);
 
-int DSAparams_print(BIO *bp, const DSA *x);
-int DSA_print(BIO *bp, const DSA *x, int off);
+int __cdecl DSAparams_print(BIO *bp, const DSA *x);
+int __cdecl DSA_print(BIO *bp, const DSA *x, int off);
 # ifndef OPENSSL_NO_STDIO
-int DSAparams_print_fp(FILE *fp, const DSA *x);
-int DSA_print_fp(FILE *bp, const DSA *x, int off);
+int __cdecl DSAparams_print_fp(FILE *fp, const DSA *x);
+int __cdecl DSA_print_fp(FILE *bp, const DSA *x, int off);
 # endif
 
 # define DSS_prime_checks 64
@@ -156,7 +156,7 @@ int DSA_print_fp(FILE *bp, const DSA *x, int off);
  * Convert DSA structure (key or just parameters) into DH structure (be
  * careful to avoid small subgroup attacks when using this!)
  */
-DH *DSA_dup_DH(const DSA *r);
+DH * __cdecl DSA_dup_DH(const DSA *r);
 # endif
 
 # define EVP_PKEY_CTX_set_dsa_paramgen_bits(ctx, nbits) \
@@ -167,68 +167,68 @@ DH *DSA_dup_DH(const DSA *r);
 # define EVP_PKEY_CTRL_DSA_PARAMGEN_Q_BITS       (EVP_PKEY_ALG_CTRL + 2)
 # define EVP_PKEY_CTRL_DSA_PARAMGEN_MD           (EVP_PKEY_ALG_CTRL + 3)
 
-void DSA_get0_pqg(const DSA *d,
+void __cdecl DSA_get0_pqg(const DSA *d,
                   const BIGNUM **p, const BIGNUM **q, const BIGNUM **g);
-int DSA_set0_pqg(DSA *d, BIGNUM *p, BIGNUM *q, BIGNUM *g);
-void DSA_get0_key(const DSA *d,
+int __cdecl DSA_set0_pqg(DSA *d, BIGNUM *p, BIGNUM *q, BIGNUM *g);
+void __cdecl DSA_get0_key(const DSA *d,
                   const BIGNUM **pub_key, const BIGNUM **priv_key);
-int DSA_set0_key(DSA *d, BIGNUM *pub_key, BIGNUM *priv_key);
-const BIGNUM *DSA_get0_p(const DSA *d);
-const BIGNUM *DSA_get0_q(const DSA *d);
-const BIGNUM *DSA_get0_g(const DSA *d);
-const BIGNUM *DSA_get0_pub_key(const DSA *d);
-const BIGNUM *DSA_get0_priv_key(const DSA *d);
-void DSA_clear_flags(DSA *d, int flags);
-int DSA_test_flags(const DSA *d, int flags);
-void DSA_set_flags(DSA *d, int flags);
-ENGINE *DSA_get0_engine(DSA *d);
-
-DSA_METHOD *DSA_meth_new(const char *name, int flags);
-void DSA_meth_free(DSA_METHOD *dsam);
-DSA_METHOD *DSA_meth_dup(const DSA_METHOD *dsam);
-const char *DSA_meth_get0_name(const DSA_METHOD *dsam);
-int DSA_meth_set1_name(DSA_METHOD *dsam, const char *name);
-int DSA_meth_get_flags(const DSA_METHOD *dsam);
-int DSA_meth_set_flags(DSA_METHOD *dsam, int flags);
-void *DSA_meth_get0_app_data(const DSA_METHOD *dsam);
-int DSA_meth_set0_app_data(DSA_METHOD *dsam, void *app_data);
-DSA_SIG *(*DSA_meth_get_sign(const DSA_METHOD *dsam))
+int __cdecl DSA_set0_key(DSA *d, BIGNUM *pub_key, BIGNUM *priv_key);
+const BIGNUM * __cdecl DSA_get0_p(const DSA *d);
+const BIGNUM * __cdecl DSA_get0_q(const DSA *d);
+const BIGNUM * __cdecl DSA_get0_g(const DSA *d);
+const BIGNUM * __cdecl DSA_get0_pub_key(const DSA *d);
+const BIGNUM * __cdecl DSA_get0_priv_key(const DSA *d);
+void __cdecl DSA_clear_flags(DSA *d, int flags);
+int __cdecl DSA_test_flags(const DSA *d, int flags);
+void __cdecl DSA_set_flags(DSA *d, int flags);
+ENGINE * __cdecl DSA_get0_engine(DSA *d);
+
+DSA_METHOD * __cdecl DSA_meth_new(const char *name, int flags);
+void __cdecl DSA_meth_free(DSA_METHOD *dsam);
+DSA_METHOD * __cdecl DSA_meth_dup(const DSA_METHOD *dsam);
+const char * __cdecl DSA_meth_get0_name(const DSA_METHOD *dsam);
+int __cdecl DSA_meth_set1_name(DSA_METHOD *dsam, const char *name);
+int __cdecl DSA_meth_get_flags(const DSA_METHOD *dsam);
+int __cdecl DSA_meth_set_flags(DSA_METHOD *dsam, int flags);
+void * __cdecl DSA_meth_get0_app_data(const DSA_METHOD *dsam);
+int __cdecl DSA_meth_set0_app_data(DSA_METHOD *dsam, void *app_data);
+DSA_SIG *(__cdecl *DSA_meth_get_sign(const DSA_METHOD *dsam))
         (const unsigned char *, int, DSA *);
-int DSA_meth_set_sign(DSA_METHOD *dsam,
-                       DSA_SIG *(*sign) (const unsigned char *, int, DSA *));
-int (*DSA_meth_get_sign_setup(const DSA_METHOD *dsam))
+int __cdecl DSA_meth_set_sign(DSA_METHOD *dsam,
+                       DSA_SIG *(__cdecl *sign) (const unsigned char *, int, DSA *));
+int (__cdecl *DSA_meth_get_sign_setup(const DSA_METHOD *dsam))
         (DSA *, BN_CTX *, BIGNUM **, BIGNUM **);
-int DSA_meth_set_sign_setup(DSA_METHOD *dsam,
-        int (*sign_setup) (DSA *, BN_CTX *, BIGNUM **, BIGNUM **));
-int (*DSA_meth_get_verify(const DSA_METHOD *dsam))
+int __cdecl DSA_meth_set_sign_setup(DSA_METHOD *dsam,
+        int (__cdecl *sign_setup) (DSA *, BN_CTX *, BIGNUM **, BIGNUM **));
+int (__cdecl *DSA_meth_get_verify(const DSA_METHOD *dsam))
         (const unsigned char *, int, DSA_SIG *, DSA *);
-int DSA_meth_set_verify(DSA_METHOD *dsam,
-    int (*verify) (const unsigned char *, int, DSA_SIG *, DSA *));
-int (*DSA_meth_get_mod_exp(const DSA_METHOD *dsam))
+int __cdecl DSA_meth_set_verify(DSA_METHOD *dsam,
+    int (__cdecl *verify) (const unsigned char *, int, DSA_SIG *, DSA *));
+int (__cdecl *DSA_meth_get_mod_exp(const DSA_METHOD *dsam))
         (DSA *, BIGNUM *, const BIGNUM *, const BIGNUM *, const BIGNUM *,
          const BIGNUM *, const BIGNUM *, BN_CTX *, BN_MONT_CTX *);
-int DSA_meth_set_mod_exp(DSA_METHOD *dsam,
-    int (*mod_exp) (DSA *, BIGNUM *, const BIGNUM *, const BIGNUM *,
+int __cdecl DSA_meth_set_mod_exp(DSA_METHOD *dsam,
+    int (__cdecl *mod_exp) (DSA *, BIGNUM *, const BIGNUM *, const BIGNUM *,
                     const BIGNUM *, const BIGNUM *, const BIGNUM *, BN_CTX *,
                     BN_MONT_CTX *));
-int (*DSA_meth_get_bn_mod_exp(const DSA_METHOD *dsam))
+int (__cdecl *DSA_meth_get_bn_mod_exp(const DSA_METHOD *dsam))
     (DSA *, BIGNUM *, const BIGNUM *, const BIGNUM *, const BIGNUM *,
      BN_CTX *, BN_MONT_CTX *);
-int DSA_meth_set_bn_mod_exp(DSA_METHOD *dsam,
-    int (*bn_mod_exp) (DSA *, BIGNUM *, const BIGNUM *, const BIGNUM *,
+int __cdecl DSA_meth_set_bn_mod_exp(DSA_METHOD *dsam,
+    int (__cdecl *bn_mod_exp) (DSA *, BIGNUM *, const BIGNUM *, const BIGNUM *,
                        const BIGNUM *, BN_CTX *, BN_MONT_CTX *));
-int (*DSA_meth_get_init(const DSA_METHOD *dsam))(DSA *);
-int DSA_meth_set_init(DSA_METHOD *dsam, int (*init)(DSA *));
-int (*DSA_meth_get_finish(const DSA_METHOD *dsam)) (DSA *);
-int DSA_meth_set_finish(DSA_METHOD *dsam, int (*finish) (DSA *));
-int (*DSA_meth_get_paramgen(const DSA_METHOD *dsam))
+int (__cdecl *DSA_meth_get_init(const DSA_METHOD *dsam))(DSA *);
+int __cdecl DSA_meth_set_init(DSA_METHOD *dsam, int (__cdecl *init)(DSA *));
+int (__cdecl *DSA_meth_get_finish(const DSA_METHOD *dsam)) (DSA *);
+int __cdecl DSA_meth_set_finish(DSA_METHOD *dsam, int (__cdecl *finish) (DSA *));
+int (__cdecl *DSA_meth_get_paramgen(const DSA_METHOD *dsam))
         (DSA *, int, const unsigned char *, int, int *, unsigned long *,
          BN_GENCB *);
-int DSA_meth_set_paramgen(DSA_METHOD *dsam,
-        int (*paramgen) (DSA *, int, const unsigned char *, int, int *,
+int __cdecl DSA_meth_set_paramgen(DSA_METHOD *dsam,
+        int (__cdecl *paramgen) (DSA *, int, const unsigned char *, int, int *,
                          unsigned long *, BN_GENCB *));
-int (*DSA_meth_get_keygen(const DSA_METHOD *dsam)) (DSA *);
-int DSA_meth_set_keygen(DSA_METHOD *dsam, int (*keygen) (DSA *));
+int (__cdecl *DSA_meth_get_keygen(const DSA_METHOD *dsam)) (DSA *);
+int __cdecl DSA_meth_set_keygen(DSA_METHOD *dsam, int (__cdecl *keygen) (DSA *));
 
 
 #  ifdef  __cplusplus
diff --git a/include/openssl/dsaerr.h b/include/openssl/dsaerr.h
index 495a1ac89d..c5e5fd2fe9 100644
--- a/include/openssl/dsaerr.h
+++ b/include/openssl/dsaerr.h
@@ -22,7 +22,7 @@
 #  ifdef  __cplusplus
 extern "C"
 #  endif
-int ERR_load_DSA_strings(void);
+int __cdecl ERR_load_DSA_strings(void);
 
 /*
  * DSA function codes.
diff --git a/include/openssl/ebcdic.h b/include/openssl/ebcdic.h
index aa01285599..c672624cc0 100644
--- a/include/openssl/ebcdic.h
+++ b/include/openssl/ebcdic.h
@@ -24,8 +24,8 @@ extern "C" {
 
 extern const unsigned char os_toascii[256];
 extern const unsigned char os_toebcdic[256];
-void *ebcdic2ascii(void *dest, const void *srce, size_t count);
-void *ascii2ebcdic(void *dest, const void *srce, size_t count);
+void * __cdecl ebcdic2ascii(void *dest, const void *srce, size_t count);
+void * __cdecl ascii2ebcdic(void *dest, const void *srce, size_t count);
 
 #ifdef  __cplusplus
 }
diff --git a/include/openssl/ec.h b/include/openssl/ec.h
index 5af9ebdc7f..1e899652c6 100644
--- a/include/openssl/ec.h
+++ b/include/openssl/ec.h
@@ -55,33 +55,33 @@ typedef struct ec_parameters_st ECPARAMETERS;
  *  optimized methods.
  *  \return  EC_METHOD object
  */
-const EC_METHOD *EC_GFp_simple_method(void);
+const EC_METHOD * __cdecl EC_GFp_simple_method(void);
 
 /** Returns GFp methods using montgomery multiplication.
  *  \return  EC_METHOD object
  */
-const EC_METHOD *EC_GFp_mont_method(void);
+const EC_METHOD * __cdecl EC_GFp_mont_method(void);
 
 /** Returns GFp methods using optimized methods for NIST recommended curves
  *  \return  EC_METHOD object
  */
-const EC_METHOD *EC_GFp_nist_method(void);
+const EC_METHOD * __cdecl EC_GFp_nist_method(void);
 
 # ifndef OPENSSL_NO_EC_NISTP_64_GCC_128
 /** Returns 64-bit optimized methods for nistp224
  *  \return  EC_METHOD object
  */
-const EC_METHOD *EC_GFp_nistp224_method(void);
+const EC_METHOD * __cdecl EC_GFp_nistp224_method(void);
 
 /** Returns 64-bit optimized methods for nistp256
  *  \return  EC_METHOD object
  */
-const EC_METHOD *EC_GFp_nistp256_method(void);
+const EC_METHOD * __cdecl EC_GFp_nistp256_method(void);
 
 /** Returns 64-bit optimized methods for nistp521
  *  \return  EC_METHOD object
  */
-const EC_METHOD *EC_GFp_nistp521_method(void);
+const EC_METHOD * __cdecl EC_GFp_nistp521_method(void);
 # endif
 
 # ifndef OPENSSL_NO_EC2M
@@ -92,7 +92,7 @@ const EC_METHOD *EC_GFp_nistp521_method(void);
 /** Returns the basic GF2m ec method
  *  \return  EC_METHOD object
  */
-const EC_METHOD *EC_GF2m_simple_method(void);
+const EC_METHOD * __cdecl EC_GF2m_simple_method(void);
 
 # endif
 
@@ -104,43 +104,43 @@ const EC_METHOD *EC_GF2m_simple_method(void);
  *  \param   meth  EC_METHOD to use
  *  \return  newly created EC_GROUP object or NULL in case of an error.
  */
-EC_GROUP *EC_GROUP_new(const EC_METHOD *meth);
+EC_GROUP * __cdecl EC_GROUP_new(const EC_METHOD *meth);
 
 /** Frees a EC_GROUP object
  *  \param  group  EC_GROUP object to be freed.
  */
-void EC_GROUP_free(EC_GROUP *group);
+void __cdecl EC_GROUP_free(EC_GROUP *group);
 
 /** Clears and frees a EC_GROUP object
  *  \param  group  EC_GROUP object to be cleared and freed.
  */
-void EC_GROUP_clear_free(EC_GROUP *group);
+void __cdecl EC_GROUP_clear_free(EC_GROUP *group);
 
 /** Copies EC_GROUP objects. Note: both EC_GROUPs must use the same EC_METHOD.
  *  \param  dst  destination EC_GROUP object
  *  \param  src  source EC_GROUP object
  *  \return 1 on success and 0 if an error occurred.
  */
-int EC_GROUP_copy(EC_GROUP *dst, const EC_GROUP *src);
+int __cdecl EC_GROUP_copy(EC_GROUP *dst, const EC_GROUP *src);
 
 /** Creates a new EC_GROUP object and copies the copies the content
  *  form src to the newly created EC_KEY object
  *  \param  src  source EC_GROUP object
  *  \return newly created EC_GROUP object or NULL in case of an error.
  */
-EC_GROUP *EC_GROUP_dup(const EC_GROUP *src);
+EC_GROUP * __cdecl EC_GROUP_dup(const EC_GROUP *src);
 
 /** Returns the EC_METHOD of the EC_GROUP object.
  *  \param  group  EC_GROUP object
  *  \return EC_METHOD used in this EC_GROUP object.
  */
-const EC_METHOD *EC_GROUP_method_of(const EC_GROUP *group);
+const EC_METHOD * __cdecl EC_GROUP_method_of(const EC_GROUP *group);
 
 /** Returns the field type of the EC_METHOD.
  *  \param  meth  EC_METHOD object
  *  \return NID of the underlying field type OID.
  */
-int EC_METHOD_get_field_type(const EC_METHOD *meth);
+int __cdecl EC_METHOD_get_field_type(const EC_METHOD *meth);
 
 /** Sets the generator and its order/cofactor of a EC_GROUP object.
  *  \param  group      EC_GROUP object
@@ -150,20 +150,20 @@ int EC_METHOD_get_field_type(const EC_METHOD *meth);
  *                     in the group of all points on the elliptic curve.
  *  \return 1 on success and 0 if an error occurred
  */
-int EC_GROUP_set_generator(EC_GROUP *group, const EC_POINT *generator,
+int __cdecl EC_GROUP_set_generator(EC_GROUP *group, const EC_POINT *generator,
                            const BIGNUM *order, const BIGNUM *cofactor);
 
 /** Returns the generator of a EC_GROUP object.
  *  \param  group  EC_GROUP object
  *  \return the currently used generator (possibly NULL).
  */
-const EC_POINT *EC_GROUP_get0_generator(const EC_GROUP *group);
+const EC_POINT * __cdecl EC_GROUP_get0_generator(const EC_GROUP *group);
 
 /** Returns the montgomery data for order(Generator)
  *  \param  group  EC_GROUP object
  *  \return the currently used montgomery data (possibly NULL).
 */
-BN_MONT_CTX *EC_GROUP_get_mont_data(const EC_GROUP *group);
+BN_MONT_CTX * __cdecl EC_GROUP_get_mont_data(const EC_GROUP *group);
 
 /** Gets the order of a EC_GROUP
  *  \param  group  EC_GROUP object
@@ -171,19 +171,19 @@ BN_MONT_CTX *EC_GROUP_get_mont_data(const EC_GROUP *group);
  *  \param  ctx    unused
  *  \return 1 on success and 0 if an error occurred
  */
-int EC_GROUP_get_order(const EC_GROUP *group, BIGNUM *order, BN_CTX *ctx);
+int __cdecl EC_GROUP_get_order(const EC_GROUP *group, BIGNUM *order, BN_CTX *ctx);
 
 /** Gets the order of an EC_GROUP
  *  \param  group  EC_GROUP object
  *  \return the group order
  */
-const BIGNUM *EC_GROUP_get0_order(const EC_GROUP *group);
+const BIGNUM * __cdecl EC_GROUP_get0_order(const EC_GROUP *group);
 
 /** Gets the number of bits of the order of an EC_GROUP
  *  \param  group  EC_GROUP object
  *  \return number of bits of group order.
  */
-int EC_GROUP_order_bits(const EC_GROUP *group);
+int __cdecl EC_GROUP_order_bits(const EC_GROUP *group);
 
 /** Gets the cofactor of a EC_GROUP
  *  \param  group     EC_GROUP object
@@ -191,37 +191,37 @@ int EC_GROUP_order_bits(const EC_GROUP *group);
  *  \param  ctx       unused
  *  \return 1 on success and 0 if an error occurred
  */
-int EC_GROUP_get_cofactor(const EC_GROUP *group, BIGNUM *cofactor,
+int __cdecl EC_GROUP_get_cofactor(const EC_GROUP *group, BIGNUM *cofactor,
                           BN_CTX *ctx);
 
 /** Gets the cofactor of an EC_GROUP
  *  \param  group  EC_GROUP object
  *  \return the group cofactor
  */
-const BIGNUM *EC_GROUP_get0_cofactor(const EC_GROUP *group);
+const BIGNUM * __cdecl EC_GROUP_get0_cofactor(const EC_GROUP *group);
 
 /** Sets the name of a EC_GROUP object
  *  \param  group  EC_GROUP object
  *  \param  nid    NID of the curve name OID
  */
-void EC_GROUP_set_curve_name(EC_GROUP *group, int nid);
+void __cdecl EC_GROUP_set_curve_name(EC_GROUP *group, int nid);
 
 /** Returns the curve name of a EC_GROUP object
  *  \param  group  EC_GROUP object
  *  \return NID of the curve name OID or 0 if not set.
  */
-int EC_GROUP_get_curve_name(const EC_GROUP *group);
+int __cdecl EC_GROUP_get_curve_name(const EC_GROUP *group);
 
-void EC_GROUP_set_asn1_flag(EC_GROUP *group, int flag);
-int EC_GROUP_get_asn1_flag(const EC_GROUP *group);
+void __cdecl EC_GROUP_set_asn1_flag(EC_GROUP *group, int flag);
+int __cdecl EC_GROUP_get_asn1_flag(const EC_GROUP *group);
 
-void EC_GROUP_set_point_conversion_form(EC_GROUP *group,
+void __cdecl EC_GROUP_set_point_conversion_form(EC_GROUP *group,
                                         point_conversion_form_t form);
-point_conversion_form_t EC_GROUP_get_point_conversion_form(const EC_GROUP *);
+point_conversion_form_t __cdecl EC_GROUP_get_point_conversion_form(const EC_GROUP *);
 
-unsigned char *EC_GROUP_get0_seed(const EC_GROUP *x);
-size_t EC_GROUP_get_seed_len(const EC_GROUP *);
-size_t EC_GROUP_set_seed(EC_GROUP *, const unsigned char *, size_t len);
+unsigned char * __cdecl EC_GROUP_get0_seed(const EC_GROUP *x);
+size_t __cdecl EC_GROUP_get_seed_len(const EC_GROUP *);
+size_t __cdecl EC_GROUP_set_seed(EC_GROUP *, const unsigned char *, size_t len);
 
 /** Sets the parameters of a ec curve defined by y^2 = x^3 + a*x + b (for GFp)
  *  or y^2 + x*y = x^3 + a*x^2 + b (for GF2m)
@@ -233,7 +233,7 @@ size_t EC_GROUP_set_seed(EC_GROUP *, const unsigned char *, size_t len);
  *  \param  ctx    BN_CTX object (optional)
  *  \return 1 on success and 0 if an error occurred
  */
-int EC_GROUP_set_curve(EC_GROUP *group, const BIGNUM *p, const BIGNUM *a,
+int __cdecl EC_GROUP_set_curve(EC_GROUP *group, const BIGNUM *p, const BIGNUM *a,
                        const BIGNUM *b, BN_CTX *ctx);
 
 /** Gets the parameters of the ec curve defined by y^2 = x^3 + a*x + b (for GFp)
@@ -246,7 +246,7 @@ int EC_GROUP_set_curve(EC_GROUP *group, const BIGNUM *p, const BIGNUM *a,
  *  \param  ctx    BN_CTX object (optional)
  *  \return 1 on success and 0 if an error occurred
  */
-int EC_GROUP_get_curve(const EC_GROUP *group, BIGNUM *p, BIGNUM *a, BIGNUM *b,
+int __cdecl EC_GROUP_get_curve(const EC_GROUP *group, BIGNUM *p, BIGNUM *a, BIGNUM *b,
                        BN_CTX *ctx);
 
 /** Sets the parameters of an ec curve. Synonym for EC_GROUP_set_curve
@@ -258,7 +258,7 @@ int EC_GROUP_get_curve(const EC_GROUP *group, BIGNUM *p, BIGNUM *a, BIGNUM *b,
  *  \param  ctx    BN_CTX object (optional)
  *  \return 1 on success and 0 if an error occurred
  */
-DEPRECATEDIN_1_2_0(int EC_GROUP_set_curve_GFp(EC_GROUP *group, const BIGNUM *p,
+DEPRECATEDIN_1_2_0(int __cdecl EC_GROUP_set_curve_GFp(EC_GROUP *group, const BIGNUM *p,
                                               const BIGNUM *a, const BIGNUM *b,
                                               BN_CTX *ctx))
 
@@ -271,7 +271,7 @@ DEPRECATEDIN_1_2_0(int EC_GROUP_set_curve_GFp(EC_GROUP *group, const BIGNUM *p,
  *  \param  ctx    BN_CTX object (optional)
  *  \return 1 on success and 0 if an error occurred
  */
-DEPRECATEDIN_1_2_0(int EC_GROUP_get_curve_GFp(const EC_GROUP *group, BIGNUM *p,
+DEPRECATEDIN_1_2_0(int __cdecl EC_GROUP_get_curve_GFp(const EC_GROUP *group, BIGNUM *p,
                                               BIGNUM *a, BIGNUM *b,
                                               BN_CTX *ctx))
 
@@ -285,7 +285,7 @@ DEPRECATEDIN_1_2_0(int EC_GROUP_get_curve_GFp(const EC_GROUP *group, BIGNUM *p,
  *  \param  ctx    BN_CTX object (optional)
  *  \return 1 on success and 0 if an error occurred
  */
-DEPRECATEDIN_1_2_0(int EC_GROUP_set_curve_GF2m(EC_GROUP *group, const BIGNUM *p,
+DEPRECATEDIN_1_2_0(int __cdecl EC_GROUP_set_curve_GF2m(EC_GROUP *group, const BIGNUM *p,
                                                const BIGNUM *a, const BIGNUM *b,
                                                BN_CTX *ctx))
 
@@ -298,7 +298,7 @@ DEPRECATEDIN_1_2_0(int EC_GROUP_set_curve_GF2m(EC_GROUP *group, const BIGNUM *p,
  *  \param  ctx    BN_CTX object (optional)
  *  \return 1 on success and 0 if an error occurred
  */
-DEPRECATEDIN_1_2_0(int EC_GROUP_get_curve_GF2m(const EC_GROUP *group, BIGNUM *p,
+DEPRECATEDIN_1_2_0(int __cdecl EC_GROUP_get_curve_GF2m(const EC_GROUP *group, BIGNUM *p,
                                                BIGNUM *a, BIGNUM *b,
                                                BN_CTX *ctx))
 # endif
@@ -306,21 +306,21 @@ DEPRECATEDIN_1_2_0(int EC_GROUP_get_curve_GF2m(const EC_GROUP *group, BIGNUM *p,
  *  \param  group  EC_GROUP object
  *  \return number of bits needed to represent a field element
  */
-int EC_GROUP_get_degree(const EC_GROUP *group);
+int __cdecl EC_GROUP_get_degree(const EC_GROUP *group);
 
 /** Checks whether the parameter in the EC_GROUP define a valid ec group
  *  \param  group  EC_GROUP object
  *  \param  ctx    BN_CTX object (optional)
  *  \return 1 if group is a valid ec group and 0 otherwise
  */
-int EC_GROUP_check(const EC_GROUP *group, BN_CTX *ctx);
+int __cdecl EC_GROUP_check(const EC_GROUP *group, BN_CTX *ctx);
 
 /** Checks whether the discriminant of the elliptic curve is zero or not
  *  \param  group  EC_GROUP object
  *  \param  ctx    BN_CTX object (optional)
  *  \return 1 if the discriminant is not zero and 0 otherwise
  */
-int EC_GROUP_check_discriminant(const EC_GROUP *group, BN_CTX *ctx);
+int __cdecl EC_GROUP_check_discriminant(const EC_GROUP *group, BN_CTX *ctx);
 
 /** Compares two EC_GROUP objects
  *  \param  a    first EC_GROUP object
@@ -328,7 +328,7 @@ int EC_GROUP_check_discriminant(const EC_GROUP *group, BN_CTX *ctx);
  *  \param  ctx  BN_CTX object (optional)
  *  \return 0 if the groups are equal, 1 if not, or -1 on error
  */
-int EC_GROUP_cmp(const EC_GROUP *a, const EC_GROUP *b, BN_CTX *ctx);
+int __cdecl EC_GROUP_cmp(const EC_GROUP *a, const EC_GROUP *b, BN_CTX *ctx);
 
 /*
  * EC_GROUP_new_GF*() calls EC_GROUP_new() and EC_GROUP_set_GF*() after
@@ -343,7 +343,7 @@ int EC_GROUP_cmp(const EC_GROUP *a, const EC_GROUP *b, BN_CTX *ctx);
  *  \param  ctx  BN_CTX object (optional)
  *  \return newly created EC_GROUP object with the specified parameters
  */
-EC_GROUP *EC_GROUP_new_curve_GFp(const BIGNUM *p, const BIGNUM *a,
+EC_GROUP * __cdecl EC_GROUP_new_curve_GFp(const BIGNUM *p, const BIGNUM *a,
                                  const BIGNUM *b, BN_CTX *ctx);
 # ifndef OPENSSL_NO_EC2M
 /** Creates a new EC_GROUP object with the specified parameters defined
@@ -354,7 +354,7 @@ EC_GROUP *EC_GROUP_new_curve_GFp(const BIGNUM *p, const BIGNUM *a,
  *  \param  ctx  BN_CTX object (optional)
  *  \return newly created EC_GROUP object with the specified parameters
  */
-EC_GROUP *EC_GROUP_new_curve_GF2m(const BIGNUM *p, const BIGNUM *a,
+EC_GROUP * __cdecl EC_GROUP_new_curve_GF2m(const BIGNUM *p, const BIGNUM *a,
                                   const BIGNUM *b, BN_CTX *ctx);
 # endif
 
@@ -363,14 +363,14 @@ EC_GROUP *EC_GROUP_new_curve_GF2m(const BIGNUM *p, const BIGNUM *a,
  *  \return newly created EC_GROUP object with specified curve or NULL
  *          if an error occurred
  */
-EC_GROUP *EC_GROUP_new_by_curve_name(int nid);
+EC_GROUP * __cdecl EC_GROUP_new_by_curve_name(int nid);
 
 /** Creates a new EC_GROUP object from an ECPARAMETERS object
  *  \param  params  pointer to the ECPARAMETERS object
  *  \return newly created EC_GROUP object with specified curve or NULL
  *          if an error occurred
  */
-EC_GROUP *EC_GROUP_new_from_ecparameters(const ECPARAMETERS *params);
+EC_GROUP * __cdecl EC_GROUP_new_from_ecparameters(const ECPARAMETERS *params);
 
 /** Creates an ECPARAMETERS object for the given EC_GROUP object.
  *  \param  group   pointer to the EC_GROUP object
@@ -378,7 +378,7 @@ EC_GROUP *EC_GROUP_new_from_ecparameters(const ECPARAMETERS *params);
  *  \return pointer to the new ECPARAMETERS object or NULL
  *          if an error occurred.
  */
-ECPARAMETERS *EC_GROUP_get_ecparameters(const EC_GROUP *group,
+ECPARAMETERS * __cdecl EC_GROUP_get_ecparameters(const EC_GROUP *group,
                                         ECPARAMETERS *params);
 
 /** Creates a new EC_GROUP object from an ECPKPARAMETERS object
@@ -386,7 +386,7 @@ ECPARAMETERS *EC_GROUP_get_ecparameters(const EC_GROUP *group,
  *  \return newly created EC_GROUP object with specified curve, or NULL
  *          if an error occurred
  */
-EC_GROUP *EC_GROUP_new_from_ecpkparameters(const ECPKPARAMETERS *params);
+EC_GROUP * __cdecl EC_GROUP_new_from_ecpkparameters(const ECPKPARAMETERS *params);
 
 /** Creates an ECPKPARAMETERS object for the given EC_GROUP object.
  *  \param  group   pointer to the EC_GROUP object
@@ -394,7 +394,7 @@ EC_GROUP *EC_GROUP_new_from_ecpkparameters(const ECPKPARAMETERS *params);
  *  \return pointer to the new ECPKPARAMETERS object or NULL
  *          if an error occurred.
  */
-ECPKPARAMETERS *EC_GROUP_get_ecpkparameters(const EC_GROUP *group,
+ECPKPARAMETERS * __cdecl EC_GROUP_get_ecpkparameters(const EC_GROUP *group,
                                             ECPKPARAMETERS *params);
 
 /********************************************************************/
@@ -412,10 +412,10 @@ typedef struct {
  * nitems EC_builtin_curve structures are filled with the data of the first
  * nitems internal groups
  */
-size_t EC_get_builtin_curves(EC_builtin_curve *r, size_t nitems);
+size_t __cdecl EC_get_builtin_curves(EC_builtin_curve *r, size_t nitems);
 
-const char *EC_curve_nid2nist(int nid);
-int EC_curve_nist2nid(const char *name);
+const char * __cdecl EC_curve_nid2nist(int nid);
+int __cdecl EC_curve_nist2nid(const char *name);
 
 /********************************************************************/
 /*                    EC_POINT functions                            */
@@ -425,24 +425,24 @@ int EC_curve_nist2nid(const char *name);
  *  \param  group  EC_GROUP the underlying EC_GROUP object
  *  \return newly created EC_POINT object or NULL if an error occurred
  */
-EC_POINT *EC_POINT_new(const EC_GROUP *group);
+EC_POINT * __cdecl EC_POINT_new(const EC_GROUP *group);
 
 /** Frees a EC_POINT object
  *  \param  point  EC_POINT object to be freed
  */
-void EC_POINT_free(EC_POINT *point);
+void __cdecl EC_POINT_free(EC_POINT *point);
 
 /** Clears and frees a EC_POINT object
  *  \param  point  EC_POINT object to be cleared and freed
  */
-void EC_POINT_clear_free(EC_POINT *point);
+void __cdecl EC_POINT_clear_free(EC_POINT *point);
 
 /** Copies EC_POINT object
  *  \param  dst  destination EC_POINT object
  *  \param  src  source EC_POINT object
  *  \return 1 on success and 0 if an error occurred
  */
-int EC_POINT_copy(EC_POINT *dst, const EC_POINT *src);
+int __cdecl EC_POINT_copy(EC_POINT *dst, const EC_POINT *src);
 
 /** Creates a new EC_POINT object and copies the content of the supplied
  *  EC_POINT
@@ -450,20 +450,20 @@ int EC_POINT_copy(EC_POINT *dst, const EC_POINT *src);
  *  \param  group  underlying the EC_GROUP object
  *  \return newly created EC_POINT object or NULL if an error occurred
  */
-EC_POINT *EC_POINT_dup(const EC_POINT *src, const EC_GROUP *group);
+EC_POINT * __cdecl EC_POINT_dup(const EC_POINT *src, const EC_GROUP *group);
 
 /** Returns the EC_METHOD used in EC_POINT object
  *  \param  point  EC_POINT object
  *  \return the EC_METHOD used
  */
-const EC_METHOD *EC_POINT_method_of(const EC_POINT *point);
+const EC_METHOD * __cdecl EC_POINT_method_of(const EC_POINT *point);
 
 /** Sets a point to infinity (neutral element)
  *  \param  group  underlying EC_GROUP object
  *  \param  point  EC_POINT to set to infinity
  *  \return 1 on success and 0 if an error occurred
  */
-int EC_POINT_set_to_infinity(const EC_GROUP *group, EC_POINT *point);
+int __cdecl EC_POINT_set_to_infinity(const EC_GROUP *group, EC_POINT *point);
 
 /** Sets the jacobian projective coordinates of a EC_POINT over GFp
  *  \param  group  underlying EC_GROUP object
@@ -474,7 +474,7 @@ int EC_POINT_set_to_infinity(const EC_GROUP *group, EC_POINT *point);
  *  \param  ctx    BN_CTX object (optional)
  *  \return 1 on success and 0 if an error occurred
  */
-int EC_POINT_set_Jprojective_coordinates_GFp(const EC_GROUP *group,
+int __cdecl EC_POINT_set_Jprojective_coordinates_GFp(const EC_GROUP *group,
                                              EC_POINT *p, const BIGNUM *x,
                                              const BIGNUM *y, const BIGNUM *z,
                                              BN_CTX *ctx);
@@ -488,7 +488,7 @@ int EC_POINT_set_Jprojective_coordinates_GFp(const EC_GROUP *group,
  *  \param  ctx    BN_CTX object (optional)
  *  \return 1 on success and 0 if an error occurred
  */
-int EC_POINT_get_Jprojective_coordinates_GFp(const EC_GROUP *group,
+int __cdecl EC_POINT_get_Jprojective_coordinates_GFp(const EC_GROUP *group,
                                              const EC_POINT *p, BIGNUM *x,
                                              BIGNUM *y, BIGNUM *z,
                                              BN_CTX *ctx);
@@ -501,7 +501,7 @@ int EC_POINT_get_Jprojective_coordinates_GFp(const EC_GROUP *group,
  *  \param  ctx    BN_CTX object (optional)
  *  \return 1 on success and 0 if an error occurred
  */
-int EC_POINT_set_affine_coordinates(const EC_GROUP *group, EC_POINT *p,
+int __cdecl EC_POINT_set_affine_coordinates(const EC_GROUP *group, EC_POINT *p,
                                     const BIGNUM *x, const BIGNUM *y,
                                     BN_CTX *ctx);
 
@@ -513,7 +513,7 @@ int EC_POINT_set_affine_coordinates(const EC_GROUP *group, EC_POINT *p,
  *  \param  ctx    BN_CTX object (optional)
  *  \return 1 on success and 0 if an error occurred
  */
-int EC_POINT_get_affine_coordinates(const EC_GROUP *group, const EC_POINT *p,
+int __cdecl EC_POINT_get_affine_coordinates(const EC_GROUP *group, const EC_POINT *p,
                                     BIGNUM *x, BIGNUM *y, BN_CTX *ctx);
 
 /** Sets the affine coordinates of an EC_POINT. A synonym of
@@ -525,7 +525,7 @@ int EC_POINT_get_affine_coordinates(const EC_GROUP *group, const EC_POINT *p,
  *  \param  ctx    BN_CTX object (optional)
  *  \return 1 on success and 0 if an error occurred
  */
-DEPRECATEDIN_1_2_0(int EC_POINT_set_affine_coordinates_GFp(const EC_GROUP *group,
+DEPRECATEDIN_1_2_0(int __cdecl EC_POINT_set_affine_coordinates_GFp(const EC_GROUP *group,
                                                            EC_POINT *p,
                                                            const BIGNUM *x,
                                                            const BIGNUM *y,
@@ -540,7 +540,7 @@ DEPRECATEDIN_1_2_0(int EC_POINT_set_affine_coordinates_GFp(const EC_GROUP *group
  *  \param  ctx    BN_CTX object (optional)
  *  \return 1 on success and 0 if an error occurred
  */
-DEPRECATEDIN_1_2_0(int EC_POINT_get_affine_coordinates_GFp(const EC_GROUP *group,
+DEPRECATEDIN_1_2_0(int __cdecl EC_POINT_get_affine_coordinates_GFp(const EC_GROUP *group,
                                                            const EC_POINT *p,
                                                            BIGNUM *x,
                                                            BIGNUM *y,
@@ -554,7 +554,7 @@ DEPRECATEDIN_1_2_0(int EC_POINT_get_affine_coordinates_GFp(const EC_GROUP *group
  *  \param  ctx    BN_CTX object (optional)
  *  \return 1 on success and 0 if an error occurred
  */
-int EC_POINT_set_compressed_coordinates(const EC_GROUP *group, EC_POINT *p,
+int __cdecl EC_POINT_set_compressed_coordinates(const EC_GROUP *group, EC_POINT *p,
                                         const BIGNUM *x, int y_bit,
                                         BN_CTX *ctx);
 
@@ -567,7 +567,7 @@ int EC_POINT_set_compressed_coordinates(const EC_GROUP *group, EC_POINT *p,
  *  \param  ctx    BN_CTX object (optional)
  *  \return 1 on success and 0 if an error occurred
  */
-DEPRECATEDIN_1_2_0(int EC_POINT_set_compressed_coordinates_GFp(const EC_GROUP *group,
+DEPRECATEDIN_1_2_0(int __cdecl EC_POINT_set_compressed_coordinates_GFp(const EC_GROUP *group,
                                                                EC_POINT *p,
                                                                const BIGNUM *x,
                                                                int y_bit,
@@ -582,7 +582,7 @@ DEPRECATEDIN_1_2_0(int EC_POINT_set_compressed_coordinates_GFp(const EC_GROUP *g
  *  \param  ctx    BN_CTX object (optional)
  *  \return 1 on success and 0 if an error occurred
  */
-DEPRECATEDIN_1_2_0(int EC_POINT_set_affine_coordinates_GF2m(const EC_GROUP *group,
+DEPRECATEDIN_1_2_0(int __cdecl EC_POINT_set_affine_coordinates_GF2m(const EC_GROUP *group,
                                                             EC_POINT *p,
                                                             const BIGNUM *x,
                                                             const BIGNUM *y,
@@ -597,7 +597,7 @@ DEPRECATEDIN_1_2_0(int EC_POINT_set_affine_coordinates_GF2m(const EC_GROUP *grou
  *  \param  ctx    BN_CTX object (optional)
  *  \return 1 on success and 0 if an error occurred
  */
-DEPRECATEDIN_1_2_0(int EC_POINT_get_affine_coordinates_GF2m(const EC_GROUP *group,
+DEPRECATEDIN_1_2_0(int __cdecl EC_POINT_get_affine_coordinates_GF2m(const EC_GROUP *group,
                                                             const EC_POINT *p,
                                                             BIGNUM *x,
                                                             BIGNUM *y,
@@ -612,7 +612,7 @@ DEPRECATEDIN_1_2_0(int EC_POINT_get_affine_coordinates_GF2m(const EC_GROUP *grou
  *  \param  ctx    BN_CTX object (optional)
  *  \return 1 on success and 0 if an error occurred
  */
-DEPRECATEDIN_1_2_0(int EC_POINT_set_compressed_coordinates_GF2m(const EC_GROUP *group,
+DEPRECATEDIN_1_2_0(int __cdecl EC_POINT_set_compressed_coordinates_GF2m(const EC_GROUP *group,
                                                                 EC_POINT *p,
                                                                 const BIGNUM *x,
                                                                 int y_bit,
@@ -628,7 +628,7 @@ DEPRECATEDIN_1_2_0(int EC_POINT_set_compressed_coordinates_GF2m(const EC_GROUP *
  *  \param  ctx    BN_CTX object (optional)
  *  \return the length of the encoded octet string or 0 if an error occurred
  */
-size_t EC_POINT_point2oct(const EC_GROUP *group, const EC_POINT *p,
+size_t __cdecl EC_POINT_point2oct(const EC_GROUP *group, const EC_POINT *p,
                           point_conversion_form_t form,
                           unsigned char *buf, size_t len, BN_CTX *ctx);
 
@@ -640,7 +640,7 @@ size_t EC_POINT_point2oct(const EC_GROUP *group, const EC_POINT *p,
  *  \param  ctx    BN_CTX object (optional)
  *  \return 1 on success and 0 if an error occurred
  */
-int EC_POINT_oct2point(const EC_GROUP *group, EC_POINT *p,
+int __cdecl EC_POINT_oct2point(const EC_GROUP *group, EC_POINT *p,
                        const unsigned char *buf, size_t len, BN_CTX *ctx);
 
 /** Encodes an EC_POINT object to an allocated octet string
@@ -651,18 +651,18 @@ int EC_POINT_oct2point(const EC_GROUP *group, EC_POINT *p,
  *  \param  ctx    BN_CTX object (optional)
  *  \return the length of the encoded octet string or 0 if an error occurred
  */
-size_t EC_POINT_point2buf(const EC_GROUP *group, const EC_POINT *point,
+size_t __cdecl EC_POINT_point2buf(const EC_GROUP *group, const EC_POINT *point,
                           point_conversion_form_t form,
                           unsigned char **pbuf, BN_CTX *ctx);
 
 /* other interfaces to point2oct/oct2point: */
-BIGNUM *EC_POINT_point2bn(const EC_GROUP *, const EC_POINT *,
+BIGNUM * __cdecl EC_POINT_point2bn(const EC_GROUP *, const EC_POINT *,
                           point_conversion_form_t form, BIGNUM *, BN_CTX *);
-EC_POINT *EC_POINT_bn2point(const EC_GROUP *, const BIGNUM *,
+EC_POINT * __cdecl EC_POINT_bn2point(const EC_GROUP *, const BIGNUM *,
                             EC_POINT *, BN_CTX *);
-char *EC_POINT_point2hex(const EC_GROUP *, const EC_POINT *,
+char * __cdecl EC_POINT_point2hex(const EC_GROUP *, const EC_POINT *,
                          point_conversion_form_t form, BN_CTX *);
-EC_POINT *EC_POINT_hex2point(const EC_GROUP *, const char *,
+EC_POINT * __cdecl EC_POINT_hex2point(const EC_GROUP *, const char *,
                              EC_POINT *, BN_CTX *);
 
 /********************************************************************/
@@ -677,7 +677,7 @@ EC_POINT *EC_POINT_hex2point(const EC_GROUP *, const char *,
  *  \param  ctx    BN_CTX object (optional)
  *  \return 1 on success and 0 if an error occurred
  */
-int EC_POINT_add(const EC_GROUP *group, EC_POINT *r, const EC_POINT *a,
+int __cdecl EC_POINT_add(const EC_GROUP *group, EC_POINT *r, const EC_POINT *a,
                  const EC_POINT *b, BN_CTX *ctx);
 
 /** Computes the double of a EC_POINT
@@ -687,7 +687,7 @@ int EC_POINT_add(const EC_GROUP *group, EC_POINT *r, const EC_POINT *a,
  *  \param  ctx    BN_CTX object (optional)
  *  \return 1 on success and 0 if an error occurred
  */
-int EC_POINT_dbl(const EC_GROUP *group, EC_POINT *r, const EC_POINT *a,
+int __cdecl EC_POINT_dbl(const EC_GROUP *group, EC_POINT *r, const EC_POINT *a,
                  BN_CTX *ctx);
 
 /** Computes the inverse of a EC_POINT
@@ -696,14 +696,14 @@ int EC_POINT_dbl(const EC_GROUP *group, EC_POINT *r, const EC_POINT *a,
  *  \param  ctx    BN_CTX object (optional)
  *  \return 1 on success and 0 if an error occurred
  */
-int EC_POINT_invert(const EC_GROUP *group, EC_POINT *a, BN_CTX *ctx);
+int __cdecl EC_POINT_invert(const EC_GROUP *group, EC_POINT *a, BN_CTX *ctx);
 
 /** Checks whether the point is the neutral element of the group
  *  \param  group  the underlying EC_GROUP object
  *  \param  p      EC_POINT object
  *  \return 1 if the point is the neutral element and 0 otherwise
  */
-int EC_POINT_is_at_infinity(const EC_GROUP *group, const EC_POINT *p);
+int __cdecl EC_POINT_is_at_infinity(const EC_GROUP *group, const EC_POINT *p);
 
 /** Checks whether the point is on the curve
  *  \param  group  underlying EC_GROUP object
@@ -711,7 +711,7 @@ int EC_POINT_is_at_infinity(const EC_GROUP *group, const EC_POINT *p);
  *  \param  ctx    BN_CTX object (optional)
  *  \return 1 if the point is on the curve, 0 if not, or -1 on error
  */
-int EC_POINT_is_on_curve(const EC_GROUP *group, const EC_POINT *point,
+int __cdecl EC_POINT_is_on_curve(const EC_GROUP *group, const EC_POINT *point,
                          BN_CTX *ctx);
 
 /** Compares two EC_POINTs
@@ -721,11 +721,11 @@ int EC_POINT_is_on_curve(const EC_GROUP *group, const EC_POINT *point,
  *  \param  ctx    BN_CTX object (optional)
  *  \return 1 if the points are not equal, 0 if they are, or -1 on error
  */
-int EC_POINT_cmp(const EC_GROUP *group, const EC_POINT *a, const EC_POINT *b,
+int __cdecl EC_POINT_cmp(const EC_GROUP *group, const EC_POINT *a, const EC_POINT *b,
                  BN_CTX *ctx);
 
-int EC_POINT_make_affine(const EC_GROUP *group, EC_POINT *point, BN_CTX *ctx);
-int EC_POINTs_make_affine(const EC_GROUP *group, size_t num,
+int __cdecl EC_POINT_make_affine(const EC_GROUP *group, EC_POINT *point, BN_CTX *ctx);
+int __cdecl EC_POINTs_make_affine(const EC_GROUP *group, size_t num,
                           EC_POINT *points[], BN_CTX *ctx);
 
 /** Computes r = generator * n + sum_{i=0}^{num-1} p[i] * m[i]
@@ -738,7 +738,7 @@ int EC_POINTs_make_affine(const EC_GROUP *group, size_t num,
  *  \param  ctx    BN_CTX object (optional)
  *  \return 1 on success and 0 if an error occurred
  */
-int EC_POINTs_mul(const EC_GROUP *group, EC_POINT *r, const BIGNUM *n,
+int __cdecl EC_POINTs_mul(const EC_GROUP *group, EC_POINT *r, const BIGNUM *n,
                   size_t num, const EC_POINT *p[], const BIGNUM *m[],
                   BN_CTX *ctx);
 
@@ -751,7 +751,7 @@ int EC_POINTs_mul(const EC_GROUP *group, EC_POINT *r, const BIGNUM *n,
  *  \param  ctx    BN_CTX object (optional)
  *  \return 1 on success and 0 if an error occurred
  */
-int EC_POINT_mul(const EC_GROUP *group, EC_POINT *r, const BIGNUM *n,
+int __cdecl EC_POINT_mul(const EC_GROUP *group, EC_POINT *r, const BIGNUM *n,
                  const EC_POINT *q, const BIGNUM *m, BN_CTX *ctx);
 
 /** Stores multiples of generator for faster point multiplication
@@ -759,13 +759,13 @@ int EC_POINT_mul(const EC_GROUP *group, EC_POINT *r, const BIGNUM *n,
  *  \param  ctx    BN_CTX object (optional)
  *  \return 1 on success and 0 if an error occurred
  */
-int EC_GROUP_precompute_mult(EC_GROUP *group, BN_CTX *ctx);
+int __cdecl EC_GROUP_precompute_mult(EC_GROUP *group, BN_CTX *ctx);
 
 /** Reports whether a precomputation has been done
  *  \param  group  EC_GROUP object
  *  \return 1 if a pre-computation has been done and 0 otherwise
  */
-int EC_GROUP_have_precompute_mult(const EC_GROUP *group);
+int __cdecl EC_GROUP_have_precompute_mult(const EC_GROUP *group);
 
 /********************************************************************/
 /*                       ASN1 stuff                                 */
@@ -780,18 +780,18 @@ DECLARE_ASN1_ALLOC_FUNCTIONS(ECPARAMETERS)
  * EC_GROUP_get_basis_type() returns the NID of the basis type used to
  * represent the field elements
  */
-int EC_GROUP_get_basis_type(const EC_GROUP *);
+int __cdecl EC_GROUP_get_basis_type(const EC_GROUP *);
 # ifndef OPENSSL_NO_EC2M
-int EC_GROUP_get_trinomial_basis(const EC_GROUP *, unsigned int *k);
-int EC_GROUP_get_pentanomial_basis(const EC_GROUP *, unsigned int *k1,
+int __cdecl EC_GROUP_get_trinomial_basis(const EC_GROUP *, unsigned int *k);
+int __cdecl EC_GROUP_get_pentanomial_basis(const EC_GROUP *, unsigned int *k1,
                                    unsigned int *k2, unsigned int *k3);
 # endif
 
 # define OPENSSL_EC_EXPLICIT_CURVE  0x000
 # define OPENSSL_EC_NAMED_CURVE     0x001
 
-EC_GROUP *d2i_ECPKParameters(EC_GROUP **, const unsigned char **in, long len);
-int i2d_ECPKParameters(const EC_GROUP *, unsigned char **out);
+EC_GROUP * __cdecl d2i_ECPKParameters(EC_GROUP **, const unsigned char **in, long len);
+int __cdecl i2d_ECPKParameters(const EC_GROUP *, unsigned char **out);
 
 # define d2i_ECPKParameters_bio(bp,x) ASN1_d2i_bio_of(EC_GROUP,NULL,d2i_ECPKParameters,bp,x)
 # define i2d_ECPKParameters_bio(bp,x) ASN1_i2d_bio_of_const(EC_GROUP,i2d_ECPKParameters,bp,x)
@@ -800,9 +800,9 @@ int i2d_ECPKParameters(const EC_GROUP *, unsigned char **out);
 # define i2d_ECPKParameters_fp(fp,x) ASN1_i2d_fp(i2d_ECPKParameters,(fp), \
                 (unsigned char *)(x))
 
-int ECPKParameters_print(BIO *bp, const EC_GROUP *x, int off);
+int __cdecl ECPKParameters_print(BIO *bp, const EC_GROUP *x, int off);
 # ifndef OPENSSL_NO_STDIO
-int ECPKParameters_print_fp(FILE *fp, const EC_GROUP *x, int off);
+int __cdecl ECPKParameters_print_fp(FILE *fp, const EC_GROUP *x, int off);
 # endif
 
 /********************************************************************/
@@ -821,56 +821,56 @@ int ECPKParameters_print_fp(FILE *fp, const EC_GROUP *x, int off);
 /** Creates a new EC_KEY object.
  *  \return EC_KEY object or NULL if an error occurred.
  */
-EC_KEY *EC_KEY_new(void);
+EC_KEY * __cdecl EC_KEY_new(void);
 
-int EC_KEY_get_flags(const EC_KEY *key);
+int __cdecl EC_KEY_get_flags(const EC_KEY *key);
 
-void EC_KEY_set_flags(EC_KEY *key, int flags);
+void __cdecl EC_KEY_set_flags(EC_KEY *key, int flags);
 
-void EC_KEY_clear_flags(EC_KEY *key, int flags);
+void __cdecl EC_KEY_clear_flags(EC_KEY *key, int flags);
 
 /** Creates a new EC_KEY object using a named curve as underlying
  *  EC_GROUP object.
  *  \param  nid  NID of the named curve.
  *  \return EC_KEY object or NULL if an error occurred.
  */
-EC_KEY *EC_KEY_new_by_curve_name(int nid);
+EC_KEY * __cdecl EC_KEY_new_by_curve_name(int nid);
 
 /** Frees a EC_KEY object.
  *  \param  key  EC_KEY object to be freed.
  */
-void EC_KEY_free(EC_KEY *key);
+void __cdecl EC_KEY_free(EC_KEY *key);
 
 /** Copies a EC_KEY object.
  *  \param  dst  destination EC_KEY object
  *  \param  src  src EC_KEY object
  *  \return dst or NULL if an error occurred.
  */
-EC_KEY *EC_KEY_copy(EC_KEY *dst, const EC_KEY *src);
+EC_KEY * __cdecl EC_KEY_copy(EC_KEY *dst, const EC_KEY *src);
 
 /** Creates a new EC_KEY object and copies the content from src to it.
  *  \param  src  the source EC_KEY object
  *  \return newly created EC_KEY object or NULL if an error occurred.
  */
-EC_KEY *EC_KEY_dup(const EC_KEY *src);
+EC_KEY * __cdecl EC_KEY_dup(const EC_KEY *src);
 
 /** Increases the internal reference count of a EC_KEY object.
  *  \param  key  EC_KEY object
  *  \return 1 on success and 0 if an error occurred.
  */
-int EC_KEY_up_ref(EC_KEY *key);
+int __cdecl EC_KEY_up_ref(EC_KEY *key);
 
 /** Returns the ENGINE object of a EC_KEY object
  *  \param  eckey  EC_KEY object
  *  \return the ENGINE object (possibly NULL).
  */
-ENGINE *EC_KEY_get0_engine(const EC_KEY *eckey);
+ENGINE * __cdecl EC_KEY_get0_engine(const EC_KEY *eckey);
 
 /** Returns the EC_GROUP object of a EC_KEY object
  *  \param  key  EC_KEY object
  *  \return the EC_GROUP object (possibly NULL).
  */
-const EC_GROUP *EC_KEY_get0_group(const EC_KEY *key);
+const EC_GROUP * __cdecl EC_KEY_get0_group(const EC_KEY *key);
 
 /** Sets the EC_GROUP of a EC_KEY object.
  *  \param  key    EC_KEY object
@@ -878,13 +878,13 @@ const EC_GROUP *EC_KEY_get0_group(const EC_KEY *key);
  *                 object will use an own copy of the EC_GROUP).
  *  \return 1 on success and 0 if an error occurred.
  */
-int EC_KEY_set_group(EC_KEY *key, const EC_GROUP *group);
+int __cdecl EC_KEY_set_group(EC_KEY *key, const EC_GROUP *group);
 
 /** Returns the private key of a EC_KEY object.
  *  \param  key  EC_KEY object
  *  \return a BIGNUM with the private key (possibly NULL).
  */
-const BIGNUM *EC_KEY_get0_private_key(const EC_KEY *key);
+const BIGNUM * __cdecl EC_KEY_get0_private_key(const EC_KEY *key);
 
 /** Sets the private key of a EC_KEY object.
  *  \param  key  EC_KEY object
@@ -892,13 +892,13 @@ const BIGNUM *EC_KEY_get0_private_key(const EC_KEY *key);
  *               will use an own copy of the BIGNUM).
  *  \return 1 on success and 0 if an error occurred.
  */
-int EC_KEY_set_private_key(EC_KEY *key, const BIGNUM *prv);
+int __cdecl EC_KEY_set_private_key(EC_KEY *key, const BIGNUM *prv);
 
 /** Returns the public key of a EC_KEY object.
  *  \param  key  the EC_KEY object
  *  \return a EC_POINT object with the public key (possibly NULL)
  */
-const EC_POINT *EC_KEY_get0_public_key(const EC_KEY *key);
+const EC_POINT * __cdecl EC_KEY_get0_public_key(const EC_KEY *key);
 
 /** Sets the public key of a EC_KEY object.
  *  \param  key  EC_KEY object
@@ -906,20 +906,20 @@ const EC_POINT *EC_KEY_get0_public_key(const EC_KEY *key);
  *               will use an own copy of the EC_POINT object).
  *  \return 1 on success and 0 if an error occurred.
  */
-int EC_KEY_set_public_key(EC_KEY *key, const EC_POINT *pub);
+int __cdecl EC_KEY_set_public_key(EC_KEY *key, const EC_POINT *pub);
 
-unsigned EC_KEY_get_enc_flags(const EC_KEY *key);
-void EC_KEY_set_enc_flags(EC_KEY *eckey, unsigned int flags);
-point_conversion_form_t EC_KEY_get_conv_form(const EC_KEY *key);
-void EC_KEY_set_conv_form(EC_KEY *eckey, point_conversion_form_t cform);
+unsigned __cdecl EC_KEY_get_enc_flags(const EC_KEY *key);
+void __cdecl EC_KEY_set_enc_flags(EC_KEY *eckey, unsigned int flags);
+point_conversion_form_t __cdecl EC_KEY_get_conv_form(const EC_KEY *key);
+void __cdecl EC_KEY_set_conv_form(EC_KEY *eckey, point_conversion_form_t cform);
 
 #define EC_KEY_get_ex_new_index(l, p, newf, dupf, freef) \
     CRYPTO_get_ex_new_index(CRYPTO_EX_INDEX_EC_KEY, l, p, newf, dupf, freef)
-int EC_KEY_set_ex_data(EC_KEY *key, int idx, void *arg);
-void *EC_KEY_get_ex_data(const EC_KEY *key, int idx);
+int __cdecl EC_KEY_set_ex_data(EC_KEY *key, int idx, void *arg);
+void * __cdecl EC_KEY_get_ex_data(const EC_KEY *key, int idx);
 
 /* wrapper functions for the underlying EC_GROUP object */
-void EC_KEY_set_asn1_flag(EC_KEY *eckey, int asn1_flag);
+void __cdecl EC_KEY_set_asn1_flag(EC_KEY *eckey, int asn1_flag);
 
 /** Creates a table of pre-computed multiples of the generator to
  *  accelerate further EC_KEY operations.
@@ -927,25 +927,25 @@ void EC_KEY_set_asn1_flag(EC_KEY *eckey, int asn1_flag);
  *  \param  ctx  BN_CTX object (optional)
  *  \return 1 on success and 0 if an error occurred.
  */
-int EC_KEY_precompute_mult(EC_KEY *key, BN_CTX *ctx);
+int __cdecl EC_KEY_precompute_mult(EC_KEY *key, BN_CTX *ctx);
 
 /** Creates a new ec private (and optional a new public) key.
  *  \param  key  EC_KEY object
  *  \return 1 on success and 0 if an error occurred.
  */
-int EC_KEY_generate_key(EC_KEY *key);
+int __cdecl EC_KEY_generate_key(EC_KEY *key);
 
 /** Verifies that a private and/or public key is valid.
  *  \param  key  the EC_KEY object
  *  \return 1 on success and 0 otherwise.
  */
-int EC_KEY_check_key(const EC_KEY *key);
+int __cdecl EC_KEY_check_key(const EC_KEY *key);
 
 /** Indicates if an EC_KEY can be used for signing.
  *  \param  eckey  the EC_KEY object
  *  \return 1 if can can sign and 0 otherwise.
  */
-int EC_KEY_can_sign(const EC_KEY *eckey);
+int __cdecl EC_KEY_can_sign(const EC_KEY *eckey);
 
 /** Sets a public key from affine coordinates performing
  *  necessary NIST PKV tests.
@@ -954,7 +954,7 @@ int EC_KEY_can_sign(const EC_KEY *eckey);
  *  \param  y    public key y coordinate
  *  \return 1 on success and 0 otherwise.
  */
-int EC_KEY_set_public_key_affine_coordinates(EC_KEY *key, BIGNUM *x,
+int __cdecl EC_KEY_set_public_key_affine_coordinates(EC_KEY *key, BIGNUM *x,
                                              BIGNUM *y);
 
 /** Encodes an EC_KEY public key to an allocated octet string
@@ -964,7 +964,7 @@ int EC_KEY_set_public_key_affine_coordinates(EC_KEY *key, BIGNUM *x,
  *  \param  ctx    BN_CTX object (optional)
  *  \return the length of the encoded octet string or 0 if an error occurred
  */
-size_t EC_KEY_key2buf(const EC_KEY *key, point_conversion_form_t form,
+size_t __cdecl EC_KEY_key2buf(const EC_KEY *key, point_conversion_form_t form,
                       unsigned char **pbuf, BN_CTX *ctx);
 
 /** Decodes a EC_KEY public key from a octet string
@@ -975,7 +975,7 @@ size_t EC_KEY_key2buf(const EC_KEY *key, point_conversion_form_t form,
  *  \return 1 on success and 0 if an error occurred
  */
 
-int EC_KEY_oct2key(EC_KEY *key, const unsigned char *buf, size_t len,
+int __cdecl EC_KEY_oct2key(EC_KEY *key, const unsigned char *buf, size_t len,
                    BN_CTX *ctx);
 
 /** Decodes an EC_KEY private key from an octet string
@@ -985,7 +985,7 @@ int EC_KEY_oct2key(EC_KEY *key, const unsigned char *buf, size_t len,
  *  \return 1 on success and 0 if an error occurred
  */
 
-int EC_KEY_oct2priv(EC_KEY *key, const unsigned char *buf, size_t len);
+int __cdecl EC_KEY_oct2priv(EC_KEY *key, const unsigned char *buf, size_t len);
 
 /** Encodes a EC_KEY private key to an octet string
  *  \param  key    key to encode
@@ -995,14 +995,14 @@ int EC_KEY_oct2priv(EC_KEY *key, const unsigned char *buf, size_t len);
  *  \return the length of the encoded octet string or 0 if an error occurred
  */
 
-size_t EC_KEY_priv2oct(const EC_KEY *key, unsigned char *buf, size_t len);
+size_t __cdecl EC_KEY_priv2oct(const EC_KEY *key, unsigned char *buf, size_t len);
 
 /** Encodes an EC_KEY private key to an allocated octet string
  *  \param  eckey  key to encode
  *  \param  pbuf   returns pointer to allocated buffer
  *  \return the length of the encoded octet string or 0 if an error occurred
  */
-size_t EC_KEY_priv2buf(const EC_KEY *eckey, unsigned char **pbuf);
+size_t __cdecl EC_KEY_priv2buf(const EC_KEY *eckey, unsigned char **pbuf);
 
 /********************************************************************/
 /*        de- and encoding functions for SEC1 ECPrivateKey          */
@@ -1014,7 +1014,7 @@ size_t EC_KEY_priv2buf(const EC_KEY *eckey, unsigned char **pbuf);
  *  \param  len  length of the DER encoded private key
  *  \return the decoded private key or NULL if an error occurred.
  */
-EC_KEY *d2i_ECPrivateKey(EC_KEY **key, const unsigned char **in, long len);
+EC_KEY * __cdecl d2i_ECPrivateKey(EC_KEY **key, const unsigned char **in, long len);
 
 /** Encodes a private key object and stores the result in a buffer.
  *  \param  key  the EC_KEY object to encode
@@ -1022,7 +1022,7 @@ EC_KEY *d2i_ECPrivateKey(EC_KEY **key, const unsigned char **in, long len);
  *               of bytes needed).
  *  \return 1 on success and 0 if an error occurred.
  */
-int i2d_ECPrivateKey(EC_KEY *key, unsigned char **out);
+int __cdecl i2d_ECPrivateKey(EC_KEY *key, unsigned char **out);
 
 /********************************************************************/
 /*        de- and encoding functions for EC parameters              */
@@ -1035,7 +1035,7 @@ int i2d_ECPrivateKey(EC_KEY *key, unsigned char **out);
  *  \return a EC_KEY object with the decoded parameters or NULL if an error
  *          occurred.
  */
-EC_KEY *d2i_ECParameters(EC_KEY **key, const unsigned char **in, long len);
+EC_KEY * __cdecl d2i_ECParameters(EC_KEY **key, const unsigned char **in, long len);
 
 /** Encodes ec parameter and stores the result in a buffer.
  *  \param  key  the EC_KEY object with ec parameters to encode
@@ -1043,7 +1043,7 @@ EC_KEY *d2i_ECParameters(EC_KEY **key, const unsigned char **in, long len);
  *               of bytes needed).
  *  \return 1 on success and 0 if an error occurred.
  */
-int i2d_ECParameters(EC_KEY *key, unsigned char **out);
+int __cdecl i2d_ECParameters(EC_KEY *key, unsigned char **out);
 
 /********************************************************************/
 /*         de- and encoding functions for EC public key             */
@@ -1057,7 +1057,7 @@ int i2d_ECParameters(EC_KEY *key, unsigned char **out);
  *  \return EC_KEY object with decoded public key or NULL if an error
  *          occurred.
  */
-EC_KEY *o2i_ECPublicKey(EC_KEY **key, const unsigned char **in, long len);
+EC_KEY * __cdecl o2i_ECPublicKey(EC_KEY **key, const unsigned char **in, long len);
 
 /** Encodes a ec public key in an octet string.
  *  \param  key  the EC_KEY object with the public key
@@ -1065,14 +1065,14 @@ EC_KEY *o2i_ECPublicKey(EC_KEY **key, const unsigned char **in, long len);
  *               of bytes needed).
  *  \return 1 on success and 0 if an error occurred
  */
-int i2o_ECPublicKey(const EC_KEY *key, unsigned char **out);
+int __cdecl i2o_ECPublicKey(const EC_KEY *key, unsigned char **out);
 
 /** Prints out the ec parameters on human readable form.
  *  \param  bp   BIO object to which the information is printed
  *  \param  key  EC_KEY object
  *  \return 1 on success and 0 if an error occurred
  */
-int ECParameters_print(BIO *bp, const EC_KEY *key);
+int __cdecl ECParameters_print(BIO *bp, const EC_KEY *key);
 
 /** Prints out the contents of a EC_KEY object
  *  \param  bp   BIO object to which the information is printed
@@ -1080,7 +1080,7 @@ int ECParameters_print(BIO *bp, const EC_KEY *key);
  *  \param  off  line offset
  *  \return 1 on success and 0 if an error occurred
  */
-int EC_KEY_print(BIO *bp, const EC_KEY *key, int off);
+int __cdecl EC_KEY_print(BIO *bp, const EC_KEY *key, int off);
 
 # ifndef OPENSSL_NO_STDIO
 /** Prints out the ec parameters on human readable form.
@@ -1088,7 +1088,7 @@ int EC_KEY_print(BIO *bp, const EC_KEY *key, int off);
  *  \param  key  EC_KEY object
  *  \return 1 on success and 0 if an error occurred
  */
-int ECParameters_print_fp(FILE *fp, const EC_KEY *key);
+int __cdecl ECParameters_print_fp(FILE *fp, const EC_KEY *key);
 
 /** Prints out the contents of a EC_KEY object
  *  \param  fp   file descriptor to which the information is printed
@@ -1096,28 +1096,28 @@ int ECParameters_print_fp(FILE *fp, const EC_KEY *key);
  *  \param  off  line offset
  *  \return 1 on success and 0 if an error occurred
  */
-int EC_KEY_print_fp(FILE *fp, const EC_KEY *key, int off);
+int __cdecl EC_KEY_print_fp(FILE *fp, const EC_KEY *key, int off);
 
 # endif
 
-const EC_KEY_METHOD *EC_KEY_OpenSSL(void);
-const EC_KEY_METHOD *EC_KEY_get_default_method(void);
-void EC_KEY_set_default_method(const EC_KEY_METHOD *meth);
-const EC_KEY_METHOD *EC_KEY_get_method(const EC_KEY *key);
-int EC_KEY_set_method(EC_KEY *key, const EC_KEY_METHOD *meth);
-EC_KEY *EC_KEY_new_method(ENGINE *engine);
+const EC_KEY_METHOD * __cdecl EC_KEY_OpenSSL(void);
+const EC_KEY_METHOD * __cdecl EC_KEY_get_default_method(void);
+void __cdecl EC_KEY_set_default_method(const EC_KEY_METHOD *meth);
+const EC_KEY_METHOD * __cdecl EC_KEY_get_method(const EC_KEY *key);
+int __cdecl EC_KEY_set_method(EC_KEY *key, const EC_KEY_METHOD *meth);
+EC_KEY * __cdecl EC_KEY_new_method(ENGINE *engine);
 
 /** The old name for ecdh_KDF_X9_63
  *  The ECDH KDF specification has been mistakingly attributed to ANSI X9.62,
  *  it is actually specified in ANSI X9.63.
  *  This identifier is retained for backwards compatibility
  */
-int ECDH_KDF_X9_62(unsigned char *out, size_t outlen,
+int __cdecl ECDH_KDF_X9_62(unsigned char *out, size_t outlen,
                    const unsigned char *Z, size_t Zlen,
                    const unsigned char *sinfo, size_t sinfolen,
                    const EVP_MD *md);
 
-int ECDH_compute_key(void *out, size_t outlen, const EC_POINT *pub_key,
+int __cdecl ECDH_compute_key(void *out, size_t outlen, const EC_POINT *pub_key,
                      const EC_KEY *ecdh,
                      void *(*KDF) (const void *in, size_t inlen,
                                    void *out, size_t *outlen));
@@ -1127,12 +1127,12 @@ typedef struct ECDSA_SIG_st ECDSA_SIG;
 /** Allocates and initialize a ECDSA_SIG structure
  *  \return pointer to a ECDSA_SIG structure or NULL if an error occurred
  */
-ECDSA_SIG *ECDSA_SIG_new(void);
+ECDSA_SIG * __cdecl ECDSA_SIG_new(void);
 
 /** frees a ECDSA_SIG structure
  *  \param  sig  pointer to the ECDSA_SIG structure
  */
-void ECDSA_SIG_free(ECDSA_SIG *sig);
+void __cdecl ECDSA_SIG_free(ECDSA_SIG *sig);
 
 /** DER encode content of ECDSA_SIG object (note: this function modifies *pp
  *  (*pp += length of the DER encoded signature)).
@@ -1141,7 +1141,7 @@ void ECDSA_SIG_free(ECDSA_SIG *sig);
  *  \return the length of the DER encoded ECDSA_SIG object or a negative value
  *          on error
  */
-int i2d_ECDSA_SIG(const ECDSA_SIG *sig, unsigned char **pp);
+int __cdecl i2d_ECDSA_SIG(const ECDSA_SIG *sig, unsigned char **pp);
 
 /** Decodes a DER encoded ECDSA signature (note: this function changes *pp
  *  (*pp += len)).
@@ -1150,31 +1150,31 @@ int i2d_ECDSA_SIG(const ECDSA_SIG *sig, unsigned char **pp);
  *  \param  len  length of the buffer
  *  \return pointer to the decoded ECDSA_SIG structure (or NULL)
  */
-ECDSA_SIG *d2i_ECDSA_SIG(ECDSA_SIG **sig, const unsigned char **pp, long len);
+ECDSA_SIG * __cdecl d2i_ECDSA_SIG(ECDSA_SIG **sig, const unsigned char **pp, long len);
 
 /** Accessor for r and s fields of ECDSA_SIG
  *  \param  sig  pointer to ECDSA_SIG structure
  *  \param  pr   pointer to BIGNUM pointer for r (may be NULL)
  *  \param  ps   pointer to BIGNUM pointer for s (may be NULL)
  */
-void ECDSA_SIG_get0(const ECDSA_SIG *sig, const BIGNUM **pr, const BIGNUM **ps);
+void __cdecl ECDSA_SIG_get0(const ECDSA_SIG *sig, const BIGNUM **pr, const BIGNUM **ps);
 
 /** Accessor for r field of ECDSA_SIG
  *  \param  sig  pointer to ECDSA_SIG structure
  */
-const BIGNUM *ECDSA_SIG_get0_r(const ECDSA_SIG *sig);
+const BIGNUM * __cdecl ECDSA_SIG_get0_r(const ECDSA_SIG *sig);
 
 /** Accessor for s field of ECDSA_SIG
  *  \param  sig  pointer to ECDSA_SIG structure
  */
-const BIGNUM *ECDSA_SIG_get0_s(const ECDSA_SIG *sig);
+const BIGNUM * __cdecl ECDSA_SIG_get0_s(const ECDSA_SIG *sig);
 
 /** Setter for r and s fields of ECDSA_SIG
  *  \param  sig  pointer to ECDSA_SIG structure
  *  \param  r    pointer to BIGNUM for r (may be NULL)
  *  \param  s    pointer to BIGNUM for s (may be NULL)
  */
-int ECDSA_SIG_set0(ECDSA_SIG *sig, BIGNUM *r, BIGNUM *s);
+int __cdecl ECDSA_SIG_set0(ECDSA_SIG *sig, BIGNUM *r, BIGNUM *s);
 
 /** Computes the ECDSA signature of the given hash value using
  *  the supplied private key and returns the created signature.
@@ -1183,7 +1183,7 @@ int ECDSA_SIG_set0(ECDSA_SIG *sig, BIGNUM *r, BIGNUM *s);
  *  \param  eckey     EC_KEY object containing a private EC key
  *  \return pointer to a ECDSA_SIG structure or NULL if an error occurred
  */
-ECDSA_SIG *ECDSA_do_sign(const unsigned char *dgst, int dgst_len,
+ECDSA_SIG * __cdecl ECDSA_do_sign(const unsigned char *dgst, int dgst_len,
                          EC_KEY *eckey);
 
 /** Computes ECDSA signature of a given hash value using the supplied
@@ -1196,7 +1196,7 @@ ECDSA_SIG *ECDSA_do_sign(const unsigned char *dgst, int dgst_len,
  *  \param  eckey    EC_KEY object containing a private EC key
  *  \return pointer to a ECDSA_SIG structure or NULL if an error occurred
  */
-ECDSA_SIG *ECDSA_do_sign_ex(const unsigned char *dgst, int dgstlen,
+ECDSA_SIG * __cdecl ECDSA_do_sign_ex(const unsigned char *dgst, int dgstlen,
                             const BIGNUM *kinv, const BIGNUM *rp,
                             EC_KEY *eckey);
 
@@ -1209,7 +1209,7 @@ ECDSA_SIG *ECDSA_do_sign_ex(const unsigned char *dgst, int dgstlen,
  *  \return 1 if the signature is valid, 0 if the signature is invalid
  *          and -1 on error
  */
-int ECDSA_do_verify(const unsigned char *dgst, int dgst_len,
+int __cdecl ECDSA_do_verify(const unsigned char *dgst, int dgst_len,
                     const ECDSA_SIG *sig, EC_KEY *eckey);
 
 /** Precompute parts of the signing operation
@@ -1219,7 +1219,7 @@ int ECDSA_do_verify(const unsigned char *dgst, int dgst_len,
  *  \param  rp     BIGNUM pointer for x coordinate of k * generator
  *  \return 1 on success and 0 otherwise
  */
-int ECDSA_sign_setup(EC_KEY *eckey, BN_CTX *ctx, BIGNUM **kinv, BIGNUM **rp);
+int __cdecl ECDSA_sign_setup(EC_KEY *eckey, BN_CTX *ctx, BIGNUM **kinv, BIGNUM **rp);
 
 /** Computes ECDSA signature of a given hash value using the supplied
  *  private key (note: sig must point to ECDSA_size(eckey) bytes of memory).
@@ -1231,7 +1231,7 @@ int ECDSA_sign_setup(EC_KEY *eckey, BN_CTX *ctx, BIGNUM **kinv, BIGNUM **rp);
  *  \param  eckey    EC_KEY object containing a private EC key
  *  \return 1 on success and 0 otherwise
  */
-int ECDSA_sign(int type, const unsigned char *dgst, int dgstlen,
+int __cdecl ECDSA_sign(int type, const unsigned char *dgst, int dgstlen,
                unsigned char *sig, unsigned int *siglen, EC_KEY *eckey);
 
 /** Computes ECDSA signature of a given hash value using the supplied
@@ -1247,7 +1247,7 @@ int ECDSA_sign(int type, const unsigned char *dgst, int dgstlen,
  *  \param  eckey    EC_KEY object containing a private EC key
  *  \return 1 on success and 0 otherwise
  */
-int ECDSA_sign_ex(int type, const unsigned char *dgst, int dgstlen,
+int __cdecl ECDSA_sign_ex(int type, const unsigned char *dgst, int dgstlen,
                   unsigned char *sig, unsigned int *siglen,
                   const BIGNUM *kinv, const BIGNUM *rp, EC_KEY *eckey);
 
@@ -1262,22 +1262,22 @@ int ECDSA_sign_ex(int type, const unsigned char *dgst, int dgstlen,
  *  \return 1 if the signature is valid, 0 if the signature is invalid
  *          and -1 on error
  */
-int ECDSA_verify(int type, const unsigned char *dgst, int dgstlen,
+int __cdecl ECDSA_verify(int type, const unsigned char *dgst, int dgstlen,
                  const unsigned char *sig, int siglen, EC_KEY *eckey);
 
 /** Returns the maximum length of the DER encoded signature
  *  \param  eckey  EC_KEY object
  *  \return numbers of bytes required for the DER encoded signature
  */
-int ECDSA_size(const EC_KEY *eckey);
+int __cdecl ECDSA_size(const EC_KEY *eckey);
 
 /********************************************************************/
 /*  EC_KEY_METHOD constructors, destructors, writers and accessors  */
 /********************************************************************/
 
-EC_KEY_METHOD *EC_KEY_METHOD_new(const EC_KEY_METHOD *meth);
-void EC_KEY_METHOD_free(EC_KEY_METHOD *meth);
-void EC_KEY_METHOD_set_init(EC_KEY_METHOD *meth,
+EC_KEY_METHOD * __cdecl EC_KEY_METHOD_new(const EC_KEY_METHOD *meth);
+void __cdecl EC_KEY_METHOD_free(EC_KEY_METHOD *meth);
+void __cdecl EC_KEY_METHOD_set_init(EC_KEY_METHOD *meth,
                             int (*init)(EC_KEY *key),
                             void (*finish)(EC_KEY *key),
                             int (*copy)(EC_KEY *dest, const EC_KEY *src),
@@ -1287,16 +1287,16 @@ void EC_KEY_METHOD_set_init(EC_KEY_METHOD *meth,
                             int (*set_public)(EC_KEY *key,
                                               const EC_POINT *pub_key));
 
-void EC_KEY_METHOD_set_keygen(EC_KEY_METHOD *meth,
+void __cdecl EC_KEY_METHOD_set_keygen(EC_KEY_METHOD *meth,
                               int (*keygen)(EC_KEY *key));
 
-void EC_KEY_METHOD_set_compute_key(EC_KEY_METHOD *meth,
+void __cdecl EC_KEY_METHOD_set_compute_key(EC_KEY_METHOD *meth,
                                    int (*ckey)(unsigned char **psec,
                                                size_t *pseclen,
                                                const EC_POINT *pub_key,
                                                const EC_KEY *ecdh));
 
-void EC_KEY_METHOD_set_sign(EC_KEY_METHOD *meth,
+void __cdecl EC_KEY_METHOD_set_sign(EC_KEY_METHOD *meth,
                             int (*sign)(int type, const unsigned char *dgst,
                                         int dlen, unsigned char *sig,
                                         unsigned int *siglen,
@@ -1310,7 +1310,7 @@ void EC_KEY_METHOD_set_sign(EC_KEY_METHOD *meth,
                                                    const BIGNUM *in_r,
                                                    EC_KEY *eckey));
 
-void EC_KEY_METHOD_set_verify(EC_KEY_METHOD *meth,
+void __cdecl EC_KEY_METHOD_set_verify(EC_KEY_METHOD *meth,
                               int (*verify)(int type, const unsigned
                                             char *dgst, int dgst_len,
                                             const unsigned char *sigbuf,
@@ -1320,7 +1320,7 @@ void EC_KEY_METHOD_set_verify(EC_KEY_METHOD *meth,
                                                 const ECDSA_SIG *sig,
                                                 EC_KEY *eckey));
 
-void EC_KEY_METHOD_get_init(const EC_KEY_METHOD *meth,
+void __cdecl EC_KEY_METHOD_get_init(const EC_KEY_METHOD *meth,
                             int (**pinit)(EC_KEY *key),
                             void (**pfinish)(EC_KEY *key),
                             int (**pcopy)(EC_KEY *dest, const EC_KEY *src),
@@ -1331,16 +1331,16 @@ void EC_KEY_METHOD_get_init(const EC_KEY_METHOD *meth,
                             int (**pset_public)(EC_KEY *key,
                                                 const EC_POINT *pub_key));
 
-void EC_KEY_METHOD_get_keygen(const EC_KEY_METHOD *meth,
+void __cdecl EC_KEY_METHOD_get_keygen(const EC_KEY_METHOD *meth,
                               int (**pkeygen)(EC_KEY *key));
 
-void EC_KEY_METHOD_get_compute_key(const EC_KEY_METHOD *meth,
+void __cdecl EC_KEY_METHOD_get_compute_key(const EC_KEY_METHOD *meth,
                                    int (**pck)(unsigned char **psec,
                                                size_t *pseclen,
                                                const EC_POINT *pub_key,
                                                const EC_KEY *ecdh));
 
-void EC_KEY_METHOD_get_sign(const EC_KEY_METHOD *meth,
+void __cdecl EC_KEY_METHOD_get_sign(const EC_KEY_METHOD *meth,
                             int (**psign)(int type, const unsigned char *dgst,
                                           int dlen, unsigned char *sig,
                                           unsigned int *siglen,
@@ -1354,7 +1354,7 @@ void EC_KEY_METHOD_get_sign(const EC_KEY_METHOD *meth,
                                                      const BIGNUM *in_r,
                                                      EC_KEY *eckey));
 
-void EC_KEY_METHOD_get_verify(const EC_KEY_METHOD *meth,
+void __cdecl EC_KEY_METHOD_get_verify(const EC_KEY_METHOD *meth,
                               int (**pverify)(int type, const unsigned
                                               char *dgst, int dgst_len,
                                               const unsigned char *sigbuf,
diff --git a/include/openssl/ecerr.h b/include/openssl/ecerr.h
index f7b9183456..e1b9ba1a1e 100644
--- a/include/openssl/ecerr.h
+++ b/include/openssl/ecerr.h
@@ -22,7 +22,7 @@
 #  ifdef  __cplusplus
 extern "C"
 #  endif
-int ERR_load_EC_strings(void);
+int __cdecl ERR_load_EC_strings(void);
 
 /*
  * EC function codes.
diff --git a/include/openssl/engine.h b/include/openssl/engine.h
index 0780f0fb5f..db0aceffdd 100644
--- a/include/openssl/engine.h
+++ b/include/openssl/engine.h
@@ -256,17 +256,17 @@ typedef struct ENGINE_CMD_DEFN_st {
 } ENGINE_CMD_DEFN;
 
 /* Generic function pointer */
-typedef int (*ENGINE_GEN_FUNC_PTR) (void);
+typedef int (__cdecl *ENGINE_GEN_FUNC_PTR) (void);
 /* Generic function pointer taking no arguments */
-typedef int (*ENGINE_GEN_INT_FUNC_PTR) (ENGINE *);
+typedef int (__cdecl *ENGINE_GEN_INT_FUNC_PTR) (ENGINE *);
 /* Specific control function pointer */
-typedef int (*ENGINE_CTRL_FUNC_PTR) (ENGINE *, int, long, void *,
-                                     void (*f) (void));
+typedef int (__cdecl *ENGINE_CTRL_FUNC_PTR) (ENGINE *, int, long, void *,
+                                     void (__cdecl *f) (void));
 /* Generic load_key function pointer */
-typedef EVP_PKEY *(*ENGINE_LOAD_KEY_PTR)(ENGINE *, const char *,
+typedef EVP_PKEY *(__cdecl *ENGINE_LOAD_KEY_PTR)(ENGINE *, const char *,
                                          UI_METHOD *ui_method,
                                          void *callback_data);
-typedef int (*ENGINE_SSL_CLIENT_CERT_PTR) (ENGINE *, SSL *ssl,
+typedef int (__cdecl *ENGINE_SSL_CLIENT_CERT_PTR) (ENGINE *, SSL *ssl,
                                            STACK_OF(X509_NAME) *ca_dn,
                                            X509 **pcert, EVP_PKEY **pkey,
                                            STACK_OF(X509) **pother,
@@ -287,13 +287,13 @@ typedef int (*ENGINE_SSL_CLIENT_CERT_PTR) (ENGINE *, SSL *ssl,
  * Returns to a pointer to the array of supported cipher 'nid's. If the
  * second parameter is non-NULL it is set to the size of the returned array.
  */
-typedef int (*ENGINE_CIPHERS_PTR) (ENGINE *, const EVP_CIPHER **,
+typedef int (__cdecl *ENGINE_CIPHERS_PTR) (ENGINE *, const EVP_CIPHER **,
                                    const int **, int);
-typedef int (*ENGINE_DIGESTS_PTR) (ENGINE *, const EVP_MD **, const int **,
+typedef int (__cdecl *ENGINE_DIGESTS_PTR) (ENGINE *, const EVP_MD **, const int **,
                                    int);
-typedef int (*ENGINE_PKEY_METHS_PTR) (ENGINE *, EVP_PKEY_METHOD **,
+typedef int (__cdecl *ENGINE_PKEY_METHS_PTR) (ENGINE *, EVP_PKEY_METHOD **,
                                       const int **, int);
-typedef int (*ENGINE_PKEY_ASN1_METHS_PTR) (ENGINE *, EVP_PKEY_ASN1_METHOD **,
+typedef int (__cdecl *ENGINE_PKEY_ASN1_METHS_PTR) (ENGINE *, EVP_PKEY_ASN1_METHOD **,
                                            const int **, int);
 /*
  * STRUCTURE functions ... all of these functions deal with pointers to
@@ -308,17 +308,17 @@ typedef int (*ENGINE_PKEY_ASN1_METHS_PTR) (ENGINE *, EVP_PKEY_ASN1_METHOD **,
  */
 
 /* Get the first/last "ENGINE" type available. */
-ENGINE *ENGINE_get_first(void);
-ENGINE *ENGINE_get_last(void);
+ENGINE * __cdecl ENGINE_get_first(void);
+ENGINE * __cdecl ENGINE_get_last(void);
 /* Iterate to the next/previous "ENGINE" type (NULL = end of the list). */
-ENGINE *ENGINE_get_next(ENGINE *e);
-ENGINE *ENGINE_get_prev(ENGINE *e);
+ENGINE * __cdecl ENGINE_get_next(ENGINE *e);
+ENGINE * __cdecl ENGINE_get_prev(ENGINE *e);
 /* Add another "ENGINE" type into the array. */
-int ENGINE_add(ENGINE *e);
+int __cdecl ENGINE_add(ENGINE *e);
 /* Remove an existing "ENGINE" type from the array. */
-int ENGINE_remove(ENGINE *e);
+int __cdecl ENGINE_remove(ENGINE *e);
 /* Retrieve an engine from the list by its unique "id" value. */
-ENGINE *ENGINE_by_id(const char *id);
+ENGINE * __cdecl ENGINE_by_id(const char *id);
 
 #if OPENSSL_API_COMPAT < 0x10100000L
 # define ENGINE_load_openssl() \
@@ -338,14 +338,14 @@ ENGINE *ENGINE_by_id(const char *id);
 # define ENGINE_load_rdrand() \
     OPENSSL_init_crypto(OPENSSL_INIT_ENGINE_RDRAND, NULL)
 #endif
-void ENGINE_load_builtin_engines(void);
+void __cdecl ENGINE_load_builtin_engines(void);
 
 /*
  * Get and set global flags (ENGINE_TABLE_FLAG_***) for the implementation
  * "registry" handling.
  */
-unsigned int ENGINE_get_table_flags(void);
-void ENGINE_set_table_flags(unsigned int flags);
+unsigned int __cdecl ENGINE_get_table_flags(void);
+void __cdecl ENGINE_set_table_flags(unsigned int flags);
 
 /*- Manage registration of ENGINEs per "table". For each type, there are 3
  * functions;
@@ -355,41 +355,41 @@ void ENGINE_set_table_flags(unsigned int flags);
  * Cleanup is automatically registered from each table when required.
  */
 
-int ENGINE_register_RSA(ENGINE *e);
-void ENGINE_unregister_RSA(ENGINE *e);
-void ENGINE_register_all_RSA(void);
+int __cdecl ENGINE_register_RSA(ENGINE *e);
+void __cdecl ENGINE_unregister_RSA(ENGINE *e);
+void __cdecl ENGINE_register_all_RSA(void);
 
-int ENGINE_register_DSA(ENGINE *e);
-void ENGINE_unregister_DSA(ENGINE *e);
-void ENGINE_register_all_DSA(void);
+int __cdecl ENGINE_register_DSA(ENGINE *e);
+void __cdecl ENGINE_unregister_DSA(ENGINE *e);
+void __cdecl ENGINE_register_all_DSA(void);
 
-int ENGINE_register_EC(ENGINE *e);
-void ENGINE_unregister_EC(ENGINE *e);
-void ENGINE_register_all_EC(void);
+int __cdecl ENGINE_register_EC(ENGINE *e);
+void __cdecl ENGINE_unregister_EC(ENGINE *e);
+void __cdecl ENGINE_register_all_EC(void);
 
-int ENGINE_register_DH(ENGINE *e);
-void ENGINE_unregister_DH(ENGINE *e);
-void ENGINE_register_all_DH(void);
+int __cdecl ENGINE_register_DH(ENGINE *e);
+void __cdecl ENGINE_unregister_DH(ENGINE *e);
+void __cdecl ENGINE_register_all_DH(void);
 
-int ENGINE_register_RAND(ENGINE *e);
-void ENGINE_unregister_RAND(ENGINE *e);
-void ENGINE_register_all_RAND(void);
+int __cdecl ENGINE_register_RAND(ENGINE *e);
+void __cdecl ENGINE_unregister_RAND(ENGINE *e);
+void __cdecl ENGINE_register_all_RAND(void);
 
-int ENGINE_register_ciphers(ENGINE *e);
-void ENGINE_unregister_ciphers(ENGINE *e);
-void ENGINE_register_all_ciphers(void);
+int __cdecl ENGINE_register_ciphers(ENGINE *e);
+void __cdecl ENGINE_unregister_ciphers(ENGINE *e);
+void __cdecl ENGINE_register_all_ciphers(void);
 
-int ENGINE_register_digests(ENGINE *e);
-void ENGINE_unregister_digests(ENGINE *e);
-void ENGINE_register_all_digests(void);
+int __cdecl ENGINE_register_digests(ENGINE *e);
+void __cdecl ENGINE_unregister_digests(ENGINE *e);
+void __cdecl ENGINE_register_all_digests(void);
 
-int ENGINE_register_pkey_meths(ENGINE *e);
-void ENGINE_unregister_pkey_meths(ENGINE *e);
-void ENGINE_register_all_pkey_meths(void);
+int __cdecl ENGINE_register_pkey_meths(ENGINE *e);
+void __cdecl ENGINE_unregister_pkey_meths(ENGINE *e);
+void __cdecl ENGINE_register_all_pkey_meths(void);
 
-int ENGINE_register_pkey_asn1_meths(ENGINE *e);
-void ENGINE_unregister_pkey_asn1_meths(ENGINE *e);
-void ENGINE_register_all_pkey_asn1_meths(void);
+int __cdecl ENGINE_register_pkey_asn1_meths(ENGINE *e);
+void __cdecl ENGINE_unregister_pkey_asn1_meths(ENGINE *e);
+void __cdecl ENGINE_register_all_pkey_asn1_meths(void);
 
 /*
  * These functions register all support from the above categories. Note, use
@@ -397,8 +397,8 @@ void ENGINE_register_all_pkey_asn1_meths(void);
  * may not need. If you only need a subset of functionality, consider using
  * more selective initialisation.
  */
-int ENGINE_register_complete(ENGINE *e);
-int ENGINE_register_all_complete(void);
+int __cdecl ENGINE_register_complete(ENGINE *e);
+int __cdecl ENGINE_register_all_complete(void);
 
 /*
  * Send parameterised control commands to the engine. The possibilities to
@@ -410,7 +410,7 @@ int ENGINE_register_all_complete(void);
  * commands that require an operational ENGINE, and only use functional
  * references in such situations.
  */
-int ENGINE_ctrl(ENGINE *e, int cmd, long i, void *p, void (*f) (void));
+int __cdecl ENGINE_ctrl(ENGINE *e, int cmd, long i, void *p, void (__cdecl *f) (void));
 
 /*
  * This function tests if an ENGINE-specific command is usable as a
@@ -418,7 +418,7 @@ int ENGINE_ctrl(ENGINE *e, int cmd, long i, void *p, void (*f) (void));
  * ENGINE_ctrl_cmd_string(). If this returns zero, it is not available to
  * ENGINE_ctrl_cmd_string(), only ENGINE_ctrl().
  */
-int ENGINE_cmd_is_executable(ENGINE *e, int cmd);
+int __cdecl ENGINE_cmd_is_executable(ENGINE *e, int cmd);
 
 /*
  * This function works like ENGINE_ctrl() with the exception of taking a
@@ -426,8 +426,8 @@ int ENGINE_cmd_is_executable(ENGINE *e, int cmd);
  * commands. See the comment on ENGINE_ctrl_cmd_string() for an explanation
  * on how to use the cmd_name and cmd_optional.
  */
-int ENGINE_ctrl_cmd(ENGINE *e, const char *cmd_name,
-                    long i, void *p, void (*f) (void), int cmd_optional);
+int __cdecl ENGINE_ctrl_cmd(ENGINE *e, const char *cmd_name,
+                    long i, void *p, void (__cdecl *f) (void), int cmd_optional);
 
 /*
  * This function passes a command-name and argument to an ENGINE. The
@@ -451,7 +451,7 @@ int ENGINE_ctrl_cmd(ENGINE *e, const char *cmd_name,
  * applications can work consistently with the same configuration for the
  * same ENGINE-enabled devices, across applications.
  */
-int ENGINE_ctrl_cmd_string(ENGINE *e, const char *cmd_name, const char *arg,
+int __cdecl ENGINE_ctrl_cmd_string(ENGINE *e, const char *cmd_name, const char *arg,
                            int cmd_optional);
 
 /*
@@ -462,37 +462,37 @@ int ENGINE_ctrl_cmd_string(ENGINE *e, const char *cmd_name, const char *arg,
  * These are also here so that the ENGINE structure doesn't have to be
  * exposed and break binary compatibility!
  */
-ENGINE *ENGINE_new(void);
-int ENGINE_free(ENGINE *e);
-int ENGINE_up_ref(ENGINE *e);
-int ENGINE_set_id(ENGINE *e, const char *id);
-int ENGINE_set_name(ENGINE *e, const char *name);
-int ENGINE_set_RSA(ENGINE *e, const RSA_METHOD *rsa_meth);
-int ENGINE_set_DSA(ENGINE *e, const DSA_METHOD *dsa_meth);
-int ENGINE_set_EC(ENGINE *e, const EC_KEY_METHOD *ecdsa_meth);
-int ENGINE_set_DH(ENGINE *e, const DH_METHOD *dh_meth);
-int ENGINE_set_RAND(ENGINE *e, const RAND_METHOD *rand_meth);
-int ENGINE_set_destroy_function(ENGINE *e, ENGINE_GEN_INT_FUNC_PTR destroy_f);
-int ENGINE_set_init_function(ENGINE *e, ENGINE_GEN_INT_FUNC_PTR init_f);
-int ENGINE_set_finish_function(ENGINE *e, ENGINE_GEN_INT_FUNC_PTR finish_f);
-int ENGINE_set_ctrl_function(ENGINE *e, ENGINE_CTRL_FUNC_PTR ctrl_f);
-int ENGINE_set_load_privkey_function(ENGINE *e,
+ENGINE * __cdecl ENGINE_new(void);
+int __cdecl ENGINE_free(ENGINE *e);
+int __cdecl ENGINE_up_ref(ENGINE *e);
+int __cdecl ENGINE_set_id(ENGINE *e, const char *id);
+int __cdecl ENGINE_set_name(ENGINE *e, const char *name);
+int __cdecl ENGINE_set_RSA(ENGINE *e, const RSA_METHOD *rsa_meth);
+int __cdecl ENGINE_set_DSA(ENGINE *e, const DSA_METHOD *dsa_meth);
+int __cdecl ENGINE_set_EC(ENGINE *e, const EC_KEY_METHOD *ecdsa_meth);
+int __cdecl ENGINE_set_DH(ENGINE *e, const DH_METHOD *dh_meth);
+int __cdecl ENGINE_set_RAND(ENGINE *e, const RAND_METHOD *rand_meth);
+int __cdecl ENGINE_set_destroy_function(ENGINE *e, ENGINE_GEN_INT_FUNC_PTR destroy_f);
+int __cdecl ENGINE_set_init_function(ENGINE *e, ENGINE_GEN_INT_FUNC_PTR init_f);
+int __cdecl ENGINE_set_finish_function(ENGINE *e, ENGINE_GEN_INT_FUNC_PTR finish_f);
+int __cdecl ENGINE_set_ctrl_function(ENGINE *e, ENGINE_CTRL_FUNC_PTR ctrl_f);
+int __cdecl ENGINE_set_load_privkey_function(ENGINE *e,
                                      ENGINE_LOAD_KEY_PTR loadpriv_f);
-int ENGINE_set_load_pubkey_function(ENGINE *e, ENGINE_LOAD_KEY_PTR loadpub_f);
-int ENGINE_set_load_ssl_client_cert_function(ENGINE *e,
+int __cdecl ENGINE_set_load_pubkey_function(ENGINE *e, ENGINE_LOAD_KEY_PTR loadpub_f);
+int __cdecl ENGINE_set_load_ssl_client_cert_function(ENGINE *e,
                                              ENGINE_SSL_CLIENT_CERT_PTR
                                              loadssl_f);
-int ENGINE_set_ciphers(ENGINE *e, ENGINE_CIPHERS_PTR f);
-int ENGINE_set_digests(ENGINE *e, ENGINE_DIGESTS_PTR f);
-int ENGINE_set_pkey_meths(ENGINE *e, ENGINE_PKEY_METHS_PTR f);
-int ENGINE_set_pkey_asn1_meths(ENGINE *e, ENGINE_PKEY_ASN1_METHS_PTR f);
-int ENGINE_set_flags(ENGINE *e, int flags);
-int ENGINE_set_cmd_defns(ENGINE *e, const ENGINE_CMD_DEFN *defns);
+int __cdecl ENGINE_set_ciphers(ENGINE *e, ENGINE_CIPHERS_PTR f);
+int __cdecl ENGINE_set_digests(ENGINE *e, ENGINE_DIGESTS_PTR f);
+int __cdecl ENGINE_set_pkey_meths(ENGINE *e, ENGINE_PKEY_METHS_PTR f);
+int __cdecl ENGINE_set_pkey_asn1_meths(ENGINE *e, ENGINE_PKEY_ASN1_METHS_PTR f);
+int __cdecl ENGINE_set_flags(ENGINE *e, int flags);
+int __cdecl ENGINE_set_cmd_defns(ENGINE *e, const ENGINE_CMD_DEFN *defns);
 /* These functions allow control over any per-structure ENGINE data. */
 #define ENGINE_get_ex_new_index(l, p, newf, dupf, freef) \
     CRYPTO_get_ex_new_index(CRYPTO_EX_INDEX_ENGINE, l, p, newf, dupf, freef)
-int ENGINE_set_ex_data(ENGINE *e, int idx, void *arg);
-void *ENGINE_get_ex_data(const ENGINE *e, int idx);
+int __cdecl ENGINE_set_ex_data(ENGINE *e, int idx, void *arg);
+void * __cdecl ENGINE_get_ex_data(const ENGINE *e, int idx);
 
 #if OPENSSL_API_COMPAT < 0x10100000L
 /*
@@ -508,37 +508,37 @@ void *ENGINE_get_ex_data(const ENGINE *e, int idx);
  * which you obtained. Using the result for functional purposes if you only
  * obtained a structural reference may be problematic!
  */
-const char *ENGINE_get_id(const ENGINE *e);
-const char *ENGINE_get_name(const ENGINE *e);
-const RSA_METHOD *ENGINE_get_RSA(const ENGINE *e);
-const DSA_METHOD *ENGINE_get_DSA(const ENGINE *e);
-const EC_KEY_METHOD *ENGINE_get_EC(const ENGINE *e);
-const DH_METHOD *ENGINE_get_DH(const ENGINE *e);
-const RAND_METHOD *ENGINE_get_RAND(const ENGINE *e);
-ENGINE_GEN_INT_FUNC_PTR ENGINE_get_destroy_function(const ENGINE *e);
-ENGINE_GEN_INT_FUNC_PTR ENGINE_get_init_function(const ENGINE *e);
-ENGINE_GEN_INT_FUNC_PTR ENGINE_get_finish_function(const ENGINE *e);
-ENGINE_CTRL_FUNC_PTR ENGINE_get_ctrl_function(const ENGINE *e);
-ENGINE_LOAD_KEY_PTR ENGINE_get_load_privkey_function(const ENGINE *e);
-ENGINE_LOAD_KEY_PTR ENGINE_get_load_pubkey_function(const ENGINE *e);
-ENGINE_SSL_CLIENT_CERT_PTR ENGINE_get_ssl_client_cert_function(const ENGINE
+const char * __cdecl ENGINE_get_id(const ENGINE *e);
+const char * __cdecl ENGINE_get_name(const ENGINE *e);
+const RSA_METHOD * __cdecl ENGINE_get_RSA(const ENGINE *e);
+const DSA_METHOD * __cdecl ENGINE_get_DSA(const ENGINE *e);
+const EC_KEY_METHOD * __cdecl ENGINE_get_EC(const ENGINE *e);
+const DH_METHOD * __cdecl ENGINE_get_DH(const ENGINE *e);
+const RAND_METHOD * __cdecl ENGINE_get_RAND(const ENGINE *e);
+ENGINE_GEN_INT_FUNC_PTR __cdecl ENGINE_get_destroy_function(const ENGINE *e);
+ENGINE_GEN_INT_FUNC_PTR __cdecl ENGINE_get_init_function(const ENGINE *e);
+ENGINE_GEN_INT_FUNC_PTR __cdecl ENGINE_get_finish_function(const ENGINE *e);
+ENGINE_CTRL_FUNC_PTR __cdecl ENGINE_get_ctrl_function(const ENGINE *e);
+ENGINE_LOAD_KEY_PTR __cdecl ENGINE_get_load_privkey_function(const ENGINE *e);
+ENGINE_LOAD_KEY_PTR __cdecl ENGINE_get_load_pubkey_function(const ENGINE *e);
+ENGINE_SSL_CLIENT_CERT_PTR __cdecl ENGINE_get_ssl_client_cert_function(const ENGINE
                                                                *e);
-ENGINE_CIPHERS_PTR ENGINE_get_ciphers(const ENGINE *e);
-ENGINE_DIGESTS_PTR ENGINE_get_digests(const ENGINE *e);
-ENGINE_PKEY_METHS_PTR ENGINE_get_pkey_meths(const ENGINE *e);
-ENGINE_PKEY_ASN1_METHS_PTR ENGINE_get_pkey_asn1_meths(const ENGINE *e);
-const EVP_CIPHER *ENGINE_get_cipher(ENGINE *e, int nid);
-const EVP_MD *ENGINE_get_digest(ENGINE *e, int nid);
-const EVP_PKEY_METHOD *ENGINE_get_pkey_meth(ENGINE *e, int nid);
-const EVP_PKEY_ASN1_METHOD *ENGINE_get_pkey_asn1_meth(ENGINE *e, int nid);
-const EVP_PKEY_ASN1_METHOD *ENGINE_get_pkey_asn1_meth_str(ENGINE *e,
+ENGINE_CIPHERS_PTR __cdecl ENGINE_get_ciphers(const ENGINE *e);
+ENGINE_DIGESTS_PTR __cdecl ENGINE_get_digests(const ENGINE *e);
+ENGINE_PKEY_METHS_PTR __cdecl ENGINE_get_pkey_meths(const ENGINE *e);
+ENGINE_PKEY_ASN1_METHS_PTR __cdecl ENGINE_get_pkey_asn1_meths(const ENGINE *e);
+const EVP_CIPHER * __cdecl ENGINE_get_cipher(ENGINE *e, int nid);
+const EVP_MD * __cdecl ENGINE_get_digest(ENGINE *e, int nid);
+const EVP_PKEY_METHOD * __cdecl ENGINE_get_pkey_meth(ENGINE *e, int nid);
+const EVP_PKEY_ASN1_METHOD * __cdecl ENGINE_get_pkey_asn1_meth(ENGINE *e, int nid);
+const EVP_PKEY_ASN1_METHOD * __cdecl ENGINE_get_pkey_asn1_meth_str(ENGINE *e,
                                                           const char *str,
                                                           int len);
-const EVP_PKEY_ASN1_METHOD *ENGINE_pkey_asn1_find_str(ENGINE **pe,
+const EVP_PKEY_ASN1_METHOD * __cdecl ENGINE_pkey_asn1_find_str(ENGINE **pe,
                                                       const char *str,
                                                       int len);
-const ENGINE_CMD_DEFN *ENGINE_get_cmd_defns(const ENGINE *e);
-int ENGINE_get_flags(const ENGINE *e);
+const ENGINE_CMD_DEFN * __cdecl ENGINE_get_cmd_defns(const ENGINE *e);
+int __cdecl ENGINE_get_flags(const ENGINE *e);
 
 /*
  * FUNCTIONAL functions. These functions deal with ENGINE structures that
@@ -558,24 +558,24 @@ int ENGINE_get_flags(const ENGINE *e);
  * already in use). This will fail if the engine is not currently operational
  * and cannot initialise.
  */
-int ENGINE_init(ENGINE *e);
+int __cdecl ENGINE_init(ENGINE *e);
 /*
  * Free a functional reference to a engine type. This does not require a
  * corresponding call to ENGINE_free as it also releases a structural
  * reference.
  */
-int ENGINE_finish(ENGINE *e);
+int __cdecl ENGINE_finish(ENGINE *e);
 
 /*
  * The following functions handle keys that are stored in some secondary
  * location, handled by the engine.  The storage may be on a card or
  * whatever.
  */
-EVP_PKEY *ENGINE_load_private_key(ENGINE *e, const char *key_id,
+EVP_PKEY * __cdecl ENGINE_load_private_key(ENGINE *e, const char *key_id,
                                   UI_METHOD *ui_method, void *callback_data);
-EVP_PKEY *ENGINE_load_public_key(ENGINE *e, const char *key_id,
+EVP_PKEY * __cdecl ENGINE_load_public_key(ENGINE *e, const char *key_id,
                                  UI_METHOD *ui_method, void *callback_data);
-int ENGINE_load_ssl_client_cert(ENGINE *e, SSL *s,
+int __cdecl ENGINE_load_ssl_client_cert(ENGINE *e, SSL *s,
                                 STACK_OF(X509_NAME) *ca_dn, X509 **pcert,
                                 EVP_PKEY **ppkey, STACK_OF(X509) **pother,
                                 UI_METHOD *ui_method, void *callback_data);
@@ -586,20 +586,20 @@ int ENGINE_load_ssl_client_cert(ENGINE *e, SSL *s,
  * incremented reference, so it should be free'd (ENGINE_finish) before it is
  * discarded.
  */
-ENGINE *ENGINE_get_default_RSA(void);
+ENGINE * __cdecl ENGINE_get_default_RSA(void);
 /* Same for the other "methods" */
-ENGINE *ENGINE_get_default_DSA(void);
-ENGINE *ENGINE_get_default_EC(void);
-ENGINE *ENGINE_get_default_DH(void);
-ENGINE *ENGINE_get_default_RAND(void);
+ENGINE * __cdecl ENGINE_get_default_DSA(void);
+ENGINE * __cdecl ENGINE_get_default_EC(void);
+ENGINE * __cdecl ENGINE_get_default_DH(void);
+ENGINE * __cdecl ENGINE_get_default_RAND(void);
 /*
  * These functions can be used to get a functional reference to perform
  * ciphering or digesting corresponding to "nid".
  */
-ENGINE *ENGINE_get_cipher_engine(int nid);
-ENGINE *ENGINE_get_digest_engine(int nid);
-ENGINE *ENGINE_get_pkey_meth_engine(int nid);
-ENGINE *ENGINE_get_pkey_asn1_meth_engine(int nid);
+ENGINE * __cdecl ENGINE_get_cipher_engine(int nid);
+ENGINE * __cdecl ENGINE_get_digest_engine(int nid);
+ENGINE * __cdecl ENGINE_get_pkey_meth_engine(int nid);
+ENGINE * __cdecl ENGINE_get_pkey_asn1_meth_engine(int nid);
 
 /*
  * This sets a new default ENGINE structure for performing RSA operations. If
@@ -607,17 +607,17 @@ ENGINE *ENGINE_get_pkey_asn1_meth_engine(int nid);
  * its reference count up'd so the caller should still free their own
  * reference 'e'.
  */
-int ENGINE_set_default_RSA(ENGINE *e);
-int ENGINE_set_default_string(ENGINE *e, const char *def_list);
+int __cdecl ENGINE_set_default_RSA(ENGINE *e);
+int __cdecl ENGINE_set_default_string(ENGINE *e, const char *def_list);
 /* Same for the other "methods" */
-int ENGINE_set_default_DSA(ENGINE *e);
-int ENGINE_set_default_EC(ENGINE *e);
-int ENGINE_set_default_DH(ENGINE *e);
-int ENGINE_set_default_RAND(ENGINE *e);
-int ENGINE_set_default_ciphers(ENGINE *e);
-int ENGINE_set_default_digests(ENGINE *e);
-int ENGINE_set_default_pkey_meths(ENGINE *e);
-int ENGINE_set_default_pkey_asn1_meths(ENGINE *e);
+int __cdecl ENGINE_set_default_DSA(ENGINE *e);
+int __cdecl ENGINE_set_default_EC(ENGINE *e);
+int __cdecl ENGINE_set_default_DH(ENGINE *e);
+int __cdecl ENGINE_set_default_RAND(ENGINE *e);
+int __cdecl ENGINE_set_default_ciphers(ENGINE *e);
+int __cdecl ENGINE_set_default_digests(ENGINE *e);
+int __cdecl ENGINE_set_default_pkey_meths(ENGINE *e);
+int __cdecl ENGINE_set_default_pkey_asn1_meths(ENGINE *e);
 
 /*
  * The combination "set" - the flags are bitwise "OR"d from the
@@ -626,9 +626,9 @@ int ENGINE_set_default_pkey_asn1_meths(ENGINE *e);
  * application requires only specific functionality, consider using more
  * selective functions.
  */
-int ENGINE_set_default(ENGINE *e, unsigned int flags);
+int __cdecl ENGINE_set_default(ENGINE *e, unsigned int flags);
 
-void ENGINE_add_conf_module(void);
+void __cdecl ENGINE_add_conf_module(void);
 
 /* Deprecated functions ... */
 /* int ENGINE_clear_defaults(void); */
@@ -656,9 +656,9 @@ void ENGINE_add_conf_module(void);
  * same static data as the calling application (or library), and thus whether
  * these callbacks need to be set or not.
  */
-typedef void *(*dyn_MEM_malloc_fn) (size_t, const char *, int);
-typedef void *(*dyn_MEM_realloc_fn) (void *, size_t, const char *, int);
-typedef void (*dyn_MEM_free_fn) (void *, const char *, int);
+typedef void *(__cdecl *dyn_MEM_malloc_fn) (size_t, const char *, int);
+typedef void *(__cdecl *dyn_MEM_realloc_fn) (void *, size_t, const char *, int);
+typedef void (__cdecl *dyn_MEM_free_fn) (void *, const char *, int);
 typedef struct st_dynamic_MEM_fns {
     dyn_MEM_malloc_fn malloc_fn;
     dyn_MEM_realloc_fn realloc_fn;
@@ -686,7 +686,7 @@ typedef struct st_dynamic_fns {
  * implementation can be fully instantiated with
  * IMPLEMENT_DYNAMIC_CHECK_FN().
  */
-typedef unsigned long (*dynamic_v_check_fn) (unsigned long ossl_version);
+typedef unsigned long (__cdecl *dynamic_v_check_fn) (unsigned long ossl_version);
 # define IMPLEMENT_DYNAMIC_CHECK_FN() \
         OPENSSL_EXPORT unsigned long v_check(unsigned long v); \
         OPENSSL_EXPORT unsigned long v_check(unsigned long v) { \
@@ -711,7 +711,7 @@ typedef unsigned long (*dynamic_v_check_fn) (unsigned long ossl_version);
  * returns an int value (zero for failure). 'fn' should have prototype;
  * [static] int fn(ENGINE *e, const char *id);
  */
-typedef int (*dynamic_bind_engine) (ENGINE *e, const char *id,
+typedef int (__cdecl *dynamic_bind_engine) (ENGINE *e, const char *id,
                                     const dynamic_fns *fns);
 # define IMPLEMENT_DYNAMIC_BIND_FN(fn) \
         OPENSSL_EXPORT \
@@ -737,7 +737,7 @@ typedef int (*dynamic_bind_engine) (ENGINE *e, const char *id,
  * static data and let the loading application and loaded ENGINE compare
  * their respective values.
  */
-void *ENGINE_get_static_state(void);
+void * __cdecl ENGINE_get_static_state(void);
 
 # if defined(__OpenBSD__) || defined(__FreeBSD__) || defined(__DragonFly__)
 DEPRECATEDIN_1_1_0(void ENGINE_setup_bsd_cryptodev(void))
diff --git a/include/openssl/engineerr.h b/include/openssl/engineerr.h
index 05e84bd2a2..9741156b33 100644
--- a/include/openssl/engineerr.h
+++ b/include/openssl/engineerr.h
@@ -22,7 +22,7 @@
 #  ifdef  __cplusplus
 extern "C"
 #  endif
-int ERR_load_ENGINE_strings(void);
+int __cdecl ERR_load_ENGINE_strings(void);
 
 /*
  * ENGINE function codes.
diff --git a/include/openssl/err.h b/include/openssl/err.h
index b49f88129e..2a38ee5779 100644
--- a/include/openssl/err.h
+++ b/include/openssl/err.h
@@ -217,39 +217,39 @@ typedef struct ERR_string_data_st {
 
 DEFINE_LHASH_OF(ERR_STRING_DATA);
 
-void ERR_put_error(int lib, int func, int reason, const char *file, int line);
-void ERR_set_error_data(char *data, int flags);
+void __cdecl ERR_put_error(int lib, int func, int reason, const char *file, int line);
+void __cdecl ERR_set_error_data(char *data, int flags);
 
-unsigned long ERR_get_error(void);
-unsigned long ERR_get_error_line(const char **file, int *line);
-unsigned long ERR_get_error_line_data(const char **file, int *line,
+unsigned long __cdecl ERR_get_error(void);
+unsigned long __cdecl ERR_get_error_line(const char **file, int *line);
+unsigned long __cdecl ERR_get_error_line_data(const char **file, int *line,
                                       const char **data, int *flags);
-unsigned long ERR_peek_error(void);
-unsigned long ERR_peek_error_line(const char **file, int *line);
-unsigned long ERR_peek_error_line_data(const char **file, int *line,
+unsigned long __cdecl ERR_peek_error(void);
+unsigned long __cdecl ERR_peek_error_line(const char **file, int *line);
+unsigned long __cdecl ERR_peek_error_line_data(const char **file, int *line,
                                        const char **data, int *flags);
-unsigned long ERR_peek_last_error(void);
-unsigned long ERR_peek_last_error_line(const char **file, int *line);
-unsigned long ERR_peek_last_error_line_data(const char **file, int *line,
+unsigned long __cdecl ERR_peek_last_error(void);
+unsigned long __cdecl ERR_peek_last_error_line(const char **file, int *line);
+unsigned long __cdecl ERR_peek_last_error_line_data(const char **file, int *line,
                                             const char **data, int *flags);
-void ERR_clear_error(void);
-char *ERR_error_string(unsigned long e, char *buf);
-void ERR_error_string_n(unsigned long e, char *buf, size_t len);
-const char *ERR_lib_error_string(unsigned long e);
-const char *ERR_func_error_string(unsigned long e);
-const char *ERR_reason_error_string(unsigned long e);
-void ERR_print_errors_cb(int (*cb) (const char *str, size_t len, void *u),
+void __cdecl ERR_clear_error(void);
+char *__cdecl ERR_error_string(unsigned long e, char *buf);
+void __cdecl ERR_error_string_n(unsigned long e, char *buf, size_t len);
+const char * __cdecl ERR_lib_error_string(unsigned long e);
+const char * __cdecl ERR_func_error_string(unsigned long e);
+const char * __cdecl ERR_reason_error_string(unsigned long e);
+void __cdecl ERR_print_errors_cb(int (*cb) (const char *str, size_t len, void *u),
                          void *u);
 # ifndef OPENSSL_NO_STDIO
-void ERR_print_errors_fp(FILE *fp);
+void __cdecl ERR_print_errors_fp(FILE *fp);
 # endif
-void ERR_print_errors(BIO *bp);
-void ERR_add_error_data(int num, ...);
-void ERR_add_error_vdata(int num, va_list args);
-int ERR_load_strings(int lib, ERR_STRING_DATA *str);
-int ERR_load_strings_const(const ERR_STRING_DATA *str);
-int ERR_unload_strings(int lib, ERR_STRING_DATA *str);
-int ERR_load_ERR_strings(void);
+void __cdecl ERR_print_errors(BIO *bp);
+void __cdecl ERR_add_error_data(int num, ...);
+void __cdecl ERR_add_error_vdata(int num, va_list args);
+int __cdecl ERR_load_strings(int lib, ERR_STRING_DATA *str);
+int __cdecl ERR_load_strings_const(const ERR_STRING_DATA *str);
+int __cdecl ERR_unload_strings(int lib, ERR_STRING_DATA *str);
+int __cdecl ERR_load_ERR_strings(void);
 
 #if OPENSSL_API_COMPAT < 0x10100000L
 # define ERR_load_crypto_strings() \
@@ -257,15 +257,15 @@ int ERR_load_ERR_strings(void);
 # define ERR_free_strings() while(0) continue
 #endif
 
-DEPRECATEDIN_1_1_0(void ERR_remove_thread_state(void *))
-DEPRECATEDIN_1_0_0(void ERR_remove_state(unsigned long pid))
-ERR_STATE *ERR_get_state(void);
+DEPRECATEDIN_1_1_0(void __cdecl ERR_remove_thread_state(void *))
+DEPRECATEDIN_1_0_0(void __cdecl ERR_remove_state(unsigned long pid))
+ERR_STATE * __cdecl ERR_get_state(void);
 
-int ERR_get_next_error_library(void);
+int __cdecl ERR_get_next_error_library(void);
 
-int ERR_set_mark(void);
-int ERR_pop_to_mark(void);
-int ERR_clear_last_mark(void);
+int __cdecl ERR_set_mark(void);
+int __cdecl ERR_pop_to_mark(void);
+int __cdecl ERR_clear_last_mark(void);
 
 #ifdef  __cplusplus
 }
diff --git a/include/openssl/evp.h b/include/openssl/evp.h
index 545654a98b..759172279c 100644
--- a/include/openssl/evp.h
+++ b/include/openssl/evp.h
@@ -73,40 +73,40 @@ extern "C" {
 # define EVP_PKEY_MO_DECRYPT     0x0008
 
 # ifndef EVP_MD
-EVP_MD *EVP_MD_meth_new(int md_type, int pkey_type);
-EVP_MD *EVP_MD_meth_dup(const EVP_MD *md);
-void EVP_MD_meth_free(EVP_MD *md);
-
-int EVP_MD_meth_set_input_blocksize(EVP_MD *md, int blocksize);
-int EVP_MD_meth_set_result_size(EVP_MD *md, int resultsize);
-int EVP_MD_meth_set_app_datasize(EVP_MD *md, int datasize);
-int EVP_MD_meth_set_flags(EVP_MD *md, unsigned long flags);
-int EVP_MD_meth_set_init(EVP_MD *md, int (*init)(EVP_MD_CTX *ctx));
-int EVP_MD_meth_set_update(EVP_MD *md, int (*update)(EVP_MD_CTX *ctx,
+EVP_MD * __cdecl EVP_MD_meth_new(int md_type, int pkey_type);
+EVP_MD * __cdecl EVP_MD_meth_dup(const EVP_MD *md);
+void __cdecl EVP_MD_meth_free(EVP_MD *md);
+
+int __cdecl EVP_MD_meth_set_input_blocksize(EVP_MD *md, int blocksize);
+int __cdecl EVP_MD_meth_set_result_size(EVP_MD *md, int resultsize);
+int __cdecl EVP_MD_meth_set_app_datasize(EVP_MD *md, int datasize);
+int __cdecl EVP_MD_meth_set_flags(EVP_MD *md, unsigned long flags);
+int __cdecl EVP_MD_meth_set_init(EVP_MD *md, int (__cdecl *init)(EVP_MD_CTX *ctx));
+int __cdecl EVP_MD_meth_set_update(EVP_MD *md, int (__cdecl *update)(EVP_MD_CTX *ctx,
                                                      const void *data,
                                                      size_t count));
-int EVP_MD_meth_set_final(EVP_MD *md, int (*final)(EVP_MD_CTX *ctx,
+int __cdecl EVP_MD_meth_set_final(EVP_MD *md, int (__cdecl *final)(EVP_MD_CTX *ctx,
                                                    unsigned char *md));
-int EVP_MD_meth_set_copy(EVP_MD *md, int (*copy)(EVP_MD_CTX *to,
+int __cdecl EVP_MD_meth_set_copy(EVP_MD *md, int (__cdecl *copy)(EVP_MD_CTX *to,
                                                  const EVP_MD_CTX *from));
-int EVP_MD_meth_set_cleanup(EVP_MD *md, int (*cleanup)(EVP_MD_CTX *ctx));
-int EVP_MD_meth_set_ctrl(EVP_MD *md, int (*ctrl)(EVP_MD_CTX *ctx, int cmd,
+int __cdecl EVP_MD_meth_set_cleanup(EVP_MD *md, int (__cdecl *cleanup)(EVP_MD_CTX *ctx));
+int __cdecl EVP_MD_meth_set_ctrl(EVP_MD *md, int (__cdecl *ctrl)(EVP_MD_CTX *ctx, int cmd,
                                                  int p1, void *p2));
 
-int EVP_MD_meth_get_input_blocksize(const EVP_MD *md);
-int EVP_MD_meth_get_result_size(const EVP_MD *md);
-int EVP_MD_meth_get_app_datasize(const EVP_MD *md);
-unsigned long EVP_MD_meth_get_flags(const EVP_MD *md);
-int (*EVP_MD_meth_get_init(const EVP_MD *md))(EVP_MD_CTX *ctx);
-int (*EVP_MD_meth_get_update(const EVP_MD *md))(EVP_MD_CTX *ctx,
+int __cdecl EVP_MD_meth_get_input_blocksize(const EVP_MD *md);
+int __cdecl EVP_MD_meth_get_result_size(const EVP_MD *md);
+int __cdecl EVP_MD_meth_get_app_datasize(const EVP_MD *md);
+unsigned long __cdecl EVP_MD_meth_get_flags(const EVP_MD *md);
+int (__cdecl *EVP_MD_meth_get_init(const EVP_MD *md))(EVP_MD_CTX *ctx);
+int (__cdecl *EVP_MD_meth_get_update(const EVP_MD *md))(EVP_MD_CTX *ctx,
                                                 const void *data,
                                                 size_t count);
-int (*EVP_MD_meth_get_final(const EVP_MD *md))(EVP_MD_CTX *ctx,
+int (__cdecl *EVP_MD_meth_get_final(const EVP_MD *md))(EVP_MD_CTX *ctx,
                                                unsigned char *md);
-int (*EVP_MD_meth_get_copy(const EVP_MD *md))(EVP_MD_CTX *to,
+int (__cdecl *EVP_MD_meth_get_copy(const EVP_MD *md))(EVP_MD_CTX *to,
                                               const EVP_MD_CTX *from);
-int (*EVP_MD_meth_get_cleanup(const EVP_MD *md))(EVP_MD_CTX *ctx);
-int (*EVP_MD_meth_get_ctrl(const EVP_MD *md))(EVP_MD_CTX *ctx, int cmd,
+int (__cdecl *EVP_MD_meth_get_cleanup(const EVP_MD *md))(EVP_MD_CTX *ctx);
+int (__cdecl *EVP_MD_meth_get_ctrl(const EVP_MD *md))(EVP_MD_CTX *ctx, int cmd,
                                               int p1, void *p2);
 
 /* digest can only handle a single block */
@@ -182,36 +182,36 @@ int (*EVP_MD_meth_get_ctrl(const EVP_MD *md))(EVP_MD_CTX *ctx, int cmd,
 # define EVP_MD_CTX_FLAG_FINALISE        0x0200
 /* NOTE: 0x0400 is reserved for internal usage in evp_int.h */
 
-EVP_CIPHER *EVP_CIPHER_meth_new(int cipher_type, int block_size, int key_len);
-EVP_CIPHER *EVP_CIPHER_meth_dup(const EVP_CIPHER *cipher);
-void EVP_CIPHER_meth_free(EVP_CIPHER *cipher);
+EVP_CIPHER * __cdecl EVP_CIPHER_meth_new(int cipher_type, int block_size, int key_len);
+EVP_CIPHER * __cdecl EVP_CIPHER_meth_dup(const EVP_CIPHER *cipher);
+void __cdecl EVP_CIPHER_meth_free(EVP_CIPHER *cipher);
 
-int EVP_CIPHER_meth_set_iv_length(EVP_CIPHER *cipher, int iv_len);
-int EVP_CIPHER_meth_set_flags(EVP_CIPHER *cipher, unsigned long flags);
-int EVP_CIPHER_meth_set_impl_ctx_size(EVP_CIPHER *cipher, int ctx_size);
-int EVP_CIPHER_meth_set_init(EVP_CIPHER *cipher,
-                             int (*init) (EVP_CIPHER_CTX *ctx,
+int __cdecl EVP_CIPHER_meth_set_iv_length(EVP_CIPHER *cipher, int iv_len);
+int __cdecl EVP_CIPHER_meth_set_flags(EVP_CIPHER *cipher, unsigned long flags);
+int __cdecl EVP_CIPHER_meth_set_impl_ctx_size(EVP_CIPHER *cipher, int ctx_size);
+int __cdecl EVP_CIPHER_meth_set_init(EVP_CIPHER *cipher,
+                             int (__cdecl *init) (EVP_CIPHER_CTX *ctx,
                                           const unsigned char *key,
                                           const unsigned char *iv,
                                           int enc));
-int EVP_CIPHER_meth_set_do_cipher(EVP_CIPHER *cipher,
+int __cdecl EVP_CIPHER_meth_set_do_cipher(EVP_CIPHER *cipher,
                                   int (*do_cipher) (EVP_CIPHER_CTX *ctx,
                                                     unsigned char *out,
                                                     const unsigned char *in,
                                                     size_t inl));
-int EVP_CIPHER_meth_set_cleanup(EVP_CIPHER *cipher,
-                                int (*cleanup) (EVP_CIPHER_CTX *));
-int EVP_CIPHER_meth_set_set_asn1_params(EVP_CIPHER *cipher,
-                                        int (*set_asn1_parameters) (EVP_CIPHER_CTX *,
+int __cdecl EVP_CIPHER_meth_set_cleanup(EVP_CIPHER *cipher,
+                                int (__cdecl *cleanup) (EVP_CIPHER_CTX *));
+int __cdecl EVP_CIPHER_meth_set_set_asn1_params(EVP_CIPHER *cipher,
+                                        int (__cdecl *set_asn1_parameters) (EVP_CIPHER_CTX *,
                                                                     ASN1_TYPE *));
-int EVP_CIPHER_meth_set_get_asn1_params(EVP_CIPHER *cipher,
-                                        int (*get_asn1_parameters) (EVP_CIPHER_CTX *,
+int __cdecl EVP_CIPHER_meth_set_get_asn1_params(EVP_CIPHER *cipher,
+                                        int (__cdecl *get_asn1_parameters) (EVP_CIPHER_CTX *,
                                                                     ASN1_TYPE *));
-int EVP_CIPHER_meth_set_ctrl(EVP_CIPHER *cipher,
-                             int (*ctrl) (EVP_CIPHER_CTX *, int type,
+int __cdecl EVP_CIPHER_meth_set_ctrl(EVP_CIPHER *cipher,
+                             int (__cdecl *ctrl) (EVP_CIPHER_CTX *, int type,
                                           int arg, void *ptr));
 
-int (*EVP_CIPHER_meth_get_init(const EVP_CIPHER *cipher))(EVP_CIPHER_CTX *ctx,
+int (__cdecl *EVP_CIPHER_meth_get_init(const EVP_CIPHER *cipher))(EVP_CIPHER_CTX *ctx,
                                                           const unsigned char *key,
                                                           const unsigned char *iv,
                                                           int enc);
@@ -219,12 +219,12 @@ int (*EVP_CIPHER_meth_get_do_cipher(const EVP_CIPHER *cipher))(EVP_CIPHER_CTX *c
                                                                unsigned char *out,
                                                                const unsigned char *in,
                                                                size_t inl);
-int (*EVP_CIPHER_meth_get_cleanup(const EVP_CIPHER *cipher))(EVP_CIPHER_CTX *);
-int (*EVP_CIPHER_meth_get_set_asn1_params(const EVP_CIPHER *cipher))(EVP_CIPHER_CTX *,
+int (__cdecl *EVP_CIPHER_meth_get_cleanup(const EVP_CIPHER *cipher))(EVP_CIPHER_CTX *);
+int (__cdecl *EVP_CIPHER_meth_get_set_asn1_params(const EVP_CIPHER *cipher))(EVP_CIPHER_CTX *,
                                                                      ASN1_TYPE *);
-int (*EVP_CIPHER_meth_get_get_asn1_params(const EVP_CIPHER *cipher))(EVP_CIPHER_CTX *,
+int (__cdecl *EVP_CIPHER_meth_get_get_asn1_params(const EVP_CIPHER *cipher))(EVP_CIPHER_CTX *,
                                                                ASN1_TYPE *);
-int (*EVP_CIPHER_meth_get_ctrl(const EVP_CIPHER *cipher))(EVP_CIPHER_CTX *,
+int (__cdecl *EVP_CIPHER_meth_get_ctrl(const EVP_CIPHER *cipher))(EVP_CIPHER_CTX *,
                                                           int type, int arg,
                                                           void *ptr);
 
@@ -400,7 +400,7 @@ typedef struct evp_cipher_info_st {
 
 
 /* Password based encryption function */
-typedef int (EVP_PBE_KEYGEN) (EVP_CIPHER_CTX *ctx, const char *pass,
+typedef int (__cdecl EVP_PBE_KEYGEN) (EVP_CIPHER_CTX *ctx, const char *pass,
                               int passlen, ASN1_TYPE *param,
                               const EVP_CIPHER *cipher, const EVP_MD *md,
                               int en_de);
@@ -440,53 +440,53 @@ typedef int (EVP_PBE_KEYGEN) (EVP_CIPHER_CTX *ctx, const char *pass,
 # define EVP_get_cipherbynid(a) EVP_get_cipherbyname(OBJ_nid2sn(a))
 # define EVP_get_cipherbyobj(a) EVP_get_cipherbynid(OBJ_obj2nid(a))
 
-int EVP_MD_type(const EVP_MD *md);
+int __cdecl EVP_MD_type(const EVP_MD *md);
 # define EVP_MD_nid(e)                   EVP_MD_type(e)
 # define EVP_MD_name(e)                  OBJ_nid2sn(EVP_MD_nid(e))
-int EVP_MD_pkey_type(const EVP_MD *md);
-int EVP_MD_size(const EVP_MD *md);
-int EVP_MD_block_size(const EVP_MD *md);
-unsigned long EVP_MD_flags(const EVP_MD *md);
+int __cdecl EVP_MD_pkey_type(const EVP_MD *md);
+int __cdecl EVP_MD_size(const EVP_MD *md);
+int __cdecl EVP_MD_block_size(const EVP_MD *md);
+unsigned long __cdecl EVP_MD_flags(const EVP_MD *md);
 
-const EVP_MD *EVP_MD_CTX_md(const EVP_MD_CTX *ctx);
-int (*EVP_MD_CTX_update_fn(EVP_MD_CTX *ctx))(EVP_MD_CTX *ctx,
+const EVP_MD * __cdecl EVP_MD_CTX_md(const EVP_MD_CTX *ctx);
+int (__cdecl *EVP_MD_CTX_update_fn(EVP_MD_CTX *ctx))(EVP_MD_CTX *ctx,
                                              const void *data, size_t count);
-void EVP_MD_CTX_set_update_fn(EVP_MD_CTX *ctx,
-                              int (*update) (EVP_MD_CTX *ctx,
+void __cdecl EVP_MD_CTX_set_update_fn(EVP_MD_CTX *ctx,
+                              int (__cdecl *update) (EVP_MD_CTX *ctx,
                                              const void *data, size_t count));
 # define EVP_MD_CTX_size(e)              EVP_MD_size(EVP_MD_CTX_md(e))
 # define EVP_MD_CTX_block_size(e)        EVP_MD_block_size(EVP_MD_CTX_md(e))
 # define EVP_MD_CTX_type(e)              EVP_MD_type(EVP_MD_CTX_md(e))
-EVP_PKEY_CTX *EVP_MD_CTX_pkey_ctx(const EVP_MD_CTX *ctx);
-void EVP_MD_CTX_set_pkey_ctx(EVP_MD_CTX *ctx, EVP_PKEY_CTX *pctx);
-void *EVP_MD_CTX_md_data(const EVP_MD_CTX *ctx);
+EVP_PKEY_CTX * __cdecl EVP_MD_CTX_pkey_ctx(const EVP_MD_CTX *ctx);
+void __cdecl EVP_MD_CTX_set_pkey_ctx(EVP_MD_CTX *ctx, EVP_PKEY_CTX *pctx);
+void * __cdecl EVP_MD_CTX_md_data(const EVP_MD_CTX *ctx);
 
-int EVP_CIPHER_nid(const EVP_CIPHER *cipher);
+int __cdecl EVP_CIPHER_nid(const EVP_CIPHER *cipher);
 # define EVP_CIPHER_name(e)              OBJ_nid2sn(EVP_CIPHER_nid(e))
-int EVP_CIPHER_block_size(const EVP_CIPHER *cipher);
-int EVP_CIPHER_impl_ctx_size(const EVP_CIPHER *cipher);
-int EVP_CIPHER_key_length(const EVP_CIPHER *cipher);
-int EVP_CIPHER_iv_length(const EVP_CIPHER *cipher);
-unsigned long EVP_CIPHER_flags(const EVP_CIPHER *cipher);
+int __cdecl EVP_CIPHER_block_size(const EVP_CIPHER *cipher);
+int __cdecl EVP_CIPHER_impl_ctx_size(const EVP_CIPHER *cipher);
+int __cdecl EVP_CIPHER_key_length(const EVP_CIPHER *cipher);
+int __cdecl EVP_CIPHER_iv_length(const EVP_CIPHER *cipher);
+unsigned long __cdecl EVP_CIPHER_flags(const EVP_CIPHER *cipher);
 # define EVP_CIPHER_mode(e)              (EVP_CIPHER_flags(e) & EVP_CIPH_MODE)
 
-const EVP_CIPHER *EVP_CIPHER_CTX_cipher(const EVP_CIPHER_CTX *ctx);
-int EVP_CIPHER_CTX_encrypting(const EVP_CIPHER_CTX *ctx);
-int EVP_CIPHER_CTX_nid(const EVP_CIPHER_CTX *ctx);
-int EVP_CIPHER_CTX_block_size(const EVP_CIPHER_CTX *ctx);
-int EVP_CIPHER_CTX_key_length(const EVP_CIPHER_CTX *ctx);
-int EVP_CIPHER_CTX_iv_length(const EVP_CIPHER_CTX *ctx);
-const unsigned char *EVP_CIPHER_CTX_iv(const EVP_CIPHER_CTX *ctx);
-const unsigned char *EVP_CIPHER_CTX_original_iv(const EVP_CIPHER_CTX *ctx);
-unsigned char *EVP_CIPHER_CTX_iv_noconst(EVP_CIPHER_CTX *ctx);
-unsigned char *EVP_CIPHER_CTX_buf_noconst(EVP_CIPHER_CTX *ctx);
-int EVP_CIPHER_CTX_num(const EVP_CIPHER_CTX *ctx);
-void EVP_CIPHER_CTX_set_num(EVP_CIPHER_CTX *ctx, int num);
-int EVP_CIPHER_CTX_copy(EVP_CIPHER_CTX *out, const EVP_CIPHER_CTX *in);
-void *EVP_CIPHER_CTX_get_app_data(const EVP_CIPHER_CTX *ctx);
-void EVP_CIPHER_CTX_set_app_data(EVP_CIPHER_CTX *ctx, void *data);
-void *EVP_CIPHER_CTX_get_cipher_data(const EVP_CIPHER_CTX *ctx);
-void *EVP_CIPHER_CTX_set_cipher_data(EVP_CIPHER_CTX *ctx, void *cipher_data);
+const EVP_CIPHER * __cdecl EVP_CIPHER_CTX_cipher(const EVP_CIPHER_CTX *ctx);
+int __cdecl EVP_CIPHER_CTX_encrypting(const EVP_CIPHER_CTX *ctx);
+int __cdecl EVP_CIPHER_CTX_nid(const EVP_CIPHER_CTX *ctx);
+int __cdecl EVP_CIPHER_CTX_block_size(const EVP_CIPHER_CTX *ctx);
+int __cdecl EVP_CIPHER_CTX_key_length(const EVP_CIPHER_CTX *ctx);
+int __cdecl EVP_CIPHER_CTX_iv_length(const EVP_CIPHER_CTX *ctx);
+const unsigned char * __cdecl EVP_CIPHER_CTX_iv(const EVP_CIPHER_CTX *ctx);
+const unsigned char * __cdecl EVP_CIPHER_CTX_original_iv(const EVP_CIPHER_CTX *ctx);
+unsigned char * __cdecl EVP_CIPHER_CTX_iv_noconst(EVP_CIPHER_CTX *ctx);
+unsigned char * __cdecl EVP_CIPHER_CTX_buf_noconst(EVP_CIPHER_CTX *ctx);
+int __cdecl EVP_CIPHER_CTX_num(const EVP_CIPHER_CTX *ctx);
+void __cdecl EVP_CIPHER_CTX_set_num(EVP_CIPHER_CTX *ctx, int num);
+int __cdecl EVP_CIPHER_CTX_copy(EVP_CIPHER_CTX *out, const EVP_CIPHER_CTX *in);
+void * __cdecl EVP_CIPHER_CTX_get_app_data(const EVP_CIPHER_CTX *ctx);
+void __cdecl EVP_CIPHER_CTX_set_app_data(EVP_CIPHER_CTX *ctx, void *data);
+void * __cdecl EVP_CIPHER_CTX_get_cipher_data(const EVP_CIPHER_CTX *ctx);
+void * __cdecl EVP_CIPHER_CTX_set_cipher_data(EVP_CIPHER_CTX *ctx, void *cipher_data);
 # define EVP_CIPHER_CTX_type(c)         EVP_CIPHER_type(EVP_CIPHER_CTX_cipher(c))
 # if OPENSSL_API_COMPAT < 0x10100000L
 #  define EVP_CIPHER_CTX_flags(c)       EVP_CIPHER_flags(EVP_CIPHER_CTX_cipher(c))
@@ -534,228 +534,228 @@ void BIO_set_md(BIO *, const EVP_MD *md);
 # define EVP_delete_digest_alias(alias) \
         OBJ_NAME_remove(alias,OBJ_NAME_TYPE_MD_METH|OBJ_NAME_ALIAS);
 
-int EVP_MD_CTX_ctrl(EVP_MD_CTX *ctx, int cmd, int p1, void *p2);
-EVP_MD_CTX *EVP_MD_CTX_new(void);
-int EVP_MD_CTX_reset(EVP_MD_CTX *ctx);
-void EVP_MD_CTX_free(EVP_MD_CTX *ctx);
+int __cdecl EVP_MD_CTX_ctrl(EVP_MD_CTX *ctx, int cmd, int p1, void *p2);
+EVP_MD_CTX * __cdecl EVP_MD_CTX_new(void);
+int __cdecl EVP_MD_CTX_reset(EVP_MD_CTX *ctx);
+void __cdecl EVP_MD_CTX_free(EVP_MD_CTX *ctx);
 # define EVP_MD_CTX_create()     EVP_MD_CTX_new()
 # define EVP_MD_CTX_init(ctx)    EVP_MD_CTX_reset((ctx))
 # define EVP_MD_CTX_destroy(ctx) EVP_MD_CTX_free((ctx))
-__owur int EVP_MD_CTX_copy_ex(EVP_MD_CTX *out, const EVP_MD_CTX *in);
-void EVP_MD_CTX_set_flags(EVP_MD_CTX *ctx, int flags);
-void EVP_MD_CTX_clear_flags(EVP_MD_CTX *ctx, int flags);
-int EVP_MD_CTX_test_flags(const EVP_MD_CTX *ctx, int flags);
-__owur int EVP_DigestInit_ex(EVP_MD_CTX *ctx, const EVP_MD *type,
+__owur int __cdecl EVP_MD_CTX_copy_ex(EVP_MD_CTX *out, const EVP_MD_CTX *in);
+void __cdecl EVP_MD_CTX_set_flags(EVP_MD_CTX *ctx, int flags);
+void __cdecl EVP_MD_CTX_clear_flags(EVP_MD_CTX *ctx, int flags);
+int __cdecl EVP_MD_CTX_test_flags(const EVP_MD_CTX *ctx, int flags);
+__owur int __cdecl EVP_DigestInit_ex(EVP_MD_CTX *ctx, const EVP_MD *type,
                                  ENGINE *impl);
-__owur int EVP_DigestUpdate(EVP_MD_CTX *ctx, const void *d,
+__owur int __cdecl EVP_DigestUpdate(EVP_MD_CTX *ctx, const void *d,
                                 size_t cnt);
-__owur int EVP_DigestFinal_ex(EVP_MD_CTX *ctx, unsigned char *md,
+__owur int __cdecl EVP_DigestFinal_ex(EVP_MD_CTX *ctx, unsigned char *md,
                                   unsigned int *s);
-__owur int EVP_Digest(const void *data, size_t count,
+__owur int __cdecl EVP_Digest(const void *data, size_t count,
                           unsigned char *md, unsigned int *size,
                           const EVP_MD *type, ENGINE *impl);
 
-__owur int EVP_MD_CTX_copy(EVP_MD_CTX *out, const EVP_MD_CTX *in);
-__owur int EVP_DigestInit(EVP_MD_CTX *ctx, const EVP_MD *type);
-__owur int EVP_DigestFinal(EVP_MD_CTX *ctx, unsigned char *md,
+__owur int __cdecl EVP_MD_CTX_copy(EVP_MD_CTX *out, const EVP_MD_CTX *in);
+__owur int __cdecl EVP_DigestInit(EVP_MD_CTX *ctx, const EVP_MD *type);
+__owur int __cdecl EVP_DigestFinal(EVP_MD_CTX *ctx, unsigned char *md,
                            unsigned int *s);
-__owur int EVP_DigestFinalXOF(EVP_MD_CTX *ctx, unsigned char *md,
+__owur int __cdecl EVP_DigestFinalXOF(EVP_MD_CTX *ctx, unsigned char *md,
                               size_t len);
 
-int EVP_read_pw_string(char *buf, int length, const char *prompt, int verify);
-int EVP_read_pw_string_min(char *buf, int minlen, int maxlen,
+int __cdecl EVP_read_pw_string(char *buf, int length, const char *prompt, int verify);
+int __cdecl EVP_read_pw_string_min(char *buf, int minlen, int maxlen,
                            const char *prompt, int verify);
-void EVP_set_pw_prompt(const char *prompt);
-char *EVP_get_pw_prompt(void);
+void __cdecl EVP_set_pw_prompt(const char *prompt);
+char * __cdecl EVP_get_pw_prompt(void);
 
-__owur int EVP_BytesToKey(const EVP_CIPHER *type, const EVP_MD *md,
+__owur int __cdecl EVP_BytesToKey(const EVP_CIPHER *type, const EVP_MD *md,
                           const unsigned char *salt,
                           const unsigned char *data, int datal, int count,
                           unsigned char *key, unsigned char *iv);
 
-void EVP_CIPHER_CTX_set_flags(EVP_CIPHER_CTX *ctx, int flags);
-void EVP_CIPHER_CTX_clear_flags(EVP_CIPHER_CTX *ctx, int flags);
-int EVP_CIPHER_CTX_test_flags(const EVP_CIPHER_CTX *ctx, int flags);
+void __cdecl EVP_CIPHER_CTX_set_flags(EVP_CIPHER_CTX *ctx, int flags);
+void __cdecl EVP_CIPHER_CTX_clear_flags(EVP_CIPHER_CTX *ctx, int flags);
+int __cdecl EVP_CIPHER_CTX_test_flags(const EVP_CIPHER_CTX *ctx, int flags);
 
-__owur int EVP_EncryptInit(EVP_CIPHER_CTX *ctx, const EVP_CIPHER *cipher,
+__owur int __cdecl EVP_EncryptInit(EVP_CIPHER_CTX *ctx, const EVP_CIPHER *cipher,
                            const unsigned char *key, const unsigned char *iv);
-/*__owur*/ int EVP_EncryptInit_ex(EVP_CIPHER_CTX *ctx,
+/*__owur*/ int __cdecl EVP_EncryptInit_ex(EVP_CIPHER_CTX *ctx,
                                   const EVP_CIPHER *cipher, ENGINE *impl,
                                   const unsigned char *key,
                                   const unsigned char *iv);
-/*__owur*/ int EVP_EncryptUpdate(EVP_CIPHER_CTX *ctx, unsigned char *out,
+/*__owur*/ int __cdecl EVP_EncryptUpdate(EVP_CIPHER_CTX *ctx, unsigned char *out,
                                  int *outl, const unsigned char *in, int inl);
-/*__owur*/ int EVP_EncryptFinal_ex(EVP_CIPHER_CTX *ctx, unsigned char *out,
+/*__owur*/ int __cdecl EVP_EncryptFinal_ex(EVP_CIPHER_CTX *ctx, unsigned char *out,
                                    int *outl);
-/*__owur*/ int EVP_EncryptFinal(EVP_CIPHER_CTX *ctx, unsigned char *out,
+/*__owur*/ int __cdecl EVP_EncryptFinal(EVP_CIPHER_CTX *ctx, unsigned char *out,
                                 int *outl);
 
-__owur int EVP_DecryptInit(EVP_CIPHER_CTX *ctx, const EVP_CIPHER *cipher,
+__owur int __cdecl EVP_DecryptInit(EVP_CIPHER_CTX *ctx, const EVP_CIPHER *cipher,
                            const unsigned char *key, const unsigned char *iv);
-/*__owur*/ int EVP_DecryptInit_ex(EVP_CIPHER_CTX *ctx,
+/*__owur*/ int __cdecl EVP_DecryptInit_ex(EVP_CIPHER_CTX *ctx,
                                   const EVP_CIPHER *cipher, ENGINE *impl,
                                   const unsigned char *key,
                                   const unsigned char *iv);
-/*__owur*/ int EVP_DecryptUpdate(EVP_CIPHER_CTX *ctx, unsigned char *out,
+/*__owur*/ int __cdecl EVP_DecryptUpdate(EVP_CIPHER_CTX *ctx, unsigned char *out,
                                  int *outl, const unsigned char *in, int inl);
-__owur int EVP_DecryptFinal(EVP_CIPHER_CTX *ctx, unsigned char *outm,
+__owur int __cdecl EVP_DecryptFinal(EVP_CIPHER_CTX *ctx, unsigned char *outm,
                             int *outl);
-/*__owur*/ int EVP_DecryptFinal_ex(EVP_CIPHER_CTX *ctx, unsigned char *outm,
+/*__owur*/ int __cdecl EVP_DecryptFinal_ex(EVP_CIPHER_CTX *ctx, unsigned char *outm,
                                    int *outl);
 
-__owur int EVP_CipherInit(EVP_CIPHER_CTX *ctx, const EVP_CIPHER *cipher,
+__owur int __cdecl EVP_CipherInit(EVP_CIPHER_CTX *ctx, const EVP_CIPHER *cipher,
                           const unsigned char *key, const unsigned char *iv,
                           int enc);
-/*__owur*/ int EVP_CipherInit_ex(EVP_CIPHER_CTX *ctx,
+/*__owur*/ int __cdecl EVP_CipherInit_ex(EVP_CIPHER_CTX *ctx,
                                  const EVP_CIPHER *cipher, ENGINE *impl,
                                  const unsigned char *key,
                                  const unsigned char *iv, int enc);
-__owur int EVP_CipherUpdate(EVP_CIPHER_CTX *ctx, unsigned char *out,
+__owur int __cdecl EVP_CipherUpdate(EVP_CIPHER_CTX *ctx, unsigned char *out,
                             int *outl, const unsigned char *in, int inl);
-__owur int EVP_CipherFinal(EVP_CIPHER_CTX *ctx, unsigned char *outm,
+__owur int __cdecl EVP_CipherFinal(EVP_CIPHER_CTX *ctx, unsigned char *outm,
                            int *outl);
-__owur int EVP_CipherFinal_ex(EVP_CIPHER_CTX *ctx, unsigned char *outm,
+__owur int __cdecl EVP_CipherFinal_ex(EVP_CIPHER_CTX *ctx, unsigned char *outm,
                               int *outl);
 
-__owur int EVP_SignFinal(EVP_MD_CTX *ctx, unsigned char *md, unsigned int *s,
+__owur int __cdecl EVP_SignFinal(EVP_MD_CTX *ctx, unsigned char *md, unsigned int *s,
                          EVP_PKEY *pkey);
 
-__owur int EVP_DigestSign(EVP_MD_CTX *ctx, unsigned char *sigret,
+__owur int __cdecl EVP_DigestSign(EVP_MD_CTX *ctx, unsigned char *sigret,
                           size_t *siglen, const unsigned char *tbs,
                           size_t tbslen);
 
-__owur int EVP_VerifyFinal(EVP_MD_CTX *ctx, const unsigned char *sigbuf,
+__owur int __cdecl EVP_VerifyFinal(EVP_MD_CTX *ctx, const unsigned char *sigbuf,
                            unsigned int siglen, EVP_PKEY *pkey);
 
-__owur int EVP_DigestVerify(EVP_MD_CTX *ctx, const unsigned char *sigret,
+__owur int __cdecl EVP_DigestVerify(EVP_MD_CTX *ctx, const unsigned char *sigret,
                             size_t siglen, const unsigned char *tbs,
                             size_t tbslen);
 
-/*__owur*/ int EVP_DigestSignInit(EVP_MD_CTX *ctx, EVP_PKEY_CTX **pctx,
+/*__owur*/ int __cdecl EVP_DigestSignInit(EVP_MD_CTX *ctx, EVP_PKEY_CTX **pctx,
                                   const EVP_MD *type, ENGINE *e,
                                   EVP_PKEY *pkey);
-__owur int EVP_DigestSignFinal(EVP_MD_CTX *ctx, unsigned char *sigret,
+__owur int __cdecl EVP_DigestSignFinal(EVP_MD_CTX *ctx, unsigned char *sigret,
                                size_t *siglen);
 
-__owur int EVP_DigestVerifyInit(EVP_MD_CTX *ctx, EVP_PKEY_CTX **pctx,
+__owur int __cdecl EVP_DigestVerifyInit(EVP_MD_CTX *ctx, EVP_PKEY_CTX **pctx,
                                 const EVP_MD *type, ENGINE *e,
                                 EVP_PKEY *pkey);
-__owur int EVP_DigestVerifyFinal(EVP_MD_CTX *ctx, const unsigned char *sig,
+__owur int __cdecl EVP_DigestVerifyFinal(EVP_MD_CTX *ctx, const unsigned char *sig,
                                  size_t siglen);
 
 # ifndef OPENSSL_NO_RSA
-__owur int EVP_OpenInit(EVP_CIPHER_CTX *ctx, const EVP_CIPHER *type,
+__owur int __cdecl EVP_OpenInit(EVP_CIPHER_CTX *ctx, const EVP_CIPHER *type,
                         const unsigned char *ek, int ekl,
                         const unsigned char *iv, EVP_PKEY *priv);
-__owur int EVP_OpenFinal(EVP_CIPHER_CTX *ctx, unsigned char *out, int *outl);
+__owur int __cdecl EVP_OpenFinal(EVP_CIPHER_CTX *ctx, unsigned char *out, int *outl);
 
-__owur int EVP_SealInit(EVP_CIPHER_CTX *ctx, const EVP_CIPHER *type,
+__owur int __cdecl EVP_SealInit(EVP_CIPHER_CTX *ctx, const EVP_CIPHER *type,
                         unsigned char **ek, int *ekl, unsigned char *iv,
                         EVP_PKEY **pubk, int npubk);
-__owur int EVP_SealFinal(EVP_CIPHER_CTX *ctx, unsigned char *out, int *outl);
+__owur int __cdecl EVP_SealFinal(EVP_CIPHER_CTX *ctx, unsigned char *out, int *outl);
 # endif
 
-EVP_ENCODE_CTX *EVP_ENCODE_CTX_new(void);
-void EVP_ENCODE_CTX_free(EVP_ENCODE_CTX *ctx);
-int EVP_ENCODE_CTX_copy(EVP_ENCODE_CTX *dctx, EVP_ENCODE_CTX *sctx);
-int EVP_ENCODE_CTX_num(EVP_ENCODE_CTX *ctx);
-void EVP_EncodeInit(EVP_ENCODE_CTX *ctx);
-int EVP_EncodeUpdate(EVP_ENCODE_CTX *ctx, unsigned char *out, int *outl,
+EVP_ENCODE_CTX * __cdecl EVP_ENCODE_CTX_new(void);
+void __cdecl EVP_ENCODE_CTX_free(EVP_ENCODE_CTX *ctx);
+int __cdecl EVP_ENCODE_CTX_copy(EVP_ENCODE_CTX *dctx, EVP_ENCODE_CTX *sctx);
+int __cdecl EVP_ENCODE_CTX_num(EVP_ENCODE_CTX *ctx);
+void __cdecl EVP_EncodeInit(EVP_ENCODE_CTX *ctx);
+int __cdecl EVP_EncodeUpdate(EVP_ENCODE_CTX *ctx, unsigned char *out, int *outl,
                      const unsigned char *in, int inl);
-void EVP_EncodeFinal(EVP_ENCODE_CTX *ctx, unsigned char *out, int *outl);
-int EVP_EncodeBlock(unsigned char *t, const unsigned char *f, int n);
+void __cdecl EVP_EncodeFinal(EVP_ENCODE_CTX *ctx, unsigned char *out, int *outl);
+int __cdecl EVP_EncodeBlock(unsigned char *t, const unsigned char *f, int n);
 
-void EVP_DecodeInit(EVP_ENCODE_CTX *ctx);
-int EVP_DecodeUpdate(EVP_ENCODE_CTX *ctx, unsigned char *out, int *outl,
+void __cdecl EVP_DecodeInit(EVP_ENCODE_CTX *ctx);
+int __cdecl EVP_DecodeUpdate(EVP_ENCODE_CTX *ctx, unsigned char *out, int *outl,
                      const unsigned char *in, int inl);
-int EVP_DecodeFinal(EVP_ENCODE_CTX *ctx, unsigned
+int __cdecl EVP_DecodeFinal(EVP_ENCODE_CTX *ctx, unsigned
                     char *out, int *outl);
-int EVP_DecodeBlock(unsigned char *t, const unsigned char *f, int n);
+int __cdecl EVP_DecodeBlock(unsigned char *t, const unsigned char *f, int n);
 
 # if OPENSSL_API_COMPAT < 0x10100000L
 #  define EVP_CIPHER_CTX_init(c)      EVP_CIPHER_CTX_reset(c)
 #  define EVP_CIPHER_CTX_cleanup(c)   EVP_CIPHER_CTX_reset(c)
 # endif
-EVP_CIPHER_CTX *EVP_CIPHER_CTX_new(void);
-int EVP_CIPHER_CTX_reset(EVP_CIPHER_CTX *c);
-void EVP_CIPHER_CTX_free(EVP_CIPHER_CTX *c);
-int EVP_CIPHER_CTX_set_key_length(EVP_CIPHER_CTX *x, int keylen);
-int EVP_CIPHER_CTX_set_padding(EVP_CIPHER_CTX *c, int pad);
-int EVP_CIPHER_CTX_ctrl(EVP_CIPHER_CTX *ctx, int type, int arg, void *ptr);
-int EVP_CIPHER_CTX_rand_key(EVP_CIPHER_CTX *ctx, unsigned char *key);
-
-const BIO_METHOD *BIO_f_md(void);
-const BIO_METHOD *BIO_f_base64(void);
-const BIO_METHOD *BIO_f_cipher(void);
-const BIO_METHOD *BIO_f_reliable(void);
-__owur int BIO_set_cipher(BIO *b, const EVP_CIPHER *c, const unsigned char *k,
+EVP_CIPHER_CTX * __cdecl EVP_CIPHER_CTX_new(void);
+int __cdecl EVP_CIPHER_CTX_reset(EVP_CIPHER_CTX *c);
+void __cdecl EVP_CIPHER_CTX_free(EVP_CIPHER_CTX *c);
+int __cdecl EVP_CIPHER_CTX_set_key_length(EVP_CIPHER_CTX *x, int keylen);
+int __cdecl EVP_CIPHER_CTX_set_padding(EVP_CIPHER_CTX *c, int pad);
+int __cdecl EVP_CIPHER_CTX_ctrl(EVP_CIPHER_CTX *ctx, int type, int arg, void *ptr);
+int __cdecl EVP_CIPHER_CTX_rand_key(EVP_CIPHER_CTX *ctx, unsigned char *key);
+
+const BIO_METHOD * __cdecl BIO_f_md(void);
+const BIO_METHOD * __cdecl BIO_f_base64(void);
+const BIO_METHOD * __cdecl BIO_f_cipher(void);
+const BIO_METHOD * __cdecl BIO_f_reliable(void);
+__owur int __cdecl BIO_set_cipher(BIO *b, const EVP_CIPHER *c, const unsigned char *k,
                           const unsigned char *i, int enc);
 
-const EVP_MD *EVP_md_null(void);
+const EVP_MD * __cdecl EVP_md_null(void);
 # ifndef OPENSSL_NO_MD2
-const EVP_MD *EVP_md2(void);
+const EVP_MD * __cdecl EVP_md2(void);
 # endif
 # ifndef OPENSSL_NO_MD4
-const EVP_MD *EVP_md4(void);
+const EVP_MD * __cdecl EVP_md4(void);
 # endif
 # ifndef OPENSSL_NO_MD5
-const EVP_MD *EVP_md5(void);
-const EVP_MD *EVP_md5_sha1(void);
+const EVP_MD * __cdecl EVP_md5(void);
+const EVP_MD * __cdecl EVP_md5_sha1(void);
 # endif
 # ifndef OPENSSL_NO_BLAKE2
-const EVP_MD *EVP_blake2b512(void);
-const EVP_MD *EVP_blake2s256(void);
+const EVP_MD * __cdecl EVP_blake2b512(void);
+const EVP_MD * __cdecl EVP_blake2s256(void);
 # endif
-const EVP_MD *EVP_sha1(void);
-const EVP_MD *EVP_sha224(void);
-const EVP_MD *EVP_sha256(void);
-const EVP_MD *EVP_sha384(void);
-const EVP_MD *EVP_sha512(void);
-const EVP_MD *EVP_sha512_224(void);
-const EVP_MD *EVP_sha512_256(void);
-const EVP_MD *EVP_sha3_224(void);
-const EVP_MD *EVP_sha3_256(void);
-const EVP_MD *EVP_sha3_384(void);
-const EVP_MD *EVP_sha3_512(void);
-const EVP_MD *EVP_shake128(void);
-const EVP_MD *EVP_shake256(void);
+const EVP_MD * __cdecl EVP_sha1(void);
+const EVP_MD * __cdecl EVP_sha224(void);
+const EVP_MD * __cdecl EVP_sha256(void);
+const EVP_MD * __cdecl EVP_sha384(void);
+const EVP_MD * __cdecl EVP_sha512(void);
+const EVP_MD * __cdecl EVP_sha512_224(void);
+const EVP_MD * __cdecl EVP_sha512_256(void);
+const EVP_MD * __cdecl EVP_sha3_224(void);
+const EVP_MD * __cdecl EVP_sha3_256(void);
+const EVP_MD * __cdecl EVP_sha3_384(void);
+const EVP_MD * __cdecl EVP_sha3_512(void);
+const EVP_MD * __cdecl EVP_shake128(void);
+const EVP_MD * __cdecl EVP_shake256(void);
 # ifndef OPENSSL_NO_MDC2
-const EVP_MD *EVP_mdc2(void);
+const EVP_MD * __cdecl EVP_mdc2(void);
 # endif
 # ifndef OPENSSL_NO_RMD160
-const EVP_MD *EVP_ripemd160(void);
+const EVP_MD * __cdecl EVP_ripemd160(void);
 # endif
 # ifndef OPENSSL_NO_WHIRLPOOL
-const EVP_MD *EVP_whirlpool(void);
+const EVP_MD * __cdecl EVP_whirlpool(void);
 # endif
 # ifndef OPENSSL_NO_SM3
-const EVP_MD *EVP_sm3(void);
+const EVP_MD * __cdecl EVP_sm3(void);
 # endif
-const EVP_CIPHER *EVP_enc_null(void); /* does nothing :-) */
+const EVP_CIPHER * __cdecl EVP_enc_null(void); /* does nothing :-) */
 # ifndef OPENSSL_NO_DES
-const EVP_CIPHER *EVP_des_ecb(void);
-const EVP_CIPHER *EVP_des_ede(void);
-const EVP_CIPHER *EVP_des_ede3(void);
-const EVP_CIPHER *EVP_des_ede_ecb(void);
-const EVP_CIPHER *EVP_des_ede3_ecb(void);
-const EVP_CIPHER *EVP_des_cfb64(void);
+const EVP_CIPHER * __cdecl EVP_des_ecb(void);
+const EVP_CIPHER * __cdecl EVP_des_ede(void);
+const EVP_CIPHER * __cdecl EVP_des_ede3(void);
+const EVP_CIPHER * __cdecl EVP_des_ede_ecb(void);
+const EVP_CIPHER * __cdecl EVP_des_ede3_ecb(void);
+const EVP_CIPHER * __cdecl EVP_des_cfb64(void);
 #  define EVP_des_cfb EVP_des_cfb64
-const EVP_CIPHER *EVP_des_cfb1(void);
-const EVP_CIPHER *EVP_des_cfb8(void);
-const EVP_CIPHER *EVP_des_ede_cfb64(void);
+const EVP_CIPHER * __cdecl EVP_des_cfb1(void);
+const EVP_CIPHER * __cdecl EVP_des_cfb8(void);
+const EVP_CIPHER * __cdecl EVP_des_ede_cfb64(void);
 #  define EVP_des_ede_cfb EVP_des_ede_cfb64
-const EVP_CIPHER *EVP_des_ede3_cfb64(void);
+const EVP_CIPHER * __cdecl EVP_des_ede3_cfb64(void);
 #  define EVP_des_ede3_cfb EVP_des_ede3_cfb64
-const EVP_CIPHER *EVP_des_ede3_cfb1(void);
-const EVP_CIPHER *EVP_des_ede3_cfb8(void);
-const EVP_CIPHER *EVP_des_ofb(void);
-const EVP_CIPHER *EVP_des_ede_ofb(void);
-const EVP_CIPHER *EVP_des_ede3_ofb(void);
-const EVP_CIPHER *EVP_des_cbc(void);
-const EVP_CIPHER *EVP_des_ede_cbc(void);
-const EVP_CIPHER *EVP_des_ede3_cbc(void);
-const EVP_CIPHER *EVP_desx_cbc(void);
-const EVP_CIPHER *EVP_des_ede3_wrap(void);
+const EVP_CIPHER * __cdecl EVP_des_ede3_cfb1(void);
+const EVP_CIPHER * __cdecl EVP_des_ede3_cfb8(void);
+const EVP_CIPHER * __cdecl EVP_des_ofb(void);
+const EVP_CIPHER * __cdecl EVP_des_ede_ofb(void);
+const EVP_CIPHER * __cdecl EVP_des_ede3_ofb(void);
+const EVP_CIPHER * __cdecl EVP_des_cbc(void);
+const EVP_CIPHER * __cdecl EVP_des_ede_cbc(void);
+const EVP_CIPHER * __cdecl EVP_des_ede3_cbc(void);
+const EVP_CIPHER * __cdecl EVP_desx_cbc(void);
+const EVP_CIPHER * __cdecl EVP_des_ede3_wrap(void);
 /*
  * This should now be supported through the dev_crypto ENGINE. But also, why
  * are rc4 and md5 declarations made here inside a "NO_DES" precompiler
@@ -763,180 +763,180 @@ const EVP_CIPHER *EVP_des_ede3_wrap(void);
  */
 # endif
 # ifndef OPENSSL_NO_RC4
-const EVP_CIPHER *EVP_rc4(void);
-const EVP_CIPHER *EVP_rc4_40(void);
+const EVP_CIPHER * __cdecl EVP_rc4(void);
+const EVP_CIPHER * __cdecl EVP_rc4_40(void);
 #  ifndef OPENSSL_NO_MD5
-const EVP_CIPHER *EVP_rc4_hmac_md5(void);
+const EVP_CIPHER * __cdecl EVP_rc4_hmac_md5(void);
 #  endif
 # endif
 # ifndef OPENSSL_NO_IDEA
-const EVP_CIPHER *EVP_idea_ecb(void);
-const EVP_CIPHER *EVP_idea_cfb64(void);
+const EVP_CIPHER * __cdecl EVP_idea_ecb(void);
+const EVP_CIPHER * __cdecl EVP_idea_cfb64(void);
 #  define EVP_idea_cfb EVP_idea_cfb64
-const EVP_CIPHER *EVP_idea_ofb(void);
-const EVP_CIPHER *EVP_idea_cbc(void);
+const EVP_CIPHER * __cdecl EVP_idea_ofb(void);
+const EVP_CIPHER * __cdecl EVP_idea_cbc(void);
 # endif
 # ifndef OPENSSL_NO_RC2
-const EVP_CIPHER *EVP_rc2_ecb(void);
-const EVP_CIPHER *EVP_rc2_cbc(void);
-const EVP_CIPHER *EVP_rc2_40_cbc(void);
-const EVP_CIPHER *EVP_rc2_64_cbc(void);
-const EVP_CIPHER *EVP_rc2_cfb64(void);
+const EVP_CIPHER * __cdecl EVP_rc2_ecb(void);
+const EVP_CIPHER * __cdecl EVP_rc2_cbc(void);
+const EVP_CIPHER * __cdecl EVP_rc2_40_cbc(void);
+const EVP_CIPHER * __cdecl EVP_rc2_64_cbc(void);
+const EVP_CIPHER * __cdecl EVP_rc2_cfb64(void);
 #  define EVP_rc2_cfb EVP_rc2_cfb64
-const EVP_CIPHER *EVP_rc2_ofb(void);
+const EVP_CIPHER * __cdecl EVP_rc2_ofb(void);
 # endif
 # ifndef OPENSSL_NO_BF
-const EVP_CIPHER *EVP_bf_ecb(void);
-const EVP_CIPHER *EVP_bf_cbc(void);
-const EVP_CIPHER *EVP_bf_cfb64(void);
+const EVP_CIPHER * __cdecl EVP_bf_ecb(void);
+const EVP_CIPHER * __cdecl EVP_bf_cbc(void);
+const EVP_CIPHER * __cdecl EVP_bf_cfb64(void);
 #  define EVP_bf_cfb EVP_bf_cfb64
-const EVP_CIPHER *EVP_bf_ofb(void);
+const EVP_CIPHER * __cdecl EVP_bf_ofb(void);
 # endif
 # ifndef OPENSSL_NO_CAST
-const EVP_CIPHER *EVP_cast5_ecb(void);
-const EVP_CIPHER *EVP_cast5_cbc(void);
-const EVP_CIPHER *EVP_cast5_cfb64(void);
+const EVP_CIPHER * __cdecl EVP_cast5_ecb(void);
+const EVP_CIPHER * __cdecl EVP_cast5_cbc(void);
+const EVP_CIPHER * __cdecl EVP_cast5_cfb64(void);
 #  define EVP_cast5_cfb EVP_cast5_cfb64
-const EVP_CIPHER *EVP_cast5_ofb(void);
+const EVP_CIPHER * __cdecl EVP_cast5_ofb(void);
 # endif
 # ifndef OPENSSL_NO_RC5
-const EVP_CIPHER *EVP_rc5_32_12_16_cbc(void);
-const EVP_CIPHER *EVP_rc5_32_12_16_ecb(void);
-const EVP_CIPHER *EVP_rc5_32_12_16_cfb64(void);
+const EVP_CIPHER * __cdecl EVP_rc5_32_12_16_cbc(void);
+const EVP_CIPHER * __cdecl EVP_rc5_32_12_16_ecb(void);
+const EVP_CIPHER * __cdecl EVP_rc5_32_12_16_cfb64(void);
 #  define EVP_rc5_32_12_16_cfb EVP_rc5_32_12_16_cfb64
-const EVP_CIPHER *EVP_rc5_32_12_16_ofb(void);
+const EVP_CIPHER * __cdecl EVP_rc5_32_12_16_ofb(void);
 # endif
-const EVP_CIPHER *EVP_aes_128_ecb(void);
-const EVP_CIPHER *EVP_aes_128_cbc(void);
-const EVP_CIPHER *EVP_aes_128_cfb1(void);
-const EVP_CIPHER *EVP_aes_128_cfb8(void);
-const EVP_CIPHER *EVP_aes_128_cfb128(void);
+const EVP_CIPHER * __cdecl EVP_aes_128_ecb(void);
+const EVP_CIPHER * __cdecl EVP_aes_128_cbc(void);
+const EVP_CIPHER * __cdecl EVP_aes_128_cfb1(void);
+const EVP_CIPHER * __cdecl EVP_aes_128_cfb8(void);
+const EVP_CIPHER * __cdecl EVP_aes_128_cfb128(void);
 # define EVP_aes_128_cfb EVP_aes_128_cfb128
-const EVP_CIPHER *EVP_aes_128_ofb(void);
-const EVP_CIPHER *EVP_aes_128_ctr(void);
-const EVP_CIPHER *EVP_aes_128_ccm(void);
-const EVP_CIPHER *EVP_aes_128_gcm(void);
-const EVP_CIPHER *EVP_aes_128_xts(void);
-const EVP_CIPHER *EVP_aes_128_wrap(void);
-const EVP_CIPHER *EVP_aes_128_wrap_pad(void);
+const EVP_CIPHER * __cdecl EVP_aes_128_ofb(void);
+const EVP_CIPHER * __cdecl EVP_aes_128_ctr(void);
+const EVP_CIPHER * __cdecl EVP_aes_128_ccm(void);
+const EVP_CIPHER * __cdecl EVP_aes_128_gcm(void);
+const EVP_CIPHER * __cdecl EVP_aes_128_xts(void);
+const EVP_CIPHER * __cdecl EVP_aes_128_wrap(void);
+const EVP_CIPHER * __cdecl EVP_aes_128_wrap_pad(void);
 # ifndef OPENSSL_NO_OCB
-const EVP_CIPHER *EVP_aes_128_ocb(void);
+const EVP_CIPHER * __cdecl EVP_aes_128_ocb(void);
 # endif
-const EVP_CIPHER *EVP_aes_192_ecb(void);
-const EVP_CIPHER *EVP_aes_192_cbc(void);
-const EVP_CIPHER *EVP_aes_192_cfb1(void);
-const EVP_CIPHER *EVP_aes_192_cfb8(void);
-const EVP_CIPHER *EVP_aes_192_cfb128(void);
+const EVP_CIPHER * __cdecl EVP_aes_192_ecb(void);
+const EVP_CIPHER * __cdecl EVP_aes_192_cbc(void);
+const EVP_CIPHER * __cdecl EVP_aes_192_cfb1(void);
+const EVP_CIPHER * __cdecl EVP_aes_192_cfb8(void);
+const EVP_CIPHER * __cdecl EVP_aes_192_cfb128(void);
 # define EVP_aes_192_cfb EVP_aes_192_cfb128
-const EVP_CIPHER *EVP_aes_192_ofb(void);
-const EVP_CIPHER *EVP_aes_192_ctr(void);
-const EVP_CIPHER *EVP_aes_192_ccm(void);
-const EVP_CIPHER *EVP_aes_192_gcm(void);
-const EVP_CIPHER *EVP_aes_192_wrap(void);
-const EVP_CIPHER *EVP_aes_192_wrap_pad(void);
+const EVP_CIPHER * __cdecl EVP_aes_192_ofb(void);
+const EVP_CIPHER * __cdecl EVP_aes_192_ctr(void);
+const EVP_CIPHER * __cdecl EVP_aes_192_ccm(void);
+const EVP_CIPHER * __cdecl EVP_aes_192_gcm(void);
+const EVP_CIPHER * __cdecl EVP_aes_192_wrap(void);
+const EVP_CIPHER * __cdecl EVP_aes_192_wrap_pad(void);
 # ifndef OPENSSL_NO_OCB
-const EVP_CIPHER *EVP_aes_192_ocb(void);
+const EVP_CIPHER * __cdecl EVP_aes_192_ocb(void);
 # endif
-const EVP_CIPHER *EVP_aes_256_ecb(void);
-const EVP_CIPHER *EVP_aes_256_cbc(void);
-const EVP_CIPHER *EVP_aes_256_cfb1(void);
-const EVP_CIPHER *EVP_aes_256_cfb8(void);
-const EVP_CIPHER *EVP_aes_256_cfb128(void);
+const EVP_CIPHER * __cdecl EVP_aes_256_ecb(void);
+const EVP_CIPHER * __cdecl EVP_aes_256_cbc(void);
+const EVP_CIPHER * __cdecl EVP_aes_256_cfb1(void);
+const EVP_CIPHER * __cdecl EVP_aes_256_cfb8(void);
+const EVP_CIPHER * __cdecl EVP_aes_256_cfb128(void);
 # define EVP_aes_256_cfb EVP_aes_256_cfb128
-const EVP_CIPHER *EVP_aes_256_ofb(void);
-const EVP_CIPHER *EVP_aes_256_ctr(void);
-const EVP_CIPHER *EVP_aes_256_ccm(void);
-const EVP_CIPHER *EVP_aes_256_gcm(void);
-const EVP_CIPHER *EVP_aes_256_xts(void);
-const EVP_CIPHER *EVP_aes_256_wrap(void);
-const EVP_CIPHER *EVP_aes_256_wrap_pad(void);
+const EVP_CIPHER * __cdecl EVP_aes_256_ofb(void);
+const EVP_CIPHER * __cdecl EVP_aes_256_ctr(void);
+const EVP_CIPHER * __cdecl EVP_aes_256_ccm(void);
+const EVP_CIPHER * __cdecl EVP_aes_256_gcm(void);
+const EVP_CIPHER * __cdecl EVP_aes_256_xts(void);
+const EVP_CIPHER * __cdecl EVP_aes_256_wrap(void);
+const EVP_CIPHER * __cdecl EVP_aes_256_wrap_pad(void);
 # ifndef OPENSSL_NO_OCB
-const EVP_CIPHER *EVP_aes_256_ocb(void);
+const EVP_CIPHER * __cdecl EVP_aes_256_ocb(void);
 # endif
-const EVP_CIPHER *EVP_aes_128_cbc_hmac_sha1(void);
-const EVP_CIPHER *EVP_aes_256_cbc_hmac_sha1(void);
-const EVP_CIPHER *EVP_aes_128_cbc_hmac_sha256(void);
-const EVP_CIPHER *EVP_aes_256_cbc_hmac_sha256(void);
+const EVP_CIPHER * __cdecl EVP_aes_128_cbc_hmac_sha1(void);
+const EVP_CIPHER * __cdecl EVP_aes_256_cbc_hmac_sha1(void);
+const EVP_CIPHER * __cdecl EVP_aes_128_cbc_hmac_sha256(void);
+const EVP_CIPHER * __cdecl EVP_aes_256_cbc_hmac_sha256(void);
 # ifndef OPENSSL_NO_ARIA
-const EVP_CIPHER *EVP_aria_128_ecb(void);
-const EVP_CIPHER *EVP_aria_128_cbc(void);
-const EVP_CIPHER *EVP_aria_128_cfb1(void);
-const EVP_CIPHER *EVP_aria_128_cfb8(void);
-const EVP_CIPHER *EVP_aria_128_cfb128(void);
+const EVP_CIPHER * __cdecl EVP_aria_128_ecb(void);
+const EVP_CIPHER * __cdecl EVP_aria_128_cbc(void);
+const EVP_CIPHER * __cdecl EVP_aria_128_cfb1(void);
+const EVP_CIPHER * __cdecl EVP_aria_128_cfb8(void);
+const EVP_CIPHER * __cdecl EVP_aria_128_cfb128(void);
 #  define EVP_aria_128_cfb EVP_aria_128_cfb128
-const EVP_CIPHER *EVP_aria_128_ctr(void);
-const EVP_CIPHER *EVP_aria_128_ofb(void);
-const EVP_CIPHER *EVP_aria_128_gcm(void);
-const EVP_CIPHER *EVP_aria_128_ccm(void);
-const EVP_CIPHER *EVP_aria_192_ecb(void);
-const EVP_CIPHER *EVP_aria_192_cbc(void);
-const EVP_CIPHER *EVP_aria_192_cfb1(void);
-const EVP_CIPHER *EVP_aria_192_cfb8(void);
-const EVP_CIPHER *EVP_aria_192_cfb128(void);
+const EVP_CIPHER * __cdecl EVP_aria_128_ctr(void);
+const EVP_CIPHER * __cdecl EVP_aria_128_ofb(void);
+const EVP_CIPHER * __cdecl EVP_aria_128_gcm(void);
+const EVP_CIPHER * __cdecl EVP_aria_128_ccm(void);
+const EVP_CIPHER * __cdecl EVP_aria_192_ecb(void);
+const EVP_CIPHER * __cdecl EVP_aria_192_cbc(void);
+const EVP_CIPHER * __cdecl EVP_aria_192_cfb1(void);
+const EVP_CIPHER * __cdecl EVP_aria_192_cfb8(void);
+const EVP_CIPHER * __cdecl EVP_aria_192_cfb128(void);
 #  define EVP_aria_192_cfb EVP_aria_192_cfb128
-const EVP_CIPHER *EVP_aria_192_ctr(void);
-const EVP_CIPHER *EVP_aria_192_ofb(void);
-const EVP_CIPHER *EVP_aria_192_gcm(void);
-const EVP_CIPHER *EVP_aria_192_ccm(void);
-const EVP_CIPHER *EVP_aria_256_ecb(void);
-const EVP_CIPHER *EVP_aria_256_cbc(void);
-const EVP_CIPHER *EVP_aria_256_cfb1(void);
-const EVP_CIPHER *EVP_aria_256_cfb8(void);
-const EVP_CIPHER *EVP_aria_256_cfb128(void);
+const EVP_CIPHER * __cdecl EVP_aria_192_ctr(void);
+const EVP_CIPHER * __cdecl EVP_aria_192_ofb(void);
+const EVP_CIPHER * __cdecl EVP_aria_192_gcm(void);
+const EVP_CIPHER * __cdecl EVP_aria_192_ccm(void);
+const EVP_CIPHER * __cdecl EVP_aria_256_ecb(void);
+const EVP_CIPHER * __cdecl EVP_aria_256_cbc(void);
+const EVP_CIPHER * __cdecl EVP_aria_256_cfb1(void);
+const EVP_CIPHER * __cdecl EVP_aria_256_cfb8(void);
+const EVP_CIPHER * __cdecl EVP_aria_256_cfb128(void);
 #  define EVP_aria_256_cfb EVP_aria_256_cfb128
-const EVP_CIPHER *EVP_aria_256_ctr(void);
-const EVP_CIPHER *EVP_aria_256_ofb(void);
-const EVP_CIPHER *EVP_aria_256_gcm(void);
-const EVP_CIPHER *EVP_aria_256_ccm(void);
+const EVP_CIPHER * __cdecl EVP_aria_256_ctr(void);
+const EVP_CIPHER * __cdecl EVP_aria_256_ofb(void);
+const EVP_CIPHER * __cdecl EVP_aria_256_gcm(void);
+const EVP_CIPHER * __cdecl EVP_aria_256_ccm(void);
 # endif
 # ifndef OPENSSL_NO_CAMELLIA
-const EVP_CIPHER *EVP_camellia_128_ecb(void);
-const EVP_CIPHER *EVP_camellia_128_cbc(void);
-const EVP_CIPHER *EVP_camellia_128_cfb1(void);
-const EVP_CIPHER *EVP_camellia_128_cfb8(void);
-const EVP_CIPHER *EVP_camellia_128_cfb128(void);
+const EVP_CIPHER * __cdecl EVP_camellia_128_ecb(void);
+const EVP_CIPHER * __cdecl EVP_camellia_128_cbc(void);
+const EVP_CIPHER * __cdecl EVP_camellia_128_cfb1(void);
+const EVP_CIPHER * __cdecl EVP_camellia_128_cfb8(void);
+const EVP_CIPHER * __cdecl EVP_camellia_128_cfb128(void);
 #  define EVP_camellia_128_cfb EVP_camellia_128_cfb128
-const EVP_CIPHER *EVP_camellia_128_ofb(void);
-const EVP_CIPHER *EVP_camellia_128_ctr(void);
-const EVP_CIPHER *EVP_camellia_192_ecb(void);
-const EVP_CIPHER *EVP_camellia_192_cbc(void);
-const EVP_CIPHER *EVP_camellia_192_cfb1(void);
-const EVP_CIPHER *EVP_camellia_192_cfb8(void);
-const EVP_CIPHER *EVP_camellia_192_cfb128(void);
+const EVP_CIPHER * __cdecl EVP_camellia_128_ofb(void);
+const EVP_CIPHER * __cdecl EVP_camellia_128_ctr(void);
+const EVP_CIPHER * __cdecl EVP_camellia_192_ecb(void);
+const EVP_CIPHER * __cdecl EVP_camellia_192_cbc(void);
+const EVP_CIPHER * __cdecl EVP_camellia_192_cfb1(void);
+const EVP_CIPHER * __cdecl EVP_camellia_192_cfb8(void);
+const EVP_CIPHER * __cdecl EVP_camellia_192_cfb128(void);
 #  define EVP_camellia_192_cfb EVP_camellia_192_cfb128
-const EVP_CIPHER *EVP_camellia_192_ofb(void);
-const EVP_CIPHER *EVP_camellia_192_ctr(void);
-const EVP_CIPHER *EVP_camellia_256_ecb(void);
-const EVP_CIPHER *EVP_camellia_256_cbc(void);
-const EVP_CIPHER *EVP_camellia_256_cfb1(void);
-const EVP_CIPHER *EVP_camellia_256_cfb8(void);
-const EVP_CIPHER *EVP_camellia_256_cfb128(void);
+const EVP_CIPHER * __cdecl EVP_camellia_192_ofb(void);
+const EVP_CIPHER * __cdecl EVP_camellia_192_ctr(void);
+const EVP_CIPHER * __cdecl EVP_camellia_256_ecb(void);
+const EVP_CIPHER * __cdecl EVP_camellia_256_cbc(void);
+const EVP_CIPHER * __cdecl EVP_camellia_256_cfb1(void);
+const EVP_CIPHER * __cdecl EVP_camellia_256_cfb8(void);
+const EVP_CIPHER * __cdecl EVP_camellia_256_cfb128(void);
 #  define EVP_camellia_256_cfb EVP_camellia_256_cfb128
-const EVP_CIPHER *EVP_camellia_256_ofb(void);
-const EVP_CIPHER *EVP_camellia_256_ctr(void);
+const EVP_CIPHER * __cdecl EVP_camellia_256_ofb(void);
+const EVP_CIPHER * __cdecl EVP_camellia_256_ctr(void);
 # endif
 # ifndef OPENSSL_NO_CHACHA
-const EVP_CIPHER *EVP_chacha20(void);
+const EVP_CIPHER * __cdecl EVP_chacha20(void);
 #  ifndef OPENSSL_NO_POLY1305
-const EVP_CIPHER *EVP_chacha20_poly1305(void);
+const EVP_CIPHER * __cdecl EVP_chacha20_poly1305(void);
 #  endif
 # endif
 
 # ifndef OPENSSL_NO_SEED
-const EVP_CIPHER *EVP_seed_ecb(void);
-const EVP_CIPHER *EVP_seed_cbc(void);
-const EVP_CIPHER *EVP_seed_cfb128(void);
+const EVP_CIPHER * __cdecl EVP_seed_ecb(void);
+const EVP_CIPHER * __cdecl EVP_seed_cbc(void);
+const EVP_CIPHER * __cdecl EVP_seed_cfb128(void);
 #  define EVP_seed_cfb EVP_seed_cfb128
-const EVP_CIPHER *EVP_seed_ofb(void);
+const EVP_CIPHER * __cdecl EVP_seed_ofb(void);
 # endif
 
 # ifndef OPENSSL_NO_SM4
-const EVP_CIPHER *EVP_sm4_ecb(void);
-const EVP_CIPHER *EVP_sm4_cbc(void);
-const EVP_CIPHER *EVP_sm4_cfb128(void);
+const EVP_CIPHER * __cdecl EVP_sm4_ecb(void);
+const EVP_CIPHER * __cdecl EVP_sm4_cbc(void);
+const EVP_CIPHER * __cdecl EVP_sm4_cfb128(void);
 #  define EVP_sm4_cfb EVP_sm4_cfb128
-const EVP_CIPHER *EVP_sm4_ofb(void);
-const EVP_CIPHER *EVP_sm4_ctr(void);
+const EVP_CIPHER * __cdecl EVP_sm4_ofb(void);
+const EVP_CIPHER * __cdecl EVP_sm4_ctr(void);
 # endif
 
 # if OPENSSL_API_COMPAT < 0x10100000L
@@ -962,152 +962,152 @@ const EVP_CIPHER *EVP_sm4_ctr(void);
 #  define EVP_cleanup() while(0) continue
 # endif
 
-int EVP_add_cipher(const EVP_CIPHER *cipher);
-int EVP_add_digest(const EVP_MD *digest);
+int __cdecl EVP_add_cipher(const EVP_CIPHER *cipher);
+int __cdecl EVP_add_digest(const EVP_MD *digest);
 
-const EVP_CIPHER *EVP_get_cipherbyname(const char *name);
-const EVP_MD *EVP_get_digestbyname(const char *name);
+const EVP_CIPHER * __cdecl EVP_get_cipherbyname(const char *name);
+const EVP_MD * __cdecl EVP_get_digestbyname(const char *name);
 
-void EVP_CIPHER_do_all(void (*fn) (const EVP_CIPHER *ciph,
+void __cdecl EVP_CIPHER_do_all(void (__cdecl *fn) (const EVP_CIPHER *ciph,
                                    const char *from, const char *to, void *x),
                        void *arg);
-void EVP_CIPHER_do_all_sorted(void (*fn)
+void __cdecl EVP_CIPHER_do_all_sorted(void (__cdecl *fn)
                                (const EVP_CIPHER *ciph, const char *from,
                                 const char *to, void *x), void *arg);
 
-void EVP_MD_do_all(void (*fn) (const EVP_MD *ciph,
+void __cdecl EVP_MD_do_all(void (__cdecl *fn) (const EVP_MD *ciph,
                                const char *from, const char *to, void *x),
                    void *arg);
-void EVP_MD_do_all_sorted(void (*fn)
+void __cdecl EVP_MD_do_all_sorted(void (__cdecl *fn)
                            (const EVP_MD *ciph, const char *from,
                             const char *to, void *x), void *arg);
 
-int EVP_PKEY_decrypt_old(unsigned char *dec_key,
+int __cdecl EVP_PKEY_decrypt_old(unsigned char *dec_key,
                          const unsigned char *enc_key, int enc_key_len,
                          EVP_PKEY *private_key);
-int EVP_PKEY_encrypt_old(unsigned char *enc_key,
+int __cdecl EVP_PKEY_encrypt_old(unsigned char *enc_key,
                          const unsigned char *key, int key_len,
                          EVP_PKEY *pub_key);
-int EVP_PKEY_type(int type);
-int EVP_PKEY_id(const EVP_PKEY *pkey);
-int EVP_PKEY_base_id(const EVP_PKEY *pkey);
-int EVP_PKEY_bits(const EVP_PKEY *pkey);
-int EVP_PKEY_security_bits(const EVP_PKEY *pkey);
-int EVP_PKEY_size(const EVP_PKEY *pkey);
-int EVP_PKEY_set_type(EVP_PKEY *pkey, int type);
-int EVP_PKEY_set_type_str(EVP_PKEY *pkey, const char *str, int len);
-int EVP_PKEY_set_alias_type(EVP_PKEY *pkey, int type);
+int __cdecl EVP_PKEY_type(int type);
+int __cdecl EVP_PKEY_id(const EVP_PKEY *pkey);
+int __cdecl EVP_PKEY_base_id(const EVP_PKEY *pkey);
+int __cdecl EVP_PKEY_bits(const EVP_PKEY *pkey);
+int __cdecl EVP_PKEY_security_bits(const EVP_PKEY *pkey);
+int __cdecl EVP_PKEY_size(const EVP_PKEY *pkey);
+int __cdecl EVP_PKEY_set_type(EVP_PKEY *pkey, int type);
+int __cdecl EVP_PKEY_set_type_str(EVP_PKEY *pkey, const char *str, int len);
+int __cdecl EVP_PKEY_set_alias_type(EVP_PKEY *pkey, int type);
 # ifndef OPENSSL_NO_ENGINE
-int EVP_PKEY_set1_engine(EVP_PKEY *pkey, ENGINE *e);
-ENGINE *EVP_PKEY_get0_engine(const EVP_PKEY *pkey);
+int __cdecl EVP_PKEY_set1_engine(EVP_PKEY *pkey, ENGINE *e);
+ENGINE * __cdecl EVP_PKEY_get0_engine(const EVP_PKEY *pkey);
 # endif
-int EVP_PKEY_assign(EVP_PKEY *pkey, int type, void *key);
-void *EVP_PKEY_get0(const EVP_PKEY *pkey);
-const unsigned char *EVP_PKEY_get0_hmac(const EVP_PKEY *pkey, size_t *len);
+int __cdecl EVP_PKEY_assign(EVP_PKEY *pkey, int type, void *key);
+void * __cdecl EVP_PKEY_get0(const EVP_PKEY *pkey);
+const unsigned char * __cdecl EVP_PKEY_get0_hmac(const EVP_PKEY *pkey, size_t *len);
 # ifndef OPENSSL_NO_POLY1305
-const unsigned char *EVP_PKEY_get0_poly1305(const EVP_PKEY *pkey, size_t *len);
+const unsigned char * __cdecl EVP_PKEY_get0_poly1305(const EVP_PKEY *pkey, size_t *len);
 # endif
 # ifndef OPENSSL_NO_SIPHASH
-const unsigned char *EVP_PKEY_get0_siphash(const EVP_PKEY *pkey, size_t *len);
+const unsigned char * __cdecl EVP_PKEY_get0_siphash(const EVP_PKEY *pkey, size_t *len);
 # endif
 
 # ifndef OPENSSL_NO_RSA
 struct rsa_st;
-int EVP_PKEY_set1_RSA(EVP_PKEY *pkey, struct rsa_st *key);
-struct rsa_st *EVP_PKEY_get0_RSA(EVP_PKEY *pkey);
-struct rsa_st *EVP_PKEY_get1_RSA(EVP_PKEY *pkey);
+int __cdecl EVP_PKEY_set1_RSA(EVP_PKEY *pkey, struct rsa_st *key);
+struct rsa_st * __cdecl EVP_PKEY_get0_RSA(EVP_PKEY *pkey);
+struct rsa_st * __cdecl EVP_PKEY_get1_RSA(EVP_PKEY *pkey);
 # endif
 # ifndef OPENSSL_NO_DSA
 struct dsa_st;
-int EVP_PKEY_set1_DSA(EVP_PKEY *pkey, struct dsa_st *key);
-struct dsa_st *EVP_PKEY_get0_DSA(EVP_PKEY *pkey);
-struct dsa_st *EVP_PKEY_get1_DSA(EVP_PKEY *pkey);
+int __cdecl EVP_PKEY_set1_DSA(EVP_PKEY *pkey, struct dsa_st *key);
+struct dsa_st * __cdecl EVP_PKEY_get0_DSA(EVP_PKEY *pkey);
+struct dsa_st * __cdecl EVP_PKEY_get1_DSA(EVP_PKEY *pkey);
 # endif
 # ifndef OPENSSL_NO_DH
 struct dh_st;
-int EVP_PKEY_set1_DH(EVP_PKEY *pkey, struct dh_st *key);
-struct dh_st *EVP_PKEY_get0_DH(EVP_PKEY *pkey);
-struct dh_st *EVP_PKEY_get1_DH(EVP_PKEY *pkey);
+int __cdecl EVP_PKEY_set1_DH(EVP_PKEY *pkey, struct dh_st *key);
+struct dh_st * __cdecl EVP_PKEY_get0_DH(EVP_PKEY *pkey);
+struct dh_st * __cdecl EVP_PKEY_get1_DH(EVP_PKEY *pkey);
 # endif
 # ifndef OPENSSL_NO_EC
 struct ec_key_st;
-int EVP_PKEY_set1_EC_KEY(EVP_PKEY *pkey, struct ec_key_st *key);
-struct ec_key_st *EVP_PKEY_get0_EC_KEY(EVP_PKEY *pkey);
-struct ec_key_st *EVP_PKEY_get1_EC_KEY(EVP_PKEY *pkey);
+int __cdecl EVP_PKEY_set1_EC_KEY(EVP_PKEY *pkey, struct ec_key_st *key);
+struct ec_key_st * __cdecl EVP_PKEY_get0_EC_KEY(EVP_PKEY *pkey);
+struct ec_key_st * __cdecl EVP_PKEY_get1_EC_KEY(EVP_PKEY *pkey);
 # endif
 
-EVP_PKEY *EVP_PKEY_new(void);
-int EVP_PKEY_up_ref(EVP_PKEY *pkey);
-void EVP_PKEY_free(EVP_PKEY *pkey);
+EVP_PKEY * __cdecl EVP_PKEY_new(void);
+int __cdecl EVP_PKEY_up_ref(EVP_PKEY *pkey);
+void __cdecl EVP_PKEY_free(EVP_PKEY *pkey);
 
-EVP_PKEY *d2i_PublicKey(int type, EVP_PKEY **a, const unsigned char **pp,
+EVP_PKEY * __cdecl d2i_PublicKey(int type, EVP_PKEY **a, const unsigned char **pp,
                         long length);
-int i2d_PublicKey(EVP_PKEY *a, unsigned char **pp);
+int __cdecl i2d_PublicKey(EVP_PKEY *a, unsigned char **pp);
 
-EVP_PKEY *d2i_PrivateKey(int type, EVP_PKEY **a, const unsigned char **pp,
+EVP_PKEY * __cdecl d2i_PrivateKey(int type, EVP_PKEY **a, const unsigned char **pp,
                          long length);
-EVP_PKEY *d2i_AutoPrivateKey(EVP_PKEY **a, const unsigned char **pp,
+EVP_PKEY * __cdecl d2i_AutoPrivateKey(EVP_PKEY **a, const unsigned char **pp,
                              long length);
-int i2d_PrivateKey(EVP_PKEY *a, unsigned char **pp);
+int __cdecl i2d_PrivateKey(EVP_PKEY *a, unsigned char **pp);
 
-int EVP_PKEY_copy_parameters(EVP_PKEY *to, const EVP_PKEY *from);
-int EVP_PKEY_missing_parameters(const EVP_PKEY *pkey);
-int EVP_PKEY_save_parameters(EVP_PKEY *pkey, int mode);
-int EVP_PKEY_cmp_parameters(const EVP_PKEY *a, const EVP_PKEY *b);
+int __cdecl EVP_PKEY_copy_parameters(EVP_PKEY *to, const EVP_PKEY *from);
+int __cdecl EVP_PKEY_missing_parameters(const EVP_PKEY *pkey);
+int __cdecl EVP_PKEY_save_parameters(EVP_PKEY *pkey, int mode);
+int __cdecl EVP_PKEY_cmp_parameters(const EVP_PKEY *a, const EVP_PKEY *b);
 
-int EVP_PKEY_cmp(const EVP_PKEY *a, const EVP_PKEY *b);
+int __cdecl EVP_PKEY_cmp(const EVP_PKEY *a, const EVP_PKEY *b);
 
-int EVP_PKEY_print_public(BIO *out, const EVP_PKEY *pkey,
+int __cdecl EVP_PKEY_print_public(BIO *out, const EVP_PKEY *pkey,
                           int indent, ASN1_PCTX *pctx);
-int EVP_PKEY_print_private(BIO *out, const EVP_PKEY *pkey,
+int __cdecl EVP_PKEY_print_private(BIO *out, const EVP_PKEY *pkey,
                            int indent, ASN1_PCTX *pctx);
-int EVP_PKEY_print_params(BIO *out, const EVP_PKEY *pkey,
+int __cdecl EVP_PKEY_print_params(BIO *out, const EVP_PKEY *pkey,
                           int indent, ASN1_PCTX *pctx);
 
-int EVP_PKEY_get_default_digest_nid(EVP_PKEY *pkey, int *pnid);
+int __cdecl EVP_PKEY_get_default_digest_nid(EVP_PKEY *pkey, int *pnid);
 
-int EVP_PKEY_set1_tls_encodedpoint(EVP_PKEY *pkey,
+int __cdecl EVP_PKEY_set1_tls_encodedpoint(EVP_PKEY *pkey,
                                    const unsigned char *pt, size_t ptlen);
-size_t EVP_PKEY_get1_tls_encodedpoint(EVP_PKEY *pkey, unsigned char **ppt);
+size_t __cdecl EVP_PKEY_get1_tls_encodedpoint(EVP_PKEY *pkey, unsigned char **ppt);
 
-int EVP_CIPHER_type(const EVP_CIPHER *ctx);
+int __cdecl EVP_CIPHER_type(const EVP_CIPHER *ctx);
 
 /* calls methods */
-int EVP_CIPHER_param_to_asn1(EVP_CIPHER_CTX *c, ASN1_TYPE *type);
-int EVP_CIPHER_asn1_to_param(EVP_CIPHER_CTX *c, ASN1_TYPE *type);
+int __cdecl EVP_CIPHER_param_to_asn1(EVP_CIPHER_CTX *c, ASN1_TYPE *type);
+int __cdecl EVP_CIPHER_asn1_to_param(EVP_CIPHER_CTX *c, ASN1_TYPE *type);
 
 /* These are used by EVP_CIPHER methods */
-int EVP_CIPHER_set_asn1_iv(EVP_CIPHER_CTX *c, ASN1_TYPE *type);
-int EVP_CIPHER_get_asn1_iv(EVP_CIPHER_CTX *c, ASN1_TYPE *type);
+int __cdecl EVP_CIPHER_set_asn1_iv(EVP_CIPHER_CTX *c, ASN1_TYPE *type);
+int __cdecl EVP_CIPHER_get_asn1_iv(EVP_CIPHER_CTX *c, ASN1_TYPE *type);
 
 /* PKCS5 password based encryption */
-int PKCS5_PBE_keyivgen(EVP_CIPHER_CTX *ctx, const char *pass, int passlen,
+int __cdecl PKCS5_PBE_keyivgen(EVP_CIPHER_CTX *ctx, const char *pass, int passlen,
                        ASN1_TYPE *param, const EVP_CIPHER *cipher,
                        const EVP_MD *md, int en_de);
-int PKCS5_PBKDF2_HMAC_SHA1(const char *pass, int passlen,
+int __cdecl PKCS5_PBKDF2_HMAC_SHA1(const char *pass, int passlen,
                            const unsigned char *salt, int saltlen, int iter,
                            int keylen, unsigned char *out);
-int PKCS5_PBKDF2_HMAC(const char *pass, int passlen,
+int __cdecl PKCS5_PBKDF2_HMAC(const char *pass, int passlen,
                       const unsigned char *salt, int saltlen, int iter,
                       const EVP_MD *digest, int keylen, unsigned char *out);
-int PKCS5_v2_PBE_keyivgen(EVP_CIPHER_CTX *ctx, const char *pass, int passlen,
+int __cdecl PKCS5_v2_PBE_keyivgen(EVP_CIPHER_CTX *ctx, const char *pass, int passlen,
                           ASN1_TYPE *param, const EVP_CIPHER *cipher,
                           const EVP_MD *md, int en_de);
 
 #ifndef OPENSSL_NO_SCRYPT
-int EVP_PBE_scrypt(const char *pass, size_t passlen,
+int __cdecl EVP_PBE_scrypt(const char *pass, size_t passlen,
                    const unsigned char *salt, size_t saltlen,
                    uint64_t N, uint64_t r, uint64_t p, uint64_t maxmem,
                    unsigned char *key, size_t keylen);
 
-int PKCS5_v2_scrypt_keyivgen(EVP_CIPHER_CTX *ctx, const char *pass,
+int __cdecl PKCS5_v2_scrypt_keyivgen(EVP_CIPHER_CTX *ctx, const char *pass,
                              int passlen, ASN1_TYPE *param,
                              const EVP_CIPHER *c, const EVP_MD *md, int en_de);
 #endif
 
-void PKCS5_PBE_add(void);
+void __cdecl PKCS5_PBE_add(void);
 
-int EVP_PBE_CipherInit(ASN1_OBJECT *pbe_obj, const char *pass, int passlen,
+int __cdecl EVP_PBE_CipherInit(ASN1_OBJECT *pbe_obj, const char *pass, int passlen,
                        ASN1_TYPE *param, EVP_CIPHER_CTX *ctx, int en_de);
 
 /* PBE type */
@@ -1119,14 +1119,14 @@ int EVP_PBE_CipherInit(ASN1_OBJECT *pbe_obj, const char *pass, int passlen,
 /* Is a PKCS#5 v2.0 KDF */
 # define EVP_PBE_TYPE_KDF        0x2
 
-int EVP_PBE_alg_add_type(int pbe_type, int pbe_nid, int cipher_nid,
+int __cdecl EVP_PBE_alg_add_type(int pbe_type, int pbe_nid, int cipher_nid,
                          int md_nid, EVP_PBE_KEYGEN *keygen);
-int EVP_PBE_alg_add(int nid, const EVP_CIPHER *cipher, const EVP_MD *md,
+int __cdecl EVP_PBE_alg_add(int nid, const EVP_CIPHER *cipher, const EVP_MD *md,
                     EVP_PBE_KEYGEN *keygen);
-int EVP_PBE_find(int type, int pbe_nid, int *pcnid, int *pmnid,
+int __cdecl EVP_PBE_find(int type, int pbe_nid, int *pcnid, int *pmnid,
                  EVP_PBE_KEYGEN **pkeygen);
-void EVP_PBE_cleanup(void);
-int EVP_PBE_get(int *ptype, int *ppbe_nid, size_t num);
+void __cdecl EVP_PBE_cleanup(void);
+int __cdecl EVP_PBE_get(int *ptype, int *ppbe_nid, size_t num);
 
 # define ASN1_PKEY_ALIAS         0x1
 # define ASN1_PKEY_DYNAMIC       0x2
@@ -1142,116 +1142,116 @@ int EVP_PBE_get(int *ptype, int *ppbe_nid, size_t num);
 # define ASN1_PKEY_CTRL_SET1_TLS_ENCPT   0x9
 # define ASN1_PKEY_CTRL_GET1_TLS_ENCPT   0xa
 
-int EVP_PKEY_asn1_get_count(void);
-const EVP_PKEY_ASN1_METHOD *EVP_PKEY_asn1_get0(int idx);
-const EVP_PKEY_ASN1_METHOD *EVP_PKEY_asn1_find(ENGINE **pe, int type);
-const EVP_PKEY_ASN1_METHOD *EVP_PKEY_asn1_find_str(ENGINE **pe,
+int __cdecl EVP_PKEY_asn1_get_count(void);
+const EVP_PKEY_ASN1_METHOD * __cdecl EVP_PKEY_asn1_get0(int idx);
+const EVP_PKEY_ASN1_METHOD * __cdecl EVP_PKEY_asn1_find(ENGINE **pe, int type);
+const EVP_PKEY_ASN1_METHOD * __cdecl EVP_PKEY_asn1_find_str(ENGINE **pe,
                                                    const char *str, int len);
-int EVP_PKEY_asn1_add0(const EVP_PKEY_ASN1_METHOD *ameth);
-int EVP_PKEY_asn1_add_alias(int to, int from);
-int EVP_PKEY_asn1_get0_info(int *ppkey_id, int *pkey_base_id,
+int __cdecl EVP_PKEY_asn1_add0(const EVP_PKEY_ASN1_METHOD *ameth);
+int __cdecl EVP_PKEY_asn1_add_alias(int to, int from);
+int __cdecl EVP_PKEY_asn1_get0_info(int *ppkey_id, int *pkey_base_id,
                             int *ppkey_flags, const char **pinfo,
                             const char **ppem_str,
                             const EVP_PKEY_ASN1_METHOD *ameth);
 
-const EVP_PKEY_ASN1_METHOD *EVP_PKEY_get0_asn1(const EVP_PKEY *pkey);
-EVP_PKEY_ASN1_METHOD *EVP_PKEY_asn1_new(int id, int flags,
+const EVP_PKEY_ASN1_METHOD * __cdecl EVP_PKEY_get0_asn1(const EVP_PKEY *pkey);
+EVP_PKEY_ASN1_METHOD * __cdecl EVP_PKEY_asn1_new(int id, int flags,
                                         const char *pem_str,
                                         const char *info);
-void EVP_PKEY_asn1_copy(EVP_PKEY_ASN1_METHOD *dst,
+void __cdecl EVP_PKEY_asn1_copy(EVP_PKEY_ASN1_METHOD *dst,
                         const EVP_PKEY_ASN1_METHOD *src);
-void EVP_PKEY_asn1_free(EVP_PKEY_ASN1_METHOD *ameth);
-void EVP_PKEY_asn1_set_public(EVP_PKEY_ASN1_METHOD *ameth,
-                              int (*pub_decode) (EVP_PKEY *pk,
+void __cdecl EVP_PKEY_asn1_free(EVP_PKEY_ASN1_METHOD *ameth);
+void __cdecl EVP_PKEY_asn1_set_public(EVP_PKEY_ASN1_METHOD *ameth,
+                              int (__cdecl *pub_decode) (EVP_PKEY *pk,
                                                  X509_PUBKEY *pub),
-                              int (*pub_encode) (X509_PUBKEY *pub,
+                              int (__cdecl *pub_encode) (X509_PUBKEY *pub,
                                                  const EVP_PKEY *pk),
-                              int (*pub_cmp) (const EVP_PKEY *a,
+                              int (__cdecl *pub_cmp) (const EVP_PKEY *a,
                                               const EVP_PKEY *b),
-                              int (*pub_print) (BIO *out,
+                              int (__cdecl *pub_print) (BIO *out,
                                                 const EVP_PKEY *pkey,
                                                 int indent, ASN1_PCTX *pctx),
-                              int (*pkey_size) (const EVP_PKEY *pk),
-                              int (*pkey_bits) (const EVP_PKEY *pk));
-void EVP_PKEY_asn1_set_private(EVP_PKEY_ASN1_METHOD *ameth,
-                               int (*priv_decode) (EVP_PKEY *pk,
+                              int (__cdecl *pkey_size) (const EVP_PKEY *pk),
+                              int (__cdecl *pkey_bits) (const EVP_PKEY *pk));
+void __cdecl EVP_PKEY_asn1_set_private(EVP_PKEY_ASN1_METHOD *ameth,
+                               int (__cdecl *priv_decode) (EVP_PKEY *pk,
                                                    const PKCS8_PRIV_KEY_INFO
                                                    *p8inf),
-                               int (*priv_encode) (PKCS8_PRIV_KEY_INFO *p8,
+                               int (__cdecl *priv_encode) (PKCS8_PRIV_KEY_INFO *p8,
                                                    const EVP_PKEY *pk),
-                               int (*priv_print) (BIO *out,
+                               int (__cdecl *priv_print) (BIO *out,
                                                   const EVP_PKEY *pkey,
                                                   int indent,
                                                   ASN1_PCTX *pctx));
-void EVP_PKEY_asn1_set_param(EVP_PKEY_ASN1_METHOD *ameth,
-                             int (*param_decode) (EVP_PKEY *pkey,
+void __cdecl EVP_PKEY_asn1_set_param(EVP_PKEY_ASN1_METHOD *ameth,
+                             int (__cdecl *param_decode) (EVP_PKEY *pkey,
                                                   const unsigned char **pder,
                                                   int derlen),
-                             int (*param_encode) (const EVP_PKEY *pkey,
+                             int (__cdecl *param_encode) (const EVP_PKEY *pkey,
                                                   unsigned char **pder),
-                             int (*param_missing) (const EVP_PKEY *pk),
-                             int (*param_copy) (EVP_PKEY *to,
+                             int (__cdecl *param_missing) (const EVP_PKEY *pk),
+                             int (__cdecl *param_copy) (EVP_PKEY *to,
                                                 const EVP_PKEY *from),
-                             int (*param_cmp) (const EVP_PKEY *a,
+                             int (__cdecl *param_cmp) (const EVP_PKEY *a,
                                                const EVP_PKEY *b),
-                             int (*param_print) (BIO *out,
+                             int (__cdecl *param_print) (BIO *out,
                                                  const EVP_PKEY *pkey,
                                                  int indent,
                                                  ASN1_PCTX *pctx));
 
-void EVP_PKEY_asn1_set_free(EVP_PKEY_ASN1_METHOD *ameth,
-                            void (*pkey_free) (EVP_PKEY *pkey));
-void EVP_PKEY_asn1_set_ctrl(EVP_PKEY_ASN1_METHOD *ameth,
-                            int (*pkey_ctrl) (EVP_PKEY *pkey, int op,
+void __cdecl EVP_PKEY_asn1_set_free(EVP_PKEY_ASN1_METHOD *ameth,
+                            void (__cdecl *pkey_free) (EVP_PKEY *pkey));
+void __cdecl EVP_PKEY_asn1_set_ctrl(EVP_PKEY_ASN1_METHOD *ameth,
+                            int (__cdecl *pkey_ctrl) (EVP_PKEY *pkey, int op,
                                               long arg1, void *arg2));
-void EVP_PKEY_asn1_set_item(EVP_PKEY_ASN1_METHOD *ameth,
-                            int (*item_verify) (EVP_MD_CTX *ctx,
+void __cdecl EVP_PKEY_asn1_set_item(EVP_PKEY_ASN1_METHOD *ameth,
+                            int (__cdecl *item_verify) (EVP_MD_CTX *ctx,
                                                 const ASN1_ITEM *it,
                                                 void *asn,
                                                 X509_ALGOR *a,
                                                 ASN1_BIT_STRING *sig,
                                                 EVP_PKEY *pkey),
-                            int (*item_sign) (EVP_MD_CTX *ctx,
+                            int (__cdecl *item_sign) (EVP_MD_CTX *ctx,
                                               const ASN1_ITEM *it,
                                               void *asn,
                                               X509_ALGOR *alg1,
                                               X509_ALGOR *alg2,
                                               ASN1_BIT_STRING *sig));
 
-void EVP_PKEY_asn1_set_siginf(EVP_PKEY_ASN1_METHOD *ameth,
-                              int (*siginf_set) (X509_SIG_INFO *siginf,
+void __cdecl EVP_PKEY_asn1_set_siginf(EVP_PKEY_ASN1_METHOD *ameth,
+                              int (__cdecl *siginf_set) (X509_SIG_INFO *siginf,
                                                  const X509_ALGOR *alg,
                                                  const ASN1_STRING *sig));
 
-void EVP_PKEY_asn1_set_check(EVP_PKEY_ASN1_METHOD *ameth,
-                             int (*pkey_check) (const EVP_PKEY *pk));
+void __cdecl EVP_PKEY_asn1_set_check(EVP_PKEY_ASN1_METHOD *ameth,
+                             int (__cdecl *pkey_check) (const EVP_PKEY *pk));
 
-void EVP_PKEY_asn1_set_public_check(EVP_PKEY_ASN1_METHOD *ameth,
-                                    int (*pkey_pub_check) (const EVP_PKEY *pk));
+void __cdecl EVP_PKEY_asn1_set_public_check(EVP_PKEY_ASN1_METHOD *ameth,
+                                    int (__cdecl *pkey_pub_check) (const EVP_PKEY *pk));
 
-void EVP_PKEY_asn1_set_param_check(EVP_PKEY_ASN1_METHOD *ameth,
-                                   int (*pkey_param_check) (const EVP_PKEY *pk));
+void __cdecl EVP_PKEY_asn1_set_param_check(EVP_PKEY_ASN1_METHOD *ameth,
+                                   int (__cdecl *pkey_param_check) (const EVP_PKEY *pk));
 
-void EVP_PKEY_asn1_set_set_priv_key(EVP_PKEY_ASN1_METHOD *ameth,
-                                    int (*set_priv_key) (EVP_PKEY *pk,
+void __cdecl EVP_PKEY_asn1_set_set_priv_key(EVP_PKEY_ASN1_METHOD *ameth,
+                                    int (__cdecl *set_priv_key) (EVP_PKEY *pk,
                                                          const unsigned char
                                                             *priv,
                                                          size_t len));
-void EVP_PKEY_asn1_set_set_pub_key(EVP_PKEY_ASN1_METHOD *ameth,
-                                   int (*set_pub_key) (EVP_PKEY *pk,
+void __cdecl EVP_PKEY_asn1_set_set_pub_key(EVP_PKEY_ASN1_METHOD *ameth,
+                                   int (__cdecl *set_pub_key) (EVP_PKEY *pk,
                                                        const unsigned char *pub,
                                                        size_t len));
-void EVP_PKEY_asn1_set_get_priv_key(EVP_PKEY_ASN1_METHOD *ameth,
-                                    int (*get_priv_key) (const EVP_PKEY *pk,
+void __cdecl EVP_PKEY_asn1_set_get_priv_key(EVP_PKEY_ASN1_METHOD *ameth,
+                                    int (__cdecl *get_priv_key) (const EVP_PKEY *pk,
                                                          unsigned char *priv,
                                                          size_t *len));
-void EVP_PKEY_asn1_set_get_pub_key(EVP_PKEY_ASN1_METHOD *ameth,
-                                   int (*get_pub_key) (const EVP_PKEY *pk,
+void __cdecl EVP_PKEY_asn1_set_get_pub_key(EVP_PKEY_ASN1_METHOD *ameth,
+                                   int (__cdecl *get_pub_key) (const EVP_PKEY *pk,
                                                        unsigned char *pub,
                                                        size_t *len));
 
-void EVP_PKEY_asn1_set_security_bits(EVP_PKEY_ASN1_METHOD *ameth,
-                                     int (*pkey_security_bits) (const EVP_PKEY
+void __cdecl EVP_PKEY_asn1_set_security_bits(EVP_PKEY_ASN1_METHOD *ameth,
+                                     int (__cdecl *pkey_security_bits) (const EVP_PKEY
                                                                 *pk));
 
 # define EVP_PKEY_OP_UNDEFINED           0
@@ -1324,141 +1324,141 @@ void EVP_PKEY_asn1_set_security_bits(EVP_PKEY_ASN1_METHOD *ameth,
  */
 # define EVP_PKEY_FLAG_SIGCTX_CUSTOM     4
 
-const EVP_PKEY_METHOD *EVP_PKEY_meth_find(int type);
-EVP_PKEY_METHOD *EVP_PKEY_meth_new(int id, int flags);
-void EVP_PKEY_meth_get0_info(int *ppkey_id, int *pflags,
+const EVP_PKEY_METHOD * __cdecl EVP_PKEY_meth_find(int type);
+EVP_PKEY_METHOD * __cdecl EVP_PKEY_meth_new(int id, int flags);
+void __cdecl EVP_PKEY_meth_get0_info(int *ppkey_id, int *pflags,
                              const EVP_PKEY_METHOD *meth);
-void EVP_PKEY_meth_copy(EVP_PKEY_METHOD *dst, const EVP_PKEY_METHOD *src);
-void EVP_PKEY_meth_free(EVP_PKEY_METHOD *pmeth);
-int EVP_PKEY_meth_add0(const EVP_PKEY_METHOD *pmeth);
-int EVP_PKEY_meth_remove(const EVP_PKEY_METHOD *pmeth);
-size_t EVP_PKEY_meth_get_count(void);
-const EVP_PKEY_METHOD *EVP_PKEY_meth_get0(size_t idx);
-
-EVP_PKEY_CTX *EVP_PKEY_CTX_new(EVP_PKEY *pkey, ENGINE *e);
-EVP_PKEY_CTX *EVP_PKEY_CTX_new_id(int id, ENGINE *e);
-EVP_PKEY_CTX *EVP_PKEY_CTX_dup(EVP_PKEY_CTX *ctx);
-void EVP_PKEY_CTX_free(EVP_PKEY_CTX *ctx);
-
-int EVP_PKEY_CTX_ctrl(EVP_PKEY_CTX *ctx, int keytype, int optype,
+void __cdecl EVP_PKEY_meth_copy(EVP_PKEY_METHOD *dst, const EVP_PKEY_METHOD *src);
+void __cdecl EVP_PKEY_meth_free(EVP_PKEY_METHOD *pmeth);
+int __cdecl EVP_PKEY_meth_add0(const EVP_PKEY_METHOD *pmeth);
+int __cdecl EVP_PKEY_meth_remove(const EVP_PKEY_METHOD *pmeth);
+size_t __cdecl EVP_PKEY_meth_get_count(void);
+const EVP_PKEY_METHOD * __cdecl EVP_PKEY_meth_get0(size_t idx);
+
+EVP_PKEY_CTX * __cdecl EVP_PKEY_CTX_new(EVP_PKEY *pkey, ENGINE *e);
+EVP_PKEY_CTX * __cdecl EVP_PKEY_CTX_new_id(int id, ENGINE *e);
+EVP_PKEY_CTX * __cdecl EVP_PKEY_CTX_dup(EVP_PKEY_CTX *ctx);
+void __cdecl EVP_PKEY_CTX_free(EVP_PKEY_CTX *ctx);
+
+int __cdecl EVP_PKEY_CTX_ctrl(EVP_PKEY_CTX *ctx, int keytype, int optype,
                       int cmd, int p1, void *p2);
-int EVP_PKEY_CTX_ctrl_str(EVP_PKEY_CTX *ctx, const char *type,
+int __cdecl EVP_PKEY_CTX_ctrl_str(EVP_PKEY_CTX *ctx, const char *type,
                           const char *value);
-int EVP_PKEY_CTX_ctrl_uint64(EVP_PKEY_CTX *ctx, int keytype, int optype,
+int __cdecl EVP_PKEY_CTX_ctrl_uint64(EVP_PKEY_CTX *ctx, int keytype, int optype,
                              int cmd, uint64_t value);
 
-int EVP_PKEY_CTX_str2ctrl(EVP_PKEY_CTX *ctx, int cmd, const char *str);
-int EVP_PKEY_CTX_hex2ctrl(EVP_PKEY_CTX *ctx, int cmd, const char *hex);
+int __cdecl EVP_PKEY_CTX_str2ctrl(EVP_PKEY_CTX *ctx, int cmd, const char *str);
+int __cdecl EVP_PKEY_CTX_hex2ctrl(EVP_PKEY_CTX *ctx, int cmd, const char *hex);
 
-int EVP_PKEY_CTX_md(EVP_PKEY_CTX *ctx, int optype, int cmd, const char *md);
+int __cdecl EVP_PKEY_CTX_md(EVP_PKEY_CTX *ctx, int optype, int cmd, const char *md);
 
-int EVP_PKEY_CTX_get_operation(EVP_PKEY_CTX *ctx);
-void EVP_PKEY_CTX_set0_keygen_info(EVP_PKEY_CTX *ctx, int *dat, int datlen);
+int __cdecl EVP_PKEY_CTX_get_operation(EVP_PKEY_CTX *ctx);
+void __cdecl EVP_PKEY_CTX_set0_keygen_info(EVP_PKEY_CTX *ctx, int *dat, int datlen);
 
-EVP_PKEY *EVP_PKEY_new_mac_key(int type, ENGINE *e,
+EVP_PKEY * __cdecl EVP_PKEY_new_mac_key(int type, ENGINE *e,
                                const unsigned char *key, int keylen);
-EVP_PKEY *EVP_PKEY_new_raw_private_key(int type, ENGINE *e,
+EVP_PKEY * __cdecl EVP_PKEY_new_raw_private_key(int type, ENGINE *e,
                                        const unsigned char *priv,
                                        size_t len);
-EVP_PKEY *EVP_PKEY_new_raw_public_key(int type, ENGINE *e,
+EVP_PKEY * __cdecl EVP_PKEY_new_raw_public_key(int type, ENGINE *e,
                                       const unsigned char *pub,
                                       size_t len);
-int EVP_PKEY_get_raw_private_key(const EVP_PKEY *pkey, unsigned char *priv,
+int __cdecl EVP_PKEY_get_raw_private_key(const EVP_PKEY *pkey, unsigned char *priv,
                                  size_t *len);
-int EVP_PKEY_get_raw_public_key(const EVP_PKEY *pkey, unsigned char *pub,
+int __cdecl EVP_PKEY_get_raw_public_key(const EVP_PKEY *pkey, unsigned char *pub,
                                 size_t *len);
 
-EVP_PKEY *EVP_PKEY_new_CMAC_key(ENGINE *e, const unsigned char *priv,
+EVP_PKEY * __cdecl EVP_PKEY_new_CMAC_key(ENGINE *e, const unsigned char *priv,
                                 size_t len, const EVP_CIPHER *cipher);
 
-void EVP_PKEY_CTX_set_data(EVP_PKEY_CTX *ctx, void *data);
-void *EVP_PKEY_CTX_get_data(EVP_PKEY_CTX *ctx);
-EVP_PKEY *EVP_PKEY_CTX_get0_pkey(EVP_PKEY_CTX *ctx);
+void __cdecl EVP_PKEY_CTX_set_data(EVP_PKEY_CTX *ctx, void *data);
+void * __cdecl EVP_PKEY_CTX_get_data(EVP_PKEY_CTX *ctx);
+EVP_PKEY * __cdecl EVP_PKEY_CTX_get0_pkey(EVP_PKEY_CTX *ctx);
 
-EVP_PKEY *EVP_PKEY_CTX_get0_peerkey(EVP_PKEY_CTX *ctx);
+EVP_PKEY * __cdecl EVP_PKEY_CTX_get0_peerkey(EVP_PKEY_CTX *ctx);
 
-void EVP_PKEY_CTX_set_app_data(EVP_PKEY_CTX *ctx, void *data);
-void *EVP_PKEY_CTX_get_app_data(EVP_PKEY_CTX *ctx);
+void __cdecl EVP_PKEY_CTX_set_app_data(EVP_PKEY_CTX *ctx, void *data);
+void * __cdecl EVP_PKEY_CTX_get_app_data(EVP_PKEY_CTX *ctx);
 
-int EVP_PKEY_sign_init(EVP_PKEY_CTX *ctx);
-int EVP_PKEY_sign(EVP_PKEY_CTX *ctx,
+int __cdecl EVP_PKEY_sign_init(EVP_PKEY_CTX *ctx);
+int __cdecl EVP_PKEY_sign(EVP_PKEY_CTX *ctx,
                   unsigned char *sig, size_t *siglen,
                   const unsigned char *tbs, size_t tbslen);
-int EVP_PKEY_verify_init(EVP_PKEY_CTX *ctx);
-int EVP_PKEY_verify(EVP_PKEY_CTX *ctx,
+int __cdecl EVP_PKEY_verify_init(EVP_PKEY_CTX *ctx);
+int __cdecl EVP_PKEY_verify(EVP_PKEY_CTX *ctx,
                     const unsigned char *sig, size_t siglen,
                     const unsigned char *tbs, size_t tbslen);
-int EVP_PKEY_verify_recover_init(EVP_PKEY_CTX *ctx);
-int EVP_PKEY_verify_recover(EVP_PKEY_CTX *ctx,
+int __cdecl EVP_PKEY_verify_recover_init(EVP_PKEY_CTX *ctx);
+int __cdecl EVP_PKEY_verify_recover(EVP_PKEY_CTX *ctx,
                             unsigned char *rout, size_t *routlen,
                             const unsigned char *sig, size_t siglen);
-int EVP_PKEY_encrypt_init(EVP_PKEY_CTX *ctx);
-int EVP_PKEY_encrypt(EVP_PKEY_CTX *ctx,
+int __cdecl EVP_PKEY_encrypt_init(EVP_PKEY_CTX *ctx);
+int __cdecl EVP_PKEY_encrypt(EVP_PKEY_CTX *ctx,
                      unsigned char *out, size_t *outlen,
                      const unsigned char *in, size_t inlen);
-int EVP_PKEY_decrypt_init(EVP_PKEY_CTX *ctx);
-int EVP_PKEY_decrypt(EVP_PKEY_CTX *ctx,
+int __cdecl EVP_PKEY_decrypt_init(EVP_PKEY_CTX *ctx);
+int __cdecl EVP_PKEY_decrypt(EVP_PKEY_CTX *ctx,
                      unsigned char *out, size_t *outlen,
                      const unsigned char *in, size_t inlen);
 
-int EVP_PKEY_derive_init(EVP_PKEY_CTX *ctx);
-int EVP_PKEY_derive_set_peer(EVP_PKEY_CTX *ctx, EVP_PKEY *peer);
-int EVP_PKEY_derive(EVP_PKEY_CTX *ctx, unsigned char *key, size_t *keylen);
+int __cdecl EVP_PKEY_derive_init(EVP_PKEY_CTX *ctx);
+int __cdecl EVP_PKEY_derive_set_peer(EVP_PKEY_CTX *ctx, EVP_PKEY *peer);
+int __cdecl EVP_PKEY_derive(EVP_PKEY_CTX *ctx, unsigned char *key, size_t *keylen);
 
 typedef int EVP_PKEY_gen_cb(EVP_PKEY_CTX *ctx);
 
-int EVP_PKEY_paramgen_init(EVP_PKEY_CTX *ctx);
-int EVP_PKEY_paramgen(EVP_PKEY_CTX *ctx, EVP_PKEY **ppkey);
-int EVP_PKEY_keygen_init(EVP_PKEY_CTX *ctx);
-int EVP_PKEY_keygen(EVP_PKEY_CTX *ctx, EVP_PKEY **ppkey);
-int EVP_PKEY_check(EVP_PKEY_CTX *ctx);
-int EVP_PKEY_public_check(EVP_PKEY_CTX *ctx);
-int EVP_PKEY_param_check(EVP_PKEY_CTX *ctx);
+int __cdecl EVP_PKEY_paramgen_init(EVP_PKEY_CTX *ctx);
+int __cdecl EVP_PKEY_paramgen(EVP_PKEY_CTX *ctx, EVP_PKEY **ppkey);
+int __cdecl EVP_PKEY_keygen_init(EVP_PKEY_CTX *ctx);
+int __cdecl EVP_PKEY_keygen(EVP_PKEY_CTX *ctx, EVP_PKEY **ppkey);
+int __cdecl EVP_PKEY_check(EVP_PKEY_CTX *ctx);
+int __cdecl EVP_PKEY_public_check(EVP_PKEY_CTX *ctx);
+int __cdecl EVP_PKEY_param_check(EVP_PKEY_CTX *ctx);
 
-void EVP_PKEY_CTX_set_cb(EVP_PKEY_CTX *ctx, EVP_PKEY_gen_cb *cb);
-EVP_PKEY_gen_cb *EVP_PKEY_CTX_get_cb(EVP_PKEY_CTX *ctx);
+void __cdecl EVP_PKEY_CTX_set_cb(EVP_PKEY_CTX *ctx, EVP_PKEY_gen_cb *cb);
+EVP_PKEY_gen_cb * __cdecl EVP_PKEY_CTX_get_cb(EVP_PKEY_CTX *ctx);
 
-int EVP_PKEY_CTX_get_keygen_info(EVP_PKEY_CTX *ctx, int idx);
+int __cdecl EVP_PKEY_CTX_get_keygen_info(EVP_PKEY_CTX *ctx, int idx);
 
-void EVP_PKEY_meth_set_init(EVP_PKEY_METHOD *pmeth,
-                            int (*init) (EVP_PKEY_CTX *ctx));
+void __cdecl EVP_PKEY_meth_set_init(EVP_PKEY_METHOD *pmeth,
+                            int (__cdecl *init) (EVP_PKEY_CTX *ctx));
 
-void EVP_PKEY_meth_set_copy(EVP_PKEY_METHOD *pmeth,
-                            int (*copy) (EVP_PKEY_CTX *dst,
+void __cdecl EVP_PKEY_meth_set_copy(EVP_PKEY_METHOD *pmeth,
+                            int (__cdecl *copy) (EVP_PKEY_CTX *dst,
                                          EVP_PKEY_CTX *src));
 
-void EVP_PKEY_meth_set_cleanup(EVP_PKEY_METHOD *pmeth,
-                               void (*cleanup) (EVP_PKEY_CTX *ctx));
+void __cdecl EVP_PKEY_meth_set_cleanup(EVP_PKEY_METHOD *pmeth,
+                               void (__cdecl *cleanup) (EVP_PKEY_CTX *ctx));
 
-void EVP_PKEY_meth_set_paramgen(EVP_PKEY_METHOD *pmeth,
-                                int (*paramgen_init) (EVP_PKEY_CTX *ctx),
-                                int (*paramgen) (EVP_PKEY_CTX *ctx,
+void __cdecl EVP_PKEY_meth_set_paramgen(EVP_PKEY_METHOD *pmeth,
+                                int (__cdecl *paramgen_init) (EVP_PKEY_CTX *ctx),
+                                int (__cdecl *paramgen) (EVP_PKEY_CTX *ctx,
                                                  EVP_PKEY *pkey));
 
-void EVP_PKEY_meth_set_keygen(EVP_PKEY_METHOD *pmeth,
-                              int (*keygen_init) (EVP_PKEY_CTX *ctx),
-                              int (*keygen) (EVP_PKEY_CTX *ctx,
+void __cdecl EVP_PKEY_meth_set_keygen(EVP_PKEY_METHOD *pmeth,
+                              int (__cdecl *keygen_init) (EVP_PKEY_CTX *ctx),
+                              int (__cdecl *keygen) (EVP_PKEY_CTX *ctx,
                                              EVP_PKEY *pkey));
 
-void EVP_PKEY_meth_set_sign(EVP_PKEY_METHOD *pmeth,
-                            int (*sign_init) (EVP_PKEY_CTX *ctx),
-                            int (*sign) (EVP_PKEY_CTX *ctx,
+void __cdecl EVP_PKEY_meth_set_sign(EVP_PKEY_METHOD *pmeth,
+                            int (__cdecl *sign_init) (EVP_PKEY_CTX *ctx),
+                            int (__cdecl *sign) (EVP_PKEY_CTX *ctx,
                                          unsigned char *sig, size_t *siglen,
                                          const unsigned char *tbs,
                                          size_t tbslen));
 
-void EVP_PKEY_meth_set_verify(EVP_PKEY_METHOD *pmeth,
-                              int (*verify_init) (EVP_PKEY_CTX *ctx),
-                              int (*verify) (EVP_PKEY_CTX *ctx,
+void __cdecl EVP_PKEY_meth_set_verify(EVP_PKEY_METHOD *pmeth,
+                              int (__cdecl *verify_init) (EVP_PKEY_CTX *ctx),
+                              int (__cdecl *verify) (EVP_PKEY_CTX *ctx,
                                              const unsigned char *sig,
                                              size_t siglen,
                                              const unsigned char *tbs,
                                              size_t tbslen));
 
-void EVP_PKEY_meth_set_verify_recover(EVP_PKEY_METHOD *pmeth,
-                                      int (*verify_recover_init) (EVP_PKEY_CTX
+void __cdecl EVP_PKEY_meth_set_verify_recover(EVP_PKEY_METHOD *pmeth,
+                                      int (__cdecl *verify_recover_init) (EVP_PKEY_CTX
                                                                   *ctx),
-                                      int (*verify_recover) (EVP_PKEY_CTX
+                                      int (__cdecl *verify_recover) (EVP_PKEY_CTX
                                                              *ctx,
                                                              unsigned char
                                                              *sig,
@@ -1467,103 +1467,103 @@ void EVP_PKEY_meth_set_verify_recover(EVP_PKEY_METHOD *pmeth,
                                                              char *tbs,
                                                              size_t tbslen));
 
-void EVP_PKEY_meth_set_signctx(EVP_PKEY_METHOD *pmeth,
-                               int (*signctx_init) (EVP_PKEY_CTX *ctx,
+void __cdecl EVP_PKEY_meth_set_signctx(EVP_PKEY_METHOD *pmeth,
+                               int (__cdecl *signctx_init) (EVP_PKEY_CTX *ctx,
                                                     EVP_MD_CTX *mctx),
-                               int (*signctx) (EVP_PKEY_CTX *ctx,
+                               int (__cdecl *signctx) (EVP_PKEY_CTX *ctx,
                                                unsigned char *sig,
                                                size_t *siglen,
                                                EVP_MD_CTX *mctx));
 
-void EVP_PKEY_meth_set_verifyctx(EVP_PKEY_METHOD *pmeth,
-                                 int (*verifyctx_init) (EVP_PKEY_CTX *ctx,
+void __cdecl EVP_PKEY_meth_set_verifyctx(EVP_PKEY_METHOD *pmeth,
+                                 int (__cdecl *verifyctx_init) (EVP_PKEY_CTX *ctx,
                                                         EVP_MD_CTX *mctx),
-                                 int (*verifyctx) (EVP_PKEY_CTX *ctx,
+                                 int (__cdecl *verifyctx) (EVP_PKEY_CTX *ctx,
                                                    const unsigned char *sig,
                                                    int siglen,
                                                    EVP_MD_CTX *mctx));
 
-void EVP_PKEY_meth_set_encrypt(EVP_PKEY_METHOD *pmeth,
-                               int (*encrypt_init) (EVP_PKEY_CTX *ctx),
-                               int (*encryptfn) (EVP_PKEY_CTX *ctx,
+void __cdecl EVP_PKEY_meth_set_encrypt(EVP_PKEY_METHOD *pmeth,
+                               int (__cdecl *encrypt_init) (EVP_PKEY_CTX *ctx),
+                               int (__cdecl *encryptfn) (EVP_PKEY_CTX *ctx,
                                                  unsigned char *out,
                                                  size_t *outlen,
                                                  const unsigned char *in,
                                                  size_t inlen));
 
-void EVP_PKEY_meth_set_decrypt(EVP_PKEY_METHOD *pmeth,
-                               int (*decrypt_init) (EVP_PKEY_CTX *ctx),
-                               int (*decrypt) (EVP_PKEY_CTX *ctx,
+void __cdecl EVP_PKEY_meth_set_decrypt(EVP_PKEY_METHOD *pmeth,
+                               int (__cdecl *decrypt_init) (EVP_PKEY_CTX *ctx),
+                               int (__cdecl *decrypt) (EVP_PKEY_CTX *ctx,
                                                unsigned char *out,
                                                size_t *outlen,
                                                const unsigned char *in,
                                                size_t inlen));
 
-void EVP_PKEY_meth_set_derive(EVP_PKEY_METHOD *pmeth,
-                              int (*derive_init) (EVP_PKEY_CTX *ctx),
-                              int (*derive) (EVP_PKEY_CTX *ctx,
+void __cdecl EVP_PKEY_meth_set_derive(EVP_PKEY_METHOD *pmeth,
+                              int (__cdecl *derive_init) (EVP_PKEY_CTX *ctx),
+                              int (__cdecl *derive) (EVP_PKEY_CTX *ctx,
                                              unsigned char *key,
                                              size_t *keylen));
 
-void EVP_PKEY_meth_set_ctrl(EVP_PKEY_METHOD *pmeth,
-                            int (*ctrl) (EVP_PKEY_CTX *ctx, int type, int p1,
+void __cdecl EVP_PKEY_meth_set_ctrl(EVP_PKEY_METHOD *pmeth,
+                            int (__cdecl *ctrl) (EVP_PKEY_CTX *ctx, int type, int p1,
                                          void *p2),
-                            int (*ctrl_str) (EVP_PKEY_CTX *ctx,
+                            int (__cdecl *ctrl_str) (EVP_PKEY_CTX *ctx,
                                              const char *type,
                                              const char *value));
 
-void EVP_PKEY_meth_set_check(EVP_PKEY_METHOD *pmeth,
-                             int (*check) (EVP_PKEY *pkey));
+void __cdecl EVP_PKEY_meth_set_check(EVP_PKEY_METHOD *pmeth,
+                             int (__cdecl *check) (EVP_PKEY *pkey));
 
-void EVP_PKEY_meth_set_public_check(EVP_PKEY_METHOD *pmeth,
-                                    int (*check) (EVP_PKEY *pkey));
+void __cdecl EVP_PKEY_meth_set_public_check(EVP_PKEY_METHOD *pmeth,
+                                    int (__cdecl *check) (EVP_PKEY *pkey));
 
-void EVP_PKEY_meth_set_param_check(EVP_PKEY_METHOD *pmeth,
-                                   int (*check) (EVP_PKEY *pkey));
+void __cdecl EVP_PKEY_meth_set_param_check(EVP_PKEY_METHOD *pmeth,
+                                   int (__cdecl *check) (EVP_PKEY *pkey));
 
-void EVP_PKEY_meth_set_digest_custom(EVP_PKEY_METHOD *pmeth,
-                                     int (*digest_custom) (EVP_PKEY_CTX *ctx,
+void  __cdecl EVP_PKEY_meth_set_digest_custom(EVP_PKEY_METHOD *pmeth,
+                                     int (__cdecl *digest_custom) (EVP_PKEY_CTX *ctx,
                                                            EVP_MD_CTX *mctx));
 
-void EVP_PKEY_meth_get_init(const EVP_PKEY_METHOD *pmeth,
-                            int (**pinit) (EVP_PKEY_CTX *ctx));
+void __cdecl EVP_PKEY_meth_get_init(const EVP_PKEY_METHOD *pmeth,
+                            int (__cdecl **pinit) (EVP_PKEY_CTX *ctx));
 
-void EVP_PKEY_meth_get_copy(const EVP_PKEY_METHOD *pmeth,
-                            int (**pcopy) (EVP_PKEY_CTX *dst,
+void __cdecl EVP_PKEY_meth_get_copy(const EVP_PKEY_METHOD *pmeth,
+                            int (__cdecl **pcopy) (EVP_PKEY_CTX *dst,
                                            EVP_PKEY_CTX *src));
 
-void EVP_PKEY_meth_get_cleanup(const EVP_PKEY_METHOD *pmeth,
-                               void (**pcleanup) (EVP_PKEY_CTX *ctx));
+void __cdecl EVP_PKEY_meth_get_cleanup(const EVP_PKEY_METHOD *pmeth,
+                               void (__cdecl **pcleanup) (EVP_PKEY_CTX *ctx));
 
-void EVP_PKEY_meth_get_paramgen(const EVP_PKEY_METHOD *pmeth,
-                                int (**pparamgen_init) (EVP_PKEY_CTX *ctx),
-                                int (**pparamgen) (EVP_PKEY_CTX *ctx,
+void __cdecl EVP_PKEY_meth_get_paramgen(const EVP_PKEY_METHOD *pmeth,
+                                int (__cdecl **pparamgen_init) (EVP_PKEY_CTX *ctx),
+                                int (__cdecl **pparamgen) (EVP_PKEY_CTX *ctx,
                                                    EVP_PKEY *pkey));
 
-void EVP_PKEY_meth_get_keygen(const EVP_PKEY_METHOD *pmeth,
-                              int (**pkeygen_init) (EVP_PKEY_CTX *ctx),
-                              int (**pkeygen) (EVP_PKEY_CTX *ctx,
+void __cdecl EVP_PKEY_meth_get_keygen(const EVP_PKEY_METHOD *pmeth,
+                              int (__cdecl **pkeygen_init) (EVP_PKEY_CTX *ctx),
+                              int (__cdecl **pkeygen) (EVP_PKEY_CTX *ctx,
                                                EVP_PKEY *pkey));
 
-void EVP_PKEY_meth_get_sign(const EVP_PKEY_METHOD *pmeth,
-                            int (**psign_init) (EVP_PKEY_CTX *ctx),
-                            int (**psign) (EVP_PKEY_CTX *ctx,
+void __cdecl EVP_PKEY_meth_get_sign(const EVP_PKEY_METHOD *pmeth,
+                            int (__cdecl **psign_init) (EVP_PKEY_CTX *ctx),
+                            int (__cdecl **psign) (EVP_PKEY_CTX *ctx,
                                            unsigned char *sig, size_t *siglen,
                                            const unsigned char *tbs,
                                            size_t tbslen));
 
-void EVP_PKEY_meth_get_verify(const EVP_PKEY_METHOD *pmeth,
-                              int (**pverify_init) (EVP_PKEY_CTX *ctx),
-                              int (**pverify) (EVP_PKEY_CTX *ctx,
+void __cdecl EVP_PKEY_meth_get_verify(const EVP_PKEY_METHOD *pmeth,
+                              int (__cdecl **pverify_init) (EVP_PKEY_CTX *ctx),
+                              int (__cdecl **pverify) (EVP_PKEY_CTX *ctx,
                                                const unsigned char *sig,
                                                size_t siglen,
                                                const unsigned char *tbs,
                                                size_t tbslen));
 
-void EVP_PKEY_meth_get_verify_recover(const EVP_PKEY_METHOD *pmeth,
-                                      int (**pverify_recover_init) (EVP_PKEY_CTX
+void __cdecl EVP_PKEY_meth_get_verify_recover(const EVP_PKEY_METHOD *pmeth,
+                                      int (__cdecl **pverify_recover_init) (EVP_PKEY_CTX
                                                                     *ctx),
-                                      int (**pverify_recover) (EVP_PKEY_CTX
+                                      int (__cdecl **pverify_recover) (EVP_PKEY_CTX
                                                                *ctx,
                                                                unsigned char
                                                                *sig,
@@ -1572,64 +1572,64 @@ void EVP_PKEY_meth_get_verify_recover(const EVP_PKEY_METHOD *pmeth,
                                                                char *tbs,
                                                                size_t tbslen));
 
-void EVP_PKEY_meth_get_signctx(const EVP_PKEY_METHOD *pmeth,
-                               int (**psignctx_init) (EVP_PKEY_CTX *ctx,
+void __cdecl EVP_PKEY_meth_get_signctx(const EVP_PKEY_METHOD *pmeth,
+                               int (__cdecl **psignctx_init) (EVP_PKEY_CTX *ctx,
                                                       EVP_MD_CTX *mctx),
-                               int (**psignctx) (EVP_PKEY_CTX *ctx,
+                               int (__cdecl **psignctx) (EVP_PKEY_CTX *ctx,
                                                  unsigned char *sig,
                                                  size_t *siglen,
                                                  EVP_MD_CTX *mctx));
 
-void EVP_PKEY_meth_get_verifyctx(const EVP_PKEY_METHOD *pmeth,
-                                 int (**pverifyctx_init) (EVP_PKEY_CTX *ctx,
+void __cdecl EVP_PKEY_meth_get_verifyctx(const EVP_PKEY_METHOD *pmeth,
+                                 int (__cdecl **pverifyctx_init) (EVP_PKEY_CTX *ctx,
                                                           EVP_MD_CTX *mctx),
-                                 int (**pverifyctx) (EVP_PKEY_CTX *ctx,
+                                 int (__cdecl **pverifyctx) (EVP_PKEY_CTX *ctx,
                                                      const unsigned char *sig,
                                                      int siglen,
                                                      EVP_MD_CTX *mctx));
 
-void EVP_PKEY_meth_get_encrypt(const EVP_PKEY_METHOD *pmeth,
-                               int (**pencrypt_init) (EVP_PKEY_CTX *ctx),
-                               int (**pencryptfn) (EVP_PKEY_CTX *ctx,
+void __cdecl EVP_PKEY_meth_get_encrypt(const EVP_PKEY_METHOD *pmeth,
+                               int (__cdecl **pencrypt_init) (EVP_PKEY_CTX *ctx),
+                               int (__cdecl **pencryptfn) (EVP_PKEY_CTX *ctx,
                                                    unsigned char *out,
                                                    size_t *outlen,
                                                    const unsigned char *in,
                                                    size_t inlen));
 
-void EVP_PKEY_meth_get_decrypt(const EVP_PKEY_METHOD *pmeth,
-                               int (**pdecrypt_init) (EVP_PKEY_CTX *ctx),
-                               int (**pdecrypt) (EVP_PKEY_CTX *ctx,
+void __cdecl EVP_PKEY_meth_get_decrypt(const EVP_PKEY_METHOD *pmeth,
+                               int (__cdecl **pdecrypt_init) (EVP_PKEY_CTX *ctx),
+                               int (__cdecl **pdecrypt) (EVP_PKEY_CTX *ctx,
                                                  unsigned char *out,
                                                  size_t *outlen,
                                                  const unsigned char *in,
                                                  size_t inlen));
 
-void EVP_PKEY_meth_get_derive(const EVP_PKEY_METHOD *pmeth,
-                              int (**pderive_init) (EVP_PKEY_CTX *ctx),
-                              int (**pderive) (EVP_PKEY_CTX *ctx,
+void __cdecl EVP_PKEY_meth_get_derive(const EVP_PKEY_METHOD *pmeth,
+                              int (__cdecl **pderive_init) (EVP_PKEY_CTX *ctx),
+                              int (__cdecl **pderive) (EVP_PKEY_CTX *ctx,
                                                unsigned char *key,
                                                size_t *keylen));
 
-void EVP_PKEY_meth_get_ctrl(const EVP_PKEY_METHOD *pmeth,
-                            int (**pctrl) (EVP_PKEY_CTX *ctx, int type, int p1,
+void __cdecl EVP_PKEY_meth_get_ctrl(const EVP_PKEY_METHOD *pmeth,
+                            int (__cdecl **pctrl) (EVP_PKEY_CTX *ctx, int type, int p1,
                                            void *p2),
-                            int (**pctrl_str) (EVP_PKEY_CTX *ctx,
+                            int (__cdecl **pctrl_str) (EVP_PKEY_CTX *ctx,
                                                const char *type,
                                                const char *value));
 
-void EVP_PKEY_meth_get_check(const EVP_PKEY_METHOD *pmeth,
-                             int (**pcheck) (EVP_PKEY *pkey));
+void __cdecl EVP_PKEY_meth_get_check(const EVP_PKEY_METHOD *pmeth,
+                             int (__cdecl **pcheck) (EVP_PKEY *pkey));
 
-void EVP_PKEY_meth_get_public_check(const EVP_PKEY_METHOD *pmeth,
-                                    int (**pcheck) (EVP_PKEY *pkey));
+void __cdecl EVP_PKEY_meth_get_public_check(const EVP_PKEY_METHOD *pmeth,
+                                    int (__cdecl **pcheck) (EVP_PKEY *pkey));
 
-void EVP_PKEY_meth_get_param_check(const EVP_PKEY_METHOD *pmeth,
-                                   int (**pcheck) (EVP_PKEY *pkey));
+void __cdecl EVP_PKEY_meth_get_param_check(const EVP_PKEY_METHOD *pmeth,
+                                   int (__cdecl **pcheck) (EVP_PKEY *pkey));
 
-void EVP_PKEY_meth_get_digest_custom(EVP_PKEY_METHOD *pmeth,
-                                     int (**pdigest_custom) (EVP_PKEY_CTX *ctx,
+void __cdecl EVP_PKEY_meth_get_digest_custom(EVP_PKEY_METHOD *pmeth,
+                                     int (__cdecl **pdigest_custom) (EVP_PKEY_CTX *ctx,
                                                              EVP_MD_CTX *mctx));
-void EVP_add_alg_module(void);
+void __cdecl EVP_add_alg_module(void);
 
 
 # ifdef  __cplusplus
diff --git a/include/openssl/evperr.h b/include/openssl/evperr.h
index 6a651f5563..31d3100dfb 100644
--- a/include/openssl/evperr.h
+++ b/include/openssl/evperr.h
@@ -18,7 +18,7 @@
 # ifdef  __cplusplus
 extern "C"
 # endif
-int ERR_load_EVP_strings(void);
+int __cdecl ERR_load_EVP_strings(void);
 
 /*
  * EVP function codes.
diff --git a/include/openssl/hmac.h b/include/openssl/hmac.h
index 458efc1d51..835a686408 100644
--- a/include/openssl/hmac.h
+++ b/include/openssl/hmac.h
@@ -22,27 +22,27 @@
 extern "C" {
 #endif
 
-size_t HMAC_size(const HMAC_CTX *e);
-HMAC_CTX *HMAC_CTX_new(void);
-int HMAC_CTX_reset(HMAC_CTX *ctx);
-void HMAC_CTX_free(HMAC_CTX *ctx);
+size_t __cdecl HMAC_size(const HMAC_CTX *e);
+HMAC_CTX * __cdecl HMAC_CTX_new(void);
+int __cdecl HMAC_CTX_reset(HMAC_CTX *ctx);
+void __cdecl HMAC_CTX_free(HMAC_CTX *ctx);
 
 DEPRECATEDIN_1_1_0(__owur int HMAC_Init(HMAC_CTX *ctx, const void *key, int len,
                      const EVP_MD *md))
 
-/*__owur*/ int HMAC_Init_ex(HMAC_CTX *ctx, const void *key, int len,
+/*__owur*/ int __cdecl HMAC_Init_ex(HMAC_CTX *ctx, const void *key, int len,
                             const EVP_MD *md, ENGINE *impl);
-/*__owur*/ int HMAC_Update(HMAC_CTX *ctx, const unsigned char *data,
+/*__owur*/ int __cdecl HMAC_Update(HMAC_CTX *ctx, const unsigned char *data,
                            size_t len);
-/*__owur*/ int HMAC_Final(HMAC_CTX *ctx, unsigned char *md,
+/*__owur*/ int __cdecl HMAC_Final(HMAC_CTX *ctx, unsigned char *md,
                           unsigned int *len);
-unsigned char *HMAC(const EVP_MD *evp_md, const void *key, int key_len,
+unsigned char * __cdecl HMAC(const EVP_MD *evp_md, const void *key, int key_len,
                     const unsigned char *d, size_t n, unsigned char *md,
                     unsigned int *md_len);
-__owur int HMAC_CTX_copy(HMAC_CTX *dctx, HMAC_CTX *sctx);
+__owur int __cdecl HMAC_CTX_copy(HMAC_CTX *dctx, HMAC_CTX *sctx);
 
-void HMAC_CTX_set_flags(HMAC_CTX *ctx, unsigned long flags);
-const EVP_MD *HMAC_CTX_get_md(const HMAC_CTX *ctx);
+void __cdecl HMAC_CTX_set_flags(HMAC_CTX *ctx, unsigned long flags);
+const EVP_MD * __cdecl HMAC_CTX_get_md(const HMAC_CTX *ctx);
 
 #ifdef  __cplusplus
 }
diff --git a/include/openssl/idea.h b/include/openssl/idea.h
index 4334f3ea71..6b55edea2d 100644
--- a/include/openssl/idea.h
+++ b/include/openssl/idea.h
@@ -29,21 +29,21 @@ typedef struct idea_key_st {
     IDEA_INT data[9][6];
 } IDEA_KEY_SCHEDULE;
 
-const char *IDEA_options(void);
-void IDEA_ecb_encrypt(const unsigned char *in, unsigned char *out,
+const char * __cdecl IDEA_options(void);
+void __cdecl IDEA_ecb_encrypt(const unsigned char *in, unsigned char *out,
                       IDEA_KEY_SCHEDULE *ks);
-void IDEA_set_encrypt_key(const unsigned char *key, IDEA_KEY_SCHEDULE *ks);
-void IDEA_set_decrypt_key(IDEA_KEY_SCHEDULE *ek, IDEA_KEY_SCHEDULE *dk);
-void IDEA_cbc_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl IDEA_set_encrypt_key(const unsigned char *key, IDEA_KEY_SCHEDULE *ks);
+void __cdecl IDEA_set_decrypt_key(IDEA_KEY_SCHEDULE *ek, IDEA_KEY_SCHEDULE *dk);
+void __cdecl IDEA_cbc_encrypt(const unsigned char *in, unsigned char *out,
                       long length, IDEA_KEY_SCHEDULE *ks, unsigned char *iv,
                       int enc);
-void IDEA_cfb64_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl IDEA_cfb64_encrypt(const unsigned char *in, unsigned char *out,
                         long length, IDEA_KEY_SCHEDULE *ks, unsigned char *iv,
                         int *num, int enc);
-void IDEA_ofb64_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl IDEA_ofb64_encrypt(const unsigned char *in, unsigned char *out,
                         long length, IDEA_KEY_SCHEDULE *ks, unsigned char *iv,
                         int *num);
-void IDEA_encrypt(unsigned long *in, IDEA_KEY_SCHEDULE *ks);
+void __cdecl IDEA_encrypt(unsigned long *in, IDEA_KEY_SCHEDULE *ks);
 
 # if OPENSSL_API_COMPAT < 0x10100000L
 #  define idea_options          IDEA_options
diff --git a/include/openssl/kdferr.h b/include/openssl/kdferr.h
index 3f51bd0228..1b9a66a755 100644
--- a/include/openssl/kdferr.h
+++ b/include/openssl/kdferr.h
@@ -18,7 +18,7 @@
 # ifdef  __cplusplus
 extern "C"
 # endif
-int ERR_load_KDF_strings(void);
+int __cdecl ERR_load_KDF_strings(void);
 
 /*
  * KDF function codes.
diff --git a/include/openssl/lhash.h b/include/openssl/lhash.h
index 47b99d17fb..fb877ce8eb 100644
--- a/include/openssl/lhash.h
+++ b/include/openssl/lhash.h
@@ -22,10 +22,10 @@ extern "C" {
 #endif
 
 typedef struct lhash_node_st OPENSSL_LH_NODE;
-typedef int (*OPENSSL_LH_COMPFUNC) (const void *, const void *);
-typedef unsigned long (*OPENSSL_LH_HASHFUNC) (const void *);
-typedef void (*OPENSSL_LH_DOALL_FUNC) (void *);
-typedef void (*OPENSSL_LH_DOALL_FUNCARG) (void *, void *);
+typedef int (__cdecl *OPENSSL_LH_COMPFUNC) (const void *, const void *);
+typedef unsigned long (__cdecl *OPENSSL_LH_HASHFUNC) (const void *);
+typedef void (__cdecl *OPENSSL_LH_DOALL_FUNC) (void *);
+typedef void (__cdecl *OPENSSL_LH_DOALL_FUNCARG) (void *, void *);
 typedef struct lhash_st OPENSSL_LHASH;
 
 /*
@@ -39,18 +39,18 @@ typedef struct lhash_st OPENSSL_LHASH;
 
 /* First: "hash" functions */
 # define DECLARE_LHASH_HASH_FN(name, o_type) \
-        unsigned long name##_LHASH_HASH(const void *);
+        unsigned long __cdecl name##_LHASH_HASH(const void *);
 # define IMPLEMENT_LHASH_HASH_FN(name, o_type) \
-        unsigned long name##_LHASH_HASH(const void *arg) { \
+        unsigned long __cdecl name##_LHASH_HASH(const void *arg) { \
                 const o_type *a = arg; \
                 return name##_hash(a); }
 # define LHASH_HASH_FN(name) name##_LHASH_HASH
 
 /* Second: "compare" functions */
 # define DECLARE_LHASH_COMP_FN(name, o_type) \
-        int name##_LHASH_COMP(const void *, const void *);
+        int __cdecl name##_LHASH_COMP(const void *, const void *);
 # define IMPLEMENT_LHASH_COMP_FN(name, o_type) \
-        int name##_LHASH_COMP(const void *arg1, const void *arg2) { \
+        int __cdecl name##_LHASH_COMP(const void *arg1, const void *arg2) { \
                 const o_type *a = arg1;             \
                 const o_type *b = arg2; \
                 return name##_cmp(a,b); }
@@ -58,9 +58,9 @@ typedef struct lhash_st OPENSSL_LHASH;
 
 /* Fourth: "doall_arg" functions */
 # define DECLARE_LHASH_DOALL_ARG_FN(name, o_type, a_type) \
-        void name##_LHASH_DOALL_ARG(void *, void *);
+        void __cdecl name##_LHASH_DOALL_ARG(void *, void *);
 # define IMPLEMENT_LHASH_DOALL_ARG_FN(name, o_type, a_type) \
-        void name##_LHASH_DOALL_ARG(void *arg1, void *arg2) { \
+        void __cdecl name##_LHASH_DOALL_ARG(void *arg1, void *arg2) { \
                 o_type *a = arg1; \
                 a_type *b = arg2; \
                 name##_doall_arg(a, b); }
@@ -69,27 +69,27 @@ typedef struct lhash_st OPENSSL_LHASH;
 
 # define LH_LOAD_MULT    256
 
-int OPENSSL_LH_error(OPENSSL_LHASH *lh);
-OPENSSL_LHASH *OPENSSL_LH_new(OPENSSL_LH_HASHFUNC h, OPENSSL_LH_COMPFUNC c);
-void OPENSSL_LH_free(OPENSSL_LHASH *lh);
-void *OPENSSL_LH_insert(OPENSSL_LHASH *lh, void *data);
-void *OPENSSL_LH_delete(OPENSSL_LHASH *lh, const void *data);
-void *OPENSSL_LH_retrieve(OPENSSL_LHASH *lh, const void *data);
-void OPENSSL_LH_doall(OPENSSL_LHASH *lh, OPENSSL_LH_DOALL_FUNC func);
-void OPENSSL_LH_doall_arg(OPENSSL_LHASH *lh, OPENSSL_LH_DOALL_FUNCARG func, void *arg);
-unsigned long OPENSSL_LH_strhash(const char *c);
-unsigned long OPENSSL_LH_num_items(const OPENSSL_LHASH *lh);
-unsigned long OPENSSL_LH_get_down_load(const OPENSSL_LHASH *lh);
-void OPENSSL_LH_set_down_load(OPENSSL_LHASH *lh, unsigned long down_load);
+int __cdecl OPENSSL_LH_error(OPENSSL_LHASH *lh);
+OPENSSL_LHASH * __cdecl OPENSSL_LH_new(OPENSSL_LH_HASHFUNC h, OPENSSL_LH_COMPFUNC c);
+void __cdecl OPENSSL_LH_free(OPENSSL_LHASH *lh);
+void * __cdecl OPENSSL_LH_insert(OPENSSL_LHASH *lh, void *data);
+void * __cdecl OPENSSL_LH_delete(OPENSSL_LHASH *lh, const void *data);
+void * __cdecl OPENSSL_LH_retrieve(OPENSSL_LHASH *lh, const void *data);
+void __cdecl OPENSSL_LH_doall(OPENSSL_LHASH *lh, OPENSSL_LH_DOALL_FUNC func);
+void __cdecl OPENSSL_LH_doall_arg(OPENSSL_LHASH *lh, OPENSSL_LH_DOALL_FUNCARG func, void *arg);
+unsigned long __cdecl OPENSSL_LH_strhash(const char *c);
+unsigned long __cdecl OPENSSL_LH_num_items(const OPENSSL_LHASH *lh);
+unsigned long __cdecl OPENSSL_LH_get_down_load(const OPENSSL_LHASH *lh);
+void __cdecl OPENSSL_LH_set_down_load(OPENSSL_LHASH *lh, unsigned long down_load);
 
 # ifndef OPENSSL_NO_STDIO
-void OPENSSL_LH_stats(const OPENSSL_LHASH *lh, FILE *fp);
-void OPENSSL_LH_node_stats(const OPENSSL_LHASH *lh, FILE *fp);
-void OPENSSL_LH_node_usage_stats(const OPENSSL_LHASH *lh, FILE *fp);
+void __cdecl OPENSSL_LH_stats(const OPENSSL_LHASH *lh, FILE *fp);
+void __cdecl OPENSSL_LH_node_stats(const OPENSSL_LHASH *lh, FILE *fp);
+void __cdecl OPENSSL_LH_node_usage_stats(const OPENSSL_LHASH *lh, FILE *fp);
 # endif
-void OPENSSL_LH_stats_bio(const OPENSSL_LHASH *lh, BIO *out);
-void OPENSSL_LH_node_stats_bio(const OPENSSL_LHASH *lh, BIO *out);
-void OPENSSL_LH_node_usage_stats_bio(const OPENSSL_LHASH *lh, BIO *out);
+void __cdecl OPENSSL_LH_stats_bio(const OPENSSL_LHASH *lh, BIO *out);
+void __cdecl OPENSSL_LH_node_stats_bio(const OPENSSL_LHASH *lh, BIO *out);
+void __cdecl OPENSSL_LH_node_usage_stats_bio(const OPENSSL_LHASH *lh, BIO *out);
 
 # if OPENSSL_API_COMPAT < 0x10100000L
 #  define _LHASH OPENSSL_LHASH
@@ -120,58 +120,58 @@ void OPENSSL_LH_node_usage_stats_bio(const OPENSSL_LHASH *lh, BIO *out);
 
 # define DEFINE_LHASH_OF(type) \
     LHASH_OF(type) { union lh_##type##_dummy { void* d1; unsigned long d2; int d3; } dummy; }; \
-    static ossl_inline LHASH_OF(type) * \
-        lh_##type##_new(unsigned long (*hfn)(const type *), \
-                        int (*cfn)(const type *, const type *)) \
+    static ossl_inline LHASH_OF(type) * __cdecl \
+        lh_##type##_new(unsigned long (__cdecl *hfn)(const type *), \
+                        int (__cdecl *cfn)(const type *, const type *)) \
     { \
         return (LHASH_OF(type) *) \
             OPENSSL_LH_new((OPENSSL_LH_HASHFUNC)hfn, (OPENSSL_LH_COMPFUNC)cfn); \
     } \
-    static ossl_unused ossl_inline void lh_##type##_free(LHASH_OF(type) *lh) \
+    static ossl_unused ossl_inline void __cdecl lh_##type##_free(LHASH_OF(type) *lh) \
     { \
         OPENSSL_LH_free((OPENSSL_LHASH *)lh); \
     } \
-    static ossl_unused ossl_inline type *lh_##type##_insert(LHASH_OF(type) *lh, type *d) \
+    static ossl_unused ossl_inline type * __cdecl lh_##type##_insert(LHASH_OF(type) *lh, type *d) \
     { \
         return (type *)OPENSSL_LH_insert((OPENSSL_LHASH *)lh, d); \
     } \
-    static ossl_unused ossl_inline type *lh_##type##_delete(LHASH_OF(type) *lh, const type *d) \
+    static ossl_unused ossl_inline type * __cdecl lh_##type##_delete(LHASH_OF(type) *lh, const type *d) \
     { \
         return (type *)OPENSSL_LH_delete((OPENSSL_LHASH *)lh, d); \
     } \
-    static ossl_unused ossl_inline type *lh_##type##_retrieve(LHASH_OF(type) *lh, const type *d) \
+    static ossl_unused ossl_inline type * __cdecl lh_##type##_retrieve(LHASH_OF(type) *lh, const type *d) \
     { \
         return (type *)OPENSSL_LH_retrieve((OPENSSL_LHASH *)lh, d); \
     } \
-    static ossl_unused ossl_inline int lh_##type##_error(LHASH_OF(type) *lh) \
+    static ossl_unused ossl_inline int __cdecl lh_##type##_error(LHASH_OF(type) *lh) \
     { \
         return OPENSSL_LH_error((OPENSSL_LHASH *)lh); \
     } \
-    static ossl_unused ossl_inline unsigned long lh_##type##_num_items(LHASH_OF(type) *lh) \
+    static ossl_unused ossl_inline unsigned long __cdecl lh_##type##_num_items(LHASH_OF(type) *lh) \
     { \
         return OPENSSL_LH_num_items((OPENSSL_LHASH *)lh); \
     } \
-    static ossl_unused ossl_inline void lh_##type##_node_stats_bio(const LHASH_OF(type) *lh, BIO *out) \
+    static ossl_unused ossl_inline void __cdecl lh_##type##_node_stats_bio(const LHASH_OF(type) *lh, BIO *out) \
     { \
         OPENSSL_LH_node_stats_bio((const OPENSSL_LHASH *)lh, out); \
     } \
-    static ossl_unused ossl_inline void lh_##type##_node_usage_stats_bio(const LHASH_OF(type) *lh, BIO *out) \
+    static ossl_unused ossl_inline void __cdecl lh_##type##_node_usage_stats_bio(const LHASH_OF(type) *lh, BIO *out) \
     { \
         OPENSSL_LH_node_usage_stats_bio((const OPENSSL_LHASH *)lh, out); \
     } \
-    static ossl_unused ossl_inline void lh_##type##_stats_bio(const LHASH_OF(type) *lh, BIO *out) \
+    static ossl_unused ossl_inline void __cdecl lh_##type##_stats_bio(const LHASH_OF(type) *lh, BIO *out) \
     { \
         OPENSSL_LH_stats_bio((const OPENSSL_LHASH *)lh, out); \
     } \
-    static ossl_unused ossl_inline unsigned long lh_##type##_get_down_load(LHASH_OF(type) *lh) \
+    static ossl_unused ossl_inline unsigned long __cdecl lh_##type##_get_down_load(LHASH_OF(type) *lh) \
     { \
         return OPENSSL_LH_get_down_load((OPENSSL_LHASH *)lh); \
     } \
-    static ossl_unused ossl_inline void lh_##type##_set_down_load(LHASH_OF(type) *lh, unsigned long dl) \
+    static ossl_unused ossl_inline void __cdecl lh_##type##_set_down_load(LHASH_OF(type) *lh, unsigned long dl) \
     { \
         OPENSSL_LH_set_down_load((OPENSSL_LHASH *)lh, dl); \
     } \
-    static ossl_unused ossl_inline void lh_##type##_doall(LHASH_OF(type) *lh, \
+    static ossl_unused ossl_inline void __cdecl lh_##type##_doall(LHASH_OF(type) *lh, \
                                                           void (*doall)(type *)) \
     { \
         OPENSSL_LH_doall((OPENSSL_LHASH *)lh, (OPENSSL_LH_DOALL_FUNC)doall); \
@@ -185,7 +185,7 @@ void OPENSSL_LH_node_usage_stats_bio(const OPENSSL_LHASH *lh, BIO *out);
     int_implement_lhash_doall(type, argtype, type)
 
 #define int_implement_lhash_doall(type, argtype, cbargtype) \
-    static ossl_unused ossl_inline void \
+    static ossl_unused ossl_inline void __cdecl \
         lh_##type##_doall_##argtype(LHASH_OF(type) *lh, \
                                    void (*fn)(cbargtype *, argtype *), \
                                    argtype *arg) \
diff --git a/include/openssl/md2.h b/include/openssl/md2.h
index 7faf8e3d65..597613226d 100644
--- a/include/openssl/md2.h
+++ b/include/openssl/md2.h
@@ -30,11 +30,11 @@ typedef struct MD2state_st {
     MD2_INT state[MD2_BLOCK];
 } MD2_CTX;
 
-const char *MD2_options(void);
-int MD2_Init(MD2_CTX *c);
-int MD2_Update(MD2_CTX *c, const unsigned char *data, size_t len);
-int MD2_Final(unsigned char *md, MD2_CTX *c);
-unsigned char *MD2(const unsigned char *d, size_t n, unsigned char *md);
+const char * __cdecl MD2_options(void);
+int __cdecl MD2_Init(MD2_CTX *c);
+int __cdecl MD2_Update(MD2_CTX *c, const unsigned char *data, size_t len);
+int __cdecl MD2_Final(unsigned char *md, MD2_CTX *c);
+unsigned char * __cdecl MD2(const unsigned char *d, size_t n, unsigned char *md);
 
 # ifdef  __cplusplus
 }
diff --git a/include/openssl/md4.h b/include/openssl/md4.h
index 940e29db40..72d0e4bad9 100644
--- a/include/openssl/md4.h
+++ b/include/openssl/md4.h
@@ -37,11 +37,11 @@ typedef struct MD4state_st {
     unsigned int num;
 } MD4_CTX;
 
-int MD4_Init(MD4_CTX *c);
-int MD4_Update(MD4_CTX *c, const void *data, size_t len);
-int MD4_Final(unsigned char *md, MD4_CTX *c);
-unsigned char *MD4(const unsigned char *d, size_t n, unsigned char *md);
-void MD4_Transform(MD4_CTX *c, const unsigned char *b);
+int __cdecl MD4_Init(MD4_CTX *c);
+int __cdecl MD4_Update(MD4_CTX *c, const void *data, size_t len);
+int __cdecl MD4_Final(unsigned char *md, MD4_CTX *c);
+unsigned char * __cdecl MD4(const unsigned char *d, size_t n, unsigned char *md);
+void __cdecl MD4_Transform(MD4_CTX *c, const unsigned char *b);
 
 # ifdef  __cplusplus
 }
diff --git a/include/openssl/md5.h b/include/openssl/md5.h
index 2deb772118..2a8761ce9e 100644
--- a/include/openssl/md5.h
+++ b/include/openssl/md5.h
@@ -37,11 +37,11 @@ typedef struct MD5state_st {
     unsigned int num;
 } MD5_CTX;
 
-int MD5_Init(MD5_CTX *c);
-int MD5_Update(MD5_CTX *c, const void *data, size_t len);
-int MD5_Final(unsigned char *md, MD5_CTX *c);
-unsigned char *MD5(const unsigned char *d, size_t n, unsigned char *md);
-void MD5_Transform(MD5_CTX *c, const unsigned char *b);
+int __cdecl MD5_Init(MD5_CTX *c);
+int __cdecl MD5_Update(MD5_CTX *c, const void *data, size_t len);
+int __cdecl MD5_Final(unsigned char *md, MD5_CTX *c);
+unsigned char * __cdecl MD5(const unsigned char *d, size_t n, unsigned char *md);
+void __cdecl MD5_Transform(MD5_CTX *c, const unsigned char *b);
 # ifdef  __cplusplus
 }
 # endif
diff --git a/include/openssl/mdc2.h b/include/openssl/mdc2.h
index aabd2bfaad..d10b60aa7b 100644
--- a/include/openssl/mdc2.h
+++ b/include/openssl/mdc2.h
@@ -29,10 +29,10 @@ typedef struct mdc2_ctx_st {
     int pad_type;               /* either 1 or 2, default 1 */
 } MDC2_CTX;
 
-int MDC2_Init(MDC2_CTX *c);
-int MDC2_Update(MDC2_CTX *c, const unsigned char *data, size_t len);
-int MDC2_Final(unsigned char *md, MDC2_CTX *c);
-unsigned char *MDC2(const unsigned char *d, size_t n, unsigned char *md);
+int __cdecl MDC2_Init(MDC2_CTX *c);
+int __cdecl MDC2_Update(MDC2_CTX *c, const unsigned char *data, size_t len);
+int __cdecl MDC2_Final(unsigned char *md, MDC2_CTX *c);
+unsigned char * __cdecl MDC2(const unsigned char *d, size_t n, unsigned char *md);
 
 # ifdef  __cplusplus
 }
diff --git a/include/openssl/modes.h b/include/openssl/modes.h
index d544f98d55..e15ef42843 100644
--- a/include/openssl/modes.h
+++ b/include/openssl/modes.h
@@ -31,141 +31,141 @@ typedef void (*ccm128_f) (const unsigned char *in, unsigned char *out,
                           const unsigned char ivec[16],
                           unsigned char cmac[16]);
 
-void CRYPTO_cbc128_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl CRYPTO_cbc128_encrypt(const unsigned char *in, unsigned char *out,
                            size_t len, const void *key,
                            unsigned char ivec[16], block128_f block);
-void CRYPTO_cbc128_decrypt(const unsigned char *in, unsigned char *out,
+void __cdecl CRYPTO_cbc128_decrypt(const unsigned char *in, unsigned char *out,
                            size_t len, const void *key,
                            unsigned char ivec[16], block128_f block);
 
-void CRYPTO_ctr128_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl CRYPTO_ctr128_encrypt(const unsigned char *in, unsigned char *out,
                            size_t len, const void *key,
                            unsigned char ivec[16],
                            unsigned char ecount_buf[16], unsigned int *num,
                            block128_f block);
 
-void CRYPTO_ctr128_encrypt_ctr32(const unsigned char *in, unsigned char *out,
+void __cdecl CRYPTO_ctr128_encrypt_ctr32(const unsigned char *in, unsigned char *out,
                                  size_t len, const void *key,
                                  unsigned char ivec[16],
                                  unsigned char ecount_buf[16],
                                  unsigned int *num, ctr128_f ctr);
 
-void CRYPTO_ofb128_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl CRYPTO_ofb128_encrypt(const unsigned char *in, unsigned char *out,
                            size_t len, const void *key,
                            unsigned char ivec[16], int *num,
                            block128_f block);
 
-void CRYPTO_cfb128_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl CRYPTO_cfb128_encrypt(const unsigned char *in, unsigned char *out,
                            size_t len, const void *key,
                            unsigned char ivec[16], int *num,
                            int enc, block128_f block);
-void CRYPTO_cfb128_8_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl CRYPTO_cfb128_8_encrypt(const unsigned char *in, unsigned char *out,
                              size_t length, const void *key,
                              unsigned char ivec[16], int *num,
                              int enc, block128_f block);
-void CRYPTO_cfb128_1_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl CRYPTO_cfb128_1_encrypt(const unsigned char *in, unsigned char *out,
                              size_t bits, const void *key,
                              unsigned char ivec[16], int *num,
                              int enc, block128_f block);
 
-size_t CRYPTO_cts128_encrypt_block(const unsigned char *in,
+size_t __cdecl CRYPTO_cts128_encrypt_block(const unsigned char *in,
                                    unsigned char *out, size_t len,
                                    const void *key, unsigned char ivec[16],
                                    block128_f block);
-size_t CRYPTO_cts128_encrypt(const unsigned char *in, unsigned char *out,
+size_t __cdecl CRYPTO_cts128_encrypt(const unsigned char *in, unsigned char *out,
                              size_t len, const void *key,
                              unsigned char ivec[16], cbc128_f cbc);
-size_t CRYPTO_cts128_decrypt_block(const unsigned char *in,
+size_t __cdecl CRYPTO_cts128_decrypt_block(const unsigned char *in,
                                    unsigned char *out, size_t len,
                                    const void *key, unsigned char ivec[16],
                                    block128_f block);
-size_t CRYPTO_cts128_decrypt(const unsigned char *in, unsigned char *out,
+size_t __cdecl CRYPTO_cts128_decrypt(const unsigned char *in, unsigned char *out,
                              size_t len, const void *key,
                              unsigned char ivec[16], cbc128_f cbc);
 
-size_t CRYPTO_nistcts128_encrypt_block(const unsigned char *in,
+size_t __cdecl CRYPTO_nistcts128_encrypt_block(const unsigned char *in,
                                        unsigned char *out, size_t len,
                                        const void *key,
                                        unsigned char ivec[16],
                                        block128_f block);
-size_t CRYPTO_nistcts128_encrypt(const unsigned char *in, unsigned char *out,
+size_t __cdecl CRYPTO_nistcts128_encrypt(const unsigned char *in, unsigned char *out,
                                  size_t len, const void *key,
                                  unsigned char ivec[16], cbc128_f cbc);
-size_t CRYPTO_nistcts128_decrypt_block(const unsigned char *in,
+size_t __cdecl CRYPTO_nistcts128_decrypt_block(const unsigned char *in,
                                        unsigned char *out, size_t len,
                                        const void *key,
                                        unsigned char ivec[16],
                                        block128_f block);
-size_t CRYPTO_nistcts128_decrypt(const unsigned char *in, unsigned char *out,
+size_t __cdecl CRYPTO_nistcts128_decrypt(const unsigned char *in, unsigned char *out,
                                  size_t len, const void *key,
                                  unsigned char ivec[16], cbc128_f cbc);
 
 typedef struct gcm128_context GCM128_CONTEXT;
 
-GCM128_CONTEXT *CRYPTO_gcm128_new(void *key, block128_f block);
-void CRYPTO_gcm128_init(GCM128_CONTEXT *ctx, void *key, block128_f block);
-void CRYPTO_gcm128_setiv(GCM128_CONTEXT *ctx, const unsigned char *iv,
+GCM128_CONTEXT * __cdecl CRYPTO_gcm128_new(void *key, block128_f block);
+void __cdecl CRYPTO_gcm128_init(GCM128_CONTEXT *ctx, void *key, block128_f block);
+void __cdecl CRYPTO_gcm128_setiv(GCM128_CONTEXT *ctx, const unsigned char *iv,
                          size_t len);
-int CRYPTO_gcm128_aad(GCM128_CONTEXT *ctx, const unsigned char *aad,
+int __cdecl CRYPTO_gcm128_aad(GCM128_CONTEXT *ctx, const unsigned char *aad,
                       size_t len);
-int CRYPTO_gcm128_encrypt(GCM128_CONTEXT *ctx,
+int __cdecl CRYPTO_gcm128_encrypt(GCM128_CONTEXT *ctx,
                           const unsigned char *in, unsigned char *out,
                           size_t len);
-int CRYPTO_gcm128_decrypt(GCM128_CONTEXT *ctx,
+int __cdecl CRYPTO_gcm128_decrypt(GCM128_CONTEXT *ctx,
                           const unsigned char *in, unsigned char *out,
                           size_t len);
-int CRYPTO_gcm128_encrypt_ctr32(GCM128_CONTEXT *ctx,
+int __cdecl CRYPTO_gcm128_encrypt_ctr32(GCM128_CONTEXT *ctx,
                                 const unsigned char *in, unsigned char *out,
                                 size_t len, ctr128_f stream);
-int CRYPTO_gcm128_decrypt_ctr32(GCM128_CONTEXT *ctx,
+int __cdecl CRYPTO_gcm128_decrypt_ctr32(GCM128_CONTEXT *ctx,
                                 const unsigned char *in, unsigned char *out,
                                 size_t len, ctr128_f stream);
-int CRYPTO_gcm128_finish(GCM128_CONTEXT *ctx, const unsigned char *tag,
+int __cdecl CRYPTO_gcm128_finish(GCM128_CONTEXT *ctx, const unsigned char *tag,
                          size_t len);
-void CRYPTO_gcm128_tag(GCM128_CONTEXT *ctx, unsigned char *tag, size_t len);
-void CRYPTO_gcm128_release(GCM128_CONTEXT *ctx);
+void __cdecl CRYPTO_gcm128_tag(GCM128_CONTEXT *ctx, unsigned char *tag, size_t len);
+void __cdecl CRYPTO_gcm128_release(GCM128_CONTEXT *ctx);
 
 typedef struct ccm128_context CCM128_CONTEXT;
 
-void CRYPTO_ccm128_init(CCM128_CONTEXT *ctx,
+void __cdecl CRYPTO_ccm128_init(CCM128_CONTEXT *ctx,
                         unsigned int M, unsigned int L, void *key,
                         block128_f block);
-int CRYPTO_ccm128_setiv(CCM128_CONTEXT *ctx, const unsigned char *nonce,
+int __cdecl CRYPTO_ccm128_setiv(CCM128_CONTEXT *ctx, const unsigned char *nonce,
                         size_t nlen, size_t mlen);
-void CRYPTO_ccm128_aad(CCM128_CONTEXT *ctx, const unsigned char *aad,
+void __cdecl CRYPTO_ccm128_aad(CCM128_CONTEXT *ctx, const unsigned char *aad,
                        size_t alen);
-int CRYPTO_ccm128_encrypt(CCM128_CONTEXT *ctx, const unsigned char *inp,
+int __cdecl CRYPTO_ccm128_encrypt(CCM128_CONTEXT *ctx, const unsigned char *inp,
                           unsigned char *out, size_t len);
-int CRYPTO_ccm128_decrypt(CCM128_CONTEXT *ctx, const unsigned char *inp,
+int __cdecl CRYPTO_ccm128_decrypt(CCM128_CONTEXT *ctx, const unsigned char *inp,
                           unsigned char *out, size_t len);
-int CRYPTO_ccm128_encrypt_ccm64(CCM128_CONTEXT *ctx, const unsigned char *inp,
+int __cdecl CRYPTO_ccm128_encrypt_ccm64(CCM128_CONTEXT *ctx, const unsigned char *inp,
                                 unsigned char *out, size_t len,
                                 ccm128_f stream);
-int CRYPTO_ccm128_decrypt_ccm64(CCM128_CONTEXT *ctx, const unsigned char *inp,
+int __cdecl CRYPTO_ccm128_decrypt_ccm64(CCM128_CONTEXT *ctx, const unsigned char *inp,
                                 unsigned char *out, size_t len,
                                 ccm128_f stream);
-size_t CRYPTO_ccm128_tag(CCM128_CONTEXT *ctx, unsigned char *tag, size_t len);
+size_t __cdecl CRYPTO_ccm128_tag(CCM128_CONTEXT *ctx, unsigned char *tag, size_t len);
 
 typedef struct xts128_context XTS128_CONTEXT;
 
-int CRYPTO_xts128_encrypt(const XTS128_CONTEXT *ctx,
+int __cdecl CRYPTO_xts128_encrypt(const XTS128_CONTEXT *ctx,
                           const unsigned char iv[16],
                           const unsigned char *inp, unsigned char *out,
                           size_t len, int enc);
 
-size_t CRYPTO_128_wrap(void *key, const unsigned char *iv,
+size_t __cdecl CRYPTO_128_wrap(void *key, const unsigned char *iv,
                        unsigned char *out,
                        const unsigned char *in, size_t inlen,
                        block128_f block);
 
-size_t CRYPTO_128_unwrap(void *key, const unsigned char *iv,
+size_t __cdecl CRYPTO_128_unwrap(void *key, const unsigned char *iv,
                          unsigned char *out,
                          const unsigned char *in, size_t inlen,
                          block128_f block);
-size_t CRYPTO_128_wrap_pad(void *key, const unsigned char *icv,
+size_t __cdecl CRYPTO_128_wrap_pad(void *key, const unsigned char *icv,
                            unsigned char *out, const unsigned char *in,
                            size_t inlen, block128_f block);
-size_t CRYPTO_128_unwrap_pad(void *key, const unsigned char *icv,
+size_t __cdecl CRYPTO_128_unwrap_pad(void *key, const unsigned char *icv,
                              unsigned char *out, const unsigned char *in,
                              size_t inlen, block128_f block);
 
@@ -179,26 +179,26 @@ typedef void (*ocb128_f) (const unsigned char *in, unsigned char *out,
                           const unsigned char L_[][16],
                           unsigned char checksum[16]);
 
-OCB128_CONTEXT *CRYPTO_ocb128_new(void *keyenc, void *keydec,
+OCB128_CONTEXT * __cdecl CRYPTO_ocb128_new(void *keyenc, void *keydec,
                                   block128_f encrypt, block128_f decrypt,
                                   ocb128_f stream);
-int CRYPTO_ocb128_init(OCB128_CONTEXT *ctx, void *keyenc, void *keydec,
+int __cdecl CRYPTO_ocb128_init(OCB128_CONTEXT *ctx, void *keyenc, void *keydec,
                        block128_f encrypt, block128_f decrypt,
                        ocb128_f stream);
-int CRYPTO_ocb128_copy_ctx(OCB128_CONTEXT *dest, OCB128_CONTEXT *src,
+int __cdecl CRYPTO_ocb128_copy_ctx(OCB128_CONTEXT *dest, OCB128_CONTEXT *src,
                            void *keyenc, void *keydec);
-int CRYPTO_ocb128_setiv(OCB128_CONTEXT *ctx, const unsigned char *iv,
+int __cdecl CRYPTO_ocb128_setiv(OCB128_CONTEXT *ctx, const unsigned char *iv,
                         size_t len, size_t taglen);
-int CRYPTO_ocb128_aad(OCB128_CONTEXT *ctx, const unsigned char *aad,
+int __cdecl CRYPTO_ocb128_aad(OCB128_CONTEXT *ctx, const unsigned char *aad,
                       size_t len);
-int CRYPTO_ocb128_encrypt(OCB128_CONTEXT *ctx, const unsigned char *in,
+int __cdecl CRYPTO_ocb128_encrypt(OCB128_CONTEXT *ctx, const unsigned char *in,
                           unsigned char *out, size_t len);
-int CRYPTO_ocb128_decrypt(OCB128_CONTEXT *ctx, const unsigned char *in,
+int __cdecl CRYPTO_ocb128_decrypt(OCB128_CONTEXT *ctx, const unsigned char *in,
                           unsigned char *out, size_t len);
-int CRYPTO_ocb128_finish(OCB128_CONTEXT *ctx, const unsigned char *tag,
+int __cdecl CRYPTO_ocb128_finish(OCB128_CONTEXT *ctx, const unsigned char *tag,
                          size_t len);
-int CRYPTO_ocb128_tag(OCB128_CONTEXT *ctx, unsigned char *tag, size_t len);
-void CRYPTO_ocb128_cleanup(OCB128_CONTEXT *ctx);
+int __cdecl CRYPTO_ocb128_tag(OCB128_CONTEXT *ctx, unsigned char *tag, size_t len);
+void __cdecl CRYPTO_ocb128_cleanup(OCB128_CONTEXT *ctx);
 # endif                          /* OPENSSL_NO_OCB */
 
 # ifdef  __cplusplus
diff --git a/include/openssl/objects.h b/include/openssl/objects.h
index 5e8b5762f8..af71998db9 100644
--- a/include/openssl/objects.h
+++ b/include/openssl/objects.h
@@ -41,41 +41,41 @@ typedef struct obj_name_st {
 
 # define         OBJ_create_and_add_object(a,b,c) OBJ_create(a,b,c)
 
-int OBJ_NAME_init(void);
-int OBJ_NAME_new_index(unsigned long (*hash_func) (const char *),
-                       int (*cmp_func) (const char *, const char *),
+int __cdecl OBJ_NAME_init(void);
+int __cdecl OBJ_NAME_new_index(unsigned long (*hash_func) (const char *),
+                       int (__cdecl *cmp_func) (const char *, const char *),
                        void (*free_func) (const char *, int, const char *));
-const char *OBJ_NAME_get(const char *name, int type);
-int OBJ_NAME_add(const char *name, int type, const char *data);
-int OBJ_NAME_remove(const char *name, int type);
-void OBJ_NAME_cleanup(int type); /* -1 for everything */
-void OBJ_NAME_do_all(int type, void (*fn) (const OBJ_NAME *, void *arg),
+const char * __cdecl OBJ_NAME_get(const char *name, int type);
+int __cdecl OBJ_NAME_add(const char *name, int type, const char *data);
+int __cdecl OBJ_NAME_remove(const char *name, int type);
+void __cdecl OBJ_NAME_cleanup(int type); /* -1 for everything */
+void __cdecl OBJ_NAME_do_all(int type, void (*fn) (const OBJ_NAME *, void *arg),
                      void *arg);
-void OBJ_NAME_do_all_sorted(int type,
+void __cdecl OBJ_NAME_do_all_sorted(int type,
                             void (*fn) (const OBJ_NAME *, void *arg),
                             void *arg);
 
-ASN1_OBJECT *OBJ_dup(const ASN1_OBJECT *o);
-ASN1_OBJECT *OBJ_nid2obj(int n);
-const char *OBJ_nid2ln(int n);
-const char *OBJ_nid2sn(int n);
-int OBJ_obj2nid(const ASN1_OBJECT *o);
-ASN1_OBJECT *OBJ_txt2obj(const char *s, int no_name);
-int OBJ_obj2txt(char *buf, int buf_len, const ASN1_OBJECT *a, int no_name);
-int OBJ_txt2nid(const char *s);
-int OBJ_ln2nid(const char *s);
-int OBJ_sn2nid(const char *s);
-int OBJ_cmp(const ASN1_OBJECT *a, const ASN1_OBJECT *b);
-const void *OBJ_bsearch_(const void *key, const void *base, int num, int size,
-                         int (*cmp) (const void *, const void *));
-const void *OBJ_bsearch_ex_(const void *key, const void *base, int num,
+ASN1_OBJECT * __cdecl OBJ_dup(const ASN1_OBJECT *o);
+ASN1_OBJECT * __cdecl OBJ_nid2obj(int n);
+const char * __cdecl OBJ_nid2ln(int n);
+const char * __cdecl OBJ_nid2sn(int n);
+int __cdecl OBJ_obj2nid(const ASN1_OBJECT *o);
+ASN1_OBJECT * __cdecl OBJ_txt2obj(const char *s, int no_name);
+int __cdecl OBJ_obj2txt(char *buf, int buf_len, const ASN1_OBJECT *a, int no_name);
+int __cdecl OBJ_txt2nid(const char *s);
+int __cdecl OBJ_ln2nid(const char *s);
+int __cdecl OBJ_sn2nid(const char *s);
+int __cdecl OBJ_cmp(const ASN1_OBJECT *a, const ASN1_OBJECT *b);
+const void * __cdecl OBJ_bsearch_(const void *key, const void *base, int num, int size,
+                         int (__cdecl *cmp) (const void *, const void *));
+const void * __cdecl OBJ_bsearch_ex_(const void *key, const void *base, int num,
                             int size,
-                            int (*cmp) (const void *, const void *),
+                            int (__cdecl *cmp) (const void *, const void *),
                             int flags);
 
 # define _DECLARE_OBJ_BSEARCH_CMP_FN(scope, type1, type2, nm)    \
-  static int nm##_cmp_BSEARCH_CMP_FN(const void *, const void *); \
-  static int nm##_cmp(type1 const *, type2 const *); \
+  static int __cdecl nm##_cmp_BSEARCH_CMP_FN(const void *, const void *); \
+  static int __cdecl nm##_cmp(type1 const *, type2 const *); \
   scope type2 * OBJ_bsearch_##nm(type1 *key, type2 const *base, int num)
 
 # define DECLARE_OBJ_BSEARCH_CMP_FN(type1, type2, cmp)   \
@@ -111,7 +111,7 @@ const void *OBJ_bsearch_ex_(const void *key, const void *base, int num,
  */
 
 # define IMPLEMENT_OBJ_BSEARCH_CMP_FN(type1, type2, nm)  \
-  static int nm##_cmp_BSEARCH_CMP_FN(const void *a_, const void *b_)    \
+  static int __cdecl nm##_cmp_BSEARCH_CMP_FN(const void *a_, const void *b_)    \
       { \
       type1 const *a = a_; \
       type2 const *b = b_; \
@@ -125,7 +125,7 @@ const void *OBJ_bsearch_ex_(const void *key, const void *base, int num,
       extern void dummy_prototype(void)
 
 # define IMPLEMENT_OBJ_BSEARCH_GLOBAL_CMP_FN(type1, type2, nm)   \
-  static int nm##_cmp_BSEARCH_CMP_FN(const void *a_, const void *b_)    \
+  static int __cdecl nm##_cmp_BSEARCH_CMP_FN(const void *a_, const void *b_)    \
       { \
       type1 const *a = a_; \
       type2 const *b = b_; \
@@ -152,21 +152,21 @@ const void *OBJ_bsearch_ex_(const void *key, const void *base, int num,
                           (void)type_2=CHECKED_PTR_OF(type2,cmp##_type_2), \
                           cmp##_BSEARCH_CMP_FN)),flags)
 
-int OBJ_new_nid(int num);
-int OBJ_add_object(const ASN1_OBJECT *obj);
-int OBJ_create(const char *oid, const char *sn, const char *ln);
+int __cdecl OBJ_new_nid(int num);
+int __cdecl OBJ_add_object(const ASN1_OBJECT *obj);
+int __cdecl OBJ_create(const char *oid, const char *sn, const char *ln);
 #if OPENSSL_API_COMPAT < 0x10100000L
 # define OBJ_cleanup() while(0) continue
 #endif
-int OBJ_create_objects(BIO *in);
+int __cdecl OBJ_create_objects(BIO *in);
 
-size_t OBJ_length(const ASN1_OBJECT *obj);
-const unsigned char *OBJ_get0_data(const ASN1_OBJECT *obj);
+size_t __cdecl OBJ_length(const ASN1_OBJECT *obj);
+const unsigned char * __cdecl OBJ_get0_data(const ASN1_OBJECT *obj);
 
-int OBJ_find_sigid_algs(int signid, int *pdig_nid, int *ppkey_nid);
-int OBJ_find_sigid_by_algs(int *psignid, int dig_nid, int pkey_nid);
-int OBJ_add_sigid(int signid, int dig_id, int pkey_id);
-void OBJ_sigid_free(void);
+int __cdecl OBJ_find_sigid_algs(int signid, int *pdig_nid, int *ppkey_nid);
+int __cdecl OBJ_find_sigid_by_algs(int *psignid, int dig_nid, int pkey_nid);
+int __cdecl OBJ_add_sigid(int signid, int dig_id, int pkey_id);
+void __cdecl OBJ_sigid_free(void);
 
 
 # ifdef  __cplusplus
diff --git a/include/openssl/objectserr.h b/include/openssl/objectserr.h
index 02e166f1ac..7888b96790 100644
--- a/include/openssl/objectserr.h
+++ b/include/openssl/objectserr.h
@@ -18,7 +18,7 @@
 # ifdef  __cplusplus
 extern "C"
 # endif
-int ERR_load_OBJ_strings(void);
+int __cdecl ERR_load_OBJ_strings(void);
 
 /*
  * OBJ function codes.
diff --git a/include/openssl/ocsp.h b/include/openssl/ocsp.h
index 8582fe1ee1..2ef8968d5e 100644
--- a/include/openssl/ocsp.h
+++ b/include/openssl/ocsp.h
@@ -146,177 +146,177 @@ typedef struct ocsp_service_locator_st OCSP_SERVICELOC;
                 (OCSP_CERTSTATUS*)ASN1_dup((int(*)())i2d_OCSP_CERTSTATUS,\
                 (char *(*)())d2i_OCSP_CERTSTATUS,(char *)(cs))
 
-OCSP_CERTID *OCSP_CERTID_dup(OCSP_CERTID *id);
+OCSP_CERTID * __cdecl OCSP_CERTID_dup(OCSP_CERTID *id);
 
-OCSP_RESPONSE *OCSP_sendreq_bio(BIO *b, const char *path, OCSP_REQUEST *req);
-OCSP_REQ_CTX *OCSP_sendreq_new(BIO *io, const char *path, OCSP_REQUEST *req,
+OCSP_RESPONSE * __cdecl OCSP_sendreq_bio(BIO *b, const char *path, OCSP_REQUEST *req);
+OCSP_REQ_CTX * __cdecl OCSP_sendreq_new(BIO *io, const char *path, OCSP_REQUEST *req,
                                int maxline);
-int OCSP_REQ_CTX_nbio(OCSP_REQ_CTX *rctx);
-int OCSP_sendreq_nbio(OCSP_RESPONSE **presp, OCSP_REQ_CTX *rctx);
-OCSP_REQ_CTX *OCSP_REQ_CTX_new(BIO *io, int maxline);
-void OCSP_REQ_CTX_free(OCSP_REQ_CTX *rctx);
-void OCSP_set_max_response_length(OCSP_REQ_CTX *rctx, unsigned long len);
-int OCSP_REQ_CTX_i2d(OCSP_REQ_CTX *rctx, const ASN1_ITEM *it,
+int __cdecl OCSP_REQ_CTX_nbio(OCSP_REQ_CTX *rctx);
+int __cdecl OCSP_sendreq_nbio(OCSP_RESPONSE **presp, OCSP_REQ_CTX *rctx);
+OCSP_REQ_CTX * __cdecl OCSP_REQ_CTX_new(BIO *io, int maxline);
+void __cdecl OCSP_REQ_CTX_free(OCSP_REQ_CTX *rctx);
+void __cdecl OCSP_set_max_response_length(OCSP_REQ_CTX *rctx, unsigned long len);
+int __cdecl OCSP_REQ_CTX_i2d(OCSP_REQ_CTX *rctx, const ASN1_ITEM *it,
                      ASN1_VALUE *val);
-int OCSP_REQ_CTX_nbio_d2i(OCSP_REQ_CTX *rctx, ASN1_VALUE **pval,
+int __cdecl OCSP_REQ_CTX_nbio_d2i(OCSP_REQ_CTX *rctx, ASN1_VALUE **pval,
                           const ASN1_ITEM *it);
-BIO *OCSP_REQ_CTX_get0_mem_bio(OCSP_REQ_CTX *rctx);
-int OCSP_REQ_CTX_http(OCSP_REQ_CTX *rctx, const char *op, const char *path);
-int OCSP_REQ_CTX_set1_req(OCSP_REQ_CTX *rctx, OCSP_REQUEST *req);
-int OCSP_REQ_CTX_add1_header(OCSP_REQ_CTX *rctx,
+BIO * __cdecl OCSP_REQ_CTX_get0_mem_bio(OCSP_REQ_CTX *rctx);
+int __cdecl OCSP_REQ_CTX_http(OCSP_REQ_CTX *rctx, const char *op, const char *path);
+int __cdecl OCSP_REQ_CTX_set1_req(OCSP_REQ_CTX *rctx, OCSP_REQUEST *req);
+int __cdecl OCSP_REQ_CTX_add1_header(OCSP_REQ_CTX *rctx,
                              const char *name, const char *value);
 
-OCSP_CERTID *OCSP_cert_to_id(const EVP_MD *dgst, const X509 *subject,
+OCSP_CERTID * __cdecl OCSP_cert_to_id(const EVP_MD *dgst, const X509 *subject,
                              const X509 *issuer);
 
-OCSP_CERTID *OCSP_cert_id_new(const EVP_MD *dgst,
+OCSP_CERTID * __cdecl OCSP_cert_id_new(const EVP_MD *dgst,
                               const X509_NAME *issuerName,
                               const ASN1_BIT_STRING *issuerKey,
                               const ASN1_INTEGER *serialNumber);
 
-OCSP_ONEREQ *OCSP_request_add0_id(OCSP_REQUEST *req, OCSP_CERTID *cid);
+OCSP_ONEREQ * __cdecl OCSP_request_add0_id(OCSP_REQUEST *req, OCSP_CERTID *cid);
 
-int OCSP_request_add1_nonce(OCSP_REQUEST *req, unsigned char *val, int len);
-int OCSP_basic_add1_nonce(OCSP_BASICRESP *resp, unsigned char *val, int len);
-int OCSP_check_nonce(OCSP_REQUEST *req, OCSP_BASICRESP *bs);
-int OCSP_copy_nonce(OCSP_BASICRESP *resp, OCSP_REQUEST *req);
+int __cdecl OCSP_request_add1_nonce(OCSP_REQUEST *req, unsigned char *val, int len);
+int __cdecl OCSP_basic_add1_nonce(OCSP_BASICRESP *resp, unsigned char *val, int len);
+int __cdecl OCSP_check_nonce(OCSP_REQUEST *req, OCSP_BASICRESP *bs);
+int __cdecl OCSP_copy_nonce(OCSP_BASICRESP *resp, OCSP_REQUEST *req);
 
-int OCSP_request_set1_name(OCSP_REQUEST *req, X509_NAME *nm);
-int OCSP_request_add1_cert(OCSP_REQUEST *req, X509 *cert);
+int __cdecl OCSP_request_set1_name(OCSP_REQUEST *req, X509_NAME *nm);
+int __cdecl OCSP_request_add1_cert(OCSP_REQUEST *req, X509 *cert);
 
-int OCSP_request_sign(OCSP_REQUEST *req,
+int __cdecl OCSP_request_sign(OCSP_REQUEST *req,
                       X509 *signer,
                       EVP_PKEY *key,
                       const EVP_MD *dgst,
                       STACK_OF(X509) *certs, unsigned long flags);
 
-int OCSP_response_status(OCSP_RESPONSE *resp);
-OCSP_BASICRESP *OCSP_response_get1_basic(OCSP_RESPONSE *resp);
+int __cdecl OCSP_response_status(OCSP_RESPONSE *resp);
+OCSP_BASICRESP * __cdecl OCSP_response_get1_basic(OCSP_RESPONSE *resp);
 
-const ASN1_OCTET_STRING *OCSP_resp_get0_signature(const OCSP_BASICRESP *bs);
-const X509_ALGOR *OCSP_resp_get0_tbs_sigalg(const OCSP_BASICRESP *bs);
-const OCSP_RESPDATA *OCSP_resp_get0_respdata(const OCSP_BASICRESP *bs);
-int OCSP_resp_get0_signer(OCSP_BASICRESP *bs, X509 **signer,
+const ASN1_OCTET_STRING * __cdecl OCSP_resp_get0_signature(const OCSP_BASICRESP *bs);
+const X509_ALGOR * __cdecl OCSP_resp_get0_tbs_sigalg(const OCSP_BASICRESP *bs);
+const OCSP_RESPDATA * __cdecl OCSP_resp_get0_respdata(const OCSP_BASICRESP *bs);
+int __cdecl OCSP_resp_get0_signer(OCSP_BASICRESP *bs, X509 **signer,
                           STACK_OF(X509) *extra_certs);
 
-int OCSP_resp_count(OCSP_BASICRESP *bs);
-OCSP_SINGLERESP *OCSP_resp_get0(OCSP_BASICRESP *bs, int idx);
-const ASN1_GENERALIZEDTIME *OCSP_resp_get0_produced_at(const OCSP_BASICRESP* bs);
-const STACK_OF(X509) *OCSP_resp_get0_certs(const OCSP_BASICRESP *bs);
-int OCSP_resp_get0_id(const OCSP_BASICRESP *bs,
+int __cdecl OCSP_resp_count(OCSP_BASICRESP *bs);
+OCSP_SINGLERESP * __cdecl OCSP_resp_get0(OCSP_BASICRESP *bs, int idx);
+const ASN1_GENERALIZEDTIME * __cdecl OCSP_resp_get0_produced_at(const OCSP_BASICRESP* bs);
+const STACK_OF(X509) * __cdecl OCSP_resp_get0_certs(const OCSP_BASICRESP *bs);
+int __cdecl OCSP_resp_get0_id(const OCSP_BASICRESP *bs,
                       const ASN1_OCTET_STRING **pid,
                       const X509_NAME **pname);
-int OCSP_resp_get1_id(const OCSP_BASICRESP *bs,
+int __cdecl OCSP_resp_get1_id(const OCSP_BASICRESP *bs,
                       ASN1_OCTET_STRING **pid,
                       X509_NAME **pname);
 
-int OCSP_resp_find(OCSP_BASICRESP *bs, OCSP_CERTID *id, int last);
-int OCSP_single_get0_status(OCSP_SINGLERESP *single, int *reason,
+int __cdecl OCSP_resp_find(OCSP_BASICRESP *bs, OCSP_CERTID *id, int last);
+int __cdecl OCSP_single_get0_status(OCSP_SINGLERESP *single, int *reason,
                             ASN1_GENERALIZEDTIME **revtime,
                             ASN1_GENERALIZEDTIME **thisupd,
                             ASN1_GENERALIZEDTIME **nextupd);
-int OCSP_resp_find_status(OCSP_BASICRESP *bs, OCSP_CERTID *id, int *status,
+int __cdecl OCSP_resp_find_status(OCSP_BASICRESP *bs, OCSP_CERTID *id, int *status,
                           int *reason,
                           ASN1_GENERALIZEDTIME **revtime,
                           ASN1_GENERALIZEDTIME **thisupd,
                           ASN1_GENERALIZEDTIME **nextupd);
-int OCSP_check_validity(ASN1_GENERALIZEDTIME *thisupd,
+int __cdecl OCSP_check_validity(ASN1_GENERALIZEDTIME *thisupd,
                         ASN1_GENERALIZEDTIME *nextupd, long sec, long maxsec);
 
-int OCSP_request_verify(OCSP_REQUEST *req, STACK_OF(X509) *certs,
+int __cdecl OCSP_request_verify(OCSP_REQUEST *req, STACK_OF(X509) *certs,
                         X509_STORE *store, unsigned long flags);
 
-int OCSP_parse_url(const char *url, char **phost, char **pport, char **ppath,
+int __cdecl OCSP_parse_url(const char *url, char **phost, char **pport, char **ppath,
                    int *pssl);
 
-int OCSP_id_issuer_cmp(const OCSP_CERTID *a, const OCSP_CERTID *b);
-int OCSP_id_cmp(const OCSP_CERTID *a, const OCSP_CERTID *b);
+int __cdecl OCSP_id_issuer_cmp(const OCSP_CERTID *a, const OCSP_CERTID *b);
+int __cdecl OCSP_id_cmp(const OCSP_CERTID *a, const OCSP_CERTID *b);
 
-int OCSP_request_onereq_count(OCSP_REQUEST *req);
-OCSP_ONEREQ *OCSP_request_onereq_get0(OCSP_REQUEST *req, int i);
-OCSP_CERTID *OCSP_onereq_get0_id(OCSP_ONEREQ *one);
-int OCSP_id_get0_info(ASN1_OCTET_STRING **piNameHash, ASN1_OBJECT **pmd,
+int __cdecl OCSP_request_onereq_count(OCSP_REQUEST *req);
+OCSP_ONEREQ * __cdecl OCSP_request_onereq_get0(OCSP_REQUEST *req, int i);
+OCSP_CERTID * __cdecl OCSP_onereq_get0_id(OCSP_ONEREQ *one);
+int __cdecl OCSP_id_get0_info(ASN1_OCTET_STRING **piNameHash, ASN1_OBJECT **pmd,
                       ASN1_OCTET_STRING **pikeyHash,
                       ASN1_INTEGER **pserial, OCSP_CERTID *cid);
-int OCSP_request_is_signed(OCSP_REQUEST *req);
-OCSP_RESPONSE *OCSP_response_create(int status, OCSP_BASICRESP *bs);
-OCSP_SINGLERESP *OCSP_basic_add1_status(OCSP_BASICRESP *rsp,
+int __cdecl OCSP_request_is_signed(OCSP_REQUEST *req);
+OCSP_RESPONSE * __cdecl OCSP_response_create(int status, OCSP_BASICRESP *bs);
+OCSP_SINGLERESP * __cdecl OCSP_basic_add1_status(OCSP_BASICRESP *rsp,
                                         OCSP_CERTID *cid,
                                         int status, int reason,
                                         ASN1_TIME *revtime,
                                         ASN1_TIME *thisupd,
                                         ASN1_TIME *nextupd);
-int OCSP_basic_add1_cert(OCSP_BASICRESP *resp, X509 *cert);
-int OCSP_basic_sign(OCSP_BASICRESP *brsp,
+int __cdecl OCSP_basic_add1_cert(OCSP_BASICRESP *resp, X509 *cert);
+int __cdecl OCSP_basic_sign(OCSP_BASICRESP *brsp,
                     X509 *signer, EVP_PKEY *key, const EVP_MD *dgst,
                     STACK_OF(X509) *certs, unsigned long flags);
-int OCSP_basic_sign_ctx(OCSP_BASICRESP *brsp,
+int __cdecl OCSP_basic_sign_ctx(OCSP_BASICRESP *brsp,
                         X509 *signer, EVP_MD_CTX *ctx,
                         STACK_OF(X509) *certs, unsigned long flags);
-int OCSP_RESPID_set_by_name(OCSP_RESPID *respid, X509 *cert);
-int OCSP_RESPID_set_by_key(OCSP_RESPID *respid, X509 *cert);
-int OCSP_RESPID_match(OCSP_RESPID *respid, X509 *cert);
+int __cdecl OCSP_RESPID_set_by_name(OCSP_RESPID *respid, X509 *cert);
+int __cdecl OCSP_RESPID_set_by_key(OCSP_RESPID *respid, X509 *cert);
+int __cdecl OCSP_RESPID_match(OCSP_RESPID *respid, X509 *cert);
 
-X509_EXTENSION *OCSP_crlID_new(const char *url, long *n, char *tim);
+X509_EXTENSION * __cdecl OCSP_crlID_new(const char *url, long *n, char *tim);
 
-X509_EXTENSION *OCSP_accept_responses_new(char **oids);
+X509_EXTENSION * __cdecl OCSP_accept_responses_new(char **oids);
 
-X509_EXTENSION *OCSP_archive_cutoff_new(char *tim);
+X509_EXTENSION * __cdecl OCSP_archive_cutoff_new(char *tim);
 
-X509_EXTENSION *OCSP_url_svcloc_new(X509_NAME *issuer, const char **urls);
+X509_EXTENSION * __cdecl OCSP_url_svcloc_new(X509_NAME *issuer, const char **urls);
 
-int OCSP_REQUEST_get_ext_count(OCSP_REQUEST *x);
-int OCSP_REQUEST_get_ext_by_NID(OCSP_REQUEST *x, int nid, int lastpos);
-int OCSP_REQUEST_get_ext_by_OBJ(OCSP_REQUEST *x, const ASN1_OBJECT *obj,
+int __cdecl OCSP_REQUEST_get_ext_count(OCSP_REQUEST *x);
+int __cdecl OCSP_REQUEST_get_ext_by_NID(OCSP_REQUEST *x, int nid, int lastpos);
+int __cdecl OCSP_REQUEST_get_ext_by_OBJ(OCSP_REQUEST *x, const ASN1_OBJECT *obj,
                                 int lastpos);
-int OCSP_REQUEST_get_ext_by_critical(OCSP_REQUEST *x, int crit, int lastpos);
-X509_EXTENSION *OCSP_REQUEST_get_ext(OCSP_REQUEST *x, int loc);
-X509_EXTENSION *OCSP_REQUEST_delete_ext(OCSP_REQUEST *x, int loc);
-void *OCSP_REQUEST_get1_ext_d2i(OCSP_REQUEST *x, int nid, int *crit,
+int __cdecl OCSP_REQUEST_get_ext_by_critical(OCSP_REQUEST *x, int crit, int lastpos);
+X509_EXTENSION * __cdecl OCSP_REQUEST_get_ext(OCSP_REQUEST *x, int loc);
+X509_EXTENSION * __cdecl OCSP_REQUEST_delete_ext(OCSP_REQUEST *x, int loc);
+void * __cdecl OCSP_REQUEST_get1_ext_d2i(OCSP_REQUEST *x, int nid, int *crit,
                                 int *idx);
-int OCSP_REQUEST_add1_ext_i2d(OCSP_REQUEST *x, int nid, void *value, int crit,
+int __cdecl OCSP_REQUEST_add1_ext_i2d(OCSP_REQUEST *x, int nid, void *value, int crit,
                               unsigned long flags);
-int OCSP_REQUEST_add_ext(OCSP_REQUEST *x, X509_EXTENSION *ex, int loc);
-
-int OCSP_ONEREQ_get_ext_count(OCSP_ONEREQ *x);
-int OCSP_ONEREQ_get_ext_by_NID(OCSP_ONEREQ *x, int nid, int lastpos);
-int OCSP_ONEREQ_get_ext_by_OBJ(OCSP_ONEREQ *x, const ASN1_OBJECT *obj, int lastpos);
-int OCSP_ONEREQ_get_ext_by_critical(OCSP_ONEREQ *x, int crit, int lastpos);
-X509_EXTENSION *OCSP_ONEREQ_get_ext(OCSP_ONEREQ *x, int loc);
-X509_EXTENSION *OCSP_ONEREQ_delete_ext(OCSP_ONEREQ *x, int loc);
-void *OCSP_ONEREQ_get1_ext_d2i(OCSP_ONEREQ *x, int nid, int *crit, int *idx);
-int OCSP_ONEREQ_add1_ext_i2d(OCSP_ONEREQ *x, int nid, void *value, int crit,
+int __cdecl OCSP_REQUEST_add_ext(OCSP_REQUEST *x, X509_EXTENSION *ex, int loc);
+
+int __cdecl OCSP_ONEREQ_get_ext_count(OCSP_ONEREQ *x);
+int __cdecl OCSP_ONEREQ_get_ext_by_NID(OCSP_ONEREQ *x, int nid, int lastpos);
+int __cdecl OCSP_ONEREQ_get_ext_by_OBJ(OCSP_ONEREQ *x, const ASN1_OBJECT *obj, int lastpos);
+int __cdecl OCSP_ONEREQ_get_ext_by_critical(OCSP_ONEREQ *x, int crit, int lastpos);
+X509_EXTENSION * __cdecl OCSP_ONEREQ_get_ext(OCSP_ONEREQ *x, int loc);
+X509_EXTENSION * __cdecl OCSP_ONEREQ_delete_ext(OCSP_ONEREQ *x, int loc);
+void * __cdecl OCSP_ONEREQ_get1_ext_d2i(OCSP_ONEREQ *x, int nid, int *crit, int *idx);
+int __cdecl OCSP_ONEREQ_add1_ext_i2d(OCSP_ONEREQ *x, int nid, void *value, int crit,
                              unsigned long flags);
-int OCSP_ONEREQ_add_ext(OCSP_ONEREQ *x, X509_EXTENSION *ex, int loc);
+int __cdecl OCSP_ONEREQ_add_ext(OCSP_ONEREQ *x, X509_EXTENSION *ex, int loc);
 
-int OCSP_BASICRESP_get_ext_count(OCSP_BASICRESP *x);
-int OCSP_BASICRESP_get_ext_by_NID(OCSP_BASICRESP *x, int nid, int lastpos);
-int OCSP_BASICRESP_get_ext_by_OBJ(OCSP_BASICRESP *x, const ASN1_OBJECT *obj,
+int __cdecl OCSP_BASICRESP_get_ext_count(OCSP_BASICRESP *x);
+int __cdecl OCSP_BASICRESP_get_ext_by_NID(OCSP_BASICRESP *x, int nid, int lastpos);
+int __cdecl OCSP_BASICRESP_get_ext_by_OBJ(OCSP_BASICRESP *x, const ASN1_OBJECT *obj,
                                   int lastpos);
-int OCSP_BASICRESP_get_ext_by_critical(OCSP_BASICRESP *x, int crit,
+int __cdecl OCSP_BASICRESP_get_ext_by_critical(OCSP_BASICRESP *x, int crit,
                                        int lastpos);
-X509_EXTENSION *OCSP_BASICRESP_get_ext(OCSP_BASICRESP *x, int loc);
-X509_EXTENSION *OCSP_BASICRESP_delete_ext(OCSP_BASICRESP *x, int loc);
-void *OCSP_BASICRESP_get1_ext_d2i(OCSP_BASICRESP *x, int nid, int *crit,
+X509_EXTENSION * __cdecl OCSP_BASICRESP_get_ext(OCSP_BASICRESP *x, int loc);
+X509_EXTENSION * __cdecl OCSP_BASICRESP_delete_ext(OCSP_BASICRESP *x, int loc);
+void * __cdecl OCSP_BASICRESP_get1_ext_d2i(OCSP_BASICRESP *x, int nid, int *crit,
                                   int *idx);
-int OCSP_BASICRESP_add1_ext_i2d(OCSP_BASICRESP *x, int nid, void *value,
+int __cdecl OCSP_BASICRESP_add1_ext_i2d(OCSP_BASICRESP *x, int nid, void *value,
                                 int crit, unsigned long flags);
-int OCSP_BASICRESP_add_ext(OCSP_BASICRESP *x, X509_EXTENSION *ex, int loc);
+int __cdecl OCSP_BASICRESP_add_ext(OCSP_BASICRESP *x, X509_EXTENSION *ex, int loc);
 
-int OCSP_SINGLERESP_get_ext_count(OCSP_SINGLERESP *x);
-int OCSP_SINGLERESP_get_ext_by_NID(OCSP_SINGLERESP *x, int nid, int lastpos);
-int OCSP_SINGLERESP_get_ext_by_OBJ(OCSP_SINGLERESP *x, const ASN1_OBJECT *obj,
+int __cdecl OCSP_SINGLERESP_get_ext_count(OCSP_SINGLERESP *x);
+int __cdecl OCSP_SINGLERESP_get_ext_by_NID(OCSP_SINGLERESP *x, int nid, int lastpos);
+int __cdecl OCSP_SINGLERESP_get_ext_by_OBJ(OCSP_SINGLERESP *x, const ASN1_OBJECT *obj,
                                    int lastpos);
-int OCSP_SINGLERESP_get_ext_by_critical(OCSP_SINGLERESP *x, int crit,
+int __cdecl OCSP_SINGLERESP_get_ext_by_critical(OCSP_SINGLERESP *x, int crit,
                                         int lastpos);
-X509_EXTENSION *OCSP_SINGLERESP_get_ext(OCSP_SINGLERESP *x, int loc);
-X509_EXTENSION *OCSP_SINGLERESP_delete_ext(OCSP_SINGLERESP *x, int loc);
-void *OCSP_SINGLERESP_get1_ext_d2i(OCSP_SINGLERESP *x, int nid, int *crit,
+X509_EXTENSION * __cdecl OCSP_SINGLERESP_get_ext(OCSP_SINGLERESP *x, int loc);
+X509_EXTENSION * __cdecl OCSP_SINGLERESP_delete_ext(OCSP_SINGLERESP *x, int loc);
+void * __cdecl OCSP_SINGLERESP_get1_ext_d2i(OCSP_SINGLERESP *x, int nid, int *crit,
                                    int *idx);
-int OCSP_SINGLERESP_add1_ext_i2d(OCSP_SINGLERESP *x, int nid, void *value,
+int __cdecl OCSP_SINGLERESP_add1_ext_i2d(OCSP_SINGLERESP *x, int nid, void *value,
                                  int crit, unsigned long flags);
-int OCSP_SINGLERESP_add_ext(OCSP_SINGLERESP *x, X509_EXTENSION *ex, int loc);
-const OCSP_CERTID *OCSP_SINGLERESP_get0_id(const OCSP_SINGLERESP *x);
+int __cdecl OCSP_SINGLERESP_add_ext(OCSP_SINGLERESP *x, X509_EXTENSION *ex, int loc);
+const OCSP_CERTID * __cdecl OCSP_SINGLERESP_get0_id(const OCSP_SINGLERESP *x);
 
 DECLARE_ASN1_FUNCTIONS(OCSP_SINGLERESP)
 DECLARE_ASN1_FUNCTIONS(OCSP_CERTSTATUS)
@@ -334,14 +334,14 @@ DECLARE_ASN1_FUNCTIONS(OCSP_REQINFO)
 DECLARE_ASN1_FUNCTIONS(OCSP_CRLID)
 DECLARE_ASN1_FUNCTIONS(OCSP_SERVICELOC)
 
-const char *OCSP_response_status_str(long s);
-const char *OCSP_cert_status_str(long s);
-const char *OCSP_crl_reason_str(long s);
+const char * __cdecl OCSP_response_status_str(long s);
+const char * __cdecl OCSP_cert_status_str(long s);
+const char * __cdecl OCSP_crl_reason_str(long s);
 
-int OCSP_REQUEST_print(BIO *bp, OCSP_REQUEST *a, unsigned long flags);
-int OCSP_RESPONSE_print(BIO *bp, OCSP_RESPONSE *o, unsigned long flags);
+int __cdecl OCSP_REQUEST_print(BIO *bp, OCSP_REQUEST *a, unsigned long flags);
+int __cdecl OCSP_RESPONSE_print(BIO *bp, OCSP_RESPONSE *o, unsigned long flags);
 
-int OCSP_basic_verify(OCSP_BASICRESP *bs, STACK_OF(X509) *certs,
+int __cdecl OCSP_basic_verify(OCSP_BASICRESP *bs, STACK_OF(X509) *certs,
                       X509_STORE *st, unsigned long flags);
 
 
diff --git a/include/openssl/ocsperr.h b/include/openssl/ocsperr.h
index 8dd9e01a17..bb512da35d 100644
--- a/include/openssl/ocsperr.h
+++ b/include/openssl/ocsperr.h
@@ -22,7 +22,7 @@
 #  ifdef  __cplusplus
 extern "C"
 #  endif
-int ERR_load_OCSP_strings(void);
+int __cdecl ERR_load_OCSP_strings(void);
 
 /*
  * OCSP function codes.
diff --git a/include/openssl/pem.h b/include/openssl/pem.h
index 2ef5b5d04c..21deaa960f 100644
--- a/include/openssl/pem.h
+++ b/include/openssl/pem.h
@@ -70,25 +70,25 @@ extern "C" {
 # else
 
 #  define IMPLEMENT_PEM_read_fp(name, type, str, asn1) \
-type *PEM_read_##name(FILE *fp, type **x, pem_password_cb *cb, void *u)\
+type * __cdecl PEM_read_##name(FILE *fp, type **x, pem_password_cb *cb, void *u)\
 { \
 return PEM_ASN1_read((d2i_of_void *)d2i_##asn1, str,fp,(void **)x,cb,u); \
 }
 
 #  define IMPLEMENT_PEM_write_fp(name, type, str, asn1) \
-int PEM_write_##name(FILE *fp, type *x) \
+int __cdecl PEM_write_##name(FILE *fp, type *x) \
 { \
 return PEM_ASN1_write((i2d_of_void *)i2d_##asn1,str,fp,x,NULL,NULL,0,NULL,NULL); \
 }
 
 #  define IMPLEMENT_PEM_write_fp_const(name, type, str, asn1) \
-int PEM_write_##name(FILE *fp, const type *x) \
+int __cdecl PEM_write_##name(FILE *fp, const type *x) \
 { \
 return PEM_ASN1_write((i2d_of_void *)i2d_##asn1,str,fp,(void *)x,NULL,NULL,0,NULL,NULL); \
 }
 
 #  define IMPLEMENT_PEM_write_cb_fp(name, type, str, asn1) \
-int PEM_write_##name(FILE *fp, type *x, const EVP_CIPHER *enc, \
+int __cdecl PEM_write_##name(FILE *fp, type *x, const EVP_CIPHER *enc, \
              unsigned char *kstr, int klen, pem_password_cb *cb, \
                   void *u) \
         { \
@@ -96,7 +96,7 @@ int PEM_write_##name(FILE *fp, type *x, const EVP_CIPHER *enc, \
         }
 
 #  define IMPLEMENT_PEM_write_cb_fp_const(name, type, str, asn1) \
-int PEM_write_##name(FILE *fp, type *x, const EVP_CIPHER *enc, \
+int __cdecl PEM_write_##name(FILE *fp, type *x, const EVP_CIPHER *enc, \
              unsigned char *kstr, int klen, pem_password_cb *cb, \
                   void *u) \
         { \
@@ -106,32 +106,32 @@ int PEM_write_##name(FILE *fp, type *x, const EVP_CIPHER *enc, \
 # endif
 
 # define IMPLEMENT_PEM_read_bio(name, type, str, asn1) \
-type *PEM_read_bio_##name(BIO *bp, type **x, pem_password_cb *cb, void *u)\
+type * __cdecl PEM_read_bio_##name(BIO *bp, type **x, pem_password_cb *cb, void *u)\
 { \
 return PEM_ASN1_read_bio((d2i_of_void *)d2i_##asn1, str,bp,(void **)x,cb,u); \
 }
 
 # define IMPLEMENT_PEM_write_bio(name, type, str, asn1) \
-int PEM_write_bio_##name(BIO *bp, type *x) \
+int __cdecl PEM_write_bio_##name(BIO *bp, type *x) \
 { \
 return PEM_ASN1_write_bio((i2d_of_void *)i2d_##asn1,str,bp,x,NULL,NULL,0,NULL,NULL); \
 }
 
 # define IMPLEMENT_PEM_write_bio_const(name, type, str, asn1) \
-int PEM_write_bio_##name(BIO *bp, const type *x) \
+int __cdecl PEM_write_bio_##name(BIO *bp, const type *x) \
 { \
 return PEM_ASN1_write_bio((i2d_of_void *)i2d_##asn1,str,bp,(void *)x,NULL,NULL,0,NULL,NULL); \
 }
 
 # define IMPLEMENT_PEM_write_cb_bio(name, type, str, asn1) \
-int PEM_write_bio_##name(BIO *bp, type *x, const EVP_CIPHER *enc, \
+int __cdecl PEM_write_bio_##name(BIO *bp, type *x, const EVP_CIPHER *enc, \
              unsigned char *kstr, int klen, pem_password_cb *cb, void *u) \
         { \
         return PEM_ASN1_write_bio((i2d_of_void *)i2d_##asn1,str,bp,x,enc,kstr,klen,cb,u); \
         }
 
 # define IMPLEMENT_PEM_write_cb_bio_const(name, type, str, asn1) \
-int PEM_write_bio_##name(BIO *bp, type *x, const EVP_CIPHER *enc, \
+int __cdecl PEM_write_bio_##name(BIO *bp, type *x, const EVP_CIPHER *enc, \
              unsigned char *kstr, int klen, pem_password_cb *cb, void *u) \
         { \
         return PEM_ASN1_write_bio((i2d_of_void *)i2d_##asn1,str,bp,(void *)x,enc,kstr,klen,cb,u); \
@@ -180,31 +180,31 @@ int PEM_write_bio_##name(BIO *bp, type *x, const EVP_CIPHER *enc, \
 # else
 
 #  define DECLARE_PEM_read_fp(name, type) \
-        type *PEM_read_##name(FILE *fp, type **x, pem_password_cb *cb, void *u);
+        type * __cdecl PEM_read_##name(FILE *fp, type **x, pem_password_cb *cb, void *u);
 
 #  define DECLARE_PEM_write_fp(name, type) \
-        int PEM_write_##name(FILE *fp, type *x);
+        int __cdecl PEM_write_##name(FILE *fp, type *x);
 
 #  define DECLARE_PEM_write_fp_const(name, type) \
-        int PEM_write_##name(FILE *fp, const type *x);
+        int __cdecl PEM_write_##name(FILE *fp, const type *x);
 
 #  define DECLARE_PEM_write_cb_fp(name, type) \
-        int PEM_write_##name(FILE *fp, type *x, const EVP_CIPHER *enc, \
+        int __cdecl PEM_write_##name(FILE *fp, type *x, const EVP_CIPHER *enc, \
              unsigned char *kstr, int klen, pem_password_cb *cb, void *u);
 
 # endif
 
 #  define DECLARE_PEM_read_bio(name, type) \
-        type *PEM_read_bio_##name(BIO *bp, type **x, pem_password_cb *cb, void *u);
+        type * __cdecl PEM_read_bio_##name(BIO *bp, type **x, pem_password_cb *cb, void *u);
 
 #  define DECLARE_PEM_write_bio(name, type) \
-        int PEM_write_bio_##name(BIO *bp, type *x);
+        int __cdecl PEM_write_bio_##name(BIO *bp, type *x);
 
 #  define DECLARE_PEM_write_bio_const(name, type) \
-        int PEM_write_bio_##name(BIO *bp, const type *x);
+        int __cdecl PEM_write_bio_##name(BIO *bp, const type *x);
 
 #  define DECLARE_PEM_write_cb_bio(name, type) \
-        int PEM_write_bio_##name(BIO *bp, type *x, const EVP_CIPHER *enc, \
+        int __cdecl PEM_write_bio_##name(BIO *bp, type *x, const EVP_CIPHER *enc, \
              unsigned char *kstr, int klen, pem_password_cb *cb, void *u);
 
 # define DECLARE_PEM_write(name, type) \
@@ -230,60 +230,60 @@ int PEM_write_bio_##name(BIO *bp, type *x, const EVP_CIPHER *enc, \
         DECLARE_PEM_write_cb(name, type)
 typedef int pem_password_cb (char *buf, int size, int rwflag, void *userdata);
 
-int PEM_get_EVP_CIPHER_INFO(char *header, EVP_CIPHER_INFO *cipher);
-int PEM_do_header(EVP_CIPHER_INFO *cipher, unsigned char *data, long *len,
+int __cdecl PEM_get_EVP_CIPHER_INFO(char *header, EVP_CIPHER_INFO *cipher);
+int __cdecl PEM_do_header(EVP_CIPHER_INFO *cipher, unsigned char *data, long *len,
                   pem_password_cb *callback, void *u);
 
-int PEM_read_bio(BIO *bp, char **name, char **header,
+int __cdecl PEM_read_bio(BIO *bp, char **name, char **header,
                  unsigned char **data, long *len);
 #   define PEM_FLAG_SECURE             0x1
 #   define PEM_FLAG_EAY_COMPATIBLE     0x2
 #   define PEM_FLAG_ONLY_B64           0x4
-int PEM_read_bio_ex(BIO *bp, char **name, char **header,
+int __cdecl PEM_read_bio_ex(BIO *bp, char **name, char **header,
                     unsigned char **data, long *len, unsigned int flags);
-int PEM_bytes_read_bio_secmem(unsigned char **pdata, long *plen, char **pnm,
+int __cdecl PEM_bytes_read_bio_secmem(unsigned char **pdata, long *plen, char **pnm,
                               const char *name, BIO *bp, pem_password_cb *cb,
                               void *u);
-int PEM_write_bio(BIO *bp, const char *name, const char *hdr,
+int __cdecl PEM_write_bio(BIO *bp, const char *name, const char *hdr,
                   const unsigned char *data, long len);
-int PEM_bytes_read_bio(unsigned char **pdata, long *plen, char **pnm,
+int __cdecl PEM_bytes_read_bio(unsigned char **pdata, long *plen, char **pnm,
                        const char *name, BIO *bp, pem_password_cb *cb,
                        void *u);
-void *PEM_ASN1_read_bio(d2i_of_void *d2i, const char *name, BIO *bp, void **x,
+void * __cdecl PEM_ASN1_read_bio(d2i_of_void *d2i, const char *name, BIO *bp, void **x,
                         pem_password_cb *cb, void *u);
-int PEM_ASN1_write_bio(i2d_of_void *i2d, const char *name, BIO *bp, void *x,
+int __cdecl PEM_ASN1_write_bio(i2d_of_void *i2d, const char *name, BIO *bp, void *x,
                        const EVP_CIPHER *enc, unsigned char *kstr, int klen,
                        pem_password_cb *cb, void *u);
 
-STACK_OF(X509_INFO) *PEM_X509_INFO_read_bio(BIO *bp, STACK_OF(X509_INFO) *sk,
+STACK_OF(X509_INFO) * __cdecl PEM_X509_INFO_read_bio(BIO *bp, STACK_OF(X509_INFO) *sk,
                                             pem_password_cb *cb, void *u);
-int PEM_X509_INFO_write_bio(BIO *bp, X509_INFO *xi, EVP_CIPHER *enc,
+int __cdecl PEM_X509_INFO_write_bio(BIO *bp, X509_INFO *xi, EVP_CIPHER *enc,
                             unsigned char *kstr, int klen,
                             pem_password_cb *cd, void *u);
 
 #ifndef OPENSSL_NO_STDIO
-int PEM_read(FILE *fp, char **name, char **header,
+int __cdecl PEM_read(FILE *fp, char **name, char **header,
              unsigned char **data, long *len);
-int PEM_write(FILE *fp, const char *name, const char *hdr,
+int __cdecl PEM_write(FILE *fp, const char *name, const char *hdr,
               const unsigned char *data, long len);
-void *PEM_ASN1_read(d2i_of_void *d2i, const char *name, FILE *fp, void **x,
+void * __cdecl PEM_ASN1_read(d2i_of_void *d2i, const char *name, FILE *fp, void **x,
                     pem_password_cb *cb, void *u);
-int PEM_ASN1_write(i2d_of_void *i2d, const char *name, FILE *fp,
+int __cdecl PEM_ASN1_write(i2d_of_void *i2d, const char *name, FILE *fp,
                    void *x, const EVP_CIPHER *enc, unsigned char *kstr,
                    int klen, pem_password_cb *callback, void *u);
-STACK_OF(X509_INFO) *PEM_X509_INFO_read(FILE *fp, STACK_OF(X509_INFO) *sk,
+STACK_OF(X509_INFO) * __cdecl PEM_X509_INFO_read(FILE *fp, STACK_OF(X509_INFO) *sk,
                                         pem_password_cb *cb, void *u);
 #endif
 
-int PEM_SignInit(EVP_MD_CTX *ctx, EVP_MD *type);
-int PEM_SignUpdate(EVP_MD_CTX *ctx, unsigned char *d, unsigned int cnt);
-int PEM_SignFinal(EVP_MD_CTX *ctx, unsigned char *sigret,
+int __cdecl PEM_SignInit(EVP_MD_CTX *ctx, EVP_MD *type);
+int __cdecl PEM_SignUpdate(EVP_MD_CTX *ctx, unsigned char *d, unsigned int cnt);
+int __cdecl PEM_SignFinal(EVP_MD_CTX *ctx, unsigned char *sigret,
                   unsigned int *siglen, EVP_PKEY *pkey);
 
 /* The default pem_password_cb that's used internally */
-int PEM_def_callback(char *buf, int num, int rwflag, void *userdata);
-void PEM_proc_type(char *buf, int type);
-void PEM_dek_info(char *buf, const char *type, int len, char *str);
+int __cdecl PEM_def_callback(char *buf, int num, int rwflag, void *userdata);
+void __cdecl PEM_proc_type(char *buf, int type);
+void __cdecl PEM_dek_info(char *buf, const char *type, int len, char *str);
 
 # include <openssl/symhacks.h>
 
@@ -318,56 +318,56 @@ DECLARE_PEM_write_const(DHxparams, DH)
 DECLARE_PEM_rw_cb(PrivateKey, EVP_PKEY)
 DECLARE_PEM_rw(PUBKEY, EVP_PKEY)
 
-int PEM_write_bio_PrivateKey_traditional(BIO *bp, EVP_PKEY *x,
+int __cdecl PEM_write_bio_PrivateKey_traditional(BIO *bp, EVP_PKEY *x,
                                          const EVP_CIPHER *enc,
                                          unsigned char *kstr, int klen,
                                          pem_password_cb *cb, void *u);
 
-int PEM_write_bio_PKCS8PrivateKey_nid(BIO *bp, EVP_PKEY *x, int nid,
+int __cdecl PEM_write_bio_PKCS8PrivateKey_nid(BIO *bp, EVP_PKEY *x, int nid,
                                       char *kstr, int klen,
                                       pem_password_cb *cb, void *u);
-int PEM_write_bio_PKCS8PrivateKey(BIO *, EVP_PKEY *, const EVP_CIPHER *,
+int __cdecl PEM_write_bio_PKCS8PrivateKey(BIO *, EVP_PKEY *, const EVP_CIPHER *,
                                   char *, int, pem_password_cb *, void *);
-int i2d_PKCS8PrivateKey_bio(BIO *bp, EVP_PKEY *x, const EVP_CIPHER *enc,
+int __cdecl i2d_PKCS8PrivateKey_bio(BIO *bp, EVP_PKEY *x, const EVP_CIPHER *enc,
                             char *kstr, int klen,
                             pem_password_cb *cb, void *u);
-int i2d_PKCS8PrivateKey_nid_bio(BIO *bp, EVP_PKEY *x, int nid,
+int __cdecl i2d_PKCS8PrivateKey_nid_bio(BIO *bp, EVP_PKEY *x, int nid,
                                 char *kstr, int klen,
                                 pem_password_cb *cb, void *u);
-EVP_PKEY *d2i_PKCS8PrivateKey_bio(BIO *bp, EVP_PKEY **x, pem_password_cb *cb,
+EVP_PKEY * __cdecl d2i_PKCS8PrivateKey_bio(BIO *bp, EVP_PKEY **x, pem_password_cb *cb,
                                   void *u);
 
 # ifndef OPENSSL_NO_STDIO
-int i2d_PKCS8PrivateKey_fp(FILE *fp, EVP_PKEY *x, const EVP_CIPHER *enc,
+int __cdecl i2d_PKCS8PrivateKey_fp(FILE *fp, EVP_PKEY *x, const EVP_CIPHER *enc,
                            char *kstr, int klen,
                            pem_password_cb *cb, void *u);
-int i2d_PKCS8PrivateKey_nid_fp(FILE *fp, EVP_PKEY *x, int nid,
+int __cdecl i2d_PKCS8PrivateKey_nid_fp(FILE *fp, EVP_PKEY *x, int nid,
                                char *kstr, int klen,
                                pem_password_cb *cb, void *u);
-int PEM_write_PKCS8PrivateKey_nid(FILE *fp, EVP_PKEY *x, int nid,
+int __cdecl PEM_write_PKCS8PrivateKey_nid(FILE *fp, EVP_PKEY *x, int nid,
                                   char *kstr, int klen,
                                   pem_password_cb *cb, void *u);
 
-EVP_PKEY *d2i_PKCS8PrivateKey_fp(FILE *fp, EVP_PKEY **x, pem_password_cb *cb,
+EVP_PKEY * __cdecl d2i_PKCS8PrivateKey_fp(FILE *fp, EVP_PKEY **x, pem_password_cb *cb,
                                  void *u);
 
-int PEM_write_PKCS8PrivateKey(FILE *fp, EVP_PKEY *x, const EVP_CIPHER *enc,
+int __cdecl PEM_write_PKCS8PrivateKey(FILE *fp, EVP_PKEY *x, const EVP_CIPHER *enc,
                               char *kstr, int klen, pem_password_cb *cd,
                               void *u);
 # endif
-EVP_PKEY *PEM_read_bio_Parameters(BIO *bp, EVP_PKEY **x);
-int PEM_write_bio_Parameters(BIO *bp, EVP_PKEY *x);
+EVP_PKEY * __cdecl PEM_read_bio_Parameters(BIO *bp, EVP_PKEY **x);
+int __cdecl PEM_write_bio_Parameters(BIO *bp, EVP_PKEY *x);
 
 # ifndef OPENSSL_NO_DSA
-EVP_PKEY *b2i_PrivateKey(const unsigned char **in, long length);
-EVP_PKEY *b2i_PublicKey(const unsigned char **in, long length);
-EVP_PKEY *b2i_PrivateKey_bio(BIO *in);
-EVP_PKEY *b2i_PublicKey_bio(BIO *in);
-int i2b_PrivateKey_bio(BIO *out, EVP_PKEY *pk);
-int i2b_PublicKey_bio(BIO *out, EVP_PKEY *pk);
+EVP_PKEY * __cdecl b2i_PrivateKey(const unsigned char **in, long length);
+EVP_PKEY * __cdecl b2i_PublicKey(const unsigned char **in, long length);
+EVP_PKEY * __cdecl b2i_PrivateKey_bio(BIO *in);
+EVP_PKEY * __cdecl b2i_PublicKey_bio(BIO *in);
+int __cdecl i2b_PrivateKey_bio(BIO *out, EVP_PKEY *pk);
+int __cdecl i2b_PublicKey_bio(BIO *out, EVP_PKEY *pk);
 #  ifndef OPENSSL_NO_RC4
-EVP_PKEY *b2i_PVK_bio(BIO *in, pem_password_cb *cb, void *u);
-int i2b_PVK_bio(BIO *out, EVP_PKEY *pk, int enclevel,
+EVP_PKEY * __cdecl b2i_PVK_bio(BIO *in, pem_password_cb *cb, void *u);
+int __cdecl i2b_PVK_bio(BIO *out, EVP_PKEY *pk, int enclevel,
                 pem_password_cb *cb, void *u);
 #  endif
 # endif
diff --git a/include/openssl/pemerr.h b/include/openssl/pemerr.h
index 0c45918f3c..ae70878350 100644
--- a/include/openssl/pemerr.h
+++ b/include/openssl/pemerr.h
@@ -18,7 +18,7 @@
 # ifdef  __cplusplus
 extern "C"
 # endif
-int ERR_load_PEM_strings(void);
+int __cdecl ERR_load_PEM_strings(void);
 
 /*
  * PEM function codes.
diff --git a/include/openssl/pkcs12.h b/include/openssl/pkcs12.h
index 3f43dad6d9..ba93fb6e70 100644
--- a/include/openssl/pkcs12.h
+++ b/include/openssl/pkcs12.h
@@ -74,115 +74,115 @@ typedef struct pkcs12_bag_st PKCS12_BAGS;
 
 DEPRECATEDIN_1_1_0(ASN1_TYPE *PKCS12_get_attr(const PKCS12_SAFEBAG *bag, int attr_nid))
 
-ASN1_TYPE *PKCS8_get_attr(PKCS8_PRIV_KEY_INFO *p8, int attr_nid);
-int PKCS12_mac_present(const PKCS12 *p12);
-void PKCS12_get0_mac(const ASN1_OCTET_STRING **pmac,
+ASN1_TYPE * __cdecl PKCS8_get_attr(PKCS8_PRIV_KEY_INFO *p8, int attr_nid);
+int __cdecl PKCS12_mac_present(const PKCS12 *p12);
+void __cdecl PKCS12_get0_mac(const ASN1_OCTET_STRING **pmac,
                      const X509_ALGOR **pmacalg,
                      const ASN1_OCTET_STRING **psalt,
                      const ASN1_INTEGER **piter,
                      const PKCS12 *p12);
 
-const ASN1_TYPE *PKCS12_SAFEBAG_get0_attr(const PKCS12_SAFEBAG *bag,
+const ASN1_TYPE * __cdecl PKCS12_SAFEBAG_get0_attr(const PKCS12_SAFEBAG *bag,
                                           int attr_nid);
-const ASN1_OBJECT *PKCS12_SAFEBAG_get0_type(const PKCS12_SAFEBAG *bag);
-int PKCS12_SAFEBAG_get_nid(const PKCS12_SAFEBAG *bag);
-int PKCS12_SAFEBAG_get_bag_nid(const PKCS12_SAFEBAG *bag);
+const ASN1_OBJECT * __cdecl PKCS12_SAFEBAG_get0_type(const PKCS12_SAFEBAG *bag);
+int __cdecl PKCS12_SAFEBAG_get_nid(const PKCS12_SAFEBAG *bag);
+int __cdecl PKCS12_SAFEBAG_get_bag_nid(const PKCS12_SAFEBAG *bag);
 
-X509 *PKCS12_SAFEBAG_get1_cert(const PKCS12_SAFEBAG *bag);
-X509_CRL *PKCS12_SAFEBAG_get1_crl(const PKCS12_SAFEBAG *bag);
-const STACK_OF(PKCS12_SAFEBAG) *
+X509 * __cdecl PKCS12_SAFEBAG_get1_cert(const PKCS12_SAFEBAG *bag);
+X509_CRL * __cdecl PKCS12_SAFEBAG_get1_crl(const PKCS12_SAFEBAG *bag);
+const STACK_OF(PKCS12_SAFEBAG) * __cdecl 
 PKCS12_SAFEBAG_get0_safes(const PKCS12_SAFEBAG *bag);
-const PKCS8_PRIV_KEY_INFO *PKCS12_SAFEBAG_get0_p8inf(const PKCS12_SAFEBAG *bag);
-const X509_SIG *PKCS12_SAFEBAG_get0_pkcs8(const PKCS12_SAFEBAG *bag);
-
-PKCS12_SAFEBAG *PKCS12_SAFEBAG_create_cert(X509 *x509);
-PKCS12_SAFEBAG *PKCS12_SAFEBAG_create_crl(X509_CRL *crl);
-PKCS12_SAFEBAG *PKCS12_SAFEBAG_create0_p8inf(PKCS8_PRIV_KEY_INFO *p8);
-PKCS12_SAFEBAG *PKCS12_SAFEBAG_create0_pkcs8(X509_SIG *p8);
-PKCS12_SAFEBAG *PKCS12_SAFEBAG_create_pkcs8_encrypt(int pbe_nid,
+const PKCS8_PRIV_KEY_INFO * __cdecl PKCS12_SAFEBAG_get0_p8inf(const PKCS12_SAFEBAG *bag);
+const X509_SIG * __cdecl PKCS12_SAFEBAG_get0_pkcs8(const PKCS12_SAFEBAG *bag);
+
+PKCS12_SAFEBAG * __cdecl PKCS12_SAFEBAG_create_cert(X509 *x509);
+PKCS12_SAFEBAG * __cdecl PKCS12_SAFEBAG_create_crl(X509_CRL *crl);
+PKCS12_SAFEBAG * __cdecl PKCS12_SAFEBAG_create0_p8inf(PKCS8_PRIV_KEY_INFO *p8);
+PKCS12_SAFEBAG * __cdecl PKCS12_SAFEBAG_create0_pkcs8(X509_SIG *p8);
+PKCS12_SAFEBAG * __cdecl PKCS12_SAFEBAG_create_pkcs8_encrypt(int pbe_nid,
                                                     const char *pass,
                                                     int passlen,
                                                     unsigned char *salt,
                                                     int saltlen, int iter,
                                                     PKCS8_PRIV_KEY_INFO *p8inf);
 
-PKCS12_SAFEBAG *PKCS12_item_pack_safebag(void *obj, const ASN1_ITEM *it,
+PKCS12_SAFEBAG * __cdecl PKCS12_item_pack_safebag(void *obj, const ASN1_ITEM *it,
                                          int nid1, int nid2);
-PKCS8_PRIV_KEY_INFO *PKCS8_decrypt(const X509_SIG *p8, const char *pass,
+PKCS8_PRIV_KEY_INFO * __cdecl PKCS8_decrypt(const X509_SIG *p8, const char *pass,
                                    int passlen);
-PKCS8_PRIV_KEY_INFO *PKCS12_decrypt_skey(const PKCS12_SAFEBAG *bag,
+PKCS8_PRIV_KEY_INFO * __cdecl PKCS12_decrypt_skey(const PKCS12_SAFEBAG *bag,
                                          const char *pass, int passlen);
-X509_SIG *PKCS8_encrypt(int pbe_nid, const EVP_CIPHER *cipher,
+X509_SIG * __cdecl PKCS8_encrypt(int pbe_nid, const EVP_CIPHER *cipher,
                         const char *pass, int passlen, unsigned char *salt,
                         int saltlen, int iter, PKCS8_PRIV_KEY_INFO *p8);
-X509_SIG *PKCS8_set0_pbe(const char *pass, int passlen,
+X509_SIG * __cdecl PKCS8_set0_pbe(const char *pass, int passlen,
                         PKCS8_PRIV_KEY_INFO *p8inf, X509_ALGOR *pbe);
-PKCS7 *PKCS12_pack_p7data(STACK_OF(PKCS12_SAFEBAG) *sk);
-STACK_OF(PKCS12_SAFEBAG) *PKCS12_unpack_p7data(PKCS7 *p7);
-PKCS7 *PKCS12_pack_p7encdata(int pbe_nid, const char *pass, int passlen,
+PKCS7 * __cdecl PKCS12_pack_p7data(STACK_OF(PKCS12_SAFEBAG) *sk);
+STACK_OF(PKCS12_SAFEBAG) * __cdecl PKCS12_unpack_p7data(PKCS7 *p7);
+PKCS7 * __cdecl PKCS12_pack_p7encdata(int pbe_nid, const char *pass, int passlen,
                              unsigned char *salt, int saltlen, int iter,
                              STACK_OF(PKCS12_SAFEBAG) *bags);
-STACK_OF(PKCS12_SAFEBAG) *PKCS12_unpack_p7encdata(PKCS7 *p7, const char *pass,
+STACK_OF(PKCS12_SAFEBAG) * __cdecl PKCS12_unpack_p7encdata(PKCS7 *p7, const char *pass,
                                                   int passlen);
 
-int PKCS12_pack_authsafes(PKCS12 *p12, STACK_OF(PKCS7) *safes);
-STACK_OF(PKCS7) *PKCS12_unpack_authsafes(const PKCS12 *p12);
+int __cdecl PKCS12_pack_authsafes(PKCS12 *p12, STACK_OF(PKCS7) *safes);
+STACK_OF(PKCS7) * __cdecl PKCS12_unpack_authsafes(const PKCS12 *p12);
 
-int PKCS12_add_localkeyid(PKCS12_SAFEBAG *bag, unsigned char *name,
+int __cdecl PKCS12_add_localkeyid(PKCS12_SAFEBAG *bag, unsigned char *name,
                           int namelen);
-int PKCS12_add_friendlyname_asc(PKCS12_SAFEBAG *bag, const char *name,
+int __cdecl PKCS12_add_friendlyname_asc(PKCS12_SAFEBAG *bag, const char *name,
                                 int namelen);
-int PKCS12_add_friendlyname_utf8(PKCS12_SAFEBAG *bag, const char *name,
+int __cdecl PKCS12_add_friendlyname_utf8(PKCS12_SAFEBAG *bag, const char *name,
                                  int namelen);
-int PKCS12_add_CSPName_asc(PKCS12_SAFEBAG *bag, const char *name,
+int __cdecl PKCS12_add_CSPName_asc(PKCS12_SAFEBAG *bag, const char *name,
                            int namelen);
-int PKCS12_add_friendlyname_uni(PKCS12_SAFEBAG *bag,
+int __cdecl PKCS12_add_friendlyname_uni(PKCS12_SAFEBAG *bag,
                                 const unsigned char *name, int namelen);
-int PKCS8_add_keyusage(PKCS8_PRIV_KEY_INFO *p8, int usage);
-ASN1_TYPE *PKCS12_get_attr_gen(const STACK_OF(X509_ATTRIBUTE) *attrs,
+int __cdecl PKCS8_add_keyusage(PKCS8_PRIV_KEY_INFO *p8, int usage);
+ASN1_TYPE * __cdecl PKCS12_get_attr_gen(const STACK_OF(X509_ATTRIBUTE) *attrs,
                                int attr_nid);
-char *PKCS12_get_friendlyname(PKCS12_SAFEBAG *bag);
-const STACK_OF(X509_ATTRIBUTE) *
+char * __cdecl PKCS12_get_friendlyname(PKCS12_SAFEBAG *bag);
+const STACK_OF(X509_ATTRIBUTE) * __cdecl 
 PKCS12_SAFEBAG_get0_attrs(const PKCS12_SAFEBAG *bag);
-unsigned char *PKCS12_pbe_crypt(const X509_ALGOR *algor,
+unsigned char * __cdecl PKCS12_pbe_crypt(const X509_ALGOR *algor,
                                 const char *pass, int passlen,
                                 const unsigned char *in, int inlen,
                                 unsigned char **data, int *datalen,
                                 int en_de);
-void *PKCS12_item_decrypt_d2i(const X509_ALGOR *algor, const ASN1_ITEM *it,
+void * __cdecl PKCS12_item_decrypt_d2i(const X509_ALGOR *algor, const ASN1_ITEM *it,
                               const char *pass, int passlen,
                               const ASN1_OCTET_STRING *oct, int zbuf);
-ASN1_OCTET_STRING *PKCS12_item_i2d_encrypt(X509_ALGOR *algor,
+ASN1_OCTET_STRING * __cdecl PKCS12_item_i2d_encrypt(X509_ALGOR *algor,
                                            const ASN1_ITEM *it,
                                            const char *pass, int passlen,
                                            void *obj, int zbuf);
-PKCS12 *PKCS12_init(int mode);
-int PKCS12_key_gen_asc(const char *pass, int passlen, unsigned char *salt,
+PKCS12 * __cdecl PKCS12_init(int mode);
+int __cdecl PKCS12_key_gen_asc(const char *pass, int passlen, unsigned char *salt,
                        int saltlen, int id, int iter, int n,
                        unsigned char *out, const EVP_MD *md_type);
-int PKCS12_key_gen_uni(unsigned char *pass, int passlen, unsigned char *salt,
+int __cdecl PKCS12_key_gen_uni(unsigned char *pass, int passlen, unsigned char *salt,
                        int saltlen, int id, int iter, int n,
                        unsigned char *out, const EVP_MD *md_type);
-int PKCS12_key_gen_utf8(const char *pass, int passlen, unsigned char *salt,
+int __cdecl PKCS12_key_gen_utf8(const char *pass, int passlen, unsigned char *salt,
                         int saltlen, int id, int iter, int n,
                         unsigned char *out, const EVP_MD *md_type);
-int PKCS12_PBE_keyivgen(EVP_CIPHER_CTX *ctx, const char *pass, int passlen,
+int __cdecl PKCS12_PBE_keyivgen(EVP_CIPHER_CTX *ctx, const char *pass, int passlen,
                         ASN1_TYPE *param, const EVP_CIPHER *cipher,
                         const EVP_MD *md_type, int en_de);
-int PKCS12_gen_mac(PKCS12 *p12, const char *pass, int passlen,
+int __cdecl PKCS12_gen_mac(PKCS12 *p12, const char *pass, int passlen,
                    unsigned char *mac, unsigned int *maclen);
-int PKCS12_verify_mac(PKCS12 *p12, const char *pass, int passlen);
-int PKCS12_set_mac(PKCS12 *p12, const char *pass, int passlen,
+int __cdecl PKCS12_verify_mac(PKCS12 *p12, const char *pass, int passlen);
+int __cdecl PKCS12_set_mac(PKCS12 *p12, const char *pass, int passlen,
                    unsigned char *salt, int saltlen, int iter,
                    const EVP_MD *md_type);
-int PKCS12_setup_mac(PKCS12 *p12, int iter, unsigned char *salt,
+int __cdecl PKCS12_setup_mac(PKCS12 *p12, int iter, unsigned char *salt,
                      int saltlen, const EVP_MD *md_type);
-unsigned char *OPENSSL_asc2uni(const char *asc, int asclen,
+unsigned char * __cdecl OPENSSL_asc2uni(const char *asc, int asclen,
                                unsigned char **uni, int *unilen);
-char *OPENSSL_uni2asc(const unsigned char *uni, int unilen);
-unsigned char *OPENSSL_utf82uni(const char *asc, int asclen,
+char * __cdecl OPENSSL_uni2asc(const unsigned char *uni, int unilen);
+unsigned char * __cdecl OPENSSL_utf82uni(const char *asc, int asclen,
                                 unsigned char **uni, int *unilen);
-char *OPENSSL_uni2utf8(const unsigned char *uni, int unilen);
+char * __cdecl OPENSSL_uni2utf8(const unsigned char *uni, int unilen);
 
 DECLARE_ASN1_FUNCTIONS(PKCS12)
 DECLARE_ASN1_FUNCTIONS(PKCS12_MAC_DATA)
@@ -192,30 +192,30 @@ DECLARE_ASN1_FUNCTIONS(PKCS12_BAGS)
 DECLARE_ASN1_ITEM(PKCS12_SAFEBAGS)
 DECLARE_ASN1_ITEM(PKCS12_AUTHSAFES)
 
-void PKCS12_PBE_add(void);
-int PKCS12_parse(PKCS12 *p12, const char *pass, EVP_PKEY **pkey, X509 **cert,
+void __cdecl PKCS12_PBE_add(void);
+int __cdecl PKCS12_parse(PKCS12 *p12, const char *pass, EVP_PKEY **pkey, X509 **cert,
                  STACK_OF(X509) **ca);
-PKCS12 *PKCS12_create(const char *pass, const char *name, EVP_PKEY *pkey,
+PKCS12 * __cdecl PKCS12_create(const char *pass, const char *name, EVP_PKEY *pkey,
                       X509 *cert, STACK_OF(X509) *ca, int nid_key, int nid_cert,
                       int iter, int mac_iter, int keytype);
 
-PKCS12_SAFEBAG *PKCS12_add_cert(STACK_OF(PKCS12_SAFEBAG) **pbags, X509 *cert);
-PKCS12_SAFEBAG *PKCS12_add_key(STACK_OF(PKCS12_SAFEBAG) **pbags,
+PKCS12_SAFEBAG * __cdecl PKCS12_add_cert(STACK_OF(PKCS12_SAFEBAG) **pbags, X509 *cert);
+PKCS12_SAFEBAG * __cdecl PKCS12_add_key(STACK_OF(PKCS12_SAFEBAG) **pbags,
                                EVP_PKEY *key, int key_usage, int iter,
                                int key_nid, const char *pass);
-int PKCS12_add_safe(STACK_OF(PKCS7) **psafes, STACK_OF(PKCS12_SAFEBAG) *bags,
+int __cdecl PKCS12_add_safe(STACK_OF(PKCS7) **psafes, STACK_OF(PKCS12_SAFEBAG) *bags,
                     int safe_nid, int iter, const char *pass);
-PKCS12 *PKCS12_add_safes(STACK_OF(PKCS7) *safes, int p7_nid);
+PKCS12 * __cdecl PKCS12_add_safes(STACK_OF(PKCS7) *safes, int p7_nid);
 
-int i2d_PKCS12_bio(BIO *bp, PKCS12 *p12);
+int __cdecl i2d_PKCS12_bio(BIO *bp, PKCS12 *p12);
 # ifndef OPENSSL_NO_STDIO
-int i2d_PKCS12_fp(FILE *fp, PKCS12 *p12);
+int __cdecl i2d_PKCS12_fp(FILE *fp, PKCS12 *p12);
 # endif
-PKCS12 *d2i_PKCS12_bio(BIO *bp, PKCS12 **p12);
+PKCS12 * __cdecl d2i_PKCS12_bio(BIO *bp, PKCS12 **p12);
 # ifndef OPENSSL_NO_STDIO
-PKCS12 *d2i_PKCS12_fp(FILE *fp, PKCS12 **p12);
+PKCS12 * __cdecl d2i_PKCS12_fp(FILE *fp, PKCS12 **p12);
 # endif
-int PKCS12_newpass(PKCS12 *p12, const char *oldpass, const char *newpass);
+int __cdecl PKCS12_newpass(PKCS12 *p12, const char *oldpass, const char *newpass);
 
 # ifdef  __cplusplus
 }
diff --git a/include/openssl/pkcs12err.h b/include/openssl/pkcs12err.h
index eff5eb2602..7e661eb51d 100644
--- a/include/openssl/pkcs12err.h
+++ b/include/openssl/pkcs12err.h
@@ -18,7 +18,7 @@
 # ifdef  __cplusplus
 extern "C"
 # endif
-int ERR_load_PKCS12_strings(void);
+int __cdecl ERR_load_PKCS12_strings(void);
 
 /*
  * PKCS12 function codes.
diff --git a/include/openssl/pkcs7.h b/include/openssl/pkcs7.h
index 9b66e002d2..d46c2eccf5 100644
--- a/include/openssl/pkcs7.h
+++ b/include/openssl/pkcs7.h
@@ -203,18 +203,18 @@ DEFINE_STACK_OF(PKCS7)
 
 DECLARE_ASN1_FUNCTIONS(PKCS7_ISSUER_AND_SERIAL)
 
-int PKCS7_ISSUER_AND_SERIAL_digest(PKCS7_ISSUER_AND_SERIAL *data,
+int __cdecl PKCS7_ISSUER_AND_SERIAL_digest(PKCS7_ISSUER_AND_SERIAL *data,
                                    const EVP_MD *type, unsigned char *md,
                                    unsigned int *len);
 # ifndef OPENSSL_NO_STDIO
-PKCS7 *d2i_PKCS7_fp(FILE *fp, PKCS7 **p7);
-int i2d_PKCS7_fp(FILE *fp, PKCS7 *p7);
+PKCS7 * __cdecl d2i_PKCS7_fp(FILE *fp, PKCS7 **p7);
+int __cdecl i2d_PKCS7_fp(FILE *fp, PKCS7 *p7);
 # endif
-PKCS7 *PKCS7_dup(PKCS7 *p7);
-PKCS7 *d2i_PKCS7_bio(BIO *bp, PKCS7 **p7);
-int i2d_PKCS7_bio(BIO *bp, PKCS7 *p7);
-int i2d_PKCS7_bio_stream(BIO *out, PKCS7 *p7, BIO *in, int flags);
-int PEM_write_bio_PKCS7_stream(BIO *out, PKCS7 *p7, BIO *in, int flags);
+PKCS7 * __cdecl PKCS7_dup(PKCS7 *p7);
+PKCS7 * __cdecl d2i_PKCS7_bio(BIO *bp, PKCS7 **p7);
+int __cdecl i2d_PKCS7_bio(BIO *bp, PKCS7 *p7);
+int __cdecl i2d_PKCS7_bio_stream(BIO *out, PKCS7 *p7, BIO *in, int flags);
+int __cdecl PEM_write_bio_PKCS7_stream(BIO *out, PKCS7 *p7, BIO *in, int flags);
 
 DECLARE_ASN1_FUNCTIONS(PKCS7_SIGNER_INFO)
 DECLARE_ASN1_FUNCTIONS(PKCS7_RECIP_INFO)
@@ -232,86 +232,86 @@ DECLARE_ASN1_ITEM(PKCS7_ATTR_VERIFY)
 DECLARE_ASN1_NDEF_FUNCTION(PKCS7)
 DECLARE_ASN1_PRINT_FUNCTION(PKCS7)
 
-long PKCS7_ctrl(PKCS7 *p7, int cmd, long larg, char *parg);
+long __cdecl PKCS7_ctrl(PKCS7 *p7, int cmd, long larg, char *parg);
 
-int PKCS7_set_type(PKCS7 *p7, int type);
-int PKCS7_set0_type_other(PKCS7 *p7, int type, ASN1_TYPE *other);
-int PKCS7_set_content(PKCS7 *p7, PKCS7 *p7_data);
-int PKCS7_SIGNER_INFO_set(PKCS7_SIGNER_INFO *p7i, X509 *x509, EVP_PKEY *pkey,
+int __cdecl PKCS7_set_type(PKCS7 *p7, int type);
+int __cdecl PKCS7_set0_type_other(PKCS7 *p7, int type, ASN1_TYPE *other);
+int __cdecl PKCS7_set_content(PKCS7 *p7, PKCS7 *p7_data);
+int __cdecl PKCS7_SIGNER_INFO_set(PKCS7_SIGNER_INFO *p7i, X509 *x509, EVP_PKEY *pkey,
                           const EVP_MD *dgst);
-int PKCS7_SIGNER_INFO_sign(PKCS7_SIGNER_INFO *si);
-int PKCS7_add_signer(PKCS7 *p7, PKCS7_SIGNER_INFO *p7i);
-int PKCS7_add_certificate(PKCS7 *p7, X509 *x509);
-int PKCS7_add_crl(PKCS7 *p7, X509_CRL *x509);
-int PKCS7_content_new(PKCS7 *p7, int nid);
-int PKCS7_dataVerify(X509_STORE *cert_store, X509_STORE_CTX *ctx,
+int __cdecl PKCS7_SIGNER_INFO_sign(PKCS7_SIGNER_INFO *si);
+int __cdecl PKCS7_add_signer(PKCS7 *p7, PKCS7_SIGNER_INFO *p7i);
+int __cdecl PKCS7_add_certificate(PKCS7 *p7, X509 *x509);
+int __cdecl PKCS7_add_crl(PKCS7 *p7, X509_CRL *x509);
+int __cdecl PKCS7_content_new(PKCS7 *p7, int nid);
+int __cdecl PKCS7_dataVerify(X509_STORE *cert_store, X509_STORE_CTX *ctx,
                      BIO *bio, PKCS7 *p7, PKCS7_SIGNER_INFO *si);
-int PKCS7_signatureVerify(BIO *bio, PKCS7 *p7, PKCS7_SIGNER_INFO *si,
+int __cdecl PKCS7_signatureVerify(BIO *bio, PKCS7 *p7, PKCS7_SIGNER_INFO *si,
                           X509 *x509);
 
-BIO *PKCS7_dataInit(PKCS7 *p7, BIO *bio);
-int PKCS7_dataFinal(PKCS7 *p7, BIO *bio);
-BIO *PKCS7_dataDecode(PKCS7 *p7, EVP_PKEY *pkey, BIO *in_bio, X509 *pcert);
+BIO * __cdecl PKCS7_dataInit(PKCS7 *p7, BIO *bio);
+int __cdecl PKCS7_dataFinal(PKCS7 *p7, BIO *bio);
+BIO * __cdecl PKCS7_dataDecode(PKCS7 *p7, EVP_PKEY *pkey, BIO *in_bio, X509 *pcert);
 
-PKCS7_SIGNER_INFO *PKCS7_add_signature(PKCS7 *p7, X509 *x509,
+PKCS7_SIGNER_INFO * __cdecl PKCS7_add_signature(PKCS7 *p7, X509 *x509,
                                        EVP_PKEY *pkey, const EVP_MD *dgst);
-X509 *PKCS7_cert_from_signer_info(PKCS7 *p7, PKCS7_SIGNER_INFO *si);
-int PKCS7_set_digest(PKCS7 *p7, const EVP_MD *md);
-STACK_OF(PKCS7_SIGNER_INFO) *PKCS7_get_signer_info(PKCS7 *p7);
+X509 * __cdecl PKCS7_cert_from_signer_info(PKCS7 *p7, PKCS7_SIGNER_INFO *si);
+int __cdecl PKCS7_set_digest(PKCS7 *p7, const EVP_MD *md);
+STACK_OF(PKCS7_SIGNER_INFO) * __cdecl PKCS7_get_signer_info(PKCS7 *p7);
 
-PKCS7_RECIP_INFO *PKCS7_add_recipient(PKCS7 *p7, X509 *x509);
-void PKCS7_SIGNER_INFO_get0_algs(PKCS7_SIGNER_INFO *si, EVP_PKEY **pk,
+PKCS7_RECIP_INFO * __cdecl PKCS7_add_recipient(PKCS7 *p7, X509 *x509);
+void __cdecl PKCS7_SIGNER_INFO_get0_algs(PKCS7_SIGNER_INFO *si, EVP_PKEY **pk,
                                  X509_ALGOR **pdig, X509_ALGOR **psig);
-void PKCS7_RECIP_INFO_get0_alg(PKCS7_RECIP_INFO *ri, X509_ALGOR **penc);
-int PKCS7_add_recipient_info(PKCS7 *p7, PKCS7_RECIP_INFO *ri);
-int PKCS7_RECIP_INFO_set(PKCS7_RECIP_INFO *p7i, X509 *x509);
-int PKCS7_set_cipher(PKCS7 *p7, const EVP_CIPHER *cipher);
-int PKCS7_stream(unsigned char ***boundary, PKCS7 *p7);
-
-PKCS7_ISSUER_AND_SERIAL *PKCS7_get_issuer_and_serial(PKCS7 *p7, int idx);
-ASN1_OCTET_STRING *PKCS7_digest_from_attributes(STACK_OF(X509_ATTRIBUTE) *sk);
-int PKCS7_add_signed_attribute(PKCS7_SIGNER_INFO *p7si, int nid, int type,
+void __cdecl PKCS7_RECIP_INFO_get0_alg(PKCS7_RECIP_INFO *ri, X509_ALGOR **penc);
+int __cdecl PKCS7_add_recipient_info(PKCS7 *p7, PKCS7_RECIP_INFO *ri);
+int __cdecl PKCS7_RECIP_INFO_set(PKCS7_RECIP_INFO *p7i, X509 *x509);
+int __cdecl PKCS7_set_cipher(PKCS7 *p7, const EVP_CIPHER *cipher);
+int __cdecl PKCS7_stream(unsigned char ***boundary, PKCS7 *p7);
+
+PKCS7_ISSUER_AND_SERIAL * __cdecl PKCS7_get_issuer_and_serial(PKCS7 *p7, int idx);
+ASN1_OCTET_STRING * __cdecl PKCS7_digest_from_attributes(STACK_OF(X509_ATTRIBUTE) *sk);
+int __cdecl PKCS7_add_signed_attribute(PKCS7_SIGNER_INFO *p7si, int nid, int type,
                                void *data);
-int PKCS7_add_attribute(PKCS7_SIGNER_INFO *p7si, int nid, int atrtype,
+int __cdecl PKCS7_add_attribute(PKCS7_SIGNER_INFO *p7si, int nid, int atrtype,
                         void *value);
-ASN1_TYPE *PKCS7_get_attribute(PKCS7_SIGNER_INFO *si, int nid);
-ASN1_TYPE *PKCS7_get_signed_attribute(PKCS7_SIGNER_INFO *si, int nid);
-int PKCS7_set_signed_attributes(PKCS7_SIGNER_INFO *p7si,
+ASN1_TYPE * __cdecl PKCS7_get_attribute(PKCS7_SIGNER_INFO *si, int nid);
+ASN1_TYPE * __cdecl PKCS7_get_signed_attribute(PKCS7_SIGNER_INFO *si, int nid);
+int __cdecl PKCS7_set_signed_attributes(PKCS7_SIGNER_INFO *p7si,
                                 STACK_OF(X509_ATTRIBUTE) *sk);
-int PKCS7_set_attributes(PKCS7_SIGNER_INFO *p7si,
+int __cdecl PKCS7_set_attributes(PKCS7_SIGNER_INFO *p7si,
                          STACK_OF(X509_ATTRIBUTE) *sk);
 
-PKCS7 *PKCS7_sign(X509 *signcert, EVP_PKEY *pkey, STACK_OF(X509) *certs,
+PKCS7 * __cdecl PKCS7_sign(X509 *signcert, EVP_PKEY *pkey, STACK_OF(X509) *certs,
                   BIO *data, int flags);
 
-PKCS7_SIGNER_INFO *PKCS7_sign_add_signer(PKCS7 *p7,
+PKCS7_SIGNER_INFO * __cdecl PKCS7_sign_add_signer(PKCS7 *p7,
                                          X509 *signcert, EVP_PKEY *pkey,
                                          const EVP_MD *md, int flags);
 
-int PKCS7_final(PKCS7 *p7, BIO *data, int flags);
-int PKCS7_verify(PKCS7 *p7, STACK_OF(X509) *certs, X509_STORE *store,
+int __cdecl PKCS7_final(PKCS7 *p7, BIO *data, int flags);
+int __cdecl PKCS7_verify(PKCS7 *p7, STACK_OF(X509) *certs, X509_STORE *store,
                  BIO *indata, BIO *out, int flags);
-STACK_OF(X509) *PKCS7_get0_signers(PKCS7 *p7, STACK_OF(X509) *certs,
+STACK_OF(X509) * __cdecl PKCS7_get0_signers(PKCS7 *p7, STACK_OF(X509) *certs,
                                    int flags);
-PKCS7 *PKCS7_encrypt(STACK_OF(X509) *certs, BIO *in, const EVP_CIPHER *cipher,
+PKCS7 * __cdecl PKCS7_encrypt(STACK_OF(X509) *certs, BIO *in, const EVP_CIPHER *cipher,
                      int flags);
-int PKCS7_decrypt(PKCS7 *p7, EVP_PKEY *pkey, X509 *cert, BIO *data,
+int __cdecl PKCS7_decrypt(PKCS7 *p7, EVP_PKEY *pkey, X509 *cert, BIO *data,
                   int flags);
 
-int PKCS7_add_attrib_smimecap(PKCS7_SIGNER_INFO *si,
+int __cdecl PKCS7_add_attrib_smimecap(PKCS7_SIGNER_INFO *si,
                               STACK_OF(X509_ALGOR) *cap);
-STACK_OF(X509_ALGOR) *PKCS7_get_smimecap(PKCS7_SIGNER_INFO *si);
-int PKCS7_simple_smimecap(STACK_OF(X509_ALGOR) *sk, int nid, int arg);
+STACK_OF(X509_ALGOR) * __cdecl PKCS7_get_smimecap(PKCS7_SIGNER_INFO *si);
+int __cdecl PKCS7_simple_smimecap(STACK_OF(X509_ALGOR) *sk, int nid, int arg);
 
-int PKCS7_add_attrib_content_type(PKCS7_SIGNER_INFO *si, ASN1_OBJECT *coid);
-int PKCS7_add0_attrib_signing_time(PKCS7_SIGNER_INFO *si, ASN1_TIME *t);
-int PKCS7_add1_attrib_digest(PKCS7_SIGNER_INFO *si,
+int __cdecl PKCS7_add_attrib_content_type(PKCS7_SIGNER_INFO *si, ASN1_OBJECT *coid);
+int __cdecl PKCS7_add0_attrib_signing_time(PKCS7_SIGNER_INFO *si, ASN1_TIME *t);
+int __cdecl PKCS7_add1_attrib_digest(PKCS7_SIGNER_INFO *si,
                              const unsigned char *md, int mdlen);
 
-int SMIME_write_PKCS7(BIO *bio, PKCS7 *p7, BIO *data, int flags);
-PKCS7 *SMIME_read_PKCS7(BIO *bio, BIO **bcont);
+int __cdecl SMIME_write_PKCS7(BIO *bio, PKCS7 *p7, BIO *data, int flags);
+PKCS7 * __cdecl SMIME_read_PKCS7(BIO *bio, BIO **bcont);
 
-BIO *BIO_new_PKCS7(BIO *out, PKCS7 *p7);
+BIO * __cdecl BIO_new_PKCS7(BIO *out, PKCS7 *p7);
 
 # ifdef  __cplusplus
 }
diff --git a/include/openssl/pkcs7err.h b/include/openssl/pkcs7err.h
index 02e0299a3c..b1cb13ef72 100644
--- a/include/openssl/pkcs7err.h
+++ b/include/openssl/pkcs7err.h
@@ -18,7 +18,7 @@
 # ifdef  __cplusplus
 extern "C"
 # endif
-int ERR_load_PKCS7_strings(void);
+int __cdecl ERR_load_PKCS7_strings(void);
 
 /*
  * PKCS7 function codes.
diff --git a/include/openssl/rand.h b/include/openssl/rand.h
index 38a2a2718f..1b3d93f30d 100644
--- a/include/openssl/rand.h
+++ b/include/openssl/rand.h
@@ -20,48 +20,48 @@ extern "C" {
 #endif
 
 struct rand_meth_st {
-    int (*seed) (const void *buf, int num);
-    int (*bytes) (unsigned char *buf, int num);
-    void (*cleanup) (void);
-    int (*add) (const void *buf, int num, double randomness);
-    int (*pseudorand) (unsigned char *buf, int num);
-    int (*status) (void);
+    int (__cdecl *seed) (const void *buf, int num);
+    int (__cdecl *bytes) (unsigned char *buf, int num);
+    void (__cdecl *cleanup) (void);
+    int (__cdecl *add) (const void *buf, int num, double randomness);
+    int (__cdecl *pseudorand) (unsigned char *buf, int num);
+    int (__cdecl *status) (void);
 };
 
-int RAND_set_rand_method(const RAND_METHOD *meth);
-const RAND_METHOD *RAND_get_rand_method(void);
+int __cdecl RAND_set_rand_method(const RAND_METHOD *meth);
+const RAND_METHOD * __cdecl RAND_get_rand_method(void);
 # ifndef OPENSSL_NO_ENGINE
-int RAND_set_rand_engine(ENGINE *engine);
+int __cdecl RAND_set_rand_engine(ENGINE *engine);
 # endif
 
-RAND_METHOD *RAND_OpenSSL(void);
+RAND_METHOD * __cdecl RAND_OpenSSL(void);
 
 # if OPENSSL_API_COMPAT < 0x10100000L
 #   define RAND_cleanup() while(0) continue
 # endif
-int RAND_bytes(unsigned char *buf, int num);
-int RAND_priv_bytes(unsigned char *buf, int num);
+int __cdecl RAND_bytes(unsigned char *buf, int num);
+int __cdecl RAND_priv_bytes(unsigned char *buf, int num);
 DEPRECATEDIN_1_1_0(int RAND_pseudo_bytes(unsigned char *buf, int num))
 
-void RAND_seed(const void *buf, int num);
-void RAND_keep_random_devices_open(int keep);
+void __cdecl RAND_seed(const void *buf, int num);
+void __cdecl RAND_keep_random_devices_open(int keep);
 
 # if defined(__ANDROID__) && defined(__NDK_FPABI__)
 __NDK_FPABI__	/* __attribute__((pcs("aapcs"))) on ARM */
 # endif
-void RAND_add(const void *buf, int num, double randomness);
-int RAND_load_file(const char *file, long max_bytes);
-int RAND_write_file(const char *file);
-const char *RAND_file_name(char *file, size_t num);
-int RAND_status(void);
+void __cdecl RAND_add(const void *buf, int num, double randomness);
+int __cdecl RAND_load_file(const char *file, long max_bytes);
+int __cdecl RAND_write_file(const char *file);
+const char * __cdecl RAND_file_name(char *file, size_t num);
+int __cdecl RAND_status(void);
 
 # ifndef OPENSSL_NO_EGD
-int RAND_query_egd_bytes(const char *path, unsigned char *buf, int bytes);
-int RAND_egd(const char *path);
-int RAND_egd_bytes(const char *path, int bytes);
+int __cdecl RAND_query_egd_bytes(const char *path, unsigned char *buf, int bytes);
+int __cdecl RAND_egd(const char *path);
+int __cdecl RAND_egd_bytes(const char *path, int bytes);
 # endif
 
-int RAND_poll(void);
+int __cdecl RAND_poll(void);
 
 # if defined(_WIN32) && (defined(BASETYPES) || defined(_WINDEF_H))
 /* application has to include <windows.h> in order to use these */
diff --git a/include/openssl/rand_drbg.h b/include/openssl/rand_drbg.h
index 45b731b73c..a5fd7e2a0f 100644
--- a/include/openssl/rand_drbg.h
+++ b/include/openssl/rand_drbg.h
@@ -58,47 +58,47 @@ extern "C" {
 /*
  * Object lifetime functions.
  */
-RAND_DRBG *RAND_DRBG_new(int type, unsigned int flags, RAND_DRBG *parent);
-RAND_DRBG *RAND_DRBG_secure_new(int type, unsigned int flags, RAND_DRBG *parent);
-int RAND_DRBG_set(RAND_DRBG *drbg, int type, unsigned int flags);
-int RAND_DRBG_set_defaults(int type, unsigned int flags);
-int RAND_DRBG_instantiate(RAND_DRBG *drbg,
+RAND_DRBG * __cdecl RAND_DRBG_new(int type, unsigned int flags, RAND_DRBG *parent);
+RAND_DRBG * __cdecl RAND_DRBG_secure_new(int type, unsigned int flags, RAND_DRBG *parent);
+int __cdecl RAND_DRBG_set(RAND_DRBG *drbg, int type, unsigned int flags);
+int __cdecl RAND_DRBG_set_defaults(int type, unsigned int flags);
+int __cdecl RAND_DRBG_instantiate(RAND_DRBG *drbg,
                           const unsigned char *pers, size_t perslen);
-int RAND_DRBG_uninstantiate(RAND_DRBG *drbg);
-void RAND_DRBG_free(RAND_DRBG *drbg);
+int __cdecl RAND_DRBG_uninstantiate(RAND_DRBG *drbg);
+void __cdecl RAND_DRBG_free(RAND_DRBG *drbg);
 
 /*
  * Object "use" functions.
  */
-int RAND_DRBG_reseed(RAND_DRBG *drbg,
+int __cdecl RAND_DRBG_reseed(RAND_DRBG *drbg,
                      const unsigned char *adin, size_t adinlen,
                      int prediction_resistance);
-int RAND_DRBG_generate(RAND_DRBG *drbg, unsigned char *out, size_t outlen,
+int __cdecl RAND_DRBG_generate(RAND_DRBG *drbg, unsigned char *out, size_t outlen,
                        int prediction_resistance,
                        const unsigned char *adin, size_t adinlen);
-int RAND_DRBG_bytes(RAND_DRBG *drbg, unsigned char *out, size_t outlen);
+int __cdecl RAND_DRBG_bytes(RAND_DRBG *drbg, unsigned char *out, size_t outlen);
 
-int RAND_DRBG_set_reseed_interval(RAND_DRBG *drbg, unsigned int interval);
-int RAND_DRBG_set_reseed_time_interval(RAND_DRBG *drbg, time_t interval);
+int __cdecl RAND_DRBG_set_reseed_interval(RAND_DRBG *drbg, unsigned int interval);
+int __cdecl RAND_DRBG_set_reseed_time_interval(RAND_DRBG *drbg, time_t interval);
 
-int RAND_DRBG_set_reseed_defaults(
+int __cdecl RAND_DRBG_set_reseed_defaults(
                                   unsigned int master_reseed_interval,
                                   unsigned int slave_reseed_interval,
                                   time_t master_reseed_time_interval,
                                   time_t slave_reseed_time_interval
                                   );
 
-RAND_DRBG *RAND_DRBG_get0_master(void);
-RAND_DRBG *RAND_DRBG_get0_public(void);
-RAND_DRBG *RAND_DRBG_get0_private(void);
+RAND_DRBG * __cdecl RAND_DRBG_get0_master(void);
+RAND_DRBG * __cdecl RAND_DRBG_get0_public(void);
+RAND_DRBG * __cdecl RAND_DRBG_get0_private(void);
 
 /*
  * EXDATA
  */
 # define RAND_DRBG_get_ex_new_index(l, p, newf, dupf, freef) \
     CRYPTO_get_ex_new_index(CRYPTO_EX_INDEX_DRBG, l, p, newf, dupf, freef)
-int RAND_DRBG_set_ex_data(RAND_DRBG *drbg, int idx, void *arg);
-void *RAND_DRBG_get_ex_data(const RAND_DRBG *drbg, int idx);
+int __cdecl RAND_DRBG_set_ex_data(RAND_DRBG *drbg, int idx, void *arg);
+void * __cdecl RAND_DRBG_get_ex_data(const RAND_DRBG *drbg, int idx);
 
 /*
  * Callback function typedefs
@@ -116,7 +116,7 @@ typedef size_t (*RAND_DRBG_get_nonce_fn)(RAND_DRBG *drbg, unsigned char **pout,
 typedef void (*RAND_DRBG_cleanup_nonce_fn)(RAND_DRBG *drbg,
                                            unsigned char *out, size_t outlen);
 
-int RAND_DRBG_set_callbacks(RAND_DRBG *drbg,
+int __cdecl RAND_DRBG_set_callbacks(RAND_DRBG *drbg,
                             RAND_DRBG_get_entropy_fn get_entropy,
                             RAND_DRBG_cleanup_entropy_fn cleanup_entropy,
                             RAND_DRBG_get_nonce_fn get_nonce,
diff --git a/include/openssl/randerr.h b/include/openssl/randerr.h
index 70d1a17a4c..54e4d0b530 100644
--- a/include/openssl/randerr.h
+++ b/include/openssl/randerr.h
@@ -16,7 +16,7 @@
 # ifdef  __cplusplus
 extern "C"
 # endif
-int ERR_load_RAND_strings(void);
+int __cdecl ERR_load_RAND_strings(void);
 
 /*
  * RAND function codes.
diff --git a/include/openssl/rc2.h b/include/openssl/rc2.h
index 585f9e4c38..ae67f5a892 100644
--- a/include/openssl/rc2.h
+++ b/include/openssl/rc2.h
@@ -29,17 +29,17 @@ typedef struct rc2_key_st {
     RC2_INT data[64];
 } RC2_KEY;
 
-void RC2_set_key(RC2_KEY *key, int len, const unsigned char *data, int bits);
-void RC2_ecb_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl RC2_set_key(RC2_KEY *key, int len, const unsigned char *data, int bits);
+void __cdecl RC2_ecb_encrypt(const unsigned char *in, unsigned char *out,
                      RC2_KEY *key, int enc);
-void RC2_encrypt(unsigned long *data, RC2_KEY *key);
-void RC2_decrypt(unsigned long *data, RC2_KEY *key);
-void RC2_cbc_encrypt(const unsigned char *in, unsigned char *out, long length,
+void __cdecl RC2_encrypt(unsigned long *data, RC2_KEY *key);
+void __cdecl RC2_decrypt(unsigned long *data, RC2_KEY *key);
+void __cdecl RC2_cbc_encrypt(const unsigned char *in, unsigned char *out, long length,
                      RC2_KEY *ks, unsigned char *iv, int enc);
-void RC2_cfb64_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl RC2_cfb64_encrypt(const unsigned char *in, unsigned char *out,
                        long length, RC2_KEY *schedule, unsigned char *ivec,
                        int *num, int enc);
-void RC2_ofb64_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl RC2_ofb64_encrypt(const unsigned char *in, unsigned char *out,
                        long length, RC2_KEY *schedule, unsigned char *ivec,
                        int *num);
 
diff --git a/include/openssl/rc4.h b/include/openssl/rc4.h
index 86803b37fb..498c984e1d 100644
--- a/include/openssl/rc4.h
+++ b/include/openssl/rc4.h
@@ -23,9 +23,9 @@ typedef struct rc4_key_st {
     RC4_INT data[256];
 } RC4_KEY;
 
-const char *RC4_options(void);
-void RC4_set_key(RC4_KEY *key, int len, const unsigned char *data);
-void RC4(RC4_KEY *key, size_t len, const unsigned char *indata,
+const char * __cdecl RC4_options(void);
+void __cdecl RC4_set_key(RC4_KEY *key, int len, const unsigned char *data);
+void __cdecl RC4(RC4_KEY *key, size_t len, const unsigned char *indata,
          unsigned char *outdata);
 
 # ifdef  __cplusplus
diff --git a/include/openssl/rc5.h b/include/openssl/rc5.h
index 793f88e4e8..24de45e6f6 100644
--- a/include/openssl/rc5.h
+++ b/include/openssl/rc5.h
@@ -39,19 +39,19 @@ typedef struct rc5_key_st {
     RC5_32_INT data[2 * (RC5_16_ROUNDS + 1)];
 } RC5_32_KEY;
 
-void RC5_32_set_key(RC5_32_KEY *key, int len, const unsigned char *data,
+void __cdecl RC5_32_set_key(RC5_32_KEY *key, int len, const unsigned char *data,
                     int rounds);
-void RC5_32_ecb_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl RC5_32_ecb_encrypt(const unsigned char *in, unsigned char *out,
                         RC5_32_KEY *key, int enc);
-void RC5_32_encrypt(unsigned long *data, RC5_32_KEY *key);
-void RC5_32_decrypt(unsigned long *data, RC5_32_KEY *key);
-void RC5_32_cbc_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl RC5_32_encrypt(unsigned long *data, RC5_32_KEY *key);
+void __cdecl RC5_32_decrypt(unsigned long *data, RC5_32_KEY *key);
+void __cdecl RC5_32_cbc_encrypt(const unsigned char *in, unsigned char *out,
                         long length, RC5_32_KEY *ks, unsigned char *iv,
                         int enc);
-void RC5_32_cfb64_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl RC5_32_cfb64_encrypt(const unsigned char *in, unsigned char *out,
                           long length, RC5_32_KEY *schedule,
                           unsigned char *ivec, int *num, int enc);
-void RC5_32_ofb64_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl RC5_32_ofb64_encrypt(const unsigned char *in, unsigned char *out,
                           long length, RC5_32_KEY *schedule,
                           unsigned char *ivec, int *num);
 
diff --git a/include/openssl/ripemd.h b/include/openssl/ripemd.h
index c42026aa42..77a701bd23 100644
--- a/include/openssl/ripemd.h
+++ b/include/openssl/ripemd.h
@@ -32,11 +32,11 @@ typedef struct RIPEMD160state_st {
     unsigned int num;
 } RIPEMD160_CTX;
 
-int RIPEMD160_Init(RIPEMD160_CTX *c);
-int RIPEMD160_Update(RIPEMD160_CTX *c, const void *data, size_t len);
-int RIPEMD160_Final(unsigned char *md, RIPEMD160_CTX *c);
-unsigned char *RIPEMD160(const unsigned char *d, size_t n, unsigned char *md);
-void RIPEMD160_Transform(RIPEMD160_CTX *c, const unsigned char *b);
+int __cdecl RIPEMD160_Init(RIPEMD160_CTX *c);
+int __cdecl RIPEMD160_Update(RIPEMD160_CTX *c, const void *data, size_t len);
+int __cdecl RIPEMD160_Final(unsigned char *md, RIPEMD160_CTX *c);
+unsigned char * __cdecl RIPEMD160(const unsigned char *d, size_t n, unsigned char *md);
+void __cdecl RIPEMD160_Transform(RIPEMD160_CTX *c, const unsigned char *b);
 
 # ifdef  __cplusplus
 }
diff --git a/include/openssl/rsa.h b/include/openssl/rsa.h
index cdce1264eb..768c8c54fa 100644
--- a/include/openssl/rsa.h
+++ b/include/openssl/rsa.h
@@ -195,86 +195,86 @@ extern "C" {
 # define RSA_set_app_data(s,arg)         RSA_set_ex_data(s,0,arg)
 # define RSA_get_app_data(s)             RSA_get_ex_data(s,0)
 
-RSA *RSA_new(void);
-RSA *RSA_new_method(ENGINE *engine);
-int RSA_bits(const RSA *rsa);
-int RSA_size(const RSA *rsa);
-int RSA_security_bits(const RSA *rsa);
-
-int RSA_set0_key(RSA *r, BIGNUM *n, BIGNUM *e, BIGNUM *d);
-int RSA_set0_factors(RSA *r, BIGNUM *p, BIGNUM *q);
-int RSA_set0_crt_params(RSA *r,BIGNUM *dmp1, BIGNUM *dmq1, BIGNUM *iqmp);
-int RSA_set0_multi_prime_params(RSA *r, BIGNUM *primes[], BIGNUM *exps[],
+RSA * __cdecl RSA_new(void);
+RSA * __cdecl RSA_new_method(ENGINE *engine);
+int __cdecl RSA_bits(const RSA *rsa);
+int __cdecl RSA_size(const RSA *rsa);
+int __cdecl RSA_security_bits(const RSA *rsa);
+
+int __cdecl RSA_set0_key(RSA *r, BIGNUM *n, BIGNUM *e, BIGNUM *d);
+int __cdecl RSA_set0_factors(RSA *r, BIGNUM *p, BIGNUM *q);
+int __cdecl RSA_set0_crt_params(RSA *r,BIGNUM *dmp1, BIGNUM *dmq1, BIGNUM *iqmp);
+int __cdecl RSA_set0_multi_prime_params(RSA *r, BIGNUM *primes[], BIGNUM *exps[],
                                 BIGNUM *coeffs[], int pnum);
-void RSA_get0_key(const RSA *r,
+void __cdecl RSA_get0_key(const RSA *r,
                   const BIGNUM **n, const BIGNUM **e, const BIGNUM **d);
-void RSA_get0_factors(const RSA *r, const BIGNUM **p, const BIGNUM **q);
-int RSA_get_multi_prime_extra_count(const RSA *r);
-int RSA_get0_multi_prime_factors(const RSA *r, const BIGNUM *primes[]);
-void RSA_get0_crt_params(const RSA *r,
+void __cdecl RSA_get0_factors(const RSA *r, const BIGNUM **p, const BIGNUM **q);
+int __cdecl RSA_get_multi_prime_extra_count(const RSA *r);
+int __cdecl RSA_get0_multi_prime_factors(const RSA *r, const BIGNUM *primes[]);
+void __cdecl RSA_get0_crt_params(const RSA *r,
                          const BIGNUM **dmp1, const BIGNUM **dmq1,
                          const BIGNUM **iqmp);
-int RSA_get0_multi_prime_crt_params(const RSA *r, const BIGNUM *exps[],
+int __cdecl RSA_get0_multi_prime_crt_params(const RSA *r, const BIGNUM *exps[],
                                     const BIGNUM *coeffs[]);
-const BIGNUM *RSA_get0_n(const RSA *d);
-const BIGNUM *RSA_get0_e(const RSA *d);
-const BIGNUM *RSA_get0_d(const RSA *d);
-const BIGNUM *RSA_get0_p(const RSA *d);
-const BIGNUM *RSA_get0_q(const RSA *d);
-const BIGNUM *RSA_get0_dmp1(const RSA *r);
-const BIGNUM *RSA_get0_dmq1(const RSA *r);
-const BIGNUM *RSA_get0_iqmp(const RSA *r);
-void RSA_clear_flags(RSA *r, int flags);
-int RSA_test_flags(const RSA *r, int flags);
-void RSA_set_flags(RSA *r, int flags);
-int RSA_get_version(RSA *r);
-ENGINE *RSA_get0_engine(const RSA *r);
+const BIGNUM * __cdecl RSA_get0_n(const RSA *d);
+const BIGNUM * __cdecl RSA_get0_e(const RSA *d);
+const BIGNUM * __cdecl RSA_get0_d(const RSA *d);
+const BIGNUM * __cdecl RSA_get0_p(const RSA *d);
+const BIGNUM * __cdecl RSA_get0_q(const RSA *d);
+const BIGNUM * __cdecl RSA_get0_dmp1(const RSA *r);
+const BIGNUM * __cdecl RSA_get0_dmq1(const RSA *r);
+const BIGNUM * __cdecl RSA_get0_iqmp(const RSA *r);
+void __cdecl RSA_clear_flags(RSA *r, int flags);
+int __cdecl RSA_test_flags(const RSA *r, int flags);
+void __cdecl RSA_set_flags(RSA *r, int flags);
+int __cdecl RSA_get_version(RSA *r);
+ENGINE * __cdecl RSA_get0_engine(const RSA *r);
 
 /* Deprecated version */
 DEPRECATEDIN_0_9_8(RSA *RSA_generate_key(int bits, unsigned long e, void
-                                         (*callback) (int, int, void *),
+                                         (__cdecl *callback) (int, int, void *),
                                          void *cb_arg))
 
 /* New version */
-int RSA_generate_key_ex(RSA *rsa, int bits, BIGNUM *e, BN_GENCB *cb);
+int __cdecl RSA_generate_key_ex(RSA *rsa, int bits, BIGNUM *e, BN_GENCB *cb);
 /* Multi-prime version */
-int RSA_generate_multi_prime_key(RSA *rsa, int bits, int primes,
+int __cdecl RSA_generate_multi_prime_key(RSA *rsa, int bits, int primes,
                                  BIGNUM *e, BN_GENCB *cb);
 
-int RSA_X931_derive_ex(RSA *rsa, BIGNUM *p1, BIGNUM *p2, BIGNUM *q1,
+int __cdecl RSA_X931_derive_ex(RSA *rsa, BIGNUM *p1, BIGNUM *p2, BIGNUM *q1,
                        BIGNUM *q2, const BIGNUM *Xp1, const BIGNUM *Xp2,
                        const BIGNUM *Xp, const BIGNUM *Xq1, const BIGNUM *Xq2,
                        const BIGNUM *Xq, const BIGNUM *e, BN_GENCB *cb);
-int RSA_X931_generate_key_ex(RSA *rsa, int bits, const BIGNUM *e,
+int __cdecl RSA_X931_generate_key_ex(RSA *rsa, int bits, const BIGNUM *e,
                              BN_GENCB *cb);
 
-int RSA_check_key(const RSA *);
-int RSA_check_key_ex(const RSA *, BN_GENCB *cb);
+int __cdecl RSA_check_key(const RSA *);
+int __cdecl RSA_check_key_ex(const RSA *, BN_GENCB *cb);
         /* next 4 return -1 on error */
-int RSA_public_encrypt(int flen, const unsigned char *from,
+int __cdecl RSA_public_encrypt(int flen, const unsigned char *from,
                        unsigned char *to, RSA *rsa, int padding);
-int RSA_private_encrypt(int flen, const unsigned char *from,
+int __cdecl RSA_private_encrypt(int flen, const unsigned char *from,
                         unsigned char *to, RSA *rsa, int padding);
-int RSA_public_decrypt(int flen, const unsigned char *from,
+int __cdecl RSA_public_decrypt(int flen, const unsigned char *from,
                        unsigned char *to, RSA *rsa, int padding);
-int RSA_private_decrypt(int flen, const unsigned char *from,
+int __cdecl RSA_private_decrypt(int flen, const unsigned char *from,
                         unsigned char *to, RSA *rsa, int padding);
-void RSA_free(RSA *r);
+void __cdecl RSA_free(RSA *r);
 /* "up" the RSA object's reference count */
-int RSA_up_ref(RSA *r);
+int __cdecl RSA_up_ref(RSA *r);
 
-int RSA_flags(const RSA *r);
+int __cdecl RSA_flags(const RSA *r);
 
-void RSA_set_default_method(const RSA_METHOD *meth);
-const RSA_METHOD *RSA_get_default_method(void);
-const RSA_METHOD *RSA_null_method(void);
-const RSA_METHOD *RSA_get_method(const RSA *rsa);
-int RSA_set_method(RSA *rsa, const RSA_METHOD *meth);
+void __cdecl RSA_set_default_method(const RSA_METHOD *meth);
+const RSA_METHOD * __cdecl RSA_get_default_method(void);
+const RSA_METHOD * __cdecl RSA_null_method(void);
+const RSA_METHOD * __cdecl RSA_get_method(const RSA *rsa);
+int __cdecl RSA_set_method(RSA *rsa, const RSA_METHOD *meth);
 
 /* these are the actual RSA functions */
-const RSA_METHOD *RSA_PKCS1_OpenSSL(void);
+const RSA_METHOD * __cdecl RSA_PKCS1_OpenSSL(void);
 
-int RSA_pkey_ctx_ctrl(EVP_PKEY_CTX *ctx, int optype, int cmd, int p1, void *p2);
+int __cdecl RSA_pkey_ctx_ctrl(EVP_PKEY_CTX *ctx, int optype, int cmd, int p1, void *p2);
 
 DECLARE_ASN1_ENCODE_FUNCTIONS_const(RSA, RSAPublicKey)
 DECLARE_ASN1_ENCODE_FUNCTIONS_const(RSA, RSAPrivateKey)
@@ -301,100 +301,100 @@ typedef struct rsa_oaep_params_st {
 DECLARE_ASN1_FUNCTIONS(RSA_OAEP_PARAMS)
 
 # ifndef OPENSSL_NO_STDIO
-int RSA_print_fp(FILE *fp, const RSA *r, int offset);
+int __cdecl RSA_print_fp(FILE *fp, const RSA *r, int offset);
 # endif
 
-int RSA_print(BIO *bp, const RSA *r, int offset);
+int __cdecl RSA_print(BIO *bp, const RSA *r, int offset);
 
 /*
  * The following 2 functions sign and verify a X509_SIG ASN1 object inside
  * PKCS#1 padded RSA encryption
  */
-int RSA_sign(int type, const unsigned char *m, unsigned int m_length,
+int __cdecl RSA_sign(int type, const unsigned char *m, unsigned int m_length,
              unsigned char *sigret, unsigned int *siglen, RSA *rsa);
-int RSA_verify(int type, const unsigned char *m, unsigned int m_length,
+int __cdecl RSA_verify(int type, const unsigned char *m, unsigned int m_length,
                const unsigned char *sigbuf, unsigned int siglen, RSA *rsa);
 
 /*
  * The following 2 function sign and verify a ASN1_OCTET_STRING object inside
  * PKCS#1 padded RSA encryption
  */
-int RSA_sign_ASN1_OCTET_STRING(int type,
+int __cdecl RSA_sign_ASN1_OCTET_STRING(int type,
                                const unsigned char *m, unsigned int m_length,
                                unsigned char *sigret, unsigned int *siglen,
                                RSA *rsa);
-int RSA_verify_ASN1_OCTET_STRING(int type, const unsigned char *m,
+int __cdecl RSA_verify_ASN1_OCTET_STRING(int type, const unsigned char *m,
                                  unsigned int m_length, unsigned char *sigbuf,
                                  unsigned int siglen, RSA *rsa);
 
-int RSA_blinding_on(RSA *rsa, BN_CTX *ctx);
-void RSA_blinding_off(RSA *rsa);
-BN_BLINDING *RSA_setup_blinding(RSA *rsa, BN_CTX *ctx);
+int __cdecl RSA_blinding_on(RSA *rsa, BN_CTX *ctx);
+void __cdecl RSA_blinding_off(RSA *rsa);
+BN_BLINDING * __cdecl RSA_setup_blinding(RSA *rsa, BN_CTX *ctx);
 
-int RSA_padding_add_PKCS1_type_1(unsigned char *to, int tlen,
+int __cdecl RSA_padding_add_PKCS1_type_1(unsigned char *to, int tlen,
                                  const unsigned char *f, int fl);
-int RSA_padding_check_PKCS1_type_1(unsigned char *to, int tlen,
+int __cdecl RSA_padding_check_PKCS1_type_1(unsigned char *to, int tlen,
                                    const unsigned char *f, int fl,
                                    int rsa_len);
-int RSA_padding_add_PKCS1_type_2(unsigned char *to, int tlen,
+int __cdecl RSA_padding_add_PKCS1_type_2(unsigned char *to, int tlen,
                                  const unsigned char *f, int fl);
-int RSA_padding_check_PKCS1_type_2(unsigned char *to, int tlen,
+int __cdecl RSA_padding_check_PKCS1_type_2(unsigned char *to, int tlen,
                                    const unsigned char *f, int fl,
                                    int rsa_len);
-int PKCS1_MGF1(unsigned char *mask, long len, const unsigned char *seed,
+int __cdecl PKCS1_MGF1(unsigned char *mask, long len, const unsigned char *seed,
                long seedlen, const EVP_MD *dgst);
-int RSA_padding_add_PKCS1_OAEP(unsigned char *to, int tlen,
+int __cdecl RSA_padding_add_PKCS1_OAEP(unsigned char *to, int tlen,
                                const unsigned char *f, int fl,
                                const unsigned char *p, int pl);
-int RSA_padding_check_PKCS1_OAEP(unsigned char *to, int tlen,
+int __cdecl RSA_padding_check_PKCS1_OAEP(unsigned char *to, int tlen,
                                  const unsigned char *f, int fl, int rsa_len,
                                  const unsigned char *p, int pl);
-int RSA_padding_add_PKCS1_OAEP_mgf1(unsigned char *to, int tlen,
+int __cdecl RSA_padding_add_PKCS1_OAEP_mgf1(unsigned char *to, int tlen,
                                     const unsigned char *from, int flen,
                                     const unsigned char *param, int plen,
                                     const EVP_MD *md, const EVP_MD *mgf1md);
-int RSA_padding_check_PKCS1_OAEP_mgf1(unsigned char *to, int tlen,
+int __cdecl RSA_padding_check_PKCS1_OAEP_mgf1(unsigned char *to, int tlen,
                                       const unsigned char *from, int flen,
                                       int num, const unsigned char *param,
                                       int plen, const EVP_MD *md,
                                       const EVP_MD *mgf1md);
-int RSA_padding_add_SSLv23(unsigned char *to, int tlen,
+int __cdecl RSA_padding_add_SSLv23(unsigned char *to, int tlen,
                            const unsigned char *f, int fl);
-int RSA_padding_check_SSLv23(unsigned char *to, int tlen,
+int __cdecl RSA_padding_check_SSLv23(unsigned char *to, int tlen,
                              const unsigned char *f, int fl, int rsa_len);
-int RSA_padding_add_none(unsigned char *to, int tlen, const unsigned char *f,
+int __cdecl RSA_padding_add_none(unsigned char *to, int tlen, const unsigned char *f,
                          int fl);
-int RSA_padding_check_none(unsigned char *to, int tlen,
+int __cdecl RSA_padding_check_none(unsigned char *to, int tlen,
                            const unsigned char *f, int fl, int rsa_len);
-int RSA_padding_add_X931(unsigned char *to, int tlen, const unsigned char *f,
+int __cdecl RSA_padding_add_X931(unsigned char *to, int tlen, const unsigned char *f,
                          int fl);
-int RSA_padding_check_X931(unsigned char *to, int tlen,
+int __cdecl RSA_padding_check_X931(unsigned char *to, int tlen,
                            const unsigned char *f, int fl, int rsa_len);
-int RSA_X931_hash_id(int nid);
+int __cdecl RSA_X931_hash_id(int nid);
 
-int RSA_verify_PKCS1_PSS(RSA *rsa, const unsigned char *mHash,
+int __cdecl RSA_verify_PKCS1_PSS(RSA *rsa, const unsigned char *mHash,
                          const EVP_MD *Hash, const unsigned char *EM,
                          int sLen);
-int RSA_padding_add_PKCS1_PSS(RSA *rsa, unsigned char *EM,
+int __cdecl RSA_padding_add_PKCS1_PSS(RSA *rsa, unsigned char *EM,
                               const unsigned char *mHash, const EVP_MD *Hash,
                               int sLen);
 
-int RSA_verify_PKCS1_PSS_mgf1(RSA *rsa, const unsigned char *mHash,
+int __cdecl RSA_verify_PKCS1_PSS_mgf1(RSA *rsa, const unsigned char *mHash,
                               const EVP_MD *Hash, const EVP_MD *mgf1Hash,
                               const unsigned char *EM, int sLen);
 
-int RSA_padding_add_PKCS1_PSS_mgf1(RSA *rsa, unsigned char *EM,
+int __cdecl RSA_padding_add_PKCS1_PSS_mgf1(RSA *rsa, unsigned char *EM,
                                    const unsigned char *mHash,
                                    const EVP_MD *Hash, const EVP_MD *mgf1Hash,
                                    int sLen);
 
 #define RSA_get_ex_new_index(l, p, newf, dupf, freef) \
     CRYPTO_get_ex_new_index(CRYPTO_EX_INDEX_RSA, l, p, newf, dupf, freef)
-int RSA_set_ex_data(RSA *r, int idx, void *arg);
-void *RSA_get_ex_data(const RSA *r, int idx);
+int __cdecl RSA_set_ex_data(RSA *r, int idx, void *arg);
+void * __cdecl RSA_get_ex_data(const RSA *r, int idx);
 
-RSA *RSAPublicKey_dup(RSA *rsa);
-RSA *RSAPrivateKey_dup(RSA *rsa);
+RSA * __cdecl RSAPublicKey_dup(RSA *rsa);
+RSA * __cdecl RSAPrivateKey_dup(RSA *rsa);
 
 /*
  * If this flag is set the RSA method is FIPS compliant and can be used in
@@ -418,90 +418,90 @@ RSA *RSAPrivateKey_dup(RSA *rsa);
  */
 # define RSA_FLAG_CHECKED                        0x0800
 
-RSA_METHOD *RSA_meth_new(const char *name, int flags);
-void RSA_meth_free(RSA_METHOD *meth);
-RSA_METHOD *RSA_meth_dup(const RSA_METHOD *meth);
-const char *RSA_meth_get0_name(const RSA_METHOD *meth);
-int RSA_meth_set1_name(RSA_METHOD *meth, const char *name);
-int RSA_meth_get_flags(const RSA_METHOD *meth);
-int RSA_meth_set_flags(RSA_METHOD *meth, int flags);
-void *RSA_meth_get0_app_data(const RSA_METHOD *meth);
-int RSA_meth_set0_app_data(RSA_METHOD *meth, void *app_data);
-int (*RSA_meth_get_pub_enc(const RSA_METHOD *meth))
+RSA_METHOD * __cdecl RSA_meth_new(const char *name, int flags);
+void  __cdecl RSA_meth_free(RSA_METHOD *meth);
+RSA_METHOD * __cdecl RSA_meth_dup(const RSA_METHOD *meth);
+const char * __cdecl RSA_meth_get0_name(const RSA_METHOD *meth);
+int __cdecl RSA_meth_set1_name(RSA_METHOD *meth, const char *name);
+int __cdecl RSA_meth_get_flags(const RSA_METHOD *meth);
+int __cdecl RSA_meth_set_flags(RSA_METHOD *meth, int flags);
+void * __cdecl RSA_meth_get0_app_data(const RSA_METHOD *meth);
+int __cdecl RSA_meth_set0_app_data(RSA_METHOD *meth, void *app_data);
+int (__cdecl *RSA_meth_get_pub_enc(const RSA_METHOD *meth))
     (int flen, const unsigned char *from,
      unsigned char *to, RSA *rsa, int padding);
-int RSA_meth_set_pub_enc(RSA_METHOD *rsa,
-                         int (*pub_enc) (int flen, const unsigned char *from,
+int __cdecl RSA_meth_set_pub_enc(RSA_METHOD *rsa,
+                         int (__cdecl *pub_enc) (int flen, const unsigned char *from,
                                          unsigned char *to, RSA *rsa,
                                          int padding));
-int (*RSA_meth_get_pub_dec(const RSA_METHOD *meth))
+int (__cdecl *RSA_meth_get_pub_dec(const RSA_METHOD *meth))
     (int flen, const unsigned char *from,
      unsigned char *to, RSA *rsa, int padding);
-int RSA_meth_set_pub_dec(RSA_METHOD *rsa,
-                         int (*pub_dec) (int flen, const unsigned char *from,
+int __cdecl RSA_meth_set_pub_dec(RSA_METHOD *rsa,
+                         int (__cdecl *pub_dec) (int flen, const unsigned char *from,
                                          unsigned char *to, RSA *rsa,
                                          int padding));
-int (*RSA_meth_get_priv_enc(const RSA_METHOD *meth))
+int (__cdecl *RSA_meth_get_priv_enc(const RSA_METHOD *meth))
     (int flen, const unsigned char *from,
      unsigned char *to, RSA *rsa, int padding);
-int RSA_meth_set_priv_enc(RSA_METHOD *rsa,
-                          int (*priv_enc) (int flen, const unsigned char *from,
+int __cdecl RSA_meth_set_priv_enc(RSA_METHOD *rsa,
+                          int (__cdecl *priv_enc) (int flen, const unsigned char *from,
                                            unsigned char *to, RSA *rsa,
                                            int padding));
-int (*RSA_meth_get_priv_dec(const RSA_METHOD *meth))
+int (__cdecl *RSA_meth_get_priv_dec(const RSA_METHOD *meth))
     (int flen, const unsigned char *from,
      unsigned char *to, RSA *rsa, int padding);
-int RSA_meth_set_priv_dec(RSA_METHOD *rsa,
-                          int (*priv_dec) (int flen, const unsigned char *from,
+int __cdecl RSA_meth_set_priv_dec(RSA_METHOD *rsa,
+                          int (__cdecl *priv_dec) (int flen, const unsigned char *from,
                                            unsigned char *to, RSA *rsa,
                                            int padding));
-int (*RSA_meth_get_mod_exp(const RSA_METHOD *meth))
+int (__cdecl *RSA_meth_get_mod_exp(const RSA_METHOD *meth))
     (BIGNUM *r0, const BIGNUM *i, RSA *rsa, BN_CTX *ctx);
-int RSA_meth_set_mod_exp(RSA_METHOD *rsa,
-                         int (*mod_exp) (BIGNUM *r0, const BIGNUM *i, RSA *rsa,
+int __cdecl RSA_meth_set_mod_exp(RSA_METHOD *rsa,
+                         int (__cdecl *mod_exp) (BIGNUM *r0, const BIGNUM *i, RSA *rsa,
                                          BN_CTX *ctx));
-int (*RSA_meth_get_bn_mod_exp(const RSA_METHOD *meth))
+int (__cdecl *RSA_meth_get_bn_mod_exp(const RSA_METHOD *meth))
     (BIGNUM *r, const BIGNUM *a, const BIGNUM *p,
      const BIGNUM *m, BN_CTX *ctx, BN_MONT_CTX *m_ctx);
-int RSA_meth_set_bn_mod_exp(RSA_METHOD *rsa,
-                            int (*bn_mod_exp) (BIGNUM *r,
+int __cdecl RSA_meth_set_bn_mod_exp(RSA_METHOD *rsa,
+                            int (__cdecl *bn_mod_exp) (BIGNUM *r,
                                                const BIGNUM *a,
                                                const BIGNUM *p,
                                                const BIGNUM *m,
                                                BN_CTX *ctx,
                                                BN_MONT_CTX *m_ctx));
-int (*RSA_meth_get_init(const RSA_METHOD *meth)) (RSA *rsa);
-int RSA_meth_set_init(RSA_METHOD *rsa, int (*init) (RSA *rsa));
-int (*RSA_meth_get_finish(const RSA_METHOD *meth)) (RSA *rsa);
-int RSA_meth_set_finish(RSA_METHOD *rsa, int (*finish) (RSA *rsa));
-int (*RSA_meth_get_sign(const RSA_METHOD *meth))
+int (__cdecl *RSA_meth_get_init(const RSA_METHOD *meth)) (RSA *rsa);
+int __cdecl RSA_meth_set_init(RSA_METHOD *rsa, int (__cdecl *init) (RSA *rsa));
+int (__cdecl *RSA_meth_get_finish(const RSA_METHOD *meth)) (RSA *rsa);
+int __cdecl RSA_meth_set_finish(RSA_METHOD *rsa, int (__cdecl *finish) (RSA *rsa));
+int (__cdecl *RSA_meth_get_sign(const RSA_METHOD *meth))
     (int type,
      const unsigned char *m, unsigned int m_length,
      unsigned char *sigret, unsigned int *siglen,
      const RSA *rsa);
-int RSA_meth_set_sign(RSA_METHOD *rsa,
-                      int (*sign) (int type, const unsigned char *m,
+int __cdecl RSA_meth_set_sign(RSA_METHOD *rsa,
+                      int (__cdecl *sign) (int type, const unsigned char *m,
                                    unsigned int m_length,
                                    unsigned char *sigret, unsigned int *siglen,
                                    const RSA *rsa));
-int (*RSA_meth_get_verify(const RSA_METHOD *meth))
+int (__cdecl *RSA_meth_get_verify(const RSA_METHOD *meth))
     (int dtype, const unsigned char *m,
      unsigned int m_length, const unsigned char *sigbuf,
      unsigned int siglen, const RSA *rsa);
-int RSA_meth_set_verify(RSA_METHOD *rsa,
-                        int (*verify) (int dtype, const unsigned char *m,
+int __cdecl RSA_meth_set_verify(RSA_METHOD *rsa,
+                        int (__cdecl *verify) (int dtype, const unsigned char *m,
                                        unsigned int m_length,
                                        const unsigned char *sigbuf,
                                        unsigned int siglen, const RSA *rsa));
-int (*RSA_meth_get_keygen(const RSA_METHOD *meth))
+int (__cdecl *RSA_meth_get_keygen(const RSA_METHOD *meth))
     (RSA *rsa, int bits, BIGNUM *e, BN_GENCB *cb);
-int RSA_meth_set_keygen(RSA_METHOD *rsa,
-                        int (*keygen) (RSA *rsa, int bits, BIGNUM *e,
+int __cdecl RSA_meth_set_keygen(RSA_METHOD *rsa,
+                        int (__cdecl *keygen) (RSA *rsa, int bits, BIGNUM *e,
                                        BN_GENCB *cb));
-int (*RSA_meth_get_multi_prime_keygen(const RSA_METHOD *meth))
+int (__cdecl *RSA_meth_get_multi_prime_keygen(const RSA_METHOD *meth))
     (RSA *rsa, int bits, int primes, BIGNUM *e, BN_GENCB *cb);
-int RSA_meth_set_multi_prime_keygen(RSA_METHOD *meth,
-                                    int (*keygen) (RSA *rsa, int bits,
+int __cdecl RSA_meth_set_multi_prime_keygen(RSA_METHOD *meth,
+                                    int (__cdecl *keygen) (RSA *rsa, int bits,
                                                    int primes, BIGNUM *e,
                                                    BN_GENCB *cb));
 
diff --git a/include/openssl/rsaerr.h b/include/openssl/rsaerr.h
index 59b15e13e9..8ada94637e 100644
--- a/include/openssl/rsaerr.h
+++ b/include/openssl/rsaerr.h
@@ -18,7 +18,7 @@
 # ifdef  __cplusplus
 extern "C"
 # endif
-int ERR_load_RSA_strings(void);
+int __cdecl ERR_load_RSA_strings(void);
 
 /*
  * RSA function codes.
diff --git a/include/openssl/safestack.h b/include/openssl/safestack.h
index 38b5578978..0d317b8a56 100644
--- a/include/openssl/safestack.h
+++ b/include/openssl/safestack.h
@@ -21,9 +21,9 @@ extern "C" {
 
 # define SKM_DEFINE_STACK_OF(t1, t2, t3) \
     STACK_OF(t1); \
-    typedef int (*sk_##t1##_compfunc)(const t3 * const *a, const t3 *const *b); \
-    typedef void (*sk_##t1##_freefunc)(t3 *a); \
-    typedef t3 * (*sk_##t1##_copyfunc)(const t3 *a); \
+    typedef int (__cdecl *sk_##t1##_compfunc)(const t3 * const *a, const t3 *const *b); \
+    typedef void (__cdecl *sk_##t1##_freefunc)(t3 *a); \
+    typedef t3 * (__cdecl *sk_##t1##_copyfunc)(const t3 *a); \
     static ossl_unused ossl_inline int sk_##t1##_num(const STACK_OF(t1) *sk) \
     { \
         return OPENSSL_sk_num((const OPENSSL_STACK *)sk); \
diff --git a/include/openssl/seed.h b/include/openssl/seed.h
index de10b08572..471f8f40ea 100644
--- a/include/openssl/seed.h
+++ b/include/openssl/seed.h
@@ -65,26 +65,26 @@ typedef struct seed_key_st {
 # endif
 } SEED_KEY_SCHEDULE;
 
-void SEED_set_key(const unsigned char rawkey[SEED_KEY_LENGTH],
+void __cdecl SEED_set_key(const unsigned char rawkey[SEED_KEY_LENGTH],
                   SEED_KEY_SCHEDULE *ks);
 
-void SEED_encrypt(const unsigned char s[SEED_BLOCK_SIZE],
+void __cdecl SEED_encrypt(const unsigned char s[SEED_BLOCK_SIZE],
                   unsigned char d[SEED_BLOCK_SIZE],
                   const SEED_KEY_SCHEDULE *ks);
-void SEED_decrypt(const unsigned char s[SEED_BLOCK_SIZE],
+void __cdecl SEED_decrypt(const unsigned char s[SEED_BLOCK_SIZE],
                   unsigned char d[SEED_BLOCK_SIZE],
                   const SEED_KEY_SCHEDULE *ks);
 
-void SEED_ecb_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl SEED_ecb_encrypt(const unsigned char *in, unsigned char *out,
                       const SEED_KEY_SCHEDULE *ks, int enc);
-void SEED_cbc_encrypt(const unsigned char *in, unsigned char *out, size_t len,
+void __cdecl SEED_cbc_encrypt(const unsigned char *in, unsigned char *out, size_t len,
                       const SEED_KEY_SCHEDULE *ks,
                       unsigned char ivec[SEED_BLOCK_SIZE], int enc);
-void SEED_cfb128_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl SEED_cfb128_encrypt(const unsigned char *in, unsigned char *out,
                          size_t len, const SEED_KEY_SCHEDULE *ks,
                          unsigned char ivec[SEED_BLOCK_SIZE], int *num,
                          int enc);
-void SEED_ofb128_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl SEED_ofb128_encrypt(const unsigned char *in, unsigned char *out,
                          size_t len, const SEED_KEY_SCHEDULE *ks,
                          unsigned char ivec[SEED_BLOCK_SIZE], int *num);
 
diff --git a/include/openssl/sha.h b/include/openssl/sha.h
index 6a1eb0de8b..0fc7a42b1e 100644
--- a/include/openssl/sha.h
+++ b/include/openssl/sha.h
@@ -38,11 +38,11 @@ typedef struct SHAstate_st {
     unsigned int num;
 } SHA_CTX;
 
-int SHA1_Init(SHA_CTX *c);
-int SHA1_Update(SHA_CTX *c, const void *data, size_t len);
-int SHA1_Final(unsigned char *md, SHA_CTX *c);
-unsigned char *SHA1(const unsigned char *d, size_t n, unsigned char *md);
-void SHA1_Transform(SHA_CTX *c, const unsigned char *data);
+int __cdecl SHA1_Init(SHA_CTX *c);
+int __cdecl SHA1_Update(SHA_CTX *c, const void *data, size_t len);
+int __cdecl SHA1_Final(unsigned char *md, SHA_CTX *c);
+unsigned char * __cdecl SHA1(const unsigned char *d, size_t n, unsigned char *md);
+void __cdecl SHA1_Transform(SHA_CTX *c, const unsigned char *data);
 
 # define SHA256_CBLOCK   (SHA_LBLOCK*4)/* SHA-256 treats input data as a
                                         * contiguous array of 32 bit wide
@@ -55,15 +55,15 @@ typedef struct SHA256state_st {
     unsigned int num, md_len;
 } SHA256_CTX;
 
-int SHA224_Init(SHA256_CTX *c);
-int SHA224_Update(SHA256_CTX *c, const void *data, size_t len);
-int SHA224_Final(unsigned char *md, SHA256_CTX *c);
-unsigned char *SHA224(const unsigned char *d, size_t n, unsigned char *md);
-int SHA256_Init(SHA256_CTX *c);
-int SHA256_Update(SHA256_CTX *c, const void *data, size_t len);
-int SHA256_Final(unsigned char *md, SHA256_CTX *c);
-unsigned char *SHA256(const unsigned char *d, size_t n, unsigned char *md);
-void SHA256_Transform(SHA256_CTX *c, const unsigned char *data);
+int __cdecl SHA224_Init(SHA256_CTX *c);
+int __cdecl SHA224_Update(SHA256_CTX *c, const void *data, size_t len);
+int __cdecl SHA224_Final(unsigned char *md, SHA256_CTX *c);
+unsigned char * __cdecl SHA224(const unsigned char *d, size_t n, unsigned char *md);
+int __cdecl SHA256_Init(SHA256_CTX *c);
+int __cdecl SHA256_Update(SHA256_CTX *c, const void *data, size_t len);
+int __cdecl SHA256_Final(unsigned char *md, SHA256_CTX *c);
+unsigned char * __cdecl SHA256(const unsigned char *d, size_t n, unsigned char *md);
+void __cdecl SHA256_Transform(SHA256_CTX *c, const unsigned char *data);
 
 # define SHA224_DIGEST_LENGTH    28
 # define SHA256_DIGEST_LENGTH    32
@@ -102,15 +102,15 @@ typedef struct SHA512state_st {
     unsigned int num, md_len;
 } SHA512_CTX;
 
-int SHA384_Init(SHA512_CTX *c);
-int SHA384_Update(SHA512_CTX *c, const void *data, size_t len);
-int SHA384_Final(unsigned char *md, SHA512_CTX *c);
-unsigned char *SHA384(const unsigned char *d, size_t n, unsigned char *md);
-int SHA512_Init(SHA512_CTX *c);
-int SHA512_Update(SHA512_CTX *c, const void *data, size_t len);
-int SHA512_Final(unsigned char *md, SHA512_CTX *c);
-unsigned char *SHA512(const unsigned char *d, size_t n, unsigned char *md);
-void SHA512_Transform(SHA512_CTX *c, const unsigned char *data);
+int __cdecl SHA384_Init(SHA512_CTX *c);
+int __cdecl SHA384_Update(SHA512_CTX *c, const void *data, size_t len);
+int __cdecl SHA384_Final(unsigned char *md, SHA512_CTX *c);
+unsigned char * __cdecl SHA384(const unsigned char *d, size_t n, unsigned char *md);
+int __cdecl SHA512_Init(SHA512_CTX *c);
+int __cdecl SHA512_Update(SHA512_CTX *c, const void *data, size_t len);
+int __cdecl SHA512_Final(unsigned char *md, SHA512_CTX *c);
+unsigned char * __cdecl SHA512(const unsigned char *d, size_t n, unsigned char *md);
+void __cdecl SHA512_Transform(SHA512_CTX *c, const unsigned char *data);
 
 #ifdef  __cplusplus
 }
diff --git a/include/openssl/srp.h b/include/openssl/srp.h
index aaf13558e3..b5c32dd5e7 100644
--- a/include/openssl/srp.h
+++ b/include/openssl/srp.h
@@ -47,7 +47,7 @@ typedef struct SRP_user_pwd_st {
     char *info;
 } SRP_user_pwd;
 
-void SRP_user_pwd_free(SRP_user_pwd *user_pwd);
+void __cdecl SRP_user_pwd_free(SRP_user_pwd *user_pwd);
 
 DEFINE_STACK_OF(SRP_user_pwd)
 
@@ -71,18 +71,18 @@ typedef struct SRP_gN_st {
 
 DEFINE_STACK_OF(SRP_gN)
 
-SRP_VBASE *SRP_VBASE_new(char *seed_key);
-void SRP_VBASE_free(SRP_VBASE *vb);
-int SRP_VBASE_init(SRP_VBASE *vb, char *verifier_file);
+SRP_VBASE * __cdecl SRP_VBASE_new(char *seed_key);
+void __cdecl SRP_VBASE_free(SRP_VBASE *vb);
+int __cdecl SRP_VBASE_init(SRP_VBASE *vb, char *verifier_file);
 
 /* This method ignores the configured seed and fails for an unknown user. */
 DEPRECATEDIN_1_1_0(SRP_user_pwd *SRP_VBASE_get_by_user(SRP_VBASE *vb, char *username))
 /* NOTE: unlike in SRP_VBASE_get_by_user, caller owns the returned pointer.*/
-SRP_user_pwd *SRP_VBASE_get1_by_user(SRP_VBASE *vb, char *username);
+SRP_user_pwd * __cdecl SRP_VBASE_get1_by_user(SRP_VBASE *vb, char *username);
 
-char *SRP_create_verifier(const char *user, const char *pass, char **salt,
+char * __cdecl SRP_create_verifier(const char *user, const char *pass, char **salt,
                           char **verifier, const char *N, const char *g);
-int SRP_create_verifier_BN(const char *user, const char *pass, BIGNUM **salt,
+int __cdecl SRP_create_verifier_BN(const char *user, const char *pass, BIGNUM **salt,
                            BIGNUM **verifier, const BIGNUM *N,
                            const BIGNUM *g);
 
@@ -107,21 +107,21 @@ int SRP_create_verifier_BN(const char *user, const char *pass, BIGNUM **salt,
 # define DB_SRP_MODIF    'v'
 
 /* see srp.c */
-char *SRP_check_known_gN_param(const BIGNUM *g, const BIGNUM *N);
-SRP_gN *SRP_get_default_gN(const char *id);
+char * __cdecl SRP_check_known_gN_param(const BIGNUM *g, const BIGNUM *N);
+SRP_gN * __cdecl SRP_get_default_gN(const char *id);
 
 /* server side .... */
-BIGNUM *SRP_Calc_server_key(const BIGNUM *A, const BIGNUM *v, const BIGNUM *u,
+BIGNUM * __cdecl SRP_Calc_server_key(const BIGNUM *A, const BIGNUM *v, const BIGNUM *u,
                             const BIGNUM *b, const BIGNUM *N);
-BIGNUM *SRP_Calc_B(const BIGNUM *b, const BIGNUM *N, const BIGNUM *g,
+BIGNUM * __cdecl SRP_Calc_B(const BIGNUM *b, const BIGNUM *N, const BIGNUM *g,
                    const BIGNUM *v);
-int SRP_Verify_A_mod_N(const BIGNUM *A, const BIGNUM *N);
-BIGNUM *SRP_Calc_u(const BIGNUM *A, const BIGNUM *B, const BIGNUM *N);
+int __cdecl SRP_Verify_A_mod_N(const BIGNUM *A, const BIGNUM *N);
+BIGNUM * __cdecl SRP_Calc_u(const BIGNUM *A, const BIGNUM *B, const BIGNUM *N);
 
 /* client side .... */
-BIGNUM *SRP_Calc_x(const BIGNUM *s, const char *user, const char *pass);
-BIGNUM *SRP_Calc_A(const BIGNUM *a, const BIGNUM *N, const BIGNUM *g);
-BIGNUM *SRP_Calc_client_key(const BIGNUM *N, const BIGNUM *B, const BIGNUM *g,
+BIGNUM * __cdecl SRP_Calc_x(const BIGNUM *s, const char *user, const char *pass);
+BIGNUM * __cdecl SRP_Calc_A(const BIGNUM *a, const BIGNUM *N, const BIGNUM *g);
+BIGNUM * __cdecl SRP_Calc_client_key(const BIGNUM *N, const BIGNUM *B, const BIGNUM *g,
                             const BIGNUM *x, const BIGNUM *a, const BIGNUM *u);
 int SRP_Verify_B_mod_N(const BIGNUM *B, const BIGNUM *N);
 
diff --git a/include/openssl/srtp.h b/include/openssl/srtp.h
index 0b57c2356c..6bad149e05 100644
--- a/include/openssl/srtp.h
+++ b/include/openssl/srtp.h
@@ -35,11 +35,11 @@ extern "C" {
 
 # ifndef OPENSSL_NO_SRTP
 
-__owur int SSL_CTX_set_tlsext_use_srtp(SSL_CTX *ctx, const char *profiles);
-__owur int SSL_set_tlsext_use_srtp(SSL *ssl, const char *profiles);
+__owur int __cdecl SSL_CTX_set_tlsext_use_srtp(SSL_CTX *ctx, const char *profiles);
+__owur int __cdecl SSL_set_tlsext_use_srtp(SSL *ssl, const char *profiles);
 
-__owur STACK_OF(SRTP_PROTECTION_PROFILE) *SSL_get_srtp_profiles(SSL *ssl);
-__owur SRTP_PROTECTION_PROFILE *SSL_get_selected_srtp_profile(SSL *s);
+__owur STACK_OF(SRTP_PROTECTION_PROFILE) * __cdecl SSL_get_srtp_profiles(SSL *ssl);
+__owur SRTP_PROTECTION_PROFILE * __cdecl SSL_get_selected_srtp_profile(SSL *s);
 
 # endif
 
diff --git a/include/openssl/ssl.h b/include/openssl/ssl.h
index 6724ccf2d2..c897ffebb0 100644
--- a/include/openssl/ssl.h
+++ b/include/openssl/ssl.h
@@ -226,9 +226,9 @@ typedef struct srtp_protection_profile_st {
 
 DEFINE_STACK_OF(SRTP_PROTECTION_PROFILE)
 
-typedef int (*tls_session_ticket_ext_cb_fn)(SSL *s, const unsigned char *data,
+typedef int (__cdecl *tls_session_ticket_ext_cb_fn)(SSL *s, const unsigned char *data,
                                             int len, void *arg);
-typedef int (*tls_session_secret_cb_fn)(SSL *s, void *secret, int *secret_len,
+typedef int (__cdecl *tls_session_secret_cb_fn)(SSL *s, void *secret, int *secret_len,
                                         STACK_OF(SSL_CIPHER) *peer_ciphers,
                                         const SSL_CIPHER **cipher, void *arg);
 
@@ -259,31 +259,31 @@ typedef int (*tls_session_secret_cb_fn)(SSL *s, void *secret, int *secret_len,
 
 /* Typedefs for handling custom extensions */
 
-typedef int (*custom_ext_add_cb)(SSL *s, unsigned int ext_type,
+typedef int (__cdecl *custom_ext_add_cb)(SSL *s, unsigned int ext_type,
                                  const unsigned char **out, size_t *outlen,
                                  int *al, void *add_arg);
 
-typedef void (*custom_ext_free_cb)(SSL *s, unsigned int ext_type,
+typedef void (__cdecl *custom_ext_free_cb)(SSL *s, unsigned int ext_type,
                                    const unsigned char *out, void *add_arg);
 
-typedef int (*custom_ext_parse_cb)(SSL *s, unsigned int ext_type,
+typedef int (__cdecl *custom_ext_parse_cb)(SSL *s, unsigned int ext_type,
                                    const unsigned char *in, size_t inlen,
                                    int *al, void *parse_arg);
 
 
-typedef int (*SSL_custom_ext_add_cb_ex)(SSL *s, unsigned int ext_type,
+typedef int (__cdecl *SSL_custom_ext_add_cb_ex)(SSL *s, unsigned int ext_type,
                                         unsigned int context,
                                         const unsigned char **out,
                                         size_t *outlen, X509 *x,
                                         size_t chainidx,
                                         int *al, void *add_arg);
 
-typedef void (*SSL_custom_ext_free_cb_ex)(SSL *s, unsigned int ext_type,
+typedef void (__cdecl *SSL_custom_ext_free_cb_ex)(SSL *s, unsigned int ext_type,
                                           unsigned int context,
                                           const unsigned char *out,
                                           void *add_arg);
 
-typedef int (*SSL_custom_ext_parse_cb_ex)(SSL *s, unsigned int ext_type,
+typedef int (__cdecl *SSL_custom_ext_parse_cb_ex)(SSL *s, unsigned int ext_type,
                                           unsigned int context,
                                           const unsigned char *in,
                                           size_t inlen, X509 *x,
@@ -580,12 +580,12 @@ typedef int (*SSL_verify_cb)(int preverify_ok, X509_STORE_CTX *x509_ctx);
  * cannot be used to clear bits.
  */
 
-unsigned long SSL_CTX_get_options(const SSL_CTX *ctx);
-unsigned long SSL_get_options(const SSL *s);
-unsigned long SSL_CTX_clear_options(SSL_CTX *ctx, unsigned long op);
-unsigned long SSL_clear_options(SSL *s, unsigned long op);
-unsigned long SSL_CTX_set_options(SSL_CTX *ctx, unsigned long op);
-unsigned long SSL_set_options(SSL *s, unsigned long op);
+unsigned long __cdecl SSL_CTX_get_options(const SSL_CTX *ctx);
+unsigned long __cdecl SSL_get_options(const SSL *s);
+unsigned long __cdecl SSL_CTX_clear_options(SSL_CTX *ctx, unsigned long op);
+unsigned long __cdecl SSL_clear_options(SSL *s, unsigned long op);
+unsigned long __cdecl SSL_CTX_set_options(SSL_CTX *ctx, unsigned long op);
+unsigned long __cdecl SSL_set_options(SSL *s, unsigned long op);
 
 # define SSL_CTX_set_mode(ctx,op) \
         SSL_CTX_ctrl((ctx),SSL_CTRL_MODE,(op),NULL)
@@ -623,12 +623,12 @@ unsigned long SSL_set_options(SSL *s, unsigned long op);
 # define SSL_clear_cert_flags(s,op) \
         SSL_ctrl((s),SSL_CTRL_CLEAR_CERT_FLAGS,(op),NULL)
 
-void SSL_CTX_set_msg_callback(SSL_CTX *ctx,
-                              void (*cb) (int write_p, int version,
+void __cdecl SSL_CTX_set_msg_callback(SSL_CTX *ctx,
+                              void (__cdecl *cb) (int write_p, int version,
                                           int content_type, const void *buf,
                                           size_t len, SSL *ssl, void *arg));
-void SSL_set_msg_callback(SSL *ssl,
-                          void (*cb) (int write_p, int version,
+void __cdecl SSL_set_msg_callback(SSL *ssl,
+                          void (__cdecl *cb) (int write_p, int version,
                                       int content_type, const void *buf,
                                       size_t len, SSL *ssl, void *arg));
 # define SSL_CTX_set_msg_callback_arg(ctx, arg) SSL_CTX_ctrl((ctx), SSL_CTRL_SET_MSG_CALLBACK_ARG, 0, (arg))
@@ -640,12 +640,12 @@ void SSL_set_msg_callback(SSL *ssl,
 # ifndef OPENSSL_NO_SRP
 
 /* see tls_srp.c */
-__owur int SSL_SRP_CTX_init(SSL *s);
-__owur int SSL_CTX_SRP_CTX_init(SSL_CTX *ctx);
-int SSL_SRP_CTX_free(SSL *ctx);
-int SSL_CTX_SRP_CTX_free(SSL_CTX *ctx);
-__owur int SSL_srp_server_param_with_username(SSL *s, int *ad);
-__owur int SRP_Calc_A_param(SSL *s);
+__owur int __cdecl SSL_SRP_CTX_init(SSL *s);
+__owur int __cdecl SSL_CTX_SRP_CTX_init(SSL_CTX *ctx);
+int __cdecl SSL_SRP_CTX_free(SSL *ctx);
+int __cdecl SSL_CTX_SRP_CTX_free(SSL_CTX *ctx);
+__owur int __cdecl SSL_srp_server_param_with_username(SSL *s, int *ad);
+__owur int __cdecl SRP_Calc_A_param(SSL *s);
 
 # endif
 
@@ -666,7 +666,7 @@ __owur int SRP_Calc_A_param(SSL *s);
  * bytes. The callback can alter this length to be less if desired. It is
  * also an error for the callback to set the size to zero.
  */
-typedef int (*GEN_SESSION_CB) (SSL *ssl, unsigned char *id,
+typedef int (__cdecl *GEN_SESSION_CB) (SSL *ssl, unsigned char *id,
                                unsigned int *id_len);
 
 # define SSL_SESS_CACHE_OFF                      0x0000
@@ -706,89 +706,89 @@ LHASH_OF(SSL_SESSION) *SSL_CTX_sessions(SSL_CTX *ctx);
 # define SSL_CTX_sess_cache_full(ctx) \
         SSL_CTX_ctrl(ctx,SSL_CTRL_SESS_CACHE_FULL,0,NULL)
 
-void SSL_CTX_sess_set_new_cb(SSL_CTX *ctx,
-                             int (*new_session_cb) (struct ssl_st *ssl,
+void __cdecl SSL_CTX_sess_set_new_cb(SSL_CTX *ctx,
+                             int (__cdecl *new_session_cb) (struct ssl_st *ssl,
                                                     SSL_SESSION *sess));
-int (*SSL_CTX_sess_get_new_cb(SSL_CTX *ctx)) (struct ssl_st *ssl,
+int (__cdecl *SSL_CTX_sess_get_new_cb(SSL_CTX *ctx)) (struct ssl_st *ssl,
                                               SSL_SESSION *sess);
-void SSL_CTX_sess_set_remove_cb(SSL_CTX *ctx,
-                                void (*remove_session_cb) (struct ssl_ctx_st
+void __cdecl SSL_CTX_sess_set_remove_cb(SSL_CTX *ctx,
+                                void (__cdecl *remove_session_cb) (struct ssl_ctx_st
                                                            *ctx,
                                                            SSL_SESSION *sess));
-void (*SSL_CTX_sess_get_remove_cb(SSL_CTX *ctx)) (struct ssl_ctx_st *ctx,
+void (__cdecl *SSL_CTX_sess_get_remove_cb(SSL_CTX *ctx)) (struct ssl_ctx_st *ctx,
                                                   SSL_SESSION *sess);
-void SSL_CTX_sess_set_get_cb(SSL_CTX *ctx,
-                             SSL_SESSION *(*get_session_cb) (struct ssl_st
+void __cdecl SSL_CTX_sess_set_get_cb(SSL_CTX *ctx,
+                             SSL_SESSION *(__cdecl *get_session_cb) (struct ssl_st
                                                              *ssl,
                                                              const unsigned char
                                                              *data, int len,
                                                              int *copy));
-SSL_SESSION *(*SSL_CTX_sess_get_get_cb(SSL_CTX *ctx)) (struct ssl_st *ssl,
+SSL_SESSION *(__cdecl *SSL_CTX_sess_get_get_cb(SSL_CTX *ctx)) (struct ssl_st *ssl,
                                                        const unsigned char *data,
                                                        int len, int *copy);
-void SSL_CTX_set_info_callback(SSL_CTX *ctx,
-                               void (*cb) (const SSL *ssl, int type, int val));
-void (*SSL_CTX_get_info_callback(SSL_CTX *ctx)) (const SSL *ssl, int type,
+void __cdecl SSL_CTX_set_info_callback(SSL_CTX *ctx,
+                               void (__cdecl *cb) (const SSL *ssl, int type, int val));
+void (__cdecl *SSL_CTX_get_info_callback(SSL_CTX *ctx)) (const SSL *ssl, int type,
                                                  int val);
-void SSL_CTX_set_client_cert_cb(SSL_CTX *ctx,
-                                int (*client_cert_cb) (SSL *ssl, X509 **x509,
+void __cdecl SSL_CTX_set_client_cert_cb(SSL_CTX *ctx,
+                                int (__cdecl *client_cert_cb) (SSL *ssl, X509 **x509,
                                                        EVP_PKEY **pkey));
-int (*SSL_CTX_get_client_cert_cb(SSL_CTX *ctx)) (SSL *ssl, X509 **x509,
+int (__cdecl *SSL_CTX_get_client_cert_cb(SSL_CTX *ctx)) (SSL *ssl, X509 **x509,
                                                  EVP_PKEY **pkey);
 # ifndef OPENSSL_NO_ENGINE
-__owur int SSL_CTX_set_client_cert_engine(SSL_CTX *ctx, ENGINE *e);
+__owur int __cdecl SSL_CTX_set_client_cert_engine(SSL_CTX *ctx, ENGINE *e);
 # endif
-void SSL_CTX_set_cookie_generate_cb(SSL_CTX *ctx,
-                                    int (*app_gen_cookie_cb) (SSL *ssl,
+void __cdecl SSL_CTX_set_cookie_generate_cb(SSL_CTX *ctx,
+                                    int (__cdecl *app_gen_cookie_cb) (SSL *ssl,
                                                               unsigned char
                                                               *cookie,
                                                               unsigned int
                                                               *cookie_len));
-void SSL_CTX_set_cookie_verify_cb(SSL_CTX *ctx,
-                                  int (*app_verify_cookie_cb) (SSL *ssl,
+void __cdecl SSL_CTX_set_cookie_verify_cb(SSL_CTX *ctx,
+                                  int (__cdecl *app_verify_cookie_cb) (SSL *ssl,
                                                                const unsigned
                                                                char *cookie,
                                                                unsigned int
                                                                cookie_len));
 
-void SSL_CTX_set_stateless_cookie_generate_cb(
+void __cdecl SSL_CTX_set_stateless_cookie_generate_cb(
     SSL_CTX *ctx,
-    int (*gen_stateless_cookie_cb) (SSL *ssl,
+    int (__cdecl *gen_stateless_cookie_cb) (SSL *ssl,
                                     unsigned char *cookie,
                                     size_t *cookie_len));
-void SSL_CTX_set_stateless_cookie_verify_cb(
+void __cdecl SSL_CTX_set_stateless_cookie_verify_cb(
     SSL_CTX *ctx,
-    int (*verify_stateless_cookie_cb) (SSL *ssl,
+    int (__cdecl *verify_stateless_cookie_cb) (SSL *ssl,
                                        const unsigned char *cookie,
                                        size_t cookie_len));
 # ifndef OPENSSL_NO_NEXTPROTONEG
 
-typedef int (*SSL_CTX_npn_advertised_cb_func)(SSL *ssl,
+typedef int (__cdecl *SSL_CTX_npn_advertised_cb_func)(SSL *ssl,
                                               const unsigned char **out,
                                               unsigned int *outlen,
                                               void *arg);
-void SSL_CTX_set_next_protos_advertised_cb(SSL_CTX *s,
+void __cdecl SSL_CTX_set_next_protos_advertised_cb(SSL_CTX *s,
                                            SSL_CTX_npn_advertised_cb_func cb,
                                            void *arg);
 #  define SSL_CTX_set_npn_advertised_cb SSL_CTX_set_next_protos_advertised_cb
 
-typedef int (*SSL_CTX_npn_select_cb_func)(SSL *s,
+typedef int (__cdecl *SSL_CTX_npn_select_cb_func)(SSL *s,
                                           unsigned char **out,
                                           unsigned char *outlen,
                                           const unsigned char *in,
                                           unsigned int inlen,
                                           void *arg);
-void SSL_CTX_set_next_proto_select_cb(SSL_CTX *s,
+void __cdecl SSL_CTX_set_next_proto_select_cb(SSL_CTX *s,
                                       SSL_CTX_npn_select_cb_func cb,
                                       void *arg);
 #  define SSL_CTX_set_npn_select_cb SSL_CTX_set_next_proto_select_cb
 
-void SSL_get0_next_proto_negotiated(const SSL *s, const unsigned char **data,
+void __cdecl SSL_get0_next_proto_negotiated(const SSL *s, const unsigned char **data,
                                     unsigned *len);
 #  define SSL_get0_npn_negotiated SSL_get0_next_proto_negotiated
 # endif
 
-__owur int SSL_select_next_proto(unsigned char **out, unsigned char *outlen,
+__owur int __cdecl SSL_select_next_proto(unsigned char **out, unsigned char *outlen,
                                  const unsigned char *in, unsigned int inlen,
                                  const unsigned char *client,
                                  unsigned int client_len);
@@ -797,20 +797,20 @@ __owur int SSL_select_next_proto(unsigned char **out, unsigned char *outlen,
 # define OPENSSL_NPN_NEGOTIATED  1
 # define OPENSSL_NPN_NO_OVERLAP  2
 
-__owur int SSL_CTX_set_alpn_protos(SSL_CTX *ctx, const unsigned char *protos,
+__owur int __cdecl SSL_CTX_set_alpn_protos(SSL_CTX *ctx, const unsigned char *protos,
                                    unsigned int protos_len);
-__owur int SSL_set_alpn_protos(SSL *ssl, const unsigned char *protos,
+__owur int __cdecl SSL_set_alpn_protos(SSL *ssl, const unsigned char *protos,
                                unsigned int protos_len);
-typedef int (*SSL_CTX_alpn_select_cb_func)(SSL *ssl,
+typedef int (__cdecl *SSL_CTX_alpn_select_cb_func)(SSL *ssl,
                                            const unsigned char **out,
                                            unsigned char *outlen,
                                            const unsigned char *in,
                                            unsigned int inlen,
                                            void *arg);
-void SSL_CTX_set_alpn_select_cb(SSL_CTX *ctx,
+void __cdecl SSL_CTX_set_alpn_select_cb(SSL_CTX *ctx,
                                 SSL_CTX_alpn_select_cb_func cb,
                                 void *arg);
-void SSL_get0_alpn_selected(const SSL *ssl, const unsigned char **data,
+void __cdecl SSL_get0_alpn_selected(const SSL *ssl, const unsigned char **data,
                             unsigned int *len);
 
 # ifndef OPENSSL_NO_PSK
@@ -820,50 +820,50 @@ void SSL_get0_alpn_selected(const SSL *ssl, const unsigned char **data,
  */
 #  define PSK_MAX_IDENTITY_LEN 128
 #  define PSK_MAX_PSK_LEN 256
-typedef unsigned int (*SSL_psk_client_cb_func)(SSL *ssl,
+typedef unsigned int (__cdecl *SSL_psk_client_cb_func)(SSL *ssl,
                                                const char *hint,
                                                char *identity,
                                                unsigned int max_identity_len,
                                                unsigned char *psk,
                                                unsigned int max_psk_len);
-void SSL_CTX_set_psk_client_callback(SSL_CTX *ctx, SSL_psk_client_cb_func cb);
-void SSL_set_psk_client_callback(SSL *ssl, SSL_psk_client_cb_func cb);
+void __cdecl SSL_CTX_set_psk_client_callback(SSL_CTX *ctx, SSL_psk_client_cb_func cb);
+void __cdecl SSL_set_psk_client_callback(SSL *ssl, SSL_psk_client_cb_func cb);
 
-typedef unsigned int (*SSL_psk_server_cb_func)(SSL *ssl,
+typedef unsigned int (__cdecl *SSL_psk_server_cb_func)(SSL *ssl,
                                                const char *identity,
                                                unsigned char *psk,
                                                unsigned int max_psk_len);
-void SSL_CTX_set_psk_server_callback(SSL_CTX *ctx, SSL_psk_server_cb_func cb);
-void SSL_set_psk_server_callback(SSL *ssl, SSL_psk_server_cb_func cb);
+void __cdecl SSL_CTX_set_psk_server_callback(SSL_CTX *ctx, SSL_psk_server_cb_func cb);
+void __cdecl SSL_set_psk_server_callback(SSL *ssl, SSL_psk_server_cb_func cb);
 
-__owur int SSL_CTX_use_psk_identity_hint(SSL_CTX *ctx, const char *identity_hint);
-__owur int SSL_use_psk_identity_hint(SSL *s, const char *identity_hint);
-const char *SSL_get_psk_identity_hint(const SSL *s);
-const char *SSL_get_psk_identity(const SSL *s);
+__owur int __cdecl SSL_CTX_use_psk_identity_hint(SSL_CTX *ctx, const char *identity_hint);
+__owur int __cdecl SSL_use_psk_identity_hint(SSL *s, const char *identity_hint);
+const char * __cdecl SSL_get_psk_identity_hint(const SSL *s);
+const char * __cdecl SSL_get_psk_identity(const SSL *s);
 # endif
 
-typedef int (*SSL_psk_find_session_cb_func)(SSL *ssl,
+typedef int (__cdecl *SSL_psk_find_session_cb_func)(SSL *ssl,
                                             const unsigned char *identity,
                                             size_t identity_len,
                                             SSL_SESSION **sess);
-typedef int (*SSL_psk_use_session_cb_func)(SSL *ssl, const EVP_MD *md,
+typedef int (__cdecl *SSL_psk_use_session_cb_func)(SSL *ssl, const EVP_MD *md,
                                            const unsigned char **id,
                                            size_t *idlen,
                                            SSL_SESSION **sess);
 
-void SSL_set_psk_find_session_callback(SSL *s, SSL_psk_find_session_cb_func cb);
-void SSL_CTX_set_psk_find_session_callback(SSL_CTX *ctx,
+void __cdecl SSL_set_psk_find_session_callback(SSL *s, SSL_psk_find_session_cb_func cb);
+void __cdecl SSL_CTX_set_psk_find_session_callback(SSL_CTX *ctx,
                                            SSL_psk_find_session_cb_func cb);
-void SSL_set_psk_use_session_callback(SSL *s, SSL_psk_use_session_cb_func cb);
-void SSL_CTX_set_psk_use_session_callback(SSL_CTX *ctx,
+void __cdecl SSL_set_psk_use_session_callback(SSL *s, SSL_psk_use_session_cb_func cb);
+void __cdecl SSL_CTX_set_psk_use_session_callback(SSL_CTX *ctx,
                                           SSL_psk_use_session_cb_func cb);
 
 /* Register callbacks to handle custom TLS Extensions for client or server. */
 
-__owur int SSL_CTX_has_client_custom_ext(const SSL_CTX *ctx,
+__owur int __cdecl SSL_CTX_has_client_custom_ext(const SSL_CTX *ctx,
                                          unsigned int ext_type);
 
-__owur int SSL_CTX_add_client_custom_ext(SSL_CTX *ctx,
+__owur int __cdecl SSL_CTX_add_client_custom_ext(SSL_CTX *ctx,
                                          unsigned int ext_type,
                                          custom_ext_add_cb add_cb,
                                          custom_ext_free_cb free_cb,
@@ -871,7 +871,7 @@ __owur int SSL_CTX_add_client_custom_ext(SSL_CTX *ctx,
                                          custom_ext_parse_cb parse_cb,
                                          void *parse_arg);
 
-__owur int SSL_CTX_add_server_custom_ext(SSL_CTX *ctx,
+__owur int __cdecl SSL_CTX_add_server_custom_ext(SSL_CTX *ctx,
                                          unsigned int ext_type,
                                          custom_ext_add_cb add_cb,
                                          custom_ext_free_cb free_cb,
@@ -879,7 +879,7 @@ __owur int SSL_CTX_add_server_custom_ext(SSL_CTX *ctx,
                                          custom_ext_parse_cb parse_cb,
                                          void *parse_arg);
 
-__owur int SSL_CTX_add_custom_ext(SSL_CTX *ctx, unsigned int ext_type,
+__owur int __cdecl SSL_CTX_add_custom_ext(SSL_CTX *ctx, unsigned int ext_type,
                                   unsigned int context,
                                   SSL_custom_ext_add_cb_ex add_cb,
                                   SSL_custom_ext_free_cb_ex free_cb,
@@ -887,7 +887,7 @@ __owur int SSL_CTX_add_custom_ext(SSL_CTX *ctx, unsigned int ext_type,
                                   SSL_custom_ext_parse_cb_ex parse_cb,
                                   void *parse_arg);
 
-__owur int SSL_extension_supported(unsigned int ext_type);
+__owur int __cdecl SSL_extension_supported(unsigned int ext_type);
 
 # define SSL_NOTHING            1
 # define SSL_WRITING            2
@@ -913,29 +913,29 @@ __owur int SSL_extension_supported(unsigned int ext_type);
  * A callback for logging out TLS key material. This callback should log out
  * |line| followed by a newline.
  */
-typedef void (*SSL_CTX_keylog_cb_func)(const SSL *ssl, const char *line);
+typedef void (__cdecl *SSL_CTX_keylog_cb_func)(const SSL *ssl, const char *line);
 
 /*
  * SSL_CTX_set_keylog_callback configures a callback to log key material. This
  * is intended for debugging use with tools like Wireshark. The cb function
  * should log line followed by a newline.
  */
-void SSL_CTX_set_keylog_callback(SSL_CTX *ctx, SSL_CTX_keylog_cb_func cb);
+void __cdecl SSL_CTX_set_keylog_callback(SSL_CTX *ctx, SSL_CTX_keylog_cb_func cb);
 
 /*
  * SSL_CTX_get_keylog_callback returns the callback configured by
  * SSL_CTX_set_keylog_callback.
  */
-SSL_CTX_keylog_cb_func SSL_CTX_get_keylog_callback(const SSL_CTX *ctx);
+SSL_CTX_keylog_cb_func __cdecl SSL_CTX_get_keylog_callback(const SSL_CTX *ctx);
 
-int SSL_CTX_set_max_early_data(SSL_CTX *ctx, uint32_t max_early_data);
-uint32_t SSL_CTX_get_max_early_data(const SSL_CTX *ctx);
-int SSL_set_max_early_data(SSL *s, uint32_t max_early_data);
-uint32_t SSL_get_max_early_data(const SSL *s);
-int SSL_CTX_set_recv_max_early_data(SSL_CTX *ctx, uint32_t recv_max_early_data);
-uint32_t SSL_CTX_get_recv_max_early_data(const SSL_CTX *ctx);
-int SSL_set_recv_max_early_data(SSL *s, uint32_t recv_max_early_data);
-uint32_t SSL_get_recv_max_early_data(const SSL *s);
+int __cdecl SSL_CTX_set_max_early_data(SSL_CTX *ctx, uint32_t max_early_data);
+uint32_t __cdecl SSL_CTX_get_max_early_data(const SSL_CTX *ctx);
+int __cdecl SSL_set_max_early_data(SSL *s, uint32_t max_early_data);
+uint32_t __cdecl SSL_get_max_early_data(const SSL *s);
+int __cdecl SSL_CTX_set_recv_max_early_data(SSL_CTX *ctx, uint32_t recv_max_early_data);
+uint32_t __cdecl SSL_CTX_get_recv_max_early_data(const SSL_CTX *ctx);
+int __cdecl SSL_set_recv_max_early_data(SSL *s, uint32_t recv_max_early_data);
+uint32_t __cdecl SSL_get_recv_max_early_data(const SSL *s);
 
 #ifdef __cplusplus
 }
@@ -1071,9 +1071,9 @@ typedef enum {
 /* Is the SSL_connection established? */
 # define SSL_in_connect_init(a)          (SSL_in_init(a) && !SSL_is_server(a))
 # define SSL_in_accept_init(a)           (SSL_in_init(a) && SSL_is_server(a))
-int SSL_in_init(const SSL *s);
-int SSL_in_before(const SSL *s);
-int SSL_is_init_finished(const SSL *s);
+int __cdecl SSL_in_init(const SSL *s);
+int __cdecl SSL_in_before(const SSL *s);
+int __cdecl SSL_is_init_finished(const SSL *s);
 
 /*
  * The following 3 states are kept in ssl->rlayer.rstate when reads fail, you
@@ -1089,8 +1089,8 @@ int SSL_is_init_finished(const SSL *s);
  *   -- that we expected from peer (SSL_get_peer_finished).
  * Returns length (0 == no Finished so far), copies up to 'count' bytes.
  */
-size_t SSL_get_finished(const SSL *s, void *buf, size_t count);
-size_t SSL_get_peer_finished(const SSL *s, void *buf, size_t count);
+size_t __cdecl SSL_get_finished(const SSL *s, void *buf, size_t count);
+size_t __cdecl SSL_get_peer_finished(const SSL *s, void *buf, size_t count);
 
 /*
  * use either SSL_VERIFY_NONE or SSL_VERIFY_PEER, the last 3 options are
@@ -1492,80 +1492,80 @@ DECLARE_PEM_rw(SSL_SESSION, SSL_SESSION)
 #  define SSL_CTX_set_tmp_rsa_callback(ctx, cb)    while(0) (cb)(NULL, 0, 0)
 #  define SSL_set_tmp_rsa_callback(ssl, cb)        while(0) (cb)(NULL, 0, 0)
 # endif
-__owur const BIO_METHOD *BIO_f_ssl(void);
-__owur BIO *BIO_new_ssl(SSL_CTX *ctx, int client);
-__owur BIO *BIO_new_ssl_connect(SSL_CTX *ctx);
-__owur BIO *BIO_new_buffer_ssl_connect(SSL_CTX *ctx);
-__owur int BIO_ssl_copy_session_id(BIO *to, BIO *from);
-void BIO_ssl_shutdown(BIO *ssl_bio);
-
-__owur int SSL_CTX_set_cipher_list(SSL_CTX *, const char *str);
-__owur SSL_CTX *SSL_CTX_new(const SSL_METHOD *meth);
-int SSL_CTX_up_ref(SSL_CTX *ctx);
-void SSL_CTX_free(SSL_CTX *);
-__owur long SSL_CTX_set_timeout(SSL_CTX *ctx, long t);
-__owur long SSL_CTX_get_timeout(const SSL_CTX *ctx);
-__owur X509_STORE *SSL_CTX_get_cert_store(const SSL_CTX *);
-void SSL_CTX_set_cert_store(SSL_CTX *, X509_STORE *);
-void SSL_CTX_set1_cert_store(SSL_CTX *, X509_STORE *);
-__owur int SSL_want(const SSL *s);
-__owur int SSL_clear(SSL *s);
-
-void SSL_CTX_flush_sessions(SSL_CTX *ctx, long tm);
-
-__owur const SSL_CIPHER *SSL_get_current_cipher(const SSL *s);
-__owur const SSL_CIPHER *SSL_get_pending_cipher(const SSL *s);
-__owur int SSL_CIPHER_get_bits(const SSL_CIPHER *c, int *alg_bits);
-__owur const char *SSL_CIPHER_get_version(const SSL_CIPHER *c);
-__owur const char *SSL_CIPHER_get_name(const SSL_CIPHER *c);
-__owur const char *SSL_CIPHER_standard_name(const SSL_CIPHER *c);
-__owur const char *OPENSSL_cipher_name(const char *rfc_name);
-__owur uint32_t SSL_CIPHER_get_id(const SSL_CIPHER *c);
-__owur uint16_t SSL_CIPHER_get_protocol_id(const SSL_CIPHER *c);
-__owur int SSL_CIPHER_get_kx_nid(const SSL_CIPHER *c);
-__owur int SSL_CIPHER_get_auth_nid(const SSL_CIPHER *c);
-__owur const EVP_MD *SSL_CIPHER_get_handshake_digest(const SSL_CIPHER *c);
-__owur int SSL_CIPHER_is_aead(const SSL_CIPHER *c);
-
-__owur int SSL_get_fd(const SSL *s);
-__owur int SSL_get_rfd(const SSL *s);
-__owur int SSL_get_wfd(const SSL *s);
-__owur const char *SSL_get_cipher_list(const SSL *s, int n);
-__owur char *SSL_get_shared_ciphers(const SSL *s, char *buf, int size);
-__owur int SSL_get_read_ahead(const SSL *s);
-__owur int SSL_pending(const SSL *s);
-__owur int SSL_has_pending(const SSL *s);
+__owur const BIO_METHOD * __cdecl BIO_f_ssl(void);
+__owur BIO * __cdecl BIO_new_ssl(SSL_CTX *ctx, int client);
+__owur BIO * __cdecl BIO_new_ssl_connect(SSL_CTX *ctx);
+__owur BIO * __cdecl BIO_new_buffer_ssl_connect(SSL_CTX *ctx);
+__owur int __cdecl BIO_ssl_copy_session_id(BIO *to, BIO *from);
+void __cdecl BIO_ssl_shutdown(BIO *ssl_bio);
+
+__owur int __cdecl SSL_CTX_set_cipher_list(SSL_CTX *, const char *str);
+__owur SSL_CTX * __cdecl SSL_CTX_new(const SSL_METHOD *meth);
+int __cdecl SSL_CTX_up_ref(SSL_CTX *ctx);
+void __cdecl SSL_CTX_free(SSL_CTX *);
+__owur long __cdecl SSL_CTX_set_timeout(SSL_CTX *ctx, long t);
+__owur long __cdecl SSL_CTX_get_timeout(const SSL_CTX *ctx);
+__owur X509_STORE * __cdecl SSL_CTX_get_cert_store(const SSL_CTX *);
+void __cdecl SSL_CTX_set_cert_store(SSL_CTX *, X509_STORE *);
+void __cdecl SSL_CTX_set1_cert_store(SSL_CTX *, X509_STORE *);
+__owur int __cdecl SSL_want(const SSL *s);
+__owur int __cdecl SSL_clear(SSL *s);
+
+void __cdecl SSL_CTX_flush_sessions(SSL_CTX *ctx, long tm);
+
+__owur const SSL_CIPHER * __cdecl SSL_get_current_cipher(const SSL *s);
+__owur const SSL_CIPHER * __cdecl SSL_get_pending_cipher(const SSL *s);
+__owur int __cdecl SSL_CIPHER_get_bits(const SSL_CIPHER *c, int *alg_bits);
+__owur const char * __cdecl SSL_CIPHER_get_version(const SSL_CIPHER *c);
+__owur const char * __cdecl SSL_CIPHER_get_name(const SSL_CIPHER *c);
+__owur const char * __cdecl SSL_CIPHER_standard_name(const SSL_CIPHER *c);
+__owur const char * __cdecl OPENSSL_cipher_name(const char *rfc_name);
+__owur uint32_t __cdecl SSL_CIPHER_get_id(const SSL_CIPHER *c);
+__owur uint16_t __cdecl SSL_CIPHER_get_protocol_id(const SSL_CIPHER *c);
+__owur int __cdecl SSL_CIPHER_get_kx_nid(const SSL_CIPHER *c);
+__owur int __cdecl SSL_CIPHER_get_auth_nid(const SSL_CIPHER *c);
+__owur const EVP_MD * __cdecl SSL_CIPHER_get_handshake_digest(const SSL_CIPHER *c);
+__owur int __cdecl SSL_CIPHER_is_aead(const SSL_CIPHER *c);
+
+__owur int __cdecl SSL_get_fd(const SSL *s);
+__owur int __cdecl SSL_get_rfd(const SSL *s);
+__owur int __cdecl SSL_get_wfd(const SSL *s);
+__owur const char * __cdecl SSL_get_cipher_list(const SSL *s, int n);
+__owur char * __cdecl SSL_get_shared_ciphers(const SSL *s, char *buf, int size);
+__owur int __cdecl SSL_get_read_ahead(const SSL *s);
+__owur int __cdecl SSL_pending(const SSL *s);
+__owur int __cdecl SSL_has_pending(const SSL *s);
 # ifndef OPENSSL_NO_SOCK
-__owur int SSL_set_fd(SSL *s, int fd);
-__owur int SSL_set_rfd(SSL *s, int fd);
-__owur int SSL_set_wfd(SSL *s, int fd);
+__owur int __cdecl SSL_set_fd(SSL *s, int fd);
+__owur int __cdecl SSL_set_rfd(SSL *s, int fd);
+__owur int __cdecl SSL_set_wfd(SSL *s, int fd);
 # endif
-void SSL_set0_rbio(SSL *s, BIO *rbio);
-void SSL_set0_wbio(SSL *s, BIO *wbio);
-void SSL_set_bio(SSL *s, BIO *rbio, BIO *wbio);
-__owur BIO *SSL_get_rbio(const SSL *s);
-__owur BIO *SSL_get_wbio(const SSL *s);
-__owur int SSL_set_cipher_list(SSL *s, const char *str);
-__owur int SSL_CTX_set_ciphersuites(SSL_CTX *ctx, const char *str);
-__owur int SSL_set_ciphersuites(SSL *s, const char *str);
-void SSL_set_read_ahead(SSL *s, int yes);
-__owur int SSL_get_verify_mode(const SSL *s);
-__owur int SSL_get_verify_depth(const SSL *s);
+void __cdecl SSL_set0_rbio(SSL *s, BIO *rbio);
+void __cdecl SSL_set0_wbio(SSL *s, BIO *wbio);
+void __cdecl SSL_set_bio(SSL *s, BIO *rbio, BIO *wbio);
+__owur BIO * __cdecl SSL_get_rbio(const SSL *s);
+__owur BIO * __cdecl SSL_get_wbio(const SSL *s);
+__owur int __cdecl SSL_set_cipher_list(SSL *s, const char *str);
+__owur int __cdecl SSL_CTX_set_ciphersuites(SSL_CTX *ctx, const char *str);
+__owur int __cdecl SSL_set_ciphersuites(SSL *s, const char *str);
+void __cdecl SSL_set_read_ahead(SSL *s, int yes);
+__owur int __cdecl SSL_get_verify_mode(const SSL *s);
+__owur int __cdecl SSL_get_verify_depth(const SSL *s);
 __owur SSL_verify_cb SSL_get_verify_callback(const SSL *s);
-void SSL_set_verify(SSL *s, int mode, SSL_verify_cb callback);
-void SSL_set_verify_depth(SSL *s, int depth);
-void SSL_set_cert_cb(SSL *s, int (*cb) (SSL *ssl, void *arg), void *arg);
+void __cdecl SSL_set_verify(SSL *s, int mode, SSL_verify_cb callback);
+void __cdecl SSL_set_verify_depth(SSL *s, int depth);
+void __cdecl SSL_set_cert_cb(SSL *s, int (__cdecl *cb) (SSL *ssl, void *arg), void *arg);
 # ifndef OPENSSL_NO_RSA
-__owur int SSL_use_RSAPrivateKey(SSL *ssl, RSA *rsa);
-__owur int SSL_use_RSAPrivateKey_ASN1(SSL *ssl, const unsigned char *d,
+__owur int __cdecl SSL_use_RSAPrivateKey(SSL *ssl, RSA *rsa);
+__owur int __cdecl SSL_use_RSAPrivateKey_ASN1(SSL *ssl, const unsigned char *d,
                                       long len);
 # endif
-__owur int SSL_use_PrivateKey(SSL *ssl, EVP_PKEY *pkey);
-__owur int SSL_use_PrivateKey_ASN1(int pk, SSL *ssl, const unsigned char *d,
+__owur int __cdecl SSL_use_PrivateKey(SSL *ssl, EVP_PKEY *pkey);
+__owur int __cdecl SSL_use_PrivateKey_ASN1(int pk, SSL *ssl, const unsigned char *d,
                                    long len);
-__owur int SSL_use_certificate(SSL *ssl, X509 *x);
-__owur int SSL_use_certificate_ASN1(SSL *ssl, const unsigned char *d, int len);
-__owur int SSL_use_cert_and_key(SSL *ssl, X509 *x509, EVP_PKEY *privatekey,
+__owur int __cdecl SSL_use_certificate(SSL *ssl, X509 *x);
+__owur int __cdecl SSL_use_certificate_ASN1(SSL *ssl, const unsigned char *d, int len);
+__owur int __cdecl SSL_use_cert_and_key(SSL *ssl, X509 *x509, EVP_PKEY *privatekey,
                                 STACK_OF(X509) *chain, int override);
 
 
@@ -1574,35 +1574,35 @@ __owur int SSL_use_cert_and_key(SSL *ssl, X509 *x509, EVP_PKEY *privatekey,
 # define SSL_SERVERINFOV2   2
 
 /* Set serverinfo data for the current active cert. */
-__owur int SSL_CTX_use_serverinfo(SSL_CTX *ctx, const unsigned char *serverinfo,
+__owur int __cdecl SSL_CTX_use_serverinfo(SSL_CTX *ctx, const unsigned char *serverinfo,
                                   size_t serverinfo_length);
-__owur int SSL_CTX_use_serverinfo_ex(SSL_CTX *ctx, unsigned int version,
+__owur int __cdecl SSL_CTX_use_serverinfo_ex(SSL_CTX *ctx, unsigned int version,
                                      const unsigned char *serverinfo,
                                      size_t serverinfo_length);
-__owur int SSL_CTX_use_serverinfo_file(SSL_CTX *ctx, const char *file);
+__owur int __cdecl SSL_CTX_use_serverinfo_file(SSL_CTX *ctx, const char *file);
 
 #ifndef OPENSSL_NO_RSA
-__owur int SSL_use_RSAPrivateKey_file(SSL *ssl, const char *file, int type);
+__owur int __cdecl SSL_use_RSAPrivateKey_file(SSL *ssl, const char *file, int type);
 #endif
 
-__owur int SSL_use_PrivateKey_file(SSL *ssl, const char *file, int type);
-__owur int SSL_use_certificate_file(SSL *ssl, const char *file, int type);
+__owur int __cdecl SSL_use_PrivateKey_file(SSL *ssl, const char *file, int type);
+__owur int __cdecl SSL_use_certificate_file(SSL *ssl, const char *file, int type);
 
 #ifndef OPENSSL_NO_RSA
-__owur int SSL_CTX_use_RSAPrivateKey_file(SSL_CTX *ctx, const char *file,
+__owur int __cdecl SSL_CTX_use_RSAPrivateKey_file(SSL_CTX *ctx, const char *file,
                                           int type);
 #endif
-__owur int SSL_CTX_use_PrivateKey_file(SSL_CTX *ctx, const char *file,
+__owur int __cdecl SSL_CTX_use_PrivateKey_file(SSL_CTX *ctx, const char *file,
                                        int type);
-__owur int SSL_CTX_use_certificate_file(SSL_CTX *ctx, const char *file,
+__owur int __cdecl SSL_CTX_use_certificate_file(SSL_CTX *ctx, const char *file,
                                         int type);
 /* PEM type */
-__owur int SSL_CTX_use_certificate_chain_file(SSL_CTX *ctx, const char *file);
-__owur int SSL_use_certificate_chain_file(SSL *ssl, const char *file);
-__owur STACK_OF(X509_NAME) *SSL_load_client_CA_file(const char *file);
-__owur int SSL_add_file_cert_subjects_to_stack(STACK_OF(X509_NAME) *stackCAs,
+__owur int __cdecl SSL_CTX_use_certificate_chain_file(SSL_CTX *ctx, const char *file);
+__owur int __cdecl SSL_use_certificate_chain_file(SSL *ssl, const char *file);
+__owur STACK_OF(X509_NAME) * __cdecl SSL_load_client_CA_file(const char *file);
+__owur int __cdecl SSL_add_file_cert_subjects_to_stack(STACK_OF(X509_NAME) *stackCAs,
                                                const char *file);
-int SSL_add_dir_cert_subjects_to_stack(STACK_OF(X509_NAME) *stackCAs,
+int __cdecl SSL_add_dir_cert_subjects_to_stack(STACK_OF(X509_NAME) *stackCAs,
                                        const char *dir);
 
 # if OPENSSL_API_COMPAT < 0x10100000L
@@ -1611,182 +1611,182 @@ int SSL_add_dir_cert_subjects_to_stack(STACK_OF(X509_NAME) *stackCAs,
                      | OPENSSL_INIT_LOAD_CRYPTO_STRINGS, NULL)
 # endif
 
-__owur const char *SSL_state_string(const SSL *s);
-__owur const char *SSL_rstate_string(const SSL *s);
-__owur const char *SSL_state_string_long(const SSL *s);
-__owur const char *SSL_rstate_string_long(const SSL *s);
-__owur long SSL_SESSION_get_time(const SSL_SESSION *s);
-__owur long SSL_SESSION_set_time(SSL_SESSION *s, long t);
-__owur long SSL_SESSION_get_timeout(const SSL_SESSION *s);
-__owur long SSL_SESSION_set_timeout(SSL_SESSION *s, long t);
-__owur int SSL_SESSION_get_protocol_version(const SSL_SESSION *s);
-__owur int SSL_SESSION_set_protocol_version(SSL_SESSION *s, int version);
-
-__owur const char *SSL_SESSION_get0_hostname(const SSL_SESSION *s);
-__owur int SSL_SESSION_set1_hostname(SSL_SESSION *s, const char *hostname);
-void SSL_SESSION_get0_alpn_selected(const SSL_SESSION *s,
+__owur const char * __cdecl SSL_state_string(const SSL *s);
+__owur const char * __cdecl SSL_rstate_string(const SSL *s);
+__owur const char * __cdecl SSL_state_string_long(const SSL *s);
+__owur const char * __cdecl SSL_rstate_string_long(const SSL *s);
+__owur long __cdecl SSL_SESSION_get_time(const SSL_SESSION *s);
+__owur long __cdecl SSL_SESSION_set_time(SSL_SESSION *s, long t);
+__owur long __cdecl SSL_SESSION_get_timeout(const SSL_SESSION *s);
+__owur long __cdecl SSL_SESSION_set_timeout(SSL_SESSION *s, long t);
+__owur int __cdecl SSL_SESSION_get_protocol_version(const SSL_SESSION *s);
+__owur int __cdecl SSL_SESSION_set_protocol_version(SSL_SESSION *s, int version);
+
+__owur const char * __cdecl SSL_SESSION_get0_hostname(const SSL_SESSION *s);
+__owur int __cdecl SSL_SESSION_set1_hostname(SSL_SESSION *s, const char *hostname);
+void __cdecl SSL_SESSION_get0_alpn_selected(const SSL_SESSION *s,
                                     const unsigned char **alpn,
                                     size_t *len);
-__owur int SSL_SESSION_set1_alpn_selected(SSL_SESSION *s,
+__owur int __cdecl SSL_SESSION_set1_alpn_selected(SSL_SESSION *s,
                                           const unsigned char *alpn,
                                           size_t len);
-__owur const SSL_CIPHER *SSL_SESSION_get0_cipher(const SSL_SESSION *s);
-__owur int SSL_SESSION_set_cipher(SSL_SESSION *s, const SSL_CIPHER *cipher);
-__owur int SSL_SESSION_has_ticket(const SSL_SESSION *s);
-__owur unsigned long SSL_SESSION_get_ticket_lifetime_hint(const SSL_SESSION *s);
-void SSL_SESSION_get0_ticket(const SSL_SESSION *s, const unsigned char **tick,
+__owur const SSL_CIPHER * __cdecl SSL_SESSION_get0_cipher(const SSL_SESSION *s);
+__owur int __cdecl SSL_SESSION_set_cipher(SSL_SESSION *s, const SSL_CIPHER *cipher);
+__owur int __cdecl SSL_SESSION_has_ticket(const SSL_SESSION *s);
+__owur unsigned long __cdecl SSL_SESSION_get_ticket_lifetime_hint(const SSL_SESSION *s);
+void __cdecl SSL_SESSION_get0_ticket(const SSL_SESSION *s, const unsigned char **tick,
                              size_t *len);
-__owur uint32_t SSL_SESSION_get_max_early_data(const SSL_SESSION *s);
-__owur int SSL_SESSION_set_max_early_data(SSL_SESSION *s,
+__owur uint32_t __cdecl SSL_SESSION_get_max_early_data(const SSL_SESSION *s);
+__owur int __cdecl SSL_SESSION_set_max_early_data(SSL_SESSION *s,
                                           uint32_t max_early_data);
-__owur int SSL_copy_session_id(SSL *to, const SSL *from);
-__owur X509 *SSL_SESSION_get0_peer(SSL_SESSION *s);
-__owur int SSL_SESSION_set1_id_context(SSL_SESSION *s,
+__owur int __cdecl SSL_copy_session_id(SSL *to, const SSL *from);
+__owur X509 * __cdecl SSL_SESSION_get0_peer(SSL_SESSION *s);
+__owur int __cdecl SSL_SESSION_set1_id_context(SSL_SESSION *s,
                                        const unsigned char *sid_ctx,
                                        unsigned int sid_ctx_len);
-__owur int SSL_SESSION_set1_id(SSL_SESSION *s, const unsigned char *sid,
+__owur int __cdecl SSL_SESSION_set1_id(SSL_SESSION *s, const unsigned char *sid,
                                unsigned int sid_len);
-__owur int SSL_SESSION_is_resumable(const SSL_SESSION *s);
+__owur int __cdecl SSL_SESSION_is_resumable(const SSL_SESSION *s);
 
-__owur SSL_SESSION *SSL_SESSION_new(void);
-__owur SSL_SESSION *SSL_SESSION_dup(SSL_SESSION *src);
-const unsigned char *SSL_SESSION_get_id(const SSL_SESSION *s,
+__owur SSL_SESSION * __cdecl SSL_SESSION_new(void);
+__owur SSL_SESSION * __cdecl SSL_SESSION_dup(SSL_SESSION *src);
+const unsigned char * __cdecl SSL_SESSION_get_id(const SSL_SESSION *s,
                                         unsigned int *len);
-const unsigned char *SSL_SESSION_get0_id_context(const SSL_SESSION *s,
+const unsigned char * __cdecl SSL_SESSION_get0_id_context(const SSL_SESSION *s,
                                                  unsigned int *len);
-__owur unsigned int SSL_SESSION_get_compress_id(const SSL_SESSION *s);
+__owur unsigned int __cdecl SSL_SESSION_get_compress_id(const SSL_SESSION *s);
 # ifndef OPENSSL_NO_STDIO
-int SSL_SESSION_print_fp(FILE *fp, const SSL_SESSION *ses);
+int __cdecl SSL_SESSION_print_fp(FILE *fp, const SSL_SESSION *ses);
 # endif
-int SSL_SESSION_print(BIO *fp, const SSL_SESSION *ses);
-int SSL_SESSION_print_keylog(BIO *bp, const SSL_SESSION *x);
-int SSL_SESSION_up_ref(SSL_SESSION *ses);
-void SSL_SESSION_free(SSL_SESSION *ses);
-__owur int i2d_SSL_SESSION(SSL_SESSION *in, unsigned char **pp);
-__owur int SSL_set_session(SSL *to, SSL_SESSION *session);
-int SSL_CTX_add_session(SSL_CTX *ctx, SSL_SESSION *session);
-int SSL_CTX_remove_session(SSL_CTX *ctx, SSL_SESSION *session);
-__owur int SSL_CTX_set_generate_session_id(SSL_CTX *ctx, GEN_SESSION_CB cb);
-__owur int SSL_set_generate_session_id(SSL *s, GEN_SESSION_CB cb);
-__owur int SSL_has_matching_session_id(const SSL *s,
+int __cdecl SSL_SESSION_print(BIO *fp, const SSL_SESSION *ses);
+int __cdecl SSL_SESSION_print_keylog(BIO *bp, const SSL_SESSION *x);
+int __cdecl SSL_SESSION_up_ref(SSL_SESSION *ses);
+void __cdecl SSL_SESSION_free(SSL_SESSION *ses);
+__owur int __cdecl i2d_SSL_SESSION(SSL_SESSION *in, unsigned char **pp);
+__owur int __cdecl SSL_set_session(SSL *to, SSL_SESSION *session);
+int __cdecl SSL_CTX_add_session(SSL_CTX *ctx, SSL_SESSION *session);
+int __cdecl SSL_CTX_remove_session(SSL_CTX *ctx, SSL_SESSION *session);
+__owur int __cdecl SSL_CTX_set_generate_session_id(SSL_CTX *ctx, GEN_SESSION_CB cb);
+__owur int __cdecl SSL_set_generate_session_id(SSL *s, GEN_SESSION_CB cb);
+__owur int __cdecl SSL_has_matching_session_id(const SSL *s,
                                        const unsigned char *id,
                                        unsigned int id_len);
-SSL_SESSION *d2i_SSL_SESSION(SSL_SESSION **a, const unsigned char **pp,
+SSL_SESSION * __cdecl d2i_SSL_SESSION(SSL_SESSION **a, const unsigned char **pp,
                              long length);
 
 # ifdef HEADER_X509_H
-__owur X509 *SSL_get_peer_certificate(const SSL *s);
+__owur X509 * __cdecl SSL_get_peer_certificate(const SSL *s);
 # endif
 
-__owur STACK_OF(X509) *SSL_get_peer_cert_chain(const SSL *s);
+__owur STACK_OF(X509) * __cdecl SSL_get_peer_cert_chain(const SSL *s);
 
-__owur int SSL_CTX_get_verify_mode(const SSL_CTX *ctx);
-__owur int SSL_CTX_get_verify_depth(const SSL_CTX *ctx);
+__owur int __cdecl SSL_CTX_get_verify_mode(const SSL_CTX *ctx);
+__owur int __cdecl SSL_CTX_get_verify_depth(const SSL_CTX *ctx);
 __owur SSL_verify_cb SSL_CTX_get_verify_callback(const SSL_CTX *ctx);
-void SSL_CTX_set_verify(SSL_CTX *ctx, int mode, SSL_verify_cb callback);
-void SSL_CTX_set_verify_depth(SSL_CTX *ctx, int depth);
-void SSL_CTX_set_cert_verify_callback(SSL_CTX *ctx,
-                                      int (*cb) (X509_STORE_CTX *, void *),
+void __cdecl SSL_CTX_set_verify(SSL_CTX *ctx, int mode, SSL_verify_cb callback);
+void __cdecl SSL_CTX_set_verify_depth(SSL_CTX *ctx, int depth);
+void __cdecl SSL_CTX_set_cert_verify_callback(SSL_CTX *ctx,
+                                      int (__cdecl *cb) (X509_STORE_CTX *, void *),
                                       void *arg);
-void SSL_CTX_set_cert_cb(SSL_CTX *c, int (*cb) (SSL *ssl, void *arg),
+void __cdecl SSL_CTX_set_cert_cb(SSL_CTX *c, int (__cdecl *cb) (SSL *ssl, void *arg),
                          void *arg);
 # ifndef OPENSSL_NO_RSA
-__owur int SSL_CTX_use_RSAPrivateKey(SSL_CTX *ctx, RSA *rsa);
-__owur int SSL_CTX_use_RSAPrivateKey_ASN1(SSL_CTX *ctx, const unsigned char *d,
+__owur int __cdecl SSL_CTX_use_RSAPrivateKey(SSL_CTX *ctx, RSA *rsa);
+__owur int __cdecl SSL_CTX_use_RSAPrivateKey_ASN1(SSL_CTX *ctx, const unsigned char *d,
                                           long len);
 # endif
-__owur int SSL_CTX_use_PrivateKey(SSL_CTX *ctx, EVP_PKEY *pkey);
-__owur int SSL_CTX_use_PrivateKey_ASN1(int pk, SSL_CTX *ctx,
+__owur int __cdecl SSL_CTX_use_PrivateKey(SSL_CTX *ctx, EVP_PKEY *pkey);
+__owur int __cdecl SSL_CTX_use_PrivateKey_ASN1(int pk, SSL_CTX *ctx,
                                        const unsigned char *d, long len);
-__owur int SSL_CTX_use_certificate(SSL_CTX *ctx, X509 *x);
-__owur int SSL_CTX_use_certificate_ASN1(SSL_CTX *ctx, int len,
+__owur int __cdecl SSL_CTX_use_certificate(SSL_CTX *ctx, X509 *x);
+__owur int __cdecl SSL_CTX_use_certificate_ASN1(SSL_CTX *ctx, int len,
                                         const unsigned char *d);
-__owur int SSL_CTX_use_cert_and_key(SSL_CTX *ctx, X509 *x509, EVP_PKEY *privatekey,
+__owur int __cdecl SSL_CTX_use_cert_and_key(SSL_CTX *ctx, X509 *x509, EVP_PKEY *privatekey,
                                     STACK_OF(X509) *chain, int override);
 
-void SSL_CTX_set_default_passwd_cb(SSL_CTX *ctx, pem_password_cb *cb);
-void SSL_CTX_set_default_passwd_cb_userdata(SSL_CTX *ctx, void *u);
-pem_password_cb *SSL_CTX_get_default_passwd_cb(SSL_CTX *ctx);
-void *SSL_CTX_get_default_passwd_cb_userdata(SSL_CTX *ctx);
-void SSL_set_default_passwd_cb(SSL *s, pem_password_cb *cb);
-void SSL_set_default_passwd_cb_userdata(SSL *s, void *u);
-pem_password_cb *SSL_get_default_passwd_cb(SSL *s);
-void *SSL_get_default_passwd_cb_userdata(SSL *s);
+void __cdecl SSL_CTX_set_default_passwd_cb(SSL_CTX *ctx, pem_password_cb *cb);
+void __cdecl SSL_CTX_set_default_passwd_cb_userdata(SSL_CTX *ctx, void *u);
+pem_password_cb * __cdecl SSL_CTX_get_default_passwd_cb(SSL_CTX *ctx);
+void * __cdecl SSL_CTX_get_default_passwd_cb_userdata(SSL_CTX *ctx);
+void __cdecl SSL_set_default_passwd_cb(SSL *s, pem_password_cb *cb);
+void __cdecl SSL_set_default_passwd_cb_userdata(SSL *s, void *u);
+pem_password_cb * __cdecl SSL_get_default_passwd_cb(SSL *s);
+void * __cdecl SSL_get_default_passwd_cb_userdata(SSL *s);
 
-__owur int SSL_CTX_check_private_key(const SSL_CTX *ctx);
-__owur int SSL_check_private_key(const SSL *ctx);
+__owur int __cdecl SSL_CTX_check_private_key(const SSL_CTX *ctx);
+__owur int __cdecl SSL_check_private_key(const SSL *ctx);
 
-__owur int SSL_CTX_set_session_id_context(SSL_CTX *ctx,
+__owur int __cdecl SSL_CTX_set_session_id_context(SSL_CTX *ctx,
                                           const unsigned char *sid_ctx,
                                           unsigned int sid_ctx_len);
 
-SSL *SSL_new(SSL_CTX *ctx);
-int SSL_up_ref(SSL *s);
-int SSL_is_dtls(const SSL *s);
-__owur int SSL_set_session_id_context(SSL *ssl, const unsigned char *sid_ctx,
+SSL * __cdecl SSL_new(SSL_CTX *ctx);
+int __cdecl SSL_up_ref(SSL *s);
+int __cdecl SSL_is_dtls(const SSL *s);
+__owur int __cdecl SSL_set_session_id_context(SSL *ssl, const unsigned char *sid_ctx,
                                       unsigned int sid_ctx_len);
 
-__owur int SSL_CTX_set_purpose(SSL_CTX *ctx, int purpose);
-__owur int SSL_set_purpose(SSL *ssl, int purpose);
-__owur int SSL_CTX_set_trust(SSL_CTX *ctx, int trust);
-__owur int SSL_set_trust(SSL *ssl, int trust);
+__owur int __cdecl SSL_CTX_set_purpose(SSL_CTX *ctx, int purpose);
+__owur int __cdecl SSL_set_purpose(SSL *ssl, int purpose);
+__owur int __cdecl SSL_CTX_set_trust(SSL_CTX *ctx, int trust);
+__owur int __cdecl SSL_set_trust(SSL *ssl, int trust);
 
-__owur int SSL_set1_host(SSL *s, const char *hostname);
-__owur int SSL_add1_host(SSL *s, const char *hostname);
-__owur const char *SSL_get0_peername(SSL *s);
-void SSL_set_hostflags(SSL *s, unsigned int flags);
+__owur int __cdecl SSL_set1_host(SSL *s, const char *hostname);
+__owur int __cdecl SSL_add1_host(SSL *s, const char *hostname);
+__owur const char * __cdecl SSL_get0_peername(SSL *s);
+void __cdecl SSL_set_hostflags(SSL *s, unsigned int flags);
 
-__owur int SSL_CTX_dane_enable(SSL_CTX *ctx);
-__owur int SSL_CTX_dane_mtype_set(SSL_CTX *ctx, const EVP_MD *md,
+__owur int __cdecl SSL_CTX_dane_enable(SSL_CTX *ctx);
+__owur int __cdecl SSL_CTX_dane_mtype_set(SSL_CTX *ctx, const EVP_MD *md,
                                   uint8_t mtype, uint8_t ord);
-__owur int SSL_dane_enable(SSL *s, const char *basedomain);
-__owur int SSL_dane_tlsa_add(SSL *s, uint8_t usage, uint8_t selector,
+__owur int __cdecl SSL_dane_enable(SSL *s, const char *basedomain);
+__owur int __cdecl SSL_dane_tlsa_add(SSL *s, uint8_t usage, uint8_t selector,
                              uint8_t mtype, unsigned const char *data, size_t dlen);
-__owur int SSL_get0_dane_authority(SSL *s, X509 **mcert, EVP_PKEY **mspki);
-__owur int SSL_get0_dane_tlsa(SSL *s, uint8_t *usage, uint8_t *selector,
+__owur int __cdecl SSL_get0_dane_authority(SSL *s, X509 **mcert, EVP_PKEY **mspki);
+__owur int __cdecl SSL_get0_dane_tlsa(SSL *s, uint8_t *usage, uint8_t *selector,
                               uint8_t *mtype, unsigned const char **data,
                               size_t *dlen);
 /*
  * Bridge opacity barrier between libcrypt and libssl, also needed to support
  * offline testing in test/danetest.c
  */
-SSL_DANE *SSL_get0_dane(SSL *ssl);
+SSL_DANE * __cdecl SSL_get0_dane(SSL *ssl);
 /*
  * DANE flags
  */
-unsigned long SSL_CTX_dane_set_flags(SSL_CTX *ctx, unsigned long flags);
-unsigned long SSL_CTX_dane_clear_flags(SSL_CTX *ctx, unsigned long flags);
-unsigned long SSL_dane_set_flags(SSL *ssl, unsigned long flags);
-unsigned long SSL_dane_clear_flags(SSL *ssl, unsigned long flags);
+unsigned long __cdecl SSL_CTX_dane_set_flags(SSL_CTX *ctx, unsigned long flags);
+unsigned long __cdecl SSL_CTX_dane_clear_flags(SSL_CTX *ctx, unsigned long flags);
+unsigned long __cdecl SSL_dane_set_flags(SSL *ssl, unsigned long flags);
+unsigned long __cdecl SSL_dane_clear_flags(SSL *ssl, unsigned long flags);
 
-__owur int SSL_CTX_set1_param(SSL_CTX *ctx, X509_VERIFY_PARAM *vpm);
-__owur int SSL_set1_param(SSL *ssl, X509_VERIFY_PARAM *vpm);
+__owur int __cdecl SSL_CTX_set1_param(SSL_CTX *ctx, X509_VERIFY_PARAM *vpm);
+__owur int __cdecl SSL_set1_param(SSL *ssl, X509_VERIFY_PARAM *vpm);
 
-__owur X509_VERIFY_PARAM *SSL_CTX_get0_param(SSL_CTX *ctx);
-__owur X509_VERIFY_PARAM *SSL_get0_param(SSL *ssl);
+__owur X509_VERIFY_PARAM * __cdecl SSL_CTX_get0_param(SSL_CTX *ctx);
+__owur X509_VERIFY_PARAM * __cdecl SSL_get0_param(SSL *ssl);
 
 # ifndef OPENSSL_NO_SRP
-int SSL_CTX_set_srp_username(SSL_CTX *ctx, char *name);
-int SSL_CTX_set_srp_password(SSL_CTX *ctx, char *password);
-int SSL_CTX_set_srp_strength(SSL_CTX *ctx, int strength);
-int SSL_CTX_set_srp_client_pwd_callback(SSL_CTX *ctx,
-                                        char *(*cb) (SSL *, void *));
-int SSL_CTX_set_srp_verify_param_callback(SSL_CTX *ctx,
-                                          int (*cb) (SSL *, void *));
-int SSL_CTX_set_srp_username_callback(SSL_CTX *ctx,
-                                      int (*cb) (SSL *, int *, void *));
-int SSL_CTX_set_srp_cb_arg(SSL_CTX *ctx, void *arg);
-
-int SSL_set_srp_server_param(SSL *s, const BIGNUM *N, const BIGNUM *g,
+int __cdecl SSL_CTX_set_srp_username(SSL_CTX *ctx, char *name);
+int __cdecl SSL_CTX_set_srp_password(SSL_CTX *ctx, char *password);
+int __cdecl SSL_CTX_set_srp_strength(SSL_CTX *ctx, int strength);
+int __cdecl SSL_CTX_set_srp_client_pwd_callback(SSL_CTX *ctx,
+                                        char *(__cdecl *cb) (SSL *, void *));
+int __cdecl SSL_CTX_set_srp_verify_param_callback(SSL_CTX *ctx,
+                                          int (__cdecl *cb) (SSL *, void *));
+int __cdecl SSL_CTX_set_srp_username_callback(SSL_CTX *ctx,
+                                      int (__cdecl *cb) (SSL *, int *, void *));
+int __cdecl SSL_CTX_set_srp_cb_arg(SSL_CTX *ctx, void *arg);
+
+int __cdecl SSL_set_srp_server_param(SSL *s, const BIGNUM *N, const BIGNUM *g,
                              BIGNUM *sa, BIGNUM *v, char *info);
-int SSL_set_srp_server_param_pw(SSL *s, const char *user, const char *pass,
+int __cdecl SSL_set_srp_server_param_pw(SSL *s, const char *user, const char *pass,
                                 const char *grp);
 
-__owur BIGNUM *SSL_get_srp_g(SSL *s);
-__owur BIGNUM *SSL_get_srp_N(SSL *s);
+__owur BIGNUM * __cdecl SSL_get_srp_g(SSL *s);
+__owur BIGNUM * __cdecl SSL_get_srp_N(SSL *s);
 
-__owur char *SSL_get_srp_username(SSL *s);
-__owur char *SSL_get_srp_userinfo(SSL *s);
+__owur char * __cdecl SSL_get_srp_username(SSL *s);
+__owur char * __cdecl SSL_get_srp_userinfo(SSL *s);
 # endif
 
 /*
@@ -1797,66 +1797,66 @@ __owur char *SSL_get_srp_userinfo(SSL *s);
 # define SSL_CLIENT_HELLO_ERROR   0
 # define SSL_CLIENT_HELLO_RETRY   (-1)
 
-typedef int (*SSL_client_hello_cb_fn) (SSL *s, int *al, void *arg);
-void SSL_CTX_set_client_hello_cb(SSL_CTX *c, SSL_client_hello_cb_fn cb,
+typedef int (__cdecl *SSL_client_hello_cb_fn) (SSL *s, int *al, void *arg);
+void __cdecl SSL_CTX_set_client_hello_cb(SSL_CTX *c, SSL_client_hello_cb_fn cb,
                                  void *arg);
-int SSL_client_hello_isv2(SSL *s);
-unsigned int SSL_client_hello_get0_legacy_version(SSL *s);
-size_t SSL_client_hello_get0_random(SSL *s, const unsigned char **out);
-size_t SSL_client_hello_get0_session_id(SSL *s, const unsigned char **out);
-size_t SSL_client_hello_get0_ciphers(SSL *s, const unsigned char **out);
-size_t SSL_client_hello_get0_compression_methods(SSL *s,
+int __cdecl SSL_client_hello_isv2(SSL *s);
+unsigned int __cdecl SSL_client_hello_get0_legacy_version(SSL *s);
+size_t __cdecl SSL_client_hello_get0_random(SSL *s, const unsigned char **out);
+size_t __cdecl SSL_client_hello_get0_session_id(SSL *s, const unsigned char **out);
+size_t __cdecl SSL_client_hello_get0_ciphers(SSL *s, const unsigned char **out);
+size_t __cdecl SSL_client_hello_get0_compression_methods(SSL *s,
                                                  const unsigned char **out);
-int SSL_client_hello_get1_extensions_present(SSL *s, int **out, size_t *outlen);
-int SSL_client_hello_get0_ext(SSL *s, unsigned int type,
+int __cdecl SSL_client_hello_get1_extensions_present(SSL *s, int **out, size_t *outlen);
+int __cdecl SSL_client_hello_get0_ext(SSL *s, unsigned int type,
                               const unsigned char **out, size_t *outlen);
 
-void SSL_certs_clear(SSL *s);
-void SSL_free(SSL *ssl);
+void __cdecl SSL_certs_clear(SSL *s);
+void __cdecl SSL_free(SSL *ssl);
 # ifdef OSSL_ASYNC_FD
 /*
  * Windows application developer has to include windows.h to use these.
  */
-__owur int SSL_waiting_for_async(SSL *s);
-__owur int SSL_get_all_async_fds(SSL *s, OSSL_ASYNC_FD *fds, size_t *numfds);
-__owur int SSL_get_changed_async_fds(SSL *s, OSSL_ASYNC_FD *addfd,
+__owur int __cdecl SSL_waiting_for_async(SSL *s);
+__owur int __cdecl SSL_get_all_async_fds(SSL *s, OSSL_ASYNC_FD *fds, size_t *numfds);
+__owur int __cdecl SSL_get_changed_async_fds(SSL *s, OSSL_ASYNC_FD *addfd,
                                      size_t *numaddfds, OSSL_ASYNC_FD *delfd,
                                      size_t *numdelfds);
 # endif
-__owur int SSL_accept(SSL *ssl);
-__owur int SSL_stateless(SSL *s);
-__owur int SSL_connect(SSL *ssl);
-__owur int SSL_read(SSL *ssl, void *buf, int num);
-__owur int SSL_read_ex(SSL *ssl, void *buf, size_t num, size_t *readbytes);
+__owur int __cdecl SSL_accept(SSL *ssl);
+__owur int __cdecl SSL_stateless(SSL *s);
+__owur int __cdecl SSL_connect(SSL *ssl);
+__owur int __cdecl SSL_read(SSL *ssl, void *buf, int num);
+__owur int __cdecl SSL_read_ex(SSL *ssl, void *buf, size_t num, size_t *readbytes);
 
 # define SSL_READ_EARLY_DATA_ERROR   0
 # define SSL_READ_EARLY_DATA_SUCCESS 1
 # define SSL_READ_EARLY_DATA_FINISH  2
 
-__owur int SSL_read_early_data(SSL *s, void *buf, size_t num,
+__owur int __cdecl SSL_read_early_data(SSL *s, void *buf, size_t num,
                                size_t *readbytes);
-__owur int SSL_peek(SSL *ssl, void *buf, int num);
-__owur int SSL_peek_ex(SSL *ssl, void *buf, size_t num, size_t *readbytes);
-__owur int SSL_write(SSL *ssl, const void *buf, int num);
-__owur int SSL_write_ex(SSL *s, const void *buf, size_t num, size_t *written);
-__owur int SSL_write_early_data(SSL *s, const void *buf, size_t num,
+__owur int __cdecl SSL_peek(SSL *ssl, void *buf, int num);
+__owur int __cdecl SSL_peek_ex(SSL *ssl, void *buf, size_t num, size_t *readbytes);
+__owur int __cdecl SSL_write(SSL *ssl, const void *buf, int num);
+__owur int __cdecl SSL_write_ex(SSL *s, const void *buf, size_t num, size_t *written);
+__owur int __cdecl SSL_write_early_data(SSL *s, const void *buf, size_t num,
                                 size_t *written);
-long SSL_ctrl(SSL *ssl, int cmd, long larg, void *parg);
-long SSL_callback_ctrl(SSL *, int, void (*)(void));
-long SSL_CTX_ctrl(SSL_CTX *ctx, int cmd, long larg, void *parg);
-long SSL_CTX_callback_ctrl(SSL_CTX *, int, void (*)(void));
+long __cdecl SSL_ctrl(SSL *ssl, int cmd, long larg, void *parg);
+long __cdecl SSL_callback_ctrl(SSL *, int, void (__cdecl *)(void));
+long __cdecl SSL_CTX_ctrl(SSL_CTX *ctx, int cmd, long larg, void *parg);
+long __cdecl SSL_CTX_callback_ctrl(SSL_CTX *, int, void (__cdecl *)(void));
 
 # define SSL_EARLY_DATA_NOT_SENT    0
 # define SSL_EARLY_DATA_REJECTED    1
 # define SSL_EARLY_DATA_ACCEPTED    2
 
-__owur int SSL_get_early_data_status(const SSL *s);
+__owur int __cdecl SSL_get_early_data_status(const SSL *s);
 
-__owur int SSL_get_error(const SSL *s, int ret_code);
-__owur const char *SSL_get_version(const SSL *s);
+__owur int __cdecl SSL_get_error(const SSL *s, int ret_code);
+__owur const char * __cdecl SSL_get_version(const SSL *s);
 
 /* This sets the 'default' SSL version that SSL_new() will create */
-__owur int SSL_CTX_set_ssl_version(SSL_CTX *ctx, const SSL_METHOD *meth);
+__owur int __cdecl SSL_CTX_set_ssl_version(SSL_CTX *ctx, const SSL_METHOD *meth);
 
 # ifndef OPENSSL_NO_SSL3_METHOD
 DEPRECATEDIN_1_1_0(__owur const SSL_METHOD *SSLv3_method(void)) /* SSLv3 */
@@ -1869,9 +1869,9 @@ DEPRECATEDIN_1_1_0(__owur const SSL_METHOD *SSLv3_client_method(void))
 #define SSLv23_client_method    TLS_client_method
 
 /* Negotiate highest available SSL/TLS version */
-__owur const SSL_METHOD *TLS_method(void);
-__owur const SSL_METHOD *TLS_server_method(void);
-__owur const SSL_METHOD *TLS_client_method(void);
+__owur const SSL_METHOD * __cdecl TLS_method(void);
+__owur const SSL_METHOD * __cdecl TLS_server_method(void);
+__owur const SSL_METHOD * __cdecl TLS_client_method(void);
 
 # ifndef OPENSSL_NO_TLS1_METHOD
 DEPRECATEDIN_1_1_0(__owur const SSL_METHOD *TLSv1_method(void)) /* TLSv1.0 */
@@ -1904,126 +1904,126 @@ DEPRECATEDIN_1_1_0(__owur const SSL_METHOD *DTLSv1_2_server_method(void))
 DEPRECATEDIN_1_1_0(__owur const SSL_METHOD *DTLSv1_2_client_method(void))
 # endif
 
-__owur const SSL_METHOD *DTLS_method(void); /* DTLS 1.0 and 1.2 */
-__owur const SSL_METHOD *DTLS_server_method(void); /* DTLS 1.0 and 1.2 */
-__owur const SSL_METHOD *DTLS_client_method(void); /* DTLS 1.0 and 1.2 */
-
-__owur size_t DTLS_get_data_mtu(const SSL *s);
-
-__owur STACK_OF(SSL_CIPHER) *SSL_get_ciphers(const SSL *s);
-__owur STACK_OF(SSL_CIPHER) *SSL_CTX_get_ciphers(const SSL_CTX *ctx);
-__owur STACK_OF(SSL_CIPHER) *SSL_get_client_ciphers(const SSL *s);
-__owur STACK_OF(SSL_CIPHER) *SSL_get1_supported_ciphers(SSL *s);
-
-__owur int SSL_do_handshake(SSL *s);
-int SSL_key_update(SSL *s, int updatetype);
-int SSL_get_key_update_type(const SSL *s);
-int SSL_renegotiate(SSL *s);
-int SSL_renegotiate_abbreviated(SSL *s);
-__owur int SSL_renegotiate_pending(const SSL *s);
-int SSL_shutdown(SSL *s);
-__owur int SSL_verify_client_post_handshake(SSL *s);
-void SSL_CTX_set_post_handshake_auth(SSL_CTX *ctx, int val);
-void SSL_set_post_handshake_auth(SSL *s, int val);
-
-__owur const SSL_METHOD *SSL_CTX_get_ssl_method(const SSL_CTX *ctx);
-__owur const SSL_METHOD *SSL_get_ssl_method(const SSL *s);
-__owur int SSL_set_ssl_method(SSL *s, const SSL_METHOD *method);
-__owur const char *SSL_alert_type_string_long(int value);
-__owur const char *SSL_alert_type_string(int value);
-__owur const char *SSL_alert_desc_string_long(int value);
-__owur const char *SSL_alert_desc_string(int value);
-
-void SSL_set0_CA_list(SSL *s, STACK_OF(X509_NAME) *name_list);
-void SSL_CTX_set0_CA_list(SSL_CTX *ctx, STACK_OF(X509_NAME) *name_list);
-__owur const STACK_OF(X509_NAME) *SSL_get0_CA_list(const SSL *s);
-__owur const STACK_OF(X509_NAME) *SSL_CTX_get0_CA_list(const SSL_CTX *ctx);
-__owur int SSL_add1_to_CA_list(SSL *ssl, const X509 *x);
-__owur int SSL_CTX_add1_to_CA_list(SSL_CTX *ctx, const X509 *x);
-__owur const STACK_OF(X509_NAME) *SSL_get0_peer_CA_list(const SSL *s);
-
-void SSL_set_client_CA_list(SSL *s, STACK_OF(X509_NAME) *name_list);
-void SSL_CTX_set_client_CA_list(SSL_CTX *ctx, STACK_OF(X509_NAME) *name_list);
-__owur STACK_OF(X509_NAME) *SSL_get_client_CA_list(const SSL *s);
-__owur STACK_OF(X509_NAME) *SSL_CTX_get_client_CA_list(const SSL_CTX *s);
-__owur int SSL_add_client_CA(SSL *ssl, X509 *x);
-__owur int SSL_CTX_add_client_CA(SSL_CTX *ctx, X509 *x);
-
-void SSL_set_connect_state(SSL *s);
-void SSL_set_accept_state(SSL *s);
-
-__owur long SSL_get_default_timeout(const SSL *s);
+__owur const SSL_METHOD * __cdecl DTLS_method(void); /* DTLS 1.0 and 1.2 */
+__owur const SSL_METHOD * __cdecl DTLS_server_method(void); /* DTLS 1.0 and 1.2 */
+__owur const SSL_METHOD * __cdecl DTLS_client_method(void); /* DTLS 1.0 and 1.2 */
+
+__owur size_t __cdecl DTLS_get_data_mtu(const SSL *s);
+
+__owur STACK_OF(SSL_CIPHER) * __cdecl SSL_get_ciphers(const SSL *s);
+__owur STACK_OF(SSL_CIPHER) * __cdecl SSL_CTX_get_ciphers(const SSL_CTX *ctx);
+__owur STACK_OF(SSL_CIPHER) * __cdecl SSL_get_client_ciphers(const SSL *s);
+__owur STACK_OF(SSL_CIPHER) * __cdecl SSL_get1_supported_ciphers(SSL *s);
+
+__owur int __cdecl SSL_do_handshake(SSL *s);
+int __cdecl SSL_key_update(SSL *s, int updatetype);
+int __cdecl SSL_get_key_update_type(const SSL *s);
+int __cdecl SSL_renegotiate(SSL *s);
+int __cdecl SSL_renegotiate_abbreviated(SSL *s);
+__owur int __cdecl SSL_renegotiate_pending(const SSL *s);
+int __cdecl SSL_shutdown(SSL *s);
+__owur int __cdecl SSL_verify_client_post_handshake(SSL *s);
+void __cdecl SSL_CTX_set_post_handshake_auth(SSL_CTX *ctx, int val);
+void __cdecl SSL_set_post_handshake_auth(SSL *s, int val);
+
+__owur const SSL_METHOD * __cdecl SSL_CTX_get_ssl_method(const SSL_CTX *ctx);
+__owur const SSL_METHOD * __cdecl SSL_get_ssl_method(const SSL *s);
+__owur int __cdecl SSL_set_ssl_method(SSL *s, const SSL_METHOD *method);
+__owur const char * __cdecl SSL_alert_type_string_long(int value);
+__owur const char * __cdecl SSL_alert_type_string(int value);
+__owur const char * __cdecl SSL_alert_desc_string_long(int value);
+__owur const char * __cdecl SSL_alert_desc_string(int value);
+
+void __cdecl SSL_set0_CA_list(SSL *s, STACK_OF(X509_NAME) *name_list);
+void __cdecl SSL_CTX_set0_CA_list(SSL_CTX *ctx, STACK_OF(X509_NAME) *name_list);
+__owur const STACK_OF(X509_NAME) * __cdecl SSL_get0_CA_list(const SSL *s);
+__owur const STACK_OF(X509_NAME) * __cdecl SSL_CTX_get0_CA_list(const SSL_CTX *ctx);
+__owur int __cdecl SSL_add1_to_CA_list(SSL *ssl, const X509 *x);
+__owur int __cdecl SSL_CTX_add1_to_CA_list(SSL_CTX *ctx, const X509 *x);
+__owur const STACK_OF(X509_NAME) * __cdecl SSL_get0_peer_CA_list(const SSL *s);
+
+void __cdecl SSL_set_client_CA_list(SSL *s, STACK_OF(X509_NAME) *name_list);
+void __cdecl SSL_CTX_set_client_CA_list(SSL_CTX *ctx, STACK_OF(X509_NAME) *name_list);
+__owur STACK_OF(X509_NAME) * __cdecl SSL_get_client_CA_list(const SSL *s);
+__owur STACK_OF(X509_NAME) * __cdecl SSL_CTX_get_client_CA_list(const SSL_CTX *s);
+__owur int __cdecl SSL_add_client_CA(SSL *ssl, X509 *x);
+__owur int __cdecl SSL_CTX_add_client_CA(SSL_CTX *ctx, X509 *x);
+
+void __cdecl SSL_set_connect_state(SSL *s);
+void __cdecl SSL_set_accept_state(SSL *s);
+
+__owur long __cdecl SSL_get_default_timeout(const SSL *s);
 
 # if OPENSSL_API_COMPAT < 0x10100000L
 #  define SSL_library_init() OPENSSL_init_ssl(0, NULL)
 # endif
 
-__owur char *SSL_CIPHER_description(const SSL_CIPHER *, char *buf, int size);
-__owur STACK_OF(X509_NAME) *SSL_dup_CA_list(const STACK_OF(X509_NAME) *sk);
+__owur char * __cdecl SSL_CIPHER_description(const SSL_CIPHER *, char *buf, int size);
+__owur STACK_OF(X509_NAME) * __cdecl SSL_dup_CA_list(const STACK_OF(X509_NAME) *sk);
 
-__owur SSL *SSL_dup(SSL *ssl);
+__owur SSL * __cdecl SSL_dup(SSL *ssl);
 
-__owur X509 *SSL_get_certificate(const SSL *ssl);
+__owur X509 * __cdecl SSL_get_certificate(const SSL *ssl);
 /*
  * EVP_PKEY
  */
-struct evp_pkey_st *SSL_get_privatekey(const SSL *ssl);
-
-__owur X509 *SSL_CTX_get0_certificate(const SSL_CTX *ctx);
-__owur EVP_PKEY *SSL_CTX_get0_privatekey(const SSL_CTX *ctx);
-
-void SSL_CTX_set_quiet_shutdown(SSL_CTX *ctx, int mode);
-__owur int SSL_CTX_get_quiet_shutdown(const SSL_CTX *ctx);
-void SSL_set_quiet_shutdown(SSL *ssl, int mode);
-__owur int SSL_get_quiet_shutdown(const SSL *ssl);
-void SSL_set_shutdown(SSL *ssl, int mode);
-__owur int SSL_get_shutdown(const SSL *ssl);
-__owur int SSL_version(const SSL *ssl);
-__owur int SSL_client_version(const SSL *s);
-__owur int SSL_CTX_set_default_verify_paths(SSL_CTX *ctx);
-__owur int SSL_CTX_set_default_verify_dir(SSL_CTX *ctx);
-__owur int SSL_CTX_set_default_verify_file(SSL_CTX *ctx);
-__owur int SSL_CTX_load_verify_locations(SSL_CTX *ctx, const char *CAfile,
+struct evp_pkey_st * __cdecl SSL_get_privatekey(const SSL *ssl);
+
+__owur X509 * __cdecl SSL_CTX_get0_certificate(const SSL_CTX *ctx);
+__owur EVP_PKEY * __cdecl SSL_CTX_get0_privatekey(const SSL_CTX *ctx);
+
+void __cdecl SSL_CTX_set_quiet_shutdown(SSL_CTX *ctx, int mode);
+__owur int __cdecl SSL_CTX_get_quiet_shutdown(const SSL_CTX *ctx);
+void __cdecl SSL_set_quiet_shutdown(SSL *ssl, int mode);
+__owur int __cdecl SSL_get_quiet_shutdown(const SSL *ssl);
+void __cdecl SSL_set_shutdown(SSL *ssl, int mode);
+__owur int __cdecl SSL_get_shutdown(const SSL *ssl);
+__owur int __cdecl SSL_version(const SSL *ssl);
+__owur int __cdecl SSL_client_version(const SSL *s);
+__owur int __cdecl SSL_CTX_set_default_verify_paths(SSL_CTX *ctx);
+__owur int __cdecl SSL_CTX_set_default_verify_dir(SSL_CTX *ctx);
+__owur int __cdecl SSL_CTX_set_default_verify_file(SSL_CTX *ctx);
+__owur int __cdecl SSL_CTX_load_verify_locations(SSL_CTX *ctx, const char *CAfile,
                                          const char *CApath);
 # define SSL_get0_session SSL_get_session/* just peek at pointer */
-__owur SSL_SESSION *SSL_get_session(const SSL *ssl);
-__owur SSL_SESSION *SSL_get1_session(SSL *ssl); /* obtain a reference count */
-__owur SSL_CTX *SSL_get_SSL_CTX(const SSL *ssl);
-SSL_CTX *SSL_set_SSL_CTX(SSL *ssl, SSL_CTX *ctx);
-void SSL_set_info_callback(SSL *ssl,
-                           void (*cb) (const SSL *ssl, int type, int val));
-void (*SSL_get_info_callback(const SSL *ssl)) (const SSL *ssl, int type,
+__owur SSL_SESSION * __cdecl SSL_get_session(const SSL *ssl);
+__owur SSL_SESSION * __cdecl SSL_get1_session(SSL *ssl); /* obtain a reference count */
+__owur SSL_CTX * __cdecl SSL_get_SSL_CTX(const SSL *ssl);
+SSL_CTX * __cdecl SSL_set_SSL_CTX(SSL *ssl, SSL_CTX *ctx);
+void __cdecl SSL_set_info_callback(SSL *ssl,
+                           void (__cdecl *cb) (const SSL *ssl, int type, int val));
+void (__cdecl *SSL_get_info_callback(const SSL *ssl)) (const SSL *ssl, int type,
                                                int val);
-__owur OSSL_HANDSHAKE_STATE SSL_get_state(const SSL *ssl);
+__owur OSSL_HANDSHAKE_STATE __cdecl SSL_get_state(const SSL *ssl);
 
-void SSL_set_verify_result(SSL *ssl, long v);
-__owur long SSL_get_verify_result(const SSL *ssl);
-__owur STACK_OF(X509) *SSL_get0_verified_chain(const SSL *s);
+void __cdecl SSL_set_verify_result(SSL *ssl, long v);
+__owur long __cdecl SSL_get_verify_result(const SSL *ssl);
+__owur STACK_OF(X509) * __cdecl SSL_get0_verified_chain(const SSL *s);
 
-__owur size_t SSL_get_client_random(const SSL *ssl, unsigned char *out,
+__owur size_t __cdecl SSL_get_client_random(const SSL *ssl, unsigned char *out,
                                     size_t outlen);
-__owur size_t SSL_get_server_random(const SSL *ssl, unsigned char *out,
+__owur size_t __cdecl SSL_get_server_random(const SSL *ssl, unsigned char *out,
                                     size_t outlen);
-__owur size_t SSL_SESSION_get_master_key(const SSL_SESSION *sess,
+__owur size_t __cdecl SSL_SESSION_get_master_key(const SSL_SESSION *sess,
                                          unsigned char *out, size_t outlen);
-__owur int SSL_SESSION_set1_master_key(SSL_SESSION *sess,
+__owur int __cdecl SSL_SESSION_set1_master_key(SSL_SESSION *sess,
                                        const unsigned char *in, size_t len);
-uint8_t SSL_SESSION_get_max_fragment_length(const SSL_SESSION *sess);
+uint8_t __cdecl SSL_SESSION_get_max_fragment_length(const SSL_SESSION *sess);
 
 #define SSL_get_ex_new_index(l, p, newf, dupf, freef) \
     CRYPTO_get_ex_new_index(CRYPTO_EX_INDEX_SSL, l, p, newf, dupf, freef)
-__owur int SSL_set_ex_data(SSL *ssl, int idx, void *data);
-void *SSL_get_ex_data(const SSL *ssl, int idx);
+__owur int __cdecl SSL_set_ex_data(SSL *ssl, int idx, void *data);
+void * __cdecl SSL_get_ex_data(const SSL *ssl, int idx);
 #define SSL_SESSION_get_ex_new_index(l, p, newf, dupf, freef) \
     CRYPTO_get_ex_new_index(CRYPTO_EX_INDEX_SSL_SESSION, l, p, newf, dupf, freef)
-__owur int SSL_SESSION_set_ex_data(SSL_SESSION *ss, int idx, void *data);
-void *SSL_SESSION_get_ex_data(const SSL_SESSION *ss, int idx);
+__owur int __cdecl SSL_SESSION_set_ex_data(SSL_SESSION *ss, int idx, void *data);
+void * __cdecl SSL_SESSION_get_ex_data(const SSL_SESSION *ss, int idx);
 #define SSL_CTX_get_ex_new_index(l, p, newf, dupf, freef) \
     CRYPTO_get_ex_new_index(CRYPTO_EX_INDEX_SSL_CTX, l, p, newf, dupf, freef)
-__owur int SSL_CTX_set_ex_data(SSL_CTX *ssl, int idx, void *data);
-void *SSL_CTX_get_ex_data(const SSL_CTX *ssl, int idx);
+__owur int __cdecl SSL_CTX_set_ex_data(SSL_CTX *ssl, int idx, void *data);
+void * __cdecl SSL_CTX_get_ex_data(const SSL_CTX *ssl, int idx);
 
-__owur int SSL_get_ex_data_X509_STORE_CTX_idx(void);
+__owur int __cdecl SSL_get_ex_data_X509_STORE_CTX_idx(void);
 
 # define SSL_CTX_sess_set_cache_size(ctx,t) \
         SSL_CTX_ctrl(ctx,SSL_CTRL_SET_SESS_CACHE_SIZE,t,NULL)
@@ -2062,112 +2062,112 @@ __owur int SSL_get_ex_data_X509_STORE_CTX_idx(void);
 # define SSL_set_max_pipelines(ssl,m) \
         SSL_ctrl(ssl,SSL_CTRL_SET_MAX_PIPELINES,m,NULL)
 
-void SSL_CTX_set_default_read_buffer_len(SSL_CTX *ctx, size_t len);
-void SSL_set_default_read_buffer_len(SSL *s, size_t len);
+void __cdecl SSL_CTX_set_default_read_buffer_len(SSL_CTX *ctx, size_t len);
+void __cdecl SSL_set_default_read_buffer_len(SSL *s, size_t len);
 
 # ifndef OPENSSL_NO_DH
 /* NB: the |keylength| is only applicable when is_export is true */
-void SSL_CTX_set_tmp_dh_callback(SSL_CTX *ctx,
-                                 DH *(*dh) (SSL *ssl, int is_export,
+void __cdecl SSL_CTX_set_tmp_dh_callback(SSL_CTX *ctx,
+                                 DH *(__cdecl *dh) (SSL *ssl, int is_export,
                                             int keylength));
-void SSL_set_tmp_dh_callback(SSL *ssl,
-                             DH *(*dh) (SSL *ssl, int is_export,
+void __cdecl SSL_set_tmp_dh_callback(SSL *ssl,
+                             DH *(__cdecl *dh) (SSL *ssl, int is_export,
                                         int keylength));
 # endif
 
-__owur const COMP_METHOD *SSL_get_current_compression(const SSL *s);
-__owur const COMP_METHOD *SSL_get_current_expansion(const SSL *s);
-__owur const char *SSL_COMP_get_name(const COMP_METHOD *comp);
-__owur const char *SSL_COMP_get0_name(const SSL_COMP *comp);
-__owur int SSL_COMP_get_id(const SSL_COMP *comp);
-STACK_OF(SSL_COMP) *SSL_COMP_get_compression_methods(void);
-__owur STACK_OF(SSL_COMP) *SSL_COMP_set0_compression_methods(STACK_OF(SSL_COMP)
+__owur const COMP_METHOD * __cdecl SSL_get_current_compression(const SSL *s);
+__owur const COMP_METHOD * __cdecl SSL_get_current_expansion(const SSL *s);
+__owur const char * __cdecl SSL_COMP_get_name(const COMP_METHOD *comp);
+__owur const char * __cdecl SSL_COMP_get0_name(const SSL_COMP *comp);
+__owur int __cdecl SSL_COMP_get_id(const SSL_COMP *comp);
+STACK_OF(SSL_COMP) * __cdecl SSL_COMP_get_compression_methods(void);
+__owur STACK_OF(SSL_COMP) * __cdecl SSL_COMP_set0_compression_methods(STACK_OF(SSL_COMP)
                                                              *meths);
 # if OPENSSL_API_COMPAT < 0x10100000L
 #  define SSL_COMP_free_compression_methods() while(0) continue
 # endif
-__owur int SSL_COMP_add_compression_method(int id, COMP_METHOD *cm);
+__owur int __cdecl SSL_COMP_add_compression_method(int id, COMP_METHOD *cm);
 
-const SSL_CIPHER *SSL_CIPHER_find(SSL *ssl, const unsigned char *ptr);
-int SSL_CIPHER_get_cipher_nid(const SSL_CIPHER *c);
-int SSL_CIPHER_get_digest_nid(const SSL_CIPHER *c);
-int SSL_bytes_to_cipher_list(SSL *s, const unsigned char *bytes, size_t len,
+const SSL_CIPHER * __cdecl SSL_CIPHER_find(SSL *ssl, const unsigned char *ptr);
+int __cdecl SSL_CIPHER_get_cipher_nid(const SSL_CIPHER *c);
+int __cdecl SSL_CIPHER_get_digest_nid(const SSL_CIPHER *c);
+int __cdecl SSL_bytes_to_cipher_list(SSL *s, const unsigned char *bytes, size_t len,
                              int isv2format, STACK_OF(SSL_CIPHER) **sk,
                              STACK_OF(SSL_CIPHER) **scsvs);
 
 /* TLS extensions functions */
-__owur int SSL_set_session_ticket_ext(SSL *s, void *ext_data, int ext_len);
+__owur int __cdecl SSL_set_session_ticket_ext(SSL *s, void *ext_data, int ext_len);
 
-__owur int SSL_set_session_ticket_ext_cb(SSL *s,
+__owur int __cdecl SSL_set_session_ticket_ext_cb(SSL *s,
                                          tls_session_ticket_ext_cb_fn cb,
                                          void *arg);
 
 /* Pre-shared secret session resumption functions */
-__owur int SSL_set_session_secret_cb(SSL *s,
+__owur int __cdecl SSL_set_session_secret_cb(SSL *s,
                                      tls_session_secret_cb_fn session_secret_cb,
                                      void *arg);
 
-void SSL_CTX_set_not_resumable_session_callback(SSL_CTX *ctx,
-                                                int (*cb) (SSL *ssl,
+void __cdecl SSL_CTX_set_not_resumable_session_callback(SSL_CTX *ctx,
+                                                int (__cdecl *cb) (SSL *ssl,
                                                            int
                                                            is_forward_secure));
 
-void SSL_set_not_resumable_session_callback(SSL *ssl,
-                                            int (*cb) (SSL *ssl,
+void __cdecl SSL_set_not_resumable_session_callback(SSL *ssl,
+                                            int (__cdecl *cb) (SSL *ssl,
                                                        int is_forward_secure));
 
-void SSL_CTX_set_record_padding_callback(SSL_CTX *ctx,
-                                         size_t (*cb) (SSL *ssl, int type,
+void __cdecl SSL_CTX_set_record_padding_callback(SSL_CTX *ctx,
+                                         size_t (__cdecl *cb) (SSL *ssl, int type,
                                                        size_t len, void *arg));
-void SSL_CTX_set_record_padding_callback_arg(SSL_CTX *ctx, void *arg);
-void *SSL_CTX_get_record_padding_callback_arg(const SSL_CTX *ctx);
-int SSL_CTX_set_block_padding(SSL_CTX *ctx, size_t block_size);
+void __cdecl SSL_CTX_set_record_padding_callback_arg(SSL_CTX *ctx, void *arg);
+void * __cdecl SSL_CTX_get_record_padding_callback_arg(const SSL_CTX *ctx);
+int __cdecl SSL_CTX_set_block_padding(SSL_CTX *ctx, size_t block_size);
 
-void SSL_set_record_padding_callback(SSL *ssl,
-                                    size_t (*cb) (SSL *ssl, int type,
+void __cdecl SSL_set_record_padding_callback(SSL *ssl,
+                                    size_t (__cdecl *cb) (SSL *ssl, int type,
                                                   size_t len, void *arg));
-void SSL_set_record_padding_callback_arg(SSL *ssl, void *arg);
-void *SSL_get_record_padding_callback_arg(const SSL *ssl);
-int SSL_set_block_padding(SSL *ssl, size_t block_size);
+void __cdecl SSL_set_record_padding_callback_arg(SSL *ssl, void *arg);
+void * __cdecl SSL_get_record_padding_callback_arg(const SSL *ssl);
+int __cdecl SSL_set_block_padding(SSL *ssl, size_t block_size);
 
-int SSL_set_num_tickets(SSL *s, size_t num_tickets);
-size_t SSL_get_num_tickets(const SSL *s);
-int SSL_CTX_set_num_tickets(SSL_CTX *ctx, size_t num_tickets);
-size_t SSL_CTX_get_num_tickets(const SSL_CTX *ctx);
+int __cdecl SSL_set_num_tickets(SSL *s, size_t num_tickets);
+size_t __cdecl SSL_get_num_tickets(const SSL *s);
+int __cdecl SSL_CTX_set_num_tickets(SSL_CTX *ctx, size_t num_tickets);
+size_t __cdecl SSL_CTX_get_num_tickets(const SSL_CTX *ctx);
 
 # if OPENSSL_API_COMPAT < 0x10100000L
 #  define SSL_cache_hit(s) SSL_session_reused(s)
 # endif
 
-__owur int SSL_session_reused(const SSL *s);
-__owur int SSL_is_server(const SSL *s);
+__owur int __cdecl SSL_session_reused(const SSL *s);
+__owur int __cdecl SSL_is_server(const SSL *s);
 
 __owur __owur SSL_CONF_CTX *SSL_CONF_CTX_new(void);
-int SSL_CONF_CTX_finish(SSL_CONF_CTX *cctx);
-void SSL_CONF_CTX_free(SSL_CONF_CTX *cctx);
-unsigned int SSL_CONF_CTX_set_flags(SSL_CONF_CTX *cctx, unsigned int flags);
-__owur unsigned int SSL_CONF_CTX_clear_flags(SSL_CONF_CTX *cctx,
+int __cdecl SSL_CONF_CTX_finish(SSL_CONF_CTX *cctx);
+void __cdecl SSL_CONF_CTX_free(SSL_CONF_CTX *cctx);
+unsigned int __cdecl SSL_CONF_CTX_set_flags(SSL_CONF_CTX *cctx, unsigned int flags);
+__owur unsigned int __cdecl SSL_CONF_CTX_clear_flags(SSL_CONF_CTX *cctx,
                                              unsigned int flags);
-__owur int SSL_CONF_CTX_set1_prefix(SSL_CONF_CTX *cctx, const char *pre);
+__owur int __cdecl SSL_CONF_CTX_set1_prefix(SSL_CONF_CTX *cctx, const char *pre);
 
-void SSL_CONF_CTX_set_ssl(SSL_CONF_CTX *cctx, SSL *ssl);
-void SSL_CONF_CTX_set_ssl_ctx(SSL_CONF_CTX *cctx, SSL_CTX *ctx);
+void __cdecl SSL_CONF_CTX_set_ssl(SSL_CONF_CTX *cctx, SSL *ssl);
+void __cdecl SSL_CONF_CTX_set_ssl_ctx(SSL_CONF_CTX *cctx, SSL_CTX *ctx);
 
-__owur int SSL_CONF_cmd(SSL_CONF_CTX *cctx, const char *cmd, const char *value);
-__owur int SSL_CONF_cmd_argv(SSL_CONF_CTX *cctx, int *pargc, char ***pargv);
-__owur int SSL_CONF_cmd_value_type(SSL_CONF_CTX *cctx, const char *cmd);
+__owur int __cdecl SSL_CONF_cmd(SSL_CONF_CTX *cctx, const char *cmd, const char *value);
+__owur int __cdecl SSL_CONF_cmd_argv(SSL_CONF_CTX *cctx, int *pargc, char ***pargv);
+__owur int __cdecl SSL_CONF_cmd_value_type(SSL_CONF_CTX *cctx, const char *cmd);
 
-void SSL_add_ssl_module(void);
-int SSL_config(SSL *s, const char *name);
-int SSL_CTX_config(SSL_CTX *ctx, const char *name);
+void __cdecl SSL_add_ssl_module(void);
+int __cdecl SSL_config(SSL *s, const char *name);
+int __cdecl SSL_CTX_config(SSL_CTX *ctx, const char *name);
 
 # ifndef OPENSSL_NO_SSL_TRACE
-void SSL_trace(int write_p, int version, int content_type,
+void __cdecl SSL_trace(int write_p, int version, int content_type,
                const void *buf, size_t len, SSL *ssl, void *arg);
 # endif
 
 # ifndef OPENSSL_NO_SOCK
-int DTLSv1_listen(SSL *s, BIO_ADDR *client);
+int __cdecl DTLSv1_listen(SSL *s, BIO_ADDR *client);
 # endif
 
 # ifndef OPENSSL_NO_CT
@@ -2178,7 +2178,7 @@ int DTLSv1_listen(SSL *s, BIO_ADDR *client);
  * May return a negative integer if an error occurs.
  * A connection should be aborted if the SCTs are deemed insufficient.
  */
-typedef int (*ssl_ct_validation_cb)(const CT_POLICY_EVAL_CTX *ctx,
+typedef int (__cdecl *ssl_ct_validation_cb)(const CT_POLICY_EVAL_CTX *ctx,
                                     const STACK_OF(SCT) *scts, void *arg);
 
 /*
@@ -2193,9 +2193,9 @@ typedef int (*ssl_ct_validation_cb)(const CT_POLICY_EVAL_CTX *ctx,
  * NOTE: A side-effect of setting a CT callback is that an OCSP stapled response
  *       will be requested.
  */
-int SSL_set_ct_validation_callback(SSL *s, ssl_ct_validation_cb callback,
+int __cdecl SSL_set_ct_validation_callback(SSL *s, ssl_ct_validation_cb callback,
                                    void *arg);
-int SSL_CTX_set_ct_validation_callback(SSL_CTX *ctx,
+int __cdecl SSL_CTX_set_ct_validation_callback(SSL_CTX *ctx,
                                        ssl_ct_validation_cb callback,
                                        void *arg);
 #define SSL_disable_ct(s) \
@@ -2221,17 +2221,17 @@ enum {
  * least one valid SCT, or else handshake termination will be requested.  The
  * handshake may continue anyway if SSL_VERIFY_NONE is in effect.
  */
-int SSL_enable_ct(SSL *s, int validation_mode);
-int SSL_CTX_enable_ct(SSL_CTX *ctx, int validation_mode);
+int __cdecl SSL_enable_ct(SSL *s, int validation_mode);
+int __cdecl SSL_CTX_enable_ct(SSL_CTX *ctx, int validation_mode);
 
 /*
  * Report whether a non-NULL callback is enabled.
  */
-int SSL_ct_is_enabled(const SSL *s);
-int SSL_CTX_ct_is_enabled(const SSL_CTX *ctx);
+int __cdecl SSL_ct_is_enabled(const SSL *s);
+int __cdecl SSL_CTX_ct_is_enabled(const SSL_CTX *ctx);
 
 /* Gets the SCTs received from a connection */
-const STACK_OF(SCT) *SSL_get0_peer_scts(SSL *s);
+const STACK_OF(SCT) * __cdecl SSL_get0_peer_scts(SSL *s);
 
 /*
  * Loads the CT log list from the default location.
@@ -2240,7 +2240,7 @@ const STACK_OF(SCT) *SSL_get0_peer_scts(SSL *s);
  * CTLOG_STORE.
  * Returns 1 on success, 0 otherwise.
  */
-int SSL_CTX_set_default_ctlog_list_file(SSL_CTX *ctx);
+int __cdecl SSL_CTX_set_default_ctlog_list_file(SSL_CTX *ctx);
 
 /*
  * Loads the CT log list from the specified file path.
@@ -2249,13 +2249,13 @@ int SSL_CTX_set_default_ctlog_list_file(SSL_CTX *ctx);
  * CTLOG_STORE.
  * Returns 1 on success, 0 otherwise.
  */
-int SSL_CTX_set_ctlog_list_file(SSL_CTX *ctx, const char *path);
+int __cdecl SSL_CTX_set_ctlog_list_file(SSL_CTX *ctx, const char *path);
 
 /*
  * Sets the CT log list used by all SSL connections created from this SSL_CTX.
  * Ownership of the CTLOG_STORE is transferred to the SSL_CTX.
  */
-void SSL_CTX_set0_ctlog_store(SSL_CTX *ctx, CTLOG_STORE *logs);
+void __cdecl SSL_CTX_set0_ctlog_store(SSL_CTX *ctx, CTLOG_STORE *logs);
 
 /*
  * Gets the CT log list used by all SSL connections created from this SSL_CTX.
@@ -2264,7 +2264,7 @@ void SSL_CTX_set0_ctlog_store(SSL_CTX *ctx, CTLOG_STORE *logs);
  * - SSL_CTX_set_ctlog_list_file
  * - SSL_CTX_set_ctlog_store
  */
-const CTLOG_STORE *SSL_CTX_get0_ctlog_store(const SSL_CTX *ctx);
+const CTLOG_STORE * __cdecl SSL_CTX_get0_ctlog_store(const SSL_CTX *ctx);
 
 # endif /* OPENSSL_NO_CT */
 
@@ -2326,33 +2326,33 @@ const CTLOG_STORE *SSL_CTX_get0_ctlog_store(const SSL_CTX *ctx);
 /* Peer CA digest algorithm in certificate */
 # define SSL_SECOP_PEER_CA_MD            (SSL_SECOP_CA_MD | SSL_SECOP_PEER)
 
-void SSL_set_security_level(SSL *s, int level);
-__owur int SSL_get_security_level(const SSL *s);
-void SSL_set_security_callback(SSL *s,
-                               int (*cb) (const SSL *s, const SSL_CTX *ctx,
+void __cdecl SSL_set_security_level(SSL *s, int level);
+__owur int __cdecl SSL_get_security_level(const SSL *s);
+void __cdecl SSL_set_security_callback(SSL *s,
+                               int (__cdecl *cb) (const SSL *s, const SSL_CTX *ctx,
                                           int op, int bits, int nid,
                                           void *other, void *ex));
-int (*SSL_get_security_callback(const SSL *s)) (const SSL *s,
+int (__cdecl *SSL_get_security_callback(const SSL *s)) (const SSL *s,
                                                 const SSL_CTX *ctx, int op,
                                                 int bits, int nid, void *other,
                                                 void *ex);
-void SSL_set0_security_ex_data(SSL *s, void *ex);
-__owur void *SSL_get0_security_ex_data(const SSL *s);
+void __cdecl SSL_set0_security_ex_data(SSL *s, void *ex);
+__owur void * __cdecl SSL_get0_security_ex_data(const SSL *s);
 
-void SSL_CTX_set_security_level(SSL_CTX *ctx, int level);
-__owur int SSL_CTX_get_security_level(const SSL_CTX *ctx);
-void SSL_CTX_set_security_callback(SSL_CTX *ctx,
-                                   int (*cb) (const SSL *s, const SSL_CTX *ctx,
+void __cdecl SSL_CTX_set_security_level(SSL_CTX *ctx, int level);
+__owur int __cdecl SSL_CTX_get_security_level(const SSL_CTX *ctx);
+void __cdecl SSL_CTX_set_security_callback(SSL_CTX *ctx,
+                                   int (__cdecl *cb) (const SSL *s, const SSL_CTX *ctx,
                                               int op, int bits, int nid,
                                               void *other, void *ex));
-int (*SSL_CTX_get_security_callback(const SSL_CTX *ctx)) (const SSL *s,
+int (__cdecl *SSL_CTX_get_security_callback(const SSL_CTX *ctx)) (const SSL *s,
                                                           const SSL_CTX *ctx,
                                                           int op, int bits,
                                                           int nid,
                                                           void *other,
                                                           void *ex);
-void SSL_CTX_set0_security_ex_data(SSL_CTX *ctx, void *ex);
-__owur void *SSL_CTX_get0_security_ex_data(const SSL_CTX *ctx);
+void __cdecl SSL_CTX_set0_security_ex_data(SSL_CTX *ctx, void *ex);
+__owur void * __cdecl SSL_CTX_get0_security_ex_data(const SSL_CTX *ctx);
 
 /* OPENSSL_INIT flag 0x010000 reserved for internal use */
 # define OPENSSL_INIT_NO_LOAD_SSL_STRINGS    0x00100000L
@@ -2361,14 +2361,14 @@ __owur void *SSL_CTX_get0_security_ex_data(const SSL_CTX *ctx);
 # define OPENSSL_INIT_SSL_DEFAULT \
         (OPENSSL_INIT_LOAD_SSL_STRINGS | OPENSSL_INIT_LOAD_CRYPTO_STRINGS)
 
-int OPENSSL_init_ssl(uint64_t opts, const OPENSSL_INIT_SETTINGS *settings);
+int __cdecl OPENSSL_init_ssl(uint64_t opts, const OPENSSL_INIT_SETTINGS *settings);
 
 # ifndef OPENSSL_NO_UNIT_TEST
-__owur const struct openssl_ssl_test_functions *SSL_test_functions(void);
+__owur const struct openssl_ssl_test_functions * __cdecl SSL_test_functions(void);
 # endif
 
-__owur int SSL_free_buffers(SSL *ssl);
-__owur int SSL_alloc_buffers(SSL *ssl);
+__owur int __cdecl SSL_free_buffers(SSL *ssl);
+__owur int __cdecl SSL_alloc_buffers(SSL *ssl);
 
 /* Status codes passed to the decrypt session ticket callback. Some of these
  * are for internal use only and are never passed to the callback. */
@@ -2404,31 +2404,31 @@ typedef int SSL_TICKET_RETURN;
 /* Use the ticket, send a renewed ticket to the client */
 #define SSL_TICKET_RETURN_USE_RENEW         4
 
-typedef int (*SSL_CTX_generate_session_ticket_fn)(SSL *s, void *arg);
-typedef SSL_TICKET_RETURN (*SSL_CTX_decrypt_session_ticket_fn)(SSL *s, SSL_SESSION *ss,
+typedef int (__cdecl *SSL_CTX_generate_session_ticket_fn)(SSL *s, void *arg);
+typedef SSL_TICKET_RETURN (__cdecl *SSL_CTX_decrypt_session_ticket_fn)(SSL *s, SSL_SESSION *ss,
                                                                const unsigned char *keyname,
                                                                size_t keyname_length,
                                                                SSL_TICKET_STATUS status,
                                                                void *arg);
-int SSL_CTX_set_session_ticket_cb(SSL_CTX *ctx,
+int __cdecl SSL_CTX_set_session_ticket_cb(SSL_CTX *ctx,
                                   SSL_CTX_generate_session_ticket_fn gen_cb,
                                   SSL_CTX_decrypt_session_ticket_fn dec_cb,
                                   void *arg);
-int SSL_SESSION_set1_ticket_appdata(SSL_SESSION *ss, const void *data, size_t len);
-int SSL_SESSION_get0_ticket_appdata(SSL_SESSION *ss, void **data, size_t *len);
+int __cdecl SSL_SESSION_set1_ticket_appdata(SSL_SESSION *ss, const void *data, size_t len);
+int __cdecl SSL_SESSION_get0_ticket_appdata(SSL_SESSION *ss, void **data, size_t *len);
 
 extern const char SSL_version_str[];
 
-typedef unsigned int (*DTLS_timer_cb)(SSL *s, unsigned int timer_us);
+typedef unsigned int (__cdecl *DTLS_timer_cb)(SSL *s, unsigned int timer_us);
 
-void DTLS_set_timer_cb(SSL *s, DTLS_timer_cb cb);
+void __cdecl DTLS_set_timer_cb(SSL *s, DTLS_timer_cb cb);
 
 
-typedef int (*SSL_allow_early_data_cb_fn)(SSL *s, void *arg);
-void SSL_CTX_set_allow_early_data_cb(SSL_CTX *ctx,
+typedef int (__cdecl *SSL_allow_early_data_cb_fn)(SSL *s, void *arg);
+void __cdecl SSL_CTX_set_allow_early_data_cb(SSL_CTX *ctx,
                                      SSL_allow_early_data_cb_fn cb,
                                      void *arg);
-void SSL_set_allow_early_data_cb(SSL *s,
+void __cdecl SSL_set_allow_early_data_cb(SSL *s,
                                  SSL_allow_early_data_cb_fn cb,
                                  void *arg);
 
diff --git a/include/openssl/sslerr.h b/include/openssl/sslerr.h
index 3d6850dea3..2b90e60a38 100644
--- a/include/openssl/sslerr.h
+++ b/include/openssl/sslerr.h
@@ -18,7 +18,8 @@
 # ifdef  __cplusplus
 extern "C"
 # endif
-int ERR_load_SSL_strings(void);
+
+int __cdecl ERR_load_SSL_strings(void);
 
 /*
  * SSL function codes.
diff --git a/include/openssl/stack.h b/include/openssl/stack.h
index cfc075057a..c68c8a23c7 100644
--- a/include/openssl/stack.h
+++ b/include/openssl/stack.h
@@ -16,39 +16,39 @@ extern "C" {
 
 typedef struct stack_st OPENSSL_STACK; /* Use STACK_OF(...) instead */
 
-typedef int (*OPENSSL_sk_compfunc)(const void *, const void *);
-typedef void (*OPENSSL_sk_freefunc)(void *);
-typedef void *(*OPENSSL_sk_copyfunc)(const void *);
+typedef int (__cdecl *OPENSSL_sk_compfunc)(const void *, const void *);
+typedef void (__cdecl *OPENSSL_sk_freefunc)(void *);
+typedef void *(__cdecl *OPENSSL_sk_copyfunc)(const void *);
 
-int OPENSSL_sk_num(const OPENSSL_STACK *);
-void *OPENSSL_sk_value(const OPENSSL_STACK *, int);
+int __cdecl OPENSSL_sk_num(const OPENSSL_STACK *);
+void * __cdecl OPENSSL_sk_value(const OPENSSL_STACK *, int);
 
-void *OPENSSL_sk_set(OPENSSL_STACK *st, int i, const void *data);
+void * __cdecl OPENSSL_sk_set(OPENSSL_STACK *st, int i, const void *data);
 
-OPENSSL_STACK *OPENSSL_sk_new(OPENSSL_sk_compfunc cmp);
-OPENSSL_STACK *OPENSSL_sk_new_null(void);
-OPENSSL_STACK *OPENSSL_sk_new_reserve(OPENSSL_sk_compfunc c, int n);
-int OPENSSL_sk_reserve(OPENSSL_STACK *st, int n);
-void OPENSSL_sk_free(OPENSSL_STACK *);
-void OPENSSL_sk_pop_free(OPENSSL_STACK *st, void (*func) (void *));
-OPENSSL_STACK *OPENSSL_sk_deep_copy(const OPENSSL_STACK *,
+OPENSSL_STACK * __cdecl OPENSSL_sk_new(OPENSSL_sk_compfunc cmp);
+OPENSSL_STACK * __cdecl OPENSSL_sk_new_null(void);
+OPENSSL_STACK * __cdecl OPENSSL_sk_new_reserve(OPENSSL_sk_compfunc c, int n);
+int __cdecl OPENSSL_sk_reserve(OPENSSL_STACK *st, int n);
+void __cdecl OPENSSL_sk_free(OPENSSL_STACK *);
+void __cdecl OPENSSL_sk_pop_free(OPENSSL_STACK *st, void (__cdecl *func) (void *));
+OPENSSL_STACK * __cdecl OPENSSL_sk_deep_copy(const OPENSSL_STACK *,
                                     OPENSSL_sk_copyfunc c,
                                     OPENSSL_sk_freefunc f);
-int OPENSSL_sk_insert(OPENSSL_STACK *sk, const void *data, int where);
-void *OPENSSL_sk_delete(OPENSSL_STACK *st, int loc);
-void *OPENSSL_sk_delete_ptr(OPENSSL_STACK *st, const void *p);
-int OPENSSL_sk_find(OPENSSL_STACK *st, const void *data);
-int OPENSSL_sk_find_ex(OPENSSL_STACK *st, const void *data);
-int OPENSSL_sk_push(OPENSSL_STACK *st, const void *data);
-int OPENSSL_sk_unshift(OPENSSL_STACK *st, const void *data);
-void *OPENSSL_sk_shift(OPENSSL_STACK *st);
-void *OPENSSL_sk_pop(OPENSSL_STACK *st);
-void OPENSSL_sk_zero(OPENSSL_STACK *st);
-OPENSSL_sk_compfunc OPENSSL_sk_set_cmp_func(OPENSSL_STACK *sk,
+int __cdecl OPENSSL_sk_insert(OPENSSL_STACK *sk, const void *data, int where);
+void * __cdecl OPENSSL_sk_delete(OPENSSL_STACK *st, int loc);
+void * __cdecl OPENSSL_sk_delete_ptr(OPENSSL_STACK *st, const void *p);
+int __cdecl OPENSSL_sk_find(OPENSSL_STACK *st, const void *data);
+int __cdecl OPENSSL_sk_find_ex(OPENSSL_STACK *st, const void *data);
+int __cdecl OPENSSL_sk_push(OPENSSL_STACK *st, const void *data);
+int __cdecl OPENSSL_sk_unshift(OPENSSL_STACK *st, const void *data);
+void * __cdecl OPENSSL_sk_shift(OPENSSL_STACK *st);
+void * __cdecl OPENSSL_sk_pop(OPENSSL_STACK *st);
+void __cdecl OPENSSL_sk_zero(OPENSSL_STACK *st);
+OPENSSL_sk_compfunc __cdecl OPENSSL_sk_set_cmp_func(OPENSSL_STACK *sk,
                                             OPENSSL_sk_compfunc cmp);
-OPENSSL_STACK *OPENSSL_sk_dup(const OPENSSL_STACK *st);
-void OPENSSL_sk_sort(OPENSSL_STACK *st);
-int OPENSSL_sk_is_sorted(const OPENSSL_STACK *st);
+OPENSSL_STACK * __cdecl OPENSSL_sk_dup(const OPENSSL_STACK *st);
+void __cdecl OPENSSL_sk_sort(OPENSSL_STACK *st);
+int __cdecl OPENSSL_sk_is_sorted(const OPENSSL_STACK *st);
 
 # if OPENSSL_API_COMPAT < 0x10100000L
 #  define _STACK OPENSSL_STACK
diff --git a/include/openssl/store.h b/include/openssl/store.h
index a40a7339e6..f03247c2cd 100644
--- a/include/openssl/store.h
+++ b/include/openssl/store.h
@@ -46,7 +46,7 @@ typedef OSSL_STORE_INFO *(*OSSL_STORE_post_process_info_fn)(OSSL_STORE_INFO *,
  * Returns a context reference which represents the channel to communicate
  * through.
  */
-OSSL_STORE_CTX *OSSL_STORE_open(const char *uri, const UI_METHOD *ui_method,
+OSSL_STORE_CTX * __cdecl OSSL_STORE_open(const char *uri, const UI_METHOD *ui_method,
                                 void *ui_data,
                                 OSSL_STORE_post_process_info_fn post_process,
                                 void *post_process_data);
@@ -57,8 +57,8 @@ OSSL_STORE_CTX *OSSL_STORE_open(const char *uri, const UI_METHOD *ui_method,
  * determine which loader is used), except for common commands (see below).
  * Each command takes different arguments.
  */
-int OSSL_STORE_ctrl(OSSL_STORE_CTX *ctx, int cmd, ... /* args */);
-int OSSL_STORE_vctrl(OSSL_STORE_CTX *ctx, int cmd, va_list args);
+int __cdecl OSSL_STORE_ctrl(OSSL_STORE_CTX *ctx, int cmd, ... /* args */);
+int __cdecl OSSL_STORE_vctrl(OSSL_STORE_CTX *ctx, int cmd, va_list args);
 
 /*
  * Common ctrl commands that different loaders may choose to support.
@@ -76,25 +76,25 @@ int OSSL_STORE_vctrl(OSSL_STORE_CTX *ctx, int cmd, va_list args);
  * NULL is returned on error, which may include that the data found at the URI
  * can't be figured out for certain or is ambiguous.
  */
-OSSL_STORE_INFO *OSSL_STORE_load(OSSL_STORE_CTX *ctx);
+OSSL_STORE_INFO * __cdecl OSSL_STORE_load(OSSL_STORE_CTX *ctx);
 
 /*
  * Check if end of data (end of file) is reached
  * Returns 1 on end, 0 otherwise.
  */
-int OSSL_STORE_eof(OSSL_STORE_CTX *ctx);
+int __cdecl OSSL_STORE_eof(OSSL_STORE_CTX *ctx);
 
 /*
  * Check if an error occurred
  * Returns 1 if it did, 0 otherwise.
  */
-int OSSL_STORE_error(OSSL_STORE_CTX *ctx);
+int __cdecl OSSL_STORE_error(OSSL_STORE_CTX *ctx);
 
 /*
  * Close the channel
  * Returns 1 on success, 0 on error.
  */
-int OSSL_STORE_close(OSSL_STORE_CTX *ctx);
+int __cdecl OSSL_STORE_close(OSSL_STORE_CTX *ctx);
 
 
 /*-
@@ -120,36 +120,36 @@ int OSSL_STORE_close(OSSL_STORE_CTX *ctx);
  * In all cases, ownership of the object is transferred to the OSSL_STORE_INFO
  * and will therefore be freed when the OSSL_STORE_INFO is freed.
  */
-OSSL_STORE_INFO *OSSL_STORE_INFO_new_NAME(char *name);
-int OSSL_STORE_INFO_set0_NAME_description(OSSL_STORE_INFO *info, char *desc);
-OSSL_STORE_INFO *OSSL_STORE_INFO_new_PARAMS(EVP_PKEY *params);
-OSSL_STORE_INFO *OSSL_STORE_INFO_new_PKEY(EVP_PKEY *pkey);
-OSSL_STORE_INFO *OSSL_STORE_INFO_new_CERT(X509 *x509);
-OSSL_STORE_INFO *OSSL_STORE_INFO_new_CRL(X509_CRL *crl);
+OSSL_STORE_INFO * __cdecl OSSL_STORE_INFO_new_NAME(char *name);
+int __cdecl OSSL_STORE_INFO_set0_NAME_description(OSSL_STORE_INFO *info, char *desc);
+OSSL_STORE_INFO * __cdecl OSSL_STORE_INFO_new_PARAMS(EVP_PKEY *params);
+OSSL_STORE_INFO * __cdecl OSSL_STORE_INFO_new_PKEY(EVP_PKEY *pkey);
+OSSL_STORE_INFO * __cdecl OSSL_STORE_INFO_new_CERT(X509 *x509);
+OSSL_STORE_INFO * __cdecl OSSL_STORE_INFO_new_CRL(X509_CRL *crl);
 
 /*
  * Functions to try to extract data from a OSSL_STORE_INFO.
  */
-int OSSL_STORE_INFO_get_type(const OSSL_STORE_INFO *info);
-const char *OSSL_STORE_INFO_get0_NAME(const OSSL_STORE_INFO *info);
-char *OSSL_STORE_INFO_get1_NAME(const OSSL_STORE_INFO *info);
-const char *OSSL_STORE_INFO_get0_NAME_description(const OSSL_STORE_INFO *info);
-char *OSSL_STORE_INFO_get1_NAME_description(const OSSL_STORE_INFO *info);
-EVP_PKEY *OSSL_STORE_INFO_get0_PARAMS(const OSSL_STORE_INFO *info);
-EVP_PKEY *OSSL_STORE_INFO_get1_PARAMS(const OSSL_STORE_INFO *info);
-EVP_PKEY *OSSL_STORE_INFO_get0_PKEY(const OSSL_STORE_INFO *info);
-EVP_PKEY *OSSL_STORE_INFO_get1_PKEY(const OSSL_STORE_INFO *info);
-X509 *OSSL_STORE_INFO_get0_CERT(const OSSL_STORE_INFO *info);
-X509 *OSSL_STORE_INFO_get1_CERT(const OSSL_STORE_INFO *info);
-X509_CRL *OSSL_STORE_INFO_get0_CRL(const OSSL_STORE_INFO *info);
-X509_CRL *OSSL_STORE_INFO_get1_CRL(const OSSL_STORE_INFO *info);
-
-const char *OSSL_STORE_INFO_type_string(int type);
+int __cdecl OSSL_STORE_INFO_get_type(const OSSL_STORE_INFO *info);
+const char * __cdecl OSSL_STORE_INFO_get0_NAME(const OSSL_STORE_INFO *info);
+char * __cdecl OSSL_STORE_INFO_get1_NAME(const OSSL_STORE_INFO *info);
+const char * __cdecl OSSL_STORE_INFO_get0_NAME_description(const OSSL_STORE_INFO *info);
+char * __cdecl OSSL_STORE_INFO_get1_NAME_description(const OSSL_STORE_INFO *info);
+EVP_PKEY * __cdecl OSSL_STORE_INFO_get0_PARAMS(const OSSL_STORE_INFO *info);
+EVP_PKEY * __cdecl OSSL_STORE_INFO_get1_PARAMS(const OSSL_STORE_INFO *info);
+EVP_PKEY * __cdecl OSSL_STORE_INFO_get0_PKEY(const OSSL_STORE_INFO *info);
+EVP_PKEY * __cdecl OSSL_STORE_INFO_get1_PKEY(const OSSL_STORE_INFO *info);
+X509 * __cdecl OSSL_STORE_INFO_get0_CERT(const OSSL_STORE_INFO *info);
+X509 * __cdecl OSSL_STORE_INFO_get1_CERT(const OSSL_STORE_INFO *info);
+X509_CRL * __cdecl OSSL_STORE_INFO_get0_CRL(const OSSL_STORE_INFO *info);
+X509_CRL * __cdecl OSSL_STORE_INFO_get1_CRL(const OSSL_STORE_INFO *info);
+
+const char * __cdecl OSSL_STORE_INFO_type_string(int type);
 
 /*
  * Free the OSSL_STORE_INFO
  */
-void OSSL_STORE_INFO_free(OSSL_STORE_INFO *info);
+void __cdecl OSSL_STORE_INFO_free(OSSL_STORE_INFO *info);
 
 
 /*-
@@ -164,41 +164,41 @@ void OSSL_STORE_INFO_free(OSSL_STORE_INFO *info);
 # define OSSL_STORE_SEARCH_BY_ALIAS             4
 
 /* To check what search types the scheme handler supports */
-int OSSL_STORE_supports_search(OSSL_STORE_CTX *ctx, int search_type);
+int __cdecl OSSL_STORE_supports_search(OSSL_STORE_CTX *ctx, int search_type);
 
 /* Search term constructors */
 /*
  * The input is considered to be owned by the caller, and must therefore
  * remain present throughout the lifetime of the returned OSSL_STORE_SEARCH
  */
-OSSL_STORE_SEARCH *OSSL_STORE_SEARCH_by_name(X509_NAME *name);
-OSSL_STORE_SEARCH *OSSL_STORE_SEARCH_by_issuer_serial(X509_NAME *name,
+OSSL_STORE_SEARCH * __cdecl OSSL_STORE_SEARCH_by_name(X509_NAME *name);
+OSSL_STORE_SEARCH * __cdecl OSSL_STORE_SEARCH_by_issuer_serial(X509_NAME *name,
                                                       const ASN1_INTEGER
                                                       *serial);
-OSSL_STORE_SEARCH *OSSL_STORE_SEARCH_by_key_fingerprint(const EVP_MD *digest,
+OSSL_STORE_SEARCH * __cdecl OSSL_STORE_SEARCH_by_key_fingerprint(const EVP_MD *digest,
                                                         const unsigned char
                                                         *bytes, size_t len);
-OSSL_STORE_SEARCH *OSSL_STORE_SEARCH_by_alias(const char *alias);
+OSSL_STORE_SEARCH * __cdecl OSSL_STORE_SEARCH_by_alias(const char *alias);
 
 /* Search term destructor */
-void OSSL_STORE_SEARCH_free(OSSL_STORE_SEARCH *search);
+void __cdecl OSSL_STORE_SEARCH_free(OSSL_STORE_SEARCH *search);
 
 /* Search term accessors */
-int OSSL_STORE_SEARCH_get_type(const OSSL_STORE_SEARCH *criterion);
-X509_NAME *OSSL_STORE_SEARCH_get0_name(OSSL_STORE_SEARCH *criterion);
-const ASN1_INTEGER *OSSL_STORE_SEARCH_get0_serial(const OSSL_STORE_SEARCH
+int __cdecl OSSL_STORE_SEARCH_get_type(const OSSL_STORE_SEARCH *criterion);
+X509_NAME * __cdecl OSSL_STORE_SEARCH_get0_name(OSSL_STORE_SEARCH *criterion);
+const ASN1_INTEGER * __cdecl OSSL_STORE_SEARCH_get0_serial(const OSSL_STORE_SEARCH
                                                   *criterion);
-const unsigned char *OSSL_STORE_SEARCH_get0_bytes(const OSSL_STORE_SEARCH
+const unsigned char * __cdecl OSSL_STORE_SEARCH_get0_bytes(const OSSL_STORE_SEARCH
                                                   *criterion, size_t *length);
-const char *OSSL_STORE_SEARCH_get0_string(const OSSL_STORE_SEARCH *criterion);
-const EVP_MD *OSSL_STORE_SEARCH_get0_digest(const OSSL_STORE_SEARCH *criterion);
+const char * __cdecl OSSL_STORE_SEARCH_get0_string(const OSSL_STORE_SEARCH *criterion);
+const EVP_MD * __cdecl OSSL_STORE_SEARCH_get0_digest(const OSSL_STORE_SEARCH *criterion);
 
 /*
  * Add search criterion and expected return type (which can be unspecified)
  * to the loading channel.  This MUST happen before the first OSSL_STORE_load().
  */
-int OSSL_STORE_expect(OSSL_STORE_CTX *ctx, int expected_type);
-int OSSL_STORE_find(OSSL_STORE_CTX *ctx, OSSL_STORE_SEARCH *search);
+int __cdecl OSSL_STORE_expect(OSSL_STORE_CTX *ctx, int expected_type);
+int __cdecl OSSL_STORE_find(OSSL_STORE_CTX *ctx, OSSL_STORE_SEARCH *search);
 
 
 /*-
@@ -210,53 +210,53 @@ int OSSL_STORE_find(OSSL_STORE_CTX *ctx, OSSL_STORE_SEARCH *search);
  */
 
 typedef struct ossl_store_loader_st OSSL_STORE_LOADER;
-OSSL_STORE_LOADER *OSSL_STORE_LOADER_new(ENGINE *e, const char *scheme);
-const ENGINE *OSSL_STORE_LOADER_get0_engine(const OSSL_STORE_LOADER *loader);
-const char *OSSL_STORE_LOADER_get0_scheme(const OSSL_STORE_LOADER *loader);
+OSSL_STORE_LOADER * __cdecl OSSL_STORE_LOADER_new(ENGINE *e, const char *scheme);
+const ENGINE * __cdecl OSSL_STORE_LOADER_get0_engine(const OSSL_STORE_LOADER *loader);
+const char * __cdecl OSSL_STORE_LOADER_get0_scheme(const OSSL_STORE_LOADER *loader);
 /* struct ossl_store_loader_ctx_st is defined differently by each loader */
 typedef struct ossl_store_loader_ctx_st OSSL_STORE_LOADER_CTX;
-typedef OSSL_STORE_LOADER_CTX *(*OSSL_STORE_open_fn)(const OSSL_STORE_LOADER
+typedef OSSL_STORE_LOADER_CTX *(__cdecl *OSSL_STORE_open_fn)(const OSSL_STORE_LOADER
                                                      *loader,
                                                      const char *uri,
                                                      const UI_METHOD *ui_method,
                                                      void *ui_data);
-int OSSL_STORE_LOADER_set_open(OSSL_STORE_LOADER *loader,
+int __cdecl OSSL_STORE_LOADER_set_open(OSSL_STORE_LOADER *loader,
                                OSSL_STORE_open_fn open_function);
-typedef int (*OSSL_STORE_ctrl_fn)(OSSL_STORE_LOADER_CTX *ctx, int cmd,
+typedef int (__cdecl *OSSL_STORE_ctrl_fn)(OSSL_STORE_LOADER_CTX *ctx, int cmd,
                                   va_list args);
-int OSSL_STORE_LOADER_set_ctrl(OSSL_STORE_LOADER *loader,
+int __cdecl OSSL_STORE_LOADER_set_ctrl(OSSL_STORE_LOADER *loader,
                                OSSL_STORE_ctrl_fn ctrl_function);
-typedef int (*OSSL_STORE_expect_fn)(OSSL_STORE_LOADER_CTX *ctx, int expected);
-int OSSL_STORE_LOADER_set_expect(OSSL_STORE_LOADER *loader,
+typedef int (__cdecl *OSSL_STORE_expect_fn)(OSSL_STORE_LOADER_CTX *ctx, int expected);
+int __cdecl OSSL_STORE_LOADER_set_expect(OSSL_STORE_LOADER *loader,
                                  OSSL_STORE_expect_fn expect_function);
-typedef int (*OSSL_STORE_find_fn)(OSSL_STORE_LOADER_CTX *ctx,
+typedef int (__cdecl *OSSL_STORE_find_fn)(OSSL_STORE_LOADER_CTX *ctx,
                                   OSSL_STORE_SEARCH *criteria);
-int OSSL_STORE_LOADER_set_find(OSSL_STORE_LOADER *loader,
+int __cdecl OSSL_STORE_LOADER_set_find(OSSL_STORE_LOADER *loader,
                                OSSL_STORE_find_fn find_function);
-typedef OSSL_STORE_INFO *(*OSSL_STORE_load_fn)(OSSL_STORE_LOADER_CTX *ctx,
+typedef OSSL_STORE_INFO *(__cdecl *OSSL_STORE_load_fn)(OSSL_STORE_LOADER_CTX *ctx,
                                                const UI_METHOD *ui_method,
                                                void *ui_data);
-int OSSL_STORE_LOADER_set_load(OSSL_STORE_LOADER *loader,
+int __cdecl OSSL_STORE_LOADER_set_load(OSSL_STORE_LOADER *loader,
                                OSSL_STORE_load_fn load_function);
-typedef int (*OSSL_STORE_eof_fn)(OSSL_STORE_LOADER_CTX *ctx);
-int OSSL_STORE_LOADER_set_eof(OSSL_STORE_LOADER *loader,
+typedef int (__cdecl *OSSL_STORE_eof_fn)(OSSL_STORE_LOADER_CTX *ctx);
+int __cdecl OSSL_STORE_LOADER_set_eof(OSSL_STORE_LOADER *loader,
                               OSSL_STORE_eof_fn eof_function);
-typedef int (*OSSL_STORE_error_fn)(OSSL_STORE_LOADER_CTX *ctx);
-int OSSL_STORE_LOADER_set_error(OSSL_STORE_LOADER *loader,
+typedef int (__cdecl *OSSL_STORE_error_fn)(OSSL_STORE_LOADER_CTX *ctx);
+int __cdecl OSSL_STORE_LOADER_set_error(OSSL_STORE_LOADER *loader,
                                 OSSL_STORE_error_fn error_function);
-typedef int (*OSSL_STORE_close_fn)(OSSL_STORE_LOADER_CTX *ctx);
-int OSSL_STORE_LOADER_set_close(OSSL_STORE_LOADER *loader,
+typedef int (__cdecl *OSSL_STORE_close_fn)(OSSL_STORE_LOADER_CTX *ctx);
+int __cdecl OSSL_STORE_LOADER_set_close(OSSL_STORE_LOADER *loader,
                                 OSSL_STORE_close_fn close_function);
-void OSSL_STORE_LOADER_free(OSSL_STORE_LOADER *loader);
+void __cdecl OSSL_STORE_LOADER_free(OSSL_STORE_LOADER *loader);
 
-int OSSL_STORE_register_loader(OSSL_STORE_LOADER *loader);
-OSSL_STORE_LOADER *OSSL_STORE_unregister_loader(const char *scheme);
+int __cdecl OSSL_STORE_register_loader(OSSL_STORE_LOADER *loader);
+OSSL_STORE_LOADER * __cdecl OSSL_STORE_unregister_loader(const char *scheme);
 
 /*-
  *  Functions to list STORE loaders
  *  -------------------------------
  */
-int OSSL_STORE_do_all_loaders(void (*do_function) (const OSSL_STORE_LOADER
+int __cdecl OSSL_STORE_do_all_loaders(void (*do_function) (const OSSL_STORE_LOADER
                                                    *loader, void *do_arg),
                               void *do_arg);
 
diff --git a/include/openssl/storeerr.h b/include/openssl/storeerr.h
index 190eab07fb..26c17f7997 100644
--- a/include/openssl/storeerr.h
+++ b/include/openssl/storeerr.h
@@ -18,7 +18,7 @@
 # ifdef  __cplusplus
 extern "C"
 # endif
-int ERR_load_OSSL_STORE_strings(void);
+int __cdecl ERR_load_OSSL_STORE_strings(void);
 
 /*
  * OSSL_STORE function codes.
diff --git a/include/openssl/tls1.h b/include/openssl/tls1.h
index 76d9fda46e..3300f0f495 100644
--- a/include/openssl/tls1.h
+++ b/include/openssl/tls1.h
@@ -208,13 +208,13 @@ extern "C" {
 # define TLSEXT_max_fragment_length_2048        3
 # define TLSEXT_max_fragment_length_4096        4
 
-int SSL_CTX_set_tlsext_max_fragment_length(SSL_CTX *ctx, uint8_t mode);
-int SSL_set_tlsext_max_fragment_length(SSL *ssl, uint8_t mode);
+int __cdecl SSL_CTX_set_tlsext_max_fragment_length(SSL_CTX *ctx, uint8_t mode);
+int __cdecl SSL_set_tlsext_max_fragment_length(SSL *ssl, uint8_t mode);
 
 # define TLSEXT_MAXLEN_host_name 255
 
-__owur const char *SSL_get_servername(const SSL *s, const int type);
-__owur int SSL_get_servername_type(const SSL *s);
+__owur const char * __cdecl SSL_get_servername(const SSL *s, const int type);
+__owur int __cdecl SSL_get_servername_type(const SSL *s);
 /*
  * SSL_export_keying_material exports a value derived from the master secret,
  * as specified in RFC 5705. It writes |olen| bytes to |out| given a label and
@@ -222,7 +222,7 @@ __owur int SSL_get_servername_type(const SSL *s);
  * flag controls whether a context is included.) It returns 1 on success and
  * 0 or -1 otherwise.
  */
-__owur int SSL_export_keying_material(SSL *s, unsigned char *out, size_t olen,
+__owur int __cdecl SSL_export_keying_material(SSL *s, unsigned char *out, size_t olen,
                                       const char *label, size_t llen,
                                       const unsigned char *context,
                                       size_t contextlen, int use_context);
@@ -234,24 +234,24 @@ __owur int SSL_export_keying_material(SSL *s, unsigned char *out, size_t olen,
  * |olen| bytes to |out| given a label and optional context. It
  * returns 1 on success and 0 otherwise.
  */
-__owur int SSL_export_keying_material_early(SSL *s, unsigned char *out,
+__owur int __cdecl SSL_export_keying_material_early(SSL *s, unsigned char *out,
                                             size_t olen, const char *label,
                                             size_t llen,
                                             const unsigned char *context,
                                             size_t contextlen);
 
-int SSL_get_peer_signature_type_nid(const SSL *s, int *pnid);
-int SSL_get_signature_type_nid(const SSL *s, int *pnid);
+int __cdecl SSL_get_peer_signature_type_nid(const SSL *s, int *pnid);
+int __cdecl SSL_get_signature_type_nid(const SSL *s, int *pnid);
 
-int SSL_get_sigalgs(SSL *s, int idx,
+int __cdecl SSL_get_sigalgs(SSL *s, int idx,
                     int *psign, int *phash, int *psignandhash,
                     unsigned char *rsig, unsigned char *rhash);
 
-int SSL_get_shared_sigalgs(SSL *s, int idx,
+int __cdecl SSL_get_shared_sigalgs(SSL *s, int idx,
                            int *psign, int *phash, int *psignandhash,
                            unsigned char *rsig, unsigned char *rhash);
 
-__owur int SSL_check_chain(SSL *s, X509 *x, EVP_PKEY *pk, STACK_OF(X509) *chain);
+__owur int __cdecl SSL_check_chain(SSL *s, X509 *x, EVP_PKEY *pk, STACK_OF(X509) *chain);
 
 # define SSL_set_tlsext_host_name(s,name) \
         SSL_ctrl(s,SSL_CTRL_SET_TLSEXT_HOSTNAME,TLSEXT_NAMETYPE_host_name,\
@@ -259,7 +259,7 @@ __owur int SSL_check_chain(SSL *s, X509 *x, EVP_PKEY *pk, STACK_OF(X509) *chain)
 
 # define SSL_set_tlsext_debug_callback(ssl, cb) \
         SSL_callback_ctrl(ssl,SSL_CTRL_SET_TLSEXT_DEBUG_CB,\
-                (void (*)(void))cb)
+                (void (__cdecl *)(void))cb)
 
 # define SSL_set_tlsext_debug_arg(ssl, arg) \
         SSL_ctrl(ssl,SSL_CTRL_SET_TLSEXT_DEBUG_ARG,0,arg)
@@ -290,7 +290,7 @@ __owur int SSL_check_chain(SSL *s, X509 *x, EVP_PKEY *pk, STACK_OF(X509) *chain)
 
 # define SSL_CTX_set_tlsext_servername_callback(ctx, cb) \
         SSL_CTX_callback_ctrl(ctx,SSL_CTRL_SET_TLSEXT_SERVERNAME_CB,\
-                (void (*)(void))cb)
+                (void (__cdecl *)(void))cb)
 
 # define SSL_TLSEXT_ERR_OK 0
 # define SSL_TLSEXT_ERR_ALERT_WARNING 1
@@ -309,7 +309,7 @@ __owur int SSL_check_chain(SSL *s, X509 *x, EVP_PKEY *pk, STACK_OF(X509) *chain)
         SSL_CTX_ctrl(ssl,SSL_CTRL_GET_TLSEXT_STATUS_REQ_CB,0,(void *)cb)
 # define SSL_CTX_set_tlsext_status_cb(ssl, cb) \
         SSL_CTX_callback_ctrl(ssl,SSL_CTRL_SET_TLSEXT_STATUS_REQ_CB,\
-                (void (*)(void))cb)
+                (void (__cdecl *)(void))cb)
 
 # define SSL_CTX_get_tlsext_status_arg(ssl, arg) \
         SSL_CTX_ctrl(ssl,SSL_CTRL_GET_TLSEXT_STATUS_REQ_CB_ARG,0,arg)
@@ -324,7 +324,7 @@ __owur int SSL_check_chain(SSL *s, X509 *x, EVP_PKEY *pk, STACK_OF(X509) *chain)
 
 # define SSL_CTX_set_tlsext_ticket_key_cb(ssl, cb) \
         SSL_CTX_callback_ctrl(ssl,SSL_CTRL_SET_TLSEXT_TICKET_KEY_CB,\
-                (void (*)(void))cb)
+                (void (__cdecl *)(void))cb)
 
 # ifndef OPENSSL_NO_HEARTBEATS
 #  define SSL_DTLSEXT_HB_ENABLED                   0x01
diff --git a/include/openssl/ts.h b/include/openssl/ts.h
index 3b58aa527e..2fa90dbfea 100644
--- a/include/openssl/ts.h
+++ b/include/openssl/ts.h
@@ -68,216 +68,216 @@ DEFINE_STACK_OF(ESS_CERT_ID_V2)
 
 typedef struct TS_resp_st TS_RESP;
 
-TS_REQ *TS_REQ_new(void);
-void TS_REQ_free(TS_REQ *a);
-int i2d_TS_REQ(const TS_REQ *a, unsigned char **pp);
-TS_REQ *d2i_TS_REQ(TS_REQ **a, const unsigned char **pp, long length);
+TS_REQ * __cdecl TS_REQ_new(void);
+void __cdecl TS_REQ_free(TS_REQ *a);
+int __cdecl i2d_TS_REQ(const TS_REQ *a, unsigned char **pp);
+TS_REQ * __cdecl d2i_TS_REQ(TS_REQ **a, const unsigned char **pp, long length);
 
-TS_REQ *TS_REQ_dup(TS_REQ *a);
+TS_REQ * __cdecl TS_REQ_dup(TS_REQ *a);
 
 #ifndef OPENSSL_NO_STDIO
-TS_REQ *d2i_TS_REQ_fp(FILE *fp, TS_REQ **a);
-int i2d_TS_REQ_fp(FILE *fp, TS_REQ *a);
+TS_REQ * __cdecl d2i_TS_REQ_fp(FILE *fp, TS_REQ **a);
+int __cdecl i2d_TS_REQ_fp(FILE *fp, TS_REQ *a);
 #endif
-TS_REQ *d2i_TS_REQ_bio(BIO *fp, TS_REQ **a);
-int i2d_TS_REQ_bio(BIO *fp, TS_REQ *a);
+TS_REQ * __cdecl d2i_TS_REQ_bio(BIO *fp, TS_REQ **a);
+int __cdecl i2d_TS_REQ_bio(BIO *fp, TS_REQ *a);
 
-TS_MSG_IMPRINT *TS_MSG_IMPRINT_new(void);
-void TS_MSG_IMPRINT_free(TS_MSG_IMPRINT *a);
-int i2d_TS_MSG_IMPRINT(const TS_MSG_IMPRINT *a, unsigned char **pp);
-TS_MSG_IMPRINT *d2i_TS_MSG_IMPRINT(TS_MSG_IMPRINT **a,
+TS_MSG_IMPRINT * __cdecl TS_MSG_IMPRINT_new(void);
+void __cdecl TS_MSG_IMPRINT_free(TS_MSG_IMPRINT *a);
+int __cdecl i2d_TS_MSG_IMPRINT(const TS_MSG_IMPRINT *a, unsigned char **pp);
+TS_MSG_IMPRINT * __cdecl d2i_TS_MSG_IMPRINT(TS_MSG_IMPRINT **a,
                                    const unsigned char **pp, long length);
 
-TS_MSG_IMPRINT *TS_MSG_IMPRINT_dup(TS_MSG_IMPRINT *a);
+TS_MSG_IMPRINT * __cdecl TS_MSG_IMPRINT_dup(TS_MSG_IMPRINT *a);
 
 #ifndef OPENSSL_NO_STDIO
-TS_MSG_IMPRINT *d2i_TS_MSG_IMPRINT_fp(FILE *fp, TS_MSG_IMPRINT **a);
-int i2d_TS_MSG_IMPRINT_fp(FILE *fp, TS_MSG_IMPRINT *a);
+TS_MSG_IMPRINT * __cdecl d2i_TS_MSG_IMPRINT_fp(FILE *fp, TS_MSG_IMPRINT **a);
+int __cdecl i2d_TS_MSG_IMPRINT_fp(FILE *fp, TS_MSG_IMPRINT *a);
 #endif
-TS_MSG_IMPRINT *d2i_TS_MSG_IMPRINT_bio(BIO *bio, TS_MSG_IMPRINT **a);
-int i2d_TS_MSG_IMPRINT_bio(BIO *bio, TS_MSG_IMPRINT *a);
+TS_MSG_IMPRINT * __cdecl d2i_TS_MSG_IMPRINT_bio(BIO *bio, TS_MSG_IMPRINT **a);
+int __cdecl i2d_TS_MSG_IMPRINT_bio(BIO *bio, TS_MSG_IMPRINT *a);
 
-TS_RESP *TS_RESP_new(void);
-void TS_RESP_free(TS_RESP *a);
-int i2d_TS_RESP(const TS_RESP *a, unsigned char **pp);
-TS_RESP *d2i_TS_RESP(TS_RESP **a, const unsigned char **pp, long length);
-TS_TST_INFO *PKCS7_to_TS_TST_INFO(PKCS7 *token);
-TS_RESP *TS_RESP_dup(TS_RESP *a);
+TS_RESP * __cdecl TS_RESP_new(void);
+void __cdecl TS_RESP_free(TS_RESP *a);
+int __cdecl i2d_TS_RESP(const TS_RESP *a, unsigned char **pp);
+TS_RESP * __cdecl d2i_TS_RESP(TS_RESP **a, const unsigned char **pp, long length);
+TS_TST_INFO * __cdecl PKCS7_to_TS_TST_INFO(PKCS7 *token);
+TS_RESP * __cdecl TS_RESP_dup(TS_RESP *a);
 
 #ifndef OPENSSL_NO_STDIO
-TS_RESP *d2i_TS_RESP_fp(FILE *fp, TS_RESP **a);
-int i2d_TS_RESP_fp(FILE *fp, TS_RESP *a);
+TS_RESP * __cdecl d2i_TS_RESP_fp(FILE *fp, TS_RESP **a);
+int __cdecl i2d_TS_RESP_fp(FILE *fp, TS_RESP *a);
 #endif
-TS_RESP *d2i_TS_RESP_bio(BIO *bio, TS_RESP **a);
-int i2d_TS_RESP_bio(BIO *bio, TS_RESP *a);
+TS_RESP * __cdecl d2i_TS_RESP_bio(BIO *bio, TS_RESP **a);
+int __cdecl i2d_TS_RESP_bio(BIO *bio, TS_RESP *a);
 
-TS_STATUS_INFO *TS_STATUS_INFO_new(void);
-void TS_STATUS_INFO_free(TS_STATUS_INFO *a);
-int i2d_TS_STATUS_INFO(const TS_STATUS_INFO *a, unsigned char **pp);
-TS_STATUS_INFO *d2i_TS_STATUS_INFO(TS_STATUS_INFO **a,
+TS_STATUS_INFO * __cdecl TS_STATUS_INFO_new(void);
+void __cdecl TS_STATUS_INFO_free(TS_STATUS_INFO *a);
+int __cdecl i2d_TS_STATUS_INFO(const TS_STATUS_INFO *a, unsigned char **pp);
+TS_STATUS_INFO * __cdecl d2i_TS_STATUS_INFO(TS_STATUS_INFO **a,
                                    const unsigned char **pp, long length);
-TS_STATUS_INFO *TS_STATUS_INFO_dup(TS_STATUS_INFO *a);
+TS_STATUS_INFO * __cdecl TS_STATUS_INFO_dup(TS_STATUS_INFO *a);
 
-TS_TST_INFO *TS_TST_INFO_new(void);
-void TS_TST_INFO_free(TS_TST_INFO *a);
-int i2d_TS_TST_INFO(const TS_TST_INFO *a, unsigned char **pp);
-TS_TST_INFO *d2i_TS_TST_INFO(TS_TST_INFO **a, const unsigned char **pp,
+TS_TST_INFO * __cdecl TS_TST_INFO_new(void);
+void __cdecl TS_TST_INFO_free(TS_TST_INFO *a);
+int __cdecl i2d_TS_TST_INFO(const TS_TST_INFO *a, unsigned char **pp);
+TS_TST_INFO * __cdecl d2i_TS_TST_INFO(TS_TST_INFO **a, const unsigned char **pp,
                              long length);
-TS_TST_INFO *TS_TST_INFO_dup(TS_TST_INFO *a);
+TS_TST_INFO * __cdecl TS_TST_INFO_dup(TS_TST_INFO *a);
 
 #ifndef OPENSSL_NO_STDIO
-TS_TST_INFO *d2i_TS_TST_INFO_fp(FILE *fp, TS_TST_INFO **a);
-int i2d_TS_TST_INFO_fp(FILE *fp, TS_TST_INFO *a);
+TS_TST_INFO * __cdecl d2i_TS_TST_INFO_fp(FILE *fp, TS_TST_INFO **a);
+int __cdecl i2d_TS_TST_INFO_fp(FILE *fp, TS_TST_INFO *a);
 #endif
-TS_TST_INFO *d2i_TS_TST_INFO_bio(BIO *bio, TS_TST_INFO **a);
-int i2d_TS_TST_INFO_bio(BIO *bio, TS_TST_INFO *a);
+TS_TST_INFO * __cdecl d2i_TS_TST_INFO_bio(BIO *bio, TS_TST_INFO **a);
+int __cdecl i2d_TS_TST_INFO_bio(BIO *bio, TS_TST_INFO *a);
 
-TS_ACCURACY *TS_ACCURACY_new(void);
-void TS_ACCURACY_free(TS_ACCURACY *a);
-int i2d_TS_ACCURACY(const TS_ACCURACY *a, unsigned char **pp);
-TS_ACCURACY *d2i_TS_ACCURACY(TS_ACCURACY **a, const unsigned char **pp,
+TS_ACCURACY * __cdecl TS_ACCURACY_new(void);
+void __cdecl TS_ACCURACY_free(TS_ACCURACY *a);
+int __cdecl i2d_TS_ACCURACY(const TS_ACCURACY *a, unsigned char **pp);
+TS_ACCURACY * __cdecl d2i_TS_ACCURACY(TS_ACCURACY **a, const unsigned char **pp,
                              long length);
-TS_ACCURACY *TS_ACCURACY_dup(TS_ACCURACY *a);
+TS_ACCURACY * __cdecl TS_ACCURACY_dup(TS_ACCURACY *a);
 
-ESS_ISSUER_SERIAL *ESS_ISSUER_SERIAL_new(void);
-void ESS_ISSUER_SERIAL_free(ESS_ISSUER_SERIAL *a);
-int i2d_ESS_ISSUER_SERIAL(const ESS_ISSUER_SERIAL *a, unsigned char **pp);
-ESS_ISSUER_SERIAL *d2i_ESS_ISSUER_SERIAL(ESS_ISSUER_SERIAL **a,
+ESS_ISSUER_SERIAL * __cdecl ESS_ISSUER_SERIAL_new(void);
+void __cdecl ESS_ISSUER_SERIAL_free(ESS_ISSUER_SERIAL *a);
+int __cdecl i2d_ESS_ISSUER_SERIAL(const ESS_ISSUER_SERIAL *a, unsigned char **pp);
+ESS_ISSUER_SERIAL * __cdecl d2i_ESS_ISSUER_SERIAL(ESS_ISSUER_SERIAL **a,
                                          const unsigned char **pp,
                                          long length);
-ESS_ISSUER_SERIAL *ESS_ISSUER_SERIAL_dup(ESS_ISSUER_SERIAL *a);
+ESS_ISSUER_SERIAL * __cdecl ESS_ISSUER_SERIAL_dup(ESS_ISSUER_SERIAL *a);
 
-ESS_CERT_ID *ESS_CERT_ID_new(void);
-void ESS_CERT_ID_free(ESS_CERT_ID *a);
-int i2d_ESS_CERT_ID(const ESS_CERT_ID *a, unsigned char **pp);
-ESS_CERT_ID *d2i_ESS_CERT_ID(ESS_CERT_ID **a, const unsigned char **pp,
+ESS_CERT_ID * __cdecl ESS_CERT_ID_new(void);
+void __cdecl ESS_CERT_ID_free(ESS_CERT_ID *a);
+int __cdecl i2d_ESS_CERT_ID(const ESS_CERT_ID *a, unsigned char **pp);
+ESS_CERT_ID * __cdecl d2i_ESS_CERT_ID(ESS_CERT_ID **a, const unsigned char **pp,
                              long length);
-ESS_CERT_ID *ESS_CERT_ID_dup(ESS_CERT_ID *a);
+ESS_CERT_ID * __cdecl ESS_CERT_ID_dup(ESS_CERT_ID *a);
 
-ESS_SIGNING_CERT *ESS_SIGNING_CERT_new(void);
-void ESS_SIGNING_CERT_free(ESS_SIGNING_CERT *a);
-int i2d_ESS_SIGNING_CERT(const ESS_SIGNING_CERT *a, unsigned char **pp);
-ESS_SIGNING_CERT *d2i_ESS_SIGNING_CERT(ESS_SIGNING_CERT **a,
+ESS_SIGNING_CERT * __cdecl ESS_SIGNING_CERT_new(void);
+void __cdecl ESS_SIGNING_CERT_free(ESS_SIGNING_CERT *a);
+int __cdecl i2d_ESS_SIGNING_CERT(const ESS_SIGNING_CERT *a, unsigned char **pp);
+ESS_SIGNING_CERT * __cdecl d2i_ESS_SIGNING_CERT(ESS_SIGNING_CERT **a,
                                        const unsigned char **pp, long length);
-ESS_SIGNING_CERT *ESS_SIGNING_CERT_dup(ESS_SIGNING_CERT *a);
+ESS_SIGNING_CERT * __cdecl ESS_SIGNING_CERT_dup(ESS_SIGNING_CERT *a);
 
-ESS_CERT_ID_V2 *ESS_CERT_ID_V2_new(void);
-void ESS_CERT_ID_V2_free(ESS_CERT_ID_V2 *a);
-int i2d_ESS_CERT_ID_V2(const ESS_CERT_ID_V2 *a, unsigned char **pp);
-ESS_CERT_ID_V2 *d2i_ESS_CERT_ID_V2(ESS_CERT_ID_V2 **a,
+ESS_CERT_ID_V2 * __cdecl ESS_CERT_ID_V2_new(void);
+void __cdecl ESS_CERT_ID_V2_free(ESS_CERT_ID_V2 *a);
+int __cdecl i2d_ESS_CERT_ID_V2(const ESS_CERT_ID_V2 *a, unsigned char **pp);
+ESS_CERT_ID_V2 * __cdecl d2i_ESS_CERT_ID_V2(ESS_CERT_ID_V2 **a,
                                    const unsigned char **pp, long length);
-ESS_CERT_ID_V2 *ESS_CERT_ID_V2_dup(ESS_CERT_ID_V2 *a);
+ESS_CERT_ID_V2 * __cdecl ESS_CERT_ID_V2_dup(ESS_CERT_ID_V2 *a);
 
-ESS_SIGNING_CERT_V2 *ESS_SIGNING_CERT_V2_new(void);
-void ESS_SIGNING_CERT_V2_free(ESS_SIGNING_CERT_V2 *a);
-int i2d_ESS_SIGNING_CERT_V2(const ESS_SIGNING_CERT_V2 *a, unsigned char **pp);
-ESS_SIGNING_CERT_V2 *d2i_ESS_SIGNING_CERT_V2(ESS_SIGNING_CERT_V2 **a,
+ESS_SIGNING_CERT_V2 * __cdecl ESS_SIGNING_CERT_V2_new(void);
+void __cdecl ESS_SIGNING_CERT_V2_free(ESS_SIGNING_CERT_V2 *a);
+int __cdecl i2d_ESS_SIGNING_CERT_V2(const ESS_SIGNING_CERT_V2 *a, unsigned char **pp);
+ESS_SIGNING_CERT_V2 * __cdecl d2i_ESS_SIGNING_CERT_V2(ESS_SIGNING_CERT_V2 **a,
                                              const unsigned char **pp,
                                              long length);
-ESS_SIGNING_CERT_V2 *ESS_SIGNING_CERT_V2_dup(ESS_SIGNING_CERT_V2 *a);
+ESS_SIGNING_CERT_V2 * __cdecl ESS_SIGNING_CERT_V2_dup(ESS_SIGNING_CERT_V2 *a);
 
-int TS_REQ_set_version(TS_REQ *a, long version);
-long TS_REQ_get_version(const TS_REQ *a);
+int __cdecl TS_REQ_set_version(TS_REQ *a, long version);
+long __cdecl TS_REQ_get_version(const TS_REQ *a);
 
-int TS_STATUS_INFO_set_status(TS_STATUS_INFO *a, int i);
-const ASN1_INTEGER *TS_STATUS_INFO_get0_status(const TS_STATUS_INFO *a);
+int __cdecl TS_STATUS_INFO_set_status(TS_STATUS_INFO *a, int i);
+const ASN1_INTEGER * __cdecl TS_STATUS_INFO_get0_status(const TS_STATUS_INFO *a);
 
 const STACK_OF(ASN1_UTF8STRING) *
-TS_STATUS_INFO_get0_text(const TS_STATUS_INFO *a);
+__cdecl TS_STATUS_INFO_get0_text(const TS_STATUS_INFO *a);
 
 const ASN1_BIT_STRING *
-TS_STATUS_INFO_get0_failure_info(const TS_STATUS_INFO *a);
+__cdecl TS_STATUS_INFO_get0_failure_info(const TS_STATUS_INFO *a);
 
-int TS_REQ_set_msg_imprint(TS_REQ *a, TS_MSG_IMPRINT *msg_imprint);
-TS_MSG_IMPRINT *TS_REQ_get_msg_imprint(TS_REQ *a);
+int __cdecl TS_REQ_set_msg_imprint(TS_REQ *a, TS_MSG_IMPRINT *msg_imprint);
+TS_MSG_IMPRINT * __cdecl TS_REQ_get_msg_imprint(TS_REQ *a);
 
-int TS_MSG_IMPRINT_set_algo(TS_MSG_IMPRINT *a, X509_ALGOR *alg);
-X509_ALGOR *TS_MSG_IMPRINT_get_algo(TS_MSG_IMPRINT *a);
+int __cdecl TS_MSG_IMPRINT_set_algo(TS_MSG_IMPRINT *a, X509_ALGOR *alg);
+X509_ALGOR * __cdecl TS_MSG_IMPRINT_get_algo(TS_MSG_IMPRINT *a);
 
-int TS_MSG_IMPRINT_set_msg(TS_MSG_IMPRINT *a, unsigned char *d, int len);
-ASN1_OCTET_STRING *TS_MSG_IMPRINT_get_msg(TS_MSG_IMPRINT *a);
+int __cdecl TS_MSG_IMPRINT_set_msg(TS_MSG_IMPRINT *a, unsigned char *d, int len);
+ASN1_OCTET_STRING * __cdecl TS_MSG_IMPRINT_get_msg(TS_MSG_IMPRINT *a);
 
-int TS_REQ_set_policy_id(TS_REQ *a, const ASN1_OBJECT *policy);
-ASN1_OBJECT *TS_REQ_get_policy_id(TS_REQ *a);
+int __cdecl TS_REQ_set_policy_id(TS_REQ *a, const ASN1_OBJECT *policy);
+ASN1_OBJECT * __cdecl TS_REQ_get_policy_id(TS_REQ *a);
 
-int TS_REQ_set_nonce(TS_REQ *a, const ASN1_INTEGER *nonce);
-const ASN1_INTEGER *TS_REQ_get_nonce(const TS_REQ *a);
+int __cdecl TS_REQ_set_nonce(TS_REQ *a, const ASN1_INTEGER *nonce);
+const ASN1_INTEGER * __cdecl TS_REQ_get_nonce(const TS_REQ *a);
 
-int TS_REQ_set_cert_req(TS_REQ *a, int cert_req);
-int TS_REQ_get_cert_req(const TS_REQ *a);
+int __cdecl TS_REQ_set_cert_req(TS_REQ *a, int cert_req);
+int __cdecl TS_REQ_get_cert_req(const TS_REQ *a);
 
-STACK_OF(X509_EXTENSION) *TS_REQ_get_exts(TS_REQ *a);
-void TS_REQ_ext_free(TS_REQ *a);
-int TS_REQ_get_ext_count(TS_REQ *a);
-int TS_REQ_get_ext_by_NID(TS_REQ *a, int nid, int lastpos);
-int TS_REQ_get_ext_by_OBJ(TS_REQ *a, const ASN1_OBJECT *obj, int lastpos);
-int TS_REQ_get_ext_by_critical(TS_REQ *a, int crit, int lastpos);
-X509_EXTENSION *TS_REQ_get_ext(TS_REQ *a, int loc);
-X509_EXTENSION *TS_REQ_delete_ext(TS_REQ *a, int loc);
-int TS_REQ_add_ext(TS_REQ *a, X509_EXTENSION *ex, int loc);
-void *TS_REQ_get_ext_d2i(TS_REQ *a, int nid, int *crit, int *idx);
+STACK_OF(X509_EXTENSION) * __cdecl TS_REQ_get_exts(TS_REQ *a);
+void __cdecl TS_REQ_ext_free(TS_REQ *a);
+int __cdecl TS_REQ_get_ext_count(TS_REQ *a);
+int __cdecl TS_REQ_get_ext_by_NID(TS_REQ *a, int nid, int lastpos);
+int __cdecl TS_REQ_get_ext_by_OBJ(TS_REQ *a, const ASN1_OBJECT *obj, int lastpos);
+int __cdecl TS_REQ_get_ext_by_critical(TS_REQ *a, int crit, int lastpos);
+X509_EXTENSION * __cdecl TS_REQ_get_ext(TS_REQ *a, int loc);
+X509_EXTENSION * __cdecl TS_REQ_delete_ext(TS_REQ *a, int loc);
+int __cdecl TS_REQ_add_ext(TS_REQ *a, X509_EXTENSION *ex, int loc);
+void * __cdecl TS_REQ_get_ext_d2i(TS_REQ *a, int nid, int *crit, int *idx);
 
 /* Function declarations for TS_REQ defined in ts/ts_req_print.c */
 
-int TS_REQ_print_bio(BIO *bio, TS_REQ *a);
+int __cdecl TS_REQ_print_bio(BIO *bio, TS_REQ *a);
 
 /* Function declarations for TS_RESP defined in ts/ts_resp_utils.c */
 
-int TS_RESP_set_status_info(TS_RESP *a, TS_STATUS_INFO *info);
-TS_STATUS_INFO *TS_RESP_get_status_info(TS_RESP *a);
+int __cdecl TS_RESP_set_status_info(TS_RESP *a, TS_STATUS_INFO *info);
+TS_STATUS_INFO * __cdecl TS_RESP_get_status_info(TS_RESP *a);
 
 /* Caller loses ownership of PKCS7 and TS_TST_INFO objects. */
-void TS_RESP_set_tst_info(TS_RESP *a, PKCS7 *p7, TS_TST_INFO *tst_info);
-PKCS7 *TS_RESP_get_token(TS_RESP *a);
-TS_TST_INFO *TS_RESP_get_tst_info(TS_RESP *a);
+void __cdecl TS_RESP_set_tst_info(TS_RESP *a, PKCS7 *p7, TS_TST_INFO *tst_info);
+PKCS7 * __cdecl TS_RESP_get_token(TS_RESP *a);
+TS_TST_INFO * __cdecl TS_RESP_get_tst_info(TS_RESP *a);
 
-int TS_TST_INFO_set_version(TS_TST_INFO *a, long version);
-long TS_TST_INFO_get_version(const TS_TST_INFO *a);
+int __cdecl TS_TST_INFO_set_version(TS_TST_INFO *a, long version);
+long __cdecl TS_TST_INFO_get_version(const TS_TST_INFO *a);
 
-int TS_TST_INFO_set_policy_id(TS_TST_INFO *a, ASN1_OBJECT *policy_id);
-ASN1_OBJECT *TS_TST_INFO_get_policy_id(TS_TST_INFO *a);
+int __cdecl TS_TST_INFO_set_policy_id(TS_TST_INFO *a, ASN1_OBJECT *policy_id);
+ASN1_OBJECT * __cdecl TS_TST_INFO_get_policy_id(TS_TST_INFO *a);
 
-int TS_TST_INFO_set_msg_imprint(TS_TST_INFO *a, TS_MSG_IMPRINT *msg_imprint);
-TS_MSG_IMPRINT *TS_TST_INFO_get_msg_imprint(TS_TST_INFO *a);
+int __cdecl TS_TST_INFO_set_msg_imprint(TS_TST_INFO *a, TS_MSG_IMPRINT *msg_imprint);
+TS_MSG_IMPRINT * __cdecl TS_TST_INFO_get_msg_imprint(TS_TST_INFO *a);
 
-int TS_TST_INFO_set_serial(TS_TST_INFO *a, const ASN1_INTEGER *serial);
-const ASN1_INTEGER *TS_TST_INFO_get_serial(const TS_TST_INFO *a);
+int __cdecl TS_TST_INFO_set_serial(TS_TST_INFO *a, const ASN1_INTEGER *serial);
+const ASN1_INTEGER * __cdecl TS_TST_INFO_get_serial(const TS_TST_INFO *a);
 
-int TS_TST_INFO_set_time(TS_TST_INFO *a, const ASN1_GENERALIZEDTIME *gtime);
-const ASN1_GENERALIZEDTIME *TS_TST_INFO_get_time(const TS_TST_INFO *a);
+int __cdecl TS_TST_INFO_set_time(TS_TST_INFO *a, const ASN1_GENERALIZEDTIME *gtime);
+const ASN1_GENERALIZEDTIME * __cdecl TS_TST_INFO_get_time(const TS_TST_INFO *a);
 
-int TS_TST_INFO_set_accuracy(TS_TST_INFO *a, TS_ACCURACY *accuracy);
-TS_ACCURACY *TS_TST_INFO_get_accuracy(TS_TST_INFO *a);
+int __cdecl TS_TST_INFO_set_accuracy(TS_TST_INFO *a, TS_ACCURACY *accuracy);
+TS_ACCURACY * __cdecl TS_TST_INFO_get_accuracy(TS_TST_INFO *a);
 
-int TS_ACCURACY_set_seconds(TS_ACCURACY *a, const ASN1_INTEGER *seconds);
-const ASN1_INTEGER *TS_ACCURACY_get_seconds(const TS_ACCURACY *a);
+int __cdecl TS_ACCURACY_set_seconds(TS_ACCURACY *a, const ASN1_INTEGER *seconds);
+const ASN1_INTEGER * __cdecl TS_ACCURACY_get_seconds(const TS_ACCURACY *a);
 
-int TS_ACCURACY_set_millis(TS_ACCURACY *a, const ASN1_INTEGER *millis);
-const ASN1_INTEGER *TS_ACCURACY_get_millis(const TS_ACCURACY *a);
+int __cdecl TS_ACCURACY_set_millis(TS_ACCURACY *a, const ASN1_INTEGER *millis);
+const ASN1_INTEGER * __cdecl TS_ACCURACY_get_millis(const TS_ACCURACY *a);
 
-int TS_ACCURACY_set_micros(TS_ACCURACY *a, const ASN1_INTEGER *micros);
-const ASN1_INTEGER *TS_ACCURACY_get_micros(const TS_ACCURACY *a);
+int __cdecl TS_ACCURACY_set_micros(TS_ACCURACY *a, const ASN1_INTEGER *micros);
+const ASN1_INTEGER * __cdecl TS_ACCURACY_get_micros(const TS_ACCURACY *a);
 
-int TS_TST_INFO_set_ordering(TS_TST_INFO *a, int ordering);
-int TS_TST_INFO_get_ordering(const TS_TST_INFO *a);
+int __cdecl TS_TST_INFO_set_ordering(TS_TST_INFO *a, int ordering);
+int __cdecl TS_TST_INFO_get_ordering(const TS_TST_INFO *a);
 
-int TS_TST_INFO_set_nonce(TS_TST_INFO *a, const ASN1_INTEGER *nonce);
-const ASN1_INTEGER *TS_TST_INFO_get_nonce(const TS_TST_INFO *a);
+int __cdecl TS_TST_INFO_set_nonce(TS_TST_INFO *a, const ASN1_INTEGER *nonce);
+const ASN1_INTEGER * __cdecl TS_TST_INFO_get_nonce(const TS_TST_INFO *a);
 
-int TS_TST_INFO_set_tsa(TS_TST_INFO *a, GENERAL_NAME *tsa);
-GENERAL_NAME *TS_TST_INFO_get_tsa(TS_TST_INFO *a);
+int __cdecl TS_TST_INFO_set_tsa(TS_TST_INFO *a, GENERAL_NAME *tsa);
+GENERAL_NAME * __cdecl TS_TST_INFO_get_tsa(TS_TST_INFO *a);
 
-STACK_OF(X509_EXTENSION) *TS_TST_INFO_get_exts(TS_TST_INFO *a);
-void TS_TST_INFO_ext_free(TS_TST_INFO *a);
-int TS_TST_INFO_get_ext_count(TS_TST_INFO *a);
-int TS_TST_INFO_get_ext_by_NID(TS_TST_INFO *a, int nid, int lastpos);
-int TS_TST_INFO_get_ext_by_OBJ(TS_TST_INFO *a, const ASN1_OBJECT *obj,
+STACK_OF(X509_EXTENSION) * __cdecl TS_TST_INFO_get_exts(TS_TST_INFO *a);
+void __cdecl TS_TST_INFO_ext_free(TS_TST_INFO *a);
+int __cdecl TS_TST_INFO_get_ext_count(TS_TST_INFO *a);
+int __cdecl TS_TST_INFO_get_ext_by_NID(TS_TST_INFO *a, int nid, int lastpos);
+int __cdecl TS_TST_INFO_get_ext_by_OBJ(TS_TST_INFO *a, const ASN1_OBJECT *obj,
                                int lastpos);
-int TS_TST_INFO_get_ext_by_critical(TS_TST_INFO *a, int crit, int lastpos);
-X509_EXTENSION *TS_TST_INFO_get_ext(TS_TST_INFO *a, int loc);
-X509_EXTENSION *TS_TST_INFO_delete_ext(TS_TST_INFO *a, int loc);
-int TS_TST_INFO_add_ext(TS_TST_INFO *a, X509_EXTENSION *ex, int loc);
-void *TS_TST_INFO_get_ext_d2i(TS_TST_INFO *a, int nid, int *crit, int *idx);
+int __cdecl TS_TST_INFO_get_ext_by_critical(TS_TST_INFO *a, int crit, int lastpos);
+X509_EXTENSION * __cdecl TS_TST_INFO_get_ext(TS_TST_INFO *a, int loc);
+X509_EXTENSION * __cdecl TS_TST_INFO_delete_ext(TS_TST_INFO *a, int loc);
+int __cdecl TS_TST_INFO_add_ext(TS_TST_INFO *a, X509_EXTENSION *ex, int loc);
+void * __cdecl TS_TST_INFO_get_ext_d2i(TS_TST_INFO *a, int nid, int *crit, int *idx);
 
 /*
  * Declarations related to response generation, defined in ts/ts_resp_sign.c.
@@ -325,46 +325,46 @@ typedef struct TS_resp_ctx TS_RESP_CTX;
 DEFINE_STACK_OF_CONST(EVP_MD)
 
 /* Creates a response context that can be used for generating responses. */
-TS_RESP_CTX *TS_RESP_CTX_new(void);
-void TS_RESP_CTX_free(TS_RESP_CTX *ctx);
+TS_RESP_CTX * __cdecl TS_RESP_CTX_new(void);
+void __cdecl TS_RESP_CTX_free(TS_RESP_CTX *ctx);
 
 /* This parameter must be set. */
-int TS_RESP_CTX_set_signer_cert(TS_RESP_CTX *ctx, X509 *signer);
+int __cdecl TS_RESP_CTX_set_signer_cert(TS_RESP_CTX *ctx, X509 *signer);
 
 /* This parameter must be set. */
-int TS_RESP_CTX_set_signer_key(TS_RESP_CTX *ctx, EVP_PKEY *key);
+int __cdecl TS_RESP_CTX_set_signer_key(TS_RESP_CTX *ctx, EVP_PKEY *key);
 
-int TS_RESP_CTX_set_signer_digest(TS_RESP_CTX *ctx,
+int __cdecl TS_RESP_CTX_set_signer_digest(TS_RESP_CTX *ctx,
                                   const EVP_MD *signer_digest);
-int TS_RESP_CTX_set_ess_cert_id_digest(TS_RESP_CTX *ctx, const EVP_MD *md);
+int __cdecl TS_RESP_CTX_set_ess_cert_id_digest(TS_RESP_CTX *ctx, const EVP_MD *md);
 
 /* This parameter must be set. */
-int TS_RESP_CTX_set_def_policy(TS_RESP_CTX *ctx, const ASN1_OBJECT *def_policy);
+int __cdecl TS_RESP_CTX_set_def_policy(TS_RESP_CTX *ctx, const ASN1_OBJECT *def_policy);
 
 /* No additional certs are included in the response by default. */
-int TS_RESP_CTX_set_certs(TS_RESP_CTX *ctx, STACK_OF(X509) *certs);
+int __cdecl TS_RESP_CTX_set_certs(TS_RESP_CTX *ctx, STACK_OF(X509) *certs);
 
 /*
  * Adds a new acceptable policy, only the default policy is accepted by
  * default.
  */
-int TS_RESP_CTX_add_policy(TS_RESP_CTX *ctx, const ASN1_OBJECT *policy);
+int __cdecl TS_RESP_CTX_add_policy(TS_RESP_CTX *ctx, const ASN1_OBJECT *policy);
 
 /*
  * Adds a new acceptable message digest. Note that no message digests are
  * accepted by default. The md argument is shared with the caller.
  */
-int TS_RESP_CTX_add_md(TS_RESP_CTX *ctx, const EVP_MD *md);
+int __cdecl TS_RESP_CTX_add_md(TS_RESP_CTX *ctx, const EVP_MD *md);
 
 /* Accuracy is not included by default. */
-int TS_RESP_CTX_set_accuracy(TS_RESP_CTX *ctx,
+int __cdecl TS_RESP_CTX_set_accuracy(TS_RESP_CTX *ctx,
                              int secs, int millis, int micros);
 
 /*
  * Clock precision digits, i.e. the number of decimal digits: '0' means sec,
  * '3' msec, '6' usec, and so on. Default is 0.
  */
-int TS_RESP_CTX_set_clock_precision_digits(TS_RESP_CTX *ctx,
+int __cdecl TS_RESP_CTX_set_clock_precision_digits(TS_RESP_CTX *ctx,
                                            unsigned clock_precision_digits);
 /* At most we accept usec precision. */
 # define TS_MAX_CLOCK_PRECISION_DIGITS   6
@@ -373,50 +373,50 @@ int TS_RESP_CTX_set_clock_precision_digits(TS_RESP_CTX *ctx,
 # define TS_MAX_STATUS_LENGTH   (1024 * 1024)
 
 /* No flags are set by default. */
-void TS_RESP_CTX_add_flags(TS_RESP_CTX *ctx, int flags);
+void __cdecl TS_RESP_CTX_add_flags(TS_RESP_CTX *ctx, int flags);
 
 /* Default callback always returns a constant. */
-void TS_RESP_CTX_set_serial_cb(TS_RESP_CTX *ctx, TS_serial_cb cb, void *data);
+void __cdecl TS_RESP_CTX_set_serial_cb(TS_RESP_CTX *ctx, TS_serial_cb cb, void *data);
 
 /* Default callback uses the gettimeofday() and gmtime() system calls. */
-void TS_RESP_CTX_set_time_cb(TS_RESP_CTX *ctx, TS_time_cb cb, void *data);
+void __cdecl TS_RESP_CTX_set_time_cb(TS_RESP_CTX *ctx, TS_time_cb cb, void *data);
 
 /*
  * Default callback rejects all extensions. The extension callback is called
  * when the TS_TST_INFO object is already set up and not signed yet.
  */
 /* FIXME: extension handling is not tested yet. */
-void TS_RESP_CTX_set_extension_cb(TS_RESP_CTX *ctx,
+void __cdecl TS_RESP_CTX_set_extension_cb(TS_RESP_CTX *ctx,
                                   TS_extension_cb cb, void *data);
 
 /* The following methods can be used in the callbacks. */
-int TS_RESP_CTX_set_status_info(TS_RESP_CTX *ctx,
+int __cdecl TS_RESP_CTX_set_status_info(TS_RESP_CTX *ctx,
                                 int status, const char *text);
 
 /* Sets the status info only if it is still TS_STATUS_GRANTED. */
-int TS_RESP_CTX_set_status_info_cond(TS_RESP_CTX *ctx,
+int __cdecl TS_RESP_CTX_set_status_info_cond(TS_RESP_CTX *ctx,
                                      int status, const char *text);
 
-int TS_RESP_CTX_add_failure_info(TS_RESP_CTX *ctx, int failure);
+int __cdecl TS_RESP_CTX_add_failure_info(TS_RESP_CTX *ctx, int failure);
 
 /* The get methods below can be used in the extension callback. */
-TS_REQ *TS_RESP_CTX_get_request(TS_RESP_CTX *ctx);
+TS_REQ * __cdecl TS_RESP_CTX_get_request(TS_RESP_CTX *ctx);
 
-TS_TST_INFO *TS_RESP_CTX_get_tst_info(TS_RESP_CTX *ctx);
+TS_TST_INFO * __cdecl TS_RESP_CTX_get_tst_info(TS_RESP_CTX *ctx);
 
 /*
  * Creates the signed TS_TST_INFO and puts it in TS_RESP.
  * In case of errors it sets the status info properly.
  * Returns NULL only in case of memory allocation/fatal error.
  */
-TS_RESP *TS_RESP_create_response(TS_RESP_CTX *ctx, BIO *req_bio);
+TS_RESP * __cdecl TS_RESP_create_response(TS_RESP_CTX *ctx, BIO *req_bio);
 
 /*
  * Declarations related to response verification,
  * they are defined in ts/ts_resp_verify.c.
  */
 
-int TS_RESP_verify_signature(PKCS7 *token, STACK_OF(X509) *certs,
+int __cdecl TS_RESP_verify_signature(PKCS7 *token, STACK_OF(X509) *certs,
                              X509_STORE *store, X509 **signer_out);
 
 /* Context structure for the generic verify method. */
@@ -463,23 +463,23 @@ int TS_RESP_verify_signature(PKCS7 *token, STACK_OF(X509) *certs,
 
 typedef struct TS_verify_ctx TS_VERIFY_CTX;
 
-int TS_RESP_verify_response(TS_VERIFY_CTX *ctx, TS_RESP *response);
-int TS_RESP_verify_token(TS_VERIFY_CTX *ctx, PKCS7 *token);
+int __cdecl TS_RESP_verify_response(TS_VERIFY_CTX *ctx, TS_RESP *response);
+int __cdecl TS_RESP_verify_token(TS_VERIFY_CTX *ctx, PKCS7 *token);
 
 /*
  * Declarations related to response verification context,
  */
-TS_VERIFY_CTX *TS_VERIFY_CTX_new(void);
-void TS_VERIFY_CTX_init(TS_VERIFY_CTX *ctx);
-void TS_VERIFY_CTX_free(TS_VERIFY_CTX *ctx);
-void TS_VERIFY_CTX_cleanup(TS_VERIFY_CTX *ctx);
-int TS_VERIFY_CTX_set_flags(TS_VERIFY_CTX *ctx, int f);
-int TS_VERIFY_CTX_add_flags(TS_VERIFY_CTX *ctx, int f);
-BIO *TS_VERIFY_CTX_set_data(TS_VERIFY_CTX *ctx, BIO *b);
-unsigned char *TS_VERIFY_CTX_set_imprint(TS_VERIFY_CTX *ctx,
+TS_VERIFY_CTX * __cdecl TS_VERIFY_CTX_new(void);
+void __cdecl TS_VERIFY_CTX_init(TS_VERIFY_CTX *ctx);
+void __cdecl TS_VERIFY_CTX_free(TS_VERIFY_CTX *ctx);
+void __cdecl TS_VERIFY_CTX_cleanup(TS_VERIFY_CTX *ctx);
+int __cdecl TS_VERIFY_CTX_set_flags(TS_VERIFY_CTX *ctx, int f);
+int __cdecl TS_VERIFY_CTX_add_flags(TS_VERIFY_CTX *ctx, int f);
+BIO * __cdecl TS_VERIFY_CTX_set_data(TS_VERIFY_CTX *ctx, BIO *b);
+unsigned char * __cdecl TS_VERIFY_CTX_set_imprint(TS_VERIFY_CTX *ctx,
                                          unsigned char *hexstr, long len);
-X509_STORE *TS_VERIFY_CTX_set_store(TS_VERIFY_CTX *ctx, X509_STORE *s);
-STACK_OF(X509) *TS_VERIFY_CTS_set_certs(TS_VERIFY_CTX *ctx, STACK_OF(X509) *certs);
+X509_STORE * __cdecl TS_VERIFY_CTX_set_store(TS_VERIFY_CTX *ctx, X509_STORE *s);
+STACK_OF(X509) * __cdecl TS_VERIFY_CTS_set_certs(TS_VERIFY_CTX *ctx, STACK_OF(X509) *certs);
 
 /*-
  * If ctx is NULL, it allocates and returns a new object, otherwise
@@ -497,59 +497,59 @@ STACK_OF(X509) *TS_VERIFY_CTS_set_certs(TS_VERIFY_CTX *ctx, STACK_OF(X509) *cert
  * tsa_name = NULL
  * Important: after calling this method TS_VFY_SIGNATURE should be added!
  */
-TS_VERIFY_CTX *TS_REQ_to_TS_VERIFY_CTX(TS_REQ *req, TS_VERIFY_CTX *ctx);
+TS_VERIFY_CTX * __cdecl TS_REQ_to_TS_VERIFY_CTX(TS_REQ *req, TS_VERIFY_CTX *ctx);
 
 /* Function declarations for TS_RESP defined in ts/ts_resp_print.c */
 
-int TS_RESP_print_bio(BIO *bio, TS_RESP *a);
-int TS_STATUS_INFO_print_bio(BIO *bio, TS_STATUS_INFO *a);
-int TS_TST_INFO_print_bio(BIO *bio, TS_TST_INFO *a);
+int __cdecl TS_RESP_print_bio(BIO *bio, TS_RESP *a);
+int __cdecl TS_STATUS_INFO_print_bio(BIO *bio, TS_STATUS_INFO *a);
+int __cdecl TS_TST_INFO_print_bio(BIO *bio, TS_TST_INFO *a);
 
 /* Common utility functions defined in ts/ts_lib.c */
 
-int TS_ASN1_INTEGER_print_bio(BIO *bio, const ASN1_INTEGER *num);
-int TS_OBJ_print_bio(BIO *bio, const ASN1_OBJECT *obj);
-int TS_ext_print_bio(BIO *bio, const STACK_OF(X509_EXTENSION) *extensions);
-int TS_X509_ALGOR_print_bio(BIO *bio, const X509_ALGOR *alg);
-int TS_MSG_IMPRINT_print_bio(BIO *bio, TS_MSG_IMPRINT *msg);
+int __cdecl TS_ASN1_INTEGER_print_bio(BIO *bio, const ASN1_INTEGER *num);
+int __cdecl TS_OBJ_print_bio(BIO *bio, const ASN1_OBJECT *obj);
+int __cdecl TS_ext_print_bio(BIO *bio, const STACK_OF(X509_EXTENSION) *extensions);
+int __cdecl TS_X509_ALGOR_print_bio(BIO *bio, const X509_ALGOR *alg);
+int __cdecl TS_MSG_IMPRINT_print_bio(BIO *bio, TS_MSG_IMPRINT *msg);
 
 /*
  * Function declarations for handling configuration options, defined in
  * ts/ts_conf.c
  */
 
-X509 *TS_CONF_load_cert(const char *file);
-STACK_OF(X509) *TS_CONF_load_certs(const char *file);
-EVP_PKEY *TS_CONF_load_key(const char *file, const char *pass);
-const char *TS_CONF_get_tsa_section(CONF *conf, const char *section);
-int TS_CONF_set_serial(CONF *conf, const char *section, TS_serial_cb cb,
+X509 * __cdecl TS_CONF_load_cert(const char *file);
+STACK_OF(X509) * __cdecl TS_CONF_load_certs(const char *file);
+EVP_PKEY * __cdecl TS_CONF_load_key(const char *file, const char *pass);
+const char * __cdecl TS_CONF_get_tsa_section(CONF *conf, const char *section);
+int __cdecl TS_CONF_set_serial(CONF *conf, const char *section, TS_serial_cb cb,
                        TS_RESP_CTX *ctx);
 #ifndef OPENSSL_NO_ENGINE
-int TS_CONF_set_crypto_device(CONF *conf, const char *section,
+int __cdecl TS_CONF_set_crypto_device(CONF *conf, const char *section,
                               const char *device);
-int TS_CONF_set_default_engine(const char *name);
+int __cdecl TS_CONF_set_default_engine(const char *name);
 #endif
-int TS_CONF_set_signer_cert(CONF *conf, const char *section,
+int __cdecl TS_CONF_set_signer_cert(CONF *conf, const char *section,
                             const char *cert, TS_RESP_CTX *ctx);
-int TS_CONF_set_certs(CONF *conf, const char *section, const char *certs,
+int __cdecl TS_CONF_set_certs(CONF *conf, const char *section, const char *certs,
                       TS_RESP_CTX *ctx);
-int TS_CONF_set_signer_key(CONF *conf, const char *section,
+int __cdecl TS_CONF_set_signer_key(CONF *conf, const char *section,
                            const char *key, const char *pass,
                            TS_RESP_CTX *ctx);
-int TS_CONF_set_signer_digest(CONF *conf, const char *section,
+int __cdecl TS_CONF_set_signer_digest(CONF *conf, const char *section,
                                const char *md, TS_RESP_CTX *ctx);
-int TS_CONF_set_def_policy(CONF *conf, const char *section,
+int __cdecl TS_CONF_set_def_policy(CONF *conf, const char *section,
                            const char *policy, TS_RESP_CTX *ctx);
-int TS_CONF_set_policies(CONF *conf, const char *section, TS_RESP_CTX *ctx);
-int TS_CONF_set_digests(CONF *conf, const char *section, TS_RESP_CTX *ctx);
-int TS_CONF_set_accuracy(CONF *conf, const char *section, TS_RESP_CTX *ctx);
-int TS_CONF_set_clock_precision_digits(CONF *conf, const char *section,
+int __cdecl TS_CONF_set_policies(CONF *conf, const char *section, TS_RESP_CTX *ctx);
+int __cdecl TS_CONF_set_digests(CONF *conf, const char *section, TS_RESP_CTX *ctx);
+int __cdecl TS_CONF_set_accuracy(CONF *conf, const char *section, TS_RESP_CTX *ctx);
+int __cdecl TS_CONF_set_clock_precision_digits(CONF *conf, const char *section,
                                        TS_RESP_CTX *ctx);
-int TS_CONF_set_ordering(CONF *conf, const char *section, TS_RESP_CTX *ctx);
-int TS_CONF_set_tsa_name(CONF *conf, const char *section, TS_RESP_CTX *ctx);
-int TS_CONF_set_ess_cert_id_chain(CONF *conf, const char *section,
+int __cdecl TS_CONF_set_ordering(CONF *conf, const char *section, TS_RESP_CTX *ctx);
+int __cdecl TS_CONF_set_tsa_name(CONF *conf, const char *section, TS_RESP_CTX *ctx);
+int __cdecl TS_CONF_set_ess_cert_id_chain(CONF *conf, const char *section,
                                   TS_RESP_CTX *ctx);
-int TS_CONF_set_ess_cert_id_digest(CONF *conf, const char *section,
+int __cdecl TS_CONF_set_ess_cert_id_digest(CONF *conf, const char *section,
                                       TS_RESP_CTX *ctx);
 
 #  ifdef  __cplusplus
diff --git a/include/openssl/tserr.h b/include/openssl/tserr.h
index 07f23339c8..5ccecabd5f 100644
--- a/include/openssl/tserr.h
+++ b/include/openssl/tserr.h
@@ -22,7 +22,7 @@
 #  ifdef  __cplusplus
 extern "C"
 #  endif
-int ERR_load_TS_strings(void);
+int __cdecl ERR_load_TS_strings(void);
 
 /*
  * TS function codes.
diff --git a/include/openssl/txt_db.h b/include/openssl/txt_db.h
index ec981a439f..81f1ded6ad 100644
--- a/include/openssl/txt_db.h
+++ b/include/openssl/txt_db.h
@@ -41,14 +41,14 @@ typedef struct txt_db_st {
     OPENSSL_STRING *arg_row;
 } TXT_DB;
 
-TXT_DB *TXT_DB_read(BIO *in, int num);
-long TXT_DB_write(BIO *out, TXT_DB *db);
-int TXT_DB_create_index(TXT_DB *db, int field, int (*qual) (OPENSSL_STRING *),
+TXT_DB * __cdecl TXT_DB_read(BIO *in, int num);
+long __cdecl TXT_DB_write(BIO *out, TXT_DB *db);
+int __cdecl TXT_DB_create_index(TXT_DB *db, int field, int (*qual) (OPENSSL_STRING *),
                         OPENSSL_LH_HASHFUNC hash, OPENSSL_LH_COMPFUNC cmp);
-void TXT_DB_free(TXT_DB *db);
-OPENSSL_STRING *TXT_DB_get_by_index(TXT_DB *db, int idx,
+void __cdecl TXT_DB_free(TXT_DB *db);
+OPENSSL_STRING * __cdecl TXT_DB_get_by_index(TXT_DB *db, int idx,
                                     OPENSSL_STRING *value);
-int TXT_DB_insert(TXT_DB *db, OPENSSL_STRING *value);
+int __cdecl TXT_DB_insert(TXT_DB *db, OPENSSL_STRING *value);
 
 #ifdef  __cplusplus
 }
diff --git a/include/openssl/ui.h b/include/openssl/ui.h
index 7c721ec818..7c50e5e8fb 100644
--- a/include/openssl/ui.h
+++ b/include/openssl/ui.h
@@ -39,9 +39,9 @@ extern "C" {
  */
 
 /* Creators and destructor.   */
-UI *UI_new(void);
-UI *UI_new_method(const UI_METHOD *method);
-void UI_free(UI *ui);
+UI * __cdecl UI_new(void);
+UI * __cdecl UI_new_method(const UI_METHOD *method);
+void __cdecl UI_free(UI *ui);
 
 /*-
    The following functions are used to add strings to be printed and prompt
@@ -86,26 +86,26 @@ void UI_free(UI *ui);
 
    On success, the all return an index of the added information.  That index
    is useful when retrieving results with UI_get0_result(). */
-int UI_add_input_string(UI *ui, const char *prompt, int flags,
+int __cdecl UI_add_input_string(UI *ui, const char *prompt, int flags,
                         char *result_buf, int minsize, int maxsize);
-int UI_dup_input_string(UI *ui, const char *prompt, int flags,
+int __cdecl UI_dup_input_string(UI *ui, const char *prompt, int flags,
                         char *result_buf, int minsize, int maxsize);
-int UI_add_verify_string(UI *ui, const char *prompt, int flags,
+int __cdecl UI_add_verify_string(UI *ui, const char *prompt, int flags,
                          char *result_buf, int minsize, int maxsize,
                          const char *test_buf);
-int UI_dup_verify_string(UI *ui, const char *prompt, int flags,
+int __cdecl UI_dup_verify_string(UI *ui, const char *prompt, int flags,
                          char *result_buf, int minsize, int maxsize,
                          const char *test_buf);
-int UI_add_input_boolean(UI *ui, const char *prompt, const char *action_desc,
+int __cdecl UI_add_input_boolean(UI *ui, const char *prompt, const char *action_desc,
                          const char *ok_chars, const char *cancel_chars,
                          int flags, char *result_buf);
-int UI_dup_input_boolean(UI *ui, const char *prompt, const char *action_desc,
+int __cdecl UI_dup_input_boolean(UI *ui, const char *prompt, const char *action_desc,
                          const char *ok_chars, const char *cancel_chars,
                          int flags, char *result_buf);
-int UI_add_info_string(UI *ui, const char *text);
-int UI_dup_info_string(UI *ui, const char *text);
-int UI_add_error_string(UI *ui, const char *text);
-int UI_dup_error_string(UI *ui, const char *text);
+int __cdecl UI_add_info_string(UI *ui, const char *text);
+int __cdecl UI_dup_info_string(UI *ui, const char *text);
+int __cdecl UI_add_error_string(UI *ui, const char *text);
+int __cdecl UI_dup_error_string(UI *ui, const char *text);
 
 /* These are the possible flags.  They can be or'ed together. */
 /* Use to have echoing of input */
@@ -149,7 +149,7 @@ int UI_dup_error_string(UI *ui, const char *text);
  *
  *       "Enter pass phrase for foo.key:"
 */
-char *UI_construct_prompt(UI *ui_method,
+char * __cdecl UI_construct_prompt(UI *ui_method,
                           const char *object_desc, const char *object_name);
 
 /*
@@ -163,29 +163,29 @@ char *UI_construct_prompt(UI *ui_method,
  * Note that the UI_OpenSSL() method completely ignores the user data. Other
  * methods may not, however.
  */
-void *UI_add_user_data(UI *ui, void *user_data);
+void * __cdecl UI_add_user_data(UI *ui, void *user_data);
 /*
  * Alternatively, this function is used to duplicate the user data.
  * This uses the duplicator method function.  The destroy function will
  * be used to free the user data in this case.
  */
-int UI_dup_user_data(UI *ui, void *user_data);
+int __cdecl UI_dup_user_data(UI *ui, void *user_data);
 /* We need a user data retrieving function as well.  */
-void *UI_get0_user_data(UI *ui);
+void * __cdecl UI_get0_user_data(UI *ui);
 
 /* Return the result associated with a prompt given with the index i. */
-const char *UI_get0_result(UI *ui, int i);
-int UI_get_result_length(UI *ui, int i);
+const char * __cdecl UI_get0_result(UI *ui, int i);
+int __cdecl UI_get_result_length(UI *ui, int i);
 
 /* When all strings have been added, process the whole thing. */
-int UI_process(UI *ui);
+int __cdecl UI_process(UI *ui);
 
 /*
  * Give a user interface parameterised control commands.  This can be used to
  * send down an integer, a data pointer or a function pointer, as well as be
  * used to get information from a UI.
  */
-int UI_ctrl(UI *ui, int cmd, long i, void *p, void (*f) (void));
+int __cdecl UI_ctrl(UI *ui, int cmd, long i, void *p, void (*f) (void));
 
 /* The commands */
 /*
@@ -207,19 +207,19 @@ int UI_ctrl(UI *ui, int cmd, long i, void *p, void (*f) (void));
 
 # define UI_get_ex_new_index(l, p, newf, dupf, freef) \
     CRYPTO_get_ex_new_index(CRYPTO_EX_INDEX_UI, l, p, newf, dupf, freef)
-int UI_set_ex_data(UI *r, int idx, void *arg);
-void *UI_get_ex_data(UI *r, int idx);
+int __cdecl UI_set_ex_data(UI *r, int idx, void *arg);
+void * __cdecl UI_get_ex_data(UI *r, int idx);
 
 /* Use specific methods instead of the built-in one */
-void UI_set_default_method(const UI_METHOD *meth);
-const UI_METHOD *UI_get_default_method(void);
-const UI_METHOD *UI_get_method(UI *ui);
-const UI_METHOD *UI_set_method(UI *ui, const UI_METHOD *meth);
+void __cdecl UI_set_default_method(const UI_METHOD *meth);
+const UI_METHOD * __cdecl UI_get_default_method(void);
+const UI_METHOD * __cdecl UI_get_method(UI *ui);
+const UI_METHOD * __cdecl UI_set_method(UI *ui, const UI_METHOD *meth);
 
 # ifndef OPENSSL_NO_UI_CONSOLE
 
 /* The method with all the built-in thingies */
-UI_METHOD *UI_OpenSSL(void);
+UI_METHOD * __cdecl UI_OpenSSL(void);
 
 # endif
 
@@ -227,7 +227,7 @@ UI_METHOD *UI_OpenSSL(void);
  * NULL method.  Literally does nothing, but may serve as a placeholder
  * to avoid internal default.
  */
-const UI_METHOD *UI_null(void);
+const UI_METHOD * __cdecl UI_null(void);
 
 /* ---------- For method writers ---------- */
 /*-
@@ -293,35 +293,35 @@ enum UI_string_types {
 };
 
 /* Create and manipulate methods */
-UI_METHOD *UI_create_method(const char *name);
-void UI_destroy_method(UI_METHOD *ui_method);
-int UI_method_set_opener(UI_METHOD *method, int (*opener) (UI *ui));
-int UI_method_set_writer(UI_METHOD *method,
-                         int (*writer) (UI *ui, UI_STRING *uis));
-int UI_method_set_flusher(UI_METHOD *method, int (*flusher) (UI *ui));
-int UI_method_set_reader(UI_METHOD *method,
-                         int (*reader) (UI *ui, UI_STRING *uis));
-int UI_method_set_closer(UI_METHOD *method, int (*closer) (UI *ui));
-int UI_method_set_data_duplicator(UI_METHOD *method,
-                                  void *(*duplicator) (UI *ui, void *ui_data),
-                                  void (*destructor)(UI *ui, void *ui_data));
-int UI_method_set_prompt_constructor(UI_METHOD *method,
-                                     char *(*prompt_constructor) (UI *ui,
+UI_METHOD * __cdecl UI_create_method(const char *name);
+void __cdecl UI_destroy_method(UI_METHOD *ui_method);
+int __cdecl UI_method_set_opener(UI_METHOD *method, int (__cdecl *opener) (UI *ui));
+int __cdecl UI_method_set_writer(UI_METHOD *method,
+                         int (__cdecl *writer) (UI *ui, UI_STRING *uis));
+int __cdecl UI_method_set_flusher(UI_METHOD *method, int (__cdecl *flusher) (UI *ui));
+int __cdecl UI_method_set_reader(UI_METHOD *method,
+                         int (__cdecl *reader) (UI *ui, UI_STRING *uis));
+int __cdecl UI_method_set_closer(UI_METHOD *method, int (__cdecl *closer) (UI *ui));
+int __cdecl UI_method_set_data_duplicator(UI_METHOD *method,
+                                  void *(__cdecl *duplicator) (UI *ui, void *ui_data),
+                                  void (__cdecl *destructor)(UI *ui, void *ui_data));
+int __cdecl UI_method_set_prompt_constructor(UI_METHOD *method,
+                                     char *(__cdecl *prompt_constructor) (UI *ui,
                                                                   const char
                                                                   *object_desc,
                                                                   const char
                                                                   *object_name));
-int UI_method_set_ex_data(UI_METHOD *method, int idx, void *data);
-int (*UI_method_get_opener(const UI_METHOD *method)) (UI *);
-int (*UI_method_get_writer(const UI_METHOD *method)) (UI *, UI_STRING *);
-int (*UI_method_get_flusher(const UI_METHOD *method)) (UI *);
-int (*UI_method_get_reader(const UI_METHOD *method)) (UI *, UI_STRING *);
-int (*UI_method_get_closer(const UI_METHOD *method)) (UI *);
-char *(*UI_method_get_prompt_constructor(const UI_METHOD *method))
+int __cdecl UI_method_set_ex_data(UI_METHOD *method, int idx, void *data);
+int (__cdecl *UI_method_get_opener(const UI_METHOD *method)) (UI *);
+int (__cdecl *UI_method_get_writer(const UI_METHOD *method)) (UI *, UI_STRING *);
+int (__cdecl *UI_method_get_flusher(const UI_METHOD *method)) (UI *);
+int (__cdecl *UI_method_get_reader(const UI_METHOD *method)) (UI *, UI_STRING *);
+int (__cdecl *UI_method_get_closer(const UI_METHOD *method)) (UI *);
+char *(__cdecl *UI_method_get_prompt_constructor(const UI_METHOD *method))
     (UI *, const char *, const char *);
-void *(*UI_method_get_data_duplicator(const UI_METHOD *method)) (UI *, void *);
-void (*UI_method_get_data_destructor(const UI_METHOD *method)) (UI *, void *);
-const void *UI_method_get_ex_data(const UI_METHOD *method, int idx);
+void *(__cdecl *UI_method_get_data_duplicator(const UI_METHOD *method)) (UI *, void *);
+void (__cdecl *UI_method_get_data_destructor(const UI_METHOD *method)) (UI *, void *);
+const void * __cdecl UI_method_get_ex_data(const UI_METHOD *method, int idx);
 
 /*
  * The following functions are helpers for method writers to access relevant
@@ -329,37 +329,37 @@ const void *UI_method_get_ex_data(const UI_METHOD *method, int idx);
  */
 
 /* Return type of the UI_STRING */
-enum UI_string_types UI_get_string_type(UI_STRING *uis);
+enum UI_string_types __cdecl UI_get_string_type(UI_STRING *uis);
 /* Return input flags of the UI_STRING */
-int UI_get_input_flags(UI_STRING *uis);
+int __cdecl UI_get_input_flags(UI_STRING *uis);
 /* Return the actual string to output (the prompt, info or error) */
-const char *UI_get0_output_string(UI_STRING *uis);
+const char * __cdecl UI_get0_output_string(UI_STRING *uis);
 /*
  * Return the optional action string to output (the boolean prompt
  * instruction)
  */
-const char *UI_get0_action_string(UI_STRING *uis);
+const char * __cdecl UI_get0_action_string(UI_STRING *uis);
 /* Return the result of a prompt */
-const char *UI_get0_result_string(UI_STRING *uis);
-int UI_get_result_string_length(UI_STRING *uis);
+const char * __cdecl UI_get0_result_string(UI_STRING *uis);
+int __cdecl UI_get_result_string_length(UI_STRING *uis);
 /*
  * Return the string to test the result against.  Only useful with verifies.
  */
-const char *UI_get0_test_string(UI_STRING *uis);
+const char * __cdecl UI_get0_test_string(UI_STRING *uis);
 /* Return the required minimum size of the result */
-int UI_get_result_minsize(UI_STRING *uis);
+int __cdecl UI_get_result_minsize(UI_STRING *uis);
 /* Return the required maximum size of the result */
-int UI_get_result_maxsize(UI_STRING *uis);
+int __cdecl UI_get_result_maxsize(UI_STRING *uis);
 /* Set the result of a UI_STRING. */
-int UI_set_result(UI *ui, UI_STRING *uis, const char *result);
-int UI_set_result_ex(UI *ui, UI_STRING *uis, const char *result, int len);
+int __cdecl UI_set_result(UI *ui, UI_STRING *uis, const char *result);
+int __cdecl UI_set_result_ex(UI *ui, UI_STRING *uis, const char *result, int len);
 
 /* A couple of popular utility functions */
-int UI_UTIL_read_pw_string(char *buf, int length, const char *prompt,
+int __cdecl UI_UTIL_read_pw_string(char *buf, int length, const char *prompt,
                            int verify);
-int UI_UTIL_read_pw(char *buf, char *buff, int size, const char *prompt,
+int __cdecl UI_UTIL_read_pw(char *buf, char *buff, int size, const char *prompt,
                     int verify);
-UI_METHOD *UI_UTIL_wrap_read_pem_callback(pem_password_cb *cb, int rwflag);
+UI_METHOD * __cdecl UI_UTIL_wrap_read_pem_callback(pem_password_cb *cb, int rwflag);
 
 
 # ifdef  __cplusplus
diff --git a/include/openssl/uierr.h b/include/openssl/uierr.h
index bd68864d0d..e006b09742 100644
--- a/include/openssl/uierr.h
+++ b/include/openssl/uierr.h
@@ -18,7 +18,7 @@
 # ifdef  __cplusplus
 extern "C"
 # endif
-int ERR_load_UI_strings(void);
+int __cdecl ERR_load_UI_strings(void);
 
 /*
  * UI function codes.
diff --git a/include/openssl/whrlpool.h b/include/openssl/whrlpool.h
index 20ea3503b7..b8835bed8c 100644
--- a/include/openssl/whrlpool.h
+++ b/include/openssl/whrlpool.h
@@ -34,11 +34,11 @@ typedef struct {
     size_t bitlen[WHIRLPOOL_COUNTER / sizeof(size_t)];
 } WHIRLPOOL_CTX;
 
-int WHIRLPOOL_Init(WHIRLPOOL_CTX *c);
-int WHIRLPOOL_Update(WHIRLPOOL_CTX *c, const void *inp, size_t bytes);
-void WHIRLPOOL_BitUpdate(WHIRLPOOL_CTX *c, const void *inp, size_t bits);
-int WHIRLPOOL_Final(unsigned char *md, WHIRLPOOL_CTX *c);
-unsigned char *WHIRLPOOL(const void *inp, size_t bytes, unsigned char *md);
+int __cdecl WHIRLPOOL_Init(WHIRLPOOL_CTX *c);
+int __cdecl WHIRLPOOL_Update(WHIRLPOOL_CTX *c, const void *inp, size_t bytes);
+void __cdecl WHIRLPOOL_BitUpdate(WHIRLPOOL_CTX *c, const void *inp, size_t bits);
+int __cdecl WHIRLPOOL_Final(unsigned char *md, WHIRLPOOL_CTX *c);
+unsigned char * __cdecl WHIRLPOOL(const void *inp, size_t bytes, unsigned char *md);
 
 # ifdef __cplusplus
 }
diff --git a/include/openssl/x509.h b/include/openssl/x509.h
index 39ca0ba575..817dc340f9 100644
--- a/include/openssl/x509.h
+++ b/include/openssl/x509.h
@@ -331,8 +331,8 @@ extern "C" {
 # define         X509_REQ_extract_key(a) X509_REQ_get_pubkey(a)
 # define         X509_name_cmp(a,b)      X509_NAME_cmp((a),(b))
 
-void X509_CRL_set_default_method(const X509_CRL_METHOD *meth);
-X509_CRL_METHOD *X509_CRL_METHOD_new(int (*crl_init) (X509_CRL *crl),
+void __cdecl X509_CRL_set_default_method(const X509_CRL_METHOD *meth);
+X509_CRL_METHOD * __cdecl X509_CRL_METHOD_new(int (*crl_init) (X509_CRL *crl),
                                      int (*crl_free) (X509_CRL *crl),
                                      int (*crl_lookup) (X509_CRL *crl,
                                                         X509_REVOKED **ret,
@@ -340,164 +340,164 @@ X509_CRL_METHOD *X509_CRL_METHOD_new(int (*crl_init) (X509_CRL *crl),
                                                         X509_NAME *issuer),
                                      int (*crl_verify) (X509_CRL *crl,
                                                         EVP_PKEY *pk));
-void X509_CRL_METHOD_free(X509_CRL_METHOD *m);
+void __cdecl X509_CRL_METHOD_free(X509_CRL_METHOD *m);
 
-void X509_CRL_set_meth_data(X509_CRL *crl, void *dat);
-void *X509_CRL_get_meth_data(X509_CRL *crl);
+void __cdecl X509_CRL_set_meth_data(X509_CRL *crl, void *dat);
+void * __cdecl X509_CRL_get_meth_data(X509_CRL *crl);
 
-const char *X509_verify_cert_error_string(long n);
+const char * __cdecl X509_verify_cert_error_string(long n);
 
-int X509_verify(X509 *a, EVP_PKEY *r);
+int __cdecl X509_verify(X509 *a, EVP_PKEY *r);
 
-int X509_REQ_verify(X509_REQ *a, EVP_PKEY *r);
-int X509_CRL_verify(X509_CRL *a, EVP_PKEY *r);
-int NETSCAPE_SPKI_verify(NETSCAPE_SPKI *a, EVP_PKEY *r);
+int __cdecl X509_REQ_verify(X509_REQ *a, EVP_PKEY *r);
+int __cdecl X509_CRL_verify(X509_CRL *a, EVP_PKEY *r);
+int __cdecl NETSCAPE_SPKI_verify(NETSCAPE_SPKI *a, EVP_PKEY *r);
 
-NETSCAPE_SPKI *NETSCAPE_SPKI_b64_decode(const char *str, int len);
-char *NETSCAPE_SPKI_b64_encode(NETSCAPE_SPKI *x);
-EVP_PKEY *NETSCAPE_SPKI_get_pubkey(NETSCAPE_SPKI *x);
-int NETSCAPE_SPKI_set_pubkey(NETSCAPE_SPKI *x, EVP_PKEY *pkey);
+NETSCAPE_SPKI * __cdecl NETSCAPE_SPKI_b64_decode(const char *str, int len);
+char * __cdecl NETSCAPE_SPKI_b64_encode(NETSCAPE_SPKI *x);
+EVP_PKEY * __cdecl NETSCAPE_SPKI_get_pubkey(NETSCAPE_SPKI *x);
+int __cdecl NETSCAPE_SPKI_set_pubkey(NETSCAPE_SPKI *x, EVP_PKEY *pkey);
 
-int NETSCAPE_SPKI_print(BIO *out, NETSCAPE_SPKI *spki);
+int __cdecl NETSCAPE_SPKI_print(BIO *out, NETSCAPE_SPKI *spki);
 
-int X509_signature_dump(BIO *bp, const ASN1_STRING *sig, int indent);
-int X509_signature_print(BIO *bp, const X509_ALGOR *alg,
+int __cdecl X509_signature_dump(BIO *bp, const ASN1_STRING *sig, int indent);
+int __cdecl X509_signature_print(BIO *bp, const X509_ALGOR *alg,
                          const ASN1_STRING *sig);
 
-int X509_sign(X509 *x, EVP_PKEY *pkey, const EVP_MD *md);
-int X509_sign_ctx(X509 *x, EVP_MD_CTX *ctx);
+int __cdecl X509_sign(X509 *x, EVP_PKEY *pkey, const EVP_MD *md);
+int __cdecl X509_sign_ctx(X509 *x, EVP_MD_CTX *ctx);
 # ifndef OPENSSL_NO_OCSP
-int X509_http_nbio(OCSP_REQ_CTX *rctx, X509 **pcert);
+int __cdecl X509_http_nbio(OCSP_REQ_CTX *rctx, X509 **pcert);
 # endif
-int X509_REQ_sign(X509_REQ *x, EVP_PKEY *pkey, const EVP_MD *md);
-int X509_REQ_sign_ctx(X509_REQ *x, EVP_MD_CTX *ctx);
-int X509_CRL_sign(X509_CRL *x, EVP_PKEY *pkey, const EVP_MD *md);
-int X509_CRL_sign_ctx(X509_CRL *x, EVP_MD_CTX *ctx);
+int __cdecl X509_REQ_sign(X509_REQ *x, EVP_PKEY *pkey, const EVP_MD *md);
+int __cdecl X509_REQ_sign_ctx(X509_REQ *x, EVP_MD_CTX *ctx);
+int __cdecl X509_CRL_sign(X509_CRL *x, EVP_PKEY *pkey, const EVP_MD *md);
+int __cdecl X509_CRL_sign_ctx(X509_CRL *x, EVP_MD_CTX *ctx);
 # ifndef OPENSSL_NO_OCSP
-int X509_CRL_http_nbio(OCSP_REQ_CTX *rctx, X509_CRL **pcrl);
+int __cdecl X509_CRL_http_nbio(OCSP_REQ_CTX *rctx, X509_CRL **pcrl);
 # endif
-int NETSCAPE_SPKI_sign(NETSCAPE_SPKI *x, EVP_PKEY *pkey, const EVP_MD *md);
+int __cdecl NETSCAPE_SPKI_sign(NETSCAPE_SPKI *x, EVP_PKEY *pkey, const EVP_MD *md);
 
-int X509_pubkey_digest(const X509 *data, const EVP_MD *type,
+int __cdecl X509_pubkey_digest(const X509 *data, const EVP_MD *type,
                        unsigned char *md, unsigned int *len);
-int X509_digest(const X509 *data, const EVP_MD *type,
+int __cdecl X509_digest(const X509 *data, const EVP_MD *type,
                 unsigned char *md, unsigned int *len);
-int X509_CRL_digest(const X509_CRL *data, const EVP_MD *type,
+int __cdecl X509_CRL_digest(const X509_CRL *data, const EVP_MD *type,
                     unsigned char *md, unsigned int *len);
-int X509_REQ_digest(const X509_REQ *data, const EVP_MD *type,
+int __cdecl X509_REQ_digest(const X509_REQ *data, const EVP_MD *type,
                     unsigned char *md, unsigned int *len);
-int X509_NAME_digest(const X509_NAME *data, const EVP_MD *type,
+int __cdecl X509_NAME_digest(const X509_NAME *data, const EVP_MD *type,
                      unsigned char *md, unsigned int *len);
 
 # ifndef OPENSSL_NO_STDIO
-X509 *d2i_X509_fp(FILE *fp, X509 **x509);
-int i2d_X509_fp(FILE *fp, X509 *x509);
-X509_CRL *d2i_X509_CRL_fp(FILE *fp, X509_CRL **crl);
-int i2d_X509_CRL_fp(FILE *fp, X509_CRL *crl);
-X509_REQ *d2i_X509_REQ_fp(FILE *fp, X509_REQ **req);
-int i2d_X509_REQ_fp(FILE *fp, X509_REQ *req);
+X509 * __cdecl d2i_X509_fp(FILE *fp, X509 **x509);
+int __cdecl i2d_X509_fp(FILE *fp, X509 *x509);
+X509_CRL * __cdecl d2i_X509_CRL_fp(FILE *fp, X509_CRL **crl);
+int __cdecl i2d_X509_CRL_fp(FILE *fp, X509_CRL *crl);
+X509_REQ * __cdecl d2i_X509_REQ_fp(FILE *fp, X509_REQ **req);
+int __cdecl i2d_X509_REQ_fp(FILE *fp, X509_REQ *req);
 #  ifndef OPENSSL_NO_RSA
-RSA *d2i_RSAPrivateKey_fp(FILE *fp, RSA **rsa);
-int i2d_RSAPrivateKey_fp(FILE *fp, RSA *rsa);
-RSA *d2i_RSAPublicKey_fp(FILE *fp, RSA **rsa);
-int i2d_RSAPublicKey_fp(FILE *fp, RSA *rsa);
-RSA *d2i_RSA_PUBKEY_fp(FILE *fp, RSA **rsa);
-int i2d_RSA_PUBKEY_fp(FILE *fp, RSA *rsa);
+RSA * __cdecl d2i_RSAPrivateKey_fp(FILE *fp, RSA **rsa);
+int __cdecl i2d_RSAPrivateKey_fp(FILE *fp, RSA *rsa);
+RSA * __cdecl d2i_RSAPublicKey_fp(FILE *fp, RSA **rsa);
+int __cdecl i2d_RSAPublicKey_fp(FILE *fp, RSA *rsa);
+RSA * __cdecl d2i_RSA_PUBKEY_fp(FILE *fp, RSA **rsa);
+int __cdecl i2d_RSA_PUBKEY_fp(FILE *fp, RSA *rsa);
 #  endif
 #  ifndef OPENSSL_NO_DSA
-DSA *d2i_DSA_PUBKEY_fp(FILE *fp, DSA **dsa);
-int i2d_DSA_PUBKEY_fp(FILE *fp, DSA *dsa);
-DSA *d2i_DSAPrivateKey_fp(FILE *fp, DSA **dsa);
-int i2d_DSAPrivateKey_fp(FILE *fp, DSA *dsa);
+DSA * __cdecl d2i_DSA_PUBKEY_fp(FILE *fp, DSA **dsa);
+int __cdecl i2d_DSA_PUBKEY_fp(FILE *fp, DSA *dsa);
+DSA * __cdecl d2i_DSAPrivateKey_fp(FILE *fp, DSA **dsa);
+int __cdecl i2d_DSAPrivateKey_fp(FILE *fp, DSA *dsa);
 #  endif
 #  ifndef OPENSSL_NO_EC
-EC_KEY *d2i_EC_PUBKEY_fp(FILE *fp, EC_KEY **eckey);
-int i2d_EC_PUBKEY_fp(FILE *fp, EC_KEY *eckey);
-EC_KEY *d2i_ECPrivateKey_fp(FILE *fp, EC_KEY **eckey);
-int i2d_ECPrivateKey_fp(FILE *fp, EC_KEY *eckey);
+EC_KEY * __cdecl d2i_EC_PUBKEY_fp(FILE *fp, EC_KEY **eckey);
+int __cdecl i2d_EC_PUBKEY_fp(FILE *fp, EC_KEY *eckey);
+EC_KEY * __cdecl d2i_ECPrivateKey_fp(FILE *fp, EC_KEY **eckey);
+int __cdecl i2d_ECPrivateKey_fp(FILE *fp, EC_KEY *eckey);
 #  endif
-X509_SIG *d2i_PKCS8_fp(FILE *fp, X509_SIG **p8);
-int i2d_PKCS8_fp(FILE *fp, X509_SIG *p8);
-PKCS8_PRIV_KEY_INFO *d2i_PKCS8_PRIV_KEY_INFO_fp(FILE *fp,
+X509_SIG * __cdecl d2i_PKCS8_fp(FILE *fp, X509_SIG **p8);
+int __cdecl i2d_PKCS8_fp(FILE *fp, X509_SIG *p8);
+PKCS8_PRIV_KEY_INFO * __cdecl d2i_PKCS8_PRIV_KEY_INFO_fp(FILE *fp,
                                                 PKCS8_PRIV_KEY_INFO **p8inf);
-int i2d_PKCS8_PRIV_KEY_INFO_fp(FILE *fp, PKCS8_PRIV_KEY_INFO *p8inf);
-int i2d_PKCS8PrivateKeyInfo_fp(FILE *fp, EVP_PKEY *key);
-int i2d_PrivateKey_fp(FILE *fp, EVP_PKEY *pkey);
-EVP_PKEY *d2i_PrivateKey_fp(FILE *fp, EVP_PKEY **a);
-int i2d_PUBKEY_fp(FILE *fp, EVP_PKEY *pkey);
-EVP_PKEY *d2i_PUBKEY_fp(FILE *fp, EVP_PKEY **a);
+int __cdecl i2d_PKCS8_PRIV_KEY_INFO_fp(FILE *fp, PKCS8_PRIV_KEY_INFO *p8inf);
+int __cdecl i2d_PKCS8PrivateKeyInfo_fp(FILE *fp, EVP_PKEY *key);
+int __cdecl i2d_PrivateKey_fp(FILE *fp, EVP_PKEY *pkey);
+EVP_PKEY * __cdecl d2i_PrivateKey_fp(FILE *fp, EVP_PKEY **a);
+int __cdecl i2d_PUBKEY_fp(FILE *fp, EVP_PKEY *pkey);
+EVP_PKEY * __cdecl d2i_PUBKEY_fp(FILE *fp, EVP_PKEY **a);
 # endif
 
-X509 *d2i_X509_bio(BIO *bp, X509 **x509);
-int i2d_X509_bio(BIO *bp, X509 *x509);
-X509_CRL *d2i_X509_CRL_bio(BIO *bp, X509_CRL **crl);
-int i2d_X509_CRL_bio(BIO *bp, X509_CRL *crl);
-X509_REQ *d2i_X509_REQ_bio(BIO *bp, X509_REQ **req);
-int i2d_X509_REQ_bio(BIO *bp, X509_REQ *req);
+X509 * __cdecl d2i_X509_bio(BIO *bp, X509 **x509);
+int __cdecl i2d_X509_bio(BIO *bp, X509 *x509);
+X509_CRL * __cdecl d2i_X509_CRL_bio(BIO *bp, X509_CRL **crl);
+int __cdecl i2d_X509_CRL_bio(BIO *bp, X509_CRL *crl);
+X509_REQ * __cdecl d2i_X509_REQ_bio(BIO *bp, X509_REQ **req);
+int __cdecl i2d_X509_REQ_bio(BIO *bp, X509_REQ *req);
 #  ifndef OPENSSL_NO_RSA
-RSA *d2i_RSAPrivateKey_bio(BIO *bp, RSA **rsa);
-int i2d_RSAPrivateKey_bio(BIO *bp, RSA *rsa);
-RSA *d2i_RSAPublicKey_bio(BIO *bp, RSA **rsa);
-int i2d_RSAPublicKey_bio(BIO *bp, RSA *rsa);
-RSA *d2i_RSA_PUBKEY_bio(BIO *bp, RSA **rsa);
-int i2d_RSA_PUBKEY_bio(BIO *bp, RSA *rsa);
+RSA * __cdecl d2i_RSAPrivateKey_bio(BIO *bp, RSA **rsa);
+int __cdecl i2d_RSAPrivateKey_bio(BIO *bp, RSA *rsa);
+RSA * __cdecl d2i_RSAPublicKey_bio(BIO *bp, RSA **rsa);
+int __cdecl i2d_RSAPublicKey_bio(BIO *bp, RSA *rsa);
+RSA * __cdecl d2i_RSA_PUBKEY_bio(BIO *bp, RSA **rsa);
+int __cdecl i2d_RSA_PUBKEY_bio(BIO *bp, RSA *rsa);
 #  endif
 #  ifndef OPENSSL_NO_DSA
-DSA *d2i_DSA_PUBKEY_bio(BIO *bp, DSA **dsa);
-int i2d_DSA_PUBKEY_bio(BIO *bp, DSA *dsa);
-DSA *d2i_DSAPrivateKey_bio(BIO *bp, DSA **dsa);
-int i2d_DSAPrivateKey_bio(BIO *bp, DSA *dsa);
+DSA * __cdecl d2i_DSA_PUBKEY_bio(BIO *bp, DSA **dsa);
+int __cdecl i2d_DSA_PUBKEY_bio(BIO *bp, DSA *dsa);
+DSA * __cdecl d2i_DSAPrivateKey_bio(BIO *bp, DSA **dsa);
+int __cdecl i2d_DSAPrivateKey_bio(BIO *bp, DSA *dsa);
 #  endif
 #  ifndef OPENSSL_NO_EC
-EC_KEY *d2i_EC_PUBKEY_bio(BIO *bp, EC_KEY **eckey);
-int i2d_EC_PUBKEY_bio(BIO *bp, EC_KEY *eckey);
-EC_KEY *d2i_ECPrivateKey_bio(BIO *bp, EC_KEY **eckey);
-int i2d_ECPrivateKey_bio(BIO *bp, EC_KEY *eckey);
+EC_KEY * __cdecl d2i_EC_PUBKEY_bio(BIO *bp, EC_KEY **eckey);
+int __cdecl i2d_EC_PUBKEY_bio(BIO *bp, EC_KEY *eckey);
+EC_KEY * __cdecl d2i_ECPrivateKey_bio(BIO *bp, EC_KEY **eckey);
+int __cdecl i2d_ECPrivateKey_bio(BIO *bp, EC_KEY *eckey);
 #  endif
-X509_SIG *d2i_PKCS8_bio(BIO *bp, X509_SIG **p8);
-int i2d_PKCS8_bio(BIO *bp, X509_SIG *p8);
-PKCS8_PRIV_KEY_INFO *d2i_PKCS8_PRIV_KEY_INFO_bio(BIO *bp,
+X509_SIG * __cdecl d2i_PKCS8_bio(BIO *bp, X509_SIG **p8);
+int __cdecl i2d_PKCS8_bio(BIO *bp, X509_SIG *p8);
+PKCS8_PRIV_KEY_INFO * __cdecl d2i_PKCS8_PRIV_KEY_INFO_bio(BIO *bp,
                                                  PKCS8_PRIV_KEY_INFO **p8inf);
-int i2d_PKCS8_PRIV_KEY_INFO_bio(BIO *bp, PKCS8_PRIV_KEY_INFO *p8inf);
-int i2d_PKCS8PrivateKeyInfo_bio(BIO *bp, EVP_PKEY *key);
-int i2d_PrivateKey_bio(BIO *bp, EVP_PKEY *pkey);
-EVP_PKEY *d2i_PrivateKey_bio(BIO *bp, EVP_PKEY **a);
-int i2d_PUBKEY_bio(BIO *bp, EVP_PKEY *pkey);
-EVP_PKEY *d2i_PUBKEY_bio(BIO *bp, EVP_PKEY **a);
-
-X509 *X509_dup(X509 *x509);
-X509_ATTRIBUTE *X509_ATTRIBUTE_dup(X509_ATTRIBUTE *xa);
-X509_EXTENSION *X509_EXTENSION_dup(X509_EXTENSION *ex);
-X509_CRL *X509_CRL_dup(X509_CRL *crl);
-X509_REVOKED *X509_REVOKED_dup(X509_REVOKED *rev);
-X509_REQ *X509_REQ_dup(X509_REQ *req);
-X509_ALGOR *X509_ALGOR_dup(X509_ALGOR *xn);
-int X509_ALGOR_set0(X509_ALGOR *alg, ASN1_OBJECT *aobj, int ptype,
+int __cdecl i2d_PKCS8_PRIV_KEY_INFO_bio(BIO *bp, PKCS8_PRIV_KEY_INFO *p8inf);
+int __cdecl i2d_PKCS8PrivateKeyInfo_bio(BIO *bp, EVP_PKEY *key);
+int __cdecl i2d_PrivateKey_bio(BIO *bp, EVP_PKEY *pkey);
+EVP_PKEY * __cdecl d2i_PrivateKey_bio(BIO *bp, EVP_PKEY **a);
+int __cdecl i2d_PUBKEY_bio(BIO *bp, EVP_PKEY *pkey);
+EVP_PKEY * __cdecl d2i_PUBKEY_bio(BIO *bp, EVP_PKEY **a);
+
+X509 * __cdecl X509_dup(X509 *x509);
+X509_ATTRIBUTE * __cdecl X509_ATTRIBUTE_dup(X509_ATTRIBUTE *xa);
+X509_EXTENSION * __cdecl X509_EXTENSION_dup(X509_EXTENSION *ex);
+X509_CRL * __cdecl X509_CRL_dup(X509_CRL *crl);
+X509_REVOKED * __cdecl X509_REVOKED_dup(X509_REVOKED *rev);
+X509_REQ * __cdecl X509_REQ_dup(X509_REQ *req);
+X509_ALGOR * __cdecl X509_ALGOR_dup(X509_ALGOR *xn);
+int __cdecl X509_ALGOR_set0(X509_ALGOR *alg, ASN1_OBJECT *aobj, int ptype,
                     void *pval);
-void X509_ALGOR_get0(const ASN1_OBJECT **paobj, int *pptype,
+void __cdecl X509_ALGOR_get0(const ASN1_OBJECT **paobj, int *pptype,
                      const void **ppval, const X509_ALGOR *algor);
-void X509_ALGOR_set_md(X509_ALGOR *alg, const EVP_MD *md);
-int X509_ALGOR_cmp(const X509_ALGOR *a, const X509_ALGOR *b);
+void __cdecl X509_ALGOR_set_md(X509_ALGOR *alg, const EVP_MD *md);
+int __cdecl X509_ALGOR_cmp(const X509_ALGOR *a, const X509_ALGOR *b);
 
-X509_NAME *X509_NAME_dup(X509_NAME *xn);
-X509_NAME_ENTRY *X509_NAME_ENTRY_dup(X509_NAME_ENTRY *ne);
+X509_NAME * __cdecl X509_NAME_dup(X509_NAME *xn);
+X509_NAME_ENTRY * __cdecl X509_NAME_ENTRY_dup(X509_NAME_ENTRY *ne);
 
-int X509_cmp_time(const ASN1_TIME *s, time_t *t);
-int X509_cmp_current_time(const ASN1_TIME *s);
-ASN1_TIME *X509_time_adj(ASN1_TIME *s, long adj, time_t *t);
-ASN1_TIME *X509_time_adj_ex(ASN1_TIME *s,
+int __cdecl X509_cmp_time(const ASN1_TIME *s, time_t *t);
+int __cdecl X509_cmp_current_time(const ASN1_TIME *s);
+ASN1_TIME * __cdecl X509_time_adj(ASN1_TIME *s, long adj, time_t *t);
+ASN1_TIME * __cdecl X509_time_adj_ex(ASN1_TIME *s,
                             int offset_day, long offset_sec, time_t *t);
-ASN1_TIME *X509_gmtime_adj(ASN1_TIME *s, long adj);
+ASN1_TIME * __cdecl X509_gmtime_adj(ASN1_TIME *s, long adj);
 
-const char *X509_get_default_cert_area(void);
-const char *X509_get_default_cert_dir(void);
-const char *X509_get_default_cert_file(void);
-const char *X509_get_default_cert_dir_env(void);
-const char *X509_get_default_cert_file_env(void);
-const char *X509_get_default_private_dir(void);
+const char * __cdecl X509_get_default_cert_area(void);
+const char * __cdecl X509_get_default_cert_dir(void);
+const char * __cdecl X509_get_default_cert_file(void);
+const char * __cdecl X509_get_default_cert_dir_env(void);
+const char * __cdecl X509_get_default_cert_file_env(void);
+const char * __cdecl X509_get_default_private_dir(void);
 
-X509_REQ *X509_to_X509_REQ(X509 *x, EVP_PKEY *pkey, const EVP_MD *md);
-X509 *X509_REQ_to_X509(X509_REQ *r, int days, EVP_PKEY *pkey);
+X509_REQ * __cdecl X509_to_X509_REQ(X509 *x, EVP_PKEY *pkey, const EVP_MD *md);
+X509 * __cdecl X509_REQ_to_X509(X509_REQ *r, int days, EVP_PKEY *pkey);
 
 DECLARE_ASN1_FUNCTIONS(X509_ALGOR)
 DECLARE_ASN1_ENCODE_FUNCTIONS(X509_ALGORS, X509_ALGORS, X509_ALGORS)
@@ -505,37 +505,37 @@ DECLARE_ASN1_FUNCTIONS(X509_VAL)
 
 DECLARE_ASN1_FUNCTIONS(X509_PUBKEY)
 
-int X509_PUBKEY_set(X509_PUBKEY **x, EVP_PKEY *pkey);
-EVP_PKEY *X509_PUBKEY_get0(X509_PUBKEY *key);
-EVP_PKEY *X509_PUBKEY_get(X509_PUBKEY *key);
-int X509_get_pubkey_parameters(EVP_PKEY *pkey, STACK_OF(X509) *chain);
-long X509_get_pathlen(X509 *x);
-int i2d_PUBKEY(EVP_PKEY *a, unsigned char **pp);
-EVP_PKEY *d2i_PUBKEY(EVP_PKEY **a, const unsigned char **pp, long length);
+int __cdecl X509_PUBKEY_set(X509_PUBKEY **x, EVP_PKEY *pkey);
+EVP_PKEY * __cdecl X509_PUBKEY_get0(X509_PUBKEY *key);
+EVP_PKEY * __cdecl X509_PUBKEY_get(X509_PUBKEY *key);
+int __cdecl X509_get_pubkey_parameters(EVP_PKEY *pkey, STACK_OF(X509) *chain);
+long __cdecl X509_get_pathlen(X509 *x);
+int __cdecl i2d_PUBKEY(EVP_PKEY *a, unsigned char **pp);
+EVP_PKEY * __cdecl d2i_PUBKEY(EVP_PKEY **a, const unsigned char **pp, long length);
 # ifndef OPENSSL_NO_RSA
-int i2d_RSA_PUBKEY(RSA *a, unsigned char **pp);
-RSA *d2i_RSA_PUBKEY(RSA **a, const unsigned char **pp, long length);
+int __cdecl i2d_RSA_PUBKEY(RSA *a, unsigned char **pp);
+RSA * __cdecl d2i_RSA_PUBKEY(RSA **a, const unsigned char **pp, long length);
 # endif
 # ifndef OPENSSL_NO_DSA
-int i2d_DSA_PUBKEY(DSA *a, unsigned char **pp);
-DSA *d2i_DSA_PUBKEY(DSA **a, const unsigned char **pp, long length);
+int __cdecl i2d_DSA_PUBKEY(DSA *a, unsigned char **pp);
+DSA * __cdecl d2i_DSA_PUBKEY(DSA **a, const unsigned char **pp, long length);
 # endif
 # ifndef OPENSSL_NO_EC
-int i2d_EC_PUBKEY(EC_KEY *a, unsigned char **pp);
-EC_KEY *d2i_EC_PUBKEY(EC_KEY **a, const unsigned char **pp, long length);
+int __cdecl i2d_EC_PUBKEY(EC_KEY *a, unsigned char **pp);
+EC_KEY * __cdecl d2i_EC_PUBKEY(EC_KEY **a, const unsigned char **pp, long length);
 # endif
 
 DECLARE_ASN1_FUNCTIONS(X509_SIG)
-void X509_SIG_get0(const X509_SIG *sig, const X509_ALGOR **palg,
+void __cdecl X509_SIG_get0(const X509_SIG *sig, const X509_ALGOR **palg,
                    const ASN1_OCTET_STRING **pdigest);
-void X509_SIG_getm(X509_SIG *sig, X509_ALGOR **palg,
+void __cdecl X509_SIG_getm(X509_SIG *sig, X509_ALGOR **palg,
                    ASN1_OCTET_STRING **pdigest);
 
 DECLARE_ASN1_FUNCTIONS(X509_REQ_INFO)
 DECLARE_ASN1_FUNCTIONS(X509_REQ)
 
 DECLARE_ASN1_FUNCTIONS(X509_ATTRIBUTE)
-X509_ATTRIBUTE *X509_ATTRIBUTE_create(int nid, int atrtype, void *value);
+X509_ATTRIBUTE * __cdecl X509_ATTRIBUTE_create(int nid, int atrtype, void *value);
 
 DECLARE_ASN1_FUNCTIONS(X509_EXTENSION)
 DECLARE_ASN1_ENCODE_FUNCTIONS(X509_EXTENSIONS, X509_EXTENSIONS, X509_EXTENSIONS)
@@ -544,7 +544,7 @@ DECLARE_ASN1_FUNCTIONS(X509_NAME_ENTRY)
 
 DECLARE_ASN1_FUNCTIONS(X509_NAME)
 
-int X509_NAME_set(X509_NAME **xn, X509_NAME *name);
+int __cdecl X509_NAME_set(X509_NAME **xn, X509_NAME *name);
 
 DECLARE_ASN1_FUNCTIONS(X509_CINF)
 
@@ -553,102 +553,102 @@ DECLARE_ASN1_FUNCTIONS(X509_CERT_AUX)
 
 #define X509_get_ex_new_index(l, p, newf, dupf, freef) \
     CRYPTO_get_ex_new_index(CRYPTO_EX_INDEX_X509, l, p, newf, dupf, freef)
-int X509_set_ex_data(X509 *r, int idx, void *arg);
-void *X509_get_ex_data(X509 *r, int idx);
-int i2d_X509_AUX(X509 *a, unsigned char **pp);
-X509 *d2i_X509_AUX(X509 **a, const unsigned char **pp, long length);
+int __cdecl X509_set_ex_data(X509 *r, int idx, void *arg);
+void * __cdecl X509_get_ex_data(X509 *r, int idx);
+int __cdecl i2d_X509_AUX(X509 *a, unsigned char **pp);
+X509 * __cdecl d2i_X509_AUX(X509 **a, const unsigned char **pp, long length);
 
-int i2d_re_X509_tbs(X509 *x, unsigned char **pp);
+int __cdecl i2d_re_X509_tbs(X509 *x, unsigned char **pp);
 
-int X509_SIG_INFO_get(const X509_SIG_INFO *siginf, int *mdnid, int *pknid,
+int __cdecl X509_SIG_INFO_get(const X509_SIG_INFO *siginf, int *mdnid, int *pknid,
                       int *secbits, uint32_t *flags);
-void X509_SIG_INFO_set(X509_SIG_INFO *siginf, int mdnid, int pknid,
+void __cdecl X509_SIG_INFO_set(X509_SIG_INFO *siginf, int mdnid, int pknid,
                        int secbits, uint32_t flags);
 
-int X509_get_signature_info(X509 *x, int *mdnid, int *pknid, int *secbits,
+int __cdecl X509_get_signature_info(X509 *x, int *mdnid, int *pknid, int *secbits,
                             uint32_t *flags);
 
-void X509_get0_signature(const ASN1_BIT_STRING **psig,
+void __cdecl X509_get0_signature(const ASN1_BIT_STRING **psig,
                          const X509_ALGOR **palg, const X509 *x);
-int X509_get_signature_nid(const X509 *x);
-
-int X509_trusted(const X509 *x);
-int X509_alias_set1(X509 *x, const unsigned char *name, int len);
-int X509_keyid_set1(X509 *x, const unsigned char *id, int len);
-unsigned char *X509_alias_get0(X509 *x, int *len);
-unsigned char *X509_keyid_get0(X509 *x, int *len);
-int (*X509_TRUST_set_default(int (*trust) (int, X509 *, int))) (int, X509 *,
+int __cdecl X509_get_signature_nid(const X509 *x);
+
+int __cdecl X509_trusted(const X509 *x);
+int __cdecl X509_alias_set1(X509 *x, const unsigned char *name, int len);
+int __cdecl X509_keyid_set1(X509 *x, const unsigned char *id, int len);
+unsigned char * __cdecl X509_alias_get0(X509 *x, int *len);
+unsigned char * __cdecl X509_keyid_get0(X509 *x, int *len);
+int (* __cdecl X509_TRUST_set_default(int (*trust) (int, X509 *, int))) (int, X509 *,
                                                                 int);
-int X509_TRUST_set(int *t, int trust);
-int X509_add1_trust_object(X509 *x, const ASN1_OBJECT *obj);
-int X509_add1_reject_object(X509 *x, const ASN1_OBJECT *obj);
-void X509_trust_clear(X509 *x);
-void X509_reject_clear(X509 *x);
+int __cdecl X509_TRUST_set(int *t, int trust);
+int __cdecl X509_add1_trust_object(X509 *x, const ASN1_OBJECT *obj);
+int __cdecl X509_add1_reject_object(X509 *x, const ASN1_OBJECT *obj);
+void __cdecl X509_trust_clear(X509 *x);
+void __cdecl X509_reject_clear(X509 *x);
 
-STACK_OF(ASN1_OBJECT) *X509_get0_trust_objects(X509 *x);
-STACK_OF(ASN1_OBJECT) *X509_get0_reject_objects(X509 *x);
+STACK_OF(ASN1_OBJECT) * __cdecl X509_get0_trust_objects(X509 *x);
+STACK_OF(ASN1_OBJECT) * __cdecl X509_get0_reject_objects(X509 *x);
 
 DECLARE_ASN1_FUNCTIONS(X509_REVOKED)
 DECLARE_ASN1_FUNCTIONS(X509_CRL_INFO)
 DECLARE_ASN1_FUNCTIONS(X509_CRL)
 
-int X509_CRL_add0_revoked(X509_CRL *crl, X509_REVOKED *rev);
-int X509_CRL_get0_by_serial(X509_CRL *crl,
+int __cdecl X509_CRL_add0_revoked(X509_CRL *crl, X509_REVOKED *rev);
+int __cdecl X509_CRL_get0_by_serial(X509_CRL *crl,
                             X509_REVOKED **ret, ASN1_INTEGER *serial);
-int X509_CRL_get0_by_cert(X509_CRL *crl, X509_REVOKED **ret, X509 *x);
+int __cdecl X509_CRL_get0_by_cert(X509_CRL *crl, X509_REVOKED **ret, X509 *x);
 
-X509_PKEY *X509_PKEY_new(void);
-void X509_PKEY_free(X509_PKEY *a);
+X509_PKEY * __cdecl X509_PKEY_new(void);
+void __cdecl X509_PKEY_free(X509_PKEY *a);
 
 DECLARE_ASN1_FUNCTIONS(NETSCAPE_SPKI)
 DECLARE_ASN1_FUNCTIONS(NETSCAPE_SPKAC)
 DECLARE_ASN1_FUNCTIONS(NETSCAPE_CERT_SEQUENCE)
 
-X509_INFO *X509_INFO_new(void);
-void X509_INFO_free(X509_INFO *a);
-char *X509_NAME_oneline(const X509_NAME *a, char *buf, int size);
+X509_INFO * __cdecl X509_INFO_new(void);
+void __cdecl X509_INFO_free(X509_INFO *a);
+char * __cdecl X509_NAME_oneline(const X509_NAME *a, char *buf, int size);
 
-int ASN1_verify(i2d_of_void *i2d, X509_ALGOR *algor1,
+int __cdecl ASN1_verify(i2d_of_void *i2d, X509_ALGOR *algor1,
                 ASN1_BIT_STRING *signature, char *data, EVP_PKEY *pkey);
 
-int ASN1_digest(i2d_of_void *i2d, const EVP_MD *type, char *data,
+int __cdecl ASN1_digest(i2d_of_void *i2d, const EVP_MD *type, char *data,
                 unsigned char *md, unsigned int *len);
 
-int ASN1_sign(i2d_of_void *i2d, X509_ALGOR *algor1,
+int __cdecl ASN1_sign(i2d_of_void *i2d, X509_ALGOR *algor1,
               X509_ALGOR *algor2, ASN1_BIT_STRING *signature,
               char *data, EVP_PKEY *pkey, const EVP_MD *type);
 
-int ASN1_item_digest(const ASN1_ITEM *it, const EVP_MD *type, void *data,
+int __cdecl ASN1_item_digest(const ASN1_ITEM *it, const EVP_MD *type, void *data,
                      unsigned char *md, unsigned int *len);
 
-int ASN1_item_verify(const ASN1_ITEM *it, X509_ALGOR *algor1,
+int __cdecl ASN1_item_verify(const ASN1_ITEM *it, X509_ALGOR *algor1,
                      ASN1_BIT_STRING *signature, void *data, EVP_PKEY *pkey);
 
-int ASN1_item_sign(const ASN1_ITEM *it, X509_ALGOR *algor1,
+int __cdecl ASN1_item_sign(const ASN1_ITEM *it, X509_ALGOR *algor1,
                    X509_ALGOR *algor2, ASN1_BIT_STRING *signature, void *data,
                    EVP_PKEY *pkey, const EVP_MD *type);
-int ASN1_item_sign_ctx(const ASN1_ITEM *it, X509_ALGOR *algor1,
+int __cdecl ASN1_item_sign_ctx(const ASN1_ITEM *it, X509_ALGOR *algor1,
                        X509_ALGOR *algor2, ASN1_BIT_STRING *signature,
                        void *asn, EVP_MD_CTX *ctx);
 
-long X509_get_version(const X509 *x);
-int X509_set_version(X509 *x, long version);
-int X509_set_serialNumber(X509 *x, ASN1_INTEGER *serial);
-ASN1_INTEGER *X509_get_serialNumber(X509 *x);
-const ASN1_INTEGER *X509_get0_serialNumber(const X509 *x);
-int X509_set_issuer_name(X509 *x, X509_NAME *name);
-X509_NAME *X509_get_issuer_name(const X509 *a);
-int X509_set_subject_name(X509 *x, X509_NAME *name);
-X509_NAME *X509_get_subject_name(const X509 *a);
-const ASN1_TIME * X509_get0_notBefore(const X509 *x);
-ASN1_TIME *X509_getm_notBefore(const X509 *x);
-int X509_set1_notBefore(X509 *x, const ASN1_TIME *tm);
-const ASN1_TIME *X509_get0_notAfter(const X509 *x);
-ASN1_TIME *X509_getm_notAfter(const X509 *x);
-int X509_set1_notAfter(X509 *x, const ASN1_TIME *tm);
-int X509_set_pubkey(X509 *x, EVP_PKEY *pkey);
-int X509_up_ref(X509 *x);
-int X509_get_signature_type(const X509 *x);
+long __cdecl X509_get_version(const X509 *x);
+int __cdecl X509_set_version(X509 *x, long version);
+int __cdecl X509_set_serialNumber(X509 *x, ASN1_INTEGER *serial);
+ASN1_INTEGER * __cdecl X509_get_serialNumber(X509 *x);
+const ASN1_INTEGER * __cdecl X509_get0_serialNumber(const X509 *x);
+int __cdecl X509_set_issuer_name(X509 *x, X509_NAME *name);
+X509_NAME * __cdecl X509_get_issuer_name(const X509 *a);
+int __cdecl X509_set_subject_name(X509 *x, X509_NAME *name);
+X509_NAME * __cdecl X509_get_subject_name(const X509 *a);
+const ASN1_TIME * __cdecl X509_get0_notBefore(const X509 *x);
+ASN1_TIME * __cdecl X509_getm_notBefore(const X509 *x);
+int __cdecl X509_set1_notBefore(X509 *x, const ASN1_TIME *tm);
+const ASN1_TIME * __cdecl X509_get0_notAfter(const X509 *x);
+ASN1_TIME * __cdecl X509_getm_notAfter(const X509 *x);
+int __cdecl X509_set1_notAfter(X509 *x, const ASN1_TIME *tm);
+int __cdecl X509_set_pubkey(X509 *x, EVP_PKEY *pkey);
+int __cdecl X509_up_ref(X509 *x);
+int __cdecl X509_get_signature_type(const X509 *x);
 
 # if OPENSSL_API_COMPAT < 0x10100000L
 #  define X509_get_notBefore X509_getm_notBefore
@@ -662,319 +662,319 @@ int X509_get_signature_type(const X509 *x);
  * This one is only used so that a binary form can output, as in
  * i2d_X509_PUBKEY(X509_get_X509_PUBKEY(x), &buf)
  */
-X509_PUBKEY *X509_get_X509_PUBKEY(const X509 *x);
-const STACK_OF(X509_EXTENSION) *X509_get0_extensions(const X509 *x);
-void X509_get0_uids(const X509 *x, const ASN1_BIT_STRING **piuid,
+X509_PUBKEY * __cdecl X509_get_X509_PUBKEY(const X509 *x);
+const STACK_OF(X509_EXTENSION) * __cdecl X509_get0_extensions(const X509 *x);
+void __cdecl X509_get0_uids(const X509 *x, const ASN1_BIT_STRING **piuid,
                     const ASN1_BIT_STRING **psuid);
-const X509_ALGOR *X509_get0_tbs_sigalg(const X509 *x);
-
-EVP_PKEY *X509_get0_pubkey(const X509 *x);
-EVP_PKEY *X509_get_pubkey(X509 *x);
-ASN1_BIT_STRING *X509_get0_pubkey_bitstr(const X509 *x);
-int X509_certificate_type(const X509 *x, const EVP_PKEY *pubkey);
-
-long X509_REQ_get_version(const X509_REQ *req);
-int X509_REQ_set_version(X509_REQ *x, long version);
-X509_NAME *X509_REQ_get_subject_name(const X509_REQ *req);
-int X509_REQ_set_subject_name(X509_REQ *req, X509_NAME *name);
-void X509_REQ_get0_signature(const X509_REQ *req, const ASN1_BIT_STRING **psig,
+const X509_ALGOR * __cdecl X509_get0_tbs_sigalg(const X509 *x);
+
+EVP_PKEY * __cdecl X509_get0_pubkey(const X509 *x);
+EVP_PKEY * __cdecl X509_get_pubkey(X509 *x);
+ASN1_BIT_STRING * __cdecl X509_get0_pubkey_bitstr(const X509 *x);
+int __cdecl X509_certificate_type(const X509 *x, const EVP_PKEY *pubkey);
+
+long __cdecl X509_REQ_get_version(const X509_REQ *req);
+int __cdecl X509_REQ_set_version(X509_REQ *x, long version);
+X509_NAME * __cdecl X509_REQ_get_subject_name(const X509_REQ *req);
+int __cdecl X509_REQ_set_subject_name(X509_REQ *req, X509_NAME *name);
+void __cdecl X509_REQ_get0_signature(const X509_REQ *req, const ASN1_BIT_STRING **psig,
                              const X509_ALGOR **palg);
-int X509_REQ_get_signature_nid(const X509_REQ *req);
-int i2d_re_X509_REQ_tbs(X509_REQ *req, unsigned char **pp);
-int X509_REQ_set_pubkey(X509_REQ *x, EVP_PKEY *pkey);
-EVP_PKEY *X509_REQ_get_pubkey(X509_REQ *req);
-EVP_PKEY *X509_REQ_get0_pubkey(X509_REQ *req);
-X509_PUBKEY *X509_REQ_get_X509_PUBKEY(X509_REQ *req);
-int X509_REQ_extension_nid(int nid);
-int *X509_REQ_get_extension_nids(void);
-void X509_REQ_set_extension_nids(int *nids);
-STACK_OF(X509_EXTENSION) *X509_REQ_get_extensions(X509_REQ *req);
-int X509_REQ_add_extensions_nid(X509_REQ *req, STACK_OF(X509_EXTENSION) *exts,
+int __cdecl X509_REQ_get_signature_nid(const X509_REQ *req);
+int __cdecl i2d_re_X509_REQ_tbs(X509_REQ *req, unsigned char **pp);
+int __cdecl X509_REQ_set_pubkey(X509_REQ *x, EVP_PKEY *pkey);
+EVP_PKEY * __cdecl X509_REQ_get_pubkey(X509_REQ *req);
+EVP_PKEY * __cdecl X509_REQ_get0_pubkey(X509_REQ *req);
+X509_PUBKEY * __cdecl X509_REQ_get_X509_PUBKEY(X509_REQ *req);
+int __cdecl X509_REQ_extension_nid(int nid);
+int * __cdecl X509_REQ_get_extension_nids(void);
+void __cdecl X509_REQ_set_extension_nids(int *nids);
+STACK_OF(X509_EXTENSION) * __cdecl X509_REQ_get_extensions(X509_REQ *req);
+int __cdecl X509_REQ_add_extensions_nid(X509_REQ *req, STACK_OF(X509_EXTENSION) *exts,
                                 int nid);
-int X509_REQ_add_extensions(X509_REQ *req, STACK_OF(X509_EXTENSION) *exts);
-int X509_REQ_get_attr_count(const X509_REQ *req);
-int X509_REQ_get_attr_by_NID(const X509_REQ *req, int nid, int lastpos);
-int X509_REQ_get_attr_by_OBJ(const X509_REQ *req, const ASN1_OBJECT *obj,
+int __cdecl X509_REQ_add_extensions(X509_REQ *req, STACK_OF(X509_EXTENSION) *exts);
+int __cdecl X509_REQ_get_attr_count(const X509_REQ *req);
+int __cdecl X509_REQ_get_attr_by_NID(const X509_REQ *req, int nid, int lastpos);
+int __cdecl X509_REQ_get_attr_by_OBJ(const X509_REQ *req, const ASN1_OBJECT *obj,
                              int lastpos);
-X509_ATTRIBUTE *X509_REQ_get_attr(const X509_REQ *req, int loc);
-X509_ATTRIBUTE *X509_REQ_delete_attr(X509_REQ *req, int loc);
-int X509_REQ_add1_attr(X509_REQ *req, X509_ATTRIBUTE *attr);
-int X509_REQ_add1_attr_by_OBJ(X509_REQ *req,
+X509_ATTRIBUTE * __cdecl X509_REQ_get_attr(const X509_REQ *req, int loc);
+X509_ATTRIBUTE * __cdecl X509_REQ_delete_attr(X509_REQ *req, int loc);
+int __cdecl X509_REQ_add1_attr(X509_REQ *req, X509_ATTRIBUTE *attr);
+int __cdecl X509_REQ_add1_attr_by_OBJ(X509_REQ *req,
                               const ASN1_OBJECT *obj, int type,
                               const unsigned char *bytes, int len);
-int X509_REQ_add1_attr_by_NID(X509_REQ *req,
+int __cdecl X509_REQ_add1_attr_by_NID(X509_REQ *req,
                               int nid, int type,
                               const unsigned char *bytes, int len);
-int X509_REQ_add1_attr_by_txt(X509_REQ *req,
+int __cdecl X509_REQ_add1_attr_by_txt(X509_REQ *req,
                               const char *attrname, int type,
                               const unsigned char *bytes, int len);
 
-int X509_CRL_set_version(X509_CRL *x, long version);
-int X509_CRL_set_issuer_name(X509_CRL *x, X509_NAME *name);
-int X509_CRL_set1_lastUpdate(X509_CRL *x, const ASN1_TIME *tm);
-int X509_CRL_set1_nextUpdate(X509_CRL *x, const ASN1_TIME *tm);
-int X509_CRL_sort(X509_CRL *crl);
-int X509_CRL_up_ref(X509_CRL *crl);
+int __cdecl X509_CRL_set_version(X509_CRL *x, long version);
+int __cdecl X509_CRL_set_issuer_name(X509_CRL *x, X509_NAME *name);
+int __cdecl X509_CRL_set1_lastUpdate(X509_CRL *x, const ASN1_TIME *tm);
+int __cdecl X509_CRL_set1_nextUpdate(X509_CRL *x, const ASN1_TIME *tm);
+int __cdecl X509_CRL_sort(X509_CRL *crl);
+int __cdecl X509_CRL_up_ref(X509_CRL *crl);
 
 # if OPENSSL_API_COMPAT < 0x10100000L
 #  define X509_CRL_set_lastUpdate X509_CRL_set1_lastUpdate
 #  define X509_CRL_set_nextUpdate X509_CRL_set1_nextUpdate
 #endif
 
-long X509_CRL_get_version(const X509_CRL *crl);
-const ASN1_TIME *X509_CRL_get0_lastUpdate(const X509_CRL *crl);
-const ASN1_TIME *X509_CRL_get0_nextUpdate(const X509_CRL *crl);
+long __cdecl X509_CRL_get_version(const X509_CRL *crl);
+const ASN1_TIME * __cdecl X509_CRL_get0_lastUpdate(const X509_CRL *crl);
+const ASN1_TIME * __cdecl X509_CRL_get0_nextUpdate(const X509_CRL *crl);
 DEPRECATEDIN_1_1_0(ASN1_TIME *X509_CRL_get_lastUpdate(X509_CRL *crl))
 DEPRECATEDIN_1_1_0(ASN1_TIME *X509_CRL_get_nextUpdate(X509_CRL *crl))
-X509_NAME *X509_CRL_get_issuer(const X509_CRL *crl);
-const STACK_OF(X509_EXTENSION) *X509_CRL_get0_extensions(const X509_CRL *crl);
-STACK_OF(X509_REVOKED) *X509_CRL_get_REVOKED(X509_CRL *crl);
-void X509_CRL_get0_signature(const X509_CRL *crl, const ASN1_BIT_STRING **psig,
+X509_NAME * __cdecl X509_CRL_get_issuer(const X509_CRL *crl);
+const STACK_OF(X509_EXTENSION) * __cdecl X509_CRL_get0_extensions(const X509_CRL *crl);
+STACK_OF(X509_REVOKED) * __cdecl X509_CRL_get_REVOKED(X509_CRL *crl);
+void __cdecl X509_CRL_get0_signature(const X509_CRL *crl, const ASN1_BIT_STRING **psig,
                              const X509_ALGOR **palg);
-int X509_CRL_get_signature_nid(const X509_CRL *crl);
-int i2d_re_X509_CRL_tbs(X509_CRL *req, unsigned char **pp);
+int __cdecl X509_CRL_get_signature_nid(const X509_CRL *crl);
+int __cdecl i2d_re_X509_CRL_tbs(X509_CRL *req, unsigned char **pp);
 
-const ASN1_INTEGER *X509_REVOKED_get0_serialNumber(const X509_REVOKED *x);
-int X509_REVOKED_set_serialNumber(X509_REVOKED *x, ASN1_INTEGER *serial);
-const ASN1_TIME *X509_REVOKED_get0_revocationDate(const X509_REVOKED *x);
-int X509_REVOKED_set_revocationDate(X509_REVOKED *r, ASN1_TIME *tm);
+const ASN1_INTEGER * __cdecl X509_REVOKED_get0_serialNumber(const X509_REVOKED *x);
+int __cdecl X509_REVOKED_set_serialNumber(X509_REVOKED *x, ASN1_INTEGER *serial);
+const ASN1_TIME * __cdecl X509_REVOKED_get0_revocationDate(const X509_REVOKED *x);
+int __cdecl X509_REVOKED_set_revocationDate(X509_REVOKED *r, ASN1_TIME *tm);
 const STACK_OF(X509_EXTENSION) *
-X509_REVOKED_get0_extensions(const X509_REVOKED *r);
+__cdecl X509_REVOKED_get0_extensions(const X509_REVOKED *r);
 
-X509_CRL *X509_CRL_diff(X509_CRL *base, X509_CRL *newer,
+X509_CRL * __cdecl X509_CRL_diff(X509_CRL *base, X509_CRL *newer,
                         EVP_PKEY *skey, const EVP_MD *md, unsigned int flags);
 
-int X509_REQ_check_private_key(X509_REQ *x509, EVP_PKEY *pkey);
+int __cdecl X509_REQ_check_private_key(X509_REQ *x509, EVP_PKEY *pkey);
 
-int X509_check_private_key(const X509 *x509, const EVP_PKEY *pkey);
-int X509_chain_check_suiteb(int *perror_depth,
+int __cdecl X509_check_private_key(const X509 *x509, const EVP_PKEY *pkey);
+int __cdecl X509_chain_check_suiteb(int *perror_depth,
                             X509 *x, STACK_OF(X509) *chain,
                             unsigned long flags);
-int X509_CRL_check_suiteb(X509_CRL *crl, EVP_PKEY *pk, unsigned long flags);
-STACK_OF(X509) *X509_chain_up_ref(STACK_OF(X509) *chain);
+int __cdecl X509_CRL_check_suiteb(X509_CRL *crl, EVP_PKEY *pk, unsigned long flags);
+STACK_OF(X509) * __cdecl X509_chain_up_ref(STACK_OF(X509) *chain);
 
-int X509_issuer_and_serial_cmp(const X509 *a, const X509 *b);
-unsigned long X509_issuer_and_serial_hash(X509 *a);
+int __cdecl X509_issuer_and_serial_cmp(const X509 *a, const X509 *b);
+unsigned long __cdecl X509_issuer_and_serial_hash(X509 *a);
 
-int X509_issuer_name_cmp(const X509 *a, const X509 *b);
-unsigned long X509_issuer_name_hash(X509 *a);
+int __cdecl X509_issuer_name_cmp(const X509 *a, const X509 *b);
+unsigned long __cdecl X509_issuer_name_hash(X509 *a);
 
-int X509_subject_name_cmp(const X509 *a, const X509 *b);
-unsigned long X509_subject_name_hash(X509 *x);
+int __cdecl X509_subject_name_cmp(const X509 *a, const X509 *b);
+unsigned long __cdecl X509_subject_name_hash(X509 *x);
 
 # ifndef OPENSSL_NO_MD5
-unsigned long X509_issuer_name_hash_old(X509 *a);
-unsigned long X509_subject_name_hash_old(X509 *x);
+unsigned long __cdecl X509_issuer_name_hash_old(X509 *a);
+unsigned long __cdecl X509_subject_name_hash_old(X509 *x);
 # endif
 
-int X509_cmp(const X509 *a, const X509 *b);
-int X509_NAME_cmp(const X509_NAME *a, const X509_NAME *b);
-unsigned long X509_NAME_hash(X509_NAME *x);
-unsigned long X509_NAME_hash_old(X509_NAME *x);
+int __cdecl X509_cmp(const X509 *a, const X509 *b);
+int __cdecl X509_NAME_cmp(const X509_NAME *a, const X509_NAME *b);
+unsigned long __cdecl X509_NAME_hash(X509_NAME *x);
+unsigned long __cdecl X509_NAME_hash_old(X509_NAME *x);
 
-int X509_CRL_cmp(const X509_CRL *a, const X509_CRL *b);
-int X509_CRL_match(const X509_CRL *a, const X509_CRL *b);
-int X509_aux_print(BIO *out, X509 *x, int indent);
+int __cdecl X509_CRL_cmp(const X509_CRL *a, const X509_CRL *b);
+int __cdecl X509_CRL_match(const X509_CRL *a, const X509_CRL *b);
+int __cdecl X509_aux_print(BIO *out, X509 *x, int indent);
 # ifndef OPENSSL_NO_STDIO
-int X509_print_ex_fp(FILE *bp, X509 *x, unsigned long nmflag,
+int __cdecl X509_print_ex_fp(FILE *bp, X509 *x, unsigned long nmflag,
                      unsigned long cflag);
-int X509_print_fp(FILE *bp, X509 *x);
-int X509_CRL_print_fp(FILE *bp, X509_CRL *x);
-int X509_REQ_print_fp(FILE *bp, X509_REQ *req);
-int X509_NAME_print_ex_fp(FILE *fp, const X509_NAME *nm, int indent,
+int __cdecl X509_print_fp(FILE *bp, X509 *x);
+int __cdecl X509_CRL_print_fp(FILE *bp, X509_CRL *x);
+int __cdecl X509_REQ_print_fp(FILE *bp, X509_REQ *req);
+int __cdecl X509_NAME_print_ex_fp(FILE *fp, const X509_NAME *nm, int indent,
                           unsigned long flags);
 # endif
 
-int X509_NAME_print(BIO *bp, const X509_NAME *name, int obase);
-int X509_NAME_print_ex(BIO *out, const X509_NAME *nm, int indent,
+int __cdecl X509_NAME_print(BIO *bp, const X509_NAME *name, int obase);
+int __cdecl X509_NAME_print_ex(BIO *out, const X509_NAME *nm, int indent,
                        unsigned long flags);
-int X509_print_ex(BIO *bp, X509 *x, unsigned long nmflag,
+int __cdecl X509_print_ex(BIO *bp, X509 *x, unsigned long nmflag,
                   unsigned long cflag);
-int X509_print(BIO *bp, X509 *x);
-int X509_ocspid_print(BIO *bp, X509 *x);
-int X509_CRL_print_ex(BIO *out, X509_CRL *x, unsigned long nmflag);
-int X509_CRL_print(BIO *bp, X509_CRL *x);
-int X509_REQ_print_ex(BIO *bp, X509_REQ *x, unsigned long nmflag,
+int __cdecl X509_print(BIO *bp, X509 *x);
+int __cdecl X509_ocspid_print(BIO *bp, X509 *x);
+int __cdecl X509_CRL_print_ex(BIO *out, X509_CRL *x, unsigned long nmflag);
+int __cdecl X509_CRL_print(BIO *bp, X509_CRL *x);
+int __cdecl X509_REQ_print_ex(BIO *bp, X509_REQ *x, unsigned long nmflag,
                       unsigned long cflag);
-int X509_REQ_print(BIO *bp, X509_REQ *req);
+int __cdecl X509_REQ_print(BIO *bp, X509_REQ *req);
 
-int X509_NAME_entry_count(const X509_NAME *name);
-int X509_NAME_get_text_by_NID(X509_NAME *name, int nid, char *buf, int len);
-int X509_NAME_get_text_by_OBJ(X509_NAME *name, const ASN1_OBJECT *obj,
+int __cdecl X509_NAME_entry_count(const X509_NAME *name);
+int __cdecl X509_NAME_get_text_by_NID(X509_NAME *name, int nid, char *buf, int len);
+int __cdecl X509_NAME_get_text_by_OBJ(X509_NAME *name, const ASN1_OBJECT *obj,
                               char *buf, int len);
 
 /*
  * NOTE: you should be passing -1, not 0 as lastpos. The functions that use
  * lastpos, search after that position on.
  */
-int X509_NAME_get_index_by_NID(X509_NAME *name, int nid, int lastpos);
-int X509_NAME_get_index_by_OBJ(X509_NAME *name, const ASN1_OBJECT *obj,
+int __cdecl X509_NAME_get_index_by_NID(X509_NAME *name, int nid, int lastpos);
+int __cdecl X509_NAME_get_index_by_OBJ(X509_NAME *name, const ASN1_OBJECT *obj,
                                int lastpos);
-X509_NAME_ENTRY *X509_NAME_get_entry(const X509_NAME *name, int loc);
-X509_NAME_ENTRY *X509_NAME_delete_entry(X509_NAME *name, int loc);
-int X509_NAME_add_entry(X509_NAME *name, const X509_NAME_ENTRY *ne,
+X509_NAME_ENTRY * __cdecl X509_NAME_get_entry(const X509_NAME *name, int loc);
+X509_NAME_ENTRY * __cdecl X509_NAME_delete_entry(X509_NAME *name, int loc);
+int __cdecl X509_NAME_add_entry(X509_NAME *name, const X509_NAME_ENTRY *ne,
                         int loc, int set);
-int X509_NAME_add_entry_by_OBJ(X509_NAME *name, const ASN1_OBJECT *obj, int type,
+int __cdecl X509_NAME_add_entry_by_OBJ(X509_NAME *name, const ASN1_OBJECT *obj, int type,
                                const unsigned char *bytes, int len, int loc,
                                int set);
-int X509_NAME_add_entry_by_NID(X509_NAME *name, int nid, int type,
+int __cdecl X509_NAME_add_entry_by_NID(X509_NAME *name, int nid, int type,
                                const unsigned char *bytes, int len, int loc,
                                int set);
-X509_NAME_ENTRY *X509_NAME_ENTRY_create_by_txt(X509_NAME_ENTRY **ne,
+X509_NAME_ENTRY * __cdecl X509_NAME_ENTRY_create_by_txt(X509_NAME_ENTRY **ne,
                                                const char *field, int type,
                                                const unsigned char *bytes,
                                                int len);
-X509_NAME_ENTRY *X509_NAME_ENTRY_create_by_NID(X509_NAME_ENTRY **ne, int nid,
+X509_NAME_ENTRY * __cdecl X509_NAME_ENTRY_create_by_NID(X509_NAME_ENTRY **ne, int nid,
                                                int type,
                                                const unsigned char *bytes,
                                                int len);
-int X509_NAME_add_entry_by_txt(X509_NAME *name, const char *field, int type,
+int __cdecl X509_NAME_add_entry_by_txt(X509_NAME *name, const char *field, int type,
                                const unsigned char *bytes, int len, int loc,
                                int set);
-X509_NAME_ENTRY *X509_NAME_ENTRY_create_by_OBJ(X509_NAME_ENTRY **ne,
+X509_NAME_ENTRY * __cdecl X509_NAME_ENTRY_create_by_OBJ(X509_NAME_ENTRY **ne,
                                                const ASN1_OBJECT *obj, int type,
                                                const unsigned char *bytes,
                                                int len);
-int X509_NAME_ENTRY_set_object(X509_NAME_ENTRY *ne, const ASN1_OBJECT *obj);
-int X509_NAME_ENTRY_set_data(X509_NAME_ENTRY *ne, int type,
+int __cdecl X509_NAME_ENTRY_set_object(X509_NAME_ENTRY *ne, const ASN1_OBJECT *obj);
+int __cdecl X509_NAME_ENTRY_set_data(X509_NAME_ENTRY *ne, int type,
                              const unsigned char *bytes, int len);
-ASN1_OBJECT *X509_NAME_ENTRY_get_object(const X509_NAME_ENTRY *ne);
-ASN1_STRING * X509_NAME_ENTRY_get_data(const X509_NAME_ENTRY *ne);
-int X509_NAME_ENTRY_set(const X509_NAME_ENTRY *ne);
+ASN1_OBJECT * __cdecl X509_NAME_ENTRY_get_object(const X509_NAME_ENTRY *ne);
+ASN1_STRING * __cdecl X509_NAME_ENTRY_get_data(const X509_NAME_ENTRY *ne);
+int __cdecl X509_NAME_ENTRY_set(const X509_NAME_ENTRY *ne);
 
-int X509_NAME_get0_der(X509_NAME *nm, const unsigned char **pder,
+int __cdecl X509_NAME_get0_der(X509_NAME *nm, const unsigned char **pder,
                        size_t *pderlen);
 
-int X509v3_get_ext_count(const STACK_OF(X509_EXTENSION) *x);
-int X509v3_get_ext_by_NID(const STACK_OF(X509_EXTENSION) *x,
+int __cdecl X509v3_get_ext_count(const STACK_OF(X509_EXTENSION) *x);
+int __cdecl X509v3_get_ext_by_NID(const STACK_OF(X509_EXTENSION) *x,
                           int nid, int lastpos);
-int X509v3_get_ext_by_OBJ(const STACK_OF(X509_EXTENSION) *x,
+int __cdecl X509v3_get_ext_by_OBJ(const STACK_OF(X509_EXTENSION) *x,
                           const ASN1_OBJECT *obj, int lastpos);
-int X509v3_get_ext_by_critical(const STACK_OF(X509_EXTENSION) *x,
+int __cdecl X509v3_get_ext_by_critical(const STACK_OF(X509_EXTENSION) *x,
                                int crit, int lastpos);
-X509_EXTENSION *X509v3_get_ext(const STACK_OF(X509_EXTENSION) *x, int loc);
-X509_EXTENSION *X509v3_delete_ext(STACK_OF(X509_EXTENSION) *x, int loc);
-STACK_OF(X509_EXTENSION) *X509v3_add_ext(STACK_OF(X509_EXTENSION) **x,
+X509_EXTENSION * __cdecl X509v3_get_ext(const STACK_OF(X509_EXTENSION) *x, int loc);
+X509_EXTENSION * __cdecl X509v3_delete_ext(STACK_OF(X509_EXTENSION) *x, int loc);
+STACK_OF(X509_EXTENSION) * __cdecl X509v3_add_ext(STACK_OF(X509_EXTENSION) **x,
                                          X509_EXTENSION *ex, int loc);
 
-int X509_get_ext_count(const X509 *x);
-int X509_get_ext_by_NID(const X509 *x, int nid, int lastpos);
-int X509_get_ext_by_OBJ(const X509 *x, const ASN1_OBJECT *obj, int lastpos);
-int X509_get_ext_by_critical(const X509 *x, int crit, int lastpos);
-X509_EXTENSION *X509_get_ext(const X509 *x, int loc);
-X509_EXTENSION *X509_delete_ext(X509 *x, int loc);
-int X509_add_ext(X509 *x, X509_EXTENSION *ex, int loc);
-void *X509_get_ext_d2i(const X509 *x, int nid, int *crit, int *idx);
-int X509_add1_ext_i2d(X509 *x, int nid, void *value, int crit,
+int __cdecl X509_get_ext_count(const X509 *x);
+int __cdecl X509_get_ext_by_NID(const X509 *x, int nid, int lastpos);
+int __cdecl X509_get_ext_by_OBJ(const X509 *x, const ASN1_OBJECT *obj, int lastpos);
+int __cdecl X509_get_ext_by_critical(const X509 *x, int crit, int lastpos);
+X509_EXTENSION * __cdecl X509_get_ext(const X509 *x, int loc);
+X509_EXTENSION * __cdecl X509_delete_ext(X509 *x, int loc);
+int __cdecl X509_add_ext(X509 *x, X509_EXTENSION *ex, int loc);
+void * __cdecl X509_get_ext_d2i(const X509 *x, int nid, int *crit, int *idx);
+int __cdecl X509_add1_ext_i2d(X509 *x, int nid, void *value, int crit,
                       unsigned long flags);
 
-int X509_CRL_get_ext_count(const X509_CRL *x);
-int X509_CRL_get_ext_by_NID(const X509_CRL *x, int nid, int lastpos);
-int X509_CRL_get_ext_by_OBJ(const X509_CRL *x, const ASN1_OBJECT *obj,
+int __cdecl X509_CRL_get_ext_count(const X509_CRL *x);
+int __cdecl X509_CRL_get_ext_by_NID(const X509_CRL *x, int nid, int lastpos);
+int __cdecl X509_CRL_get_ext_by_OBJ(const X509_CRL *x, const ASN1_OBJECT *obj,
                             int lastpos);
-int X509_CRL_get_ext_by_critical(const X509_CRL *x, int crit, int lastpos);
-X509_EXTENSION *X509_CRL_get_ext(const X509_CRL *x, int loc);
-X509_EXTENSION *X509_CRL_delete_ext(X509_CRL *x, int loc);
-int X509_CRL_add_ext(X509_CRL *x, X509_EXTENSION *ex, int loc);
-void *X509_CRL_get_ext_d2i(const X509_CRL *x, int nid, int *crit, int *idx);
-int X509_CRL_add1_ext_i2d(X509_CRL *x, int nid, void *value, int crit,
+int __cdecl X509_CRL_get_ext_by_critical(const X509_CRL *x, int crit, int lastpos);
+X509_EXTENSION * __cdecl X509_CRL_get_ext(const X509_CRL *x, int loc);
+X509_EXTENSION * __cdecl X509_CRL_delete_ext(X509_CRL *x, int loc);
+int __cdecl X509_CRL_add_ext(X509_CRL *x, X509_EXTENSION *ex, int loc);
+void * __cdecl X509_CRL_get_ext_d2i(const X509_CRL *x, int nid, int *crit, int *idx);
+int __cdecl X509_CRL_add1_ext_i2d(X509_CRL *x, int nid, void *value, int crit,
                           unsigned long flags);
 
-int X509_REVOKED_get_ext_count(const X509_REVOKED *x);
-int X509_REVOKED_get_ext_by_NID(const X509_REVOKED *x, int nid, int lastpos);
-int X509_REVOKED_get_ext_by_OBJ(const X509_REVOKED *x, const ASN1_OBJECT *obj,
+int __cdecl X509_REVOKED_get_ext_count(const X509_REVOKED *x);
+int __cdecl X509_REVOKED_get_ext_by_NID(const X509_REVOKED *x, int nid, int lastpos);
+int __cdecl X509_REVOKED_get_ext_by_OBJ(const X509_REVOKED *x, const ASN1_OBJECT *obj,
                                 int lastpos);
-int X509_REVOKED_get_ext_by_critical(const X509_REVOKED *x, int crit,
+int __cdecl X509_REVOKED_get_ext_by_critical(const X509_REVOKED *x, int crit,
                                      int lastpos);
-X509_EXTENSION *X509_REVOKED_get_ext(const X509_REVOKED *x, int loc);
-X509_EXTENSION *X509_REVOKED_delete_ext(X509_REVOKED *x, int loc);
-int X509_REVOKED_add_ext(X509_REVOKED *x, X509_EXTENSION *ex, int loc);
-void *X509_REVOKED_get_ext_d2i(const X509_REVOKED *x, int nid, int *crit,
+X509_EXTENSION * __cdecl X509_REVOKED_get_ext(const X509_REVOKED *x, int loc);
+X509_EXTENSION * __cdecl X509_REVOKED_delete_ext(X509_REVOKED *x, int loc);
+int __cdecl X509_REVOKED_add_ext(X509_REVOKED *x, X509_EXTENSION *ex, int loc);
+void * __cdecl X509_REVOKED_get_ext_d2i(const X509_REVOKED *x, int nid, int *crit,
                                int *idx);
-int X509_REVOKED_add1_ext_i2d(X509_REVOKED *x, int nid, void *value, int crit,
+int __cdecl X509_REVOKED_add1_ext_i2d(X509_REVOKED *x, int nid, void *value, int crit,
                               unsigned long flags);
 
-X509_EXTENSION *X509_EXTENSION_create_by_NID(X509_EXTENSION **ex,
+X509_EXTENSION * __cdecl X509_EXTENSION_create_by_NID(X509_EXTENSION **ex,
                                              int nid, int crit,
                                              ASN1_OCTET_STRING *data);
-X509_EXTENSION *X509_EXTENSION_create_by_OBJ(X509_EXTENSION **ex,
+X509_EXTENSION * __cdecl X509_EXTENSION_create_by_OBJ(X509_EXTENSION **ex,
                                              const ASN1_OBJECT *obj, int crit,
                                              ASN1_OCTET_STRING *data);
-int X509_EXTENSION_set_object(X509_EXTENSION *ex, const ASN1_OBJECT *obj);
-int X509_EXTENSION_set_critical(X509_EXTENSION *ex, int crit);
-int X509_EXTENSION_set_data(X509_EXTENSION *ex, ASN1_OCTET_STRING *data);
-ASN1_OBJECT *X509_EXTENSION_get_object(X509_EXTENSION *ex);
-ASN1_OCTET_STRING *X509_EXTENSION_get_data(X509_EXTENSION *ne);
-int X509_EXTENSION_get_critical(const X509_EXTENSION *ex);
-
-int X509at_get_attr_count(const STACK_OF(X509_ATTRIBUTE) *x);
-int X509at_get_attr_by_NID(const STACK_OF(X509_ATTRIBUTE) *x, int nid,
+int __cdecl X509_EXTENSION_set_object(X509_EXTENSION *ex, const ASN1_OBJECT *obj);
+int __cdecl X509_EXTENSION_set_critical(X509_EXTENSION *ex, int crit);
+int __cdecl X509_EXTENSION_set_data(X509_EXTENSION *ex, ASN1_OCTET_STRING *data);
+ASN1_OBJECT * __cdecl X509_EXTENSION_get_object(X509_EXTENSION *ex);
+ASN1_OCTET_STRING * __cdecl X509_EXTENSION_get_data(X509_EXTENSION *ne);
+int __cdecl X509_EXTENSION_get_critical(const X509_EXTENSION *ex);
+
+int __cdecl X509at_get_attr_count(const STACK_OF(X509_ATTRIBUTE) *x);
+int __cdecl X509at_get_attr_by_NID(const STACK_OF(X509_ATTRIBUTE) *x, int nid,
                            int lastpos);
-int X509at_get_attr_by_OBJ(const STACK_OF(X509_ATTRIBUTE) *sk,
+int __cdecl X509at_get_attr_by_OBJ(const STACK_OF(X509_ATTRIBUTE) *sk,
                            const ASN1_OBJECT *obj, int lastpos);
-X509_ATTRIBUTE *X509at_get_attr(const STACK_OF(X509_ATTRIBUTE) *x, int loc);
-X509_ATTRIBUTE *X509at_delete_attr(STACK_OF(X509_ATTRIBUTE) *x, int loc);
-STACK_OF(X509_ATTRIBUTE) *X509at_add1_attr(STACK_OF(X509_ATTRIBUTE) **x,
+X509_ATTRIBUTE * __cdecl X509at_get_attr(const STACK_OF(X509_ATTRIBUTE) *x, int loc);
+X509_ATTRIBUTE * __cdecl X509at_delete_attr(STACK_OF(X509_ATTRIBUTE) *x, int loc);
+STACK_OF(X509_ATTRIBUTE) * __cdecl X509at_add1_attr(STACK_OF(X509_ATTRIBUTE) **x,
                                            X509_ATTRIBUTE *attr);
-STACK_OF(X509_ATTRIBUTE) *X509at_add1_attr_by_OBJ(STACK_OF(X509_ATTRIBUTE)
+STACK_OF(X509_ATTRIBUTE) * __cdecl X509at_add1_attr_by_OBJ(STACK_OF(X509_ATTRIBUTE)
                                                   **x, const ASN1_OBJECT *obj,
                                                   int type,
                                                   const unsigned char *bytes,
                                                   int len);
-STACK_OF(X509_ATTRIBUTE) *X509at_add1_attr_by_NID(STACK_OF(X509_ATTRIBUTE)
+STACK_OF(X509_ATTRIBUTE) * __cdecl X509at_add1_attr_by_NID(STACK_OF(X509_ATTRIBUTE)
                                                   **x, int nid, int type,
                                                   const unsigned char *bytes,
                                                   int len);
-STACK_OF(X509_ATTRIBUTE) *X509at_add1_attr_by_txt(STACK_OF(X509_ATTRIBUTE)
+STACK_OF(X509_ATTRIBUTE) * __cdecl X509at_add1_attr_by_txt(STACK_OF(X509_ATTRIBUTE)
                                                   **x, const char *attrname,
                                                   int type,
                                                   const unsigned char *bytes,
                                                   int len);
-void *X509at_get0_data_by_OBJ(STACK_OF(X509_ATTRIBUTE) *x,
+void * __cdecl X509at_get0_data_by_OBJ(STACK_OF(X509_ATTRIBUTE) *x,
                               const ASN1_OBJECT *obj, int lastpos, int type);
-X509_ATTRIBUTE *X509_ATTRIBUTE_create_by_NID(X509_ATTRIBUTE **attr, int nid,
+X509_ATTRIBUTE * __cdecl X509_ATTRIBUTE_create_by_NID(X509_ATTRIBUTE **attr, int nid,
                                              int atrtype, const void *data,
                                              int len);
-X509_ATTRIBUTE *X509_ATTRIBUTE_create_by_OBJ(X509_ATTRIBUTE **attr,
+X509_ATTRIBUTE * __cdecl X509_ATTRIBUTE_create_by_OBJ(X509_ATTRIBUTE **attr,
                                              const ASN1_OBJECT *obj,
                                              int atrtype, const void *data,
                                              int len);
-X509_ATTRIBUTE *X509_ATTRIBUTE_create_by_txt(X509_ATTRIBUTE **attr,
+X509_ATTRIBUTE * __cdecl X509_ATTRIBUTE_create_by_txt(X509_ATTRIBUTE **attr,
                                              const char *atrname, int type,
                                              const unsigned char *bytes,
                                              int len);
-int X509_ATTRIBUTE_set1_object(X509_ATTRIBUTE *attr, const ASN1_OBJECT *obj);
-int X509_ATTRIBUTE_set1_data(X509_ATTRIBUTE *attr, int attrtype,
+int __cdecl X509_ATTRIBUTE_set1_object(X509_ATTRIBUTE *attr, const ASN1_OBJECT *obj);
+int __cdecl X509_ATTRIBUTE_set1_data(X509_ATTRIBUTE *attr, int attrtype,
                              const void *data, int len);
-void *X509_ATTRIBUTE_get0_data(X509_ATTRIBUTE *attr, int idx, int atrtype,
+void * __cdecl X509_ATTRIBUTE_get0_data(X509_ATTRIBUTE *attr, int idx, int atrtype,
                                void *data);
-int X509_ATTRIBUTE_count(const X509_ATTRIBUTE *attr);
-ASN1_OBJECT *X509_ATTRIBUTE_get0_object(X509_ATTRIBUTE *attr);
-ASN1_TYPE *X509_ATTRIBUTE_get0_type(X509_ATTRIBUTE *attr, int idx);
+int __cdecl X509_ATTRIBUTE_count(const X509_ATTRIBUTE *attr);
+ASN1_OBJECT * __cdecl X509_ATTRIBUTE_get0_object(X509_ATTRIBUTE *attr);
+ASN1_TYPE * __cdecl X509_ATTRIBUTE_get0_type(X509_ATTRIBUTE *attr, int idx);
 
-int EVP_PKEY_get_attr_count(const EVP_PKEY *key);
-int EVP_PKEY_get_attr_by_NID(const EVP_PKEY *key, int nid, int lastpos);
-int EVP_PKEY_get_attr_by_OBJ(const EVP_PKEY *key, const ASN1_OBJECT *obj,
+int __cdecl EVP_PKEY_get_attr_count(const EVP_PKEY *key);
+int __cdecl EVP_PKEY_get_attr_by_NID(const EVP_PKEY *key, int nid, int lastpos);
+int __cdecl EVP_PKEY_get_attr_by_OBJ(const EVP_PKEY *key, const ASN1_OBJECT *obj,
                              int lastpos);
-X509_ATTRIBUTE *EVP_PKEY_get_attr(const EVP_PKEY *key, int loc);
-X509_ATTRIBUTE *EVP_PKEY_delete_attr(EVP_PKEY *key, int loc);
-int EVP_PKEY_add1_attr(EVP_PKEY *key, X509_ATTRIBUTE *attr);
-int EVP_PKEY_add1_attr_by_OBJ(EVP_PKEY *key,
+X509_ATTRIBUTE * __cdecl EVP_PKEY_get_attr(const EVP_PKEY *key, int loc);
+X509_ATTRIBUTE * __cdecl EVP_PKEY_delete_attr(EVP_PKEY *key, int loc);
+int __cdecl EVP_PKEY_add1_attr(EVP_PKEY *key, X509_ATTRIBUTE *attr);
+int __cdecl EVP_PKEY_add1_attr_by_OBJ(EVP_PKEY *key,
                               const ASN1_OBJECT *obj, int type,
                               const unsigned char *bytes, int len);
-int EVP_PKEY_add1_attr_by_NID(EVP_PKEY *key,
+int __cdecl EVP_PKEY_add1_attr_by_NID(EVP_PKEY *key,
                               int nid, int type,
                               const unsigned char *bytes, int len);
-int EVP_PKEY_add1_attr_by_txt(EVP_PKEY *key,
+int __cdecl EVP_PKEY_add1_attr_by_txt(EVP_PKEY *key,
                               const char *attrname, int type,
                               const unsigned char *bytes, int len);
 
-int X509_verify_cert(X509_STORE_CTX *ctx);
+int __cdecl X509_verify_cert(X509_STORE_CTX *ctx);
 
 /* lookup a cert from a X509 STACK */
-X509 *X509_find_by_issuer_and_serial(STACK_OF(X509) *sk, X509_NAME *name,
+X509 * __cdecl X509_find_by_issuer_and_serial(STACK_OF(X509) *sk, X509_NAME *name,
                                      ASN1_INTEGER *serial);
-X509 *X509_find_by_subject(STACK_OF(X509) *sk, X509_NAME *name);
+X509 * __cdecl X509_find_by_subject(STACK_OF(X509) *sk, X509_NAME *name);
 
 DECLARE_ASN1_FUNCTIONS(PBEPARAM)
 DECLARE_ASN1_FUNCTIONS(PBE2PARAM)
@@ -983,63 +983,63 @@ DECLARE_ASN1_FUNCTIONS(PBKDF2PARAM)
 DECLARE_ASN1_FUNCTIONS(SCRYPT_PARAMS)
 #endif
 
-int PKCS5_pbe_set0_algor(X509_ALGOR *algor, int alg, int iter,
+int __cdecl PKCS5_pbe_set0_algor(X509_ALGOR *algor, int alg, int iter,
                          const unsigned char *salt, int saltlen);
 
-X509_ALGOR *PKCS5_pbe_set(int alg, int iter,
+X509_ALGOR * __cdecl PKCS5_pbe_set(int alg, int iter,
                           const unsigned char *salt, int saltlen);
-X509_ALGOR *PKCS5_pbe2_set(const EVP_CIPHER *cipher, int iter,
+X509_ALGOR * __cdecl PKCS5_pbe2_set(const EVP_CIPHER *cipher, int iter,
                            unsigned char *salt, int saltlen);
-X509_ALGOR *PKCS5_pbe2_set_iv(const EVP_CIPHER *cipher, int iter,
+X509_ALGOR * __cdecl PKCS5_pbe2_set_iv(const EVP_CIPHER *cipher, int iter,
                               unsigned char *salt, int saltlen,
                               unsigned char *aiv, int prf_nid);
 
 #ifndef OPENSSL_NO_SCRYPT
-X509_ALGOR *PKCS5_pbe2_set_scrypt(const EVP_CIPHER *cipher,
+X509_ALGOR * __cdecl PKCS5_pbe2_set_scrypt(const EVP_CIPHER *cipher,
                                   const unsigned char *salt, int saltlen,
                                   unsigned char *aiv, uint64_t N, uint64_t r,
                                   uint64_t p);
 #endif
 
-X509_ALGOR *PKCS5_pbkdf2_set(int iter, unsigned char *salt, int saltlen,
+X509_ALGOR * __cdecl PKCS5_pbkdf2_set(int iter, unsigned char *salt, int saltlen,
                              int prf_nid, int keylen);
 
 /* PKCS#8 utilities */
 
 DECLARE_ASN1_FUNCTIONS(PKCS8_PRIV_KEY_INFO)
 
-EVP_PKEY *EVP_PKCS82PKEY(const PKCS8_PRIV_KEY_INFO *p8);
-PKCS8_PRIV_KEY_INFO *EVP_PKEY2PKCS8(EVP_PKEY *pkey);
+EVP_PKEY * __cdecl EVP_PKCS82PKEY(const PKCS8_PRIV_KEY_INFO *p8);
+PKCS8_PRIV_KEY_INFO * __cdecl EVP_PKEY2PKCS8(EVP_PKEY *pkey);
 
-int PKCS8_pkey_set0(PKCS8_PRIV_KEY_INFO *priv, ASN1_OBJECT *aobj,
+int __cdecl PKCS8_pkey_set0(PKCS8_PRIV_KEY_INFO *priv, ASN1_OBJECT *aobj,
                     int version, int ptype, void *pval,
                     unsigned char *penc, int penclen);
-int PKCS8_pkey_get0(const ASN1_OBJECT **ppkalg,
+int __cdecl PKCS8_pkey_get0(const ASN1_OBJECT **ppkalg,
                     const unsigned char **pk, int *ppklen,
                     const X509_ALGOR **pa, const PKCS8_PRIV_KEY_INFO *p8);
 
 const STACK_OF(X509_ATTRIBUTE) *
-PKCS8_pkey_get0_attrs(const PKCS8_PRIV_KEY_INFO *p8);
-int PKCS8_pkey_add1_attr_by_NID(PKCS8_PRIV_KEY_INFO *p8, int nid, int type,
+__cdecl PKCS8_pkey_get0_attrs(const PKCS8_PRIV_KEY_INFO *p8);
+int __cdecl PKCS8_pkey_add1_attr_by_NID(PKCS8_PRIV_KEY_INFO *p8, int nid, int type,
                                 const unsigned char *bytes, int len);
 
-int X509_PUBKEY_set0_param(X509_PUBKEY *pub, ASN1_OBJECT *aobj,
+int __cdecl X509_PUBKEY_set0_param(X509_PUBKEY *pub, ASN1_OBJECT *aobj,
                            int ptype, void *pval,
                            unsigned char *penc, int penclen);
-int X509_PUBKEY_get0_param(ASN1_OBJECT **ppkalg,
+int __cdecl X509_PUBKEY_get0_param(ASN1_OBJECT **ppkalg,
                            const unsigned char **pk, int *ppklen,
                            X509_ALGOR **pa, X509_PUBKEY *pub);
 
-int X509_check_trust(X509 *x, int id, int flags);
-int X509_TRUST_get_count(void);
-X509_TRUST *X509_TRUST_get0(int idx);
-int X509_TRUST_get_by_id(int id);
-int X509_TRUST_add(int id, int flags, int (*ck) (X509_TRUST *, X509 *, int),
+int __cdecl X509_check_trust(X509 *x, int id, int flags);
+int __cdecl X509_TRUST_get_count(void);
+X509_TRUST * __cdecl X509_TRUST_get0(int idx);
+int __cdecl X509_TRUST_get_by_id(int id);
+int __cdecl X509_TRUST_add(int id, int flags, int (*ck) (X509_TRUST *, X509 *, int),
                    const char *name, int arg1, void *arg2);
-void X509_TRUST_cleanup(void);
-int X509_TRUST_get_flags(const X509_TRUST *xp);
-char *X509_TRUST_get0_name(const X509_TRUST *xp);
-int X509_TRUST_get_trust(const X509_TRUST *xp);
+void __cdecl X509_TRUST_cleanup(void);
+int __cdecl X509_TRUST_get_flags(const X509_TRUST *xp);
+char * __cdecl X509_TRUST_get0_name(const X509_TRUST *xp);
+int __cdecl X509_TRUST_get_trust(const X509_TRUST *xp);
 
 # ifdef  __cplusplus
 }
diff --git a/include/openssl/x509_vfy.h b/include/openssl/x509_vfy.h
index adb8bce7cb..8837d90d38 100644
--- a/include/openssl/x509_vfy.h
+++ b/include/openssl/x509_vfy.h
@@ -58,29 +58,29 @@ DEFINE_STACK_OF(X509_LOOKUP)
 DEFINE_STACK_OF(X509_OBJECT)
 DEFINE_STACK_OF(X509_VERIFY_PARAM)
 
-int X509_STORE_set_depth(X509_STORE *store, int depth);
+int __cdecl X509_STORE_set_depth(X509_STORE *store, int depth);
 
 typedef int (*X509_STORE_CTX_verify_cb)(int, X509_STORE_CTX *);
-typedef int (*X509_STORE_CTX_verify_fn)(X509_STORE_CTX *);
-typedef int (*X509_STORE_CTX_get_issuer_fn)(X509 **issuer,
+typedef int (__cdecl *X509_STORE_CTX_verify_fn)(X509_STORE_CTX *);
+typedef int (__cdecl *X509_STORE_CTX_get_issuer_fn)(X509 **issuer,
                                             X509_STORE_CTX *ctx, X509 *x);
-typedef int (*X509_STORE_CTX_check_issued_fn)(X509_STORE_CTX *ctx,
+typedef int (__cdecl *X509_STORE_CTX_check_issued_fn)(X509_STORE_CTX *ctx,
                                               X509 *x, X509 *issuer);
-typedef int (*X509_STORE_CTX_check_revocation_fn)(X509_STORE_CTX *ctx);
-typedef int (*X509_STORE_CTX_get_crl_fn)(X509_STORE_CTX *ctx,
+typedef int (__cdecl *X509_STORE_CTX_check_revocation_fn)(X509_STORE_CTX *ctx);
+typedef int (__cdecl *X509_STORE_CTX_get_crl_fn)(X509_STORE_CTX *ctx,
                                          X509_CRL **crl, X509 *x);
-typedef int (*X509_STORE_CTX_check_crl_fn)(X509_STORE_CTX *ctx, X509_CRL *crl);
-typedef int (*X509_STORE_CTX_cert_crl_fn)(X509_STORE_CTX *ctx,
+typedef int (__cdecl *X509_STORE_CTX_check_crl_fn)(X509_STORE_CTX *ctx, X509_CRL *crl);
+typedef int (__cdecl *X509_STORE_CTX_cert_crl_fn)(X509_STORE_CTX *ctx,
                                           X509_CRL *crl, X509 *x);
-typedef int (*X509_STORE_CTX_check_policy_fn)(X509_STORE_CTX *ctx);
-typedef STACK_OF(X509) *(*X509_STORE_CTX_lookup_certs_fn)(X509_STORE_CTX *ctx,
+typedef int (__cdecl *X509_STORE_CTX_check_policy_fn)(X509_STORE_CTX *ctx);
+typedef STACK_OF(X509) *(__cdecl *X509_STORE_CTX_lookup_certs_fn)(X509_STORE_CTX *ctx,
                                                           X509_NAME *nm);
-typedef STACK_OF(X509_CRL) *(*X509_STORE_CTX_lookup_crls_fn)(X509_STORE_CTX *ctx,
+typedef STACK_OF(X509_CRL) *(__cdecl *X509_STORE_CTX_lookup_crls_fn)(X509_STORE_CTX *ctx,
                                                              X509_NAME *nm);
-typedef int (*X509_STORE_CTX_cleanup_fn)(X509_STORE_CTX *ctx);
+typedef int (__cdecl *X509_STORE_CTX_cleanup_fn)(X509_STORE_CTX *ctx);
 
 
-void X509_STORE_CTX_set_depth(X509_STORE_CTX *ctx, int depth);
+void __cdecl X509_STORE_CTX_set_depth(X509_STORE_CTX *ctx, int depth);
 
 # define X509_STORE_CTX_set_app_data(ctx,data) \
         X509_STORE_CTX_set_ex_data(ctx,0,data)
@@ -249,102 +249,102 @@ void X509_STORE_CTX_set_depth(X509_STORE_CTX *ctx, int depth);
                                 | X509_V_FLAG_INHIBIT_ANY \
                                 | X509_V_FLAG_INHIBIT_MAP)
 
-int X509_OBJECT_idx_by_subject(STACK_OF(X509_OBJECT) *h, X509_LOOKUP_TYPE type,
+int __cdecl X509_OBJECT_idx_by_subject(STACK_OF(X509_OBJECT) *h, X509_LOOKUP_TYPE type,
                                X509_NAME *name);
-X509_OBJECT *X509_OBJECT_retrieve_by_subject(STACK_OF(X509_OBJECT) *h,
+X509_OBJECT * __cdecl X509_OBJECT_retrieve_by_subject(STACK_OF(X509_OBJECT) *h,
                                              X509_LOOKUP_TYPE type,
                                              X509_NAME *name);
-X509_OBJECT *X509_OBJECT_retrieve_match(STACK_OF(X509_OBJECT) *h,
+X509_OBJECT * __cdecl X509_OBJECT_retrieve_match(STACK_OF(X509_OBJECT) *h,
                                         X509_OBJECT *x);
-int X509_OBJECT_up_ref_count(X509_OBJECT *a);
-X509_OBJECT *X509_OBJECT_new(void);
-void X509_OBJECT_free(X509_OBJECT *a);
-X509_LOOKUP_TYPE X509_OBJECT_get_type(const X509_OBJECT *a);
-X509 *X509_OBJECT_get0_X509(const X509_OBJECT *a);
-int X509_OBJECT_set1_X509(X509_OBJECT *a, X509 *obj);
-X509_CRL *X509_OBJECT_get0_X509_CRL(X509_OBJECT *a);
-int X509_OBJECT_set1_X509_CRL(X509_OBJECT *a, X509_CRL *obj);
-X509_STORE *X509_STORE_new(void);
-void X509_STORE_free(X509_STORE *v);
-int X509_STORE_lock(X509_STORE *ctx);
-int X509_STORE_unlock(X509_STORE *ctx);
-int X509_STORE_up_ref(X509_STORE *v);
-STACK_OF(X509_OBJECT) *X509_STORE_get0_objects(X509_STORE *v);
-
-STACK_OF(X509) *X509_STORE_CTX_get1_certs(X509_STORE_CTX *st, X509_NAME *nm);
-STACK_OF(X509_CRL) *X509_STORE_CTX_get1_crls(X509_STORE_CTX *st, X509_NAME *nm);
-int X509_STORE_set_flags(X509_STORE *ctx, unsigned long flags);
-int X509_STORE_set_purpose(X509_STORE *ctx, int purpose);
-int X509_STORE_set_trust(X509_STORE *ctx, int trust);
-int X509_STORE_set1_param(X509_STORE *ctx, X509_VERIFY_PARAM *pm);
-X509_VERIFY_PARAM *X509_STORE_get0_param(X509_STORE *ctx);
-
-void X509_STORE_set_verify(X509_STORE *ctx, X509_STORE_CTX_verify_fn verify);
+int __cdecl X509_OBJECT_up_ref_count(X509_OBJECT *a);
+X509_OBJECT * __cdecl X509_OBJECT_new(void);
+void __cdecl X509_OBJECT_free(X509_OBJECT *a);
+X509_LOOKUP_TYPE __cdecl X509_OBJECT_get_type(const X509_OBJECT *a);
+X509 * __cdecl X509_OBJECT_get0_X509(const X509_OBJECT *a);
+int __cdecl X509_OBJECT_set1_X509(X509_OBJECT *a, X509 *obj);
+X509_CRL * __cdecl X509_OBJECT_get0_X509_CRL(X509_OBJECT *a);
+int __cdecl X509_OBJECT_set1_X509_CRL(X509_OBJECT *a, X509_CRL *obj);
+X509_STORE * __cdecl X509_STORE_new(void);
+void __cdecl X509_STORE_free(X509_STORE *v);
+int __cdecl X509_STORE_lock(X509_STORE *ctx);
+int __cdecl X509_STORE_unlock(X509_STORE *ctx);
+int __cdecl X509_STORE_up_ref(X509_STORE *v);
+STACK_OF(X509_OBJECT) * __cdecl X509_STORE_get0_objects(X509_STORE *v);
+
+STACK_OF(X509) * __cdecl X509_STORE_CTX_get1_certs(X509_STORE_CTX *st, X509_NAME *nm);
+STACK_OF(X509_CRL) * __cdecl X509_STORE_CTX_get1_crls(X509_STORE_CTX *st, X509_NAME *nm);
+int __cdecl X509_STORE_set_flags(X509_STORE *ctx, unsigned long flags);
+int __cdecl X509_STORE_set_purpose(X509_STORE *ctx, int purpose);
+int __cdecl X509_STORE_set_trust(X509_STORE *ctx, int trust);
+int __cdecl X509_STORE_set1_param(X509_STORE *ctx, X509_VERIFY_PARAM *pm);
+X509_VERIFY_PARAM * __cdecl X509_STORE_get0_param(X509_STORE *ctx);
+
+void __cdecl X509_STORE_set_verify(X509_STORE *ctx, X509_STORE_CTX_verify_fn verify);
 #define X509_STORE_set_verify_func(ctx, func) \
             X509_STORE_set_verify((ctx),(func))
-void X509_STORE_CTX_set_verify(X509_STORE_CTX *ctx,
+void __cdecl X509_STORE_CTX_set_verify(X509_STORE_CTX *ctx,
                                X509_STORE_CTX_verify_fn verify);
 X509_STORE_CTX_verify_fn X509_STORE_get_verify(X509_STORE *ctx);
-void X509_STORE_set_verify_cb(X509_STORE *ctx,
+void __cdecl X509_STORE_set_verify_cb(X509_STORE *ctx,
                               X509_STORE_CTX_verify_cb verify_cb);
 # define X509_STORE_set_verify_cb_func(ctx,func) \
             X509_STORE_set_verify_cb((ctx),(func))
-X509_STORE_CTX_verify_cb X509_STORE_get_verify_cb(X509_STORE *ctx);
-void X509_STORE_set_get_issuer(X509_STORE *ctx,
+X509_STORE_CTX_verify_cb __cdecl X509_STORE_get_verify_cb(X509_STORE *ctx);
+void __cdecl X509_STORE_set_get_issuer(X509_STORE *ctx,
                                X509_STORE_CTX_get_issuer_fn get_issuer);
 X509_STORE_CTX_get_issuer_fn X509_STORE_get_get_issuer(X509_STORE *ctx);
-void X509_STORE_set_check_issued(X509_STORE *ctx,
+void __cdecl X509_STORE_set_check_issued(X509_STORE *ctx,
                                  X509_STORE_CTX_check_issued_fn check_issued);
 X509_STORE_CTX_check_issued_fn X509_STORE_get_check_issued(X509_STORE *ctx);
-void X509_STORE_set_check_revocation(X509_STORE *ctx,
+void __cdecl X509_STORE_set_check_revocation(X509_STORE *ctx,
                                      X509_STORE_CTX_check_revocation_fn check_revocation);
 X509_STORE_CTX_check_revocation_fn X509_STORE_get_check_revocation(X509_STORE *ctx);
-void X509_STORE_set_get_crl(X509_STORE *ctx,
+void __cdecl X509_STORE_set_get_crl(X509_STORE *ctx,
                             X509_STORE_CTX_get_crl_fn get_crl);
 X509_STORE_CTX_get_crl_fn X509_STORE_get_get_crl(X509_STORE *ctx);
-void X509_STORE_set_check_crl(X509_STORE *ctx,
+void __cdecl X509_STORE_set_check_crl(X509_STORE *ctx,
                               X509_STORE_CTX_check_crl_fn check_crl);
 X509_STORE_CTX_check_crl_fn X509_STORE_get_check_crl(X509_STORE *ctx);
-void X509_STORE_set_cert_crl(X509_STORE *ctx,
+void __cdecl X509_STORE_set_cert_crl(X509_STORE *ctx,
                              X509_STORE_CTX_cert_crl_fn cert_crl);
 X509_STORE_CTX_cert_crl_fn X509_STORE_get_cert_crl(X509_STORE *ctx);
-void X509_STORE_set_check_policy(X509_STORE *ctx,
+void __cdecl X509_STORE_set_check_policy(X509_STORE *ctx,
                                  X509_STORE_CTX_check_policy_fn check_policy);
 X509_STORE_CTX_check_policy_fn X509_STORE_get_check_policy(X509_STORE *ctx);
-void X509_STORE_set_lookup_certs(X509_STORE *ctx,
+void __cdecl X509_STORE_set_lookup_certs(X509_STORE *ctx,
                                  X509_STORE_CTX_lookup_certs_fn lookup_certs);
 X509_STORE_CTX_lookup_certs_fn X509_STORE_get_lookup_certs(X509_STORE *ctx);
-void X509_STORE_set_lookup_crls(X509_STORE *ctx,
+void __cdecl X509_STORE_set_lookup_crls(X509_STORE *ctx,
                                 X509_STORE_CTX_lookup_crls_fn lookup_crls);
 #define X509_STORE_set_lookup_crls_cb(ctx, func) \
     X509_STORE_set_lookup_crls((ctx), (func))
 X509_STORE_CTX_lookup_crls_fn X509_STORE_get_lookup_crls(X509_STORE *ctx);
-void X509_STORE_set_cleanup(X509_STORE *ctx,
+void __cdecl X509_STORE_set_cleanup(X509_STORE *ctx,
                             X509_STORE_CTX_cleanup_fn cleanup);
 X509_STORE_CTX_cleanup_fn X509_STORE_get_cleanup(X509_STORE *ctx);
 
 #define X509_STORE_get_ex_new_index(l, p, newf, dupf, freef) \
     CRYPTO_get_ex_new_index(CRYPTO_EX_INDEX_X509_STORE, l, p, newf, dupf, freef)
-int X509_STORE_set_ex_data(X509_STORE *ctx, int idx, void *data);
-void *X509_STORE_get_ex_data(X509_STORE *ctx, int idx);
+int __cdecl X509_STORE_set_ex_data(X509_STORE *ctx, int idx, void *data);
+void * __cdecl X509_STORE_get_ex_data(X509_STORE *ctx, int idx);
 
-X509_STORE_CTX *X509_STORE_CTX_new(void);
+X509_STORE_CTX * __cdecl X509_STORE_CTX_new(void);
 
-int X509_STORE_CTX_get1_issuer(X509 **issuer, X509_STORE_CTX *ctx, X509 *x);
+int __cdecl X509_STORE_CTX_get1_issuer(X509 **issuer, X509_STORE_CTX *ctx, X509 *x);
 
-void X509_STORE_CTX_free(X509_STORE_CTX *ctx);
-int X509_STORE_CTX_init(X509_STORE_CTX *ctx, X509_STORE *store,
+void __cdecl X509_STORE_CTX_free(X509_STORE_CTX *ctx);
+int __cdecl X509_STORE_CTX_init(X509_STORE_CTX *ctx, X509_STORE *store,
                         X509 *x509, STACK_OF(X509) *chain);
-void X509_STORE_CTX_set0_trusted_stack(X509_STORE_CTX *ctx, STACK_OF(X509) *sk);
-void X509_STORE_CTX_cleanup(X509_STORE_CTX *ctx);
-
-X509_STORE *X509_STORE_CTX_get0_store(X509_STORE_CTX *ctx);
-X509 *X509_STORE_CTX_get0_cert(X509_STORE_CTX *ctx);
-STACK_OF(X509)* X509_STORE_CTX_get0_untrusted(X509_STORE_CTX *ctx);
-void X509_STORE_CTX_set0_untrusted(X509_STORE_CTX *ctx, STACK_OF(X509) *sk);
-void X509_STORE_CTX_set_verify_cb(X509_STORE_CTX *ctx,
+void __cdecl X509_STORE_CTX_set0_trusted_stack(X509_STORE_CTX *ctx, STACK_OF(X509) *sk);
+void __cdecl X509_STORE_CTX_cleanup(X509_STORE_CTX *ctx);
+
+X509_STORE * __cdecl X509_STORE_CTX_get0_store(X509_STORE_CTX *ctx);
+X509 * __cdecl X509_STORE_CTX_get0_cert(X509_STORE_CTX *ctx);
+STACK_OF(X509)* __cdecl X509_STORE_CTX_get0_untrusted(X509_STORE_CTX *ctx);
+void __cdecl X509_STORE_CTX_set0_untrusted(X509_STORE_CTX *ctx, STACK_OF(X509) *sk);
+void __cdecl X509_STORE_CTX_set_verify_cb(X509_STORE_CTX *ctx,
                                   X509_STORE_CTX_verify_cb verify);
-X509_STORE_CTX_verify_cb X509_STORE_CTX_get_verify_cb(X509_STORE_CTX *ctx);
+X509_STORE_CTX_verify_cb __cdecl X509_STORE_CTX_get_verify_cb(X509_STORE_CTX *ctx);
 X509_STORE_CTX_verify_fn X509_STORE_CTX_get_verify(X509_STORE_CTX *ctx);
 X509_STORE_CTX_get_issuer_fn X509_STORE_CTX_get_get_issuer(X509_STORE_CTX *ctx);
 X509_STORE_CTX_check_issued_fn X509_STORE_CTX_get_check_issued(X509_STORE_CTX *ctx);
@@ -370,213 +370,213 @@ X509_STORE_CTX_cleanup_fn X509_STORE_CTX_get_cleanup(X509_STORE_CTX *ctx);
 # define X509_STORE_get1_crl X509_STORE_CTX_get1_crls
 #endif
 
-X509_LOOKUP *X509_STORE_add_lookup(X509_STORE *v, X509_LOOKUP_METHOD *m);
-X509_LOOKUP_METHOD *X509_LOOKUP_hash_dir(void);
-X509_LOOKUP_METHOD *X509_LOOKUP_file(void);
+X509_LOOKUP * __cdecl X509_STORE_add_lookup(X509_STORE *v, X509_LOOKUP_METHOD *m);
+X509_LOOKUP_METHOD * __cdecl X509_LOOKUP_hash_dir(void);
+X509_LOOKUP_METHOD * __cdecl X509_LOOKUP_file(void);
 
-typedef int (*X509_LOOKUP_ctrl_fn)(X509_LOOKUP *ctx, int cmd, const char *argc,
+typedef int (__cdecl *X509_LOOKUP_ctrl_fn)(X509_LOOKUP *ctx, int cmd, const char *argc,
                                    long argl, char **ret);
-typedef int (*X509_LOOKUP_get_by_subject_fn)(X509_LOOKUP *ctx,
+typedef int (__cdecl *X509_LOOKUP_get_by_subject_fn)(X509_LOOKUP *ctx,
                                              X509_LOOKUP_TYPE type,
                                              X509_NAME *name,
                                              X509_OBJECT *ret);
-typedef int (*X509_LOOKUP_get_by_issuer_serial_fn)(X509_LOOKUP *ctx,
+typedef int (__cdecl *X509_LOOKUP_get_by_issuer_serial_fn)(X509_LOOKUP *ctx,
                                                    X509_LOOKUP_TYPE type,
                                                    X509_NAME *name,
                                                    ASN1_INTEGER *serial,
                                                    X509_OBJECT *ret);
-typedef int (*X509_LOOKUP_get_by_fingerprint_fn)(X509_LOOKUP *ctx,
+typedef int (__cdecl *X509_LOOKUP_get_by_fingerprint_fn)(X509_LOOKUP *ctx,
                                                  X509_LOOKUP_TYPE type,
                                                  const unsigned char* bytes,
                                                  int len,
                                                  X509_OBJECT *ret);
-typedef int (*X509_LOOKUP_get_by_alias_fn)(X509_LOOKUP *ctx,
+typedef int (__cdecl *X509_LOOKUP_get_by_alias_fn)(X509_LOOKUP *ctx,
                                            X509_LOOKUP_TYPE type,
                                            const char *str,
                                            int len,
                                            X509_OBJECT *ret);
 
-X509_LOOKUP_METHOD *X509_LOOKUP_meth_new(const char *name);
-void X509_LOOKUP_meth_free(X509_LOOKUP_METHOD *method);
+X509_LOOKUP_METHOD * __cdecl X509_LOOKUP_meth_new(const char *name);
+void __cdecl X509_LOOKUP_meth_free(X509_LOOKUP_METHOD *method);
 
-int X509_LOOKUP_meth_set_new_item(X509_LOOKUP_METHOD *method,
-                                  int (*new_item) (X509_LOOKUP *ctx));
-int (*X509_LOOKUP_meth_get_new_item(const X509_LOOKUP_METHOD* method))
+int __cdecl X509_LOOKUP_meth_set_new_item(X509_LOOKUP_METHOD *method,
+                                  int (__cdecl *new_item) (X509_LOOKUP *ctx));
+int (__cdecl *X509_LOOKUP_meth_get_new_item(const X509_LOOKUP_METHOD* method))
     (X509_LOOKUP *ctx);
 
-int X509_LOOKUP_meth_set_free(X509_LOOKUP_METHOD *method,
-                              void (*free_fn) (X509_LOOKUP *ctx));
-void (*X509_LOOKUP_meth_get_free(const X509_LOOKUP_METHOD* method))
+int __cdecl X509_LOOKUP_meth_set_free(X509_LOOKUP_METHOD *method,
+                              void (__cdecl *free_fn) (X509_LOOKUP *ctx));
+void (__cdecl *X509_LOOKUP_meth_get_free(const X509_LOOKUP_METHOD* method))
     (X509_LOOKUP *ctx);
 
-int X509_LOOKUP_meth_set_init(X509_LOOKUP_METHOD *method,
-                              int (*init) (X509_LOOKUP *ctx));
-int (*X509_LOOKUP_meth_get_init(const X509_LOOKUP_METHOD* method))
+int __cdecl X509_LOOKUP_meth_set_init(X509_LOOKUP_METHOD *method,
+                              int (__cdecl *init) (X509_LOOKUP *ctx));
+int (__cdecl *X509_LOOKUP_meth_get_init(const X509_LOOKUP_METHOD* method))
     (X509_LOOKUP *ctx);
 
-int X509_LOOKUP_meth_set_shutdown(X509_LOOKUP_METHOD *method,
-                                  int (*shutdown) (X509_LOOKUP *ctx));
-int (*X509_LOOKUP_meth_get_shutdown(const X509_LOOKUP_METHOD* method))
+int __cdecl X509_LOOKUP_meth_set_shutdown(X509_LOOKUP_METHOD *method,
+                                  int (__cdecl *shutdown) (X509_LOOKUP *ctx));
+int (__cdecl *X509_LOOKUP_meth_get_shutdown(const X509_LOOKUP_METHOD* method))
     (X509_LOOKUP *ctx);
 
-int X509_LOOKUP_meth_set_ctrl(X509_LOOKUP_METHOD *method,
+int __cdecl X509_LOOKUP_meth_set_ctrl(X509_LOOKUP_METHOD *method,
                               X509_LOOKUP_ctrl_fn ctrl_fn);
 X509_LOOKUP_ctrl_fn X509_LOOKUP_meth_get_ctrl(const X509_LOOKUP_METHOD *method);
 
-int X509_LOOKUP_meth_set_get_by_subject(X509_LOOKUP_METHOD *method,
+int __cdecl X509_LOOKUP_meth_set_get_by_subject(X509_LOOKUP_METHOD *method,
                                         X509_LOOKUP_get_by_subject_fn fn);
 X509_LOOKUP_get_by_subject_fn X509_LOOKUP_meth_get_get_by_subject(
     const X509_LOOKUP_METHOD *method);
 
-int X509_LOOKUP_meth_set_get_by_issuer_serial(X509_LOOKUP_METHOD *method,
+int __cdecl X509_LOOKUP_meth_set_get_by_issuer_serial(X509_LOOKUP_METHOD *method,
     X509_LOOKUP_get_by_issuer_serial_fn fn);
 X509_LOOKUP_get_by_issuer_serial_fn X509_LOOKUP_meth_get_get_by_issuer_serial(
     const X509_LOOKUP_METHOD *method);
 
-int X509_LOOKUP_meth_set_get_by_fingerprint(X509_LOOKUP_METHOD *method,
+int __cdecl X509_LOOKUP_meth_set_get_by_fingerprint(X509_LOOKUP_METHOD *method,
     X509_LOOKUP_get_by_fingerprint_fn fn);
 X509_LOOKUP_get_by_fingerprint_fn X509_LOOKUP_meth_get_get_by_fingerprint(
     const X509_LOOKUP_METHOD *method);
 
-int X509_LOOKUP_meth_set_get_by_alias(X509_LOOKUP_METHOD *method,
+int __cdecl X509_LOOKUP_meth_set_get_by_alias(X509_LOOKUP_METHOD *method,
                                       X509_LOOKUP_get_by_alias_fn fn);
 X509_LOOKUP_get_by_alias_fn X509_LOOKUP_meth_get_get_by_alias(
     const X509_LOOKUP_METHOD *method);
 
 
-int X509_STORE_add_cert(X509_STORE *ctx, X509 *x);
-int X509_STORE_add_crl(X509_STORE *ctx, X509_CRL *x);
+int __cdecl X509_STORE_add_cert(X509_STORE *ctx, X509 *x);
+int __cdecl X509_STORE_add_crl(X509_STORE *ctx, X509_CRL *x);
 
-int X509_STORE_CTX_get_by_subject(X509_STORE_CTX *vs, X509_LOOKUP_TYPE type,
+int __cdecl X509_STORE_CTX_get_by_subject(X509_STORE_CTX *vs, X509_LOOKUP_TYPE type,
                                   X509_NAME *name, X509_OBJECT *ret);
-X509_OBJECT *X509_STORE_CTX_get_obj_by_subject(X509_STORE_CTX *vs,
+X509_OBJECT * __cdecl X509_STORE_CTX_get_obj_by_subject(X509_STORE_CTX *vs,
                                                X509_LOOKUP_TYPE type,
                                                X509_NAME *name);
 
-int X509_LOOKUP_ctrl(X509_LOOKUP *ctx, int cmd, const char *argc,
+int __cdecl X509_LOOKUP_ctrl(X509_LOOKUP *ctx, int cmd, const char *argc,
                      long argl, char **ret);
 
-int X509_load_cert_file(X509_LOOKUP *ctx, const char *file, int type);
-int X509_load_crl_file(X509_LOOKUP *ctx, const char *file, int type);
-int X509_load_cert_crl_file(X509_LOOKUP *ctx, const char *file, int type);
+int __cdecl X509_load_cert_file(X509_LOOKUP *ctx, const char *file, int type);
+int __cdecl X509_load_crl_file(X509_LOOKUP *ctx, const char *file, int type);
+int __cdecl X509_load_cert_crl_file(X509_LOOKUP *ctx, const char *file, int type);
 
-X509_LOOKUP *X509_LOOKUP_new(X509_LOOKUP_METHOD *method);
-void X509_LOOKUP_free(X509_LOOKUP *ctx);
-int X509_LOOKUP_init(X509_LOOKUP *ctx);
-int X509_LOOKUP_by_subject(X509_LOOKUP *ctx, X509_LOOKUP_TYPE type,
+X509_LOOKUP * __cdecl X509_LOOKUP_new(X509_LOOKUP_METHOD *method);
+void __cdecl X509_LOOKUP_free(X509_LOOKUP *ctx);
+int __cdecl X509_LOOKUP_init(X509_LOOKUP *ctx);
+int __cdecl X509_LOOKUP_by_subject(X509_LOOKUP *ctx, X509_LOOKUP_TYPE type,
                            X509_NAME *name, X509_OBJECT *ret);
-int X509_LOOKUP_by_issuer_serial(X509_LOOKUP *ctx, X509_LOOKUP_TYPE type,
+int __cdecl X509_LOOKUP_by_issuer_serial(X509_LOOKUP *ctx, X509_LOOKUP_TYPE type,
                                  X509_NAME *name, ASN1_INTEGER *serial,
                                  X509_OBJECT *ret);
-int X509_LOOKUP_by_fingerprint(X509_LOOKUP *ctx, X509_LOOKUP_TYPE type,
+int __cdecl X509_LOOKUP_by_fingerprint(X509_LOOKUP *ctx, X509_LOOKUP_TYPE type,
                                const unsigned char *bytes, int len,
                                X509_OBJECT *ret);
-int X509_LOOKUP_by_alias(X509_LOOKUP *ctx, X509_LOOKUP_TYPE type,
+int __cdecl X509_LOOKUP_by_alias(X509_LOOKUP *ctx, X509_LOOKUP_TYPE type,
                          const char *str, int len, X509_OBJECT *ret);
-int X509_LOOKUP_set_method_data(X509_LOOKUP *ctx, void *data);
-void *X509_LOOKUP_get_method_data(const X509_LOOKUP *ctx);
-X509_STORE *X509_LOOKUP_get_store(const X509_LOOKUP *ctx);
-int X509_LOOKUP_shutdown(X509_LOOKUP *ctx);
+int __cdecl X509_LOOKUP_set_method_data(X509_LOOKUP *ctx, void *data);
+void * __cdecl X509_LOOKUP_get_method_data(const X509_LOOKUP *ctx);
+X509_STORE * __cdecl X509_LOOKUP_get_store(const X509_LOOKUP *ctx);
+int __cdecl X509_LOOKUP_shutdown(X509_LOOKUP *ctx);
 
-int X509_STORE_load_locations(X509_STORE *ctx,
+int __cdecl X509_STORE_load_locations(X509_STORE *ctx,
                               const char *file, const char *dir);
-int X509_STORE_set_default_paths(X509_STORE *ctx);
+int __cdecl X509_STORE_set_default_paths(X509_STORE *ctx);
 
 #define X509_STORE_CTX_get_ex_new_index(l, p, newf, dupf, freef) \
     CRYPTO_get_ex_new_index(CRYPTO_EX_INDEX_X509_STORE_CTX, l, p, newf, dupf, freef)
-int X509_STORE_CTX_set_ex_data(X509_STORE_CTX *ctx, int idx, void *data);
-void *X509_STORE_CTX_get_ex_data(X509_STORE_CTX *ctx, int idx);
-int X509_STORE_CTX_get_error(X509_STORE_CTX *ctx);
-void X509_STORE_CTX_set_error(X509_STORE_CTX *ctx, int s);
-int X509_STORE_CTX_get_error_depth(X509_STORE_CTX *ctx);
-void X509_STORE_CTX_set_error_depth(X509_STORE_CTX *ctx, int depth);
-X509 *X509_STORE_CTX_get_current_cert(X509_STORE_CTX *ctx);
-void X509_STORE_CTX_set_current_cert(X509_STORE_CTX *ctx, X509 *x);
-X509 *X509_STORE_CTX_get0_current_issuer(X509_STORE_CTX *ctx);
-X509_CRL *X509_STORE_CTX_get0_current_crl(X509_STORE_CTX *ctx);
-X509_STORE_CTX *X509_STORE_CTX_get0_parent_ctx(X509_STORE_CTX *ctx);
-STACK_OF(X509) *X509_STORE_CTX_get0_chain(X509_STORE_CTX *ctx);
-STACK_OF(X509) *X509_STORE_CTX_get1_chain(X509_STORE_CTX *ctx);
-void X509_STORE_CTX_set_cert(X509_STORE_CTX *c, X509 *x);
-void X509_STORE_CTX_set0_verified_chain(X509_STORE_CTX *c, STACK_OF(X509) *sk);
-void X509_STORE_CTX_set0_crls(X509_STORE_CTX *c, STACK_OF(X509_CRL) *sk);
-int X509_STORE_CTX_set_purpose(X509_STORE_CTX *ctx, int purpose);
-int X509_STORE_CTX_set_trust(X509_STORE_CTX *ctx, int trust);
-int X509_STORE_CTX_purpose_inherit(X509_STORE_CTX *ctx, int def_purpose,
+int __cdecl X509_STORE_CTX_set_ex_data(X509_STORE_CTX *ctx, int idx, void *data);
+void * __cdecl X509_STORE_CTX_get_ex_data(X509_STORE_CTX *ctx, int idx);
+int __cdecl X509_STORE_CTX_get_error(X509_STORE_CTX *ctx);
+void __cdecl X509_STORE_CTX_set_error(X509_STORE_CTX *ctx, int s);
+int __cdecl X509_STORE_CTX_get_error_depth(X509_STORE_CTX *ctx);
+void __cdecl X509_STORE_CTX_set_error_depth(X509_STORE_CTX *ctx, int depth);
+X509 * __cdecl X509_STORE_CTX_get_current_cert(X509_STORE_CTX *ctx);
+void __cdecl X509_STORE_CTX_set_current_cert(X509_STORE_CTX *ctx, X509 *x);
+X509 * __cdecl X509_STORE_CTX_get0_current_issuer(X509_STORE_CTX *ctx);
+X509_CRL * __cdecl X509_STORE_CTX_get0_current_crl(X509_STORE_CTX *ctx);
+X509_STORE_CTX * __cdecl X509_STORE_CTX_get0_parent_ctx(X509_STORE_CTX *ctx);
+STACK_OF(X509) * __cdecl X509_STORE_CTX_get0_chain(X509_STORE_CTX *ctx);
+STACK_OF(X509) * __cdecl X509_STORE_CTX_get1_chain(X509_STORE_CTX *ctx);
+void __cdecl X509_STORE_CTX_set_cert(X509_STORE_CTX *c, X509 *x);
+void __cdecl X509_STORE_CTX_set0_verified_chain(X509_STORE_CTX *c, STACK_OF(X509) *sk);
+void __cdecl X509_STORE_CTX_set0_crls(X509_STORE_CTX *c, STACK_OF(X509_CRL) *sk);
+int __cdecl X509_STORE_CTX_set_purpose(X509_STORE_CTX *ctx, int purpose);
+int __cdecl X509_STORE_CTX_set_trust(X509_STORE_CTX *ctx, int trust);
+int __cdecl X509_STORE_CTX_purpose_inherit(X509_STORE_CTX *ctx, int def_purpose,
                                    int purpose, int trust);
-void X509_STORE_CTX_set_flags(X509_STORE_CTX *ctx, unsigned long flags);
-void X509_STORE_CTX_set_time(X509_STORE_CTX *ctx, unsigned long flags,
+void __cdecl X509_STORE_CTX_set_flags(X509_STORE_CTX *ctx, unsigned long flags);
+void __cdecl X509_STORE_CTX_set_time(X509_STORE_CTX *ctx, unsigned long flags,
                              time_t t);
 
-X509_POLICY_TREE *X509_STORE_CTX_get0_policy_tree(X509_STORE_CTX *ctx);
-int X509_STORE_CTX_get_explicit_policy(X509_STORE_CTX *ctx);
-int X509_STORE_CTX_get_num_untrusted(X509_STORE_CTX *ctx);
+X509_POLICY_TREE * __cdecl X509_STORE_CTX_get0_policy_tree(X509_STORE_CTX *ctx);
+int __cdecl X509_STORE_CTX_get_explicit_policy(X509_STORE_CTX *ctx);
+int __cdecl X509_STORE_CTX_get_num_untrusted(X509_STORE_CTX *ctx);
 
-X509_VERIFY_PARAM *X509_STORE_CTX_get0_param(X509_STORE_CTX *ctx);
-void X509_STORE_CTX_set0_param(X509_STORE_CTX *ctx, X509_VERIFY_PARAM *param);
-int X509_STORE_CTX_set_default(X509_STORE_CTX *ctx, const char *name);
+X509_VERIFY_PARAM * __cdecl X509_STORE_CTX_get0_param(X509_STORE_CTX *ctx);
+void __cdecl X509_STORE_CTX_set0_param(X509_STORE_CTX *ctx, X509_VERIFY_PARAM *param);
+int __cdecl X509_STORE_CTX_set_default(X509_STORE_CTX *ctx, const char *name);
 
 /*
  * Bridge opacity barrier between libcrypt and libssl, also needed to support
  * offline testing in test/danetest.c
  */
-void X509_STORE_CTX_set0_dane(X509_STORE_CTX *ctx, SSL_DANE *dane);
+void __cdecl X509_STORE_CTX_set0_dane(X509_STORE_CTX *ctx, SSL_DANE *dane);
 #define DANE_FLAG_NO_DANE_EE_NAMECHECKS (1L << 0)
 
 /* X509_VERIFY_PARAM functions */
 
-X509_VERIFY_PARAM *X509_VERIFY_PARAM_new(void);
-void X509_VERIFY_PARAM_free(X509_VERIFY_PARAM *param);
-int X509_VERIFY_PARAM_inherit(X509_VERIFY_PARAM *to,
+X509_VERIFY_PARAM * __cdecl X509_VERIFY_PARAM_new(void);
+void __cdecl X509_VERIFY_PARAM_free(X509_VERIFY_PARAM *param);
+int __cdecl X509_VERIFY_PARAM_inherit(X509_VERIFY_PARAM *to,
                               const X509_VERIFY_PARAM *from);
-int X509_VERIFY_PARAM_set1(X509_VERIFY_PARAM *to,
+int __cdecl X509_VERIFY_PARAM_set1(X509_VERIFY_PARAM *to,
                            const X509_VERIFY_PARAM *from);
-int X509_VERIFY_PARAM_set1_name(X509_VERIFY_PARAM *param, const char *name);
-int X509_VERIFY_PARAM_set_flags(X509_VERIFY_PARAM *param,
+int __cdecl X509_VERIFY_PARAM_set1_name(X509_VERIFY_PARAM *param, const char *name);
+int __cdecl X509_VERIFY_PARAM_set_flags(X509_VERIFY_PARAM *param,
                                 unsigned long flags);
-int X509_VERIFY_PARAM_clear_flags(X509_VERIFY_PARAM *param,
+int __cdecl X509_VERIFY_PARAM_clear_flags(X509_VERIFY_PARAM *param,
                                   unsigned long flags);
-unsigned long X509_VERIFY_PARAM_get_flags(X509_VERIFY_PARAM *param);
-int X509_VERIFY_PARAM_set_purpose(X509_VERIFY_PARAM *param, int purpose);
-int X509_VERIFY_PARAM_set_trust(X509_VERIFY_PARAM *param, int trust);
-void X509_VERIFY_PARAM_set_depth(X509_VERIFY_PARAM *param, int depth);
-void X509_VERIFY_PARAM_set_auth_level(X509_VERIFY_PARAM *param, int auth_level);
-time_t X509_VERIFY_PARAM_get_time(const X509_VERIFY_PARAM *param);
-void X509_VERIFY_PARAM_set_time(X509_VERIFY_PARAM *param, time_t t);
-int X509_VERIFY_PARAM_add0_policy(X509_VERIFY_PARAM *param,
+unsigned long __cdecl X509_VERIFY_PARAM_get_flags(X509_VERIFY_PARAM *param);
+int __cdecl X509_VERIFY_PARAM_set_purpose(X509_VERIFY_PARAM *param, int purpose);
+int __cdecl X509_VERIFY_PARAM_set_trust(X509_VERIFY_PARAM *param, int trust);
+void __cdecl X509_VERIFY_PARAM_set_depth(X509_VERIFY_PARAM *param, int depth);
+void __cdecl X509_VERIFY_PARAM_set_auth_level(X509_VERIFY_PARAM *param, int auth_level);
+time_t __cdecl X509_VERIFY_PARAM_get_time(const X509_VERIFY_PARAM *param);
+void __cdecl X509_VERIFY_PARAM_set_time(X509_VERIFY_PARAM *param, time_t t);
+int __cdecl X509_VERIFY_PARAM_add0_policy(X509_VERIFY_PARAM *param,
                                   ASN1_OBJECT *policy);
-int X509_VERIFY_PARAM_set1_policies(X509_VERIFY_PARAM *param,
+int __cdecl X509_VERIFY_PARAM_set1_policies(X509_VERIFY_PARAM *param,
                                     STACK_OF(ASN1_OBJECT) *policies);
 
-int X509_VERIFY_PARAM_set_inh_flags(X509_VERIFY_PARAM *param,
+int __cdecl X509_VERIFY_PARAM_set_inh_flags(X509_VERIFY_PARAM *param,
                                     uint32_t flags);
-uint32_t X509_VERIFY_PARAM_get_inh_flags(const X509_VERIFY_PARAM *param);
+uint32_t __cdecl X509_VERIFY_PARAM_get_inh_flags(const X509_VERIFY_PARAM *param);
 
-int X509_VERIFY_PARAM_set1_host(X509_VERIFY_PARAM *param,
+int __cdecl X509_VERIFY_PARAM_set1_host(X509_VERIFY_PARAM *param,
                                 const char *name, size_t namelen);
-int X509_VERIFY_PARAM_add1_host(X509_VERIFY_PARAM *param,
+int __cdecl X509_VERIFY_PARAM_add1_host(X509_VERIFY_PARAM *param,
                                 const char *name, size_t namelen);
-void X509_VERIFY_PARAM_set_hostflags(X509_VERIFY_PARAM *param,
+void __cdecl X509_VERIFY_PARAM_set_hostflags(X509_VERIFY_PARAM *param,
                                      unsigned int flags);
-unsigned int X509_VERIFY_PARAM_get_hostflags(const X509_VERIFY_PARAM *param);
-char *X509_VERIFY_PARAM_get0_peername(X509_VERIFY_PARAM *);
-void X509_VERIFY_PARAM_move_peername(X509_VERIFY_PARAM *, X509_VERIFY_PARAM *);
-int X509_VERIFY_PARAM_set1_email(X509_VERIFY_PARAM *param,
+unsigned int __cdecl X509_VERIFY_PARAM_get_hostflags(const X509_VERIFY_PARAM *param);
+char * __cdecl X509_VERIFY_PARAM_get0_peername(X509_VERIFY_PARAM *);
+void __cdecl X509_VERIFY_PARAM_move_peername(X509_VERIFY_PARAM *, X509_VERIFY_PARAM *);
+int __cdecl X509_VERIFY_PARAM_set1_email(X509_VERIFY_PARAM *param,
                                  const char *email, size_t emaillen);
-int X509_VERIFY_PARAM_set1_ip(X509_VERIFY_PARAM *param,
+int __cdecl X509_VERIFY_PARAM_set1_ip(X509_VERIFY_PARAM *param,
                               const unsigned char *ip, size_t iplen);
-int X509_VERIFY_PARAM_set1_ip_asc(X509_VERIFY_PARAM *param,
+int __cdecl X509_VERIFY_PARAM_set1_ip_asc(X509_VERIFY_PARAM *param,
                                   const char *ipasc);
 
-int X509_VERIFY_PARAM_get_depth(const X509_VERIFY_PARAM *param);
-int X509_VERIFY_PARAM_get_auth_level(const X509_VERIFY_PARAM *param);
-const char *X509_VERIFY_PARAM_get0_name(const X509_VERIFY_PARAM *param);
+int __cdecl X509_VERIFY_PARAM_get_depth(const X509_VERIFY_PARAM *param);
+int __cdecl X509_VERIFY_PARAM_get_auth_level(const X509_VERIFY_PARAM *param);
+const char * __cdecl X509_VERIFY_PARAM_get0_name(const X509_VERIFY_PARAM *param);
 
-int X509_VERIFY_PARAM_add0_table(X509_VERIFY_PARAM *param);
-int X509_VERIFY_PARAM_get_count(void);
-const X509_VERIFY_PARAM *X509_VERIFY_PARAM_get0(int id);
-const X509_VERIFY_PARAM *X509_VERIFY_PARAM_lookup(const char *name);
-void X509_VERIFY_PARAM_table_cleanup(void);
+int __cdecl X509_VERIFY_PARAM_add0_table(X509_VERIFY_PARAM *param);
+int __cdecl X509_VERIFY_PARAM_get_count(void);
+const X509_VERIFY_PARAM * __cdecl X509_VERIFY_PARAM_get0(int id);
+const X509_VERIFY_PARAM * __cdecl X509_VERIFY_PARAM_lookup(const char *name);
+void __cdecl X509_VERIFY_PARAM_table_cleanup(void);
 
 /* Non positive return values are errors */
 #define X509_PCY_TREE_FAILURE  -2 /* Failure to satisfy explicit policy */
@@ -591,35 +591,35 @@ void X509_VERIFY_PARAM_table_cleanup(void);
 #define X509_PCY_TREE_EMPTY     2 /* The policy tree is empty */
 #define X509_PCY_TREE_EXPLICIT  4 /* Explicit policy required */
 
-int X509_policy_check(X509_POLICY_TREE **ptree, int *pexplicit_policy,
+int __cdecl X509_policy_check(X509_POLICY_TREE **ptree, int *pexplicit_policy,
                       STACK_OF(X509) *certs,
                       STACK_OF(ASN1_OBJECT) *policy_oids, unsigned int flags);
 
-void X509_policy_tree_free(X509_POLICY_TREE *tree);
+void __cdecl X509_policy_tree_free(X509_POLICY_TREE *tree);
 
-int X509_policy_tree_level_count(const X509_POLICY_TREE *tree);
-X509_POLICY_LEVEL *X509_policy_tree_get0_level(const X509_POLICY_TREE *tree,
+int __cdecl X509_policy_tree_level_count(const X509_POLICY_TREE *tree);
+X509_POLICY_LEVEL * __cdecl X509_policy_tree_get0_level(const X509_POLICY_TREE *tree,
                                                int i);
 
-STACK_OF(X509_POLICY_NODE) *X509_policy_tree_get0_policies(const
+STACK_OF(X509_POLICY_NODE) * __cdecl X509_policy_tree_get0_policies(const
                                                            X509_POLICY_TREE
                                                            *tree);
 
-STACK_OF(X509_POLICY_NODE) *X509_policy_tree_get0_user_policies(const
+STACK_OF(X509_POLICY_NODE) * __cdecl X509_policy_tree_get0_user_policies(const
                                                                 X509_POLICY_TREE
                                                                 *tree);
 
-int X509_policy_level_node_count(X509_POLICY_LEVEL *level);
+int __cdecl X509_policy_level_node_count(X509_POLICY_LEVEL *level);
 
-X509_POLICY_NODE *X509_policy_level_get0_node(X509_POLICY_LEVEL *level,
+X509_POLICY_NODE * __cdecl X509_policy_level_get0_node(X509_POLICY_LEVEL *level,
                                               int i);
 
-const ASN1_OBJECT *X509_policy_node_get0_policy(const X509_POLICY_NODE *node);
+const ASN1_OBJECT * __cdecl X509_policy_node_get0_policy(const X509_POLICY_NODE *node);
 
-STACK_OF(POLICYQUALINFO) *X509_policy_node_get0_qualifiers(const
+STACK_OF(POLICYQUALINFO) * __cdecl X509_policy_node_get0_qualifiers(const
                                                            X509_POLICY_NODE
                                                            *node);
-const X509_POLICY_NODE *X509_policy_node_get0_parent(const X509_POLICY_NODE
+const X509_POLICY_NODE * __cdecl X509_policy_node_get0_parent(const X509_POLICY_NODE
                                                      *node);
 
 #ifdef  __cplusplus
diff --git a/include/openssl/x509err.h b/include/openssl/x509err.h
index 0273853172..4f0be9d033 100644
--- a/include/openssl/x509err.h
+++ b/include/openssl/x509err.h
@@ -18,7 +18,7 @@
 # ifdef  __cplusplus
 extern "C"
 # endif
-int ERR_load_X509_strings(void);
+int __cdecl ERR_load_X509_strings(void);
 
 /*
  * X509 function codes.
diff --git a/include/openssl/x509v3.h b/include/openssl/x509v3.h
index 6c6eca38a5..aeaffbd633 100644
--- a/include/openssl/x509v3.h
+++ b/include/openssl/x509v3.h
@@ -25,23 +25,23 @@ struct v3_ext_ctx;
 
 /* Useful typedefs */
 
-typedef void *(*X509V3_EXT_NEW)(void);
-typedef void (*X509V3_EXT_FREE) (void *);
-typedef void *(*X509V3_EXT_D2I)(void *, const unsigned char **, long);
-typedef int (*X509V3_EXT_I2D) (void *, unsigned char **);
+typedef void *(__cdecl *X509V3_EXT_NEW)(void);
+typedef void (__cdecl *X509V3_EXT_FREE) (void *);
+typedef void *(__cdecl *X509V3_EXT_D2I)(void *, const unsigned char **, long);
+typedef int (__cdecl *X509V3_EXT_I2D) (void *, unsigned char **);
 typedef STACK_OF(CONF_VALUE) *
-    (*X509V3_EXT_I2V) (const struct v3_ext_method *method, void *ext,
+    (__cdecl *X509V3_EXT_I2V) (const struct v3_ext_method *method, void *ext,
                        STACK_OF(CONF_VALUE) *extlist);
-typedef void *(*X509V3_EXT_V2I)(const struct v3_ext_method *method,
+typedef void *(__cdecl *X509V3_EXT_V2I)(const struct v3_ext_method *method,
                                 struct v3_ext_ctx *ctx,
                                 STACK_OF(CONF_VALUE) *values);
-typedef char *(*X509V3_EXT_I2S)(const struct v3_ext_method *method,
+typedef char *(__cdecl *X509V3_EXT_I2S)(const struct v3_ext_method *method,
                                 void *ext);
-typedef void *(*X509V3_EXT_S2I)(const struct v3_ext_method *method,
+typedef void *(__cdecl *X509V3_EXT_S2I)(const struct v3_ext_method *method,
                                 struct v3_ext_ctx *ctx, const char *str);
-typedef int (*X509V3_EXT_I2R) (const struct v3_ext_method *method, void *ext,
+typedef int (__cdecl *X509V3_EXT_I2R) (const struct v3_ext_method *method, void *ext,
                                BIO *out, int indent);
-typedef void *(*X509V3_EXT_R2I)(const struct v3_ext_method *method,
+typedef void *(__cdecl *X509V3_EXT_R2I)(const struct v3_ext_method *method,
                                 struct v3_ext_ctx *ctx, const char *str);
 
 /* V3 extension structure */
@@ -69,10 +69,10 @@ struct v3_ext_method {
 };
 
 typedef struct X509V3_CONF_METHOD_st {
-    char *(*get_string) (void *db, const char *section, const char *value);
-    STACK_OF(CONF_VALUE) *(*get_section) (void *db, const char *section);
-    void (*free_string) (void *db, char *string);
-    void (*free_section) (void *db, STACK_OF(CONF_VALUE) *section);
+    char *(__cdecl *get_string) (void *db, const char *section, const char *value);
+    STACK_OF(CONF_VALUE) *(__cdecl *get_section) (void *db, const char *section);
+    void (__cdecl *free_string) (void *db, char *string);
+    void (__cdecl *free_section) (void *db, STACK_OF(CONF_VALUE) *section);
 } X509V3_CONF_METHOD;
 
 /* Context specific info */
@@ -452,64 +452,64 @@ DECLARE_ASN1_FUNCTIONS(BASIC_CONSTRAINTS)
 DECLARE_ASN1_FUNCTIONS(SXNET)
 DECLARE_ASN1_FUNCTIONS(SXNETID)
 
-int SXNET_add_id_asc(SXNET **psx, const char *zone, const char *user, int userlen);
-int SXNET_add_id_ulong(SXNET **psx, unsigned long lzone, const char *user,
+int __cdecl SXNET_add_id_asc(SXNET **psx, const char *zone, const char *user, int userlen);
+int __cdecl SXNET_add_id_ulong(SXNET **psx, unsigned long lzone, const char *user,
                        int userlen);
-int SXNET_add_id_INTEGER(SXNET **psx, ASN1_INTEGER *izone, const char *user,
+int __cdecl SXNET_add_id_INTEGER(SXNET **psx, ASN1_INTEGER *izone, const char *user,
                          int userlen);
 
-ASN1_OCTET_STRING *SXNET_get_id_asc(SXNET *sx, const char *zone);
-ASN1_OCTET_STRING *SXNET_get_id_ulong(SXNET *sx, unsigned long lzone);
-ASN1_OCTET_STRING *SXNET_get_id_INTEGER(SXNET *sx, ASN1_INTEGER *zone);
+ASN1_OCTET_STRING * __cdecl SXNET_get_id_asc(SXNET *sx, const char *zone);
+ASN1_OCTET_STRING * __cdecl SXNET_get_id_ulong(SXNET *sx, unsigned long lzone);
+ASN1_OCTET_STRING * __cdecl SXNET_get_id_INTEGER(SXNET *sx, ASN1_INTEGER *zone);
 
 DECLARE_ASN1_FUNCTIONS(AUTHORITY_KEYID)
 
 DECLARE_ASN1_FUNCTIONS(PKEY_USAGE_PERIOD)
 
 DECLARE_ASN1_FUNCTIONS(GENERAL_NAME)
-GENERAL_NAME *GENERAL_NAME_dup(GENERAL_NAME *a);
-int GENERAL_NAME_cmp(GENERAL_NAME *a, GENERAL_NAME *b);
+GENERAL_NAME * __cdecl GENERAL_NAME_dup(GENERAL_NAME *a);
+int __cdecl GENERAL_NAME_cmp(GENERAL_NAME *a, GENERAL_NAME *b);
 
-ASN1_BIT_STRING *v2i_ASN1_BIT_STRING(X509V3_EXT_METHOD *method,
+ASN1_BIT_STRING * __cdecl v2i_ASN1_BIT_STRING(X509V3_EXT_METHOD *method,
                                      X509V3_CTX *ctx,
                                      STACK_OF(CONF_VALUE) *nval);
-STACK_OF(CONF_VALUE) *i2v_ASN1_BIT_STRING(X509V3_EXT_METHOD *method,
+STACK_OF(CONF_VALUE) * __cdecl i2v_ASN1_BIT_STRING(X509V3_EXT_METHOD *method,
                                           ASN1_BIT_STRING *bits,
                                           STACK_OF(CONF_VALUE) *extlist);
-char *i2s_ASN1_IA5STRING(X509V3_EXT_METHOD *method, ASN1_IA5STRING *ia5);
-ASN1_IA5STRING *s2i_ASN1_IA5STRING(X509V3_EXT_METHOD *method,
+char * __cdecl i2s_ASN1_IA5STRING(X509V3_EXT_METHOD *method, ASN1_IA5STRING *ia5);
+ASN1_IA5STRING * __cdecl s2i_ASN1_IA5STRING(X509V3_EXT_METHOD *method,
                                    X509V3_CTX *ctx, const char *str);
 
-STACK_OF(CONF_VALUE) *i2v_GENERAL_NAME(X509V3_EXT_METHOD *method,
+STACK_OF(CONF_VALUE) * __cdecl i2v_GENERAL_NAME(X509V3_EXT_METHOD *method,
                                        GENERAL_NAME *gen,
                                        STACK_OF(CONF_VALUE) *ret);
-int GENERAL_NAME_print(BIO *out, GENERAL_NAME *gen);
+int __cdecl GENERAL_NAME_print(BIO *out, GENERAL_NAME *gen);
 
 DECLARE_ASN1_FUNCTIONS(GENERAL_NAMES)
 
-STACK_OF(CONF_VALUE) *i2v_GENERAL_NAMES(X509V3_EXT_METHOD *method,
+STACK_OF(CONF_VALUE) * __cdecl i2v_GENERAL_NAMES(X509V3_EXT_METHOD *method,
                                         GENERAL_NAMES *gen,
                                         STACK_OF(CONF_VALUE) *extlist);
-GENERAL_NAMES *v2i_GENERAL_NAMES(const X509V3_EXT_METHOD *method,
+GENERAL_NAMES * __cdecl v2i_GENERAL_NAMES(const X509V3_EXT_METHOD *method,
                                  X509V3_CTX *ctx, STACK_OF(CONF_VALUE) *nval);
 
 DECLARE_ASN1_FUNCTIONS(OTHERNAME)
 DECLARE_ASN1_FUNCTIONS(EDIPARTYNAME)
-int OTHERNAME_cmp(OTHERNAME *a, OTHERNAME *b);
-void GENERAL_NAME_set0_value(GENERAL_NAME *a, int type, void *value);
-void *GENERAL_NAME_get0_value(const GENERAL_NAME *a, int *ptype);
-int GENERAL_NAME_set0_othername(GENERAL_NAME *gen,
+int __cdecl OTHERNAME_cmp(OTHERNAME *a, OTHERNAME *b);
+void __cdecl GENERAL_NAME_set0_value(GENERAL_NAME *a, int type, void *value);
+void * __cdecl GENERAL_NAME_get0_value(const GENERAL_NAME *a, int *ptype);
+int __cdecl GENERAL_NAME_set0_othername(GENERAL_NAME *gen,
                                 ASN1_OBJECT *oid, ASN1_TYPE *value);
-int GENERAL_NAME_get0_otherName(const GENERAL_NAME *gen,
+int __cdecl GENERAL_NAME_get0_otherName(const GENERAL_NAME *gen,
                                 ASN1_OBJECT **poid, ASN1_TYPE **pvalue);
 
-char *i2s_ASN1_OCTET_STRING(X509V3_EXT_METHOD *method,
+char * __cdecl i2s_ASN1_OCTET_STRING(X509V3_EXT_METHOD *method,
                             const ASN1_OCTET_STRING *ia5);
-ASN1_OCTET_STRING *s2i_ASN1_OCTET_STRING(X509V3_EXT_METHOD *method,
+ASN1_OCTET_STRING * __cdecl s2i_ASN1_OCTET_STRING(X509V3_EXT_METHOD *method,
                                          X509V3_CTX *ctx, const char *str);
 
 DECLARE_ASN1_FUNCTIONS(EXTENDED_KEY_USAGE)
-int i2a_ACCESS_DESCRIPTION(BIO *bp, const ACCESS_DESCRIPTION *a);
+int __cdecl i2a_ACCESS_DESCRIPTION(BIO *bp, const ACCESS_DESCRIPTION *a);
 
 DECLARE_ASN1_ALLOC_FUNCTIONS(TLS_FEATURE)
 
@@ -524,10 +524,10 @@ DECLARE_ASN1_FUNCTIONS(DIST_POINT)
 DECLARE_ASN1_FUNCTIONS(DIST_POINT_NAME)
 DECLARE_ASN1_FUNCTIONS(ISSUING_DIST_POINT)
 
-int DIST_POINT_set_dpname(DIST_POINT_NAME *dpn, X509_NAME *iname);
+int __cdecl DIST_POINT_set_dpname(DIST_POINT_NAME *dpn, X509_NAME *iname);
 
-int NAME_CONSTRAINTS_check(X509 *x, NAME_CONSTRAINTS *nc);
-int NAME_CONSTRAINTS_check_CN(X509 *x, NAME_CONSTRAINTS *nc);
+int __cdecl NAME_CONSTRAINTS_check(X509 *x, NAME_CONSTRAINTS *nc);
+int __cdecl NAME_CONSTRAINTS_check_CN(X509 *x, NAME_CONSTRAINTS *nc);
 
 DECLARE_ASN1_FUNCTIONS(ACCESS_DESCRIPTION)
 DECLARE_ASN1_FUNCTIONS(AUTHORITY_INFO_ACCESS)
@@ -545,88 +545,88 @@ DECLARE_ASN1_ALLOC_FUNCTIONS(NAME_CONSTRAINTS)
 DECLARE_ASN1_ALLOC_FUNCTIONS(POLICY_CONSTRAINTS)
 DECLARE_ASN1_ITEM(POLICY_CONSTRAINTS)
 
-GENERAL_NAME *a2i_GENERAL_NAME(GENERAL_NAME *out,
+GENERAL_NAME * __cdecl a2i_GENERAL_NAME(GENERAL_NAME *out,
                                const X509V3_EXT_METHOD *method,
                                X509V3_CTX *ctx, int gen_type,
                                const char *value, int is_nc);
 
 # ifdef HEADER_CONF_H
-GENERAL_NAME *v2i_GENERAL_NAME(const X509V3_EXT_METHOD *method,
+GENERAL_NAME * __cdecl v2i_GENERAL_NAME(const X509V3_EXT_METHOD *method,
                                X509V3_CTX *ctx, CONF_VALUE *cnf);
-GENERAL_NAME *v2i_GENERAL_NAME_ex(GENERAL_NAME *out,
+GENERAL_NAME * __cdecl v2i_GENERAL_NAME_ex(GENERAL_NAME *out,
                                   const X509V3_EXT_METHOD *method,
                                   X509V3_CTX *ctx, CONF_VALUE *cnf,
                                   int is_nc);
-void X509V3_conf_free(CONF_VALUE *val);
+void __cdecl X509V3_conf_free(CONF_VALUE *val);
 
-X509_EXTENSION *X509V3_EXT_nconf_nid(CONF *conf, X509V3_CTX *ctx, int ext_nid,
+X509_EXTENSION * __cdecl X509V3_EXT_nconf_nid(CONF *conf, X509V3_CTX *ctx, int ext_nid,
                                      const char *value);
-X509_EXTENSION *X509V3_EXT_nconf(CONF *conf, X509V3_CTX *ctx, const char *name,
+X509_EXTENSION * __cdecl X509V3_EXT_nconf(CONF *conf, X509V3_CTX *ctx, const char *name,
                                  const char *value);
-int X509V3_EXT_add_nconf_sk(CONF *conf, X509V3_CTX *ctx, const char *section,
+int __cdecl X509V3_EXT_add_nconf_sk(CONF *conf, X509V3_CTX *ctx, const char *section,
                             STACK_OF(X509_EXTENSION) **sk);
-int X509V3_EXT_add_nconf(CONF *conf, X509V3_CTX *ctx, const char *section,
+int __cdecl X509V3_EXT_add_nconf(CONF *conf, X509V3_CTX *ctx, const char *section,
                          X509 *cert);
-int X509V3_EXT_REQ_add_nconf(CONF *conf, X509V3_CTX *ctx, const char *section,
+int __cdecl X509V3_EXT_REQ_add_nconf(CONF *conf, X509V3_CTX *ctx, const char *section,
                              X509_REQ *req);
-int X509V3_EXT_CRL_add_nconf(CONF *conf, X509V3_CTX *ctx, const char *section,
+int __cdecl X509V3_EXT_CRL_add_nconf(CONF *conf, X509V3_CTX *ctx, const char *section,
                              X509_CRL *crl);
 
-X509_EXTENSION *X509V3_EXT_conf_nid(LHASH_OF(CONF_VALUE) *conf,
+X509_EXTENSION * __cdecl X509V3_EXT_conf_nid(LHASH_OF(CONF_VALUE) *conf,
                                     X509V3_CTX *ctx, int ext_nid,
                                     const char *value);
-X509_EXTENSION *X509V3_EXT_conf(LHASH_OF(CONF_VALUE) *conf, X509V3_CTX *ctx,
+X509_EXTENSION * __cdecl X509V3_EXT_conf(LHASH_OF(CONF_VALUE) *conf, X509V3_CTX *ctx,
                                 const char *name, const char *value);
-int X509V3_EXT_add_conf(LHASH_OF(CONF_VALUE) *conf, X509V3_CTX *ctx,
+int __cdecl X509V3_EXT_add_conf(LHASH_OF(CONF_VALUE) *conf, X509V3_CTX *ctx,
                         const char *section, X509 *cert);
-int X509V3_EXT_REQ_add_conf(LHASH_OF(CONF_VALUE) *conf, X509V3_CTX *ctx,
+int __cdecl X509V3_EXT_REQ_add_conf(LHASH_OF(CONF_VALUE) *conf, X509V3_CTX *ctx,
                             const char *section, X509_REQ *req);
-int X509V3_EXT_CRL_add_conf(LHASH_OF(CONF_VALUE) *conf, X509V3_CTX *ctx,
+int __cdecl X509V3_EXT_CRL_add_conf(LHASH_OF(CONF_VALUE) *conf, X509V3_CTX *ctx,
                             const char *section, X509_CRL *crl);
 
-int X509V3_add_value_bool_nf(const char *name, int asn1_bool,
+int __cdecl X509V3_add_value_bool_nf(const char *name, int asn1_bool,
                              STACK_OF(CONF_VALUE) **extlist);
-int X509V3_get_value_bool(const CONF_VALUE *value, int *asn1_bool);
-int X509V3_get_value_int(const CONF_VALUE *value, ASN1_INTEGER **aint);
-void X509V3_set_nconf(X509V3_CTX *ctx, CONF *conf);
-void X509V3_set_conf_lhash(X509V3_CTX *ctx, LHASH_OF(CONF_VALUE) *lhash);
+int __cdecl X509V3_get_value_bool(const CONF_VALUE *value, int *asn1_bool);
+int __cdecl X509V3_get_value_int(const CONF_VALUE *value, ASN1_INTEGER **aint);
+void __cdecl X509V3_set_nconf(X509V3_CTX *ctx, CONF *conf);
+void __cdecl X509V3_set_conf_lhash(X509V3_CTX *ctx, LHASH_OF(CONF_VALUE) *lhash);
 # endif
 
-char *X509V3_get_string(X509V3_CTX *ctx, const char *name, const char *section);
-STACK_OF(CONF_VALUE) *X509V3_get_section(X509V3_CTX *ctx, const char *section);
-void X509V3_string_free(X509V3_CTX *ctx, char *str);
-void X509V3_section_free(X509V3_CTX *ctx, STACK_OF(CONF_VALUE) *section);
-void X509V3_set_ctx(X509V3_CTX *ctx, X509 *issuer, X509 *subject,
+char * __cdecl X509V3_get_string(X509V3_CTX *ctx, const char *name, const char *section);
+STACK_OF(CONF_VALUE) * __cdecl X509V3_get_section(X509V3_CTX *ctx, const char *section);
+void __cdecl X509V3_string_free(X509V3_CTX *ctx, char *str);
+void __cdecl X509V3_section_free(X509V3_CTX *ctx, STACK_OF(CONF_VALUE) *section);
+void __cdecl X509V3_set_ctx(X509V3_CTX *ctx, X509 *issuer, X509 *subject,
                     X509_REQ *req, X509_CRL *crl, int flags);
 
-int X509V3_add_value(const char *name, const char *value,
+int __cdecl X509V3_add_value(const char *name, const char *value,
                      STACK_OF(CONF_VALUE) **extlist);
-int X509V3_add_value_uchar(const char *name, const unsigned char *value,
+int __cdecl X509V3_add_value_uchar(const char *name, const unsigned char *value,
                            STACK_OF(CONF_VALUE) **extlist);
-int X509V3_add_value_bool(const char *name, int asn1_bool,
+int __cdecl X509V3_add_value_bool(const char *name, int asn1_bool,
                           STACK_OF(CONF_VALUE) **extlist);
-int X509V3_add_value_int(const char *name, const ASN1_INTEGER *aint,
+int __cdecl X509V3_add_value_int(const char *name, const ASN1_INTEGER *aint,
                          STACK_OF(CONF_VALUE) **extlist);
-char *i2s_ASN1_INTEGER(X509V3_EXT_METHOD *meth, const ASN1_INTEGER *aint);
-ASN1_INTEGER *s2i_ASN1_INTEGER(X509V3_EXT_METHOD *meth, const char *value);
-char *i2s_ASN1_ENUMERATED(X509V3_EXT_METHOD *meth, const ASN1_ENUMERATED *aint);
-char *i2s_ASN1_ENUMERATED_TABLE(X509V3_EXT_METHOD *meth,
+char * __cdecl i2s_ASN1_INTEGER(X509V3_EXT_METHOD *meth, const ASN1_INTEGER *aint);
+ASN1_INTEGER * __cdecl s2i_ASN1_INTEGER(X509V3_EXT_METHOD *meth, const char *value);
+char * __cdecl i2s_ASN1_ENUMERATED(X509V3_EXT_METHOD *meth, const ASN1_ENUMERATED *aint);
+char * __cdecl i2s_ASN1_ENUMERATED_TABLE(X509V3_EXT_METHOD *meth,
                                 const ASN1_ENUMERATED *aint);
-int X509V3_EXT_add(X509V3_EXT_METHOD *ext);
-int X509V3_EXT_add_list(X509V3_EXT_METHOD *extlist);
-int X509V3_EXT_add_alias(int nid_to, int nid_from);
-void X509V3_EXT_cleanup(void);
-
-const X509V3_EXT_METHOD *X509V3_EXT_get(X509_EXTENSION *ext);
-const X509V3_EXT_METHOD *X509V3_EXT_get_nid(int nid);
-int X509V3_add_standard_extensions(void);
-STACK_OF(CONF_VALUE) *X509V3_parse_list(const char *line);
-void *X509V3_EXT_d2i(X509_EXTENSION *ext);
-void *X509V3_get_d2i(const STACK_OF(X509_EXTENSION) *x, int nid, int *crit,
+int __cdecl X509V3_EXT_add(X509V3_EXT_METHOD *ext);
+int __cdecl X509V3_EXT_add_list(X509V3_EXT_METHOD *extlist);
+int __cdecl X509V3_EXT_add_alias(int nid_to, int nid_from);
+void __cdecl X509V3_EXT_cleanup(void);
+
+const X509V3_EXT_METHOD * __cdecl X509V3_EXT_get(X509_EXTENSION *ext);
+const X509V3_EXT_METHOD * __cdecl X509V3_EXT_get_nid(int nid);
+int __cdecl X509V3_add_standard_extensions(void);
+STACK_OF(CONF_VALUE) * __cdecl X509V3_parse_list(const char *line);
+void * __cdecl X509V3_EXT_d2i(X509_EXTENSION *ext);
+void * __cdecl X509V3_get_d2i(const STACK_OF(X509_EXTENSION) *x, int nid, int *crit,
                      int *idx);
 
-X509_EXTENSION *X509V3_EXT_i2d(int ext_nid, int crit, void *ext_struc);
-int X509V3_add1_i2d(STACK_OF(X509_EXTENSION) **x, int nid, void *value,
+X509_EXTENSION * __cdecl X509V3_EXT_i2d(int ext_nid, int crit, void *ext_struc);
+int __cdecl X509V3_add1_i2d(STACK_OF(X509_EXTENSION) **x, int nid, void *value,
                     int crit, unsigned long flags);
 
 #if OPENSSL_API_COMPAT < 0x10100000L
@@ -635,52 +635,52 @@ int X509V3_add1_i2d(STACK_OF(X509_EXTENSION) **x, int nid, void *value,
 # define string_to_hex OPENSSL_hexstr2buf
 #endif
 
-void X509V3_EXT_val_prn(BIO *out, STACK_OF(CONF_VALUE) *val, int indent,
+void __cdecl X509V3_EXT_val_prn(BIO *out, STACK_OF(CONF_VALUE) *val, int indent,
                         int ml);
-int X509V3_EXT_print(BIO *out, X509_EXTENSION *ext, unsigned long flag,
+int __cdecl X509V3_EXT_print(BIO *out, X509_EXTENSION *ext, unsigned long flag,
                      int indent);
 #ifndef OPENSSL_NO_STDIO
-int X509V3_EXT_print_fp(FILE *out, X509_EXTENSION *ext, int flag, int indent);
+int __cdecl X509V3_EXT_print_fp(FILE *out, X509_EXTENSION *ext, int flag, int indent);
 #endif
-int X509V3_extensions_print(BIO *out, const char *title,
+int __cdecl X509V3_extensions_print(BIO *out, const char *title,
                             const STACK_OF(X509_EXTENSION) *exts,
                             unsigned long flag, int indent);
 
-int X509_check_ca(X509 *x);
-int X509_check_purpose(X509 *x, int id, int ca);
-int X509_supported_extension(X509_EXTENSION *ex);
-int X509_PURPOSE_set(int *p, int purpose);
-int X509_check_issued(X509 *issuer, X509 *subject);
-int X509_check_akid(X509 *issuer, AUTHORITY_KEYID *akid);
-void X509_set_proxy_flag(X509 *x);
-void X509_set_proxy_pathlen(X509 *x, long l);
-long X509_get_proxy_pathlen(X509 *x);
-
-uint32_t X509_get_extension_flags(X509 *x);
-uint32_t X509_get_key_usage(X509 *x);
-uint32_t X509_get_extended_key_usage(X509 *x);
-const ASN1_OCTET_STRING *X509_get0_subject_key_id(X509 *x);
-const ASN1_OCTET_STRING *X509_get0_authority_key_id(X509 *x);
-const GENERAL_NAMES *X509_get0_authority_issuer(X509 *x);
-const ASN1_INTEGER *X509_get0_authority_serial(X509 *x);
-
-int X509_PURPOSE_get_count(void);
-X509_PURPOSE *X509_PURPOSE_get0(int idx);
-int X509_PURPOSE_get_by_sname(const char *sname);
-int X509_PURPOSE_get_by_id(int id);
-int X509_PURPOSE_add(int id, int trust, int flags,
+int __cdecl X509_check_ca(X509 *x);
+int __cdecl X509_check_purpose(X509 *x, int id, int ca);
+int __cdecl X509_supported_extension(X509_EXTENSION *ex);
+int __cdecl X509_PURPOSE_set(int *p, int purpose);
+int __cdecl X509_check_issued(X509 *issuer, X509 *subject);
+int __cdecl X509_check_akid(X509 *issuer, AUTHORITY_KEYID *akid);
+void __cdecl X509_set_proxy_flag(X509 *x);
+void __cdecl X509_set_proxy_pathlen(X509 *x, long l);
+long __cdecl X509_get_proxy_pathlen(X509 *x);
+
+uint32_t __cdecl X509_get_extension_flags(X509 *x);
+uint32_t __cdecl X509_get_key_usage(X509 *x);
+uint32_t __cdecl X509_get_extended_key_usage(X509 *x);
+const ASN1_OCTET_STRING * __cdecl X509_get0_subject_key_id(X509 *x);
+const ASN1_OCTET_STRING * __cdecl X509_get0_authority_key_id(X509 *x);
+const GENERAL_NAMES * __cdecl X509_get0_authority_issuer(X509 *x);
+const ASN1_INTEGER * __cdecl X509_get0_authority_serial(X509 *x);
+
+int __cdecl X509_PURPOSE_get_count(void);
+X509_PURPOSE * __cdecl X509_PURPOSE_get0(int idx);
+int __cdecl X509_PURPOSE_get_by_sname(const char *sname);
+int __cdecl X509_PURPOSE_get_by_id(int id);
+int __cdecl X509_PURPOSE_add(int id, int trust, int flags,
                      int (*ck) (const X509_PURPOSE *, const X509 *, int),
                      const char *name, const char *sname, void *arg);
-char *X509_PURPOSE_get0_name(const X509_PURPOSE *xp);
-char *X509_PURPOSE_get0_sname(const X509_PURPOSE *xp);
-int X509_PURPOSE_get_trust(const X509_PURPOSE *xp);
-void X509_PURPOSE_cleanup(void);
-int X509_PURPOSE_get_id(const X509_PURPOSE *);
-
-STACK_OF(OPENSSL_STRING) *X509_get1_email(X509 *x);
-STACK_OF(OPENSSL_STRING) *X509_REQ_get1_email(X509_REQ *x);
-void X509_email_free(STACK_OF(OPENSSL_STRING) *sk);
-STACK_OF(OPENSSL_STRING) *X509_get1_ocsp(X509 *x);
+char * __cdecl X509_PURPOSE_get0_name(const X509_PURPOSE *xp);
+char * __cdecl X509_PURPOSE_get0_sname(const X509_PURPOSE *xp);
+int __cdecl X509_PURPOSE_get_trust(const X509_PURPOSE *xp);
+void __cdecl X509_PURPOSE_cleanup(void);
+int __cdecl X509_PURPOSE_get_id(const X509_PURPOSE *);
+
+STACK_OF(OPENSSL_STRING) * __cdecl X509_get1_email(X509 *x);
+STACK_OF(OPENSSL_STRING) * __cdecl X509_REQ_get1_email(X509_REQ *x);
+void __cdecl X509_email_free(STACK_OF(OPENSSL_STRING) *sk);
+STACK_OF(OPENSSL_STRING) * __cdecl X509_get1_ocsp(X509 *x);
 /* Flags for X509_check_* functions */
 
 /*
@@ -704,20 +704,20 @@ STACK_OF(OPENSSL_STRING) *X509_get1_ocsp(X509 *x);
  */
 # define _X509_CHECK_FLAG_DOT_SUBDOMAINS 0x8000
 
-int X509_check_host(X509 *x, const char *chk, size_t chklen,
+int __cdecl X509_check_host(X509 *x, const char *chk, size_t chklen,
                     unsigned int flags, char **peername);
-int X509_check_email(X509 *x, const char *chk, size_t chklen,
+int __cdecl X509_check_email(X509 *x, const char *chk, size_t chklen,
                      unsigned int flags);
-int X509_check_ip(X509 *x, const unsigned char *chk, size_t chklen,
+int __cdecl X509_check_ip(X509 *x, const unsigned char *chk, size_t chklen,
                   unsigned int flags);
-int X509_check_ip_asc(X509 *x, const char *ipasc, unsigned int flags);
+int __cdecl X509_check_ip_asc(X509 *x, const char *ipasc, unsigned int flags);
 
-ASN1_OCTET_STRING *a2i_IPADDRESS(const char *ipasc);
-ASN1_OCTET_STRING *a2i_IPADDRESS_NC(const char *ipasc);
-int X509V3_NAME_from_section(X509_NAME *nm, STACK_OF(CONF_VALUE) *dn_sk,
+ASN1_OCTET_STRING * __cdecl a2i_IPADDRESS(const char *ipasc);
+ASN1_OCTET_STRING * __cdecl a2i_IPADDRESS_NC(const char *ipasc);
+int __cdecl X509V3_NAME_from_section(X509_NAME *nm, STACK_OF(CONF_VALUE) *dn_sk,
                              unsigned long chtype);
 
-void X509_POLICY_NODE_print(BIO *out, X509_POLICY_NODE *node, int indent);
+void __cdecl X509_POLICY_NODE_print(BIO *out, X509_POLICY_NODE *node, int indent);
 DEFINE_STACK_OF(X509_POLICY_NODE)
 
 #ifndef OPENSSL_NO_RFC3779
@@ -821,47 +821,47 @@ DECLARE_ASN1_FUNCTIONS(IPAddressFamily)
  * since some of the encodings (particularly for IP address prefixes
  * and ranges) are a bit tedious to work with directly.
  */
-int X509v3_asid_add_inherit(ASIdentifiers *asid, int which);
-int X509v3_asid_add_id_or_range(ASIdentifiers *asid, int which,
+int __cdecl X509v3_asid_add_inherit(ASIdentifiers *asid, int which);
+int __cdecl X509v3_asid_add_id_or_range(ASIdentifiers *asid, int which,
                                 ASN1_INTEGER *min, ASN1_INTEGER *max);
-int X509v3_addr_add_inherit(IPAddrBlocks *addr,
+int __cdecl X509v3_addr_add_inherit(IPAddrBlocks *addr,
                             const unsigned afi, const unsigned *safi);
-int X509v3_addr_add_prefix(IPAddrBlocks *addr,
+int __cdecl X509v3_addr_add_prefix(IPAddrBlocks *addr,
                            const unsigned afi, const unsigned *safi,
                            unsigned char *a, const int prefixlen);
-int X509v3_addr_add_range(IPAddrBlocks *addr,
+int __cdecl X509v3_addr_add_range(IPAddrBlocks *addr,
                           const unsigned afi, const unsigned *safi,
                           unsigned char *min, unsigned char *max);
-unsigned X509v3_addr_get_afi(const IPAddressFamily *f);
-int X509v3_addr_get_range(IPAddressOrRange *aor, const unsigned afi,
+unsigned __cdecl X509v3_addr_get_afi(const IPAddressFamily *f);
+int __cdecl X509v3_addr_get_range(IPAddressOrRange *aor, const unsigned afi,
                           unsigned char *min, unsigned char *max,
                           const int length);
 
 /*
  * Canonical forms.
  */
-int X509v3_asid_is_canonical(ASIdentifiers *asid);
-int X509v3_addr_is_canonical(IPAddrBlocks *addr);
-int X509v3_asid_canonize(ASIdentifiers *asid);
-int X509v3_addr_canonize(IPAddrBlocks *addr);
+int __cdecl X509v3_asid_is_canonical(ASIdentifiers *asid);
+int __cdecl X509v3_addr_is_canonical(IPAddrBlocks *addr);
+int __cdecl X509v3_asid_canonize(ASIdentifiers *asid);
+int __cdecl X509v3_addr_canonize(IPAddrBlocks *addr);
 
 /*
  * Tests for inheritance and containment.
  */
-int X509v3_asid_inherits(ASIdentifiers *asid);
-int X509v3_addr_inherits(IPAddrBlocks *addr);
-int X509v3_asid_subset(ASIdentifiers *a, ASIdentifiers *b);
-int X509v3_addr_subset(IPAddrBlocks *a, IPAddrBlocks *b);
+int __cdecl X509v3_asid_inherits(ASIdentifiers *asid);
+int __cdecl X509v3_addr_inherits(IPAddrBlocks *addr);
+int __cdecl X509v3_asid_subset(ASIdentifiers *a, ASIdentifiers *b);
+int __cdecl X509v3_addr_subset(IPAddrBlocks *a, IPAddrBlocks *b);
 
 /*
  * Check whether RFC 3779 extensions nest properly in chains.
  */
-int X509v3_asid_validate_path(X509_STORE_CTX *);
-int X509v3_addr_validate_path(X509_STORE_CTX *);
-int X509v3_asid_validate_resource_set(STACK_OF(X509) *chain,
+int __cdecl X509v3_asid_validate_path(X509_STORE_CTX *);
+int __cdecl X509v3_addr_validate_path(X509_STORE_CTX *);
+int __cdecl X509v3_asid_validate_resource_set(STACK_OF(X509) *chain,
                                       ASIdentifiers *ext,
                                       int allow_inheritance);
-int X509v3_addr_validate_resource_set(STACK_OF(X509) *chain,
+int __cdecl X509v3_addr_validate_resource_set(STACK_OF(X509) *chain,
                                       IPAddrBlocks *ext, int allow_inheritance);
 
 #endif                         /* OPENSSL_NO_RFC3779 */
@@ -883,52 +883,52 @@ DEFINE_STACK_OF(ADMISSIONS)
 DEFINE_STACK_OF(PROFESSION_INFO)
 typedef STACK_OF(PROFESSION_INFO) PROFESSION_INFOS;
 
-const ASN1_OBJECT *NAMING_AUTHORITY_get0_authorityId(
+const ASN1_OBJECT * __cdecl NAMING_AUTHORITY_get0_authorityId(
     const NAMING_AUTHORITY *n);
-const ASN1_IA5STRING *NAMING_AUTHORITY_get0_authorityURL(
+const ASN1_IA5STRING * __cdecl NAMING_AUTHORITY_get0_authorityURL(
     const NAMING_AUTHORITY *n);
-const ASN1_STRING *NAMING_AUTHORITY_get0_authorityText(
+const ASN1_STRING * __cdecl NAMING_AUTHORITY_get0_authorityText(
     const NAMING_AUTHORITY *n);
-void NAMING_AUTHORITY_set0_authorityId(NAMING_AUTHORITY *n,
+void __cdecl NAMING_AUTHORITY_set0_authorityId(NAMING_AUTHORITY *n,
     ASN1_OBJECT* namingAuthorityId);
-void NAMING_AUTHORITY_set0_authorityURL(NAMING_AUTHORITY *n,
+void __cdecl NAMING_AUTHORITY_set0_authorityURL(NAMING_AUTHORITY *n,
     ASN1_IA5STRING* namingAuthorityUrl);
-void NAMING_AUTHORITY_set0_authorityText(NAMING_AUTHORITY *n,
+void __cdecl NAMING_AUTHORITY_set0_authorityText(NAMING_AUTHORITY *n,
     ASN1_STRING* namingAuthorityText);
 
-const GENERAL_NAME *ADMISSION_SYNTAX_get0_admissionAuthority(
+const GENERAL_NAME * __cdecl ADMISSION_SYNTAX_get0_admissionAuthority(
     const ADMISSION_SYNTAX *as);
-void ADMISSION_SYNTAX_set0_admissionAuthority(
+void __cdecl ADMISSION_SYNTAX_set0_admissionAuthority(
     ADMISSION_SYNTAX *as, GENERAL_NAME *aa);
-const STACK_OF(ADMISSIONS) *ADMISSION_SYNTAX_get0_contentsOfAdmissions(
+const STACK_OF(ADMISSIONS) * __cdecl ADMISSION_SYNTAX_get0_contentsOfAdmissions(
     const ADMISSION_SYNTAX *as);
-void ADMISSION_SYNTAX_set0_contentsOfAdmissions(
+void __cdecl ADMISSION_SYNTAX_set0_contentsOfAdmissions(
     ADMISSION_SYNTAX *as, STACK_OF(ADMISSIONS) *a);
-const GENERAL_NAME *ADMISSIONS_get0_admissionAuthority(const ADMISSIONS *a);
-void ADMISSIONS_set0_admissionAuthority(ADMISSIONS *a, GENERAL_NAME *aa);
-const NAMING_AUTHORITY *ADMISSIONS_get0_namingAuthority(const ADMISSIONS *a);
-void ADMISSIONS_set0_namingAuthority(ADMISSIONS *a, NAMING_AUTHORITY *na);
-const PROFESSION_INFOS *ADMISSIONS_get0_professionInfos(const ADMISSIONS *a);
-void ADMISSIONS_set0_professionInfos(ADMISSIONS *a, PROFESSION_INFOS *pi);
-const ASN1_OCTET_STRING *PROFESSION_INFO_get0_addProfessionInfo(
+const GENERAL_NAME * __cdecl ADMISSIONS_get0_admissionAuthority(const ADMISSIONS *a);
+void __cdecl ADMISSIONS_set0_admissionAuthority(ADMISSIONS *a, GENERAL_NAME *aa);
+const NAMING_AUTHORITY * __cdecl ADMISSIONS_get0_namingAuthority(const ADMISSIONS *a);
+void __cdecl ADMISSIONS_set0_namingAuthority(ADMISSIONS *a, NAMING_AUTHORITY *na);
+const PROFESSION_INFOS * __cdecl ADMISSIONS_get0_professionInfos(const ADMISSIONS *a);
+void __cdecl ADMISSIONS_set0_professionInfos(ADMISSIONS *a, PROFESSION_INFOS *pi);
+const ASN1_OCTET_STRING * __cdecl PROFESSION_INFO_get0_addProfessionInfo(
     const PROFESSION_INFO *pi);
-void PROFESSION_INFO_set0_addProfessionInfo(
+void __cdecl PROFESSION_INFO_set0_addProfessionInfo(
     PROFESSION_INFO *pi, ASN1_OCTET_STRING *aos);
-const NAMING_AUTHORITY *PROFESSION_INFO_get0_namingAuthority(
+const NAMING_AUTHORITY * __cdecl PROFESSION_INFO_get0_namingAuthority(
     const PROFESSION_INFO *pi);
-void PROFESSION_INFO_set0_namingAuthority(
+void __cdecl PROFESSION_INFO_set0_namingAuthority(
     PROFESSION_INFO *pi, NAMING_AUTHORITY *na);
-const STACK_OF(ASN1_STRING) *PROFESSION_INFO_get0_professionItems(
+const STACK_OF(ASN1_STRING) * __cdecl PROFESSION_INFO_get0_professionItems(
     const PROFESSION_INFO *pi);
-void PROFESSION_INFO_set0_professionItems(
+void __cdecl PROFESSION_INFO_set0_professionItems(
     PROFESSION_INFO *pi, STACK_OF(ASN1_STRING) *as);
-const STACK_OF(ASN1_OBJECT) *PROFESSION_INFO_get0_professionOIDs(
+const STACK_OF(ASN1_OBJECT) * __cdecl PROFESSION_INFO_get0_professionOIDs(
     const PROFESSION_INFO *pi);
-void PROFESSION_INFO_set0_professionOIDs(
+void __cdecl PROFESSION_INFO_set0_professionOIDs(
     PROFESSION_INFO *pi, STACK_OF(ASN1_OBJECT) *po);
-const ASN1_PRINTABLESTRING *PROFESSION_INFO_get0_registrationNumber(
+const ASN1_PRINTABLESTRING * __cdecl PROFESSION_INFO_get0_registrationNumber(
     const PROFESSION_INFO *pi);
-void PROFESSION_INFO_set0_registrationNumber(
+void __cdecl PROFESSION_INFO_set0_registrationNumber(
     PROFESSION_INFO *pi, ASN1_PRINTABLESTRING *rn);
 
 # ifdef  __cplusplus
diff --git a/include/openssl/x509v3err.h b/include/openssl/x509v3err.h
index 5f25442f12..3c20c7f1a2 100644
--- a/include/openssl/x509v3err.h
+++ b/include/openssl/x509v3err.h
@@ -18,7 +18,7 @@
 # ifdef  __cplusplus
 extern "C"
 # endif
-int ERR_load_X509V3_strings(void);
+int __cdecl ERR_load_X509V3_strings(void);
 
 /*
  * X509V3 function codes.
diff --git a/ms/applink.c b/ms/applink.c
index 238dbff35b..52cb19477b 100644
--- a/ms/applink.c
+++ b/ms/applink.c
@@ -38,42 +38,42 @@
 # include <io.h>
 # include <fcntl.h>
 
-static void *app_stdin(void)
+static void * __cdecl app_stdin(void)
 {
     return stdin;
 }
 
-static void *app_stdout(void)
+static void * __cdecl app_stdout(void)
 {
     return stdout;
 }
 
-static void *app_stderr(void)
+static void * __cdecl app_stderr(void)
 {
     return stderr;
 }
 
-static int app_feof(FILE *fp)
+static int __cdecl app_feof(FILE *fp)
 {
     return feof(fp);
 }
 
-static int app_ferror(FILE *fp)
+static int __cdecl app_ferror(FILE *fp)
 {
     return ferror(fp);
 }
 
-static void app_clearerr(FILE *fp)
+static void __cdecl app_clearerr(FILE *fp)
 {
     clearerr(fp);
 }
 
-static int app_fileno(FILE *fp)
+static int __cdecl app_fileno(FILE *fp)
 {
     return _fileno(fp);
 }
 
-static int app_fsetmod(FILE *fp, char mod)
+static int __cdecl app_fsetmod(FILE *fp, char mod)
 {
     return _setmode(_fileno(fp), mod == 'b' ? _O_BINARY : _O_TEXT);
 }
diff --git a/ms/uplink.c b/ms/uplink.c
index cd4e96b780..8156952d93 100644
--- a/ms/uplink.c
+++ b/ms/uplink.c
@@ -31,7 +31,7 @@ static void unimplemented(void)
     TerminateProcess(GetCurrentProcess(), 1);
 }
 
-void OPENSSL_Uplink(volatile void **table, int index)
+void __cdecl OPENSSL_Uplink(volatile void **table, int index)
 {
     static HMODULE volatile apphandle = NULL;
     static void **volatile applinktable = NULL;
diff --git a/ms/uplink.h b/ms/uplink.h
index f6cd0380ae..1f0d75cc55 100644
--- a/ms/uplink.h
+++ b/ms/uplink.h
@@ -12,27 +12,27 @@
 
 extern void *OPENSSL_UplinkTable[];
 
-#define UP_stdin  (*(void *(*)(void))OPENSSL_UplinkTable[APPLINK_STDIN])()
-#define UP_stdout (*(void *(*)(void))OPENSSL_UplinkTable[APPLINK_STDOUT])()
-#define UP_stderr (*(void *(*)(void))OPENSSL_UplinkTable[APPLINK_STDERR])()
-#define UP_fprintf (*(int (*)(void *,const char *,...))OPENSSL_UplinkTable[APPLINK_FPRINTF])
-#define UP_fgets  (*(char *(*)(char *,int,void *))OPENSSL_UplinkTable[APPLINK_FGETS])
-#define UP_fread  (*(size_t (*)(void *,size_t,size_t,void *))OPENSSL_UplinkTable[APPLINK_FREAD])
-#define UP_fwrite (*(size_t (*)(const void *,size_t,size_t,void *))OPENSSL_UplinkTable[APPLINK_FWRITE])
-#define UP_fsetmod (*(int (*)(void *,char))OPENSSL_UplinkTable[APPLINK_FSETMOD])
-#define UP_feof   (*(int (*)(void *))OPENSSL_UplinkTable[APPLINK_FEOF])
-#define UP_fclose (*(int (*)(void *))OPENSSL_UplinkTable[APPLINK_FCLOSE])
+#define UP_stdin  (*(void *(__cdecl *)(void))OPENSSL_UplinkTable[APPLINK_STDIN])()
+#define UP_stdout (*(void *(__cdecl *)(void))OPENSSL_UplinkTable[APPLINK_STDOUT])()
+#define UP_stderr (*(void *(__cdecl *)(void))OPENSSL_UplinkTable[APPLINK_STDERR])()
+#define UP_fprintf (*(int (__cdecl *)(void *,const char *,...))OPENSSL_UplinkTable[APPLINK_FPRINTF])
+#define UP_fgets  (*(char *(__cdecl *)(char *,int,void *))OPENSSL_UplinkTable[APPLINK_FGETS])
+#define UP_fread  (*(size_t (__cdecl *)(void *,size_t,size_t,void *))OPENSSL_UplinkTable[APPLINK_FREAD])
+#define UP_fwrite (*(size_t (__cdecl *)(const void *,size_t,size_t,void *))OPENSSL_UplinkTable[APPLINK_FWRITE])
+#define UP_fsetmod (*(int (__cdecl *)(void *,char))OPENSSL_UplinkTable[APPLINK_FSETMOD])
+#define UP_feof   (*(int (__cdecl *)(void *))OPENSSL_UplinkTable[APPLINK_FEOF])
+#define UP_fclose (*(int (__cdecl *)(void *))OPENSSL_UplinkTable[APPLINK_FCLOSE])
 
-#define UP_fopen  (*(void *(*)(const char *,const char *))OPENSSL_UplinkTable[APPLINK_FOPEN])
-#define UP_fseek  (*(int (*)(void *,long,int))OPENSSL_UplinkTable[APPLINK_FSEEK])
-#define UP_ftell  (*(long (*)(void *))OPENSSL_UplinkTable[APPLINK_FTELL])
-#define UP_fflush (*(int (*)(void *))OPENSSL_UplinkTable[APPLINK_FFLUSH])
-#define UP_ferror (*(int (*)(void *))OPENSSL_UplinkTable[APPLINK_FERROR])
-#define UP_clearerr (*(void (*)(void *))OPENSSL_UplinkTable[APPLINK_CLEARERR])
-#define UP_fileno (*(int (*)(void *))OPENSSL_UplinkTable[APPLINK_FILENO])
+#define UP_fopen  (*(void *(__cdecl *)(const char *,const char *))OPENSSL_UplinkTable[APPLINK_FOPEN])
+#define UP_fseek  (*(int (__cdecl *)(void *,long,int))OPENSSL_UplinkTable[APPLINK_FSEEK])
+#define UP_ftell  (*(long (__cdecl *)(void *))OPENSSL_UplinkTable[APPLINK_FTELL])
+#define UP_fflush (*(int (__cdecl *)(void *))OPENSSL_UplinkTable[APPLINK_FFLUSH])
+#define UP_ferror (*(int (__cdecl *)(void *))OPENSSL_UplinkTable[APPLINK_FERROR])
+#define UP_clearerr (*(void (__cdecl *)(void *))OPENSSL_UplinkTable[APPLINK_CLEARERR])
+#define UP_fileno (*(int (__cdecl *)(void *))OPENSSL_UplinkTable[APPLINK_FILENO])
 
-#define UP_open   (*(int (*)(const char *,int,...))OPENSSL_UplinkTable[APPLINK_OPEN])
-#define UP_read   (*(ossl_ssize_t (*)(int,void *,size_t))OPENSSL_UplinkTable[APPLINK_READ])
-#define UP_write  (*(ossl_ssize_t (*)(int,const void *,size_t))OPENSSL_UplinkTable[APPLINK_WRITE])
-#define UP_lseek  (*(long (*)(int,long,int))OPENSSL_UplinkTable[APPLINK_LSEEK])
-#define UP_close  (*(int (*)(int))OPENSSL_UplinkTable[APPLINK_CLOSE])
+#define UP_open   (*(int (__cdecl *)(const char *,int,...))OPENSSL_UplinkTable[APPLINK_OPEN])
+#define UP_read   (*(ossl_ssize_t (__cdecl *)(int,void *,size_t))OPENSSL_UplinkTable[APPLINK_READ])
+#define UP_write  (*(ossl_ssize_t (__cdecl *)(int,const void *,size_t))OPENSSL_UplinkTable[APPLINK_WRITE])
+#define UP_lseek  (*(long (__cdecl *)(int,long,int))OPENSSL_UplinkTable[APPLINK_LSEEK])
+#define UP_close  (*(int (__cdecl *)(int))OPENSSL_UplinkTable[APPLINK_CLOSE])
diff --git a/ssl/bio_ssl.c b/ssl/bio_ssl.c
index d1876d8b8c..05c30d7379 100644
--- a/ssl/bio_ssl.c
+++ b/ssl/bio_ssl.c
@@ -16,13 +16,13 @@
 #include <openssl/err.h>
 #include "ssl_locl.h"
 
-static int ssl_write(BIO *h, const char *buf, size_t size, size_t *written);
-static int ssl_read(BIO *b, char *buf, size_t size, size_t *readbytes);
-static int ssl_puts(BIO *h, const char *str);
-static long ssl_ctrl(BIO *h, int cmd, long arg1, void *arg2);
-static int ssl_new(BIO *h);
-static int ssl_free(BIO *data);
-static long ssl_callback_ctrl(BIO *h, int cmd, BIO_info_cb *fp);
+static int __cdecl ssl_write(BIO *h, const char *buf, size_t size, size_t *written);
+static int __cdecl ssl_read(BIO *b, char *buf, size_t size, size_t *readbytes);
+static int __cdecl ssl_puts(BIO *h, const char *str);
+static long __cdecl ssl_ctrl(BIO *h, int cmd, long arg1, void *arg2);
+static int __cdecl ssl_new(BIO *h);
+static int __cdecl ssl_free(BIO *data);
+static long __cdecl ssl_callback_ctrl(BIO *h, int cmd, BIO_info_cb *fp);
 typedef struct bio_ssl_st {
     SSL *ssl;                   /* The ssl handle :-) */
     /* re-negotiate every time the total number of bytes is this size */
@@ -48,12 +48,12 @@ static const BIO_METHOD methods_sslp = {
     ssl_callback_ctrl,
 };
 
-const BIO_METHOD *BIO_f_ssl(void)
+const BIO_METHOD * __cdecl BIO_f_ssl(void)
 {
     return &methods_sslp;
 }
 
-static int ssl_new(BIO *bi)
+static int __cdecl ssl_new(BIO *bi)
 {
     BIO_SSL *bs = OPENSSL_zalloc(sizeof(*bs));
 
@@ -69,7 +69,7 @@ static int ssl_new(BIO *bi)
     return 1;
 }
 
-static int ssl_free(BIO *a)
+static int __cdecl ssl_free(BIO *a)
 {
     BIO_SSL *bs;
 
@@ -89,7 +89,7 @@ static int ssl_free(BIO *a)
     return 1;
 }
 
-static int ssl_read(BIO *b, char *buf, size_t size, size_t *readbytes)
+static int __cdecl ssl_read(BIO *b, char *buf, size_t size, size_t *readbytes)
 {
     int ret = 1;
     BIO_SSL *sb;
@@ -159,7 +159,7 @@ static int ssl_read(BIO *b, char *buf, size_t size, size_t *readbytes)
     return ret;
 }
 
-static int ssl_write(BIO *b, const char *buf, size_t size, size_t *written)
+static int __cdecl ssl_write(BIO *b, const char *buf, size_t size, size_t *written)
 {
     int ret, r = 0;
     int retry_reason = 0;
@@ -221,7 +221,7 @@ static int ssl_write(BIO *b, const char *buf, size_t size, size_t *written)
     return ret;
 }
 
-static long ssl_ctrl(BIO *b, int cmd, long num, void *ptr)
+static long __cdecl ssl_ctrl(BIO *b, int cmd, long num, void *ptr)
 {
     SSL **sslp, *ssl;
     BIO_SSL *bs, *dbs;
@@ -390,7 +390,7 @@ static long ssl_ctrl(BIO *b, int cmd, long num, void *ptr)
     return ret;
 }
 
-static long ssl_callback_ctrl(BIO *b, int cmd, BIO_info_cb *fp)
+static long __cdecl ssl_callback_ctrl(BIO *b, int cmd, BIO_info_cb *fp)
 {
     SSL *ssl;
     BIO_SSL *bs;
@@ -409,7 +409,7 @@ static long ssl_callback_ctrl(BIO *b, int cmd, BIO_info_cb *fp)
     return ret;
 }
 
-static int ssl_puts(BIO *bp, const char *str)
+static int __cdecl ssl_puts(BIO *bp, const char *str)
 {
     int n, ret;
 
@@ -418,7 +418,7 @@ static int ssl_puts(BIO *bp, const char *str)
     return ret;
 }
 
-BIO *BIO_new_buffer_ssl_connect(SSL_CTX *ctx)
+BIO * __cdecl BIO_new_buffer_ssl_connect(SSL_CTX *ctx)
 {
 #ifndef OPENSSL_NO_SOCK
     BIO *ret = NULL, *buf = NULL, *ssl = NULL;
@@ -437,7 +437,7 @@ BIO *BIO_new_buffer_ssl_connect(SSL_CTX *ctx)
     return NULL;
 }
 
-BIO *BIO_new_ssl_connect(SSL_CTX *ctx)
+BIO * __cdecl BIO_new_ssl_connect(SSL_CTX *ctx)
 {
 #ifndef OPENSSL_NO_SOCK
     BIO *ret = NULL, *con = NULL, *ssl = NULL;
@@ -455,7 +455,7 @@ BIO *BIO_new_ssl_connect(SSL_CTX *ctx)
     return NULL;
 }
 
-BIO *BIO_new_ssl(SSL_CTX *ctx, int client)
+BIO * __cdecl BIO_new_ssl(SSL_CTX *ctx, int client)
 {
     BIO *ret;
     SSL *ssl;
@@ -475,7 +475,7 @@ BIO *BIO_new_ssl(SSL_CTX *ctx, int client)
     return ret;
 }
 
-int BIO_ssl_copy_session_id(BIO *t, BIO *f)
+int __cdecl BIO_ssl_copy_session_id(BIO *t, BIO *f)
 {
     BIO_SSL *tdata, *fdata;
     t = BIO_find_type(t, BIO_TYPE_SSL);
@@ -491,7 +491,7 @@ int BIO_ssl_copy_session_id(BIO *t, BIO *f)
     return 1;
 }
 
-void BIO_ssl_shutdown(BIO *b)
+void __cdecl BIO_ssl_shutdown(BIO *b)
 {
     BIO_SSL *bdata;
 
diff --git a/ssl/d1_lib.c b/ssl/d1_lib.c
index fcda327547..a8ad58fff0 100644
--- a/ssl/d1_lib.c
+++ b/ssl/d1_lib.c
@@ -14,7 +14,7 @@
 #include "ssl_locl.h"
 
 static void get_current_time(struct timeval *t);
-static int dtls1_handshake_write(SSL *s);
+static int __cdecl dtls1_handshake_write(SSL *s);
 static size_t dtls1_link_min_mtu(void);
 
 /* XDTLS:  figure out the right values */
@@ -55,7 +55,7 @@ const SSL3_ENC_METHOD DTLSv1_2_enc_data = {
     dtls1_handshake_write
 };
 
-long dtls1_default_timeout(void)
+long __cdecl dtls1_default_timeout(void)
 {
     /*
      * 2 hours, the 24 hours mentioned in the DTLSv1 spec is way too long for
@@ -64,7 +64,7 @@ long dtls1_default_timeout(void)
     return (60 * 60 * 2);
 }
 
-int dtls1_new(SSL *s)
+int __cdecl dtls1_new(SSL *s)
 {
     DTLS1_STATE *d1;
 
@@ -111,7 +111,7 @@ static void dtls1_clear_queues(SSL *s)
     dtls1_clear_sent_buffer(s);
 }
 
-void dtls1_clear_received_buffer(SSL *s)
+void __cdecl dtls1_clear_received_buffer(SSL *s)
 {
     pitem *item = NULL;
     hm_fragment *frag = NULL;
@@ -123,7 +123,7 @@ void dtls1_clear_received_buffer(SSL *s)
     }
 }
 
-void dtls1_clear_sent_buffer(SSL *s)
+void __cdecl dtls1_clear_sent_buffer(SSL *s)
 {
     pitem *item = NULL;
     hm_fragment *frag = NULL;
@@ -136,7 +136,7 @@ void dtls1_clear_sent_buffer(SSL *s)
 }
 
 
-void dtls1_free(SSL *s)
+void __cdecl dtls1_free(SSL *s)
 {
     DTLS_RECORD_LAYER_free(&s->rlayer);
 
@@ -151,7 +151,7 @@ void dtls1_free(SSL *s)
     s->d1 = NULL;
 }
 
-int dtls1_clear(SSL *s)
+int __cdecl dtls1_clear(SSL *s)
 {
     pqueue *buffered_messages;
     pqueue *sent_messages;
@@ -203,7 +203,7 @@ int dtls1_clear(SSL *s)
     return 1;
 }
 
-long dtls1_ctrl(SSL *s, int cmd, long larg, void *parg)
+long __cdecl dtls1_ctrl(SSL *s, int cmd, long larg, void *parg)
 {
     int ret = 0;
 
@@ -239,7 +239,7 @@ long dtls1_ctrl(SSL *s, int cmd, long larg, void *parg)
     return ret;
 }
 
-void dtls1_start_timer(SSL *s)
+void __cdecl dtls1_start_timer(SSL *s)
 {
     unsigned int sec, usec;
 
@@ -283,7 +283,7 @@ void dtls1_start_timer(SSL *s)
              &(s->d1->next_timeout));
 }
 
-struct timeval *dtls1_get_timeout(SSL *s, struct timeval *timeleft)
+struct timeval * __cdecl dtls1_get_timeout(SSL *s, struct timeval *timeleft)
 {
     struct timeval timenow;
 
@@ -323,7 +323,7 @@ struct timeval *dtls1_get_timeout(SSL *s, struct timeval *timeleft)
     return timeleft;
 }
 
-int dtls1_is_timer_expired(SSL *s)
+int __cdecl dtls1_is_timer_expired(SSL *s)
 {
     struct timeval timeleft;
 
@@ -341,7 +341,7 @@ int dtls1_is_timer_expired(SSL *s)
     return 1;
 }
 
-void dtls1_double_timeout(SSL *s)
+void __cdecl dtls1_double_timeout(SSL *s)
 {
     s->d1->timeout_duration_us *= 2;
     if (s->d1->timeout_duration_us > 60000000)
@@ -349,7 +349,7 @@ void dtls1_double_timeout(SSL *s)
     dtls1_start_timer(s);
 }
 
-void dtls1_stop_timer(SSL *s)
+void __cdecl dtls1_stop_timer(SSL *s)
 {
     /* Reset everything */
     memset(&s->d1->timeout, 0, sizeof(s->d1->timeout));
@@ -361,7 +361,7 @@ void dtls1_stop_timer(SSL *s)
     dtls1_clear_sent_buffer(s);
 }
 
-int dtls1_check_timeout_num(SSL *s)
+int __cdecl dtls1_check_timeout_num(SSL *s)
 {
     size_t mtu;
 
@@ -386,7 +386,7 @@ int dtls1_check_timeout_num(SSL *s)
     return 0;
 }
 
-int dtls1_handle_timeout(SSL *s)
+int __cdecl dtls1_handle_timeout(SSL *s)
 {
     /* if no timer is expired, don't do anything */
     if (!dtls1_is_timer_expired(s)) {
@@ -443,7 +443,7 @@ static void get_current_time(struct timeval *t)
 #define LISTEN_SEND_VERIFY_REQUEST  1
 
 #ifndef OPENSSL_NO_SOCK
-int DTLSv1_listen(SSL *s, BIO_ADDR *client)
+int __cdecl DTLSv1_listen(SSL *s, BIO_ADDR *client)
 {
     int next, n, ret = 0;
     unsigned char cookie[DTLS1_COOKIE_LENGTH];
@@ -859,12 +859,12 @@ int DTLSv1_listen(SSL *s, BIO_ADDR *client)
 }
 #endif
 
-static int dtls1_handshake_write(SSL *s)
+static int __cdecl dtls1_handshake_write(SSL *s)
 {
     return dtls1_do_write(s, SSL3_RT_HANDSHAKE);
 }
 
-int dtls1_shutdown(SSL *s)
+int __cdecl dtls1_shutdown(SSL *s)
 {
     int ret;
 #ifndef OPENSSL_NO_SCTP
@@ -889,7 +889,7 @@ int dtls1_shutdown(SSL *s)
     return ret;
 }
 
-int dtls1_query_mtu(SSL *s)
+int __cdecl dtls1_query_mtu(SSL *s)
 {
     if (s->d1->link_mtu) {
         s->d1->mtu =
@@ -925,12 +925,12 @@ static size_t dtls1_link_min_mtu(void)
                             sizeof(g_probable_mtu[0])) - 1]);
 }
 
-size_t dtls1_min_mtu(SSL *s)
+size_t __cdecl dtls1_min_mtu(SSL *s)
 {
     return dtls1_link_min_mtu() - BIO_dgram_get_mtu_overhead(SSL_get_wbio(s));
 }
 
-size_t DTLS_get_data_mtu(const SSL *s)
+size_t __cdecl DTLS_get_data_mtu(const SSL *s)
 {
     size_t mac_overhead, int_overhead, blocksize, ext_overhead;
     const SSL_CIPHER *ciph = SSL_get_current_cipher(s);
@@ -966,7 +966,7 @@ size_t DTLS_get_data_mtu(const SSL *s)
     return mtu;
 }
 
-void DTLS_set_timer_cb(SSL *s, DTLS_timer_cb cb)
+void __cdecl DTLS_set_timer_cb(SSL *s, DTLS_timer_cb cb)
 {
     s->d1->timer_cb = cb;
 }
diff --git a/ssl/d1_msg.c b/ssl/d1_msg.c
index 6365b365e7..384b0af2ea 100644
--- a/ssl/d1_msg.c
+++ b/ssl/d1_msg.c
@@ -9,7 +9,7 @@
 
 #include "ssl_locl.h"
 
-int dtls1_write_app_data_bytes(SSL *s, int type, const void *buf_, size_t len,
+int __cdecl dtls1_write_app_data_bytes(SSL *s, int type, const void *buf_, size_t len,
                                size_t *written)
 {
     int i;
@@ -33,10 +33,10 @@ int dtls1_write_app_data_bytes(SSL *s, int type, const void *buf_, size_t len,
     return dtls1_write_bytes(s, type, buf_, len, written);
 }
 
-int dtls1_dispatch_alert(SSL *s)
+int __cdecl dtls1_dispatch_alert(SSL *s)
 {
     int i, j;
-    void (*cb) (const SSL *ssl, int type, int val) = NULL;
+    void (__cdecl *cb) (const SSL *ssl, int type, int val) = NULL;
     unsigned char buf[DTLS1_AL_HEADER_LENGTH];
     unsigned char *ptr = &buf[0];
     size_t written;
diff --git a/ssl/d1_srtp.c b/ssl/d1_srtp.c
index ff8f0c5712..d49168d6de 100644
--- a/ssl/d1_srtp.c
+++ b/ssl/d1_srtp.c
@@ -109,17 +109,17 @@ static int ssl_ctx_make_profiles(const char *profiles_string,
     return 1;
 }
 
-int SSL_CTX_set_tlsext_use_srtp(SSL_CTX *ctx, const char *profiles)
+int __cdecl SSL_CTX_set_tlsext_use_srtp(SSL_CTX *ctx, const char *profiles)
 {
     return ssl_ctx_make_profiles(profiles, &ctx->srtp_profiles);
 }
 
-int SSL_set_tlsext_use_srtp(SSL *s, const char *profiles)
+int __cdecl SSL_set_tlsext_use_srtp(SSL *s, const char *profiles)
 {
     return ssl_ctx_make_profiles(profiles, &s->srtp_profiles);
 }
 
-STACK_OF(SRTP_PROTECTION_PROFILE) *SSL_get_srtp_profiles(SSL *s)
+STACK_OF(SRTP_PROTECTION_PROFILE) * __cdecl SSL_get_srtp_profiles(SSL *s)
 {
     if (s != NULL) {
         if (s->srtp_profiles != NULL) {
@@ -132,7 +132,7 @@ STACK_OF(SRTP_PROTECTION_PROFILE) *SSL_get_srtp_profiles(SSL *s)
     return NULL;
 }
 
-SRTP_PROTECTION_PROFILE *SSL_get_selected_srtp_profile(SSL *s)
+SRTP_PROTECTION_PROFILE * __cdecl SSL_get_selected_srtp_profile(SSL *s)
 {
     return s->srtp_profile;
 }
diff --git a/ssl/pqueue.c b/ssl/pqueue.c
index 548a7a443d..e0398d043f 100644
--- a/ssl/pqueue.c
+++ b/ssl/pqueue.c
@@ -15,7 +15,7 @@ struct pqueue_st {
     int count;
 };
 
-pitem *pitem_new(unsigned char *prio64be, void *data)
+pitem * __cdecl pitem_new(unsigned char *prio64be, void *data)
 {
     pitem *item = OPENSSL_malloc(sizeof(*item));
 
@@ -30,12 +30,12 @@ pitem *pitem_new(unsigned char *prio64be, void *data)
     return item;
 }
 
-void pitem_free(pitem *item)
+void __cdecl pitem_free(pitem *item)
 {
     OPENSSL_free(item);
 }
 
-pqueue *pqueue_new(void)
+pqueue * __cdecl pqueue_new(void)
 {
     pqueue *pq = OPENSSL_zalloc(sizeof(*pq));
 
@@ -45,12 +45,12 @@ pqueue *pqueue_new(void)
     return pq;
 }
 
-void pqueue_free(pqueue *pq)
+void __cdecl pqueue_free(pqueue *pq)
 {
     OPENSSL_free(pq);
 }
 
-pitem *pqueue_insert(pqueue *pq, pitem *item)
+pitem * __cdecl pqueue_insert(pqueue *pq, pitem *item)
 {
     pitem *curr, *next;
 
@@ -86,12 +86,12 @@ pitem *pqueue_insert(pqueue *pq, pitem *item)
     return item;
 }
 
-pitem *pqueue_peek(pqueue *pq)
+pitem * __cdecl pqueue_peek(pqueue *pq)
 {
     return pq->items;
 }
 
-pitem *pqueue_pop(pqueue *pq)
+pitem * __cdecl pqueue_pop(pqueue *pq)
 {
     pitem *item = pq->items;
 
@@ -101,7 +101,7 @@ pitem *pqueue_pop(pqueue *pq)
     return item;
 }
 
-pitem *pqueue_find(pqueue *pq, unsigned char *prio64be)
+pitem * __cdecl pqueue_find(pqueue *pq, unsigned char *prio64be)
 {
     pitem *next;
     pitem *found = NULL;
@@ -126,12 +126,12 @@ pitem *pqueue_find(pqueue *pq, unsigned char *prio64be)
     return found;
 }
 
-pitem *pqueue_iterator(pqueue *pq)
+pitem * __cdecl pqueue_iterator(pqueue *pq)
 {
     return pqueue_peek(pq);
 }
 
-pitem *pqueue_next(piterator *item)
+pitem * __cdecl pqueue_next(piterator *item)
 {
     pitem *ret;
 
@@ -145,7 +145,7 @@ pitem *pqueue_next(piterator *item)
     return ret;
 }
 
-size_t pqueue_size(pqueue *pq)
+size_t __cdecl pqueue_size(pqueue *pq)
 {
     pitem *item = pq->items;
     size_t count = 0;
diff --git a/ssl/record/rec_layer_d1.c b/ssl/record/rec_layer_d1.c
index cb5d54ef5a..dd092c6cc1 100644
--- a/ssl/record/rec_layer_d1.c
+++ b/ssl/record/rec_layer_d1.c
@@ -336,13 +336,13 @@ int dtls1_process_buffered_records(SSL *s)
  *     Application data protocol
  *             none of our business
  */
-int dtls1_read_bytes(SSL *s, int type, int *recvd_type, unsigned char *buf,
+int __cdecl dtls1_read_bytes(SSL *s, int type, int *recvd_type, unsigned char *buf,
                      size_t len, int peek, size_t *readbytes)
 {
     int i, j, iret;
     size_t n;
     SSL3_RECORD *rr;
-    void (*cb) (const SSL *ssl, int type2, int val) = NULL;
+    void (__cdecl *cb) (const SSL *ssl, int type2, int val) = NULL;
 
     if (!SSL3_BUFFER_is_initialised(&s->rlayer.rbuf)) {
         /* Not initialized yet */
@@ -779,7 +779,7 @@ int dtls1_read_bytes(SSL *s, int type, int *recvd_type, unsigned char *buf,
  * Call this to write data in records of type 'type' It will return <= 0 if
  * not all data has been sent or non-blocking IO.
  */
-int dtls1_write_bytes(SSL *s, int type, const void *buf, size_t len,
+int __cdecl dtls1_write_bytes(SSL *s, int type, const void *buf, size_t len,
                       size_t *written)
 {
     int i;
@@ -794,7 +794,7 @@ int dtls1_write_bytes(SSL *s, int type, const void *buf, size_t len,
     return i;
 }
 
-int do_dtls1_write(SSL *s, int type, const unsigned char *buf,
+int __cdecl do_dtls1_write(SSL *s, int type, const unsigned char *buf,
                    size_t len, int create_empty_fragment, size_t *written)
 {
     unsigned char *p, *pseq;
@@ -1031,7 +1031,7 @@ DTLS1_BITMAP *dtls1_get_bitmap(SSL *s, SSL3_RECORD *rr,
     return NULL;
 }
 
-void dtls1_reset_seq_numbers(SSL *s, int rw)
+void __cdecl dtls1_reset_seq_numbers(SSL *s, int rw)
 {
     unsigned char *seq;
     unsigned int seq_bytes = sizeof(s->rlayer.read_sequence);
diff --git a/ssl/record/rec_layer_s3.c b/ssl/record/rec_layer_s3.c
index 982a06089c..33a625d451 100644
--- a/ssl/record/rec_layer_s3.c
+++ b/ssl/record/rec_layer_s3.c
@@ -108,7 +108,7 @@ void RECORD_LAYER_reset_write_sequence(RECORD_LAYER *rl)
     memset(rl->write_sequence, 0, sizeof(rl->write_sequence));
 }
 
-size_t ssl3_pending(const SSL *s)
+size_t __cdecl ssl3_pending(const SSL *s)
 {
     size_t i, num = 0;
 
@@ -125,17 +125,17 @@ size_t ssl3_pending(const SSL *s)
     return num;
 }
 
-void SSL_CTX_set_default_read_buffer_len(SSL_CTX *ctx, size_t len)
+void __cdecl SSL_CTX_set_default_read_buffer_len(SSL_CTX *ctx, size_t len)
 {
     ctx->default_read_buf_len = len;
 }
 
-void SSL_set_default_read_buffer_len(SSL *s, size_t len)
+void __cdecl SSL_set_default_read_buffer_len(SSL *s, size_t len)
 {
     SSL3_BUFFER_set_default_len(RECORD_LAYER_get_rbuf(&s->rlayer), len);
 }
 
-const char *SSL_rstate_string_long(const SSL *s)
+const char * __cdecl SSL_rstate_string_long(const SSL *s)
 {
     switch (s->rlayer.rstate) {
     case SSL_ST_READ_HEADER:
@@ -149,7 +149,7 @@ const char *SSL_rstate_string_long(const SSL *s)
     }
 }
 
-const char *SSL_rstate_string(const SSL *s)
+const char * __cdecl SSL_rstate_string(const SSL *s)
 {
     switch (s->rlayer.rstate) {
     case SSL_ST_READ_HEADER:
@@ -334,7 +334,7 @@ int ssl3_read_n(SSL *s, size_t n, size_t max, int extend, int clearold,
  * Call this to write data in records of type 'type' It will return <= 0 if
  * not all data has been sent or non-blocking IO.
  */
-int ssl3_write_bytes(SSL *s, int type, const void *buf_, size_t len,
+int __cdecl ssl3_write_bytes(SSL *s, int type, const void *buf_, size_t len,
                      size_t *written)
 {
     const unsigned char *buf = buf_;
@@ -649,7 +649,7 @@ int ssl3_write_bytes(SSL *s, int type, const void *buf_, size_t len,
     }
 }
 
-int do_ssl3_write(SSL *s, int type, const unsigned char *buf,
+int __cdecl do_ssl3_write(SSL *s, int type, const unsigned char *buf,
                   size_t *pipelens, size_t numpipes,
                   int create_empty_fragment, size_t *written)
 {
@@ -1123,7 +1123,7 @@ int do_ssl3_write(SSL *s, int type, const unsigned char *buf,
  *
  * Return values are as per SSL_write()
  */
-int ssl3_write_pending(SSL *s, int type, const unsigned char *buf, size_t len,
+int __cdecl ssl3_write_pending(SSL *s, int type, const unsigned char *buf, size_t len,
                        size_t *written)
 {
     int i;
@@ -1214,14 +1214,14 @@ int ssl3_write_pending(SSL *s, int type, const unsigned char *buf, size_t len,
  *     Application data protocol
  *             none of our business
  */
-int ssl3_read_bytes(SSL *s, int type, int *recvd_type, unsigned char *buf,
+int __cdecl ssl3_read_bytes(SSL *s, int type, int *recvd_type, unsigned char *buf,
                     size_t len, int peek, size_t *readbytes)
 {
     int i, j, ret;
     size_t n, curr_rec, num_recs, totalbytes;
     SSL3_RECORD *rr;
     SSL3_BUFFER *rbuf;
-    void (*cb) (const SSL *ssl, int type2, int val) = NULL;
+    void (__cdecl *cb) (const SSL *ssl, int type2, int val) = NULL;
     int is_tls13 = SSL_IS_TLS13(s);
 
     rbuf = &s->rlayer.rbuf;
diff --git a/ssl/record/record.h b/ssl/record/record.h
index af56206e07..579a2589a9 100644
--- a/ssl/record/record.h
+++ b/ssl/record/record.h
@@ -201,36 +201,36 @@ void RECORD_LAYER_reset_read_sequence(RECORD_LAYER *rl);
 void RECORD_LAYER_reset_write_sequence(RECORD_LAYER *rl);
 int RECORD_LAYER_is_sslv2_record(RECORD_LAYER *rl);
 size_t RECORD_LAYER_get_rrec_length(RECORD_LAYER *rl);
-__owur size_t ssl3_pending(const SSL *s);
-__owur int ssl3_write_bytes(SSL *s, int type, const void *buf, size_t len,
+__owur size_t __cdecl ssl3_pending(const SSL *s);
+__owur int __cdecl ssl3_write_bytes(SSL *s, int type, const void *buf, size_t len,
                             size_t *written);
-int do_ssl3_write(SSL *s, int type, const unsigned char *buf,
+int __cdecl do_ssl3_write(SSL *s, int type, const unsigned char *buf,
                   size_t *pipelens, size_t numpipes,
                   int create_empty_fragment, size_t *written);
-__owur int ssl3_read_bytes(SSL *s, int type, int *recvd_type,
+__owur int __cdecl ssl3_read_bytes(SSL *s, int type, int *recvd_type,
                            unsigned char *buf, size_t len, int peek,
                            size_t *readbytes);
-__owur int ssl3_setup_buffers(SSL *s);
-__owur int ssl3_enc(SSL *s, SSL3_RECORD *inrecs, size_t n_recs, int send);
-__owur int n_ssl3_mac(SSL *ssl, SSL3_RECORD *rec, unsigned char *md, int send);
-__owur int ssl3_write_pending(SSL *s, int type, const unsigned char *buf, size_t len,
+__owur int __cdecl ssl3_setup_buffers(SSL *s);
+__owur int __cdecl ssl3_enc(SSL *s, SSL3_RECORD *inrecs, size_t n_recs, int send);
+__owur int __cdecl n_ssl3_mac(SSL *ssl, SSL3_RECORD *rec, unsigned char *md, int send);
+__owur int __cdecl ssl3_write_pending(SSL *s, int type, const unsigned char *buf, size_t len,
                               size_t *written);
-__owur int tls1_enc(SSL *s, SSL3_RECORD *recs, size_t n_recs, int send);
-__owur int tls1_mac(SSL *ssl, SSL3_RECORD *rec, unsigned char *md, int send);
-__owur int tls13_enc(SSL *s, SSL3_RECORD *recs, size_t n_recs, int send);
+__owur int __cdecl tls1_enc(SSL *s, SSL3_RECORD *recs, size_t n_recs, int send);
+__owur int __cdecl tls1_mac(SSL *ssl, SSL3_RECORD *rec, unsigned char *md, int send);
+__owur int __cdecl tls13_enc(SSL *s, SSL3_RECORD *recs, size_t n_recs, int send);
 int DTLS_RECORD_LAYER_new(RECORD_LAYER *rl);
 void DTLS_RECORD_LAYER_free(RECORD_LAYER *rl);
 void DTLS_RECORD_LAYER_clear(RECORD_LAYER *rl);
 void DTLS_RECORD_LAYER_set_saved_w_epoch(RECORD_LAYER *rl, unsigned short e);
 void DTLS_RECORD_LAYER_clear(RECORD_LAYER *rl);
 void DTLS_RECORD_LAYER_set_write_sequence(RECORD_LAYER *rl, unsigned char *seq);
-__owur int dtls1_read_bytes(SSL *s, int type, int *recvd_type,
+__owur int __cdecl dtls1_read_bytes(SSL *s, int type, int *recvd_type,
                             unsigned char *buf, size_t len, int peek,
                             size_t *readbytes);
-__owur int dtls1_write_bytes(SSL *s, int type, const void *buf, size_t len,
+__owur int __cdecl dtls1_write_bytes(SSL *s, int type, const void *buf, size_t len,
                              size_t *written);
-int do_dtls1_write(SSL *s, int type, const unsigned char *buf,
+int __cdecl do_dtls1_write(SSL *s, int type, const unsigned char *buf,
                    size_t len, int create_empty_fragment, size_t *written);
-void dtls1_reset_seq_numbers(SSL *s, int rw);
-int dtls_buffer_listen_record(SSL *s, size_t len, unsigned char *seq,
+void __cdecl dtls1_reset_seq_numbers(SSL *s, int rw);
+int __cdecl dtls_buffer_listen_record(SSL *s, size_t len, unsigned char *seq,
                               size_t off);
diff --git a/ssl/record/ssl3_buffer.c b/ssl/record/ssl3_buffer.c
index 53bd4cb190..fc64058297 100644
--- a/ssl/record/ssl3_buffer.c
+++ b/ssl/record/ssl3_buffer.c
@@ -138,7 +138,7 @@ int ssl3_setup_write_buffer(SSL *s, size_t numwpipes, size_t len)
     return 1;
 }
 
-int ssl3_setup_buffers(SSL *s)
+int __cdecl ssl3_setup_buffers(SSL *s)
 {
     if (!ssl3_setup_read_buffer(s)) {
         /* SSLfatal() already called */
diff --git a/ssl/record/ssl3_record.c b/ssl/record/ssl3_record.c
index e59ac5a676..4c6b06c6de 100644
--- a/ssl/record/ssl3_record.c
+++ b/ssl/record/ssl3_record.c
@@ -843,7 +843,7 @@ int ssl3_do_compress(SSL *ssl, SSL3_RECORD *wr)
  *   -1: if the record's padding is invalid or, if sending, an internal error
  *       occurred.
  */
-int ssl3_enc(SSL *s, SSL3_RECORD *inrecs, size_t n_recs, int sending)
+int __cdecl ssl3_enc(SSL *s, SSL3_RECORD *inrecs, size_t n_recs, int sending)
 {
     SSL3_RECORD *rec;
     EVP_CIPHER_CTX *ds;
@@ -934,7 +934,7 @@ int ssl3_enc(SSL *s, SSL3_RECORD *inrecs, size_t n_recs, int sending)
  *   -1: if the record's padding/AEAD-authenticator is invalid or, if sending,
  *       an internal error occurred.
  */
-int tls1_enc(SSL *s, SSL3_RECORD *recs, size_t n_recs, int sending)
+int __cdecl tls1_enc(SSL *s, SSL3_RECORD *recs, size_t n_recs, int sending)
 {
     EVP_CIPHER_CTX *ds;
     size_t reclen[SSL_MAX_PIPELINES];
@@ -1181,7 +1181,7 @@ int tls1_enc(SSL *s, SSL3_RECORD *recs, size_t n_recs, int sending)
     return ret;
 }
 
-int n_ssl3_mac(SSL *ssl, SSL3_RECORD *rec, unsigned char *md, int sending)
+int __cdecl n_ssl3_mac(SSL *ssl, SSL3_RECORD *rec, unsigned char *md, int sending)
 {
     unsigned char *mac_sec, *seq;
     const EVP_MD_CTX *hash;
@@ -1277,7 +1277,7 @@ int n_ssl3_mac(SSL *ssl, SSL3_RECORD *rec, unsigned char *md, int sending)
     return 1;
 }
 
-int tls1_mac(SSL *ssl, SSL3_RECORD *rec, unsigned char *md, int sending)
+int __cdecl tls1_mac(SSL *ssl, SSL3_RECORD *rec, unsigned char *md, int sending)
 {
     unsigned char *seq;
     EVP_MD_CTX *hash;
@@ -2031,7 +2031,7 @@ int dtls1_get_record(SSL *s)
 
 }
 
-int dtls_buffer_listen_record(SSL *s, size_t len, unsigned char *seq, size_t off)
+int __cdecl dtls_buffer_listen_record(SSL *s, size_t len, unsigned char *seq, size_t off)
 {
     SSL3_RECORD *rr;
 
diff --git a/ssl/record/ssl3_record_tls13.c b/ssl/record/ssl3_record_tls13.c
index a11ed483e6..c0fef79c7b 100644
--- a/ssl/record/ssl3_record_tls13.c
+++ b/ssl/record/ssl3_record_tls13.c
@@ -22,7 +22,7 @@
  *   -1: if the record's AEAD-authenticator is invalid or, if sending,
  *       an internal error occurred.
  */
-int tls13_enc(SSL *s, SSL3_RECORD *recs, size_t n_recs, int sending)
+int __cdecl tls13_enc(SSL *s, SSL3_RECORD *recs, size_t n_recs, int sending)
 {
     EVP_CIPHER_CTX *ctx;
     unsigned char iv[EVP_MAX_IV_LENGTH], recheader[SSL3_RT_HEADER_LENGTH];
diff --git a/ssl/s3_cbc.c b/ssl/s3_cbc.c
index 8377d7fe13..e30c8ff8b7 100644
--- a/ssl/s3_cbc.c
+++ b/ssl/s3_cbc.c
@@ -88,7 +88,7 @@ static void tls1_sha512_final_raw(void *ctx, unsigned char *md_out)
  * ssl3_cbc_record_digest_supported returns 1 iff |ctx| uses a hash function
  * which ssl3_cbc_digest_record supports.
  */
-char ssl3_cbc_record_digest_supported(const EVP_MD_CTX *ctx)
+char __cdecl ssl3_cbc_record_digest_supported(const EVP_MD_CTX *ctx)
 {
     switch (EVP_MD_CTX_type(ctx)) {
     case NID_md5:
@@ -125,7 +125,7 @@ char ssl3_cbc_record_digest_supported(const EVP_MD_CTX *ctx)
  * padding too. )
  * Returns 1 on success or 0 on error
  */
-int ssl3_cbc_digest_record(const EVP_MD_CTX *ctx,
+int __cdecl ssl3_cbc_digest_record(const EVP_MD_CTX *ctx,
                            unsigned char *md_out,
                            size_t *md_out_size,
                            const unsigned char header[13],
diff --git a/ssl/s3_enc.c b/ssl/s3_enc.c
index 2e185e9fba..f0634abce9 100644
--- a/ssl/s3_enc.c
+++ b/ssl/s3_enc.c
@@ -87,7 +87,7 @@ static int ssl3_generate_key_block(SSL *s, unsigned char *km, int num)
     return ret;
 }
 
-int ssl3_change_cipher_state(SSL *s, int which)
+int __cdecl ssl3_change_cipher_state(SSL *s, int which)
 {
     unsigned char *p, *mac_secret;
     unsigned char *ms, *key, *iv;
@@ -242,7 +242,7 @@ int ssl3_change_cipher_state(SSL *s, int which)
     return 0;
 }
 
-int ssl3_setup_key_block(SSL *s)
+int __cdecl ssl3_setup_key_block(SSL *s)
 {
     unsigned char *p;
     const EVP_CIPHER *c;
@@ -310,14 +310,14 @@ int ssl3_setup_key_block(SSL *s)
     return ret;
 }
 
-void ssl3_cleanup_key_block(SSL *s)
+void __cdecl ssl3_cleanup_key_block(SSL *s)
 {
     OPENSSL_clear_free(s->s3->tmp.key_block, s->s3->tmp.key_block_length);
     s->s3->tmp.key_block = NULL;
     s->s3->tmp.key_block_length = 0;
 }
 
-int ssl3_init_finished_mac(SSL *s)
+int __cdecl ssl3_init_finished_mac(SSL *s)
 {
     BIO *buf = BIO_new(BIO_s_mem());
 
@@ -337,7 +337,7 @@ int ssl3_init_finished_mac(SSL *s)
  * together.
  */
 
-void ssl3_free_digest_list(SSL *s)
+void __cdecl ssl3_free_digest_list(SSL *s)
 {
     BIO_free(s->s3->handshake_buffer);
     s->s3->handshake_buffer = NULL;
@@ -345,7 +345,7 @@ void ssl3_free_digest_list(SSL *s)
     s->s3->handshake_dgst = NULL;
 }
 
-int ssl3_finish_mac(SSL *s, const unsigned char *buf, size_t len)
+int __cdecl ssl3_finish_mac(SSL *s, const unsigned char *buf, size_t len)
 {
     int ret;
 
@@ -373,7 +373,7 @@ int ssl3_finish_mac(SSL *s, const unsigned char *buf, size_t len)
     return 1;
 }
 
-int ssl3_digest_cached_records(SSL *s, int keep)
+int __cdecl ssl3_digest_cached_records(SSL *s, int keep)
 {
     const EVP_MD *md;
     long hdatalen;
@@ -410,7 +410,7 @@ int ssl3_digest_cached_records(SSL *s, int keep)
     return 1;
 }
 
-size_t ssl3_final_finish_mac(SSL *s, const char *sender, size_t len,
+size_t __cdecl ssl3_final_finish_mac(SSL *s, const char *sender, size_t len,
                              unsigned char *p)
 {
     int ret;
@@ -464,7 +464,7 @@ size_t ssl3_final_finish_mac(SSL *s, const char *sender, size_t len,
     return ret;
 }
 
-int ssl3_generate_master_secret(SSL *s, unsigned char *out, unsigned char *p,
+int __cdecl ssl3_generate_master_secret(SSL *s, unsigned char *out, unsigned char *p,
                                 size_t len, size_t *secret_size)
 {
     static const unsigned char *salt[3] = {
@@ -520,7 +520,7 @@ int ssl3_generate_master_secret(SSL *s, unsigned char *out, unsigned char *p,
     return ret;
 }
 
-int ssl3_alert_code(int code)
+int __cdecl ssl3_alert_code(int code)
 {
     switch (code) {
     case SSL_AD_CLOSE_NOTIFY:
diff --git a/ssl/s3_lib.c b/ssl/s3_lib.c
index 066bf47221..553e321d16 100644
--- a/ssl/s3_lib.c
+++ b/ssl/s3_lib.c
@@ -3198,7 +3198,7 @@ static SSL_CIPHER ssl3_scsvs[] = {
     },
 };
 
-static int cipher_compare(const void *a, const void *b)
+static int __cdecl cipher_compare(const void *a, const void *b)
 {
     const SSL_CIPHER *ap = (const SSL_CIPHER *)a;
     const SSL_CIPHER *bp = (const SSL_CIPHER *)b;
@@ -3208,7 +3208,7 @@ static int cipher_compare(const void *a, const void *b)
     return ap->id < bp->id ? -1 : 1;
 }
 
-void ssl_sort_cipher_list(void)
+void __cdecl ssl_sort_cipher_list(void)
 {
     qsort(tls13_ciphers, TLS13_NUM_CIPHERS, sizeof(tls13_ciphers[0]),
           cipher_compare);
@@ -3217,7 +3217,7 @@ void ssl_sort_cipher_list(void)
     qsort(ssl3_scsvs, SSL3_NUM_SCSVS, sizeof(ssl3_scsvs[0]), cipher_compare);
 }
 
-static int ssl_undefined_function_1(SSL *ssl, unsigned char *r, size_t s,
+static int __cdecl ssl_undefined_function_1(SSL *ssl, unsigned char *r, size_t s,
                                     const char * t, size_t u,
                                     const unsigned char * v, size_t w, int x)
 {
@@ -3257,12 +3257,12 @@ long ssl3_default_timeout(void)
     return (60 * 60 * 2);
 }
 
-int ssl3_num_ciphers(void)
+int __cdecl ssl3_num_ciphers(void)
 {
     return SSL3_NUM_CIPHERS;
 }
 
-const SSL_CIPHER *ssl3_get_cipher(unsigned int u)
+const SSL_CIPHER * __cdecl ssl3_get_cipher(unsigned int u)
 {
     if (u < SSL3_NUM_CIPHERS)
         return &(ssl3_ciphers[SSL3_NUM_CIPHERS - 1 - u]);
@@ -3270,7 +3270,7 @@ const SSL_CIPHER *ssl3_get_cipher(unsigned int u)
         return NULL;
 }
 
-int ssl3_set_handshake_header(SSL *s, WPACKET *pkt, int htype)
+int __cdecl ssl3_set_handshake_header(SSL *s, WPACKET *pkt, int htype)
 {
     /* No header in the event of a CCS */
     if (htype == SSL3_MT_CHANGE_CIPHER_SPEC)
@@ -3284,12 +3284,12 @@ int ssl3_set_handshake_header(SSL *s, WPACKET *pkt, int htype)
     return 1;
 }
 
-int ssl3_handshake_write(SSL *s)
+int __cdecl ssl3_handshake_write(SSL *s)
 {
     return ssl3_do_write(s, SSL3_RT_HANDSHAKE);
 }
 
-int ssl3_new(SSL *s)
+int __cdecl ssl3_new(SSL *s)
 {
     SSL3_STATE *s3;
 
@@ -3310,7 +3310,7 @@ int ssl3_new(SSL *s)
     return 0;
 }
 
-void ssl3_free(SSL *s)
+void __cdecl ssl3_free(SSL *s)
 {
     if (s == NULL || s->s3 == NULL)
         return;
@@ -3341,7 +3341,7 @@ void ssl3_free(SSL *s)
     s->s3 = NULL;
 }
 
-int ssl3_clear(SSL *s)
+int __cdecl ssl3_clear(SSL *s)
 {
     ssl3_cleanup_key_block(s);
     OPENSSL_free(s->s3->tmp.ctype);
@@ -3379,7 +3379,7 @@ int ssl3_clear(SSL *s)
 }
 
 #ifndef OPENSSL_NO_SRP
-static char *srp_password_from_info_cb(SSL *s, void *arg)
+static char * __cdecl srp_password_from_info_cb(SSL *s, void *arg)
 {
     return OPENSSL_strdup(s->srp_ctx.info);
 }
@@ -3387,7 +3387,7 @@ static char *srp_password_from_info_cb(SSL *s, void *arg)
 
 static int ssl3_set_req_cert_type(CERT *c, const unsigned char *p, size_t len);
 
-long ssl3_ctrl(SSL *s, int cmd, long larg, void *parg)
+long __cdecl ssl3_ctrl(SSL *s, int cmd, long larg, void *parg)
 {
     int ret = 0;
 
@@ -3732,7 +3732,7 @@ long ssl3_ctrl(SSL *s, int cmd, long larg, void *parg)
     return ret;
 }
 
-long ssl3_callback_ctrl(SSL *s, int cmd, void (*fp) (void))
+long __cdecl ssl3_callback_ctrl(SSL *s, int cmd, void (__cdecl *fp) (void))
 {
     int ret = 0;
 
@@ -3740,18 +3740,18 @@ long ssl3_callback_ctrl(SSL *s, int cmd, void (*fp) (void))
 #ifndef OPENSSL_NO_DH
     case SSL_CTRL_SET_TMP_DH_CB:
         {
-            s->cert->dh_tmp_cb = (DH *(*)(SSL *, int, int))fp;
+            s->cert->dh_tmp_cb = (DH *(__cdecl *)(SSL *, int, int))fp;
         }
         break;
 #endif
     case SSL_CTRL_SET_TLSEXT_DEBUG_CB:
-        s->ext.debug_cb = (void (*)(SSL *, int, int,
+        s->ext.debug_cb = (void (__cdecl *)(SSL *, int, int,
                                     const unsigned char *, int, void *))fp;
         break;
 
     case SSL_CTRL_SET_NOT_RESUMABLE_SESS_CB:
         {
-            s->not_resumable_session_cb = (int (*)(SSL *, int))fp;
+            s->not_resumable_session_cb = (int (__cdecl *)(SSL *, int))fp;
         }
         break;
     default:
@@ -3760,7 +3760,7 @@ long ssl3_callback_ctrl(SSL *s, int cmd, void (*fp) (void))
     return ret;
 }
 
-long ssl3_ctx_ctrl(SSL_CTX *ctx, int cmd, long larg, void *parg)
+long __cdecl ssl3_ctx_ctrl(SSL_CTX *ctx, int cmd, long larg, void *parg)
 {
     switch (cmd) {
 #ifndef OPENSSL_NO_DH
@@ -3875,7 +3875,7 @@ long ssl3_ctx_ctrl(SSL_CTX *ctx, int cmd, long larg, void *parg)
         break;
 
     case SSL_CTRL_GET_TLSEXT_STATUS_REQ_CB:
-        *(int (**)(SSL*, void*))parg = ctx->ext.status_cb;
+        *(int (__cdecl **)(SSL*, void*))parg = ctx->ext.status_cb;
         break;
 
 #ifndef OPENSSL_NO_SRP
@@ -4003,26 +4003,26 @@ long ssl3_ctx_ctrl(SSL_CTX *ctx, int cmd, long larg, void *parg)
     return 1;
 }
 
-long ssl3_ctx_callback_ctrl(SSL_CTX *ctx, int cmd, void (*fp) (void))
+long __cdecl ssl3_ctx_callback_ctrl(SSL_CTX *ctx, int cmd, void (__cdecl *fp) (void))
 {
     switch (cmd) {
 #ifndef OPENSSL_NO_DH
     case SSL_CTRL_SET_TMP_DH_CB:
         {
-            ctx->cert->dh_tmp_cb = (DH *(*)(SSL *, int, int))fp;
+            ctx->cert->dh_tmp_cb = (DH *(__cdecl *)(SSL *, int, int))fp;
         }
         break;
 #endif
     case SSL_CTRL_SET_TLSEXT_SERVERNAME_CB:
-        ctx->ext.servername_cb = (int (*)(SSL *, int *, void *))fp;
+        ctx->ext.servername_cb = (int (__cdecl *)(SSL *, int *, void *))fp;
         break;
 
     case SSL_CTRL_SET_TLSEXT_STATUS_REQ_CB:
-        ctx->ext.status_cb = (int (*)(SSL *, void *))fp;
+        ctx->ext.status_cb = (int (__cdecl *)(SSL *, void *))fp;
         break;
 
     case SSL_CTRL_SET_TLSEXT_TICKET_KEY_CB:
-        ctx->ext.ticket_key_cb = (int (*)(SSL *, unsigned char *,
+        ctx->ext.ticket_key_cb = (int (__cdecl *)(SSL *, unsigned char *,
                                              unsigned char *,
                                              EVP_CIPHER_CTX *,
                                              HMAC_CTX *, int))fp;
@@ -4031,22 +4031,22 @@ long ssl3_ctx_callback_ctrl(SSL_CTX *ctx, int cmd, void (*fp) (void))
 #ifndef OPENSSL_NO_SRP
     case SSL_CTRL_SET_SRP_VERIFY_PARAM_CB:
         ctx->srp_ctx.srp_Mask |= SSL_kSRP;
-        ctx->srp_ctx.SRP_verify_param_callback = (int (*)(SSL *, void *))fp;
+        ctx->srp_ctx.SRP_verify_param_callback = (int (__cdecl *)(SSL *, void *))fp;
         break;
     case SSL_CTRL_SET_TLS_EXT_SRP_USERNAME_CB:
         ctx->srp_ctx.srp_Mask |= SSL_kSRP;
         ctx->srp_ctx.TLS_ext_srp_username_callback =
-            (int (*)(SSL *, int *, void *))fp;
+            (int (__cdecl *)(SSL *, int *, void *))fp;
         break;
     case SSL_CTRL_SET_SRP_GIVE_CLIENT_PWD_CB:
         ctx->srp_ctx.srp_Mask |= SSL_kSRP;
         ctx->srp_ctx.SRP_give_srp_client_pwd_callback =
-            (char *(*)(SSL *, void *))fp;
+            (char *(__cdecl *)(SSL *, void *))fp;
         break;
 #endif
     case SSL_CTRL_SET_NOT_RESUMABLE_SESS_CB:
         {
-            ctx->not_resumable_session_cb = (int (*)(SSL *, int))fp;
+            ctx->not_resumable_session_cb = (int (__cdecl *)(SSL *, int))fp;
         }
         break;
     default:
@@ -4055,7 +4055,7 @@ long ssl3_ctx_callback_ctrl(SSL_CTX *ctx, int cmd, void (*fp) (void))
     return 1;
 }
 
-const SSL_CIPHER *ssl3_get_cipher_by_id(uint32_t id)
+const SSL_CIPHER * __cdecl ssl3_get_cipher_by_id(uint32_t id)
 {
     SSL_CIPHER c;
     const SSL_CIPHER *cp;
@@ -4070,7 +4070,7 @@ const SSL_CIPHER *ssl3_get_cipher_by_id(uint32_t id)
     return OBJ_bsearch_ssl_cipher_id(&c, ssl3_scsvs, SSL3_NUM_SCSVS);
 }
 
-const SSL_CIPHER *ssl3_get_cipher_by_std_name(const char *stdname)
+const SSL_CIPHER * __cdecl ssl3_get_cipher_by_std_name(const char *stdname)
 {
     SSL_CIPHER *c = NULL, *tbl;
     SSL_CIPHER *alltabs[] = {tls13_ciphers, ssl3_ciphers};
@@ -4103,14 +4103,14 @@ const SSL_CIPHER *ssl3_get_cipher_by_std_name(const char *stdname)
  * This function needs to check if the ciphers required are actually
  * available
  */
-const SSL_CIPHER *ssl3_get_cipher_by_char(const unsigned char *p)
+const SSL_CIPHER * __cdecl ssl3_get_cipher_by_char(const unsigned char *p)
 {
     return ssl3_get_cipher_by_id(SSL3_CK_CIPHERSUITE_FLAG
                                  | ((uint32_t)p[0] << 8L)
                                  | (uint32_t)p[1]);
 }
 
-int ssl3_put_cipher_by_char(const SSL_CIPHER *c, WPACKET *pkt, size_t *len)
+int __cdecl ssl3_put_cipher_by_char(const SSL_CIPHER *c, WPACKET *pkt, size_t *len)
 {
     if ((c->id & 0xff000000) != SSL3_CK_CIPHERSUITE_FLAG) {
         *len = 0;
@@ -4132,7 +4132,7 @@ int ssl3_put_cipher_by_char(const SSL_CIPHER *c, WPACKET *pkt, size_t *len)
  *
  * Returns the selected cipher or NULL when no common ciphers.
  */
-const SSL_CIPHER *ssl3_choose_cipher(SSL *s, STACK_OF(SSL_CIPHER) *clnt,
+const SSL_CIPHER * __cdecl ssl3_choose_cipher(SSL *s, STACK_OF(SSL_CIPHER) *clnt,
                                      STACK_OF(SSL_CIPHER) *srvr)
 {
     const SSL_CIPHER *c, *ret = NULL;
@@ -4332,7 +4332,7 @@ const SSL_CIPHER *ssl3_choose_cipher(SSL *s, STACK_OF(SSL_CIPHER) *clnt,
     return ret;
 }
 
-int ssl3_get_req_cert_type(SSL *s, WPACKET *pkt)
+int __cdecl ssl3_get_req_cert_type(SSL *s, WPACKET *pkt)
 {
     uint32_t alg_k, alg_a = 0;
 
@@ -4400,7 +4400,7 @@ static int ssl3_set_req_cert_type(CERT *c, const unsigned char *p, size_t len)
     return 1;
 }
 
-int ssl3_shutdown(SSL *s)
+int __cdecl ssl3_shutdown(SSL *s)
 {
     int ret;
 
@@ -4451,7 +4451,7 @@ int ssl3_shutdown(SSL *s)
         return 0;
 }
 
-int ssl3_write(SSL *s, const void *buf, size_t len, size_t *written)
+int __cdecl ssl3_write(SSL *s, const void *buf, size_t len, size_t *written)
 {
     clear_sys_error();
     if (s->s3->renegotiate)
@@ -4492,17 +4492,17 @@ static int ssl3_read_internal(SSL *s, void *buf, size_t len, int peek,
     return ret;
 }
 
-int ssl3_read(SSL *s, void *buf, size_t len, size_t *readbytes)
+int __cdecl ssl3_read(SSL *s, void *buf, size_t len, size_t *readbytes)
 {
     return ssl3_read_internal(s, buf, len, 0, readbytes);
 }
 
-int ssl3_peek(SSL *s, void *buf, size_t len, size_t *readbytes)
+int __cdecl ssl3_peek(SSL *s, void *buf, size_t len, size_t *readbytes)
 {
     return ssl3_read_internal(s, buf, len, 1, readbytes);
 }
 
-int ssl3_renegotiate(SSL *s)
+int __cdecl ssl3_renegotiate(SSL *s)
 {
     if (s->handshake_func == NULL)
         return 1;
@@ -4519,7 +4519,7 @@ int ssl3_renegotiate(SSL *s)
  * should do a renegotiation now and sets up the state machine for it. Otherwise
  * returns 0.
  */
-int ssl3_renegotiate_check(SSL *s, int initok)
+int __cdecl ssl3_renegotiate_check(SSL *s, int initok)
 {
     int ret = 0;
 
@@ -4548,7 +4548,7 @@ int ssl3_renegotiate_check(SSL *s, int initok)
  *
  * If PSK and using SHA384 for TLS < 1.2 switch to default.
  */
-long ssl_get_algorithm2(SSL *s)
+long __cdecl ssl_get_algorithm2(SSL *s)
 {
     long alg2;
     if (s->s3 == NULL || s->s3->tmp.new_cipher == NULL)
@@ -4568,7 +4568,7 @@ long ssl_get_algorithm2(SSL *s)
  * Fill a ClientRandom or ServerRandom field of length len. Returns <= 0 on
  * failure, 1 on success.
  */
-int ssl_fill_hello_random(SSL *s, int server, unsigned char *result, size_t len,
+int __cdecl ssl_fill_hello_random(SSL *s, int server, unsigned char *result, size_t len,
                           DOWNGRADE dgrd)
 {
     int send_time = 0, ret;
@@ -4604,7 +4604,7 @@ int ssl_fill_hello_random(SSL *s, int server, unsigned char *result, size_t len,
     return ret;
 }
 
-int ssl_generate_master_secret(SSL *s, unsigned char *pms, size_t pmslen,
+int __cdecl ssl_generate_master_secret(SSL *s, unsigned char *pms, size_t pmslen,
                                int free_pms)
 {
     unsigned long alg_k = s->s3->tmp.new_cipher->algorithm_mkey;
@@ -4673,7 +4673,7 @@ int ssl_generate_master_secret(SSL *s, unsigned char *pms, size_t pmslen,
 }
 
 /* Generate a private key from parameters */
-EVP_PKEY *ssl_generate_pkey(EVP_PKEY *pm)
+EVP_PKEY * __cdecl ssl_generate_pkey(EVP_PKEY *pm)
 {
     EVP_PKEY_CTX *pctx = NULL;
     EVP_PKEY *pkey = NULL;
@@ -4696,7 +4696,7 @@ EVP_PKEY *ssl_generate_pkey(EVP_PKEY *pm)
 }
 #ifndef OPENSSL_NO_EC
 /* Generate a private key from a group ID */
-EVP_PKEY *ssl_generate_pkey_group(SSL *s, uint16_t id)
+EVP_PKEY * __cdecl ssl_generate_pkey_group(SSL *s, uint16_t id)
 {
     EVP_PKEY_CTX *pctx = NULL;
     EVP_PKEY *pkey = NULL;
@@ -4744,7 +4744,7 @@ EVP_PKEY *ssl_generate_pkey_group(SSL *s, uint16_t id)
 /*
  * Generate parameters from a group ID
  */
-EVP_PKEY *ssl_generate_param_group(uint16_t id)
+EVP_PKEY * __cdecl ssl_generate_param_group(uint16_t id)
 {
     EVP_PKEY_CTX *pctx = NULL;
     EVP_PKEY *pkey = NULL;
@@ -4780,7 +4780,7 @@ EVP_PKEY *ssl_generate_param_group(uint16_t id)
 #endif
 
 /* Derive secrets for ECDH/DH */
-int ssl_derive(SSL *s, EVP_PKEY *privkey, EVP_PKEY *pubkey, int gensecret)
+int __cdecl ssl_derive(SSL *s, EVP_PKEY *privkey, EVP_PKEY *pubkey, int gensecret)
 {
     int rv = 0;
     unsigned char *pms = NULL;
@@ -4849,7 +4849,7 @@ int ssl_derive(SSL *s, EVP_PKEY *privkey, EVP_PKEY *pubkey, int gensecret)
 }
 
 #ifndef OPENSSL_NO_DH
-EVP_PKEY *ssl_dh_to_pkey(DH *dh)
+EVP_PKEY * __cdecl ssl_dh_to_pkey(DH *dh)
 {
     EVP_PKEY *ret;
     if (dh == NULL)
diff --git a/ssl/s3_msg.c b/ssl/s3_msg.c
index 42382547fb..d7bc1220a8 100644
--- a/ssl/s3_msg.c
+++ b/ssl/s3_msg.c
@@ -36,7 +36,7 @@ int ssl3_do_change_cipher_spec(SSL *s)
     return 1;
 }
 
-int ssl3_send_alert(SSL *s, int level, int desc)
+int __cdecl ssl3_send_alert(SSL *s, int level, int desc)
 {
     /* Map tls/ssl alert value to correct one */
     if (SSL_TREAT_AS_TLS13(s))
@@ -66,11 +66,11 @@ int ssl3_send_alert(SSL *s, int level, int desc)
     return -1;
 }
 
-int ssl3_dispatch_alert(SSL *s)
+int __cdecl ssl3_dispatch_alert(SSL *s)
 {
     int i, j;
     size_t alertlen;
-    void (*cb) (const SSL *ssl, int type, int val) = NULL;
+    void (__cdecl *cb) (const SSL *ssl, int type, int val) = NULL;
     size_t written;
 
     s->s3->alert_dispatch = 0;
diff --git a/ssl/ssl_asn1.c b/ssl/ssl_asn1.c
index b56c5e96c5..0b1371d60b 100644
--- a/ssl/ssl_asn1.c
+++ b/ssl/ssl_asn1.c
@@ -101,7 +101,7 @@ static void ssl_session_sinit(ASN1_OCTET_STRING **dest, ASN1_OCTET_STRING *os,
         *dest = NULL;
 }
 
-int i2d_SSL_SESSION(SSL_SESSION *in, unsigned char **pp)
+int __cdecl i2d_SSL_SESSION(SSL_SESSION *in, unsigned char **pp)
 {
 
     SSL_SESSION_ASN1 as;
@@ -236,7 +236,7 @@ static int ssl_session_memcpy(unsigned char *dst, size_t *pdstlen,
     return 1;
 }
 
-SSL_SESSION *d2i_SSL_SESSION(SSL_SESSION **a, const unsigned char **pp,
+SSL_SESSION * __cdecl d2i_SSL_SESSION(SSL_SESSION **a, const unsigned char **pp,
                              long length)
 {
     long id;
diff --git a/ssl/ssl_cert.c b/ssl/ssl_cert.c
index 9df9fb9677..1c5c40942a 100644
--- a/ssl/ssl_cert.c
+++ b/ssl/ssl_cert.c
@@ -24,7 +24,7 @@
 #include "ssl_cert_table.h"
 #include "internal/thread_once.h"
 
-static int ssl_security_default_callback(const SSL *s, const SSL_CTX *ctx,
+static int __cdecl ssl_security_default_callback(const SSL *s, const SSL_CTX *ctx,
                                          int op, int bits, int nid, void *other,
                                          void *ex);
 
@@ -39,7 +39,7 @@ DEFINE_RUN_ONCE_STATIC(ssl_x509_store_ctx_init)
     return ssl_x509_store_ctx_idx >= 0;
 }
 
-int SSL_get_ex_data_X509_STORE_CTX_idx(void)
+int __cdecl SSL_get_ex_data_X509_STORE_CTX_idx(void)
 {
 
     if (!RUN_ONCE(&ssl_x509_store_ctx_once, ssl_x509_store_ctx_init))
@@ -47,7 +47,7 @@ int SSL_get_ex_data_X509_STORE_CTX_idx(void)
     return ssl_x509_store_ctx_idx;
 }
 
-CERT *ssl_cert_new(void)
+CERT * __cdecl ssl_cert_new(void)
 {
     CERT *ret = OPENSSL_zalloc(sizeof(*ret));
 
@@ -71,7 +71,7 @@ CERT *ssl_cert_new(void)
     return ret;
 }
 
-CERT *ssl_cert_dup(CERT *cert)
+CERT * __cdecl ssl_cert_dup(CERT *cert)
 {
     CERT *ret = OPENSSL_zalloc(sizeof(*ret));
     int i;
@@ -200,7 +200,7 @@ CERT *ssl_cert_dup(CERT *cert)
 
 /* Free up and clear all certificates and chains */
 
-void ssl_cert_clear_certs(CERT *c)
+void __cdecl ssl_cert_clear_certs(CERT *c)
 {
     int i;
     if (c == NULL)
@@ -219,7 +219,7 @@ void ssl_cert_clear_certs(CERT *c)
     }
 }
 
-void ssl_cert_free(CERT *c)
+void __cdecl ssl_cert_free(CERT *c)
 {
     int i;
 
@@ -249,7 +249,7 @@ void ssl_cert_free(CERT *c)
     OPENSSL_free(c);
 }
 
-int ssl_cert_set0_chain(SSL *s, SSL_CTX *ctx, STACK_OF(X509) *chain)
+int __cdecl ssl_cert_set0_chain(SSL *s, SSL_CTX *ctx, STACK_OF(X509) *chain)
 {
     int i, r;
     CERT_PKEY *cpk = s ? s->cert->key : ctx->cert->key;
@@ -267,7 +267,7 @@ int ssl_cert_set0_chain(SSL *s, SSL_CTX *ctx, STACK_OF(X509) *chain)
     return 1;
 }
 
-int ssl_cert_set1_chain(SSL *s, SSL_CTX *ctx, STACK_OF(X509) *chain)
+int __cdecl ssl_cert_set1_chain(SSL *s, SSL_CTX *ctx, STACK_OF(X509) *chain)
 {
     STACK_OF(X509) *dchain;
     if (!chain)
@@ -282,7 +282,7 @@ int ssl_cert_set1_chain(SSL *s, SSL_CTX *ctx, STACK_OF(X509) *chain)
     return 1;
 }
 
-int ssl_cert_add0_chain_cert(SSL *s, SSL_CTX *ctx, X509 *x)
+int __cdecl ssl_cert_add0_chain_cert(SSL *s, SSL_CTX *ctx, X509 *x)
 {
     int r;
     CERT_PKEY *cpk = s ? s->cert->key : ctx->cert->key;
@@ -300,7 +300,7 @@ int ssl_cert_add0_chain_cert(SSL *s, SSL_CTX *ctx, X509 *x)
     return 1;
 }
 
-int ssl_cert_add1_chain_cert(SSL *s, SSL_CTX *ctx, X509 *x)
+int __cdecl ssl_cert_add1_chain_cert(SSL *s, SSL_CTX *ctx, X509 *x)
 {
     if (!ssl_cert_add0_chain_cert(s, ctx, x))
         return 0;
@@ -308,7 +308,7 @@ int ssl_cert_add1_chain_cert(SSL *s, SSL_CTX *ctx, X509 *x)
     return 1;
 }
 
-int ssl_cert_select_current(CERT *c, X509 *x)
+int __cdecl ssl_cert_select_current(CERT *c, X509 *x)
 {
     int i;
     if (x == NULL)
@@ -331,7 +331,7 @@ int ssl_cert_select_current(CERT *c, X509 *x)
     return 0;
 }
 
-int ssl_cert_set_current(CERT *c, long op)
+int __cdecl ssl_cert_set_current(CERT *c, long op)
 {
     int i, idx;
     if (!c)
@@ -354,13 +354,13 @@ int ssl_cert_set_current(CERT *c, long op)
     return 0;
 }
 
-void ssl_cert_set_cert_cb(CERT *c, int (*cb) (SSL *ssl, void *arg), void *arg)
+void __cdecl ssl_cert_set_cert_cb(CERT *c, int (__cdecl *cb) (SSL *ssl, void *arg), void *arg)
 {
     c->cert_cb = cb;
     c->cert_cb_arg = arg;
 }
 
-int ssl_verify_cert_chain(SSL *s, STACK_OF(X509) *sk)
+int __cdecl ssl_verify_cert_chain(SSL *s, STACK_OF(X509) *sk)
 {
     X509 *x;
     int i = 0;
@@ -452,7 +452,7 @@ static void set0_CA_list(STACK_OF(X509_NAME) **ca_list,
     *ca_list = name_list;
 }
 
-STACK_OF(X509_NAME) *SSL_dup_CA_list(const STACK_OF(X509_NAME) *sk)
+STACK_OF(X509_NAME) * __cdecl SSL_dup_CA_list(const STACK_OF(X509_NAME) *sk)
 {
     int i;
     const int num = sk_X509_NAME_num(sk);
@@ -476,47 +476,47 @@ STACK_OF(X509_NAME) *SSL_dup_CA_list(const STACK_OF(X509_NAME) *sk)
     return ret;
 }
 
-void SSL_set0_CA_list(SSL *s, STACK_OF(X509_NAME) *name_list)
+void __cdecl SSL_set0_CA_list(SSL *s, STACK_OF(X509_NAME) *name_list)
 {
     set0_CA_list(&s->ca_names, name_list);
 }
 
-void SSL_CTX_set0_CA_list(SSL_CTX *ctx, STACK_OF(X509_NAME) *name_list)
+void __cdecl SSL_CTX_set0_CA_list(SSL_CTX *ctx, STACK_OF(X509_NAME) *name_list)
 {
     set0_CA_list(&ctx->ca_names, name_list);
 }
 
-const STACK_OF(X509_NAME) *SSL_CTX_get0_CA_list(const SSL_CTX *ctx)
+const STACK_OF(X509_NAME) * __cdecl SSL_CTX_get0_CA_list(const SSL_CTX *ctx)
 {
     return ctx->ca_names;
 }
 
-const STACK_OF(X509_NAME) *SSL_get0_CA_list(const SSL *s)
+const STACK_OF(X509_NAME) * __cdecl SSL_get0_CA_list(const SSL *s)
 {
     return s->ca_names != NULL ? s->ca_names : s->ctx->ca_names;
 }
 
-void SSL_CTX_set_client_CA_list(SSL_CTX *ctx, STACK_OF(X509_NAME) *name_list)
+void __cdecl SSL_CTX_set_client_CA_list(SSL_CTX *ctx, STACK_OF(X509_NAME) *name_list)
 {
     set0_CA_list(&ctx->client_ca_names, name_list);
 }
 
-STACK_OF(X509_NAME) *SSL_CTX_get_client_CA_list(const SSL_CTX *ctx)
+STACK_OF(X509_NAME) * __cdecl SSL_CTX_get_client_CA_list(const SSL_CTX *ctx)
 {
     return ctx->client_ca_names;
 }
 
-void SSL_set_client_CA_list(SSL *s, STACK_OF(X509_NAME) *name_list)
+void __cdecl SSL_set_client_CA_list(SSL *s, STACK_OF(X509_NAME) *name_list)
 {
     set0_CA_list(&s->client_ca_names, name_list);
 }
 
-const STACK_OF(X509_NAME) *SSL_get0_peer_CA_list(const SSL *s)
+const STACK_OF(X509_NAME) * __cdecl SSL_get0_peer_CA_list(const SSL *s)
 {
     return s->s3 != NULL ? s->s3->tmp.peer_ca_names : NULL;
 }
 
-STACK_OF(X509_NAME) *SSL_get_client_CA_list(const SSL *s)
+STACK_OF(X509_NAME) * __cdecl SSL_get_client_CA_list(const SSL *s)
 {
     if (!s->server)
         return s->s3 != NULL ?  s->s3->tmp.peer_ca_names : NULL;
@@ -543,12 +543,12 @@ static int add_ca_name(STACK_OF(X509_NAME) **sk, const X509 *x)
     return 1;
 }
 
-int SSL_add1_to_CA_list(SSL *ssl, const X509 *x)
+int __cdecl SSL_add1_to_CA_list(SSL *ssl, const X509 *x)
 {
     return add_ca_name(&ssl->ca_names, x);
 }
 
-int SSL_CTX_add1_to_CA_list(SSL_CTX *ctx, const X509 *x)
+int __cdecl SSL_CTX_add1_to_CA_list(SSL_CTX *ctx, const X509 *x)
 {
     return add_ca_name(&ctx->ca_names, x);
 }
@@ -557,17 +557,17 @@ int SSL_CTX_add1_to_CA_list(SSL_CTX *ctx, const X509 *x)
  * The following two are older names are to be replaced with
  * SSL(_CTX)_add1_to_CA_list
  */
-int SSL_add_client_CA(SSL *ssl, X509 *x)
+int __cdecl SSL_add_client_CA(SSL *ssl, X509 *x)
 {
     return add_ca_name(&ssl->client_ca_names, x);
 }
 
-int SSL_CTX_add_client_CA(SSL_CTX *ctx, X509 *x)
+int __cdecl SSL_CTX_add_client_CA(SSL_CTX *ctx, X509 *x)
 {
     return add_ca_name(&ctx->client_ca_names, x);
 }
 
-static int xname_cmp(const X509_NAME *a, const X509_NAME *b)
+static int __cdecl xname_cmp(const X509_NAME *a, const X509_NAME *b)
 {
     unsigned char *abuf = NULL, *bbuf = NULL;
     int alen, blen, ret;
@@ -591,12 +591,12 @@ static int xname_cmp(const X509_NAME *a, const X509_NAME *b)
     return ret;
 }
 
-static int xname_sk_cmp(const X509_NAME *const *a, const X509_NAME *const *b)
+static int __cdecl xname_sk_cmp(const X509_NAME *const *a, const X509_NAME *const *b)
 {
     return xname_cmp(*a, *b);
 }
 
-static unsigned long xname_hash(const X509_NAME *a)
+static unsigned long __cdecl xname_hash(const X509_NAME *a)
 {
     return X509_NAME_hash((X509_NAME *)a);
 }
@@ -609,7 +609,7 @@ static unsigned long xname_hash(const X509_NAME *a)
  * \param file the file containing one or more certs.
  * \return a ::STACK containing the certs.
  */
-STACK_OF(X509_NAME) *SSL_load_client_CA_file(const char *file)
+STACK_OF(X509_NAME) * __cdecl SSL_load_client_CA_file(const char *file)
 {
     BIO *in = BIO_new(BIO_s_file());
     X509 *x = NULL;
@@ -675,14 +675,14 @@ STACK_OF(X509_NAME) *SSL_load_client_CA_file(const char *file)
  * certs may have been added to \c stack.
  */
 
-int SSL_add_file_cert_subjects_to_stack(STACK_OF(X509_NAME) *stack,
+int __cdecl SSL_add_file_cert_subjects_to_stack(STACK_OF(X509_NAME) *stack,
                                         const char *file)
 {
     BIO *in;
     X509 *x = NULL;
     X509_NAME *xn = NULL;
     int ret = 1;
-    int (*oldcmp) (const X509_NAME *const *a, const X509_NAME *const *b);
+    int (__cdecl *oldcmp) (const X509_NAME *const *a, const X509_NAME *const *b);
 
     oldcmp = sk_X509_NAME_set_cmp_func(stack, xname_sk_cmp);
 
@@ -736,7 +736,7 @@ int SSL_add_file_cert_subjects_to_stack(STACK_OF(X509_NAME) *stack,
  * certs may have been added to \c stack.
  */
 
-int SSL_add_dir_cert_subjects_to_stack(STACK_OF(X509_NAME) *stack,
+int __cdecl SSL_add_dir_cert_subjects_to_stack(STACK_OF(X509_NAME) *stack,
                                        const char *dir)
 {
     OPENSSL_DIR_CTX *d = NULL;
@@ -782,7 +782,7 @@ int SSL_add_dir_cert_subjects_to_stack(STACK_OF(X509_NAME) *stack,
 }
 
 /* Build a certificate chain for current certificate */
-int ssl_build_cert_chain(SSL *s, SSL_CTX *ctx, int flags)
+int __cdecl ssl_build_cert_chain(SSL *s, SSL_CTX *ctx, int flags)
 {
     CERT *c = s ? s->cert : ctx->cert;
     CERT_PKEY *cpk = c->key;
@@ -890,7 +890,7 @@ int ssl_build_cert_chain(SSL *s, SSL_CTX *ctx, int flags)
     return rv;
 }
 
-int ssl_cert_set_cert_store(CERT *c, X509_STORE *store, int chain, int ref)
+int __cdecl ssl_cert_set_cert_store(CERT *c, X509_STORE *store, int chain, int ref)
 {
     X509_STORE **pstore;
     if (chain)
@@ -904,7 +904,7 @@ int ssl_cert_set_cert_store(CERT *c, X509_STORE *store, int chain, int ref)
     return 1;
 }
 
-static int ssl_security_default_callback(const SSL *s, const SSL_CTX *ctx,
+static int __cdecl ssl_security_default_callback(const SSL *s, const SSL_CTX *ctx,
                                          int op, int bits, int nid, void *other,
                                          void *ex)
 {
@@ -987,18 +987,18 @@ static int ssl_security_default_callback(const SSL *s, const SSL_CTX *ctx,
     return 1;
 }
 
-int ssl_security(const SSL *s, int op, int bits, int nid, void *other)
+int __cdecl ssl_security(const SSL *s, int op, int bits, int nid, void *other)
 {
     return s->cert->sec_cb(s, NULL, op, bits, nid, other, s->cert->sec_ex);
 }
 
-int ssl_ctx_security(const SSL_CTX *ctx, int op, int bits, int nid, void *other)
+int __cdecl ssl_ctx_security(const SSL_CTX *ctx, int op, int bits, int nid, void *other)
 {
     return ctx->cert->sec_cb(NULL, ctx, op, bits, nid, other,
                              ctx->cert->sec_ex);
 }
 
-int ssl_cert_lookup_by_nid(int nid, size_t *pidx)
+int __cdecl ssl_cert_lookup_by_nid(int nid, size_t *pidx)
 {
     size_t i;
 
@@ -1012,7 +1012,7 @@ int ssl_cert_lookup_by_nid(int nid, size_t *pidx)
     return 0;
 }
 
-const SSL_CERT_LOOKUP *ssl_cert_lookup_by_pkey(const EVP_PKEY *pk, size_t *pidx)
+const SSL_CERT_LOOKUP * __cdecl ssl_cert_lookup_by_pkey(const EVP_PKEY *pk, size_t *pidx)
 {
     int nid = EVP_PKEY_id(pk);
     size_t tmpidx;
@@ -1029,7 +1029,7 @@ const SSL_CERT_LOOKUP *ssl_cert_lookup_by_pkey(const EVP_PKEY *pk, size_t *pidx)
     return &ssl_cert_info[tmpidx];
 }
 
-const SSL_CERT_LOOKUP *ssl_cert_lookup_by_idx(size_t idx)
+const SSL_CERT_LOOKUP * __cdecl ssl_cert_lookup_by_idx(size_t idx)
 {
     if (idx >= OSSL_NELEM(ssl_cert_info))
         return NULL;
diff --git a/ssl/ssl_ciph.c b/ssl/ssl_ciph.c
index 27a1b2ec68..940e7b18ec 100644
--- a/ssl/ssl_ciph.c
+++ b/ssl/ssl_ciph.c
@@ -354,7 +354,7 @@ static uint32_t disabled_mac_mask;
 static uint32_t disabled_mkey_mask;
 static uint32_t disabled_auth_mask;
 
-int ssl_load_ciphers(void)
+int __cdecl ssl_load_ciphers(void)
 {
     size_t i;
     const ssl_cipher_table *t;
@@ -450,7 +450,7 @@ int ssl_load_ciphers(void)
 
 #ifndef OPENSSL_NO_COMP
 
-static int sk_comp_cmp(const SSL_COMP *const *a, const SSL_COMP *const *b)
+static int __cdecl sk_comp_cmp(const SSL_COMP *const *a, const SSL_COMP *const *b)
 {
     return ((*a)->id - (*b)->id);
 }
@@ -483,7 +483,7 @@ static int load_builtin_compressions(void)
 }
 #endif
 
-int ssl_cipher_get_evp(const SSL_SESSION *s, const EVP_CIPHER **enc,
+int __cdecl ssl_cipher_get_evp(const SSL_SESSION *s, const EVP_CIPHER **enc,
                        const EVP_MD **md, int *mac_pkey_type,
                        size_t *mac_secret_size, SSL_COMP **comp, int use_etm)
 {
@@ -583,7 +583,7 @@ int ssl_cipher_get_evp(const SSL_SESSION *s, const EVP_CIPHER **enc,
     }
 }
 
-const EVP_MD *ssl_md(int idx)
+const EVP_MD * __cdecl ssl_md(int idx)
 {
     idx &= SSL_HANDSHAKE_MAC_MASK;
     if (idx < 0 || idx >= SSL_MD_NUM_IDX)
@@ -591,12 +591,12 @@ const EVP_MD *ssl_md(int idx)
     return ssl_digest_methods[idx];
 }
 
-const EVP_MD *ssl_handshake_md(SSL *s)
+const EVP_MD * __cdecl ssl_handshake_md(SSL *s)
 {
     return ssl_md(ssl_get_algorithm2(s));
 }
 
-const EVP_MD *ssl_prf_md(SSL *s)
+const EVP_MD * __cdecl ssl_prf_md(SSL *s)
 {
     return ssl_md(ssl_get_algorithm2(s) >> TLS1_PRF_DGST_SHIFT);
 }
@@ -1373,7 +1373,7 @@ static int update_cipher_list(STACK_OF(SSL_CIPHER) **cipher_list,
     return 1;
 }
 
-int SSL_CTX_set_ciphersuites(SSL_CTX *ctx, const char *str)
+int __cdecl SSL_CTX_set_ciphersuites(SSL_CTX *ctx, const char *str)
 {
     int ret = set_ciphersuites(&(ctx->tls13_ciphersuites), str);
 
@@ -1384,7 +1384,7 @@ int SSL_CTX_set_ciphersuites(SSL_CTX *ctx, const char *str)
     return ret;
 }
 
-int SSL_set_ciphersuites(SSL *s, const char *str)
+int __cdecl SSL_set_ciphersuites(SSL *s, const char *str)
 {
     STACK_OF(SSL_CIPHER) *cipher_list;
     int ret = set_ciphersuites(&(s->tls13_ciphersuites), str);
@@ -1400,7 +1400,7 @@ int SSL_set_ciphersuites(SSL *s, const char *str)
     return ret;
 }
 
-STACK_OF(SSL_CIPHER) *ssl_create_cipher_list(const SSL_METHOD *ssl_method,
+STACK_OF(SSL_CIPHER) * __cdecl ssl_create_cipher_list(const SSL_METHOD *ssl_method,
                                              STACK_OF(SSL_CIPHER) *tls13_ciphersuites,
                                              STACK_OF(SSL_CIPHER) **cipher_list,
                                              STACK_OF(SSL_CIPHER) **cipher_list_by_id,
@@ -1634,7 +1634,7 @@ STACK_OF(SSL_CIPHER) *ssl_create_cipher_list(const SSL_METHOD *ssl_method,
     return cipherstack;
 }
 
-char *SSL_CIPHER_description(const SSL_CIPHER *cipher, char *buf, int len)
+char * __cdecl SSL_CIPHER_description(const SSL_CIPHER *cipher, char *buf, int len)
 {
     const char *ver;
     const char *kx, *au, *enc, *mac;
@@ -1834,7 +1834,7 @@ char *SSL_CIPHER_description(const SSL_CIPHER *cipher, char *buf, int len)
     return buf;
 }
 
-const char *SSL_CIPHER_get_version(const SSL_CIPHER *c)
+const char * __cdecl SSL_CIPHER_get_version(const SSL_CIPHER *c)
 {
     if (c == NULL)
         return "(NONE)";
@@ -1849,7 +1849,7 @@ const char *SSL_CIPHER_get_version(const SSL_CIPHER *c)
 }
 
 /* return the actual cipher being used */
-const char *SSL_CIPHER_get_name(const SSL_CIPHER *c)
+const char * __cdecl SSL_CIPHER_get_name(const SSL_CIPHER *c)
 {
     if (c != NULL)
         return c->name;
@@ -1857,7 +1857,7 @@ const char *SSL_CIPHER_get_name(const SSL_CIPHER *c)
 }
 
 /* return the actual cipher being used in RFC standard name */
-const char *SSL_CIPHER_standard_name(const SSL_CIPHER *c)
+const char * __cdecl SSL_CIPHER_standard_name(const SSL_CIPHER *c)
 {
     if (c != NULL)
         return c->stdname;
@@ -1865,7 +1865,7 @@ const char *SSL_CIPHER_standard_name(const SSL_CIPHER *c)
 }
 
 /* return the OpenSSL name based on given RFC standard name */
-const char *OPENSSL_cipher_name(const char *stdname)
+const char * __cdecl OPENSSL_cipher_name(const char *stdname)
 {
     const SSL_CIPHER *c;
 
@@ -1876,7 +1876,7 @@ const char *OPENSSL_cipher_name(const char *stdname)
 }
 
 /* number of bits for symmetric cipher */
-int SSL_CIPHER_get_bits(const SSL_CIPHER *c, int *alg_bits)
+int __cdecl SSL_CIPHER_get_bits(const SSL_CIPHER *c, int *alg_bits)
 {
     int ret = 0;
 
@@ -1888,17 +1888,17 @@ int SSL_CIPHER_get_bits(const SSL_CIPHER *c, int *alg_bits)
     return ret;
 }
 
-uint32_t SSL_CIPHER_get_id(const SSL_CIPHER *c)
+uint32_t __cdecl SSL_CIPHER_get_id(const SSL_CIPHER *c)
 {
     return c->id;
 }
 
-uint16_t SSL_CIPHER_get_protocol_id(const SSL_CIPHER *c)
+uint16_t __cdecl SSL_CIPHER_get_protocol_id(const SSL_CIPHER *c)
 {
     return c->id & 0xFFFF;
 }
 
-SSL_COMP *ssl3_comp_find(STACK_OF(SSL_COMP) *sk, int n)
+SSL_COMP * __cdecl ssl3_comp_find(STACK_OF(SSL_COMP) *sk, int n)
 {
     SSL_COMP *ctmp;
     int i, nn;
@@ -1915,7 +1915,7 @@ SSL_COMP *ssl3_comp_find(STACK_OF(SSL_COMP) *sk, int n)
 }
 
 #ifdef OPENSSL_NO_COMP
-STACK_OF(SSL_COMP) *SSL_COMP_get_compression_methods(void)
+STACK_OF(SSL_COMP) * __cdecl SSL_COMP_get_compression_methods(void)
 {
     return NULL;
 }
@@ -1926,19 +1926,19 @@ STACK_OF(SSL_COMP) *SSL_COMP_set0_compression_methods(STACK_OF(SSL_COMP)
     return meths;
 }
 
-int SSL_COMP_add_compression_method(int id, COMP_METHOD *cm)
+int __cdecl SSL_COMP_add_compression_method(int id, COMP_METHOD *cm)
 {
     return 1;
 }
 
 #else
-STACK_OF(SSL_COMP) *SSL_COMP_get_compression_methods(void)
+STACK_OF(SSL_COMP) * __cdecl SSL_COMP_get_compression_methods(void)
 {
     load_builtin_compressions();
     return ssl_comp_methods;
 }
 
-STACK_OF(SSL_COMP) *SSL_COMP_set0_compression_methods(STACK_OF(SSL_COMP)
+STACK_OF(SSL_COMP) * __cdecl SSL_COMP_set0_compression_methods(STACK_OF(SSL_COMP)
                                                       *meths)
 {
     STACK_OF(SSL_COMP) *old_meths = ssl_comp_methods;
@@ -1946,19 +1946,19 @@ STACK_OF(SSL_COMP) *SSL_COMP_set0_compression_methods(STACK_OF(SSL_COMP)
     return old_meths;
 }
 
-static void cmeth_free(SSL_COMP *cm)
+static void __cdecl cmeth_free(SSL_COMP *cm)
 {
     OPENSSL_free(cm);
 }
 
-void ssl_comp_free_compression_methods_int(void)
+void __cdecl ssl_comp_free_compression_methods_int(void)
 {
     STACK_OF(SSL_COMP) *old_meths = ssl_comp_methods;
     ssl_comp_methods = NULL;
     sk_SSL_COMP_pop_free(old_meths, cmeth_free);
 }
 
-int SSL_COMP_add_compression_method(int id, COMP_METHOD *cm)
+int __cdecl SSL_COMP_add_compression_method(int id, COMP_METHOD *cm)
 {
     SSL_COMP *comp;
 
@@ -2008,7 +2008,7 @@ int SSL_COMP_add_compression_method(int id, COMP_METHOD *cm)
 }
 #endif
 
-const char *SSL_COMP_get_name(const COMP_METHOD *comp)
+const char * __cdecl SSL_COMP_get_name(const COMP_METHOD *comp)
 {
 #ifndef OPENSSL_NO_COMP
     return comp ? COMP_get_name(comp) : NULL;
@@ -2017,7 +2017,7 @@ const char *SSL_COMP_get_name(const COMP_METHOD *comp)
 #endif
 }
 
-const char *SSL_COMP_get0_name(const SSL_COMP *comp)
+const char * __cdecl SSL_COMP_get0_name(const SSL_COMP *comp)
 {
 #ifndef OPENSSL_NO_COMP
     return comp->name;
@@ -2026,7 +2026,7 @@ const char *SSL_COMP_get0_name(const SSL_COMP *comp)
 #endif
 }
 
-int SSL_COMP_get_id(const SSL_COMP *comp)
+int __cdecl SSL_COMP_get_id(const SSL_COMP *comp)
 {
 #ifndef OPENSSL_NO_COMP
     return comp->id;
@@ -2035,7 +2035,7 @@ int SSL_COMP_get_id(const SSL_COMP *comp)
 #endif
 }
 
-const SSL_CIPHER *ssl_get_cipher_by_char(SSL *ssl, const unsigned char *ptr,
+const SSL_CIPHER * __cdecl ssl_get_cipher_by_char(SSL *ssl, const unsigned char *ptr,
                                          int all)
 {
     const SSL_CIPHER *c = ssl->method->get_cipher_by_char(ptr);
@@ -2045,12 +2045,12 @@ const SSL_CIPHER *ssl_get_cipher_by_char(SSL *ssl, const unsigned char *ptr,
     return c;
 }
 
-const SSL_CIPHER *SSL_CIPHER_find(SSL *ssl, const unsigned char *ptr)
+const SSL_CIPHER * __cdecl SSL_CIPHER_find(SSL *ssl, const unsigned char *ptr)
 {
     return ssl->method->get_cipher_by_char(ptr);
 }
 
-int SSL_CIPHER_get_cipher_nid(const SSL_CIPHER *c)
+int __cdecl SSL_CIPHER_get_cipher_nid(const SSL_CIPHER *c)
 {
     int i;
     if (c == NULL)
@@ -2061,7 +2061,7 @@ int SSL_CIPHER_get_cipher_nid(const SSL_CIPHER *c)
     return ssl_cipher_table_cipher[i].nid;
 }
 
-int SSL_CIPHER_get_digest_nid(const SSL_CIPHER *c)
+int __cdecl SSL_CIPHER_get_digest_nid(const SSL_CIPHER *c)
 {
     int i = ssl_cipher_info_lookup(ssl_cipher_table_mac, c->algorithm_mac);
 
@@ -2070,7 +2070,7 @@ int SSL_CIPHER_get_digest_nid(const SSL_CIPHER *c)
     return ssl_cipher_table_mac[i].nid;
 }
 
-int SSL_CIPHER_get_kx_nid(const SSL_CIPHER *c)
+int __cdecl SSL_CIPHER_get_kx_nid(const SSL_CIPHER *c)
 {
     int i = ssl_cipher_info_lookup(ssl_cipher_table_kx, c->algorithm_mkey);
 
@@ -2079,7 +2079,7 @@ int SSL_CIPHER_get_kx_nid(const SSL_CIPHER *c)
     return ssl_cipher_table_kx[i].nid;
 }
 
-int SSL_CIPHER_get_auth_nid(const SSL_CIPHER *c)
+int __cdecl SSL_CIPHER_get_auth_nid(const SSL_CIPHER *c)
 {
     int i = ssl_cipher_info_lookup(ssl_cipher_table_auth, c->algorithm_auth);
 
@@ -2088,7 +2088,7 @@ int SSL_CIPHER_get_auth_nid(const SSL_CIPHER *c)
     return ssl_cipher_table_auth[i].nid;
 }
 
-const EVP_MD *SSL_CIPHER_get_handshake_digest(const SSL_CIPHER *c)
+const EVP_MD * __cdecl SSL_CIPHER_get_handshake_digest(const SSL_CIPHER *c)
 {
     int idx = c->algorithm2 & SSL_HANDSHAKE_MAC_MASK;
 
@@ -2097,12 +2097,12 @@ const EVP_MD *SSL_CIPHER_get_handshake_digest(const SSL_CIPHER *c)
     return ssl_digest_methods[idx];
 }
 
-int SSL_CIPHER_is_aead(const SSL_CIPHER *c)
+int __cdecl SSL_CIPHER_is_aead(const SSL_CIPHER *c)
 {
     return (c->algorithm_mac & SSL_AEAD) ? 1 : 0;
 }
 
-int ssl_cipher_get_overhead(const SSL_CIPHER *c, size_t *mac_overhead,
+int __cdecl ssl_cipher_get_overhead(const SSL_CIPHER *c, size_t *mac_overhead,
                             size_t *int_overhead, size_t *blocksize,
                             size_t *ext_overhead)
 {
@@ -2154,7 +2154,7 @@ int ssl_cipher_get_overhead(const SSL_CIPHER *c, size_t *mac_overhead,
     return 1;
 }
 
-int ssl_cert_is_disabled(size_t idx)
+int __cdecl ssl_cert_is_disabled(size_t idx)
 {
     const SSL_CERT_LOOKUP *cl = ssl_cert_lookup_by_idx(idx);
 
diff --git a/ssl/ssl_conf.c b/ssl/ssl_conf.c
index 9c202708d7..31dd800728 100644
--- a/ssl/ssl_conf.c
+++ b/ssl/ssl_conf.c
@@ -789,7 +789,7 @@ static int ctrl_switch_option(SSL_CONF_CTX *cctx, const ssl_conf_cmd_tbl * cmd)
     return 1;
 }
 
-int SSL_CONF_cmd(SSL_CONF_CTX *cctx, const char *cmd, const char *value)
+int __cdecl SSL_CONF_cmd(SSL_CONF_CTX *cctx, const char *cmd, const char *value)
 {
     const ssl_conf_cmd_tbl *runcmd;
     if (cmd == NULL) {
@@ -829,7 +829,7 @@ int SSL_CONF_cmd(SSL_CONF_CTX *cctx, const char *cmd, const char *value)
     return -2;
 }
 
-int SSL_CONF_cmd_argv(SSL_CONF_CTX *cctx, int *pargc, char ***pargv)
+int __cdecl SSL_CONF_cmd_argv(SSL_CONF_CTX *cctx, int *pargc, char ***pargv)
 {
     int rv;
     const char *arg = NULL, *argn;
@@ -862,7 +862,7 @@ int SSL_CONF_cmd_argv(SSL_CONF_CTX *cctx, int *pargc, char ***pargv)
     return rv;
 }
 
-int SSL_CONF_cmd_value_type(SSL_CONF_CTX *cctx, const char *cmd)
+int __cdecl SSL_CONF_cmd_value_type(SSL_CONF_CTX *cctx, const char *cmd)
 {
     if (ssl_conf_cmd_skip_prefix(cctx, &cmd)) {
         const ssl_conf_cmd_tbl *runcmd;
@@ -880,7 +880,7 @@ SSL_CONF_CTX *SSL_CONF_CTX_new(void)
     return ret;
 }
 
-int SSL_CONF_CTX_finish(SSL_CONF_CTX *cctx)
+int __cdecl SSL_CONF_CTX_finish(SSL_CONF_CTX *cctx)
 {
     /* See if any certificates are missing private keys */
     size_t i;
@@ -913,7 +913,7 @@ int SSL_CONF_CTX_finish(SSL_CONF_CTX *cctx)
     return 1;
 }
 
-void SSL_CONF_CTX_free(SSL_CONF_CTX *cctx)
+void __cdecl SSL_CONF_CTX_free(SSL_CONF_CTX *cctx)
 {
     if (cctx) {
         size_t i;
@@ -925,19 +925,19 @@ void SSL_CONF_CTX_free(SSL_CONF_CTX *cctx)
     }
 }
 
-unsigned int SSL_CONF_CTX_set_flags(SSL_CONF_CTX *cctx, unsigned int flags)
+unsigned int __cdecl SSL_CONF_CTX_set_flags(SSL_CONF_CTX *cctx, unsigned int flags)
 {
     cctx->flags |= flags;
     return cctx->flags;
 }
 
-unsigned int SSL_CONF_CTX_clear_flags(SSL_CONF_CTX *cctx, unsigned int flags)
+unsigned int __cdecl SSL_CONF_CTX_clear_flags(SSL_CONF_CTX *cctx, unsigned int flags)
 {
     cctx->flags &= ~flags;
     return cctx->flags;
 }
 
-int SSL_CONF_CTX_set1_prefix(SSL_CONF_CTX *cctx, const char *pre)
+int __cdecl SSL_CONF_CTX_set1_prefix(SSL_CONF_CTX *cctx, const char *pre)
 {
     char *tmp = NULL;
     if (pre) {
@@ -954,7 +954,7 @@ int SSL_CONF_CTX_set1_prefix(SSL_CONF_CTX *cctx, const char *pre)
     return 1;
 }
 
-void SSL_CONF_CTX_set_ssl(SSL_CONF_CTX *cctx, SSL *ssl)
+void __cdecl SSL_CONF_CTX_set_ssl(SSL_CONF_CTX *cctx, SSL *ssl)
 {
     cctx->ssl = ssl;
     cctx->ctx = NULL;
@@ -973,7 +973,7 @@ void SSL_CONF_CTX_set_ssl(SSL_CONF_CTX *cctx, SSL *ssl)
     }
 }
 
-void SSL_CONF_CTX_set_ssl_ctx(SSL_CONF_CTX *cctx, SSL_CTX *ctx)
+void __cdecl SSL_CONF_CTX_set_ssl_ctx(SSL_CONF_CTX *cctx, SSL_CTX *ctx)
 {
     cctx->ctx = ctx;
     cctx->ssl = NULL;
diff --git a/ssl/ssl_err.c b/ssl/ssl_err.c
index 4b12ed1485..bfd7e78ea4 100644
--- a/ssl/ssl_err.c
+++ b/ssl/ssl_err.c
@@ -1265,7 +1265,7 @@ static const ERR_STRING_DATA SSL_str_reasons[] = {
 
 #endif
 
-int ERR_load_SSL_strings(void)
+int __cdecl ERR_load_SSL_strings(void)
 {
 #ifndef OPENSSL_NO_ERR
     if (ERR_func_error_string(SSL_str_functs[0].error) == NULL) {
diff --git a/ssl/ssl_init.c b/ssl/ssl_init.c
index f0969fa9b1..75b442528e 100644
--- a/ssl/ssl_init.c
+++ b/ssl/ssl_init.c
@@ -17,7 +17,7 @@
 
 static int stopped;
 
-static void ssl_library_stop(void);
+static void __cdecl ssl_library_stop(void);
 
 static CRYPTO_ONCE ssl_base = CRYPTO_ONCE_STATIC_INIT;
 static int ssl_base_inited = 0;
@@ -141,7 +141,7 @@ DEFINE_RUN_ONCE_STATIC_ALT(ossl_init_no_load_ssl_strings,
     return 1;
 }
 
-static void ssl_library_stop(void)
+static void __cdecl ssl_library_stop(void)
 {
     /* Might be explicitly called and also by atexit */
     if (stopped)
@@ -178,7 +178,7 @@ static void ssl_library_stop(void)
  * called prior to any threads making calls to any OpenSSL functions,
  * i.e. passing a non-null settings value is assumed to be single-threaded.
  */
-int OPENSSL_init_ssl(uint64_t opts, const OPENSSL_INIT_SETTINGS * settings)
+int __cdecl OPENSSL_init_ssl(uint64_t opts, const OPENSSL_INIT_SETTINGS * settings)
 {
     static int stoperrset = 0;
 
diff --git a/ssl/ssl_lib.c b/ssl/ssl_lib.c
index ac820cf9fe..2ccc51cc69 100644
--- a/ssl/ssl_lib.c
+++ b/ssl/ssl_lib.c
@@ -25,7 +25,7 @@
 
 const char SSL_version_str[] = OPENSSL_VERSION_TEXT;
 
-static int ssl_undefined_function_1(SSL *ssl, SSL3_RECORD *r, size_t s, int t)
+static int __cdecl ssl_undefined_function_1(SSL *ssl, SSL3_RECORD *r, size_t s, int t)
 {
     (void)r;
     (void)s;
@@ -33,7 +33,7 @@ static int ssl_undefined_function_1(SSL *ssl, SSL3_RECORD *r, size_t s, int t)
     return ssl_undefined_function(ssl);
 }
 
-static int ssl_undefined_function_2(SSL *ssl, SSL3_RECORD *r, unsigned char *s,
+static int __cdecl ssl_undefined_function_2(SSL *ssl, SSL3_RECORD *r, unsigned char *s,
                                     int t)
 {
     (void)r;
@@ -42,7 +42,7 @@ static int ssl_undefined_function_2(SSL *ssl, SSL3_RECORD *r, unsigned char *s,
     return ssl_undefined_function(ssl);
 }
 
-static int ssl_undefined_function_3(SSL *ssl, unsigned char *r,
+static int __cdecl ssl_undefined_function_3(SSL *ssl, unsigned char *r,
                                     unsigned char *s, size_t t, size_t *u)
 {
     (void)r;
@@ -52,13 +52,13 @@ static int ssl_undefined_function_3(SSL *ssl, unsigned char *r,
     return ssl_undefined_function(ssl);
 }
 
-static int ssl_undefined_function_4(SSL *ssl, int r)
+static int __cdecl ssl_undefined_function_4(SSL *ssl, int r)
 {
     (void)r;
     return ssl_undefined_function(ssl);
 }
 
-static size_t ssl_undefined_function_5(SSL *ssl, const char *r, size_t s,
+static size_t __cdecl ssl_undefined_function_5(SSL *ssl, const char *r, size_t s,
                                        unsigned char *t)
 {
     (void)r;
@@ -67,13 +67,13 @@ static size_t ssl_undefined_function_5(SSL *ssl, const char *r, size_t s,
     return ssl_undefined_function(ssl);
 }
 
-static int ssl_undefined_function_6(int r)
+static int __cdecl ssl_undefined_function_6(int r)
 {
     (void)r;
     return ssl_undefined_function(NULL);
 }
 
-static int ssl_undefined_function_7(SSL *ssl, unsigned char *r, size_t s,
+static int __cdecl ssl_undefined_function_7(SSL *ssl, unsigned char *r, size_t s,
                                     const char *t, size_t u,
                                     const unsigned char *v, size_t w, int x)
 {
@@ -108,9 +108,9 @@ struct ssl_async_args {
     size_t num;
     enum { READFUNC, WRITEFUNC, OTHERFUNC } type;
     union {
-        int (*func_read) (SSL *, void *, size_t, size_t *);
-        int (*func_write) (SSL *, const void *, size_t, size_t *);
-        int (*func_other) (SSL *);
+        int (__cdecl *func_read) (SSL *, void *, size_t, size_t *);
+        int (__cdecl *func_write) (SSL *, const void *, size_t, size_t *);
+        int (__cdecl *func_other) (SSL *);
     } f;
 };
 
@@ -179,7 +179,7 @@ static void dane_ctx_final(struct dane_ctx_st *dctx)
     dctx->mdmax = 0;
 }
 
-static void tlsa_free(danetls_record *t)
+static void __cdecl tlsa_free(danetls_record *t)
 {
     if (t == NULL)
         return;
@@ -574,7 +574,7 @@ static void clear_ciphers(SSL *s)
     ssl_clear_hash_ctx(&s->write_hash);
 }
 
-int SSL_clear(SSL *s)
+int __cdecl SSL_clear(SSL *s)
 {
     if (s->method == NULL) {
         SSLerr(SSL_F_SSL_CLEAR, SSL_R_NO_METHOD_SPECIFIED);
@@ -653,7 +653,7 @@ int SSL_clear(SSL *s)
 }
 
 /** Used to change an SSL_CTXs default SSL method type */
-int SSL_CTX_set_ssl_version(SSL_CTX *ctx, const SSL_METHOD *meth)
+int __cdecl SSL_CTX_set_ssl_version(SSL_CTX *ctx, const SSL_METHOD *meth)
 {
     STACK_OF(SSL_CIPHER) *sk;
 
@@ -675,7 +675,7 @@ int SSL_CTX_set_ssl_version(SSL_CTX *ctx, const SSL_METHOD *meth)
     return 1;
 }
 
-SSL *SSL_new(SSL_CTX *ctx)
+SSL * __cdecl SSL_new(SSL_CTX *ctx)
 {
     SSL *s;
 
@@ -852,12 +852,12 @@ SSL *SSL_new(SSL_CTX *ctx)
     return NULL;
 }
 
-int SSL_is_dtls(const SSL *s)
+int __cdecl SSL_is_dtls(const SSL *s)
 {
     return SSL_IS_DTLS(s) ? 1 : 0;
 }
 
-int SSL_up_ref(SSL *s)
+int __cdecl SSL_up_ref(SSL *s)
 {
     int i;
 
@@ -869,7 +869,7 @@ int SSL_up_ref(SSL *s)
     return ((i > 1) ? 1 : 0);
 }
 
-int SSL_CTX_set_session_id_context(SSL_CTX *ctx, const unsigned char *sid_ctx,
+int __cdecl SSL_CTX_set_session_id_context(SSL_CTX *ctx, const unsigned char *sid_ctx,
                                    unsigned int sid_ctx_len)
 {
     if (sid_ctx_len > SSL_MAX_SID_CTX_LENGTH) {
@@ -883,7 +883,7 @@ int SSL_CTX_set_session_id_context(SSL_CTX *ctx, const unsigned char *sid_ctx,
     return 1;
 }
 
-int SSL_set_session_id_context(SSL *ssl, const unsigned char *sid_ctx,
+int __cdecl SSL_set_session_id_context(SSL *ssl, const unsigned char *sid_ctx,
                                unsigned int sid_ctx_len)
 {
     if (sid_ctx_len > SSL_MAX_SID_CTX_LENGTH) {
@@ -897,7 +897,7 @@ int SSL_set_session_id_context(SSL *ssl, const unsigned char *sid_ctx,
     return 1;
 }
 
-int SSL_CTX_set_generate_session_id(SSL_CTX *ctx, GEN_SESSION_CB cb)
+int __cdecl SSL_CTX_set_generate_session_id(SSL_CTX *ctx, GEN_SESSION_CB cb)
 {
     CRYPTO_THREAD_write_lock(ctx->lock);
     ctx->generate_session_id = cb;
@@ -905,7 +905,7 @@ int SSL_CTX_set_generate_session_id(SSL_CTX *ctx, GEN_SESSION_CB cb)
     return 1;
 }
 
-int SSL_set_generate_session_id(SSL *ssl, GEN_SESSION_CB cb)
+int __cdecl SSL_set_generate_session_id(SSL *ssl, GEN_SESSION_CB cb)
 {
     CRYPTO_THREAD_write_lock(ssl->lock);
     ssl->generate_session_id = cb;
@@ -913,7 +913,7 @@ int SSL_set_generate_session_id(SSL *ssl, GEN_SESSION_CB cb)
     return 1;
 }
 
-int SSL_has_matching_session_id(const SSL *ssl, const unsigned char *id,
+int __cdecl SSL_has_matching_session_id(const SSL *ssl, const unsigned char *id,
                                 unsigned int id_len)
 {
     /*
@@ -938,52 +938,52 @@ int SSL_has_matching_session_id(const SSL *ssl, const unsigned char *id,
     return (p != NULL);
 }
 
-int SSL_CTX_set_purpose(SSL_CTX *s, int purpose)
+int __cdecl SSL_CTX_set_purpose(SSL_CTX *s, int purpose)
 {
     return X509_VERIFY_PARAM_set_purpose(s->param, purpose);
 }
 
-int SSL_set_purpose(SSL *s, int purpose)
+int __cdecl SSL_set_purpose(SSL *s, int purpose)
 {
     return X509_VERIFY_PARAM_set_purpose(s->param, purpose);
 }
 
-int SSL_CTX_set_trust(SSL_CTX *s, int trust)
+int __cdecl SSL_CTX_set_trust(SSL_CTX *s, int trust)
 {
     return X509_VERIFY_PARAM_set_trust(s->param, trust);
 }
 
-int SSL_set_trust(SSL *s, int trust)
+int __cdecl SSL_set_trust(SSL *s, int trust)
 {
     return X509_VERIFY_PARAM_set_trust(s->param, trust);
 }
 
-int SSL_set1_host(SSL *s, const char *hostname)
+int __cdecl SSL_set1_host(SSL *s, const char *hostname)
 {
     return X509_VERIFY_PARAM_set1_host(s->param, hostname, 0);
 }
 
-int SSL_add1_host(SSL *s, const char *hostname)
+int __cdecl SSL_add1_host(SSL *s, const char *hostname)
 {
     return X509_VERIFY_PARAM_add1_host(s->param, hostname, 0);
 }
 
-void SSL_set_hostflags(SSL *s, unsigned int flags)
+void __cdecl SSL_set_hostflags(SSL *s, unsigned int flags)
 {
     X509_VERIFY_PARAM_set_hostflags(s->param, flags);
 }
 
-const char *SSL_get0_peername(SSL *s)
+const char * __cdecl SSL_get0_peername(SSL *s)
 {
     return X509_VERIFY_PARAM_get0_peername(s->param);
 }
 
-int SSL_CTX_dane_enable(SSL_CTX *ctx)
+int __cdecl SSL_CTX_dane_enable(SSL_CTX *ctx)
 {
     return dane_ctx_enable(&ctx->dane);
 }
 
-unsigned long SSL_CTX_dane_set_flags(SSL_CTX *ctx, unsigned long flags)
+unsigned long __cdecl SSL_CTX_dane_set_flags(SSL_CTX *ctx, unsigned long flags)
 {
     unsigned long orig = ctx->dane.flags;
 
@@ -991,7 +991,7 @@ unsigned long SSL_CTX_dane_set_flags(SSL_CTX *ctx, unsigned long flags)
     return orig;
 }
 
-unsigned long SSL_CTX_dane_clear_flags(SSL_CTX *ctx, unsigned long flags)
+unsigned long __cdecl SSL_CTX_dane_clear_flags(SSL_CTX *ctx, unsigned long flags)
 {
     unsigned long orig = ctx->dane.flags;
 
@@ -999,7 +999,7 @@ unsigned long SSL_CTX_dane_clear_flags(SSL_CTX *ctx, unsigned long flags)
     return orig;
 }
 
-int SSL_dane_enable(SSL *s, const char *basedomain)
+int __cdecl SSL_dane_enable(SSL *s, const char *basedomain)
 {
     SSL_DANE *dane = &s->dane;
 
@@ -1042,7 +1042,7 @@ int SSL_dane_enable(SSL *s, const char *basedomain)
     return 1;
 }
 
-unsigned long SSL_dane_set_flags(SSL *ssl, unsigned long flags)
+unsigned long __cdecl SSL_dane_set_flags(SSL *ssl, unsigned long flags)
 {
     unsigned long orig = ssl->dane.flags;
 
@@ -1050,7 +1050,7 @@ unsigned long SSL_dane_set_flags(SSL *ssl, unsigned long flags)
     return orig;
 }
 
-unsigned long SSL_dane_clear_flags(SSL *ssl, unsigned long flags)
+unsigned long __cdecl SSL_dane_clear_flags(SSL *ssl, unsigned long flags)
 {
     unsigned long orig = ssl->dane.flags;
 
@@ -1058,7 +1058,7 @@ unsigned long SSL_dane_clear_flags(SSL *ssl, unsigned long flags)
     return orig;
 }
 
-int SSL_get0_dane_authority(SSL *s, X509 **mcert, EVP_PKEY **mspki)
+int __cdecl SSL_get0_dane_authority(SSL *s, X509 **mcert, EVP_PKEY **mspki)
 {
     SSL_DANE *dane = &s->dane;
 
@@ -1073,7 +1073,7 @@ int SSL_get0_dane_authority(SSL *s, X509 **mcert, EVP_PKEY **mspki)
     return dane->mdpth;
 }
 
-int SSL_get0_dane_tlsa(SSL *s, uint8_t *usage, uint8_t *selector,
+int __cdecl SSL_get0_dane_tlsa(SSL *s, uint8_t *usage, uint8_t *selector,
                        uint8_t *mtype, unsigned const char **data, size_t *dlen)
 {
     SSL_DANE *dane = &s->dane;
@@ -1095,49 +1095,49 @@ int SSL_get0_dane_tlsa(SSL *s, uint8_t *usage, uint8_t *selector,
     return dane->mdpth;
 }
 
-SSL_DANE *SSL_get0_dane(SSL *s)
+SSL_DANE * __cdecl SSL_get0_dane(SSL *s)
 {
     return &s->dane;
 }
 
-int SSL_dane_tlsa_add(SSL *s, uint8_t usage, uint8_t selector,
+int __cdecl SSL_dane_tlsa_add(SSL *s, uint8_t usage, uint8_t selector,
                       uint8_t mtype, unsigned const char *data, size_t dlen)
 {
     return dane_tlsa_add(&s->dane, usage, selector, mtype, data, dlen);
 }
 
-int SSL_CTX_dane_mtype_set(SSL_CTX *ctx, const EVP_MD *md, uint8_t mtype,
+int __cdecl SSL_CTX_dane_mtype_set(SSL_CTX *ctx, const EVP_MD *md, uint8_t mtype,
                            uint8_t ord)
 {
     return dane_mtype_set(&ctx->dane, md, mtype, ord);
 }
 
-int SSL_CTX_set1_param(SSL_CTX *ctx, X509_VERIFY_PARAM *vpm)
+int __cdecl SSL_CTX_set1_param(SSL_CTX *ctx, X509_VERIFY_PARAM *vpm)
 {
     return X509_VERIFY_PARAM_set1(ctx->param, vpm);
 }
 
-int SSL_set1_param(SSL *ssl, X509_VERIFY_PARAM *vpm)
+int __cdecl SSL_set1_param(SSL *ssl, X509_VERIFY_PARAM *vpm)
 {
     return X509_VERIFY_PARAM_set1(ssl->param, vpm);
 }
 
-X509_VERIFY_PARAM *SSL_CTX_get0_param(SSL_CTX *ctx)
+X509_VERIFY_PARAM * __cdecl SSL_CTX_get0_param(SSL_CTX *ctx)
 {
     return ctx->param;
 }
 
-X509_VERIFY_PARAM *SSL_get0_param(SSL *ssl)
+X509_VERIFY_PARAM * __cdecl SSL_get0_param(SSL *ssl)
 {
     return ssl->param;
 }
 
-void SSL_certs_clear(SSL *s)
+void __cdecl SSL_certs_clear(SSL *s)
 {
     ssl_cert_clear_certs(s->cert);
 }
 
-void SSL_free(SSL *s)
+void __cdecl SSL_free(SSL *s)
 {
     int i;
 
@@ -1231,13 +1231,13 @@ void SSL_free(SSL *s)
     OPENSSL_free(s);
 }
 
-void SSL_set0_rbio(SSL *s, BIO *rbio)
+void __cdecl SSL_set0_rbio(SSL *s, BIO *rbio)
 {
     BIO_free_all(s->rbio);
     s->rbio = rbio;
 }
 
-void SSL_set0_wbio(SSL *s, BIO *wbio)
+void __cdecl SSL_set0_wbio(SSL *s, BIO *wbio)
 {
     /*
      * If the output buffering BIO is still in place, remove it
@@ -1253,7 +1253,7 @@ void SSL_set0_wbio(SSL *s, BIO *wbio)
         s->wbio = BIO_push(s->bbio, s->wbio);
 }
 
-void SSL_set_bio(SSL *s, BIO *rbio, BIO *wbio)
+void __cdecl SSL_set_bio(SSL *s, BIO *rbio, BIO *wbio)
 {
     /*
      * For historical reasons, this function has many different cases in
@@ -1293,12 +1293,12 @@ void SSL_set_bio(SSL *s, BIO *rbio, BIO *wbio)
     SSL_set0_wbio(s, wbio);
 }
 
-BIO *SSL_get_rbio(const SSL *s)
+BIO * __cdecl SSL_get_rbio(const SSL *s)
 {
     return s->rbio;
 }
 
-BIO *SSL_get_wbio(const SSL *s)
+BIO * __cdecl SSL_get_wbio(const SSL *s)
 {
     if (s->bbio != NULL) {
         /*
@@ -1310,12 +1310,12 @@ BIO *SSL_get_wbio(const SSL *s)
     return s->wbio;
 }
 
-int SSL_get_fd(const SSL *s)
+int __cdecl SSL_get_fd(const SSL *s)
 {
     return SSL_get_rfd(s);
 }
 
-int SSL_get_rfd(const SSL *s)
+int __cdecl SSL_get_rfd(const SSL *s)
 {
     int ret = -1;
     BIO *b, *r;
@@ -1327,7 +1327,7 @@ int SSL_get_rfd(const SSL *s)
     return ret;
 }
 
-int SSL_get_wfd(const SSL *s)
+int __cdecl SSL_get_wfd(const SSL *s)
 {
     int ret = -1;
     BIO *b, *r;
@@ -1340,7 +1340,7 @@ int SSL_get_wfd(const SSL *s)
 }
 
 #ifndef OPENSSL_NO_SOCK
-int SSL_set_fd(SSL *s, int fd)
+int __cdecl SSL_set_fd(SSL *s, int fd)
 {
     int ret = 0;
     BIO *bio = NULL;
@@ -1358,7 +1358,7 @@ int SSL_set_fd(SSL *s, int fd)
     return ret;
 }
 
-int SSL_set_wfd(SSL *s, int fd)
+int __cdecl SSL_set_wfd(SSL *s, int fd)
 {
     BIO *rbio = SSL_get_rbio(s);
 
@@ -1379,7 +1379,7 @@ int SSL_set_wfd(SSL *s, int fd)
     return 1;
 }
 
-int SSL_set_rfd(SSL *s, int fd)
+int __cdecl SSL_set_rfd(SSL *s, int fd)
 {
     BIO *wbio = SSL_get_wbio(s);
 
@@ -1403,7 +1403,7 @@ int SSL_set_rfd(SSL *s, int fd)
 #endif
 
 /* return length of latest Finished message we sent, copy to 'buf' */
-size_t SSL_get_finished(const SSL *s, void *buf, size_t count)
+size_t __cdecl SSL_get_finished(const SSL *s, void *buf, size_t count)
 {
     size_t ret = 0;
 
@@ -1417,7 +1417,7 @@ size_t SSL_get_finished(const SSL *s, void *buf, size_t count)
 }
 
 /* return length of latest Finished message we expected, copy to 'buf' */
-size_t SSL_get_peer_finished(const SSL *s, void *buf, size_t count)
+size_t __cdecl SSL_get_peer_finished(const SSL *s, void *buf, size_t count)
 {
     size_t ret = 0;
 
@@ -1430,12 +1430,12 @@ size_t SSL_get_peer_finished(const SSL *s, void *buf, size_t count)
     return ret;
 }
 
-int SSL_get_verify_mode(const SSL *s)
+int __cdecl SSL_get_verify_mode(const SSL *s)
 {
     return s->verify_mode;
 }
 
-int SSL_get_verify_depth(const SSL *s)
+int __cdecl SSL_get_verify_depth(const SSL *s)
 {
     return X509_VERIFY_PARAM_get_depth(s->param);
 }
@@ -1444,12 +1444,12 @@ int (*SSL_get_verify_callback(const SSL *s)) (int, X509_STORE_CTX *) {
     return s->verify_callback;
 }
 
-int SSL_CTX_get_verify_mode(const SSL_CTX *ctx)
+int __cdecl SSL_CTX_get_verify_mode(const SSL_CTX *ctx)
 {
     return ctx->verify_mode;
 }
 
-int SSL_CTX_get_verify_depth(const SSL_CTX *ctx)
+int __cdecl SSL_CTX_get_verify_depth(const SSL_CTX *ctx)
 {
     return X509_VERIFY_PARAM_get_depth(ctx->param);
 }
@@ -1458,7 +1458,7 @@ int (*SSL_CTX_get_verify_callback(const SSL_CTX *ctx)) (int, X509_STORE_CTX *) {
     return ctx->default_verify_callback;
 }
 
-void SSL_set_verify(SSL *s, int mode,
+void __cdecl SSL_set_verify(SSL *s, int mode,
                     int (*callback) (int ok, X509_STORE_CTX *ctx))
 {
     s->verify_mode = mode;
@@ -1466,22 +1466,22 @@ void SSL_set_verify(SSL *s, int mode,
         s->verify_callback = callback;
 }
 
-void SSL_set_verify_depth(SSL *s, int depth)
+void __cdecl SSL_set_verify_depth(SSL *s, int depth)
 {
     X509_VERIFY_PARAM_set_depth(s->param, depth);
 }
 
-void SSL_set_read_ahead(SSL *s, int yes)
+void __cdecl SSL_set_read_ahead(SSL *s, int yes)
 {
     RECORD_LAYER_set_read_ahead(&s->rlayer, yes);
 }
 
-int SSL_get_read_ahead(const SSL *s)
+int __cdecl SSL_get_read_ahead(const SSL *s)
 {
     return RECORD_LAYER_get_read_ahead(&s->rlayer);
 }
 
-int SSL_pending(const SSL *s)
+int __cdecl SSL_pending(const SSL *s)
 {
     size_t pending = s->method->ssl_pending(s);
 
@@ -1498,7 +1498,7 @@ int SSL_pending(const SSL *s)
     return pending < INT_MAX ? (int)pending : INT_MAX;
 }
 
-int SSL_has_pending(const SSL *s)
+int __cdecl SSL_has_pending(const SSL *s)
 {
     /*
      * Similar to SSL_pending() but returns a 1 to indicate that we have
@@ -1514,7 +1514,7 @@ int SSL_has_pending(const SSL *s)
     return RECORD_LAYER_read_pending(&s->rlayer);
 }
 
-X509 *SSL_get_peer_certificate(const SSL *s)
+X509 * __cdecl SSL_get_peer_certificate(const SSL *s)
 {
     X509 *r;
 
@@ -1531,7 +1531,7 @@ X509 *SSL_get_peer_certificate(const SSL *s)
     return r;
 }
 
-STACK_OF(X509) *SSL_get_peer_cert_chain(const SSL *s)
+STACK_OF(X509) * __cdecl SSL_get_peer_cert_chain(const SSL *s)
 {
     STACK_OF(X509) *r;
 
@@ -1552,7 +1552,7 @@ STACK_OF(X509) *SSL_get_peer_cert_chain(const SSL *s)
  * Now in theory, since the calling process own 't' it should be safe to
  * modify.  We need to be able to read f without being hassled
  */
-int SSL_copy_session_id(SSL *t, const SSL *f)
+int __cdecl SSL_copy_session_id(SSL *t, const SSL *f)
 {
     int i;
     /* Do we need to to SSL locking? */
@@ -1581,7 +1581,7 @@ int SSL_copy_session_id(SSL *t, const SSL *f)
 }
 
 /* Fix this so it checks all the valid key/cert options */
-int SSL_CTX_check_private_key(const SSL_CTX *ctx)
+int __cdecl SSL_CTX_check_private_key(const SSL_CTX *ctx)
 {
     if ((ctx == NULL) || (ctx->cert->key->x509 == NULL)) {
         SSLerr(SSL_F_SSL_CTX_CHECK_PRIVATE_KEY, SSL_R_NO_CERTIFICATE_ASSIGNED);
@@ -1596,7 +1596,7 @@ int SSL_CTX_check_private_key(const SSL_CTX *ctx)
 }
 
 /* Fix this function so that it takes an optional type parameter */
-int SSL_check_private_key(const SSL *ssl)
+int __cdecl SSL_check_private_key(const SSL *ssl)
 {
     if (ssl == NULL) {
         SSLerr(SSL_F_SSL_CHECK_PRIVATE_KEY, ERR_R_PASSED_NULL_PARAMETER);
@@ -1614,7 +1614,7 @@ int SSL_check_private_key(const SSL *ssl)
                                    ssl->cert->key->privatekey);
 }
 
-int SSL_waiting_for_async(SSL *s)
+int __cdecl SSL_waiting_for_async(SSL *s)
 {
     if (s->job)
         return 1;
@@ -1622,7 +1622,7 @@ int SSL_waiting_for_async(SSL *s)
     return 0;
 }
 
-int SSL_get_all_async_fds(SSL *s, OSSL_ASYNC_FD *fds, size_t *numfds)
+int __cdecl SSL_get_all_async_fds(SSL *s, OSSL_ASYNC_FD *fds, size_t *numfds)
 {
     ASYNC_WAIT_CTX *ctx = s->waitctx;
 
@@ -1631,7 +1631,7 @@ int SSL_get_all_async_fds(SSL *s, OSSL_ASYNC_FD *fds, size_t *numfds)
     return ASYNC_WAIT_CTX_get_all_fds(ctx, fds, numfds);
 }
 
-int SSL_get_changed_async_fds(SSL *s, OSSL_ASYNC_FD *addfd, size_t *numaddfds,
+int __cdecl SSL_get_changed_async_fds(SSL *s, OSSL_ASYNC_FD *addfd, size_t *numaddfds,
                               OSSL_ASYNC_FD *delfd, size_t *numdelfds)
 {
     ASYNC_WAIT_CTX *ctx = s->waitctx;
@@ -1642,7 +1642,7 @@ int SSL_get_changed_async_fds(SSL *s, OSSL_ASYNC_FD *addfd, size_t *numaddfds,
                                           numdelfds);
 }
 
-int SSL_accept(SSL *s)
+int __cdecl SSL_accept(SSL *s)
 {
     if (s->handshake_func == NULL) {
         /* Not properly initialized yet */
@@ -1652,7 +1652,7 @@ int SSL_accept(SSL *s)
     return SSL_do_handshake(s);
 }
 
-int SSL_connect(SSL *s)
+int __cdecl SSL_connect(SSL *s)
 {
     if (s->handshake_func == NULL) {
         /* Not properly initialized yet */
@@ -1662,13 +1662,13 @@ int SSL_connect(SSL *s)
     return SSL_do_handshake(s);
 }
 
-long SSL_get_default_timeout(const SSL *s)
+long __cdecl SSL_get_default_timeout(const SSL *s)
 {
     return s->method->get_timeout();
 }
 
 static int ssl_start_async_job(SSL *s, struct ssl_async_args *args,
-                               int (*func) (void *))
+                               int (__cdecl *func) (void *))
 {
     int ret;
     if (s->waitctx == NULL) {
@@ -1699,7 +1699,7 @@ static int ssl_start_async_job(SSL *s, struct ssl_async_args *args,
     }
 }
 
-static int ssl_io_intern(void *vargs)
+static int __cdecl ssl_io_intern(void *vargs)
 {
     struct ssl_async_args *args;
     SSL *s;
@@ -1721,7 +1721,7 @@ static int ssl_io_intern(void *vargs)
     return -1;
 }
 
-int ssl_read_internal(SSL *s, void *buf, size_t num, size_t *readbytes)
+int __cdecl ssl_read_internal(SSL *s, void *buf, size_t num, size_t *readbytes)
 {
     if (s->handshake_func == NULL) {
         SSLerr(SSL_F_SSL_READ_INTERNAL, SSL_R_UNINITIALIZED);
@@ -1762,7 +1762,7 @@ int ssl_read_internal(SSL *s, void *buf, size_t num, size_t *readbytes)
     }
 }
 
-int SSL_read(SSL *s, void *buf, int num)
+int __cdecl SSL_read(SSL *s, void *buf, int num)
 {
     int ret;
     size_t readbytes;
@@ -1784,7 +1784,7 @@ int SSL_read(SSL *s, void *buf, int num)
     return ret;
 }
 
-int SSL_read_ex(SSL *s, void *buf, size_t num, size_t *readbytes)
+int __cdecl SSL_read_ex(SSL *s, void *buf, size_t num, size_t *readbytes)
 {
     int ret = ssl_read_internal(s, buf, num, readbytes);
 
@@ -1793,7 +1793,7 @@ int SSL_read_ex(SSL *s, void *buf, size_t num, size_t *readbytes)
     return ret;
 }
 
-int SSL_read_early_data(SSL *s, void *buf, size_t num, size_t *readbytes)
+int __cdecl SSL_read_early_data(SSL *s, void *buf, size_t num, size_t *readbytes)
 {
     int ret;
 
@@ -1848,7 +1848,7 @@ int SSL_read_early_data(SSL *s, void *buf, size_t num, size_t *readbytes)
     }
 }
 
-int SSL_get_early_data_status(const SSL *s)
+int __cdecl SSL_get_early_data_status(const SSL *s)
 {
     return s->ext.early_data;
 }
@@ -1881,7 +1881,7 @@ static int ssl_peek_internal(SSL *s, void *buf, size_t num, size_t *readbytes)
     }
 }
 
-int SSL_peek(SSL *s, void *buf, int num)
+int __cdecl SSL_peek(SSL *s, void *buf, int num)
 {
     int ret;
     size_t readbytes;
@@ -1904,7 +1904,7 @@ int SSL_peek(SSL *s, void *buf, int num)
 }
 
 
-int SSL_peek_ex(SSL *s, void *buf, size_t num, size_t *readbytes)
+int __cdecl SSL_peek_ex(SSL *s, void *buf, size_t num, size_t *readbytes)
 {
     int ret = ssl_peek_internal(s, buf, num, readbytes);
 
@@ -1913,7 +1913,7 @@ int SSL_peek_ex(SSL *s, void *buf, size_t num, size_t *readbytes)
     return ret;
 }
 
-int ssl_write_internal(SSL *s, const void *buf, size_t num, size_t *written)
+int __cdecl ssl_write_internal(SSL *s, const void *buf, size_t num, size_t *written)
 {
     if (s->handshake_func == NULL) {
         SSLerr(SSL_F_SSL_WRITE_INTERNAL, SSL_R_UNINITIALIZED);
@@ -1953,7 +1953,7 @@ int ssl_write_internal(SSL *s, const void *buf, size_t num, size_t *written)
     }
 }
 
-int SSL_write(SSL *s, const void *buf, int num)
+int __cdecl SSL_write(SSL *s, const void *buf, int num)
 {
     int ret;
     size_t written;
@@ -1975,7 +1975,7 @@ int SSL_write(SSL *s, const void *buf, int num)
     return ret;
 }
 
-int SSL_write_ex(SSL *s, const void *buf, size_t num, size_t *written)
+int __cdecl SSL_write_ex(SSL *s, const void *buf, size_t num, size_t *written)
 {
     int ret = ssl_write_internal(s, buf, num, written);
 
@@ -1984,7 +1984,7 @@ int SSL_write_ex(SSL *s, const void *buf, size_t num, size_t *written)
     return ret;
 }
 
-int SSL_write_early_data(SSL *s, const void *buf, size_t num, size_t *written)
+int __cdecl SSL_write_early_data(SSL *s, const void *buf, size_t num, size_t *written)
 {
     int ret, early_data_state;
     size_t writtmp;
@@ -2056,7 +2056,7 @@ int SSL_write_early_data(SSL *s, const void *buf, size_t num, size_t *written)
     }
 }
 
-int SSL_shutdown(SSL *s)
+int __cdecl SSL_shutdown(SSL *s)
 {
     /*
      * Note that this function behaves differently from what one might
@@ -2088,7 +2088,7 @@ int SSL_shutdown(SSL *s)
     }
 }
 
-int SSL_key_update(SSL *s, int updatetype)
+int __cdecl SSL_key_update(SSL *s, int updatetype)
 {
     /*
      * TODO(TLS1.3): How will applications know whether TLSv1.3 has been
@@ -2116,12 +2116,12 @@ int SSL_key_update(SSL *s, int updatetype)
     return 1;
 }
 
-int SSL_get_key_update_type(const SSL *s)
+int __cdecl SSL_get_key_update_type(const SSL *s)
 {
     return s->key_update;
 }
 
-int SSL_renegotiate(SSL *s)
+int __cdecl SSL_renegotiate(SSL *s)
 {
     if (SSL_IS_TLS13(s)) {
         SSLerr(SSL_F_SSL_RENEGOTIATE, SSL_R_WRONG_SSL_VERSION);
@@ -2139,7 +2139,7 @@ int SSL_renegotiate(SSL *s)
     return s->method->ssl_renegotiate(s);
 }
 
-int SSL_renegotiate_abbreviated(SSL *s)
+int __cdecl SSL_renegotiate_abbreviated(SSL *s)
 {
     if (SSL_IS_TLS13(s)) {
         SSLerr(SSL_F_SSL_RENEGOTIATE_ABBREVIATED, SSL_R_WRONG_SSL_VERSION);
@@ -2157,7 +2157,7 @@ int SSL_renegotiate_abbreviated(SSL *s)
     return s->method->ssl_renegotiate(s);
 }
 
-int SSL_renegotiate_pending(const SSL *s)
+int __cdecl SSL_renegotiate_pending(const SSL *s)
 {
     /*
      * becomes true when negotiation is requested; false again once a
@@ -2166,7 +2166,7 @@ int SSL_renegotiate_pending(const SSL *s)
     return (s->renegotiate != 0);
 }
 
-long SSL_ctrl(SSL *s, int cmd, long larg, void *parg)
+long __cdecl SSL_ctrl(SSL *s, int cmd, long larg, void *parg)
 {
     long l;
 
@@ -2256,11 +2256,11 @@ long SSL_ctrl(SSL *s, int cmd, long larg, void *parg)
     }
 }
 
-long SSL_callback_ctrl(SSL *s, int cmd, void (*fp) (void))
+long __cdecl SSL_callback_ctrl(SSL *s, int cmd, void (__cdecl *fp) (void))
 {
     switch (cmd) {
     case SSL_CTRL_SET_MSG_CALLBACK:
-        s->msg_callback = (void (*)
+        s->msg_callback = (void (__cdecl *)
                            (int write_p, int version, int content_type,
                             const void *buf, size_t len, SSL *ssl,
                             void *arg))(fp);
@@ -2276,7 +2276,7 @@ LHASH_OF(SSL_SESSION) *SSL_CTX_sessions(SSL_CTX *ctx)
     return ctx->sessions;
 }
 
-long SSL_CTX_ctrl(SSL_CTX *ctx, int cmd, long larg, void *parg)
+long __cdecl SSL_CTX_ctrl(SSL_CTX *ctx, int cmd, long larg, void *parg)
 {
     long l;
     /* For some cases with ctx == NULL perform syntax checks */
@@ -2396,11 +2396,11 @@ long SSL_CTX_ctrl(SSL_CTX *ctx, int cmd, long larg, void *parg)
     }
 }
 
-long SSL_CTX_callback_ctrl(SSL_CTX *ctx, int cmd, void (*fp) (void))
+long __cdecl SSL_CTX_callback_ctrl(SSL_CTX *ctx, int cmd, void (__cdecl *fp) (void))
 {
     switch (cmd) {
     case SSL_CTRL_SET_MSG_CALLBACK:
-        ctx->msg_callback = (void (*)
+        ctx->msg_callback = (void (__cdecl *)
                              (int write_p, int version, int content_type,
                               const void *buf, size_t len, SSL *ssl,
                               void *arg))(fp);
@@ -2411,7 +2411,7 @@ long SSL_CTX_callback_ctrl(SSL_CTX *ctx, int cmd, void (*fp) (void))
     }
 }
 
-int ssl_cipher_id_cmp(const SSL_CIPHER *a, const SSL_CIPHER *b)
+int __cdecl ssl_cipher_id_cmp(const SSL_CIPHER *a, const SSL_CIPHER *b)
 {
     if (a->id > b->id)
         return 1;
@@ -2420,7 +2420,7 @@ int ssl_cipher_id_cmp(const SSL_CIPHER *a, const SSL_CIPHER *b)
     return 0;
 }
 
-int ssl_cipher_ptr_id_cmp(const SSL_CIPHER *const *ap,
+int __cdecl ssl_cipher_ptr_id_cmp(const SSL_CIPHER *const *ap,
                           const SSL_CIPHER *const *bp)
 {
     if ((*ap)->id > (*bp)->id)
@@ -2432,7 +2432,7 @@ int ssl_cipher_ptr_id_cmp(const SSL_CIPHER *const *ap,
 
 /** return a STACK of the ciphers available for the SSL and in order of
  * preference */
-STACK_OF(SSL_CIPHER) *SSL_get_ciphers(const SSL *s)
+STACK_OF(SSL_CIPHER) * __cdecl SSL_get_ciphers(const SSL *s)
 {
     if (s != NULL) {
         if (s->cipher_list != NULL) {
@@ -2444,14 +2444,14 @@ STACK_OF(SSL_CIPHER) *SSL_get_ciphers(const SSL *s)
     return NULL;
 }
 
-STACK_OF(SSL_CIPHER) *SSL_get_client_ciphers(const SSL *s)
+STACK_OF(SSL_CIPHER) * __cdecl SSL_get_client_ciphers(const SSL *s)
 {
     if ((s == NULL) || !s->server)
         return NULL;
     return s->peer_ciphers;
 }
 
-STACK_OF(SSL_CIPHER) *SSL_get1_supported_ciphers(SSL *s)
+STACK_OF(SSL_CIPHER) * __cdecl SSL_get1_supported_ciphers(SSL *s)
 {
     STACK_OF(SSL_CIPHER) *sk = NULL, *ciphers;
     int i;
@@ -2479,7 +2479,7 @@ STACK_OF(SSL_CIPHER) *SSL_get1_supported_ciphers(SSL *s)
 
 /** return a STACK of the ciphers available for the SSL and in order of
  * algorithm id */
-STACK_OF(SSL_CIPHER) *ssl_get_ciphers_by_id(SSL *s)
+STACK_OF(SSL_CIPHER) * __cdecl ssl_get_ciphers_by_id(SSL *s)
 {
     if (s != NULL) {
         if (s->cipher_list_by_id != NULL) {
@@ -2492,7 +2492,7 @@ STACK_OF(SSL_CIPHER) *ssl_get_ciphers_by_id(SSL *s)
 }
 
 /** The old interface to get the same thing as SSL_get_ciphers() */
-const char *SSL_get_cipher_list(const SSL *s, int n)
+const char * __cdecl SSL_get_cipher_list(const SSL *s, int n)
 {
     const SSL_CIPHER *c;
     STACK_OF(SSL_CIPHER) *sk;
@@ -2510,7 +2510,7 @@ const char *SSL_get_cipher_list(const SSL *s, int n)
 
 /** return a STACK of the ciphers available for the SSL_CTX and in order of
  * preference */
-STACK_OF(SSL_CIPHER) *SSL_CTX_get_ciphers(const SSL_CTX *ctx)
+STACK_OF(SSL_CIPHER) * __cdecl SSL_CTX_get_ciphers(const SSL_CTX *ctx)
 {
     if (ctx != NULL)
         return ctx->cipher_list;
@@ -2538,7 +2538,7 @@ static int cipher_list_tls12_num(STACK_OF(SSL_CIPHER) *sk)
 }
 
 /** specify the ciphers to be used by default by the SSL_CTX */
-int SSL_CTX_set_cipher_list(SSL_CTX *ctx, const char *str)
+int __cdecl SSL_CTX_set_cipher_list(SSL_CTX *ctx, const char *str)
 {
     STACK_OF(SSL_CIPHER) *sk;
 
@@ -2562,7 +2562,7 @@ int SSL_CTX_set_cipher_list(SSL_CTX *ctx, const char *str)
 }
 
 /** specify the ciphers to be used by the SSL */
-int SSL_set_cipher_list(SSL *s, const char *str)
+int __cdecl SSL_set_cipher_list(SSL *s, const char *str)
 {
     STACK_OF(SSL_CIPHER) *sk;
 
@@ -2579,7 +2579,7 @@ int SSL_set_cipher_list(SSL *s, const char *str)
     return 1;
 }
 
-char *SSL_get_shared_ciphers(const SSL *s, char *buf, int size)
+char * __cdecl SSL_get_shared_ciphers(const SSL *s, char *buf, int size)
 {
     char *p;
     STACK_OF(SSL_CIPHER) *clntsk, *srvrsk;
@@ -2627,7 +2627,7 @@ char *SSL_get_shared_ciphers(const SSL *s, char *buf, int size)
  * So far, only host_name types are defined (RFC 3546).
  */
 
-const char *SSL_get_servername(const SSL *s, const int type)
+const char * __cdecl SSL_get_servername(const SSL *s, const int type)
 {
     if (type != TLSEXT_NAMETYPE_host_name)
         return NULL;
@@ -2643,7 +2643,7 @@ const char *SSL_get_servername(const SSL *s, const int type)
     return s->ext.hostname;
 }
 
-int SSL_get_servername_type(const SSL *s)
+int __cdecl SSL_get_servername_type(const SSL *s)
 {
     if (s->session
         && (!s->ext.hostname ? s->session->
@@ -2672,7 +2672,7 @@ int SSL_get_servername_type(const SSL *s)
  * case 2. It returns either OPENSSL_NPN_NEGOTIATED if a common protocol was
  * found, or OPENSSL_NPN_NO_OVERLAP if the fallback case was reached.
  */
-int SSL_select_next_proto(unsigned char **out, unsigned char *outlen,
+int __cdecl SSL_select_next_proto(unsigned char **out, unsigned char *outlen,
                           const unsigned char *server,
                           unsigned int server_len,
                           const unsigned char *client, unsigned int client_len)
@@ -2719,7 +2719,7 @@ int SSL_select_next_proto(unsigned char **out, unsigned char *outlen,
  * this function need not be a member of the list of supported protocols
  * provided by the callback.
  */
-void SSL_get0_next_proto_negotiated(const SSL *s, const unsigned char **data,
+void __cdecl SSL_get0_next_proto_negotiated(const SSL *s, const unsigned char **data,
                                     unsigned *len)
 {
     *data = s->ext.npn;
@@ -2740,7 +2740,7 @@ void SSL_get0_next_proto_negotiated(const SSL *s, const unsigned char **data,
  * wishes to advertise. Otherwise, no such extension will be included in the
  * ServerHello.
  */
-void SSL_CTX_set_npn_advertised_cb(SSL_CTX *ctx,
+void __cdecl SSL_CTX_set_npn_advertised_cb(SSL_CTX *ctx,
                                    SSL_CTX_npn_advertised_cb_func cb,
                                    void *arg)
 {
@@ -2758,7 +2758,7 @@ void SSL_CTX_set_npn_advertised_cb(SSL_CTX *ctx,
  * select a protocol. It is fatal to the connection if this callback returns
  * a value other than SSL_TLSEXT_ERR_OK.
  */
-void SSL_CTX_set_npn_select_cb(SSL_CTX *ctx,
+void __cdecl SSL_CTX_set_npn_select_cb(SSL_CTX *ctx,
                                SSL_CTX_npn_select_cb_func cb,
                                void *arg)
 {
@@ -2772,7 +2772,7 @@ void SSL_CTX_set_npn_select_cb(SSL_CTX *ctx,
  * |protos| must be in wire-format (i.e. a series of non-empty, 8-bit
  * length-prefixed strings). Returns 0 on success.
  */
-int SSL_CTX_set_alpn_protos(SSL_CTX *ctx, const unsigned char *protos,
+int __cdecl SSL_CTX_set_alpn_protos(SSL_CTX *ctx, const unsigned char *protos,
                             unsigned int protos_len)
 {
     OPENSSL_free(ctx->ext.alpn);
@@ -2791,7 +2791,7 @@ int SSL_CTX_set_alpn_protos(SSL_CTX *ctx, const unsigned char *protos,
  * |protos| must be in wire-format (i.e. a series of non-empty, 8-bit
  * length-prefixed strings). Returns 0 on success.
  */
-int SSL_set_alpn_protos(SSL *ssl, const unsigned char *protos,
+int __cdecl SSL_set_alpn_protos(SSL *ssl, const unsigned char *protos,
                         unsigned int protos_len)
 {
     OPENSSL_free(ssl->ext.alpn);
@@ -2810,7 +2810,7 @@ int SSL_set_alpn_protos(SSL *ssl, const unsigned char *protos,
  * called during ClientHello processing in order to select an ALPN protocol
  * from the client's list of offered protocols.
  */
-void SSL_CTX_set_alpn_select_cb(SSL_CTX *ctx,
+void __cdecl SSL_CTX_set_alpn_select_cb(SSL_CTX *ctx,
                                 SSL_CTX_alpn_select_cb_func cb,
                                 void *arg)
 {
@@ -2824,7 +2824,7 @@ void SSL_CTX_set_alpn_select_cb(SSL_CTX *ctx,
  * (not including the leading length-prefix byte). If the server didn't
  * respond with a negotiated protocol then |*len| will be zero.
  */
-void SSL_get0_alpn_selected(const SSL *ssl, const unsigned char **data,
+void __cdecl SSL_get0_alpn_selected(const SSL *ssl, const unsigned char **data,
                             unsigned int *len)
 {
     *data = NULL;
@@ -2836,7 +2836,7 @@ void SSL_get0_alpn_selected(const SSL *ssl, const unsigned char **data,
         *len = (unsigned int)ssl->s3->alpn_selected_len;
 }
 
-int SSL_export_keying_material(SSL *s, unsigned char *out, size_t olen,
+int __cdecl SSL_export_keying_material(SSL *s, unsigned char *out, size_t olen,
                                const char *label, size_t llen,
                                const unsigned char *context, size_t contextlen,
                                int use_context)
@@ -2849,7 +2849,7 @@ int SSL_export_keying_material(SSL *s, unsigned char *out, size_t olen,
                                                        contextlen, use_context);
 }
 
-int SSL_export_keying_material_early(SSL *s, unsigned char *out, size_t olen,
+int __cdecl SSL_export_keying_material_early(SSL *s, unsigned char *out, size_t olen,
                                      const char *label, size_t llen,
                                      const unsigned char *context,
                                      size_t contextlen)
@@ -2861,7 +2861,7 @@ int SSL_export_keying_material_early(SSL *s, unsigned char *out, size_t olen,
                                               context, contextlen);
 }
 
-static unsigned long ssl_session_hash(const SSL_SESSION *a)
+static unsigned long __cdecl ssl_session_hash(const SSL_SESSION *a)
 {
     const unsigned char *session_id = a->session_id;
     unsigned long l;
@@ -2888,7 +2888,7 @@ static unsigned long ssl_session_hash(const SSL_SESSION *a)
  * being able to construct an SSL_SESSION that will collide with any existing
  * session with a matching session ID.
  */
-static int ssl_session_cmp(const SSL_SESSION *a, const SSL_SESSION *b)
+static int __cdecl ssl_session_cmp(const SSL_SESSION *a, const SSL_SESSION *b)
 {
     if (a->ssl_version != b->ssl_version)
         return 1;
@@ -2904,7 +2904,7 @@ static int ssl_session_cmp(const SSL_SESSION *a, const SSL_SESSION *b)
  * via ssl.h.
  */
 
-SSL_CTX *SSL_CTX_new(const SSL_METHOD *meth)
+SSL_CTX * __cdecl SSL_CTX_new(const SSL_METHOD *meth)
 {
     SSL_CTX *ret = NULL;
 
@@ -3093,7 +3093,7 @@ SSL_CTX *SSL_CTX_new(const SSL_METHOD *meth)
     return NULL;
 }
 
-int SSL_CTX_up_ref(SSL_CTX *ctx)
+int __cdecl SSL_CTX_up_ref(SSL_CTX *ctx)
 {
     int i;
 
@@ -3105,7 +3105,7 @@ int SSL_CTX_up_ref(SSL_CTX *ctx)
     return ((i > 1) ? 1 : 0);
 }
 
-void SSL_CTX_free(SSL_CTX *a)
+void __cdecl SSL_CTX_free(SSL_CTX *a)
 {
     int i;
 
@@ -3169,77 +3169,77 @@ void SSL_CTX_free(SSL_CTX *a)
     OPENSSL_free(a);
 }
 
-void SSL_CTX_set_default_passwd_cb(SSL_CTX *ctx, pem_password_cb *cb)
+void __cdecl SSL_CTX_set_default_passwd_cb(SSL_CTX *ctx, pem_password_cb *cb)
 {
     ctx->default_passwd_callback = cb;
 }
 
-void SSL_CTX_set_default_passwd_cb_userdata(SSL_CTX *ctx, void *u)
+void __cdecl SSL_CTX_set_default_passwd_cb_userdata(SSL_CTX *ctx, void *u)
 {
     ctx->default_passwd_callback_userdata = u;
 }
 
-pem_password_cb *SSL_CTX_get_default_passwd_cb(SSL_CTX *ctx)
+pem_password_cb * __cdecl SSL_CTX_get_default_passwd_cb(SSL_CTX *ctx)
 {
     return ctx->default_passwd_callback;
 }
 
-void *SSL_CTX_get_default_passwd_cb_userdata(SSL_CTX *ctx)
+void * __cdecl SSL_CTX_get_default_passwd_cb_userdata(SSL_CTX *ctx)
 {
     return ctx->default_passwd_callback_userdata;
 }
 
-void SSL_set_default_passwd_cb(SSL *s, pem_password_cb *cb)
+void __cdecl SSL_set_default_passwd_cb(SSL *s, pem_password_cb *cb)
 {
     s->default_passwd_callback = cb;
 }
 
-void SSL_set_default_passwd_cb_userdata(SSL *s, void *u)
+void __cdecl SSL_set_default_passwd_cb_userdata(SSL *s, void *u)
 {
     s->default_passwd_callback_userdata = u;
 }
 
-pem_password_cb *SSL_get_default_passwd_cb(SSL *s)
+pem_password_cb * __cdecl SSL_get_default_passwd_cb(SSL *s)
 {
     return s->default_passwd_callback;
 }
 
-void *SSL_get_default_passwd_cb_userdata(SSL *s)
+void * __cdecl SSL_get_default_passwd_cb_userdata(SSL *s)
 {
     return s->default_passwd_callback_userdata;
 }
 
-void SSL_CTX_set_cert_verify_callback(SSL_CTX *ctx,
-                                      int (*cb) (X509_STORE_CTX *, void *),
+void __cdecl SSL_CTX_set_cert_verify_callback(SSL_CTX *ctx,
+                                      int (__cdecl *cb) (X509_STORE_CTX *, void *),
                                       void *arg)
 {
     ctx->app_verify_callback = cb;
     ctx->app_verify_arg = arg;
 }
 
-void SSL_CTX_set_verify(SSL_CTX *ctx, int mode,
+void __cdecl SSL_CTX_set_verify(SSL_CTX *ctx, int mode,
                         int (*cb) (int, X509_STORE_CTX *))
 {
     ctx->verify_mode = mode;
     ctx->default_verify_callback = cb;
 }
 
-void SSL_CTX_set_verify_depth(SSL_CTX *ctx, int depth)
+void __cdecl SSL_CTX_set_verify_depth(SSL_CTX *ctx, int depth)
 {
     X509_VERIFY_PARAM_set_depth(ctx->param, depth);
 }
 
-void SSL_CTX_set_cert_cb(SSL_CTX *c, int (*cb) (SSL *ssl, void *arg), void *arg)
+void __cdecl SSL_CTX_set_cert_cb(SSL_CTX *c, int (__cdecl *cb) (SSL *ssl, void *arg), void *arg)
 {
     ssl_cert_set_cert_cb(c->cert, cb, arg);
 }
 
-void SSL_set_cert_cb(SSL *s, int (*cb) (SSL *ssl, void *arg), void *arg)
+void __cdecl SSL_set_cert_cb(SSL *s, int (__cdecl *cb) (SSL *ssl, void *arg), void *arg)
 {
     ssl_cert_set_cert_cb(s->cert, cb, arg);
 }
 
-void ssl_set_masks(SSL *s)
+void __cdecl ssl_set_masks(SSL *s)
 {
     CERT *c = s->cert;
     uint32_t *pvalid = s->s3->tmp.valid_flags;
@@ -3356,7 +3356,7 @@ void ssl_set_masks(SSL *s)
 
 #ifndef OPENSSL_NO_EC
 
-int ssl_check_srvr_ecc_cert_and_alg(X509 *x, SSL *s)
+int __cdecl ssl_check_srvr_ecc_cert_and_alg(X509 *x, SSL *s)
 {
     if (s->s3->tmp.new_cipher->algorithm_auth & SSL_aECDSA) {
         /* key usage, if present, must allow signing */
@@ -3371,7 +3371,7 @@ int ssl_check_srvr_ecc_cert_and_alg(X509 *x, SSL *s)
 
 #endif
 
-int ssl_get_server_cert_serverinfo(SSL *s, const unsigned char **serverinfo,
+int __cdecl ssl_get_server_cert_serverinfo(SSL *s, const unsigned char **serverinfo,
                                    size_t *serverinfo_length)
 {
     CERT_PKEY *cpk = s->s3->tmp.cert;
@@ -3385,7 +3385,7 @@ int ssl_get_server_cert_serverinfo(SSL *s, const unsigned char **serverinfo,
     return 1;
 }
 
-void ssl_update_cache(SSL *s, int mode)
+void __cdecl ssl_update_cache(SSL *s, int mode)
 {
     int i;
 
@@ -3456,23 +3456,23 @@ void ssl_update_cache(SSL *s, int mode)
     }
 }
 
-const SSL_METHOD *SSL_CTX_get_ssl_method(const SSL_CTX *ctx)
+const SSL_METHOD * __cdecl SSL_CTX_get_ssl_method(const SSL_CTX *ctx)
 {
     return ctx->method;
 }
 
-const SSL_METHOD *SSL_get_ssl_method(const SSL *s)
+const SSL_METHOD * __cdecl SSL_get_ssl_method(const SSL *s)
 {
     return s->method;
 }
 
-int SSL_set_ssl_method(SSL *s, const SSL_METHOD *meth)
+int __cdecl SSL_set_ssl_method(SSL *s, const SSL_METHOD *meth)
 {
     int ret = 1;
 
     if (s->method != meth) {
         const SSL_METHOD *sm = s->method;
-        int (*hf) (SSL *) = s->handshake_func;
+        int (__cdecl *hf) (SSL *) = s->handshake_func;
 
         if (sm->version == meth->version)
             s->method = meth;
@@ -3490,7 +3490,7 @@ int SSL_set_ssl_method(SSL *s, const SSL_METHOD *meth)
     return ret;
 }
 
-int SSL_get_error(const SSL *s, int i)
+int __cdecl SSL_get_error(const SSL *s, int i)
 {
     int reason;
     unsigned long l;
@@ -3572,7 +3572,7 @@ int SSL_get_error(const SSL *s, int i)
     return SSL_ERROR_SYSCALL;
 }
 
-static int ssl_do_handshake_intern(void *vargs)
+static int __cdecl ssl_do_handshake_intern(void *vargs)
 {
     struct ssl_async_args *args;
     SSL *s;
@@ -3583,7 +3583,7 @@ static int ssl_do_handshake_intern(void *vargs)
     return s->handshake_func(s);
 }
 
-int SSL_do_handshake(SSL *s)
+int __cdecl SSL_do_handshake(SSL *s)
 {
     int ret = 1;
 
@@ -3610,7 +3610,7 @@ int SSL_do_handshake(SSL *s)
     return ret;
 }
 
-void SSL_set_accept_state(SSL *s)
+void __cdecl SSL_set_accept_state(SSL *s)
 {
     s->server = 1;
     s->shutdown = 0;
@@ -3619,7 +3619,7 @@ void SSL_set_accept_state(SSL *s)
     clear_ciphers(s);
 }
 
-void SSL_set_connect_state(SSL *s)
+void __cdecl SSL_set_connect_state(SSL *s)
 {
     s->server = 0;
     s->shutdown = 0;
@@ -3628,31 +3628,31 @@ void SSL_set_connect_state(SSL *s)
     clear_ciphers(s);
 }
 
-int ssl_undefined_function(SSL *s)
+int __cdecl ssl_undefined_function(SSL *s)
 {
     SSLerr(SSL_F_SSL_UNDEFINED_FUNCTION, ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED);
     return 0;
 }
 
-int ssl_undefined_void_function(void)
+int __cdecl ssl_undefined_void_function(void)
 {
     SSLerr(SSL_F_SSL_UNDEFINED_VOID_FUNCTION,
            ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED);
     return 0;
 }
 
-int ssl_undefined_const_function(const SSL *s)
+int __cdecl ssl_undefined_const_function(const SSL *s)
 {
     return 0;
 }
 
-const SSL_METHOD *ssl_bad_method(int ver)
+const SSL_METHOD * __cdecl ssl_bad_method(int ver)
 {
     SSLerr(SSL_F_SSL_BAD_METHOD, ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED);
     return NULL;
 }
 
-const char *ssl_protocol_to_string(int version)
+const char * __cdecl ssl_protocol_to_string(int version)
 {
     switch(version)
     {
@@ -3685,7 +3685,7 @@ const char *ssl_protocol_to_string(int version)
     }
 }
 
-const char *SSL_get_version(const SSL *s)
+const char * __cdecl SSL_get_version(const SSL *s)
 {
     return ssl_protocol_to_string(s->version);
 }
@@ -3720,7 +3720,7 @@ static int dup_ca_names(STACK_OF(X509_NAME) **dst, STACK_OF(X509_NAME) *src)
     return 1;
 }
 
-SSL *SSL_dup(SSL *s)
+SSL * __cdecl SSL_dup(SSL *s)
 {
     SSL *ret;
     int i;
@@ -3837,7 +3837,7 @@ SSL *SSL_dup(SSL *s)
     return NULL;
 }
 
-void ssl_clear_cipher_ctx(SSL *s)
+void __cdecl ssl_clear_cipher_ctx(SSL *s)
 {
     if (s->enc_read_ctx != NULL) {
         EVP_CIPHER_CTX_free(s->enc_read_ctx);
@@ -3855,7 +3855,7 @@ void ssl_clear_cipher_ctx(SSL *s)
 #endif
 }
 
-X509 *SSL_get_certificate(const SSL *s)
+X509 * __cdecl SSL_get_certificate(const SSL *s)
 {
     if (s->cert != NULL)
         return s->cert->key->x509;
@@ -3863,7 +3863,7 @@ X509 *SSL_get_certificate(const SSL *s)
         return NULL;
 }
 
-EVP_PKEY *SSL_get_privatekey(const SSL *s)
+EVP_PKEY * __cdecl SSL_get_privatekey(const SSL *s)
 {
     if (s->cert != NULL)
         return s->cert->key->privatekey;
@@ -3871,7 +3871,7 @@ EVP_PKEY *SSL_get_privatekey(const SSL *s)
         return NULL;
 }
 
-X509 *SSL_CTX_get0_certificate(const SSL_CTX *ctx)
+X509 * __cdecl SSL_CTX_get0_certificate(const SSL_CTX *ctx)
 {
     if (ctx->cert != NULL)
         return ctx->cert->key->x509;
@@ -3879,7 +3879,7 @@ X509 *SSL_CTX_get0_certificate(const SSL_CTX *ctx)
         return NULL;
 }
 
-EVP_PKEY *SSL_CTX_get0_privatekey(const SSL_CTX *ctx)
+EVP_PKEY * __cdecl SSL_CTX_get0_privatekey(const SSL_CTX *ctx)
 {
     if (ctx->cert != NULL)
         return ctx->cert->key->privatekey;
@@ -3887,19 +3887,19 @@ EVP_PKEY *SSL_CTX_get0_privatekey(const SSL_CTX *ctx)
         return NULL;
 }
 
-const SSL_CIPHER *SSL_get_current_cipher(const SSL *s)
+const SSL_CIPHER * __cdecl SSL_get_current_cipher(const SSL *s)
 {
     if ((s->session != NULL) && (s->session->cipher != NULL))
         return s->session->cipher;
     return NULL;
 }
 
-const SSL_CIPHER *SSL_get_pending_cipher(const SSL *s)
+const SSL_CIPHER * __cdecl SSL_get_pending_cipher(const SSL *s)
 {
     return s->s3->tmp.new_cipher;
 }
 
-const COMP_METHOD *SSL_get_current_compression(const SSL *s)
+const COMP_METHOD * __cdecl SSL_get_current_compression(const SSL *s)
 {
 #ifndef OPENSSL_NO_COMP
     return s->compress ? COMP_CTX_get_method(s->compress) : NULL;
@@ -3908,7 +3908,7 @@ const COMP_METHOD *SSL_get_current_compression(const SSL *s)
 #endif
 }
 
-const COMP_METHOD *SSL_get_current_expansion(const SSL *s)
+const COMP_METHOD * __cdecl SSL_get_current_expansion(const SSL *s)
 {
 #ifndef OPENSSL_NO_COMP
     return s->expand ? COMP_CTX_get_method(s->expand) : NULL;
@@ -3917,7 +3917,7 @@ const COMP_METHOD *SSL_get_current_expansion(const SSL *s)
 #endif
 }
 
-int ssl_init_wbio_buffer(SSL *s)
+int __cdecl ssl_init_wbio_buffer(SSL *s)
 {
     BIO *bbio;
 
@@ -3938,7 +3938,7 @@ int ssl_init_wbio_buffer(SSL *s)
     return 1;
 }
 
-int ssl_free_wbio_buffer(SSL *s)
+int __cdecl ssl_free_wbio_buffer(SSL *s)
 {
     /* callers ensure s is never null */
     if (s->bbio == NULL)
@@ -3951,52 +3951,52 @@ int ssl_free_wbio_buffer(SSL *s)
     return 1;
 }
 
-void SSL_CTX_set_quiet_shutdown(SSL_CTX *ctx, int mode)
+void __cdecl SSL_CTX_set_quiet_shutdown(SSL_CTX *ctx, int mode)
 {
     ctx->quiet_shutdown = mode;
 }
 
-int SSL_CTX_get_quiet_shutdown(const SSL_CTX *ctx)
+int __cdecl SSL_CTX_get_quiet_shutdown(const SSL_CTX *ctx)
 {
     return ctx->quiet_shutdown;
 }
 
-void SSL_set_quiet_shutdown(SSL *s, int mode)
+void __cdecl SSL_set_quiet_shutdown(SSL *s, int mode)
 {
     s->quiet_shutdown = mode;
 }
 
-int SSL_get_quiet_shutdown(const SSL *s)
+int __cdecl SSL_get_quiet_shutdown(const SSL *s)
 {
     return s->quiet_shutdown;
 }
 
-void SSL_set_shutdown(SSL *s, int mode)
+void __cdecl SSL_set_shutdown(SSL *s, int mode)
 {
     s->shutdown = mode;
 }
 
-int SSL_get_shutdown(const SSL *s)
+int __cdecl SSL_get_shutdown(const SSL *s)
 {
     return s->shutdown;
 }
 
-int SSL_version(const SSL *s)
+int __cdecl SSL_version(const SSL *s)
 {
     return s->version;
 }
 
-int SSL_client_version(const SSL *s)
+int __cdecl SSL_client_version(const SSL *s)
 {
     return s->client_version;
 }
 
-SSL_CTX *SSL_get_SSL_CTX(const SSL *ssl)
+SSL_CTX * __cdecl SSL_get_SSL_CTX(const SSL *ssl)
 {
     return ssl->ctx;
 }
 
-SSL_CTX *SSL_set_SSL_CTX(SSL *ssl, SSL_CTX *ctx)
+SSL_CTX * __cdecl SSL_set_SSL_CTX(SSL *ssl, SSL_CTX *ctx)
 {
     CERT *new_cert;
     if (ssl->ctx == ctx)
@@ -4043,12 +4043,12 @@ SSL_CTX *SSL_set_SSL_CTX(SSL *ssl, SSL_CTX *ctx)
     return ssl->ctx;
 }
 
-int SSL_CTX_set_default_verify_paths(SSL_CTX *ctx)
+int __cdecl SSL_CTX_set_default_verify_paths(SSL_CTX *ctx)
 {
     return X509_STORE_set_default_paths(ctx->cert_store);
 }
 
-int SSL_CTX_set_default_verify_dir(SSL_CTX *ctx)
+int __cdecl SSL_CTX_set_default_verify_dir(SSL_CTX *ctx)
 {
     X509_LOOKUP *lookup;
 
@@ -4063,7 +4063,7 @@ int SSL_CTX_set_default_verify_dir(SSL_CTX *ctx)
     return 1;
 }
 
-int SSL_CTX_set_default_verify_file(SSL_CTX *ctx)
+int __cdecl SSL_CTX_set_default_verify_file(SSL_CTX *ctx)
 {
     X509_LOOKUP *lookup;
 
@@ -4079,14 +4079,14 @@ int SSL_CTX_set_default_verify_file(SSL_CTX *ctx)
     return 1;
 }
 
-int SSL_CTX_load_verify_locations(SSL_CTX *ctx, const char *CAfile,
+int __cdecl SSL_CTX_load_verify_locations(SSL_CTX *ctx, const char *CAfile,
                                   const char *CApath)
 {
     return X509_STORE_load_locations(ctx->cert_store, CAfile, CApath);
 }
 
-void SSL_set_info_callback(SSL *ssl,
-                           void (*cb) (const SSL *ssl, int type, int val))
+void __cdecl SSL_set_info_callback(SSL *ssl,
+                           void (__cdecl *cb) (const SSL *ssl, int type, int val))
 {
     ssl->info_callback = cb;
 }
@@ -4095,23 +4095,23 @@ void SSL_set_info_callback(SSL *ssl,
  * One compiler (Diab DCC) doesn't like argument names in returned function
  * pointer.
  */
-void (*SSL_get_info_callback(const SSL *ssl)) (const SSL * /* ssl */ ,
+void (__cdecl *SSL_get_info_callback(const SSL *ssl)) (const SSL * /* ssl */ ,
                                                int /* type */ ,
                                                int /* val */ ) {
     return ssl->info_callback;
 }
 
-void SSL_set_verify_result(SSL *ssl, long arg)
+void __cdecl SSL_set_verify_result(SSL *ssl, long arg)
 {
     ssl->verify_result = arg;
 }
 
-long SSL_get_verify_result(const SSL *ssl)
+long __cdecl SSL_get_verify_result(const SSL *ssl)
 {
     return ssl->verify_result;
 }
 
-size_t SSL_get_client_random(const SSL *ssl, unsigned char *out, size_t outlen)
+size_t __cdecl SSL_get_client_random(const SSL *ssl, unsigned char *out, size_t outlen)
 {
     if (outlen == 0)
         return sizeof(ssl->s3->client_random);
@@ -4121,7 +4121,7 @@ size_t SSL_get_client_random(const SSL *ssl, unsigned char *out, size_t outlen)
     return outlen;
 }
 
-size_t SSL_get_server_random(const SSL *ssl, unsigned char *out, size_t outlen)
+size_t __cdecl SSL_get_server_random(const SSL *ssl, unsigned char *out, size_t outlen)
 {
     if (outlen == 0)
         return sizeof(ssl->s3->server_random);
@@ -4131,7 +4131,7 @@ size_t SSL_get_server_random(const SSL *ssl, unsigned char *out, size_t outlen)
     return outlen;
 }
 
-size_t SSL_SESSION_get_master_key(const SSL_SESSION *session,
+size_t __cdecl SSL_SESSION_get_master_key(const SSL_SESSION *session,
                                   unsigned char *out, size_t outlen)
 {
     if (outlen == 0)
@@ -4142,7 +4142,7 @@ size_t SSL_SESSION_get_master_key(const SSL_SESSION *session,
     return outlen;
 }
 
-int SSL_SESSION_set1_master_key(SSL_SESSION *sess, const unsigned char *in,
+int __cdecl SSL_SESSION_set1_master_key(SSL_SESSION *sess, const unsigned char *in,
                                 size_t len)
 {
     if (len > sizeof(sess->master_key))
@@ -4154,45 +4154,45 @@ int SSL_SESSION_set1_master_key(SSL_SESSION *sess, const unsigned char *in,
 }
 
 
-int SSL_set_ex_data(SSL *s, int idx, void *arg)
+int __cdecl SSL_set_ex_data(SSL *s, int idx, void *arg)
 {
     return CRYPTO_set_ex_data(&s->ex_data, idx, arg);
 }
 
-void *SSL_get_ex_data(const SSL *s, int idx)
+void * __cdecl SSL_get_ex_data(const SSL *s, int idx)
 {
     return CRYPTO_get_ex_data(&s->ex_data, idx);
 }
 
-int SSL_CTX_set_ex_data(SSL_CTX *s, int idx, void *arg)
+int __cdecl SSL_CTX_set_ex_data(SSL_CTX *s, int idx, void *arg)
 {
     return CRYPTO_set_ex_data(&s->ex_data, idx, arg);
 }
 
-void *SSL_CTX_get_ex_data(const SSL_CTX *s, int idx)
+void * __cdecl SSL_CTX_get_ex_data(const SSL_CTX *s, int idx)
 {
     return CRYPTO_get_ex_data(&s->ex_data, idx);
 }
 
-X509_STORE *SSL_CTX_get_cert_store(const SSL_CTX *ctx)
+X509_STORE * __cdecl SSL_CTX_get_cert_store(const SSL_CTX *ctx)
 {
     return ctx->cert_store;
 }
 
-void SSL_CTX_set_cert_store(SSL_CTX *ctx, X509_STORE *store)
+void __cdecl SSL_CTX_set_cert_store(SSL_CTX *ctx, X509_STORE *store)
 {
     X509_STORE_free(ctx->cert_store);
     ctx->cert_store = store;
 }
 
-void SSL_CTX_set1_cert_store(SSL_CTX *ctx, X509_STORE *store)
+void __cdecl SSL_CTX_set1_cert_store(SSL_CTX *ctx, X509_STORE *store)
 {
     if (store != NULL)
         X509_STORE_up_ref(store);
     SSL_CTX_set_cert_store(ctx, store);
 }
 
-int SSL_want(const SSL *s)
+int __cdecl SSL_want(const SSL *s)
 {
     return s->rwstate;
 }
@@ -4204,22 +4204,22 @@ int SSL_want(const SSL *s)
  */
 
 #ifndef OPENSSL_NO_DH
-void SSL_CTX_set_tmp_dh_callback(SSL_CTX *ctx,
-                                 DH *(*dh) (SSL *ssl, int is_export,
+void __cdecl SSL_CTX_set_tmp_dh_callback(SSL_CTX *ctx,
+                                 DH *(__cdecl *dh) (SSL *ssl, int is_export,
                                             int keylength))
 {
-    SSL_CTX_callback_ctrl(ctx, SSL_CTRL_SET_TMP_DH_CB, (void (*)(void))dh);
+    SSL_CTX_callback_ctrl(ctx, SSL_CTRL_SET_TMP_DH_CB, (void (__cdecl *)(void))dh);
 }
 
-void SSL_set_tmp_dh_callback(SSL *ssl, DH *(*dh) (SSL *ssl, int is_export,
+void __cdecl SSL_set_tmp_dh_callback(SSL *ssl, DH *(__cdecl *dh) (SSL *ssl, int is_export,
                                                   int keylength))
 {
-    SSL_callback_ctrl(ssl, SSL_CTRL_SET_TMP_DH_CB, (void (*)(void))dh);
+    SSL_callback_ctrl(ssl, SSL_CTRL_SET_TMP_DH_CB, (void (__cdecl *)(void))dh);
 }
 #endif
 
 #ifndef OPENSSL_NO_PSK
-int SSL_CTX_use_psk_identity_hint(SSL_CTX *ctx, const char *identity_hint)
+int __cdecl SSL_CTX_use_psk_identity_hint(SSL_CTX *ctx, const char *identity_hint)
 {
     if (identity_hint != NULL && strlen(identity_hint) > PSK_MAX_IDENTITY_LEN) {
         SSLerr(SSL_F_SSL_CTX_USE_PSK_IDENTITY_HINT, SSL_R_DATA_LENGTH_TOO_LONG);
@@ -4235,7 +4235,7 @@ int SSL_CTX_use_psk_identity_hint(SSL_CTX *ctx, const char *identity_hint)
     return 1;
 }
 
-int SSL_use_psk_identity_hint(SSL *s, const char *identity_hint)
+int __cdecl SSL_use_psk_identity_hint(SSL *s, const char *identity_hint)
 {
     if (s == NULL)
         return 0;
@@ -4254,114 +4254,114 @@ int SSL_use_psk_identity_hint(SSL *s, const char *identity_hint)
     return 1;
 }
 
-const char *SSL_get_psk_identity_hint(const SSL *s)
+const char * __cdecl SSL_get_psk_identity_hint(const SSL *s)
 {
     if (s == NULL || s->session == NULL)
         return NULL;
     return s->session->psk_identity_hint;
 }
 
-const char *SSL_get_psk_identity(const SSL *s)
+const char * __cdecl SSL_get_psk_identity(const SSL *s)
 {
     if (s == NULL || s->session == NULL)
         return NULL;
     return s->session->psk_identity;
 }
 
-void SSL_set_psk_client_callback(SSL *s, SSL_psk_client_cb_func cb)
+void __cdecl SSL_set_psk_client_callback(SSL *s, SSL_psk_client_cb_func cb)
 {
     s->psk_client_callback = cb;
 }
 
-void SSL_CTX_set_psk_client_callback(SSL_CTX *ctx, SSL_psk_client_cb_func cb)
+void __cdecl SSL_CTX_set_psk_client_callback(SSL_CTX *ctx, SSL_psk_client_cb_func cb)
 {
     ctx->psk_client_callback = cb;
 }
 
-void SSL_set_psk_server_callback(SSL *s, SSL_psk_server_cb_func cb)
+void __cdecl SSL_set_psk_server_callback(SSL *s, SSL_psk_server_cb_func cb)
 {
     s->psk_server_callback = cb;
 }
 
-void SSL_CTX_set_psk_server_callback(SSL_CTX *ctx, SSL_psk_server_cb_func cb)
+void __cdecl SSL_CTX_set_psk_server_callback(SSL_CTX *ctx, SSL_psk_server_cb_func cb)
 {
     ctx->psk_server_callback = cb;
 }
 #endif
 
-void SSL_set_psk_find_session_callback(SSL *s, SSL_psk_find_session_cb_func cb)
+void __cdecl SSL_set_psk_find_session_callback(SSL *s, SSL_psk_find_session_cb_func cb)
 {
     s->psk_find_session_cb = cb;
 }
 
-void SSL_CTX_set_psk_find_session_callback(SSL_CTX *ctx,
+void __cdecl SSL_CTX_set_psk_find_session_callback(SSL_CTX *ctx,
                                            SSL_psk_find_session_cb_func cb)
 {
     ctx->psk_find_session_cb = cb;
 }
 
-void SSL_set_psk_use_session_callback(SSL *s, SSL_psk_use_session_cb_func cb)
+void __cdecl SSL_set_psk_use_session_callback(SSL *s, SSL_psk_use_session_cb_func cb)
 {
     s->psk_use_session_cb = cb;
 }
 
-void SSL_CTX_set_psk_use_session_callback(SSL_CTX *ctx,
+void __cdecl SSL_CTX_set_psk_use_session_callback(SSL_CTX *ctx,
                                            SSL_psk_use_session_cb_func cb)
 {
     ctx->psk_use_session_cb = cb;
 }
 
-void SSL_CTX_set_msg_callback(SSL_CTX *ctx,
-                              void (*cb) (int write_p, int version,
+void __cdecl SSL_CTX_set_msg_callback(SSL_CTX *ctx,
+                              void (__cdecl *cb) (int write_p, int version,
                                           int content_type, const void *buf,
                                           size_t len, SSL *ssl, void *arg))
 {
-    SSL_CTX_callback_ctrl(ctx, SSL_CTRL_SET_MSG_CALLBACK, (void (*)(void))cb);
+    SSL_CTX_callback_ctrl(ctx, SSL_CTRL_SET_MSG_CALLBACK, (void (__cdecl *)(void))cb);
 }
 
-void SSL_set_msg_callback(SSL *ssl,
-                          void (*cb) (int write_p, int version,
+void __cdecl SSL_set_msg_callback(SSL *ssl,
+                          void (__cdecl *cb) (int write_p, int version,
                                       int content_type, const void *buf,
                                       size_t len, SSL *ssl, void *arg))
 {
-    SSL_callback_ctrl(ssl, SSL_CTRL_SET_MSG_CALLBACK, (void (*)(void))cb);
+    SSL_callback_ctrl(ssl, SSL_CTRL_SET_MSG_CALLBACK, (void (__cdecl *)(void))cb);
 }
 
-void SSL_CTX_set_not_resumable_session_callback(SSL_CTX *ctx,
-                                                int (*cb) (SSL *ssl,
+void __cdecl SSL_CTX_set_not_resumable_session_callback(SSL_CTX *ctx,
+                                                int (__cdecl *cb) (SSL *ssl,
                                                            int
                                                            is_forward_secure))
 {
     SSL_CTX_callback_ctrl(ctx, SSL_CTRL_SET_NOT_RESUMABLE_SESS_CB,
-                          (void (*)(void))cb);
+                          (void (__cdecl *)(void))cb);
 }
 
-void SSL_set_not_resumable_session_callback(SSL *ssl,
-                                            int (*cb) (SSL *ssl,
+void __cdecl SSL_set_not_resumable_session_callback(SSL *ssl,
+                                            int (__cdecl *cb) (SSL *ssl,
                                                        int is_forward_secure))
 {
     SSL_callback_ctrl(ssl, SSL_CTRL_SET_NOT_RESUMABLE_SESS_CB,
-                      (void (*)(void))cb);
+                      (void (__cdecl *)(void))cb);
 }
 
-void SSL_CTX_set_record_padding_callback(SSL_CTX *ctx,
-                                         size_t (*cb) (SSL *ssl, int type,
+void __cdecl SSL_CTX_set_record_padding_callback(SSL_CTX *ctx,
+                                         size_t (__cdecl *cb) (SSL *ssl, int type,
                                                        size_t len, void *arg))
 {
     ctx->record_padding_cb = cb;
 }
 
-void SSL_CTX_set_record_padding_callback_arg(SSL_CTX *ctx, void *arg)
+void __cdecl SSL_CTX_set_record_padding_callback_arg(SSL_CTX *ctx, void *arg)
 {
     ctx->record_padding_arg = arg;
 }
 
-void *SSL_CTX_get_record_padding_callback_arg(const SSL_CTX *ctx)
+void * __cdecl SSL_CTX_get_record_padding_callback_arg(const SSL_CTX *ctx)
 {
     return ctx->record_padding_arg;
 }
 
-int SSL_CTX_set_block_padding(SSL_CTX *ctx, size_t block_size)
+int __cdecl SSL_CTX_set_block_padding(SSL_CTX *ctx, size_t block_size)
 {
     /* block size of 0 or 1 is basically no padding */
     if (block_size == 1)
@@ -4373,24 +4373,24 @@ int SSL_CTX_set_block_padding(SSL_CTX *ctx, size_t block_size)
     return 1;
 }
 
-void SSL_set_record_padding_callback(SSL *ssl,
-                                     size_t (*cb) (SSL *ssl, int type,
+void __cdecl SSL_set_record_padding_callback(SSL *ssl,
+                                     size_t (__cdecl *cb) (SSL *ssl, int type,
                                                    size_t len, void *arg))
 {
     ssl->record_padding_cb = cb;
 }
 
-void SSL_set_record_padding_callback_arg(SSL *ssl, void *arg)
+void __cdecl SSL_set_record_padding_callback_arg(SSL *ssl, void *arg)
 {
     ssl->record_padding_arg = arg;
 }
 
-void *SSL_get_record_padding_callback_arg(const SSL *ssl)
+void * __cdecl SSL_get_record_padding_callback_arg(const SSL *ssl)
 {
     return ssl->record_padding_arg;
 }
 
-int SSL_set_block_padding(SSL *ssl, size_t block_size)
+int __cdecl SSL_set_block_padding(SSL *ssl, size_t block_size)
 {
     /* block size of 0 or 1 is basically no padding */
     if (block_size == 1)
@@ -4402,26 +4402,26 @@ int SSL_set_block_padding(SSL *ssl, size_t block_size)
     return 1;
 }
 
-int SSL_set_num_tickets(SSL *s, size_t num_tickets)
+int __cdecl SSL_set_num_tickets(SSL *s, size_t num_tickets)
 {
     s->num_tickets = num_tickets;
 
     return 1;
 }
 
-size_t SSL_get_num_tickets(const SSL *s)
+size_t __cdecl SSL_get_num_tickets(const SSL *s)
 {
     return s->num_tickets;
 }
 
-int SSL_CTX_set_num_tickets(SSL_CTX *ctx, size_t num_tickets)
+int __cdecl SSL_CTX_set_num_tickets(SSL_CTX *ctx, size_t num_tickets)
 {
     ctx->num_tickets = num_tickets;
 
     return 1;
 }
 
-size_t SSL_CTX_get_num_tickets(const SSL_CTX *ctx)
+size_t __cdecl SSL_CTX_get_num_tickets(const SSL_CTX *ctx)
 {
     return ctx->num_tickets;
 }
@@ -4433,7 +4433,7 @@ size_t SSL_CTX_get_num_tickets(const SSL_CTX *ctx)
  * Returns the newly allocated ctx;
  */
 
-EVP_MD_CTX *ssl_replace_hash(EVP_MD_CTX **hash, const EVP_MD *md)
+EVP_MD_CTX * __cdecl ssl_replace_hash(EVP_MD_CTX **hash, const EVP_MD *md)
 {
     ssl_clear_hash_ctx(hash);
     *hash = EVP_MD_CTX_new();
@@ -4445,7 +4445,7 @@ EVP_MD_CTX *ssl_replace_hash(EVP_MD_CTX **hash, const EVP_MD *md)
     return *hash;
 }
 
-void ssl_clear_hash_ctx(EVP_MD_CTX **hash)
+void __cdecl ssl_clear_hash_ctx(EVP_MD_CTX **hash)
 {
 
     EVP_MD_CTX_free(*hash);
@@ -4453,7 +4453,7 @@ void ssl_clear_hash_ctx(EVP_MD_CTX **hash)
 }
 
 /* Retrieve handshake hashes */
-int ssl_handshake_hash(SSL *s, unsigned char *out, size_t outlen,
+int __cdecl ssl_handshake_hash(SSL *s, unsigned char *out, size_t outlen,
                        size_t *hashlen)
 {
     EVP_MD_CTX *ctx = NULL;
@@ -4486,12 +4486,12 @@ int ssl_handshake_hash(SSL *s, unsigned char *out, size_t outlen,
     return ret;
 }
 
-int SSL_session_reused(const SSL *s)
+int __cdecl SSL_session_reused(const SSL *s)
 {
     return s->hit;
 }
 
-int SSL_is_server(const SSL *s)
+int __cdecl SSL_is_server(const SSL *s)
 {
     return s->server;
 }
@@ -4505,60 +4505,60 @@ void SSL_set_debug(SSL *s, int debug)
 }
 #endif
 
-void SSL_set_security_level(SSL *s, int level)
+void __cdecl SSL_set_security_level(SSL *s, int level)
 {
     s->cert->sec_level = level;
 }
 
-int SSL_get_security_level(const SSL *s)
+int __cdecl SSL_get_security_level(const SSL *s)
 {
     return s->cert->sec_level;
 }
 
-void SSL_set_security_callback(SSL *s,
-                               int (*cb) (const SSL *s, const SSL_CTX *ctx,
+void __cdecl SSL_set_security_callback(SSL *s,
+                               int (__cdecl *cb) (const SSL *s, const SSL_CTX *ctx,
                                           int op, int bits, int nid,
                                           void *other, void *ex))
 {
     s->cert->sec_cb = cb;
 }
 
-int (*SSL_get_security_callback(const SSL *s)) (const SSL *s,
+int (__cdecl *SSL_get_security_callback(const SSL *s)) (const SSL *s,
                                                 const SSL_CTX *ctx, int op,
                                                 int bits, int nid, void *other,
                                                 void *ex) {
     return s->cert->sec_cb;
 }
 
-void SSL_set0_security_ex_data(SSL *s, void *ex)
+void __cdecl SSL_set0_security_ex_data(SSL *s, void *ex)
 {
     s->cert->sec_ex = ex;
 }
 
-void *SSL_get0_security_ex_data(const SSL *s)
+void * __cdecl SSL_get0_security_ex_data(const SSL *s)
 {
     return s->cert->sec_ex;
 }
 
-void SSL_CTX_set_security_level(SSL_CTX *ctx, int level)
+void __cdecl SSL_CTX_set_security_level(SSL_CTX *ctx, int level)
 {
     ctx->cert->sec_level = level;
 }
 
-int SSL_CTX_get_security_level(const SSL_CTX *ctx)
+int __cdecl SSL_CTX_get_security_level(const SSL_CTX *ctx)
 {
     return ctx->cert->sec_level;
 }
 
-void SSL_CTX_set_security_callback(SSL_CTX *ctx,
-                                   int (*cb) (const SSL *s, const SSL_CTX *ctx,
+void __cdecl SSL_CTX_set_security_callback(SSL_CTX *ctx,
+                                   int (__cdecl *cb) (const SSL *s, const SSL_CTX *ctx,
                                               int op, int bits, int nid,
                                               void *other, void *ex))
 {
     ctx->cert->sec_cb = cb;
 }
 
-int (*SSL_CTX_get_security_callback(const SSL_CTX *ctx)) (const SSL *s,
+int (__cdecl *SSL_CTX_get_security_callback(const SSL_CTX *ctx)) (const SSL *s,
                                                           const SSL_CTX *ctx,
                                                           int op, int bits,
                                                           int nid,
@@ -4567,12 +4567,12 @@ int (*SSL_CTX_get_security_callback(const SSL_CTX *ctx)) (const SSL *s,
     return ctx->cert->sec_cb;
 }
 
-void SSL_CTX_set0_security_ex_data(SSL_CTX *ctx, void *ex)
+void __cdecl SSL_CTX_set0_security_ex_data(SSL_CTX *ctx, void *ex)
 {
     ctx->cert->sec_ex = ex;
 }
 
-void *SSL_CTX_get0_security_ex_data(const SSL_CTX *ctx)
+void * __cdecl SSL_CTX_get0_security_ex_data(const SSL_CTX *ctx)
 {
     return ctx->cert->sec_ex;
 }
@@ -4582,37 +4582,37 @@ void *SSL_CTX_get0_security_ex_data(const SSL_CTX *ctx)
  * can return unsigned long, instead of the generic long return value from the
  * control interface.
  */
-unsigned long SSL_CTX_get_options(const SSL_CTX *ctx)
+unsigned long __cdecl SSL_CTX_get_options(const SSL_CTX *ctx)
 {
     return ctx->options;
 }
 
-unsigned long SSL_get_options(const SSL *s)
+unsigned long __cdecl SSL_get_options(const SSL *s)
 {
     return s->options;
 }
 
-unsigned long SSL_CTX_set_options(SSL_CTX *ctx, unsigned long op)
+unsigned long __cdecl SSL_CTX_set_options(SSL_CTX *ctx, unsigned long op)
 {
     return ctx->options |= op;
 }
 
-unsigned long SSL_set_options(SSL *s, unsigned long op)
+unsigned long __cdecl SSL_set_options(SSL *s, unsigned long op)
 {
     return s->options |= op;
 }
 
-unsigned long SSL_CTX_clear_options(SSL_CTX *ctx, unsigned long op)
+unsigned long __cdecl SSL_CTX_clear_options(SSL_CTX *ctx, unsigned long op)
 {
     return ctx->options &= ~op;
 }
 
-unsigned long SSL_clear_options(SSL *s, unsigned long op)
+unsigned long __cdecl SSL_clear_options(SSL *s, unsigned long op)
 {
     return s->options &= ~op;
 }
 
-STACK_OF(X509) *SSL_get0_verified_chain(const SSL *s)
+STACK_OF(X509) * __cdecl SSL_get0_verified_chain(const SSL *s)
 {
     return s->verified_chain;
 }
@@ -4760,7 +4760,7 @@ static int ct_extract_x509v3_extension_scts(SSL *s)
  * response (if it exists) and X509v3 extensions in the certificate.
  * Returns NULL if an error occurs.
  */
-const STACK_OF(SCT) *SSL_get0_peer_scts(SSL *s)
+const STACK_OF(SCT) * __cdecl SSL_get0_peer_scts(SSL *s)
 {
     if (!s->scts_parsed) {
         if (ct_extract_tls_extension_scts(s) < 0 ||
@@ -4775,13 +4775,13 @@ const STACK_OF(SCT) *SSL_get0_peer_scts(SSL *s)
     return NULL;
 }
 
-static int ct_permissive(const CT_POLICY_EVAL_CTX * ctx,
+static int __cdecl ct_permissive(const CT_POLICY_EVAL_CTX * ctx,
                          const STACK_OF(SCT) *scts, void *unused_arg)
 {
     return 1;
 }
 
-static int ct_strict(const CT_POLICY_EVAL_CTX * ctx,
+static int __cdecl ct_strict(const CT_POLICY_EVAL_CTX * ctx,
                      const STACK_OF(SCT) *scts, void *unused_arg)
 {
     int count = scts != NULL ? sk_SCT_num(scts) : 0;
@@ -4798,7 +4798,7 @@ static int ct_strict(const CT_POLICY_EVAL_CTX * ctx,
     return 0;
 }
 
-int SSL_set_ct_validation_callback(SSL *s, ssl_ct_validation_cb callback,
+int __cdecl SSL_set_ct_validation_callback(SSL *s, ssl_ct_validation_cb callback,
                                    void *arg)
 {
     /*
@@ -4827,7 +4827,7 @@ int SSL_set_ct_validation_callback(SSL *s, ssl_ct_validation_cb callback,
     return 1;
 }
 
-int SSL_CTX_set_ct_validation_callback(SSL_CTX *ctx,
+int __cdecl SSL_CTX_set_ct_validation_callback(SSL_CTX *ctx,
                                        ssl_ct_validation_cb callback, void *arg)
 {
     /*
@@ -4847,17 +4847,17 @@ int SSL_CTX_set_ct_validation_callback(SSL_CTX *ctx,
     return 1;
 }
 
-int SSL_ct_is_enabled(const SSL *s)
+int __cdecl SSL_ct_is_enabled(const SSL *s)
 {
     return s->ct_validation_callback != NULL;
 }
 
-int SSL_CTX_ct_is_enabled(const SSL_CTX *ctx)
+int __cdecl SSL_CTX_ct_is_enabled(const SSL_CTX *ctx)
 {
     return ctx->ct_validation_callback != NULL;
 }
 
-int ssl_validate_ct(SSL *s)
+int __cdecl ssl_validate_ct(SSL *s)
 {
     int ret = 0;
     X509 *cert = s->session != NULL ? s->session->peer : NULL;
@@ -4959,7 +4959,7 @@ int ssl_validate_ct(SSL *s)
     return ret;
 }
 
-int SSL_CTX_enable_ct(SSL_CTX *ctx, int validation_mode)
+int __cdecl SSL_CTX_enable_ct(SSL_CTX *ctx, int validation_mode)
 {
     switch (validation_mode) {
     default:
@@ -4972,7 +4972,7 @@ int SSL_CTX_enable_ct(SSL_CTX *ctx, int validation_mode)
     }
 }
 
-int SSL_enable_ct(SSL *s, int validation_mode)
+int __cdecl SSL_enable_ct(SSL *s, int validation_mode)
 {
     switch (validation_mode) {
     default:
@@ -4985,51 +4985,51 @@ int SSL_enable_ct(SSL *s, int validation_mode)
     }
 }
 
-int SSL_CTX_set_default_ctlog_list_file(SSL_CTX *ctx)
+int __cdecl SSL_CTX_set_default_ctlog_list_file(SSL_CTX *ctx)
 {
     return CTLOG_STORE_load_default_file(ctx->ctlog_store);
 }
 
-int SSL_CTX_set_ctlog_list_file(SSL_CTX *ctx, const char *path)
+int __cdecl SSL_CTX_set_ctlog_list_file(SSL_CTX *ctx, const char *path)
 {
     return CTLOG_STORE_load_file(ctx->ctlog_store, path);
 }
 
-void SSL_CTX_set0_ctlog_store(SSL_CTX *ctx, CTLOG_STORE * logs)
+void __cdecl SSL_CTX_set0_ctlog_store(SSL_CTX *ctx, CTLOG_STORE * logs)
 {
     CTLOG_STORE_free(ctx->ctlog_store);
     ctx->ctlog_store = logs;
 }
 
-const CTLOG_STORE *SSL_CTX_get0_ctlog_store(const SSL_CTX *ctx)
+const CTLOG_STORE * __cdecl SSL_CTX_get0_ctlog_store(const SSL_CTX *ctx)
 {
     return ctx->ctlog_store;
 }
 
 #endif  /* OPENSSL_NO_CT */
 
-void SSL_CTX_set_client_hello_cb(SSL_CTX *c, SSL_client_hello_cb_fn cb,
+void __cdecl SSL_CTX_set_client_hello_cb(SSL_CTX *c, SSL_client_hello_cb_fn cb,
                                  void *arg)
 {
     c->client_hello_cb = cb;
     c->client_hello_cb_arg = arg;
 }
 
-int SSL_client_hello_isv2(SSL *s)
+int __cdecl SSL_client_hello_isv2(SSL *s)
 {
     if (s->clienthello == NULL)
         return 0;
     return s->clienthello->isv2;
 }
 
-unsigned int SSL_client_hello_get0_legacy_version(SSL *s)
+unsigned int __cdecl SSL_client_hello_get0_legacy_version(SSL *s)
 {
     if (s->clienthello == NULL)
         return 0;
     return s->clienthello->legacy_version;
 }
 
-size_t SSL_client_hello_get0_random(SSL *s, const unsigned char **out)
+size_t __cdecl SSL_client_hello_get0_random(SSL *s, const unsigned char **out)
 {
     if (s->clienthello == NULL)
         return 0;
@@ -5038,7 +5038,7 @@ size_t SSL_client_hello_get0_random(SSL *s, const unsigned char **out)
     return SSL3_RANDOM_SIZE;
 }
 
-size_t SSL_client_hello_get0_session_id(SSL *s, const unsigned char **out)
+size_t __cdecl SSL_client_hello_get0_session_id(SSL *s, const unsigned char **out)
 {
     if (s->clienthello == NULL)
         return 0;
@@ -5047,7 +5047,7 @@ size_t SSL_client_hello_get0_session_id(SSL *s, const unsigned char **out)
     return s->clienthello->session_id_len;
 }
 
-size_t SSL_client_hello_get0_ciphers(SSL *s, const unsigned char **out)
+size_t __cdecl SSL_client_hello_get0_ciphers(SSL *s, const unsigned char **out)
 {
     if (s->clienthello == NULL)
         return 0;
@@ -5056,7 +5056,7 @@ size_t SSL_client_hello_get0_ciphers(SSL *s, const unsigned char **out)
     return PACKET_remaining(&s->clienthello->ciphersuites);
 }
 
-size_t SSL_client_hello_get0_compression_methods(SSL *s, const unsigned char **out)
+size_t __cdecl SSL_client_hello_get0_compression_methods(SSL *s, const unsigned char **out)
 {
     if (s->clienthello == NULL)
         return 0;
@@ -5065,7 +5065,7 @@ size_t SSL_client_hello_get0_compression_methods(SSL *s, const unsigned char **o
     return s->clienthello->compressions_len;
 }
 
-int SSL_client_hello_get1_extensions_present(SSL *s, int **out, size_t *outlen)
+int __cdecl SSL_client_hello_get1_extensions_present(SSL *s, int **out, size_t *outlen)
 {
     RAW_EXTENSION *ext;
     int *present;
@@ -5104,7 +5104,7 @@ int SSL_client_hello_get1_extensions_present(SSL *s, int **out, size_t *outlen)
     return 0;
 }
 
-int SSL_client_hello_get0_ext(SSL *s, unsigned int type, const unsigned char **out,
+int __cdecl SSL_client_hello_get0_ext(SSL *s, unsigned int type, const unsigned char **out,
                        size_t *outlen)
 {
     size_t i;
@@ -5125,7 +5125,7 @@ int SSL_client_hello_get0_ext(SSL *s, unsigned int type, const unsigned char **o
     return 0;
 }
 
-int SSL_free_buffers(SSL *ssl)
+int __cdecl SSL_free_buffers(SSL *ssl)
 {
     RECORD_LAYER *rl = &ssl->rlayer;
 
@@ -5136,17 +5136,17 @@ int SSL_free_buffers(SSL *ssl)
     return 1;
 }
 
-int SSL_alloc_buffers(SSL *ssl)
+int __cdecl SSL_alloc_buffers(SSL *ssl)
 {
     return ssl3_setup_buffers(ssl);
 }
 
-void SSL_CTX_set_keylog_callback(SSL_CTX *ctx, SSL_CTX_keylog_cb_func cb)
+void __cdecl SSL_CTX_set_keylog_callback(SSL_CTX *ctx, SSL_CTX_keylog_cb_func cb)
 {
     ctx->keylog_callback = cb;
 }
 
-SSL_CTX_keylog_cb_func SSL_CTX_get_keylog_callback(const SSL_CTX *ctx)
+SSL_CTX_keylog_cb_func __cdecl SSL_CTX_get_keylog_callback(const SSL_CTX *ctx)
 {
     return ctx->keylog_callback;
 }
@@ -5205,7 +5205,7 @@ static int nss_keylog_int(const char *prefix,
 
 }
 
-int ssl_log_rsa_client_key_exchange(SSL *ssl,
+int __cdecl ssl_log_rsa_client_key_exchange(SSL *ssl,
                                     const uint8_t *encrypted_premaster,
                                     size_t encrypted_premaster_len,
                                     const uint8_t *premaster,
@@ -5226,7 +5226,7 @@ int ssl_log_rsa_client_key_exchange(SSL *ssl,
                           premaster_len);
 }
 
-int ssl_log_secret(SSL *ssl,
+int __cdecl ssl_log_secret(SSL *ssl,
                    const char *label,
                    const uint8_t *secret,
                    size_t secret_len)
@@ -5241,7 +5241,7 @@ int ssl_log_secret(SSL *ssl,
 
 #define SSLV2_CIPHER_LEN    3
 
-int ssl_cache_cipherlist(SSL *s, PACKET *cipher_suites, int sslv2format)
+int __cdecl ssl_cache_cipherlist(SSL *s, PACKET *cipher_suites, int sslv2format)
 {
     int n;
 
@@ -5311,7 +5311,7 @@ int ssl_cache_cipherlist(SSL *s, PACKET *cipher_suites, int sslv2format)
     return 1;
 }
 
-int SSL_bytes_to_cipher_list(SSL *s, const unsigned char *bytes, size_t len,
+int __cdecl SSL_bytes_to_cipher_list(SSL *s, const unsigned char *bytes, size_t len,
                              int isv2format, STACK_OF(SSL_CIPHER) **sk,
                              STACK_OF(SSL_CIPHER) **scsvs)
 {
@@ -5322,7 +5322,7 @@ int SSL_bytes_to_cipher_list(SSL *s, const unsigned char *bytes, size_t len,
     return bytes_to_cipher_list(s, &pkt, sk, scsvs, isv2format, 0);
 }
 
-int bytes_to_cipher_list(SSL *s, PACKET *cipher_suites,
+int __cdecl bytes_to_cipher_list(SSL *s, PACKET *cipher_suites,
                          STACK_OF(SSL_CIPHER) **skp,
                          STACK_OF(SSL_CIPHER) **scsvs_out,
                          int sslv2format, int fatal)
@@ -5413,55 +5413,55 @@ int bytes_to_cipher_list(SSL *s, PACKET *cipher_suites,
     return 0;
 }
 
-int SSL_CTX_set_max_early_data(SSL_CTX *ctx, uint32_t max_early_data)
+int __cdecl SSL_CTX_set_max_early_data(SSL_CTX *ctx, uint32_t max_early_data)
 {
     ctx->max_early_data = max_early_data;
 
     return 1;
 }
 
-uint32_t SSL_CTX_get_max_early_data(const SSL_CTX *ctx)
+uint32_t __cdecl SSL_CTX_get_max_early_data(const SSL_CTX *ctx)
 {
     return ctx->max_early_data;
 }
 
-int SSL_set_max_early_data(SSL *s, uint32_t max_early_data)
+int __cdecl SSL_set_max_early_data(SSL *s, uint32_t max_early_data)
 {
     s->max_early_data = max_early_data;
 
     return 1;
 }
 
-uint32_t SSL_get_max_early_data(const SSL *s)
+uint32_t __cdecl SSL_get_max_early_data(const SSL *s)
 {
     return s->max_early_data;
 }
 
-int SSL_CTX_set_recv_max_early_data(SSL_CTX *ctx, uint32_t recv_max_early_data)
+int __cdecl SSL_CTX_set_recv_max_early_data(SSL_CTX *ctx, uint32_t recv_max_early_data)
 {
     ctx->recv_max_early_data = recv_max_early_data;
 
     return 1;
 }
 
-uint32_t SSL_CTX_get_recv_max_early_data(const SSL_CTX *ctx)
+uint32_t __cdecl SSL_CTX_get_recv_max_early_data(const SSL_CTX *ctx)
 {
     return ctx->recv_max_early_data;
 }
 
-int SSL_set_recv_max_early_data(SSL *s, uint32_t recv_max_early_data)
+int __cdecl SSL_set_recv_max_early_data(SSL *s, uint32_t recv_max_early_data)
 {
     s->recv_max_early_data = recv_max_early_data;
 
     return 1;
 }
 
-uint32_t SSL_get_recv_max_early_data(const SSL *s)
+uint32_t __cdecl SSL_get_recv_max_early_data(const SSL *s)
 {
     return s->recv_max_early_data;
 }
 
-__owur unsigned int ssl_get_max_send_fragment(const SSL *ssl)
+__owur unsigned int __cdecl ssl_get_max_send_fragment(const SSL *ssl)
 {
     /* Return any active Max Fragment Len extension */
     if (ssl->session != NULL && USE_MAX_FRAGMENT_LENGTH_EXT(ssl->session))
@@ -5471,7 +5471,7 @@ __owur unsigned int ssl_get_max_send_fragment(const SSL *ssl)
     return ssl->max_send_fragment;
 }
 
-__owur unsigned int ssl_get_split_send_fragment(const SSL *ssl)
+__owur unsigned int __cdecl ssl_get_split_send_fragment(const SSL *ssl)
 {
     /* Return a value regarding an active Max Fragment Len extension */
     if (ssl->session != NULL && USE_MAX_FRAGMENT_LENGTH_EXT(ssl->session)
@@ -5486,7 +5486,7 @@ __owur unsigned int ssl_get_split_send_fragment(const SSL *ssl)
     return ssl->split_send_fragment;
 }
 
-int SSL_stateless(SSL *s)
+int __cdecl SSL_stateless(SSL *s)
 {
     int ret;
 
@@ -5509,17 +5509,17 @@ int SSL_stateless(SSL *s)
     return -1;
 }
 
-void SSL_CTX_set_post_handshake_auth(SSL_CTX *ctx, int val)
+void __cdecl SSL_CTX_set_post_handshake_auth(SSL_CTX *ctx, int val)
 {
     ctx->pha_enabled = val;
 }
 
-void SSL_set_post_handshake_auth(SSL *ssl, int val)
+void __cdecl SSL_set_post_handshake_auth(SSL *ssl, int val)
 {
     ssl->pha_enabled = val;
 }
 
-int SSL_verify_client_post_handshake(SSL *ssl)
+int __cdecl SSL_verify_client_post_handshake(SSL *ssl)
 {
     if (!SSL_IS_TLS13(ssl)) {
         SSLerr(SSL_F_SSL_VERIFY_CLIENT_POST_HANDSHAKE, SSL_R_WRONG_SSL_VERSION);
@@ -5566,7 +5566,7 @@ int SSL_verify_client_post_handshake(SSL *ssl)
     return 1;
 }
 
-int SSL_CTX_set_session_ticket_cb(SSL_CTX *ctx,
+int __cdecl SSL_CTX_set_session_ticket_cb(SSL_CTX *ctx,
                                   SSL_CTX_generate_session_ticket_fn gen_cb,
                                   SSL_CTX_decrypt_session_ticket_fn dec_cb,
                                   void *arg)
@@ -5577,7 +5577,7 @@ int SSL_CTX_set_session_ticket_cb(SSL_CTX *ctx,
     return 1;
 }
 
-void SSL_CTX_set_allow_early_data_cb(SSL_CTX *ctx,
+void __cdecl SSL_CTX_set_allow_early_data_cb(SSL_CTX *ctx,
                                      SSL_allow_early_data_cb_fn cb,
                                      void *arg)
 {
@@ -5585,7 +5585,7 @@ void SSL_CTX_set_allow_early_data_cb(SSL_CTX *ctx,
     ctx->allow_early_data_cb_data = arg;
 }
 
-void SSL_set_allow_early_data_cb(SSL *s,
+void __cdecl SSL_set_allow_early_data_cb(SSL *s,
                                  SSL_allow_early_data_cb_fn cb,
                                  void *arg)
 {
diff --git a/ssl/ssl_locl.h b/ssl/ssl_locl.h
index 25875c9f6d..269b75c36a 100644
--- a/ssl/ssl_locl.h
+++ b/ssl/ssl_locl.h
@@ -439,36 +439,36 @@ struct ssl_method_st {
     int version;
     unsigned flags;
     unsigned long mask;
-    int (*ssl_new) (SSL *s);
-    int (*ssl_clear) (SSL *s);
-    void (*ssl_free) (SSL *s);
-    int (*ssl_accept) (SSL *s);
-    int (*ssl_connect) (SSL *s);
-    int (*ssl_read) (SSL *s, void *buf, size_t len, size_t *readbytes);
-    int (*ssl_peek) (SSL *s, void *buf, size_t len, size_t *readbytes);
-    int (*ssl_write) (SSL *s, const void *buf, size_t len, size_t *written);
-    int (*ssl_shutdown) (SSL *s);
-    int (*ssl_renegotiate) (SSL *s);
-    int (*ssl_renegotiate_check) (SSL *s, int);
-    int (*ssl_read_bytes) (SSL *s, int type, int *recvd_type,
+    int (__cdecl *ssl_new) (SSL *s);
+    int (__cdecl *ssl_clear) (SSL *s);
+    void (__cdecl *ssl_free) (SSL *s);
+    int (__cdecl *ssl_accept) (SSL *s);
+    int (__cdecl *ssl_connect) (SSL *s);
+    int (__cdecl *ssl_read) (SSL *s, void *buf, size_t len, size_t *readbytes);
+    int (__cdecl *ssl_peek) (SSL *s, void *buf, size_t len, size_t *readbytes);
+    int (__cdecl *ssl_write) (SSL *s, const void *buf, size_t len, size_t *written);
+    int (__cdecl *ssl_shutdown) (SSL *s);
+    int (__cdecl *ssl_renegotiate) (SSL *s);
+    int (__cdecl *ssl_renegotiate_check) (SSL *s, int);
+    int (__cdecl *ssl_read_bytes) (SSL *s, int type, int *recvd_type,
                            unsigned char *buf, size_t len, int peek,
                            size_t *readbytes);
-    int (*ssl_write_bytes) (SSL *s, int type, const void *buf_, size_t len,
+    int (__cdecl *ssl_write_bytes) (SSL *s, int type, const void *buf_, size_t len,
                             size_t *written);
-    int (*ssl_dispatch_alert) (SSL *s);
-    long (*ssl_ctrl) (SSL *s, int cmd, long larg, void *parg);
-    long (*ssl_ctx_ctrl) (SSL_CTX *ctx, int cmd, long larg, void *parg);
-    const SSL_CIPHER *(*get_cipher_by_char) (const unsigned char *ptr);
-    int (*put_cipher_by_char) (const SSL_CIPHER *cipher, WPACKET *pkt,
+    int (__cdecl *ssl_dispatch_alert) (SSL *s);
+    long (__cdecl *ssl_ctrl) (SSL *s, int cmd, long larg, void *parg);
+    long (__cdecl *ssl_ctx_ctrl) (SSL_CTX *ctx, int cmd, long larg, void *parg);
+    const SSL_CIPHER *(__cdecl *get_cipher_by_char) (const unsigned char *ptr);
+    int (__cdecl *put_cipher_by_char) (const SSL_CIPHER *cipher, WPACKET *pkt,
                                size_t *len);
-    size_t (*ssl_pending) (const SSL *s);
-    int (*num_ciphers) (void);
-    const SSL_CIPHER *(*get_cipher) (unsigned ncipher);
-    long (*get_timeout) (void);
+    size_t (__cdecl *ssl_pending) (const SSL *s);
+    int (__cdecl *num_ciphers) (void);
+    const SSL_CIPHER *(__cdecl *get_cipher) (unsigned ncipher);
+    long (__cdecl *get_timeout) (void);
     const struct ssl3_enc_method *ssl3_enc; /* Extra SSLv3/TLS stuff */
-    int (*ssl_version) (void);
-    long (*ssl_callback_ctrl) (SSL *s, int cb_id, void (*fp) (void));
-    long (*ssl_ctx_callback_ctrl) (SSL_CTX *s, int cb_id, void (*fp) (void));
+    int (__cdecl *ssl_version) (void);
+    long (__cdecl *ssl_callback_ctrl) (SSL *s, int cb_id, void (__cdecl *fp) (void));
+    long (__cdecl *ssl_ctx_callback_ctrl) (SSL_CTX *s, int cb_id, void (__cdecl *fp) (void));
 };
 
 /*
@@ -598,11 +598,11 @@ typedef struct srp_ctx_st {
     /* param for all the callbacks */
     void *SRP_cb_arg;
     /* set client Hello login callback */
-    int (*TLS_ext_srp_username_callback) (SSL *, int *, void *);
+    int (__cdecl *TLS_ext_srp_username_callback) (SSL *, int *, void *);
     /* set SRP N/g param callback for verification */
-    int (*SRP_verify_param_callback) (SSL *, void *);
+    int (__cdecl *SRP_verify_param_callback) (SSL *, void *);
     /* set SRP client passwd callback */
-    char *(*SRP_give_srp_client_pwd_callback) (SSL *, void *);
+    char *(__cdecl *SRP_give_srp_client_pwd_callback) (SSL *, void *);
     char *login;
     BIGNUM *N, *g, *s, *B, *A;
     BIGNUM *a, *b, *v;
@@ -770,9 +770,9 @@ struct ssl_ctx_st {
      * removed from the cache.  After the call, OpenSSL will
      * SSL_SESSION_free() it.
      */
-    int (*new_session_cb) (struct ssl_st *ssl, SSL_SESSION *sess);
-    void (*remove_session_cb) (struct ssl_ctx_st *ctx, SSL_SESSION *sess);
-    SSL_SESSION *(*get_session_cb) (struct ssl_st *ssl,
+    int (__cdecl *new_session_cb) (struct ssl_st *ssl, SSL_SESSION *sess);
+    void (__cdecl *remove_session_cb) (struct ssl_ctx_st *ctx, SSL_SESSION *sess);
+    SSL_SESSION *(__cdecl *get_session_cb) (struct ssl_st *ssl,
                                     const unsigned char *data, int len,
                                     int *copy);
     struct {
@@ -798,7 +798,7 @@ struct ssl_ctx_st {
     CRYPTO_REF_COUNT references;
 
     /* if defined, these override the X509_verify_cert() calls */
-    int (*app_verify_callback) (X509_STORE_CTX *, void *);
+    int (__cdecl *app_verify_callback) (X509_STORE_CTX *, void *);
     void *app_verify_arg;
     /*
      * before OpenSSL 0.9.7, 'app_verify_arg' was ignored
@@ -812,22 +812,22 @@ struct ssl_ctx_st {
     void *default_passwd_callback_userdata;
 
     /* get client cert callback */
-    int (*client_cert_cb) (SSL *ssl, X509 **x509, EVP_PKEY **pkey);
+    int (__cdecl *client_cert_cb) (SSL *ssl, X509 **x509, EVP_PKEY **pkey);
 
     /* cookie generate callback */
-    int (*app_gen_cookie_cb) (SSL *ssl, unsigned char *cookie,
+    int (__cdecl *app_gen_cookie_cb) (SSL *ssl, unsigned char *cookie,
                               unsigned int *cookie_len);
 
     /* verify cookie callback */
-    int (*app_verify_cookie_cb) (SSL *ssl, const unsigned char *cookie,
+    int (__cdecl *app_verify_cookie_cb) (SSL *ssl, const unsigned char *cookie,
                                  unsigned int cookie_len);
 
     /* TLS1.3 app-controlled cookie generate callback */
-    int (*gen_stateless_cookie_cb) (SSL *ssl, unsigned char *cookie,
+    int (__cdecl *gen_stateless_cookie_cb) (SSL *ssl, unsigned char *cookie,
                                     size_t *cookie_len);
 
     /* TLS1.3 verify app-controlled cookie callback */
-    int (*verify_stateless_cookie_cb) (SSL *ssl, const unsigned char *cookie,
+    int (__cdecl *verify_stateless_cookie_cb) (SSL *ssl, const unsigned char *cookie,
                                        size_t cookie_len);
 
     CRYPTO_EX_DATA ex_data;
@@ -841,7 +841,7 @@ struct ssl_ctx_st {
     /* Default values used when no per-SSL value is defined follow */
 
     /* used if SSL's info_callback is NULL */
-    void (*info_callback) (const SSL *ssl, int type, int val);
+    void (__cdecl *info_callback) (const SSL *ssl, int type, int val);
 
     /*
      * What we put in certificate_authorities extension for TLS 1.3
@@ -867,7 +867,7 @@ struct ssl_ctx_st {
     int read_ahead;
 
     /* callback that allows applications to peek at protocol messages */
-    void (*msg_callback) (int write_p, int version, int content_type,
+    void (__cdecl *msg_callback) (int write_p, int version, int content_type,
                           const void *buf, size_t len, SSL *ssl, void *arg);
     void *msg_callback_arg;
 
@@ -925,19 +925,19 @@ struct ssl_ctx_st {
     /* TLS extensions. */
     struct {
         /* TLS extensions servername callback */
-        int (*servername_cb) (SSL *, int *, void *);
+        int (__cdecl *servername_cb) (SSL *, int *, void *);
         void *servername_arg;
         /* RFC 4507 session ticket keys */
         unsigned char tick_key_name[TLSEXT_KEYNAME_LENGTH];
         SSL_CTX_EXT_SECURE *secure;
         /* Callback to support customisation of ticket key setting */
-        int (*ticket_key_cb) (SSL *ssl,
+        int (__cdecl *ticket_key_cb) (SSL *ssl,
                               unsigned char *name, unsigned char *iv,
                               EVP_CIPHER_CTX *ectx, HMAC_CTX *hctx, int enc);
 
         /* certificate status request info */
         /* Callback for status request */
-        int (*status_cb) (SSL *ssl, void *arg);
+        int (__cdecl *status_cb) (SSL *ssl, void *arg);
         void *status_arg;
         /* ext status type used for CSR extension (OCSP Stapling) */
         int status_type;
@@ -967,7 +967,7 @@ struct ssl_ctx_st {
          *       wire-format.
          *   inlen: the length of |in|.
          */
-        int (*alpn_select_cb) (SSL *s,
+        int (__cdecl *alpn_select_cb) (SSL *s,
                                const unsigned char **out,
                                unsigned char *outlen,
                                const unsigned char *in,
@@ -1023,7 +1023,7 @@ struct ssl_ctx_st {
      * Callback for disabling session caching and ticket support on a session
      * basis, depending on the chosen cipher.
      */
-    int (*not_resumable_session_cb) (SSL *ssl, int is_forward_secure);
+    int (__cdecl *not_resumable_session_cb) (SSL *ssl, int is_forward_secure);
 
     CRYPTO_RWLOCK *lock;
 
@@ -1046,7 +1046,7 @@ struct ssl_ctx_st {
     uint32_t recv_max_early_data;
 
     /* TLS1.3 padding callback */
-    size_t (*record_padding_cb)(SSL *s, int type, size_t len, void *arg);
+    size_t (__cdecl *record_padding_cb)(SSL *s, int type, size_t len, void *arg);
     void *record_padding_arg;
     size_t block_padding;
 
@@ -1090,7 +1090,7 @@ struct ssl_st {
      * request needs re-doing when in SSL_accept or SSL_connect
      */
     int rwstate;
-    int (*handshake_func) (SSL *);
+    int (__cdecl *handshake_func) (SSL *);
     /*
      * Imagine that here's a boolean member "init" that is switched as soon
      * as SSL_set_{accept/connect}_state is called for the first time, so
@@ -1122,7 +1122,7 @@ struct ssl_st {
     struct ssl3_state_st *s3;   /* SSLv3 variables */
     struct dtls1_state_st *d1;  /* DTLSv1 variables */
     /* callback that allows applications to peek at protocol messages */
-    void (*msg_callback) (int write_p, int version, int content_type,
+    void (__cdecl *msg_callback) (int write_p, int version, int content_type,
                           const void *buf, size_t len, SSL *ssl, void *arg);
     void *msg_callback_arg;
     int hit;                    /* reusing a previous session */
@@ -1208,7 +1208,7 @@ struct ssl_st {
     /* fail if callback returns 0 */
     int (*verify_callback) (int ok, X509_STORE_CTX *ctx);
     /* optional informational callback */
-    void (*info_callback) (const SSL *ssl, int type, int val);
+    void (__cdecl *info_callback) (const SSL *ssl, int type, int val);
     /* error bytes to be written */
     int error;
     /* actual code */
@@ -1265,7 +1265,7 @@ struct ssl_st {
         /* Built-in extension flags */
         uint8_t extflags[TLSEXT_IDX_num_builtins];
         /* TLS extension debug callback */
-        void (*debug_cb)(SSL *s, int client_server, int type,
+        void (__cdecl *debug_cb)(SSL *s, int client_server, int type,
                          const unsigned char *data, int len, void *arg);
         void *debug_arg;
         char *hostname;
@@ -1427,7 +1427,7 @@ struct ssl_st {
      * Callback for disabling session caching and ticket support on a session
      * basis, depending on the chosen cipher.
      */
-    int (*not_resumable_session_cb) (SSL *ssl, int is_forward_secure);
+    int (__cdecl *not_resumable_session_cb) (SSL *ssl, int is_forward_secure);
     RECORD_LAYER rlayer;
     /* Default password callback. */
     pem_password_cb *default_passwd_callback;
@@ -1457,7 +1457,7 @@ struct ssl_st {
     uint32_t early_data_count;
 
     /* TLS1.3 padding callback */
-    size_t (*record_padding_cb)(SSL *s, int type, size_t len, void *arg);
+    size_t (__cdecl *record_padding_cb)(SSL *s, int type, size_t len, void *arg);
     void *record_padding_arg;
     size_t block_padding;
 
@@ -1759,17 +1759,17 @@ struct pitem_st {
 
 typedef struct pitem_st *piterator;
 
-pitem *pitem_new(unsigned char *prio64be, void *data);
-void pitem_free(pitem *item);
-pqueue *pqueue_new(void);
-void pqueue_free(pqueue *pq);
-pitem *pqueue_insert(pqueue *pq, pitem *item);
-pitem *pqueue_peek(pqueue *pq);
-pitem *pqueue_pop(pqueue *pq);
-pitem *pqueue_find(pqueue *pq, unsigned char *prio64be);
-pitem *pqueue_iterator(pqueue *pq);
-pitem *pqueue_next(piterator *iter);
-size_t pqueue_size(pqueue *pq);
+pitem * __cdecl pitem_new(unsigned char *prio64be, void *data);
+void __cdecl pitem_free(pitem *item);
+pqueue * __cdecl pqueue_new(void);
+void __cdecl pqueue_free(pqueue *pq);
+pitem * __cdecl pqueue_insert(pqueue *pq, pitem *item);
+pitem * __cdecl pqueue_peek(pqueue *pq);
+pitem * __cdecl pqueue_pop(pqueue *pq);
+pitem * __cdecl pqueue_find(pqueue *pq, unsigned char *prio64be);
+pitem * __cdecl pqueue_iterator(pqueue *pq);
+pitem * __cdecl pqueue_next(piterator *iter);
+size_t __cdecl pqueue_size(pqueue *pq);
 
 typedef struct dtls1_state_st {
     unsigned char cookie[DTLS1_COOKIE_LENGTH];
@@ -1886,7 +1886,7 @@ typedef struct cert_st {
     CERT_PKEY *key;
 # ifndef OPENSSL_NO_DH
     EVP_PKEY *dh_tmp;
-    DH *(*dh_tmp_cb) (SSL *ssl, int is_export, int keysize);
+    DH *(__cdecl *dh_tmp_cb) (SSL *ssl, int is_export, int keysize);
     int dh_tmp_auto;
 # endif
     /* Flags related to certificates */
@@ -1920,7 +1920,7 @@ typedef struct cert_st {
      * allows advanced applications to select certificates on the fly: for
      * example based on supported signature algorithms or curves.
      */
-    int (*cert_cb) (SSL *ssl, void *arg);
+    int (__cdecl *cert_cb) (SSL *ssl, void *arg);
     void *cert_cb_arg;
     /*
      * Optional X509_STORE for chain building or certificate validation If
@@ -1931,7 +1931,7 @@ typedef struct cert_st {
     /* Custom extensions */
     custom_ext_methods custext;
     /* Security callback */
-    int (*sec_cb) (const SSL *s, const SSL_CTX *ctx, int op, int bits, int nid,
+    int (__cdecl *sec_cb) (const SSL *s, const SSL_CTX *ctx, int op, int bits, int nid,
                    void *other, void *ex);
     /* Security level */
     int sec_level;
@@ -1951,30 +1951,30 @@ typedef struct cert_st {
  * of a mess of functions, but hell, think of it as an opaque structure :-)
  */
 typedef struct ssl3_enc_method {
-    int (*enc) (SSL *, SSL3_RECORD *, size_t, int);
-    int (*mac) (SSL *, SSL3_RECORD *, unsigned char *, int);
-    int (*setup_key_block) (SSL *);
-    int (*generate_master_secret) (SSL *, unsigned char *, unsigned char *,
+    int (__cdecl *enc) (SSL *, SSL3_RECORD *, size_t, int);
+    int (__cdecl *mac) (SSL *, SSL3_RECORD *, unsigned char *, int);
+    int (__cdecl *setup_key_block) (SSL *);
+    int (__cdecl *generate_master_secret) (SSL *, unsigned char *, unsigned char *,
                                    size_t, size_t *);
-    int (*change_cipher_state) (SSL *, int);
-    size_t (*final_finish_mac) (SSL *, const char *, size_t, unsigned char *);
+    int (__cdecl *change_cipher_state) (SSL *, int);
+    size_t (__cdecl *final_finish_mac) (SSL *, const char *, size_t, unsigned char *);
     const char *client_finished_label;
     size_t client_finished_label_len;
     const char *server_finished_label;
     size_t server_finished_label_len;
-    int (*alert_value) (int);
-    int (*export_keying_material) (SSL *, unsigned char *, size_t,
+    int (__cdecl *alert_value) (int);
+    int (__cdecl *export_keying_material) (SSL *, unsigned char *, size_t,
                                    const char *, size_t,
                                    const unsigned char *, size_t,
                                    int use_context);
     /* Various flags indicating protocol version requirements */
     uint32_t enc_flags;
     /* Set the handshake header */
-    int (*set_handshake_header) (SSL *s, WPACKET *pkt, int type);
+    int (__cdecl *set_handshake_header) (SSL *s, WPACKET *pkt, int type);
     /* Close construction of the handshake message */
-    int (*close_construct_packet) (SSL *s, WPACKET *pkt, int htype);
+    int (__cdecl *close_construct_packet) (SSL *s, WPACKET *pkt, int htype);
     /* Write out handshake message */
-    int (*do_write) (SSL *s);
+    int (__cdecl *do_write) (SSL *s);
 } SSL3_ENC_METHOD;
 
 # define ssl_set_handshake_header(s, pkt, htype) \
@@ -2073,29 +2073,29 @@ extern const unsigned char tls12downgrade[8];
 
 extern SSL3_ENC_METHOD ssl3_undef_enc_method;
 
-__owur const SSL_METHOD *ssl_bad_method(int ver);
-__owur const SSL_METHOD *sslv3_method(void);
-__owur const SSL_METHOD *sslv3_server_method(void);
-__owur const SSL_METHOD *sslv3_client_method(void);
-__owur const SSL_METHOD *tlsv1_method(void);
-__owur const SSL_METHOD *tlsv1_server_method(void);
-__owur const SSL_METHOD *tlsv1_client_method(void);
-__owur const SSL_METHOD *tlsv1_1_method(void);
-__owur const SSL_METHOD *tlsv1_1_server_method(void);
-__owur const SSL_METHOD *tlsv1_1_client_method(void);
-__owur const SSL_METHOD *tlsv1_2_method(void);
-__owur const SSL_METHOD *tlsv1_2_server_method(void);
-__owur const SSL_METHOD *tlsv1_2_client_method(void);
-__owur const SSL_METHOD *tlsv1_3_method(void);
-__owur const SSL_METHOD *tlsv1_3_server_method(void);
-__owur const SSL_METHOD *tlsv1_3_client_method(void);
-__owur const SSL_METHOD *dtlsv1_method(void);
-__owur const SSL_METHOD *dtlsv1_server_method(void);
-__owur const SSL_METHOD *dtlsv1_client_method(void);
-__owur const SSL_METHOD *dtls_bad_ver_client_method(void);
-__owur const SSL_METHOD *dtlsv1_2_method(void);
-__owur const SSL_METHOD *dtlsv1_2_server_method(void);
-__owur const SSL_METHOD *dtlsv1_2_client_method(void);
+__owur const SSL_METHOD * __cdecl ssl_bad_method(int ver);
+__owur const SSL_METHOD * __cdecl sslv3_method(void);
+__owur const SSL_METHOD * __cdecl sslv3_server_method(void);
+__owur const SSL_METHOD * __cdecl sslv3_client_method(void);
+__owur const SSL_METHOD * __cdecl tlsv1_method(void);
+__owur const SSL_METHOD * __cdecl tlsv1_server_method(void);
+__owur const SSL_METHOD * __cdecl tlsv1_client_method(void);
+__owur const SSL_METHOD * __cdecl tlsv1_1_method(void);
+__owur const SSL_METHOD * __cdecl tlsv1_1_server_method(void);
+__owur const SSL_METHOD * __cdecl tlsv1_1_client_method(void);
+__owur const SSL_METHOD * __cdecl tlsv1_2_method(void);
+__owur const SSL_METHOD * __cdecl tlsv1_2_server_method(void);
+__owur const SSL_METHOD * __cdecl tlsv1_2_client_method(void);
+__owur const SSL_METHOD * __cdecl tlsv1_3_method(void);
+__owur const SSL_METHOD * __cdecl tlsv1_3_server_method(void);
+__owur const SSL_METHOD * __cdecl tlsv1_3_client_method(void);
+__owur const SSL_METHOD * __cdecl dtlsv1_method(void);
+__owur const SSL_METHOD * __cdecl dtlsv1_server_method(void);
+__owur const SSL_METHOD * __cdecl dtlsv1_client_method(void);
+__owur const SSL_METHOD * __cdecl dtls_bad_ver_client_method(void);
+__owur const SSL_METHOD * __cdecl dtlsv1_2_method(void);
+__owur const SSL_METHOD * __cdecl dtlsv1_2_server_method(void);
+__owur const SSL_METHOD * __cdecl dtlsv1_2_client_method(void);
 
 extern const SSL3_ENC_METHOD TLSv1_enc_data;
 extern const SSL3_ENC_METHOD TLSv1_1_enc_data;
@@ -2113,7 +2113,7 @@ extern const SSL3_ENC_METHOD DTLSv1_2_enc_data;
 
 # define IMPLEMENT_tls_meth_func(version, flags, mask, func_name, s_accept, \
                                  s_connect, enc_data) \
-const SSL_METHOD *func_name(void)  \
+const SSL_METHOD * __cdecl func_name(void)  \
         { \
         static const SSL_METHOD func_name##_data= { \
                 version, \
@@ -2150,7 +2150,7 @@ const SSL_METHOD *func_name(void)  \
         }
 
 # define IMPLEMENT_ssl3_meth_func(func_name, s_accept, s_connect) \
-const SSL_METHOD *func_name(void)  \
+const SSL_METHOD * __cdecl func_name(void)  \
         { \
         static const SSL_METHOD func_name##_data= { \
                 SSL3_VERSION, \
@@ -2188,7 +2188,7 @@ const SSL_METHOD *func_name(void)  \
 
 # define IMPLEMENT_dtls1_meth_func(version, flags, mask, func_name, s_accept, \
                                         s_connect, enc_data) \
-const SSL_METHOD *func_name(void)  \
+const SSL_METHOD * __cdecl func_name(void)  \
         { \
         static const SSL_METHOD func_name##_data= { \
                 version, \
@@ -2225,14 +2225,14 @@ const SSL_METHOD *func_name(void)  \
         }
 
 struct openssl_ssl_test_functions {
-    int (*p_ssl_init_wbio_buffer) (SSL *s);
-    int (*p_ssl3_setup_buffers) (SSL *s);
+    int (__cdecl *p_ssl_init_wbio_buffer) (SSL *s);
+    int (__cdecl *p_ssl3_setup_buffers) (SSL *s);
 };
 
-const char *ssl_protocol_to_string(int version);
+const char * __cdecl ssl_protocol_to_string(int version);
 
 /* Returns true if certificate and private key for 'idx' are present */
-static ossl_inline int ssl_has_cert(const SSL *s, int idx)
+static ossl_inline int __cdecl ssl_has_cert(const SSL *s, int idx)
 {
     if (idx < 0 || idx >= SSL_PKEY_NUM)
         return 0;
@@ -2240,7 +2240,7 @@ static ossl_inline int ssl_has_cert(const SSL *s, int idx)
         && s->cert->pkeys[idx].privatekey != NULL;
 }
 
-static ossl_inline void tls1_get_peer_groups(SSL *s, const uint16_t **pgroups,
+static ossl_inline void __cdecl tls1_get_peer_groups(SSL *s, const uint16_t **pgroups,
                                              size_t *pgroupslen)
 {
     *pgroups = s->ext.peer_supportedgroups;
@@ -2249,345 +2249,345 @@ static ossl_inline void tls1_get_peer_groups(SSL *s, const uint16_t **pgroups,
 
 # ifndef OPENSSL_UNIT_TEST
 
-__owur int ssl_read_internal(SSL *s, void *buf, size_t num, size_t *readbytes);
-__owur int ssl_write_internal(SSL *s, const void *buf, size_t num, size_t *written);
-void ssl_clear_cipher_ctx(SSL *s);
-int ssl_clear_bad_session(SSL *s);
-__owur CERT *ssl_cert_new(void);
-__owur CERT *ssl_cert_dup(CERT *cert);
-void ssl_cert_clear_certs(CERT *c);
-void ssl_cert_free(CERT *c);
-__owur int ssl_generate_session_id(SSL *s, SSL_SESSION *ss);
-__owur int ssl_get_new_session(SSL *s, int session);
-__owur SSL_SESSION *lookup_sess_in_cache(SSL *s, const unsigned char *sess_id,
+__owur int __cdecl ssl_read_internal(SSL *s, void *buf, size_t num, size_t *readbytes);
+__owur int __cdecl ssl_write_internal(SSL *s, const void *buf, size_t num, size_t *written);
+void __cdecl ssl_clear_cipher_ctx(SSL *s);
+int __cdecl ssl_clear_bad_session(SSL *s);
+__owur CERT * __cdecl ssl_cert_new(void);
+__owur CERT * __cdecl ssl_cert_dup(CERT *cert);
+void __cdecl ssl_cert_clear_certs(CERT *c);
+void __cdecl ssl_cert_free(CERT *c);
+__owur int __cdecl ssl_generate_session_id(SSL *s, SSL_SESSION *ss);
+__owur int __cdecl ssl_get_new_session(SSL *s, int session);
+__owur SSL_SESSION * __cdecl lookup_sess_in_cache(SSL *s, const unsigned char *sess_id,
                                          size_t sess_id_len);
-__owur int ssl_get_prev_session(SSL *s, CLIENTHELLO_MSG *hello);
-__owur SSL_SESSION *ssl_session_dup(SSL_SESSION *src, int ticket);
-__owur int ssl_cipher_id_cmp(const SSL_CIPHER *a, const SSL_CIPHER *b);
+__owur int __cdecl ssl_get_prev_session(SSL *s, CLIENTHELLO_MSG *hello);
+__owur SSL_SESSION * __cdecl ssl_session_dup(SSL_SESSION *src, int ticket);
+__owur int __cdecl ssl_cipher_id_cmp(const SSL_CIPHER *a, const SSL_CIPHER *b);
 DECLARE_OBJ_BSEARCH_GLOBAL_CMP_FN(SSL_CIPHER, SSL_CIPHER, ssl_cipher_id);
-__owur int ssl_cipher_ptr_id_cmp(const SSL_CIPHER *const *ap,
+__owur int __cdecl ssl_cipher_ptr_id_cmp(const SSL_CIPHER *const *ap,
                                  const SSL_CIPHER *const *bp);
-__owur STACK_OF(SSL_CIPHER) *ssl_create_cipher_list(const SSL_METHOD *ssl_method,
+__owur STACK_OF(SSL_CIPHER) * __cdecl ssl_create_cipher_list(const SSL_METHOD *ssl_method,
                                                     STACK_OF(SSL_CIPHER) *tls13_ciphersuites,
                                                     STACK_OF(SSL_CIPHER) **cipher_list,
                                                     STACK_OF(SSL_CIPHER) **cipher_list_by_id,
                                                     const char *rule_str,
                                                     CERT *c);
-__owur int ssl_cache_cipherlist(SSL *s, PACKET *cipher_suites, int sslv2format);
-__owur int bytes_to_cipher_list(SSL *s, PACKET *cipher_suites,
+__owur int __cdecl ssl_cache_cipherlist(SSL *s, PACKET *cipher_suites, int sslv2format);
+__owur int __cdecl bytes_to_cipher_list(SSL *s, PACKET *cipher_suites,
                                 STACK_OF(SSL_CIPHER) **skp,
                                 STACK_OF(SSL_CIPHER) **scsvs, int sslv2format,
                                 int fatal);
-void ssl_update_cache(SSL *s, int mode);
-__owur int ssl_cipher_get_evp(const SSL_SESSION *s, const EVP_CIPHER **enc,
+void __cdecl ssl_update_cache(SSL *s, int mode);
+__owur int __cdecl ssl_cipher_get_evp(const SSL_SESSION *s, const EVP_CIPHER **enc,
                               const EVP_MD **md, int *mac_pkey_type,
                               size_t *mac_secret_size, SSL_COMP **comp,
                               int use_etm);
-__owur int ssl_cipher_get_overhead(const SSL_CIPHER *c, size_t *mac_overhead,
+__owur int __cdecl ssl_cipher_get_overhead(const SSL_CIPHER *c, size_t *mac_overhead,
                                    size_t *int_overhead, size_t *blocksize,
                                    size_t *ext_overhead);
-__owur int ssl_cert_is_disabled(size_t idx);
-__owur const SSL_CIPHER *ssl_get_cipher_by_char(SSL *ssl,
+__owur int __cdecl ssl_cert_is_disabled(size_t idx);
+__owur const SSL_CIPHER * __cdecl ssl_get_cipher_by_char(SSL *ssl,
                                                 const unsigned char *ptr,
                                                 int all);
-__owur int ssl_cert_set0_chain(SSL *s, SSL_CTX *ctx, STACK_OF(X509) *chain);
-__owur int ssl_cert_set1_chain(SSL *s, SSL_CTX *ctx, STACK_OF(X509) *chain);
-__owur int ssl_cert_add0_chain_cert(SSL *s, SSL_CTX *ctx, X509 *x);
-__owur int ssl_cert_add1_chain_cert(SSL *s, SSL_CTX *ctx, X509 *x);
-__owur int ssl_cert_select_current(CERT *c, X509 *x);
-__owur int ssl_cert_set_current(CERT *c, long arg);
-void ssl_cert_set_cert_cb(CERT *c, int (*cb) (SSL *ssl, void *arg), void *arg);
-
-__owur int ssl_verify_cert_chain(SSL *s, STACK_OF(X509) *sk);
-__owur int ssl_build_cert_chain(SSL *s, SSL_CTX *ctx, int flags);
-__owur int ssl_cert_set_cert_store(CERT *c, X509_STORE *store, int chain,
+__owur int __cdecl ssl_cert_set0_chain(SSL *s, SSL_CTX *ctx, STACK_OF(X509) *chain);
+__owur int __cdecl ssl_cert_set1_chain(SSL *s, SSL_CTX *ctx, STACK_OF(X509) *chain);
+__owur int __cdecl ssl_cert_add0_chain_cert(SSL *s, SSL_CTX *ctx, X509 *x);
+__owur int __cdecl ssl_cert_add1_chain_cert(SSL *s, SSL_CTX *ctx, X509 *x);
+__owur int __cdecl ssl_cert_select_current(CERT *c, X509 *x);
+__owur int __cdecl ssl_cert_set_current(CERT *c, long arg);
+void __cdecl ssl_cert_set_cert_cb(CERT *c, int (__cdecl *cb) (SSL *ssl, void *arg), void *arg);
+
+__owur int __cdecl ssl_verify_cert_chain(SSL *s, STACK_OF(X509) *sk);
+__owur int __cdecl ssl_build_cert_chain(SSL *s, SSL_CTX *ctx, int flags);
+__owur int __cdecl ssl_cert_set_cert_store(CERT *c, X509_STORE *store, int chain,
                                    int ref);
 
-__owur int ssl_security(const SSL *s, int op, int bits, int nid, void *other);
-__owur int ssl_ctx_security(const SSL_CTX *ctx, int op, int bits, int nid,
+__owur int __cdecl ssl_security(const SSL *s, int op, int bits, int nid, void *other);
+__owur int __cdecl ssl_ctx_security(const SSL_CTX *ctx, int op, int bits, int nid,
                             void *other);
 
-__owur int ssl_cert_lookup_by_nid(int nid, size_t *pidx);
-__owur const SSL_CERT_LOOKUP *ssl_cert_lookup_by_pkey(const EVP_PKEY *pk,
+__owur int __cdecl ssl_cert_lookup_by_nid(int nid, size_t *pidx);
+__owur const SSL_CERT_LOOKUP * __cdecl ssl_cert_lookup_by_pkey(const EVP_PKEY *pk,
                                                       size_t *pidx);
-__owur const SSL_CERT_LOOKUP *ssl_cert_lookup_by_idx(size_t idx);
+__owur const SSL_CERT_LOOKUP * __cdecl ssl_cert_lookup_by_idx(size_t idx);
 
-int ssl_undefined_function(SSL *s);
-__owur int ssl_undefined_void_function(void);
-__owur int ssl_undefined_const_function(const SSL *s);
-__owur int ssl_get_server_cert_serverinfo(SSL *s,
+int __cdecl ssl_undefined_function(SSL *s);
+__owur int __cdecl ssl_undefined_void_function(void);
+__owur int __cdecl ssl_undefined_const_function(const SSL *s);
+__owur int __cdecl ssl_get_server_cert_serverinfo(SSL *s,
                                           const unsigned char **serverinfo,
                                           size_t *serverinfo_length);
-void ssl_set_masks(SSL *s);
-__owur STACK_OF(SSL_CIPHER) *ssl_get_ciphers_by_id(SSL *s);
-__owur int ssl_x509err2alert(int type);
-void ssl_sort_cipher_list(void);
-int ssl_load_ciphers(void);
-__owur int ssl_fill_hello_random(SSL *s, int server, unsigned char *field,
+void __cdecl ssl_set_masks(SSL *s);
+__owur STACK_OF(SSL_CIPHER) * __cdecl ssl_get_ciphers_by_id(SSL *s);
+__owur int __cdecl ssl_x509err2alert(int type);
+void __cdecl ssl_sort_cipher_list(void);
+int __cdecl ssl_load_ciphers(void);
+__owur int __cdecl ssl_fill_hello_random(SSL *s, int server, unsigned char *field,
                                  size_t len, DOWNGRADE dgrd);
-__owur int ssl_generate_master_secret(SSL *s, unsigned char *pms, size_t pmslen,
+__owur int __cdecl ssl_generate_master_secret(SSL *s, unsigned char *pms, size_t pmslen,
                                       int free_pms);
-__owur EVP_PKEY *ssl_generate_pkey(EVP_PKEY *pm);
-__owur int ssl_derive(SSL *s, EVP_PKEY *privkey, EVP_PKEY *pubkey,
+__owur EVP_PKEY * __cdecl ssl_generate_pkey(EVP_PKEY *pm);
+__owur int __cdecl ssl_derive(SSL *s, EVP_PKEY *privkey, EVP_PKEY *pubkey,
                       int genmaster);
-__owur EVP_PKEY *ssl_dh_to_pkey(DH *dh);
-__owur unsigned int ssl_get_max_send_fragment(const SSL *ssl);
-__owur unsigned int ssl_get_split_send_fragment(const SSL *ssl);
-
-__owur const SSL_CIPHER *ssl3_get_cipher_by_id(uint32_t id);
-__owur const SSL_CIPHER *ssl3_get_cipher_by_std_name(const char *stdname);
-__owur const SSL_CIPHER *ssl3_get_cipher_by_char(const unsigned char *p);
-__owur int ssl3_put_cipher_by_char(const SSL_CIPHER *c, WPACKET *pkt,
+__owur EVP_PKEY * __cdecl ssl_dh_to_pkey(DH *dh);
+__owur unsigned int __cdecl ssl_get_max_send_fragment(const SSL *ssl);
+__owur unsigned int __cdecl ssl_get_split_send_fragment(const SSL *ssl);
+
+__owur const SSL_CIPHER * __cdecl ssl3_get_cipher_by_id(uint32_t id);
+__owur const SSL_CIPHER * __cdecl ssl3_get_cipher_by_std_name(const char *stdname);
+__owur const SSL_CIPHER * __cdecl ssl3_get_cipher_by_char(const unsigned char *p);
+__owur int __cdecl ssl3_put_cipher_by_char(const SSL_CIPHER *c, WPACKET *pkt,
                                    size_t *len);
-int ssl3_init_finished_mac(SSL *s);
-__owur int ssl3_setup_key_block(SSL *s);
-__owur int ssl3_change_cipher_state(SSL *s, int which);
-void ssl3_cleanup_key_block(SSL *s);
-__owur int ssl3_do_write(SSL *s, int type);
-int ssl3_send_alert(SSL *s, int level, int desc);
-__owur int ssl3_generate_master_secret(SSL *s, unsigned char *out,
+int __cdecl ssl3_init_finished_mac(SSL *s);
+__owur int __cdecl ssl3_setup_key_block(SSL *s);
+__owur int __cdecl ssl3_change_cipher_state(SSL *s, int which);
+void __cdecl ssl3_cleanup_key_block(SSL *s);
+__owur int __cdecl ssl3_do_write(SSL *s, int type);
+int __cdecl ssl3_send_alert(SSL *s, int level, int desc);
+__owur int __cdecl ssl3_generate_master_secret(SSL *s, unsigned char *out,
                                        unsigned char *p, size_t len,
                                        size_t *secret_size);
-__owur int ssl3_get_req_cert_type(SSL *s, WPACKET *pkt);
-__owur int ssl3_num_ciphers(void);
-__owur const SSL_CIPHER *ssl3_get_cipher(unsigned int u);
-int ssl3_renegotiate(SSL *ssl);
-int ssl3_renegotiate_check(SSL *ssl, int initok);
-__owur int ssl3_dispatch_alert(SSL *s);
-__owur size_t ssl3_final_finish_mac(SSL *s, const char *sender, size_t slen,
+__owur int __cdecl ssl3_get_req_cert_type(SSL *s, WPACKET *pkt);
+__owur int __cdecl ssl3_num_ciphers(void);
+__owur const SSL_CIPHER * __cdecl ssl3_get_cipher(unsigned int u);
+int __cdecl ssl3_renegotiate(SSL *ssl);
+int __cdecl ssl3_renegotiate_check(SSL *ssl, int initok);
+__owur int __cdecl ssl3_dispatch_alert(SSL *s);
+__owur size_t __cdecl ssl3_final_finish_mac(SSL *s, const char *sender, size_t slen,
                                     unsigned char *p);
-__owur int ssl3_finish_mac(SSL *s, const unsigned char *buf, size_t len);
-void ssl3_free_digest_list(SSL *s);
-__owur unsigned long ssl3_output_cert_chain(SSL *s, WPACKET *pkt,
+__owur int __cdecl ssl3_finish_mac(SSL *s, const unsigned char *buf, size_t len);
+void __cdecl ssl3_free_digest_list(SSL *s);
+__owur unsigned long __cdecl ssl3_output_cert_chain(SSL *s, WPACKET *pkt,
                                             CERT_PKEY *cpk);
-__owur const SSL_CIPHER *ssl3_choose_cipher(SSL *ssl,
+__owur const SSL_CIPHER * __cdecl ssl3_choose_cipher(SSL *ssl,
                                             STACK_OF(SSL_CIPHER) *clnt,
                                             STACK_OF(SSL_CIPHER) *srvr);
-__owur int ssl3_digest_cached_records(SSL *s, int keep);
-__owur int ssl3_new(SSL *s);
-void ssl3_free(SSL *s);
-__owur int ssl3_read(SSL *s, void *buf, size_t len, size_t *readbytes);
-__owur int ssl3_peek(SSL *s, void *buf, size_t len, size_t *readbytes);
-__owur int ssl3_write(SSL *s, const void *buf, size_t len, size_t *written);
-__owur int ssl3_shutdown(SSL *s);
-int ssl3_clear(SSL *s);
-__owur long ssl3_ctrl(SSL *s, int cmd, long larg, void *parg);
-__owur long ssl3_ctx_ctrl(SSL_CTX *s, int cmd, long larg, void *parg);
-__owur long ssl3_callback_ctrl(SSL *s, int cmd, void (*fp) (void));
-__owur long ssl3_ctx_callback_ctrl(SSL_CTX *s, int cmd, void (*fp) (void));
+__owur int __cdecl ssl3_digest_cached_records(SSL *s, int keep);
+__owur int __cdecl ssl3_new(SSL *s);
+void __cdecl ssl3_free(SSL *s);
+__owur int __cdecl ssl3_read(SSL *s, void *buf, size_t len, size_t *readbytes);
+__owur int __cdecl ssl3_peek(SSL *s, void *buf, size_t len, size_t *readbytes);
+__owur int __cdecl ssl3_write(SSL *s, const void *buf, size_t len, size_t *written);
+__owur int __cdecl ssl3_shutdown(SSL *s);
+int __cdecl ssl3_clear(SSL *s);
+__owur long __cdecl ssl3_ctrl(SSL *s, int cmd, long larg, void *parg);
+__owur long __cdecl ssl3_ctx_ctrl(SSL_CTX *s, int cmd, long larg, void *parg);
+__owur long __cdecl ssl3_callback_ctrl(SSL *s, int cmd, void (__cdecl *fp) (void));
+__owur long __cdecl ssl3_ctx_callback_ctrl(SSL_CTX *s, int cmd, void (__cdecl *fp) (void));
 
 __owur int ssl3_do_change_cipher_spec(SSL *ssl);
 __owur long ssl3_default_timeout(void);
 
-__owur int ssl3_set_handshake_header(SSL *s, WPACKET *pkt, int htype);
-__owur int tls_close_construct_packet(SSL *s, WPACKET *pkt, int htype);
-__owur int tls_setup_handshake(SSL *s);
-__owur int dtls1_set_handshake_header(SSL *s, WPACKET *pkt, int htype);
-__owur int dtls1_close_construct_packet(SSL *s, WPACKET *pkt, int htype);
-__owur int ssl3_handshake_write(SSL *s);
+__owur int __cdecl ssl3_set_handshake_header(SSL *s, WPACKET *pkt, int htype);
+__owur int __cdecl tls_close_construct_packet(SSL *s, WPACKET *pkt, int htype);
+__owur int __cdecl tls_setup_handshake(SSL *s);
+__owur int __cdecl dtls1_set_handshake_header(SSL *s, WPACKET *pkt, int htype);
+__owur int __cdecl dtls1_close_construct_packet(SSL *s, WPACKET *pkt, int htype);
+__owur int __cdecl ssl3_handshake_write(SSL *s);
 
-__owur int ssl_allow_compression(SSL *s);
+__owur int __cdecl ssl_allow_compression(SSL *s);
 
-__owur int ssl_version_supported(const SSL *s, int version,
+__owur int __cdecl ssl_version_supported(const SSL *s, int version,
                                  const SSL_METHOD **meth);
 
-__owur int ssl_set_client_hello_version(SSL *s);
-__owur int ssl_check_version_downgrade(SSL *s);
-__owur int ssl_set_version_bound(int method_version, int version, int *bound);
-__owur int ssl_choose_server_version(SSL *s, CLIENTHELLO_MSG *hello,
+__owur int __cdecl ssl_set_client_hello_version(SSL *s);
+__owur int __cdecl ssl_check_version_downgrade(SSL *s);
+__owur int __cdecl ssl_set_version_bound(int method_version, int version, int *bound);
+__owur int __cdecl ssl_choose_server_version(SSL *s, CLIENTHELLO_MSG *hello,
                                      DOWNGRADE *dgrd);
-__owur int ssl_choose_client_version(SSL *s, int version,
+__owur int __cdecl ssl_choose_client_version(SSL *s, int version,
                                      RAW_EXTENSION *extensions);
-__owur int ssl_get_min_max_version(const SSL *s, int *min_version,
+__owur int __cdecl ssl_get_min_max_version(const SSL *s, int *min_version,
                                    int *max_version, int *real_max);
 
-__owur long tls1_default_timeout(void);
-__owur int dtls1_do_write(SSL *s, int type);
-void dtls1_set_message_header(SSL *s,
+__owur long __cdecl tls1_default_timeout(void);
+__owur int __cdecl dtls1_do_write(SSL *s, int type);
+void __cdecl dtls1_set_message_header(SSL *s,
                               unsigned char mt,
                               size_t len,
                               size_t frag_off, size_t frag_len);
 
-int dtls1_write_app_data_bytes(SSL *s, int type, const void *buf_, size_t len,
+int __cdecl dtls1_write_app_data_bytes(SSL *s, int type, const void *buf_, size_t len,
                                size_t *written);
 
-__owur int dtls1_read_failed(SSL *s, int code);
-__owur int dtls1_buffer_message(SSL *s, int ccs);
-__owur int dtls1_retransmit_message(SSL *s, unsigned short seq, int *found);
-__owur int dtls1_get_queue_priority(unsigned short seq, int is_ccs);
-int dtls1_retransmit_buffered_messages(SSL *s);
-void dtls1_clear_received_buffer(SSL *s);
-void dtls1_clear_sent_buffer(SSL *s);
-void dtls1_get_message_header(unsigned char *data,
+__owur int __cdecl dtls1_read_failed(SSL *s, int code);
+__owur int __cdecl dtls1_buffer_message(SSL *s, int ccs);
+__owur int __cdecl dtls1_retransmit_message(SSL *s, unsigned short seq, int *found);
+__owur int __cdecl dtls1_get_queue_priority(unsigned short seq, int is_ccs);
+int __cdecl dtls1_retransmit_buffered_messages(SSL *s);
+void __cdecl dtls1_clear_received_buffer(SSL *s);
+void __cdecl dtls1_clear_sent_buffer(SSL *s);
+void __cdecl dtls1_get_message_header(unsigned char *data,
                               struct hm_header_st *msg_hdr);
-__owur long dtls1_default_timeout(void);
-__owur struct timeval *dtls1_get_timeout(SSL *s, struct timeval *timeleft);
-__owur int dtls1_check_timeout_num(SSL *s);
-__owur int dtls1_handle_timeout(SSL *s);
-void dtls1_start_timer(SSL *s);
-void dtls1_stop_timer(SSL *s);
-__owur int dtls1_is_timer_expired(SSL *s);
-void dtls1_double_timeout(SSL *s);
-__owur int dtls_raw_hello_verify_request(WPACKET *pkt, unsigned char *cookie,
+__owur long __cdecl dtls1_default_timeout(void);
+__owur struct timeval * __cdecl dtls1_get_timeout(SSL *s, struct timeval *timeleft);
+__owur int __cdecl dtls1_check_timeout_num(SSL *s);
+__owur int __cdecl dtls1_handle_timeout(SSL *s);
+void __cdecl dtls1_start_timer(SSL *s);
+void __cdecl dtls1_stop_timer(SSL *s);
+__owur int __cdecl dtls1_is_timer_expired(SSL *s);
+void __cdecl dtls1_double_timeout(SSL *s);
+__owur int __cdecl dtls_raw_hello_verify_request(WPACKET *pkt, unsigned char *cookie,
                                          size_t cookie_len);
-__owur size_t dtls1_min_mtu(SSL *s);
-void dtls1_hm_fragment_free(hm_fragment *frag);
-__owur int dtls1_query_mtu(SSL *s);
+__owur size_t __cdecl dtls1_min_mtu(SSL *s);
+void __cdecl dtls1_hm_fragment_free(hm_fragment *frag);
+__owur int __cdecl dtls1_query_mtu(SSL *s);
 
-__owur int tls1_new(SSL *s);
-void tls1_free(SSL *s);
-int tls1_clear(SSL *s);
+__owur int __cdecl tls1_new(SSL *s);
+void __cdecl tls1_free(SSL *s);
+int __cdecl tls1_clear(SSL *s);
 
-__owur int dtls1_new(SSL *s);
-void dtls1_free(SSL *s);
-int dtls1_clear(SSL *s);
-long dtls1_ctrl(SSL *s, int cmd, long larg, void *parg);
-__owur int dtls1_shutdown(SSL *s);
+__owur int __cdecl dtls1_new(SSL *s);
+void __cdecl dtls1_free(SSL *s);
+int __cdecl dtls1_clear(SSL *s);
+long __cdecl dtls1_ctrl(SSL *s, int cmd, long larg, void *parg);
+__owur int __cdecl dtls1_shutdown(SSL *s);
 
-__owur int dtls1_dispatch_alert(SSL *s);
+__owur int __cdecl dtls1_dispatch_alert(SSL *s);
 
-__owur int ssl_init_wbio_buffer(SSL *s);
-int ssl_free_wbio_buffer(SSL *s);
+__owur int __cdecl ssl_init_wbio_buffer(SSL *s);
+int __cdecl ssl_free_wbio_buffer(SSL *s);
 
-__owur int tls1_change_cipher_state(SSL *s, int which);
-__owur int tls1_setup_key_block(SSL *s);
-__owur size_t tls1_final_finish_mac(SSL *s, const char *str, size_t slen,
+__owur int __cdecl tls1_change_cipher_state(SSL *s, int which);
+__owur int __cdecl tls1_setup_key_block(SSL *s);
+__owur size_t __cdecl tls1_final_finish_mac(SSL *s, const char *str, size_t slen,
                                     unsigned char *p);
-__owur int tls1_generate_master_secret(SSL *s, unsigned char *out,
+__owur int __cdecl tls1_generate_master_secret(SSL *s, unsigned char *out,
                                        unsigned char *p, size_t len,
                                        size_t *secret_size);
-__owur int tls13_setup_key_block(SSL *s);
-__owur size_t tls13_final_finish_mac(SSL *s, const char *str, size_t slen,
+__owur int __cdecl tls13_setup_key_block(SSL *s);
+__owur size_t __cdecl tls13_final_finish_mac(SSL *s, const char *str, size_t slen,
                                      unsigned char *p);
-__owur int tls13_change_cipher_state(SSL *s, int which);
-__owur int tls13_update_key(SSL *s, int send);
-__owur int tls13_hkdf_expand(SSL *s, const EVP_MD *md,
+__owur int __cdecl tls13_change_cipher_state(SSL *s, int which);
+__owur int __cdecl tls13_update_key(SSL *s, int send);
+__owur int __cdecl tls13_hkdf_expand(SSL *s, const EVP_MD *md,
                              const unsigned char *secret,
                              const unsigned char *label, size_t labellen,
                              const unsigned char *data, size_t datalen,
                              unsigned char *out, size_t outlen, int fatal);
-__owur int tls13_derive_key(SSL *s, const EVP_MD *md,
+__owur int __cdecl tls13_derive_key(SSL *s, const EVP_MD *md,
                             const unsigned char *secret, unsigned char *key,
                             size_t keylen);
-__owur int tls13_derive_iv(SSL *s, const EVP_MD *md,
+__owur int __cdecl tls13_derive_iv(SSL *s, const EVP_MD *md,
                            const unsigned char *secret, unsigned char *iv,
                            size_t ivlen);
-__owur int tls13_derive_finishedkey(SSL *s, const EVP_MD *md,
+__owur int __cdecl tls13_derive_finishedkey(SSL *s, const EVP_MD *md,
                                     const unsigned char *secret,
                                     unsigned char *fin, size_t finlen);
-int tls13_generate_secret(SSL *s, const EVP_MD *md,
+int __cdecl tls13_generate_secret(SSL *s, const EVP_MD *md,
                           const unsigned char *prevsecret,
                           const unsigned char *insecret,
                           size_t insecretlen,
                           unsigned char *outsecret);
-__owur int tls13_generate_handshake_secret(SSL *s,
+__owur int __cdecl tls13_generate_handshake_secret(SSL *s,
                                            const unsigned char *insecret,
                                            size_t insecretlen);
-__owur int tls13_generate_master_secret(SSL *s, unsigned char *out,
+__owur int __cdecl tls13_generate_master_secret(SSL *s, unsigned char *out,
                                         unsigned char *prev, size_t prevlen,
                                         size_t *secret_size);
-__owur int tls1_export_keying_material(SSL *s, unsigned char *out, size_t olen,
+__owur int __cdecl tls1_export_keying_material(SSL *s, unsigned char *out, size_t olen,
                                        const char *label, size_t llen,
                                        const unsigned char *p, size_t plen,
                                        int use_context);
-__owur int tls13_export_keying_material(SSL *s, unsigned char *out, size_t olen,
+__owur int __cdecl tls13_export_keying_material(SSL *s, unsigned char *out, size_t olen,
                                         const char *label, size_t llen,
                                         const unsigned char *context,
                                         size_t contextlen, int use_context);
-__owur int tls13_export_keying_material_early(SSL *s, unsigned char *out,
+__owur int __cdecl tls13_export_keying_material_early(SSL *s, unsigned char *out,
                                               size_t olen, const char *label,
                                               size_t llen,
                                               const unsigned char *context,
                                               size_t contextlen);
-__owur int tls1_alert_code(int code);
-__owur int tls13_alert_code(int code);
-__owur int ssl3_alert_code(int code);
+__owur int __cdecl tls1_alert_code(int code);
+__owur int __cdecl tls13_alert_code(int code);
+__owur int __cdecl ssl3_alert_code(int code);
 
 #  ifndef OPENSSL_NO_EC
-__owur int ssl_check_srvr_ecc_cert_and_alg(X509 *x, SSL *s);
+__owur int __cdecl ssl_check_srvr_ecc_cert_and_alg(X509 *x, SSL *s);
 #  endif
 
-SSL_COMP *ssl3_comp_find(STACK_OF(SSL_COMP) *sk, int n);
+SSL_COMP * __cdecl ssl3_comp_find(STACK_OF(SSL_COMP) *sk, int n);
 
 #  ifndef OPENSSL_NO_EC
 
-__owur const TLS_GROUP_INFO *tls1_group_id_lookup(uint16_t curve_id);
-__owur int tls1_check_group_id(SSL *s, uint16_t group_id, int check_own_curves);
-__owur uint16_t tls1_shared_group(SSL *s, int nmatch);
-__owur int tls1_set_groups(uint16_t **pext, size_t *pextlen,
+__owur const TLS_GROUP_INFO * __cdecl tls1_group_id_lookup(uint16_t curve_id);
+__owur int __cdecl tls1_check_group_id(SSL *s, uint16_t group_id, int check_own_curves);
+__owur uint16_t __cdecl tls1_shared_group(SSL *s, int nmatch);
+__owur int __cdecl tls1_set_groups(uint16_t **pext, size_t *pextlen,
                            int *curves, size_t ncurves);
-__owur int tls1_set_groups_list(uint16_t **pext, size_t *pextlen,
+__owur int __cdecl tls1_set_groups_list(uint16_t **pext, size_t *pextlen,
                                 const char *str);
-void tls1_get_formatlist(SSL *s, const unsigned char **pformats,
+void __cdecl tls1_get_formatlist(SSL *s, const unsigned char **pformats,
                          size_t *num_formats);
-__owur int tls1_check_ec_tmp_key(SSL *s, unsigned long id);
-__owur EVP_PKEY *ssl_generate_pkey_group(SSL *s, uint16_t id);
-__owur EVP_PKEY *ssl_generate_param_group(uint16_t id);
+__owur int __cdecl tls1_check_ec_tmp_key(SSL *s, unsigned long id);
+__owur EVP_PKEY * __cdecl ssl_generate_pkey_group(SSL *s, uint16_t id);
+__owur EVP_PKEY * __cdecl ssl_generate_param_group(uint16_t id);
 #  endif                        /* OPENSSL_NO_EC */
 
-__owur int tls_curve_allowed(SSL *s, uint16_t curve, int op);
-void tls1_get_supported_groups(SSL *s, const uint16_t **pgroups,
+__owur int __cdecl tls_curve_allowed(SSL *s, uint16_t curve, int op);
+void __cdecl tls1_get_supported_groups(SSL *s, const uint16_t **pgroups,
                                size_t *pgroupslen);
 
-__owur int tls1_set_server_sigalgs(SSL *s);
+__owur int __cdecl tls1_set_server_sigalgs(SSL *s);
 
-__owur SSL_TICKET_STATUS tls_get_ticket_from_client(SSL *s, CLIENTHELLO_MSG *hello,
+__owur SSL_TICKET_STATUS __cdecl tls_get_ticket_from_client(SSL *s, CLIENTHELLO_MSG *hello,
                                                     SSL_SESSION **ret);
-__owur SSL_TICKET_STATUS tls_decrypt_ticket(SSL *s, const unsigned char *etick,
+__owur SSL_TICKET_STATUS __cdecl tls_decrypt_ticket(SSL *s, const unsigned char *etick,
                                             size_t eticklen,
                                             const unsigned char *sess_id,
                                             size_t sesslen, SSL_SESSION **psess);
 
-__owur int tls_use_ticket(SSL *s);
+__owur int __cdecl tls_use_ticket(SSL *s);
 
-void ssl_set_sig_mask(uint32_t *pmask_a, SSL *s, int op);
+void __cdecl ssl_set_sig_mask(uint32_t *pmask_a, SSL *s, int op);
 
-__owur int tls1_set_sigalgs_list(CERT *c, const char *str, int client);
-__owur int tls1_set_raw_sigalgs(CERT *c, const uint16_t *psigs, size_t salglen,
+__owur int __cdecl tls1_set_sigalgs_list(CERT *c, const char *str, int client);
+__owur int __cdecl tls1_set_raw_sigalgs(CERT *c, const uint16_t *psigs, size_t salglen,
                                 int client);
-__owur int tls1_set_sigalgs(CERT *c, const int *salg, size_t salglen,
+__owur int __cdecl tls1_set_sigalgs(CERT *c, const int *salg, size_t salglen,
                             int client);
-int tls1_check_chain(SSL *s, X509 *x, EVP_PKEY *pk, STACK_OF(X509) *chain,
+int __cdecl tls1_check_chain(SSL *s, X509 *x, EVP_PKEY *pk, STACK_OF(X509) *chain,
                      int idx);
-void tls1_set_cert_validity(SSL *s);
+void __cdecl tls1_set_cert_validity(SSL *s);
 
 #  ifndef OPENSSL_NO_CT
-__owur int ssl_validate_ct(SSL *s);
+__owur int __cdecl ssl_validate_ct(SSL *s);
 #  endif
 
 #  ifndef OPENSSL_NO_DH
-__owur DH *ssl_get_auto_dh(SSL *s);
+__owur DH * __cdecl ssl_get_auto_dh(SSL *s);
 #  endif
 
-__owur int ssl_security_cert(SSL *s, SSL_CTX *ctx, X509 *x, int vfy, int is_ee);
-__owur int ssl_security_cert_chain(SSL *s, STACK_OF(X509) *sk, X509 *ex,
+__owur int __cdecl ssl_security_cert(SSL *s, SSL_CTX *ctx, X509 *x, int vfy, int is_ee);
+__owur int __cdecl ssl_security_cert_chain(SSL *s, STACK_OF(X509) *sk, X509 *ex,
                                    int vfy);
 
-int tls_choose_sigalg(SSL *s, int fatalerrs);
+int __cdecl tls_choose_sigalg(SSL *s, int fatalerrs);
 
-__owur EVP_MD_CTX *ssl_replace_hash(EVP_MD_CTX **hash, const EVP_MD *md);
-void ssl_clear_hash_ctx(EVP_MD_CTX **hash);
-__owur long ssl_get_algorithm2(SSL *s);
-__owur int tls12_copy_sigalgs(SSL *s, WPACKET *pkt,
+__owur EVP_MD_CTX * __cdecl ssl_replace_hash(EVP_MD_CTX **hash, const EVP_MD *md);
+void __cdecl ssl_clear_hash_ctx(EVP_MD_CTX **hash);
+__owur long __cdecl ssl_get_algorithm2(SSL *s);
+__owur int __cdecl tls12_copy_sigalgs(SSL *s, WPACKET *pkt,
                               const uint16_t *psig, size_t psiglen);
-__owur int tls1_save_u16(PACKET *pkt, uint16_t **pdest, size_t *pdestlen);
-__owur int tls1_save_sigalgs(SSL *s, PACKET *pkt, int cert);
-__owur int tls1_process_sigalgs(SSL *s);
-__owur int tls1_set_peer_legacy_sigalg(SSL *s, const EVP_PKEY *pkey);
-__owur int tls1_lookup_md(const SIGALG_LOOKUP *lu, const EVP_MD **pmd);
-__owur size_t tls12_get_psigalgs(SSL *s, int sent, const uint16_t **psigs);
+__owur int __cdecl tls1_save_u16(PACKET *pkt, uint16_t **pdest, size_t *pdestlen);
+__owur int __cdecl tls1_save_sigalgs(SSL *s, PACKET *pkt, int cert);
+__owur int __cdecl tls1_process_sigalgs(SSL *s);
+__owur int __cdecl tls1_set_peer_legacy_sigalg(SSL *s, const EVP_PKEY *pkey);
+__owur int __cdecl tls1_lookup_md(const SIGALG_LOOKUP *lu, const EVP_MD **pmd);
+__owur size_t __cdecl tls12_get_psigalgs(SSL *s, int sent, const uint16_t **psigs);
 #  ifndef OPENSSL_NO_EC
-__owur int tls_check_sigalg_curve(const SSL *s, int curve);
+__owur int __cdecl tls_check_sigalg_curve(const SSL *s, int curve);
 #  endif
-__owur int tls12_check_peer_sigalg(SSL *s, uint16_t, EVP_PKEY *pkey);
-__owur int ssl_set_client_disabled(SSL *s);
-__owur int ssl_cipher_disabled(SSL *s, const SSL_CIPHER *c, int op, int echde);
+__owur int __cdecl tls12_check_peer_sigalg(SSL *s, uint16_t, EVP_PKEY *pkey);
+__owur int __cdecl ssl_set_client_disabled(SSL *s);
+__owur int __cdecl ssl_cipher_disabled(SSL *s, const SSL_CIPHER *c, int op, int echde);
 
-__owur int ssl_handshake_hash(SSL *s, unsigned char *out, size_t outlen,
+__owur int __cdecl ssl_handshake_hash(SSL *s, unsigned char *out, size_t outlen,
                                  size_t *hashlen);
-__owur const EVP_MD *ssl_md(int idx);
-__owur const EVP_MD *ssl_handshake_md(SSL *s);
-__owur const EVP_MD *ssl_prf_md(SSL *s);
+__owur const EVP_MD * __cdecl ssl_md(int idx);
+__owur const EVP_MD * __cdecl ssl_handshake_md(SSL *s);
+__owur const EVP_MD * __cdecl ssl_prf_md(SSL *s);
 
 /*
  * ssl_log_rsa_client_key_exchange logs |premaster| to the SSL_CTX associated
@@ -2595,7 +2595,7 @@ __owur const EVP_MD *ssl_prf_md(SSL *s);
  * failure. The entry is identified by the first 8 bytes of
  * |encrypted_premaster|.
  */
-__owur int ssl_log_rsa_client_key_exchange(SSL *ssl,
+__owur int __cdecl ssl_log_rsa_client_key_exchange(SSL *ssl,
                                            const uint8_t *encrypted_premaster,
                                            size_t encrypted_premaster_len,
                                            const uint8_t *premaster,
@@ -2606,7 +2606,7 @@ __owur int ssl_log_rsa_client_key_exchange(SSL *ssl,
  * logging is available. It returns one on success and zero on failure. It tags
  * the entry with |label|.
  */
-__owur int ssl_log_secret(SSL *ssl, const char *label,
+__owur int __cdecl ssl_log_secret(SSL *ssl, const char *label,
                           const uint8_t *secret, size_t secret_len);
 
 #define MASTER_SECRET_LABEL "CLIENT_RANDOM"
@@ -2619,8 +2619,8 @@ __owur int ssl_log_secret(SSL *ssl, const char *label,
 #define EXPORTER_SECRET_LABEL "EXPORTER_SECRET"
 
 /* s3_cbc.c */
-__owur char ssl3_cbc_record_digest_supported(const EVP_MD_CTX *ctx);
-__owur int ssl3_cbc_digest_record(const EVP_MD_CTX *ctx,
+__owur char __cdecl ssl3_cbc_record_digest_supported(const EVP_MD_CTX *ctx);
+__owur int __cdecl ssl3_cbc_digest_record(const EVP_MD_CTX *ctx,
                                   unsigned char *md_out,
                                   size_t *md_out_size,
                                   const unsigned char header[13],
@@ -2630,38 +2630,38 @@ __owur int ssl3_cbc_digest_record(const EVP_MD_CTX *ctx,
                                   const unsigned char *mac_secret,
                                   size_t mac_secret_length, char is_sslv3);
 
-__owur int srp_generate_server_master_secret(SSL *s);
-__owur int srp_generate_client_master_secret(SSL *s);
-__owur int srp_verify_server_param(SSL *s);
+__owur int __cdecl srp_generate_server_master_secret(SSL *s);
+__owur int __cdecl srp_generate_client_master_secret(SSL *s);
+__owur int __cdecl srp_verify_server_param(SSL *s);
 
 /* statem/statem_srvr.c */
 
-__owur int send_certificate_request(SSL *s);
+__owur int __cdecl send_certificate_request(SSL *s);
 
 /* statem/extensions_cust.c */
 
-custom_ext_method *custom_ext_find(const custom_ext_methods *exts,
+custom_ext_method * __cdecl custom_ext_find(const custom_ext_methods *exts,
                                    ENDPOINT role, unsigned int ext_type,
                                    size_t *idx);
 
-void custom_ext_init(custom_ext_methods *meths);
+void __cdecl custom_ext_init(custom_ext_methods *meths);
 
-__owur int custom_ext_parse(SSL *s, unsigned int context, unsigned int ext_type,
+__owur int __cdecl custom_ext_parse(SSL *s, unsigned int context, unsigned int ext_type,
                             const unsigned char *ext_data, size_t ext_size,
                             X509 *x, size_t chainidx);
-__owur int custom_ext_add(SSL *s, int context, WPACKET *pkt, X509 *x,
+__owur int __cdecl custom_ext_add(SSL *s, int context, WPACKET *pkt, X509 *x,
                           size_t chainidx, int maxversion);
 
-__owur int custom_exts_copy(custom_ext_methods *dst,
+__owur int __cdecl custom_exts_copy(custom_ext_methods *dst,
                             const custom_ext_methods *src);
-__owur int custom_exts_copy_flags(custom_ext_methods *dst,
+__owur int __cdecl custom_exts_copy_flags(custom_ext_methods *dst,
                                   const custom_ext_methods *src);
-void custom_exts_free(custom_ext_methods *exts);
+void __cdecl custom_exts_free(custom_ext_methods *exts);
 
-void ssl_comp_free_compression_methods_int(void);
+void __cdecl ssl_comp_free_compression_methods_int(void);
 
 /* ssl_mcnf.c */
-void ssl_ctx_system_config(SSL_CTX *ctx);
+void __cdecl ssl_ctx_system_config(SSL_CTX *ctx);
 
 # else /* OPENSSL_UNIT_TEST */
 
diff --git a/ssl/ssl_mcnf.c b/ssl/ssl_mcnf.c
index a0e2657714..b2a00be533 100644
--- a/ssl/ssl_mcnf.c
+++ b/ssl/ssl_mcnf.c
@@ -15,7 +15,7 @@
 
 /* SSL library configuration module. */
 
-void SSL_add_ssl_module(void)
+void __cdecl SSL_add_ssl_module(void)
 {
     /* Do nothing. This will be added automatically by libcrypto */
 }
@@ -83,17 +83,17 @@ static int ssl_do_config(SSL *s, SSL_CTX *ctx, const char *name, int system)
     return rv <= 0 ? 0 : 1;
 }
 
-int SSL_config(SSL *s, const char *name)
+int __cdecl SSL_config(SSL *s, const char *name)
 {
     return ssl_do_config(s, NULL, name, 0);
 }
 
-int SSL_CTX_config(SSL_CTX *ctx, const char *name)
+int __cdecl SSL_CTX_config(SSL_CTX *ctx, const char *name)
 {
     return ssl_do_config(NULL, ctx, name, 0);
 }
 
-void ssl_ctx_system_config(SSL_CTX *ctx)
+void __cdecl ssl_ctx_system_config(SSL_CTX *ctx)
 {
     ssl_do_config(NULL, ctx, NULL, 1);
 }
diff --git a/ssl/ssl_rsa.c b/ssl/ssl_rsa.c
index 172e15f920..3148394a1b 100644
--- a/ssl/ssl_rsa.c
+++ b/ssl/ssl_rsa.c
@@ -16,15 +16,15 @@
 #include <openssl/x509.h>
 #include <openssl/pem.h>
 
-static int ssl_set_cert(CERT *c, X509 *x509);
-static int ssl_set_pkey(CERT *c, EVP_PKEY *pkey);
+static int __cdecl ssl_set_cert(CERT *c, X509 *x509);
+static int __cdecl ssl_set_pkey(CERT *c, EVP_PKEY *pkey);
 
 #define  SYNTHV1CONTEXT     (SSL_EXT_TLS1_2_AND_BELOW_ONLY \
                              | SSL_EXT_CLIENT_HELLO \
                              | SSL_EXT_TLS1_2_SERVER_HELLO \
                              | SSL_EXT_IGNORE_ON_RESUMPTION)
 
-int SSL_use_certificate(SSL *ssl, X509 *x)
+int __cdecl SSL_use_certificate(SSL *ssl, X509 *x)
 {
     int rv;
     if (x == NULL) {
@@ -40,7 +40,7 @@ int SSL_use_certificate(SSL *ssl, X509 *x)
     return ssl_set_cert(ssl->cert, x);
 }
 
-int SSL_use_certificate_file(SSL *ssl, const char *file, int type)
+int __cdecl SSL_use_certificate_file(SSL *ssl, const char *file, int type)
 {
     int j;
     BIO *in;
@@ -81,7 +81,7 @@ int SSL_use_certificate_file(SSL *ssl, const char *file, int type)
     return ret;
 }
 
-int SSL_use_certificate_ASN1(SSL *ssl, const unsigned char *d, int len)
+int __cdecl SSL_use_certificate_ASN1(SSL *ssl, const unsigned char *d, int len)
 {
     X509 *x;
     int ret;
@@ -98,7 +98,7 @@ int SSL_use_certificate_ASN1(SSL *ssl, const unsigned char *d, int len)
 }
 
 #ifndef OPENSSL_NO_RSA
-int SSL_use_RSAPrivateKey(SSL *ssl, RSA *rsa)
+int __cdecl SSL_use_RSAPrivateKey(SSL *ssl, RSA *rsa)
 {
     EVP_PKEY *pkey;
     int ret;
@@ -125,7 +125,7 @@ int SSL_use_RSAPrivateKey(SSL *ssl, RSA *rsa)
 }
 #endif
 
-static int ssl_set_pkey(CERT *c, EVP_PKEY *pkey)
+static int __cdecl ssl_set_pkey(CERT *c, EVP_PKEY *pkey)
 {
     size_t i;
 
@@ -172,7 +172,7 @@ static int ssl_set_pkey(CERT *c, EVP_PKEY *pkey)
 }
 
 #ifndef OPENSSL_NO_RSA
-int SSL_use_RSAPrivateKey_file(SSL *ssl, const char *file, int type)
+int __cdecl SSL_use_RSAPrivateKey_file(SSL *ssl, const char *file, int type)
 {
     int j, ret = 0;
     BIO *in;
@@ -211,7 +211,7 @@ int SSL_use_RSAPrivateKey_file(SSL *ssl, const char *file, int type)
     return ret;
 }
 
-int SSL_use_RSAPrivateKey_ASN1(SSL *ssl, const unsigned char *d, long len)
+int __cdecl SSL_use_RSAPrivateKey_ASN1(SSL *ssl, const unsigned char *d, long len)
 {
     int ret;
     const unsigned char *p;
@@ -229,7 +229,7 @@ int SSL_use_RSAPrivateKey_ASN1(SSL *ssl, const unsigned char *d, long len)
 }
 #endif                          /* !OPENSSL_NO_RSA */
 
-int SSL_use_PrivateKey(SSL *ssl, EVP_PKEY *pkey)
+int __cdecl SSL_use_PrivateKey(SSL *ssl, EVP_PKEY *pkey)
 {
     int ret;
 
@@ -241,7 +241,7 @@ int SSL_use_PrivateKey(SSL *ssl, EVP_PKEY *pkey)
     return ret;
 }
 
-int SSL_use_PrivateKey_file(SSL *ssl, const char *file, int type)
+int __cdecl SSL_use_PrivateKey_file(SSL *ssl, const char *file, int type)
 {
     int j, ret = 0;
     BIO *in;
@@ -280,7 +280,7 @@ int SSL_use_PrivateKey_file(SSL *ssl, const char *file, int type)
     return ret;
 }
 
-int SSL_use_PrivateKey_ASN1(int type, SSL *ssl, const unsigned char *d,
+int __cdecl SSL_use_PrivateKey_ASN1(int type, SSL *ssl, const unsigned char *d,
                             long len)
 {
     int ret;
@@ -298,7 +298,7 @@ int SSL_use_PrivateKey_ASN1(int type, SSL *ssl, const unsigned char *d,
     return ret;
 }
 
-int SSL_CTX_use_certificate(SSL_CTX *ctx, X509 *x)
+int __cdecl SSL_CTX_use_certificate(SSL_CTX *ctx, X509 *x)
 {
     int rv;
     if (x == NULL) {
@@ -313,7 +313,7 @@ int SSL_CTX_use_certificate(SSL_CTX *ctx, X509 *x)
     return ssl_set_cert(ctx->cert, x);
 }
 
-static int ssl_set_cert(CERT *c, X509 *x)
+static int __cdecl ssl_set_cert(CERT *c, X509 *x)
 {
     EVP_PKEY *pkey;
     size_t i;
@@ -373,7 +373,7 @@ static int ssl_set_cert(CERT *c, X509 *x)
     return 1;
 }
 
-int SSL_CTX_use_certificate_file(SSL_CTX *ctx, const char *file, int type)
+int __cdecl SSL_CTX_use_certificate_file(SSL_CTX *ctx, const char *file, int type)
 {
     int j;
     BIO *in;
@@ -414,7 +414,7 @@ int SSL_CTX_use_certificate_file(SSL_CTX *ctx, const char *file, int type)
     return ret;
 }
 
-int SSL_CTX_use_certificate_ASN1(SSL_CTX *ctx, int len, const unsigned char *d)
+int __cdecl SSL_CTX_use_certificate_ASN1(SSL_CTX *ctx, int len, const unsigned char *d)
 {
     X509 *x;
     int ret;
@@ -431,7 +431,7 @@ int SSL_CTX_use_certificate_ASN1(SSL_CTX *ctx, int len, const unsigned char *d)
 }
 
 #ifndef OPENSSL_NO_RSA
-int SSL_CTX_use_RSAPrivateKey(SSL_CTX *ctx, RSA *rsa)
+int __cdecl SSL_CTX_use_RSAPrivateKey(SSL_CTX *ctx, RSA *rsa)
 {
     int ret;
     EVP_PKEY *pkey;
@@ -457,7 +457,7 @@ int SSL_CTX_use_RSAPrivateKey(SSL_CTX *ctx, RSA *rsa)
     return ret;
 }
 
-int SSL_CTX_use_RSAPrivateKey_file(SSL_CTX *ctx, const char *file, int type)
+int __cdecl SSL_CTX_use_RSAPrivateKey_file(SSL_CTX *ctx, const char *file, int type)
 {
     int j, ret = 0;
     BIO *in;
@@ -496,7 +496,7 @@ int SSL_CTX_use_RSAPrivateKey_file(SSL_CTX *ctx, const char *file, int type)
     return ret;
 }
 
-int SSL_CTX_use_RSAPrivateKey_ASN1(SSL_CTX *ctx, const unsigned char *d,
+int __cdecl SSL_CTX_use_RSAPrivateKey_ASN1(SSL_CTX *ctx, const unsigned char *d,
                                    long len)
 {
     int ret;
@@ -515,7 +515,7 @@ int SSL_CTX_use_RSAPrivateKey_ASN1(SSL_CTX *ctx, const unsigned char *d,
 }
 #endif                          /* !OPENSSL_NO_RSA */
 
-int SSL_CTX_use_PrivateKey(SSL_CTX *ctx, EVP_PKEY *pkey)
+int __cdecl SSL_CTX_use_PrivateKey(SSL_CTX *ctx, EVP_PKEY *pkey)
 {
     if (pkey == NULL) {
         SSLerr(SSL_F_SSL_CTX_USE_PRIVATEKEY, ERR_R_PASSED_NULL_PARAMETER);
@@ -524,7 +524,7 @@ int SSL_CTX_use_PrivateKey(SSL_CTX *ctx, EVP_PKEY *pkey)
     return ssl_set_pkey(ctx->cert, pkey);
 }
 
-int SSL_CTX_use_PrivateKey_file(SSL_CTX *ctx, const char *file, int type)
+int __cdecl SSL_CTX_use_PrivateKey_file(SSL_CTX *ctx, const char *file, int type)
 {
     int j, ret = 0;
     BIO *in;
@@ -563,7 +563,7 @@ int SSL_CTX_use_PrivateKey_file(SSL_CTX *ctx, const char *file, int type)
     return ret;
 }
 
-int SSL_CTX_use_PrivateKey_ASN1(int type, SSL_CTX *ctx,
+int __cdecl SSL_CTX_use_PrivateKey_ASN1(int type, SSL_CTX *ctx,
                                 const unsigned char *d, long len)
 {
     int ret;
@@ -586,7 +586,7 @@ int SSL_CTX_use_PrivateKey_ASN1(int type, SSL_CTX *ctx,
  * followed by a sequence of CA certificates that should be sent to the peer
  * in the Certificate message.
  */
-static int use_certificate_chain_file(SSL_CTX *ctx, SSL *ssl, const char *file)
+static int __cdecl use_certificate_chain_file(SSL_CTX *ctx, SSL *ssl, const char *file)
 {
     BIO *in;
     int ret = 0;
@@ -683,17 +683,17 @@ static int use_certificate_chain_file(SSL_CTX *ctx, SSL *ssl, const char *file)
     return ret;
 }
 
-int SSL_CTX_use_certificate_chain_file(SSL_CTX *ctx, const char *file)
+int __cdecl SSL_CTX_use_certificate_chain_file(SSL_CTX *ctx, const char *file)
 {
     return use_certificate_chain_file(ctx, NULL, file);
 }
 
-int SSL_use_certificate_chain_file(SSL *ssl, const char *file)
+int __cdecl SSL_use_certificate_chain_file(SSL *ssl, const char *file)
 {
     return use_certificate_chain_file(NULL, ssl, file);
 }
 
-static int serverinfo_find_extension(const unsigned char *serverinfo,
+static int __cdecl serverinfo_find_extension(const unsigned char *serverinfo,
                                      size_t serverinfo_length,
                                      unsigned int extension_type,
                                      const unsigned char **extension_data,
@@ -731,7 +731,7 @@ static int serverinfo_find_extension(const unsigned char *serverinfo,
     /* Unreachable */
 }
 
-static int serverinfoex_srv_parse_cb(SSL *s, unsigned int ext_type,
+static int __cdecl serverinfoex_srv_parse_cb(SSL *s, unsigned int ext_type,
                                      unsigned int context,
                                      const unsigned char *in,
                                      size_t inlen, X509 *x, size_t chainidx,
@@ -746,7 +746,7 @@ static int serverinfoex_srv_parse_cb(SSL *s, unsigned int ext_type,
     return 1;
 }
 
-static int serverinfo_srv_parse_cb(SSL *s, unsigned int ext_type,
+static int __cdecl serverinfo_srv_parse_cb(SSL *s, unsigned int ext_type,
                                    const unsigned char *in,
                                    size_t inlen, int *al, void *arg)
 {
@@ -754,7 +754,7 @@ static int serverinfo_srv_parse_cb(SSL *s, unsigned int ext_type,
                                      arg);
 }
 
-static int serverinfoex_srv_add_cb(SSL *s, unsigned int ext_type,
+static int __cdecl serverinfoex_srv_add_cb(SSL *s, unsigned int ext_type,
                                    unsigned int context,
                                    const unsigned char **out,
                                    size_t *outlen, X509 *x, size_t chainidx,
@@ -785,7 +785,7 @@ static int serverinfoex_srv_add_cb(SSL *s, unsigned int ext_type,
                                  * extension */
 }
 
-static int serverinfo_srv_add_cb(SSL *s, unsigned int ext_type,
+static int __cdecl serverinfo_srv_add_cb(SSL *s, unsigned int ext_type,
                                  const unsigned char **out, size_t *outlen,
                                  int *al, void *arg)
 {
@@ -798,7 +798,7 @@ static int serverinfo_srv_add_cb(SSL *s, unsigned int ext_type,
  * parses correctly.  With a non-NULL context, it registers callbacks for
  * the included extensions.
  */
-static int serverinfo_process_buffer(unsigned int version,
+static int __cdecl serverinfo_process_buffer(unsigned int version,
                                      const unsigned char *serverinfo,
                                      size_t serverinfo_length, SSL_CTX *ctx)
 {
@@ -857,7 +857,7 @@ static int serverinfo_process_buffer(unsigned int version,
     return 1;
 }
 
-int SSL_CTX_use_serverinfo_ex(SSL_CTX *ctx, unsigned int version,
+int __cdecl SSL_CTX_use_serverinfo_ex(SSL_CTX *ctx, unsigned int version,
                               const unsigned char *serverinfo,
                               size_t serverinfo_length)
 {
@@ -898,14 +898,14 @@ int SSL_CTX_use_serverinfo_ex(SSL_CTX *ctx, unsigned int version,
     return 1;
 }
 
-int SSL_CTX_use_serverinfo(SSL_CTX *ctx, const unsigned char *serverinfo,
+int __cdecl SSL_CTX_use_serverinfo(SSL_CTX *ctx, const unsigned char *serverinfo,
                            size_t serverinfo_length)
 {
     return SSL_CTX_use_serverinfo_ex(ctx, SSL_SERVERINFOV1, serverinfo,
                                      serverinfo_length);
 }
 
-int SSL_CTX_use_serverinfo_file(SSL_CTX *ctx, const char *file)
+int __cdecl SSL_CTX_use_serverinfo_file(SSL_CTX *ctx, const char *file)
 {
     unsigned char *serverinfo = NULL;
     unsigned char *tmp;
@@ -1036,7 +1036,7 @@ int SSL_CTX_use_serverinfo_file(SSL_CTX *ctx, const char *file)
     return ret;
 }
 
-static int ssl_set_cert_and_key(SSL *ssl, SSL_CTX *ctx, X509 *x509, EVP_PKEY *privatekey,
+static int __cdecl ssl_set_cert_and_key(SSL *ssl, SSL_CTX *ctx, X509 *x509, EVP_PKEY *privatekey,
                                 STACK_OF(X509) *chain, int override)
 {
     int ret = 0;
@@ -1135,13 +1135,13 @@ static int ssl_set_cert_and_key(SSL *ssl, SSL_CTX *ctx, X509 *x509, EVP_PKEY *pr
     return ret;
 }
 
-int SSL_use_cert_and_key(SSL *ssl, X509 *x509, EVP_PKEY *privatekey,
+int __cdecl SSL_use_cert_and_key(SSL *ssl, X509 *x509, EVP_PKEY *privatekey,
                          STACK_OF(X509) *chain, int override)
 {
     return ssl_set_cert_and_key(ssl, NULL, x509, privatekey, chain, override);
 }
 
-int SSL_CTX_use_cert_and_key(SSL_CTX *ctx, X509 *x509, EVP_PKEY *privatekey,
+int __cdecl SSL_CTX_use_cert_and_key(SSL_CTX *ctx, X509 *x509, EVP_PKEY *privatekey,
                              STACK_OF(X509) *chain, int override)
 {
     return ssl_set_cert_and_key(NULL, ctx, x509, privatekey, chain, override);
diff --git a/ssl/ssl_sess.c b/ssl/ssl_sess.c
index 52cfa7ef6d..395c78d80c 100644
--- a/ssl/ssl_sess.c
+++ b/ssl/ssl_sess.c
@@ -29,13 +29,13 @@ static int remove_session_lock(SSL_CTX *ctx, SSL_SESSION *c, int lck);
  * a resumable session is to use SSL_CTX_sess_set_new_cb().
  */
 
-SSL_SESSION *SSL_get_session(const SSL *ssl)
+SSL_SESSION * __cdecl SSL_get_session(const SSL *ssl)
 /* aka SSL_get0_session; gets 0 objects, just returns a copy of the pointer */
 {
     return ssl->session;
 }
 
-SSL_SESSION *SSL_get1_session(SSL *ssl)
+SSL_SESSION * __cdecl SSL_get1_session(SSL *ssl)
 /* variant of SSL_get_session: caller really gets something */
 {
     SSL_SESSION *sess;
@@ -52,17 +52,17 @@ SSL_SESSION *SSL_get1_session(SSL *ssl)
     return sess;
 }
 
-int SSL_SESSION_set_ex_data(SSL_SESSION *s, int idx, void *arg)
+int __cdecl SSL_SESSION_set_ex_data(SSL_SESSION *s, int idx, void *arg)
 {
     return CRYPTO_set_ex_data(&s->ex_data, idx, arg);
 }
 
-void *SSL_SESSION_get_ex_data(const SSL_SESSION *s, int idx)
+void * __cdecl SSL_SESSION_get_ex_data(const SSL_SESSION *s, int idx)
 {
     return CRYPTO_get_ex_data(&s->ex_data, idx);
 }
 
-SSL_SESSION *SSL_SESSION_new(void)
+SSL_SESSION * __cdecl SSL_SESSION_new(void)
 {
     SSL_SESSION *ss;
 
@@ -94,7 +94,7 @@ SSL_SESSION *SSL_SESSION_new(void)
     return ss;
 }
 
-SSL_SESSION *SSL_SESSION_dup(SSL_SESSION *src)
+SSL_SESSION * __cdecl SSL_SESSION_dup(SSL_SESSION *src)
 {
     return ssl_session_dup(src, 1);
 }
@@ -103,7 +103,7 @@ SSL_SESSION *SSL_SESSION_dup(SSL_SESSION *src)
  * Create a new SSL_SESSION and duplicate the contents of |src| into it. If
  * ticket == 0 then no ticket information is duplicated, otherwise it is.
  */
-SSL_SESSION *ssl_session_dup(SSL_SESSION *src, int ticket)
+SSL_SESSION * __cdecl ssl_session_dup(SSL_SESSION *src, int ticket)
 {
     SSL_SESSION *dest;
 
@@ -223,13 +223,13 @@ SSL_SESSION *ssl_session_dup(SSL_SESSION *src, int ticket)
     return NULL;
 }
 
-const unsigned char *SSL_SESSION_get_id(const SSL_SESSION *s, unsigned int *len)
+const unsigned char * __cdecl SSL_SESSION_get_id(const SSL_SESSION *s, unsigned int *len)
 {
     if (len)
         *len = (unsigned int)s->session_id_length;
     return s->session_id;
 }
-const unsigned char *SSL_SESSION_get0_id_context(const SSL_SESSION *s,
+const unsigned char * __cdecl SSL_SESSION_get0_id_context(const SSL_SESSION *s,
                                                 unsigned int *len)
 {
     if (len != NULL)
@@ -237,7 +237,7 @@ const unsigned char *SSL_SESSION_get0_id_context(const SSL_SESSION *s,
     return s->sid_ctx;
 }
 
-unsigned int SSL_SESSION_get_compress_id(const SSL_SESSION *s)
+unsigned int __cdecl SSL_SESSION_get_compress_id(const SSL_SESSION *s)
 {
     return s->compress_meth;
 }
@@ -254,7 +254,7 @@ unsigned int SSL_SESSION_get_compress_id(const SSL_SESSION *s)
  */
 
 #define MAX_SESS_ID_ATTEMPTS 10
-static int def_generate_session_id(SSL *ssl, unsigned char *id,
+static int __cdecl def_generate_session_id(SSL *ssl, unsigned char *id,
                                    unsigned int *id_len)
 {
     unsigned int retry = 0;
@@ -277,7 +277,7 @@ static int def_generate_session_id(SSL *ssl, unsigned char *id,
     return 0;
 }
 
-int ssl_generate_session_id(SSL *s, SSL_SESSION *ss)
+int __cdecl ssl_generate_session_id(SSL *s, SSL_SESSION *ss)
 {
     unsigned int tmp;
     GEN_SESSION_CB cb = def_generate_session_id;
@@ -359,7 +359,7 @@ int ssl_generate_session_id(SSL *s, SSL_SESSION *ss)
     return 1;
 }
 
-int ssl_get_new_session(SSL *s, int session)
+int __cdecl ssl_get_new_session(SSL *s, int session)
 {
     /* This gets used by clients and servers. */
 
@@ -416,7 +416,7 @@ int ssl_get_new_session(SSL *s, int session)
     return 1;
 }
 
-SSL_SESSION *lookup_sess_in_cache(SSL *s, const unsigned char *sess_id,
+SSL_SESSION * __cdecl lookup_sess_in_cache(SSL *s, const unsigned char *sess_id,
                                   size_t sess_id_len)
 {
     SSL_SESSION *ret = NULL;
@@ -497,7 +497,7 @@ SSL_SESSION *lookup_sess_in_cache(SSL *s, const unsigned char *sess_id,
  *   - Both for new and resumed sessions, s->ext.ticket_expected is set to 1
  *     if the server should issue a new session ticket (to 0 otherwise).
  */
-int ssl_get_prev_session(SSL *s, CLIENTHELLO_MSG *hello)
+int __cdecl ssl_get_prev_session(SSL *s, CLIENTHELLO_MSG *hello)
 {
     /* This is used only by servers. */
 
@@ -634,7 +634,7 @@ int ssl_get_prev_session(SSL *s, CLIENTHELLO_MSG *hello)
     return 0;
 }
 
-int SSL_CTX_add_session(SSL_CTX *ctx, SSL_SESSION *c)
+int __cdecl SSL_CTX_add_session(SSL_CTX *ctx, SSL_SESSION *c)
 {
     int ret = 0;
     SSL_SESSION *s;
@@ -711,7 +711,7 @@ int SSL_CTX_add_session(SSL_CTX *ctx, SSL_SESSION *c)
     return ret;
 }
 
-int SSL_CTX_remove_session(SSL_CTX *ctx, SSL_SESSION *c)
+int __cdecl SSL_CTX_remove_session(SSL_CTX *ctx, SSL_SESSION *c)
 {
     return remove_session_lock(ctx, c, 1);
 }
@@ -744,7 +744,7 @@ static int remove_session_lock(SSL_CTX *ctx, SSL_SESSION *c, int lck)
     return ret;
 }
 
-void SSL_SESSION_free(SSL_SESSION *ss)
+void __cdecl SSL_SESSION_free(SSL_SESSION *ss)
 {
     int i;
 
@@ -777,7 +777,7 @@ void SSL_SESSION_free(SSL_SESSION *ss)
     OPENSSL_clear_free(ss, sizeof(*ss));
 }
 
-int SSL_SESSION_up_ref(SSL_SESSION *ss)
+int __cdecl SSL_SESSION_up_ref(SSL_SESSION *ss)
 {
     int i;
 
@@ -789,7 +789,7 @@ int SSL_SESSION_up_ref(SSL_SESSION *ss)
     return ((i > 1) ? 1 : 0);
 }
 
-int SSL_set_session(SSL *s, SSL_SESSION *session)
+int __cdecl SSL_set_session(SSL *s, SSL_SESSION *session)
 {
     ssl_clear_bad_session(s);
     if (s->ctx->method != s->method) {
@@ -807,7 +807,7 @@ int SSL_set_session(SSL *s, SSL_SESSION *session)
     return 1;
 }
 
-int SSL_SESSION_set1_id(SSL_SESSION *s, const unsigned char *sid,
+int __cdecl SSL_SESSION_set1_id(SSL_SESSION *s, const unsigned char *sid,
                         unsigned int sid_len)
 {
     if (sid_len > SSL_MAX_SSL_SESSION_ID_LENGTH) {
@@ -821,7 +821,7 @@ int SSL_SESSION_set1_id(SSL_SESSION *s, const unsigned char *sid,
     return 1;
 }
 
-long SSL_SESSION_set_timeout(SSL_SESSION *s, long t)
+long __cdecl SSL_SESSION_set_timeout(SSL_SESSION *s, long t)
 {
     if (s == NULL)
         return 0;
@@ -829,21 +829,21 @@ long SSL_SESSION_set_timeout(SSL_SESSION *s, long t)
     return 1;
 }
 
-long SSL_SESSION_get_timeout(const SSL_SESSION *s)
+long __cdecl SSL_SESSION_get_timeout(const SSL_SESSION *s)
 {
     if (s == NULL)
         return 0;
     return s->timeout;
 }
 
-long SSL_SESSION_get_time(const SSL_SESSION *s)
+long __cdecl SSL_SESSION_get_time(const SSL_SESSION *s)
 {
     if (s == NULL)
         return 0;
     return s->time;
 }
 
-long SSL_SESSION_set_time(SSL_SESSION *s, long t)
+long __cdecl SSL_SESSION_set_time(SSL_SESSION *s, long t)
 {
     if (s == NULL)
         return 0;
@@ -851,34 +851,34 @@ long SSL_SESSION_set_time(SSL_SESSION *s, long t)
     return t;
 }
 
-int SSL_SESSION_get_protocol_version(const SSL_SESSION *s)
+int __cdecl SSL_SESSION_get_protocol_version(const SSL_SESSION *s)
 {
     return s->ssl_version;
 }
 
-int SSL_SESSION_set_protocol_version(SSL_SESSION *s, int version)
+int __cdecl SSL_SESSION_set_protocol_version(SSL_SESSION *s, int version)
 {
     s->ssl_version = version;
     return 1;
 }
 
-const SSL_CIPHER *SSL_SESSION_get0_cipher(const SSL_SESSION *s)
+const SSL_CIPHER * __cdecl SSL_SESSION_get0_cipher(const SSL_SESSION *s)
 {
     return s->cipher;
 }
 
-int SSL_SESSION_set_cipher(SSL_SESSION *s, const SSL_CIPHER *cipher)
+int __cdecl SSL_SESSION_set_cipher(SSL_SESSION *s, const SSL_CIPHER *cipher)
 {
     s->cipher = cipher;
     return 1;
 }
 
-const char *SSL_SESSION_get0_hostname(const SSL_SESSION *s)
+const char * __cdecl SSL_SESSION_get0_hostname(const SSL_SESSION *s)
 {
     return s->ext.hostname;
 }
 
-int SSL_SESSION_set1_hostname(SSL_SESSION *s, const char *hostname)
+int __cdecl SSL_SESSION_set1_hostname(SSL_SESSION *s, const char *hostname)
 {
     OPENSSL_free(s->ext.hostname);
     if (hostname == NULL) {
@@ -890,17 +890,17 @@ int SSL_SESSION_set1_hostname(SSL_SESSION *s, const char *hostname)
     return s->ext.hostname != NULL;
 }
 
-int SSL_SESSION_has_ticket(const SSL_SESSION *s)
+int __cdecl SSL_SESSION_has_ticket(const SSL_SESSION *s)
 {
     return (s->ext.ticklen > 0) ? 1 : 0;
 }
 
-unsigned long SSL_SESSION_get_ticket_lifetime_hint(const SSL_SESSION *s)
+unsigned long __cdecl SSL_SESSION_get_ticket_lifetime_hint(const SSL_SESSION *s)
 {
     return s->ext.tick_lifetime_hint;
 }
 
-void SSL_SESSION_get0_ticket(const SSL_SESSION *s, const unsigned char **tick,
+void __cdecl SSL_SESSION_get0_ticket(const SSL_SESSION *s, const unsigned char **tick,
                              size_t *len)
 {
     *len = s->ext.ticklen;
@@ -908,19 +908,19 @@ void SSL_SESSION_get0_ticket(const SSL_SESSION *s, const unsigned char **tick,
         *tick = s->ext.tick;
 }
 
-uint32_t SSL_SESSION_get_max_early_data(const SSL_SESSION *s)
+uint32_t __cdecl SSL_SESSION_get_max_early_data(const SSL_SESSION *s)
 {
     return s->ext.max_early_data;
 }
 
-int SSL_SESSION_set_max_early_data(SSL_SESSION *s, uint32_t max_early_data)
+int __cdecl SSL_SESSION_set_max_early_data(SSL_SESSION *s, uint32_t max_early_data)
 {
     s->ext.max_early_data = max_early_data;
 
     return 1;
 }
 
-void SSL_SESSION_get0_alpn_selected(const SSL_SESSION *s,
+void __cdecl SSL_SESSION_get0_alpn_selected(const SSL_SESSION *s,
                                     const unsigned char **alpn,
                                     size_t *len)
 {
@@ -928,7 +928,7 @@ void SSL_SESSION_get0_alpn_selected(const SSL_SESSION *s,
     *len = s->ext.alpn_selected_len;
 }
 
-int SSL_SESSION_set1_alpn_selected(SSL_SESSION *s, const unsigned char *alpn,
+int __cdecl SSL_SESSION_set1_alpn_selected(SSL_SESSION *s, const unsigned char *alpn,
                                    size_t len)
 {
     OPENSSL_free(s->ext.alpn_selected);
@@ -947,12 +947,12 @@ int SSL_SESSION_set1_alpn_selected(SSL_SESSION *s, const unsigned char *alpn,
     return 1;
 }
 
-X509 *SSL_SESSION_get0_peer(SSL_SESSION *s)
+X509 * __cdecl SSL_SESSION_get0_peer(SSL_SESSION *s)
 {
     return s->peer;
 }
 
-int SSL_SESSION_set1_id_context(SSL_SESSION *s, const unsigned char *sid_ctx,
+int __cdecl SSL_SESSION_set1_id_context(SSL_SESSION *s, const unsigned char *sid_ctx,
                                 unsigned int sid_ctx_len)
 {
     if (sid_ctx_len > SSL_MAX_SID_CTX_LENGTH) {
@@ -967,7 +967,7 @@ int SSL_SESSION_set1_id_context(SSL_SESSION *s, const unsigned char *sid_ctx,
     return 1;
 }
 
-int SSL_SESSION_is_resumable(const SSL_SESSION *s)
+int __cdecl SSL_SESSION_is_resumable(const SSL_SESSION *s)
 {
     /*
      * In the case of EAP-FAST, we can have a pre-shared "ticket" without a
@@ -977,7 +977,7 @@ int SSL_SESSION_is_resumable(const SSL_SESSION *s)
            && (s->session_id_length > 0 || s->ext.ticklen > 0);
 }
 
-long SSL_CTX_set_timeout(SSL_CTX *s, long t)
+long __cdecl SSL_CTX_set_timeout(SSL_CTX *s, long t)
 {
     long l;
     if (s == NULL)
@@ -987,14 +987,14 @@ long SSL_CTX_set_timeout(SSL_CTX *s, long t)
     return l;
 }
 
-long SSL_CTX_get_timeout(const SSL_CTX *s)
+long __cdecl SSL_CTX_get_timeout(const SSL_CTX *s)
 {
     if (s == NULL)
         return 0;
     return s->session_timeout;
 }
 
-int SSL_set_session_secret_cb(SSL *s,
+int __cdecl SSL_set_session_secret_cb(SSL *s,
                               tls_session_secret_cb_fn tls_session_secret_cb,
                               void *arg)
 {
@@ -1005,7 +1005,7 @@ int SSL_set_session_secret_cb(SSL *s,
     return 1;
 }
 
-int SSL_set_session_ticket_ext_cb(SSL *s, tls_session_ticket_ext_cb_fn cb,
+int __cdecl SSL_set_session_ticket_ext_cb(SSL *s, tls_session_ticket_ext_cb_fn cb,
                                   void *arg)
 {
     if (s == NULL)
@@ -1015,7 +1015,7 @@ int SSL_set_session_ticket_ext_cb(SSL *s, tls_session_ticket_ext_cb_fn cb,
     return 1;
 }
 
-int SSL_set_session_ticket_ext(SSL *s, void *ext_data, int ext_len)
+int __cdecl SSL_set_session_ticket_ext(SSL *s, void *ext_data, int ext_len)
 {
     if (s->version >= TLS1_VERSION) {
         OPENSSL_free(s->ext.session_ticket);
@@ -1066,7 +1066,7 @@ static void timeout_cb(SSL_SESSION *s, TIMEOUT_PARAM *p)
 
 IMPLEMENT_LHASH_DOALL_ARG(SSL_SESSION, TIMEOUT_PARAM);
 
-void SSL_CTX_flush_sessions(SSL_CTX *s, long t)
+void __cdecl SSL_CTX_flush_sessions(SSL_CTX *s, long t)
 {
     unsigned long i;
     TIMEOUT_PARAM tp;
@@ -1084,7 +1084,7 @@ void SSL_CTX_flush_sessions(SSL_CTX *s, long t)
     CRYPTO_THREAD_unlock(s->lock);
 }
 
-int ssl_clear_bad_session(SSL *s)
+int __cdecl ssl_clear_bad_session(SSL *s)
 {
     if ((s->session != NULL) &&
         !(s->shutdown & SSL_SENT_SHUTDOWN) &&
@@ -1143,67 +1143,67 @@ static void SSL_SESSION_list_add(SSL_CTX *ctx, SSL_SESSION *s)
     }
 }
 
-void SSL_CTX_sess_set_new_cb(SSL_CTX *ctx,
-                             int (*cb) (struct ssl_st *ssl, SSL_SESSION *sess))
+void __cdecl SSL_CTX_sess_set_new_cb(SSL_CTX *ctx,
+                             int (__cdecl *cb) (struct ssl_st *ssl, SSL_SESSION *sess))
 {
     ctx->new_session_cb = cb;
 }
 
-int (*SSL_CTX_sess_get_new_cb(SSL_CTX *ctx)) (SSL *ssl, SSL_SESSION *sess) {
+int (__cdecl *SSL_CTX_sess_get_new_cb(SSL_CTX *ctx)) (SSL *ssl, SSL_SESSION *sess) {
     return ctx->new_session_cb;
 }
 
-void SSL_CTX_sess_set_remove_cb(SSL_CTX *ctx,
-                                void (*cb) (SSL_CTX *ctx, SSL_SESSION *sess))
+void __cdecl SSL_CTX_sess_set_remove_cb(SSL_CTX *ctx,
+                                void (__cdecl *cb) (SSL_CTX *ctx, SSL_SESSION *sess))
 {
     ctx->remove_session_cb = cb;
 }
 
-void (*SSL_CTX_sess_get_remove_cb(SSL_CTX *ctx)) (SSL_CTX *ctx,
+void (__cdecl *SSL_CTX_sess_get_remove_cb(SSL_CTX *ctx)) (SSL_CTX *ctx,
                                                   SSL_SESSION *sess) {
     return ctx->remove_session_cb;
 }
 
-void SSL_CTX_sess_set_get_cb(SSL_CTX *ctx,
-                             SSL_SESSION *(*cb) (struct ssl_st *ssl,
+void __cdecl SSL_CTX_sess_set_get_cb(SSL_CTX *ctx,
+                             SSL_SESSION *(__cdecl *cb) (struct ssl_st *ssl,
                                                  const unsigned char *data,
                                                  int len, int *copy))
 {
     ctx->get_session_cb = cb;
 }
 
-SSL_SESSION *(*SSL_CTX_sess_get_get_cb(SSL_CTX *ctx)) (SSL *ssl,
+SSL_SESSION *(__cdecl *SSL_CTX_sess_get_get_cb(SSL_CTX *ctx)) (SSL *ssl,
                                                        const unsigned char
                                                        *data, int len,
                                                        int *copy) {
     return ctx->get_session_cb;
 }
 
-void SSL_CTX_set_info_callback(SSL_CTX *ctx,
-                               void (*cb) (const SSL *ssl, int type, int val))
+void __cdecl SSL_CTX_set_info_callback(SSL_CTX *ctx,
+                               void (__cdecl *cb) (const SSL *ssl, int type, int val))
 {
     ctx->info_callback = cb;
 }
 
-void (*SSL_CTX_get_info_callback(SSL_CTX *ctx)) (const SSL *ssl, int type,
+void (__cdecl *SSL_CTX_get_info_callback(SSL_CTX *ctx)) (const SSL *ssl, int type,
                                                  int val) {
     return ctx->info_callback;
 }
 
-void SSL_CTX_set_client_cert_cb(SSL_CTX *ctx,
-                                int (*cb) (SSL *ssl, X509 **x509,
+void __cdecl SSL_CTX_set_client_cert_cb(SSL_CTX *ctx,
+                                int (__cdecl *cb) (SSL *ssl, X509 **x509,
                                            EVP_PKEY **pkey))
 {
     ctx->client_cert_cb = cb;
 }
 
-int (*SSL_CTX_get_client_cert_cb(SSL_CTX *ctx)) (SSL *ssl, X509 **x509,
+int (__cdecl *SSL_CTX_get_client_cert_cb(SSL_CTX *ctx)) (SSL *ssl, X509 **x509,
                                                  EVP_PKEY **pkey) {
     return ctx->client_cert_cb;
 }
 
 #ifndef OPENSSL_NO_ENGINE
-int SSL_CTX_set_client_cert_engine(SSL_CTX *ctx, ENGINE *e)
+int __cdecl SSL_CTX_set_client_cert_engine(SSL_CTX *ctx, ENGINE *e)
 {
     if (!ENGINE_init(e)) {
         SSLerr(SSL_F_SSL_CTX_SET_CLIENT_CERT_ENGINE, ERR_R_ENGINE_LIB);
@@ -1220,23 +1220,23 @@ int SSL_CTX_set_client_cert_engine(SSL_CTX *ctx, ENGINE *e)
 }
 #endif
 
-void SSL_CTX_set_cookie_generate_cb(SSL_CTX *ctx,
-                                    int (*cb) (SSL *ssl,
+void __cdecl SSL_CTX_set_cookie_generate_cb(SSL_CTX *ctx,
+                                    int (__cdecl *cb) (SSL *ssl,
                                                unsigned char *cookie,
                                                unsigned int *cookie_len))
 {
     ctx->app_gen_cookie_cb = cb;
 }
 
-void SSL_CTX_set_cookie_verify_cb(SSL_CTX *ctx,
-                                  int (*cb) (SSL *ssl,
+void __cdecl SSL_CTX_set_cookie_verify_cb(SSL_CTX *ctx,
+                                  int (__cdecl *cb) (SSL *ssl,
                                              const unsigned char *cookie,
                                              unsigned int cookie_len))
 {
     ctx->app_verify_cookie_cb = cb;
 }
 
-int SSL_SESSION_set1_ticket_appdata(SSL_SESSION *ss, const void *data, size_t len)
+int __cdecl SSL_SESSION_set1_ticket_appdata(SSL_SESSION *ss, const void *data, size_t len)
 {
     OPENSSL_free(ss->ticket_appdata);
     ss->ticket_appdata_len = 0;
@@ -1252,25 +1252,25 @@ int SSL_SESSION_set1_ticket_appdata(SSL_SESSION *ss, const void *data, size_t le
     return 0;
 }
 
-int SSL_SESSION_get0_ticket_appdata(SSL_SESSION *ss, void **data, size_t *len)
+int __cdecl SSL_SESSION_get0_ticket_appdata(SSL_SESSION *ss, void **data, size_t *len)
 {
     *data = ss->ticket_appdata;
     *len = ss->ticket_appdata_len;
     return 1;
 }
 
-void SSL_CTX_set_stateless_cookie_generate_cb(
+void __cdecl SSL_CTX_set_stateless_cookie_generate_cb(
     SSL_CTX *ctx,
-    int (*cb) (SSL *ssl,
+    int (__cdecl *cb) (SSL *ssl,
                unsigned char *cookie,
                size_t *cookie_len))
 {
     ctx->gen_stateless_cookie_cb = cb;
 }
 
-void SSL_CTX_set_stateless_cookie_verify_cb(
+void __cdecl SSL_CTX_set_stateless_cookie_verify_cb(
     SSL_CTX *ctx,
-    int (*cb) (SSL *ssl,
+    int (__cdecl *cb) (SSL *ssl,
                const unsigned char *cookie,
                size_t cookie_len))
 {
diff --git a/ssl/ssl_stat.c b/ssl/ssl_stat.c
index 179513b1a3..f9497c9be3 100644
--- a/ssl/ssl_stat.c
+++ b/ssl/ssl_stat.c
@@ -11,7 +11,7 @@
 #include <stdio.h>
 #include "ssl_locl.h"
 
-const char *SSL_state_string_long(const SSL *s)
+const char * __cdecl SSL_state_string_long(const SSL *s)
 {
     if (ossl_statem_in_error(s))
         return "error";
@@ -118,7 +118,7 @@ const char *SSL_state_string_long(const SSL *s)
     }
 }
 
-const char *SSL_state_string(const SSL *s)
+const char * __cdecl SSL_state_string(const SSL *s)
 {
     if (ossl_statem_in_error(s))
         return "SSLERR";
@@ -225,7 +225,7 @@ const char *SSL_state_string(const SSL *s)
     }
 }
 
-const char *SSL_alert_type_string_long(int value)
+const char * __cdecl SSL_alert_type_string_long(int value)
 {
     switch (value >> 8) {
     case SSL3_AL_WARNING:
@@ -237,7 +237,7 @@ const char *SSL_alert_type_string_long(int value)
     }
 }
 
-const char *SSL_alert_type_string(int value)
+const char * __cdecl SSL_alert_type_string(int value)
 {
     switch (value >> 8) {
     case SSL3_AL_WARNING:
@@ -249,7 +249,7 @@ const char *SSL_alert_type_string(int value)
     }
 }
 
-const char *SSL_alert_desc_string(int value)
+const char * __cdecl SSL_alert_desc_string(int value)
 {
     switch (value & 0xff) {
     case SSL3_AD_CLOSE_NOTIFY:
@@ -317,7 +317,7 @@ const char *SSL_alert_desc_string(int value)
     }
 }
 
-const char *SSL_alert_desc_string_long(int value)
+const char * __cdecl SSL_alert_desc_string_long(int value)
 {
     switch (value & 0xff) {
     case SSL3_AD_CLOSE_NOTIFY:
diff --git a/ssl/ssl_txt.c b/ssl/ssl_txt.c
index cf6e4c3c05..67aa122382 100644
--- a/ssl/ssl_txt.c
+++ b/ssl/ssl_txt.c
@@ -13,7 +13,7 @@
 #include "ssl_locl.h"
 
 #ifndef OPENSSL_NO_STDIO
-int SSL_SESSION_print_fp(FILE *fp, const SSL_SESSION *x)
+int __cdecl SSL_SESSION_print_fp(FILE *fp, const SSL_SESSION *x)
 {
     BIO *b;
     int ret;
@@ -29,7 +29,7 @@ int SSL_SESSION_print_fp(FILE *fp, const SSL_SESSION *x)
 }
 #endif
 
-int SSL_SESSION_print(BIO *bp, const SSL_SESSION *x)
+int __cdecl SSL_SESSION_print(BIO *bp, const SSL_SESSION *x)
 {
     size_t i;
     const char *s;
@@ -165,7 +165,7 @@ int SSL_SESSION_print(BIO *bp, const SSL_SESSION *x)
  * print session id and master key in NSS keylog format (RSA
  * Session-ID:<session id> Master-Key:<master key>)
  */
-int SSL_SESSION_print_keylog(BIO *bp, const SSL_SESSION *x)
+int __cdecl SSL_SESSION_print_keylog(BIO *bp, const SSL_SESSION *x)
 {
     size_t i;
 
diff --git a/ssl/ssl_utst.c b/ssl/ssl_utst.c
index cea1bc2707..1313b49290 100644
--- a/ssl/ssl_utst.c
+++ b/ssl/ssl_utst.c
@@ -16,7 +16,7 @@ static const struct openssl_ssl_test_functions ssl_test_functions = {
     ssl3_setup_buffers,
 };
 
-const struct openssl_ssl_test_functions *SSL_test_functions(void)
+const struct openssl_ssl_test_functions * __cdecl SSL_test_functions(void)
 {
     return &ssl_test_functions;
 }
diff --git a/ssl/statem/extensions_cust.c b/ssl/statem/extensions_cust.c
index a4cdc81d68..440134da20 100644
--- a/ssl/statem/extensions_cust.c
+++ b/ssl/statem/extensions_cust.c
@@ -28,7 +28,7 @@ typedef struct {
 /*
  * Provide thin wrapper callbacks which convert new style arguments to old style
  */
-static int custom_ext_add_old_cb_wrap(SSL *s, unsigned int ext_type,
+static int __cdecl custom_ext_add_old_cb_wrap(SSL *s, unsigned int ext_type,
                                       unsigned int context,
                                       const unsigned char **out,
                                       size_t *outlen, X509 *x, size_t chainidx,
@@ -43,7 +43,7 @@ static int custom_ext_add_old_cb_wrap(SSL *s, unsigned int ext_type,
                                add_cb_wrap->add_arg);
 }
 
-static void custom_ext_free_old_cb_wrap(SSL *s, unsigned int ext_type,
+static void __cdecl custom_ext_free_old_cb_wrap(SSL *s, unsigned int ext_type,
                                         unsigned int context,
                                         const unsigned char *out, void *add_arg)
 {
@@ -55,7 +55,7 @@ static void custom_ext_free_old_cb_wrap(SSL *s, unsigned int ext_type,
     add_cb_wrap->free_cb(s, ext_type, out, add_cb_wrap->add_arg);
 }
 
-static int custom_ext_parse_old_cb_wrap(SSL *s, unsigned int ext_type,
+static int __cdecl custom_ext_parse_old_cb_wrap(SSL *s, unsigned int ext_type,
                                         unsigned int context,
                                         const unsigned char *in,
                                         size_t inlen, X509 *x, size_t chainidx,
@@ -78,7 +78,7 @@ static int custom_ext_parse_old_cb_wrap(SSL *s, unsigned int ext_type,
  * are trying to find a method relevant to the server, ENDPOINT_CLIENT for the
  * client, or ENDPOINT_BOTH for either
  */
-custom_ext_method *custom_ext_find(const custom_ext_methods *exts,
+custom_ext_method * __cdecl custom_ext_find(const custom_ext_methods *exts,
                                    ENDPOINT role, unsigned int ext_type,
                                    size_t *idx)
 {
@@ -100,7 +100,7 @@ custom_ext_method *custom_ext_find(const custom_ext_methods *exts,
 /*
  * Initialise custom extensions flags to indicate neither sent nor received.
  */
-void custom_ext_init(custom_ext_methods *exts)
+void __cdecl custom_ext_init(custom_ext_methods *exts)
 {
     size_t i;
     custom_ext_method *meth = exts->meths;
@@ -110,7 +110,7 @@ void custom_ext_init(custom_ext_methods *exts)
 }
 
 /* Pass received custom extension data to the application for parsing. */
-int custom_ext_parse(SSL *s, unsigned int context, unsigned int ext_type,
+int __cdecl custom_ext_parse(SSL *s, unsigned int context, unsigned int ext_type,
                      const unsigned char *ext_data, size_t ext_size, X509 *x,
                      size_t chainidx)
 {
@@ -170,7 +170,7 @@ int custom_ext_parse(SSL *s, unsigned int context, unsigned int ext_type,
  * Request custom extension data from the application and add to the return
  * buffer.
  */
-int custom_ext_add(SSL *s, int context, WPACKET *pkt, X509 *x, size_t chainidx,
+int __cdecl custom_ext_add(SSL *s, int context, WPACKET *pkt, X509 *x, size_t chainidx,
                    int maxversion)
 {
     custom_ext_methods *exts = &s->cert->custext;
@@ -247,7 +247,7 @@ int custom_ext_add(SSL *s, int context, WPACKET *pkt, X509 *x, size_t chainidx,
 }
 
 /* Copy the flags from src to dst for any extensions that exist in both */
-int custom_exts_copy_flags(custom_ext_methods *dst,
+int __cdecl custom_exts_copy_flags(custom_ext_methods *dst,
                            const custom_ext_methods *src)
 {
     size_t i;
@@ -267,7 +267,7 @@ int custom_exts_copy_flags(custom_ext_methods *dst,
 }
 
 /* Copy table of custom extensions */
-int custom_exts_copy(custom_ext_methods *dst, const custom_ext_methods *src)
+int __cdecl custom_exts_copy(custom_ext_methods *dst, const custom_ext_methods *src)
 {
     size_t i;
     int err = 0;
@@ -316,7 +316,7 @@ int custom_exts_copy(custom_ext_methods *dst, const custom_ext_methods *src)
     return 1;
 }
 
-void custom_exts_free(custom_ext_methods *exts)
+void __cdecl custom_exts_free(custom_ext_methods *exts)
 {
     size_t i;
     custom_ext_method *meth;
@@ -333,13 +333,13 @@ void custom_exts_free(custom_ext_methods *exts)
 }
 
 /* Return true if a client custom extension exists, false otherwise */
-int SSL_CTX_has_client_custom_ext(const SSL_CTX *ctx, unsigned int ext_type)
+int __cdecl SSL_CTX_has_client_custom_ext(const SSL_CTX *ctx, unsigned int ext_type)
 {
     return custom_ext_find(&ctx->cert->custext, ENDPOINT_CLIENT, ext_type,
                            NULL) != NULL;
 }
 
-static int add_custom_ext_intern(SSL_CTX *ctx, ENDPOINT role,
+static int __cdecl add_custom_ext_intern(SSL_CTX *ctx, ENDPOINT role,
                                  unsigned int ext_type,
                                  unsigned int context,
                                  SSL_custom_ext_add_cb_ex add_cb,
@@ -404,7 +404,7 @@ static int add_custom_ext_intern(SSL_CTX *ctx, ENDPOINT role,
     return 1;
 }
 
-static int add_old_custom_ext(SSL_CTX *ctx, ENDPOINT role,
+static int __cdecl add_old_custom_ext(SSL_CTX *ctx, ENDPOINT role,
                               unsigned int ext_type,
                               unsigned int context,
                               custom_ext_add_cb add_cb,
@@ -447,7 +447,7 @@ static int add_old_custom_ext(SSL_CTX *ctx, ENDPOINT role,
 }
 
 /* Application level functions to add the old custom extension callbacks */
-int SSL_CTX_add_client_custom_ext(SSL_CTX *ctx, unsigned int ext_type,
+int __cdecl SSL_CTX_add_client_custom_ext(SSL_CTX *ctx, unsigned int ext_type,
                                   custom_ext_add_cb add_cb,
                                   custom_ext_free_cb free_cb,
                                   void *add_arg,
@@ -461,7 +461,7 @@ int SSL_CTX_add_client_custom_ext(SSL_CTX *ctx, unsigned int ext_type,
                               add_cb, free_cb, add_arg, parse_cb, parse_arg);
 }
 
-int SSL_CTX_add_server_custom_ext(SSL_CTX *ctx, unsigned int ext_type,
+int __cdecl SSL_CTX_add_server_custom_ext(SSL_CTX *ctx, unsigned int ext_type,
                                   custom_ext_add_cb add_cb,
                                   custom_ext_free_cb free_cb,
                                   void *add_arg,
@@ -475,7 +475,7 @@ int SSL_CTX_add_server_custom_ext(SSL_CTX *ctx, unsigned int ext_type,
                               add_cb, free_cb, add_arg, parse_cb, parse_arg);
 }
 
-int SSL_CTX_add_custom_ext(SSL_CTX *ctx, unsigned int ext_type,
+int __cdecl SSL_CTX_add_custom_ext(SSL_CTX *ctx, unsigned int ext_type,
                            unsigned int context,
                            SSL_custom_ext_add_cb_ex add_cb,
                            SSL_custom_ext_free_cb_ex free_cb,
@@ -486,7 +486,7 @@ int SSL_CTX_add_custom_ext(SSL_CTX *ctx, unsigned int ext_type,
                                  free_cb, add_arg, parse_cb, parse_arg);
 }
 
-int SSL_extension_supported(unsigned int ext_type)
+int __cdecl SSL_extension_supported(unsigned int ext_type)
 {
     switch (ext_type) {
         /* Internally supported extensions. */
diff --git a/ssl/statem/statem.c b/ssl/statem/statem.c
index e3c5ec0038..d3ae4397dc 100644
--- a/ssl/statem/statem.c
+++ b/ssl/statem/statem.c
@@ -63,22 +63,22 @@ static SUB_STATE_RETURN read_state_machine(SSL *s);
 static void init_write_state_machine(SSL *s);
 static SUB_STATE_RETURN write_state_machine(SSL *s);
 
-OSSL_HANDSHAKE_STATE SSL_get_state(const SSL *ssl)
+OSSL_HANDSHAKE_STATE __cdecl SSL_get_state(const SSL *ssl)
 {
     return ssl->statem.hand_state;
 }
 
-int SSL_in_init(const SSL *s)
+int __cdecl SSL_in_init(const SSL *s)
 {
     return s->statem.in_init;
 }
 
-int SSL_is_init_finished(const SSL *s)
+int __cdecl SSL_is_init_finished(const SSL *s)
 {
     return !(s->statem.in_init) && (s->statem.hand_state == TLS_ST_OK);
 }
 
-int SSL_in_before(const SSL *s)
+int __cdecl SSL_in_before(const SSL *s)
 {
     /*
      * Historically being "in before" meant before anything had happened. In the
@@ -245,17 +245,17 @@ void ossl_statem_set_hello_verify_done(SSL *s)
     s->statem.hand_state = TLS_ST_SR_CLNT_HELLO;
 }
 
-int ossl_statem_connect(SSL *s)
+int __cdecl ossl_statem_connect(SSL *s)
 {
     return state_machine(s, 0);
 }
 
-int ossl_statem_accept(SSL *s)
+int __cdecl ossl_statem_accept(SSL *s)
 {
     return state_machine(s, 1);
 }
 
-typedef void (*info_cb) (const SSL *, int, int);
+typedef void (__cdecl *info_cb) (const SSL *, int, int);
 
 static info_cb get_callback(SSL *s)
 {
@@ -298,7 +298,7 @@ static info_cb get_callback(SSL *s)
 static int state_machine(SSL *s, int server)
 {
     BUF_MEM *buf = NULL;
-    void (*cb) (const SSL *ssl, int type, int val) = NULL;
+    void (__cdecl *cb) (const SSL *ssl, int type, int val) = NULL;
     OSSL_STATEM *st = &s->statem;
     int ret = -1;
     int ssret;
@@ -545,7 +545,7 @@ static SUB_STATE_RETURN read_state_machine(SSL *s)
     MSG_PROCESS_RETURN(*process_message) (SSL *s, PACKET *pkt);
     WORK_STATE(*post_process_message) (SSL *s, WORK_STATE wst);
     size_t (*max_message_size) (SSL *s);
-    void (*cb) (const SSL *ssl, int type, int val) = NULL;
+    void (__cdecl *cb) (const SSL *ssl, int type, int val) = NULL;
 
     cb = get_callback(s);
 
@@ -761,7 +761,7 @@ static SUB_STATE_RETURN write_state_machine(SSL *s)
     int (*get_construct_message_f) (SSL *s, WPACKET *pkt,
                                     int (**confunc) (SSL *s, WPACKET *pkt),
                                     int *mt);
-    void (*cb) (const SSL *ssl, int type, int val) = NULL;
+    void (__cdecl *cb) (const SSL *ssl, int type, int val) = NULL;
     int (*confunc) (SSL *s, WPACKET *pkt);
     int mt;
     WPACKET pkt;
diff --git a/ssl/statem/statem.h b/ssl/statem/statem.h
index 144d930fc7..35bfa6f2d4 100644
--- a/ssl/statem/statem.h
+++ b/ssl/statem/statem.h
@@ -128,8 +128,8 @@ typedef struct ossl_statem_st OSSL_STATEM;
  *                                                                           *
  *****************************************************************************/
 
-__owur int ossl_statem_accept(SSL *s);
-__owur int ossl_statem_connect(SSL *s);
+__owur int __cdecl ossl_statem_accept(SSL *s);
+__owur int __cdecl ossl_statem_connect(SSL *s);
 void ossl_statem_clear(SSL *s);
 void ossl_statem_set_renegotiate(SSL *s);
 void ossl_statem_fatal(SSL *s, int al, int func, int reason, const char *file,
diff --git a/ssl/statem/statem_dtls.c b/ssl/statem/statem_dtls.c
index b016fa7cff..6329b42836 100644
--- a/ssl/statem/statem_dtls.c
+++ b/ssl/statem/statem_dtls.c
@@ -91,7 +91,7 @@ static hm_fragment *dtls1_hm_fragment_new(size_t frag_len, int reassembly)
     return frag;
 }
 
-void dtls1_hm_fragment_free(hm_fragment *frag)
+void __cdecl dtls1_hm_fragment_free(hm_fragment *frag)
 {
     if (!frag)
         return;
@@ -109,7 +109,7 @@ void dtls1_hm_fragment_free(hm_fragment *frag)
  * send s->init_buf in records of type 'type' (SSL3_RT_HANDSHAKE or
  * SSL3_RT_CHANGE_CIPHER_SPEC)
  */
-int dtls1_do_write(SSL *s, int type)
+int __cdecl dtls1_do_write(SSL *s, int type)
 {
     int ret;
     size_t written;
@@ -965,7 +965,7 @@ WORK_STATE dtls_wait_for_dry(SSL *s)
 }
 #endif
 
-int dtls1_read_failed(SSL *s, int code)
+int __cdecl dtls1_read_failed(SSL *s, int code)
 {
     if (code > 0) {
         SSLfatal(s, SSL_AD_INTERNAL_ERROR,
@@ -990,7 +990,7 @@ int dtls1_read_failed(SSL *s, int code)
     return dtls1_handle_timeout(s);
 }
 
-int dtls1_get_queue_priority(unsigned short seq, int is_ccs)
+int __cdecl dtls1_get_queue_priority(unsigned short seq, int is_ccs)
 {
     /*
      * The index of the retransmission queue actually is the message sequence
@@ -1005,7 +1005,7 @@ int dtls1_get_queue_priority(unsigned short seq, int is_ccs)
     return seq * 2 - is_ccs;
 }
 
-int dtls1_retransmit_buffered_messages(SSL *s)
+int __cdecl dtls1_retransmit_buffered_messages(SSL *s)
 {
     pqueue *sent = s->d1->sent_messages;
     piterator iter;
@@ -1027,7 +1027,7 @@ int dtls1_retransmit_buffered_messages(SSL *s)
     return 1;
 }
 
-int dtls1_buffer_message(SSL *s, int is_ccs)
+int __cdecl dtls1_buffer_message(SSL *s, int is_ccs)
 {
     pitem *item;
     hm_fragment *frag;
@@ -1094,7 +1094,7 @@ int dtls1_buffer_message(SSL *s, int is_ccs)
     return 1;
 }
 
-int dtls1_retransmit_message(SSL *s, unsigned short seq, int *found)
+int __cdecl dtls1_retransmit_message(SSL *s, unsigned short seq, int *found)
 {
     int ret;
     /* XDTLS: for now assuming that read/writes are blocking */
@@ -1168,7 +1168,7 @@ int dtls1_retransmit_message(SSL *s, unsigned short seq, int *found)
     return ret;
 }
 
-void dtls1_set_message_header(SSL *s,
+void __cdecl dtls1_set_message_header(SSL *s,
                               unsigned char mt, size_t len,
                               size_t frag_off, size_t frag_len)
 {
@@ -1219,7 +1219,7 @@ static unsigned char *dtls1_write_message_header(SSL *s, unsigned char *p)
     return p;
 }
 
-void dtls1_get_message_header(unsigned char *data, struct hm_header_st *msg_hdr)
+void __cdecl dtls1_get_message_header(unsigned char *data, struct hm_header_st *msg_hdr)
 {
     memset(msg_hdr, 0, sizeof(*msg_hdr));
     msg_hdr->type = *(data++);
@@ -1230,7 +1230,7 @@ void dtls1_get_message_header(unsigned char *data, struct hm_header_st *msg_hdr)
     n2l3(data, msg_hdr->frag_len);
 }
 
-int dtls1_set_handshake_header(SSL *s, WPACKET *pkt, int htype)
+int __cdecl dtls1_set_handshake_header(SSL *s, WPACKET *pkt, int htype)
 {
     unsigned char *header;
 
@@ -1254,7 +1254,7 @@ int dtls1_set_handshake_header(SSL *s, WPACKET *pkt, int htype)
     return 1;
 }
 
-int dtls1_close_construct_packet(SSL *s, WPACKET *pkt, int htype)
+int __cdecl dtls1_close_construct_packet(SSL *s, WPACKET *pkt, int htype)
 {
     size_t msglen;
 
diff --git a/ssl/statem/statem_lib.c b/ssl/statem/statem_lib.c
index 22e9f0490e..9b4cb7941f 100644
--- a/ssl/statem/statem_lib.c
+++ b/ssl/statem/statem_lib.c
@@ -38,7 +38,7 @@ const unsigned char hrrrandom[] = {
  * send s->init_buf in records of type 'type' (SSL3_RT_HANDSHAKE or
  * SSL3_RT_CHANGE_CIPHER_SPEC)
  */
-int ssl3_do_write(SSL *s, int type)
+int __cdecl ssl3_do_write(SSL *s, int type)
 {
     int ret;
     size_t written = 0;
@@ -72,7 +72,7 @@ int ssl3_do_write(SSL *s, int type)
     return 0;
 }
 
-int tls_close_construct_packet(SSL *s, WPACKET *pkt, int htype)
+int __cdecl tls_close_construct_packet(SSL *s, WPACKET *pkt, int htype)
 {
     size_t msglen;
 
@@ -86,7 +86,7 @@ int tls_close_construct_packet(SSL *s, WPACKET *pkt, int htype)
     return 1;
 }
 
-int tls_setup_handshake(SSL *s)
+int __cdecl tls_setup_handshake(SSL *s)
 {
     if (!ssl3_init_finished_mac(s)) {
         /* SSLfatal() already called */
@@ -1002,7 +1002,7 @@ static int ssl_add_cert_chain(SSL *s, WPACKET *pkt, CERT_PKEY *cpk)
     return 1;
 }
 
-unsigned long ssl3_output_cert_chain(SSL *s, WPACKET *pkt, CERT_PKEY *cpk)
+unsigned long __cdecl ssl3_output_cert_chain(SSL *s, WPACKET *pkt, CERT_PKEY *cpk)
 {
     if (!WPACKET_start_sub_packet_u24(pkt)) {
         SSLfatal(s, SSL_AD_INTERNAL_ERROR, SSL_F_SSL3_OUTPUT_CERT_CHAIN,
@@ -1029,7 +1029,7 @@ unsigned long ssl3_output_cert_chain(SSL *s, WPACKET *pkt, CERT_PKEY *cpk)
  */
 WORK_STATE tls_finish_handshake(SSL *s, WORK_STATE wst, int clearbufs, int stop)
 {
-    void (*cb) (const SSL *ssl, int type, int val) = NULL;
+    void (__cdecl *cb) (const SSL *ssl, int type, int val) = NULL;
     int cleanuphand = s->statem.cleanuphand;
 
     if (clearbufs) {
@@ -1370,7 +1370,7 @@ static const X509ERR2ALERT x509table[] = {
     {X509_V_OK, SSL_AD_CERTIFICATE_UNKNOWN}
 };
 
-int ssl_x509err2alert(int x509err)
+int __cdecl ssl_x509err2alert(int x509err)
 {
     const X509ERR2ALERT *tp;
 
@@ -1380,7 +1380,7 @@ int ssl_x509err2alert(int x509err)
     return tp->alert;
 }
 
-int ssl_allow_compression(SSL *s)
+int __cdecl ssl_allow_compression(SSL *s)
 {
     if (s->options & SSL_OP_NO_COMPRESSION)
         return 0;
@@ -1400,8 +1400,8 @@ static int version_cmp(const SSL *s, int a, int b)
 
 typedef struct {
     int version;
-    const SSL_METHOD *(*cmeth) (void);
-    const SSL_METHOD *(*smeth) (void);
+    const SSL_METHOD *(__cdecl *cmeth) (void);
+    const SSL_METHOD *(__cdecl *smeth) (void);
 } version_info;
 
 #if TLS_MAX_VERSION != TLS1_3_VERSION
@@ -1553,7 +1553,7 @@ static int is_tls13_capable(const SSL *s)
  *
  * Returns 1 when supported, otherwise 0
  */
-int ssl_version_supported(const SSL *s, int version, const SSL_METHOD **meth)
+int __cdecl ssl_version_supported(const SSL *s, int version, const SSL_METHOD **meth)
 {
     const version_info *vent;
     const version_info *table;
@@ -1596,7 +1596,7 @@ int ssl_version_supported(const SSL *s, int version, const SSL_METHOD **meth)
  *
  * Returns 1 when using the highest enabled version, 0 otherwise.
  */
-int ssl_check_version_downgrade(SSL *s)
+int __cdecl ssl_check_version_downgrade(SSL *s)
 {
     const version_info *vent;
     const version_info *table;
@@ -1641,7 +1641,7 @@ int ssl_check_version_downgrade(SSL *s)
  *
  * Returns 1 on success, 0 on failure.
  */
-int ssl_set_version_bound(int method_version, int version, int *bound)
+int __cdecl ssl_set_version_bound(int method_version, int version, int *bound)
 {
     if (version == 0) {
         *bound = version;
@@ -1716,7 +1716,7 @@ static void check_for_downgrade(SSL *s, int vers, DOWNGRADE *dgrd)
  *
  * Returns 0 on success or an SSL error reason number on failure.
  */
-int ssl_choose_server_version(SSL *s, CLIENTHELLO_MSG *hello, DOWNGRADE *dgrd)
+int __cdecl ssl_choose_server_version(SSL *s, CLIENTHELLO_MSG *hello, DOWNGRADE *dgrd)
 {
     /*-
      * With version-flexible methods we have an initial state with:
@@ -1864,7 +1864,7 @@ int ssl_choose_server_version(SSL *s, CLIENTHELLO_MSG *hello, DOWNGRADE *dgrd)
  *
  * Returns 1 on success or 0 on error.
  */
-int ssl_choose_client_version(SSL *s, int version, RAW_EXTENSION *extensions)
+int __cdecl ssl_choose_client_version(SSL *s, int version, RAW_EXTENSION *extensions)
 {
     const version_info *vent;
     const version_info *table;
@@ -2002,7 +2002,7 @@ int ssl_choose_client_version(SSL *s, int version, RAW_EXTENSION *extensions)
  * Returns 0 on success or an SSL error reason number on failure.  On failure
  * min_version and max_version will also be set to 0.
  */
-int ssl_get_min_max_version(const SSL *s, int *min_version, int *max_version,
+int __cdecl ssl_get_min_max_version(const SSL *s, int *min_version, int *max_version,
                             int *real_max)
 {
     int version, tmp_real_max;
@@ -2109,7 +2109,7 @@ int ssl_get_min_max_version(const SSL *s, int *min_version, int *max_version,
  *
  * Returns 0 on success or an SSL error reason number on failure.
  */
-int ssl_set_client_hello_version(SSL *s)
+int __cdecl ssl_set_client_hello_version(SSL *s)
 {
     int ver_min, ver_max, ret;
 
@@ -2218,7 +2218,7 @@ int create_synthetic_message_hash(SSL *s, const unsigned char *hashval,
     return 1;
 }
 
-static int ca_dn_cmp(const X509_NAME *const *a, const X509_NAME *const *b)
+static int __cdecl ca_dn_cmp(const X509_NAME *const *a, const X509_NAME *const *b)
 {
     return X509_NAME_cmp(*a, *b);
 }
diff --git a/ssl/statem/statem_srvr.c b/ssl/statem/statem_srvr.c
index 8cf9c40d15..4cfa674f27 100644
--- a/ssl/statem/statem_srvr.c
+++ b/ssl/statem/statem_srvr.c
@@ -348,7 +348,7 @@ static int send_server_key_exchange(SSL *s)
  *   1: Yes
  *   0: No
  */
-int send_certificate_request(SSL *s)
+int __cdecl send_certificate_request(SSL *s)
 {
     if (
            /* don't request cert unless asked for it: */
@@ -1257,7 +1257,7 @@ static int ssl_check_srp_ext_ClientHello(SSL *s)
 }
 #endif
 
-int dtls_raw_hello_verify_request(WPACKET *pkt, unsigned char *cookie,
+int __cdecl dtls_raw_hello_verify_request(WPACKET *pkt, unsigned char *cookie,
                                   size_t cookie_len)
 {
     /* Always use DTLS 1.0 version: see RFC 6347 */
diff --git a/ssl/t1_enc.c b/ssl/t1_enc.c
index 57fb17a660..ae29b304fb 100644
--- a/ssl/t1_enc.c
+++ b/ssl/t1_enc.c
@@ -78,7 +78,7 @@ static int tls1_generate_key_block(SSL *s, unsigned char *km, size_t num)
     return ret;
 }
 
-int tls1_change_cipher_state(SSL *s, int which)
+int __cdecl tls1_change_cipher_state(SSL *s, int which)
 {
     unsigned char *p, *mac_secret;
     unsigned char *ms, *key, *iv;
@@ -335,7 +335,7 @@ int tls1_change_cipher_state(SSL *s, int which)
     return 0;
 }
 
-int tls1_setup_key_block(SSL *s)
+int __cdecl tls1_setup_key_block(SSL *s)
 {
     unsigned char *p;
     const EVP_CIPHER *c;
@@ -433,7 +433,7 @@ int tls1_setup_key_block(SSL *s)
     return ret;
 }
 
-size_t tls1_final_finish_mac(SSL *s, const char *str, size_t slen,
+size_t __cdecl tls1_final_finish_mac(SSL *s, const char *str, size_t slen,
                              unsigned char *out)
 {
     size_t hashlen;
@@ -459,7 +459,7 @@ size_t tls1_final_finish_mac(SSL *s, const char *str, size_t slen,
     return TLS1_FINISH_MAC_LENGTH;
 }
 
-int tls1_generate_master_secret(SSL *s, unsigned char *out, unsigned char *p,
+int __cdecl tls1_generate_master_secret(SSL *s, unsigned char *out, unsigned char *p,
                                 size_t len, size_t *secret_size)
 {
     if (s->session->flags & SSL_SESS_FLAG_EXTMS) {
@@ -520,7 +520,7 @@ int tls1_generate_master_secret(SSL *s, unsigned char *out, unsigned char *p,
     return 1;
 }
 
-int tls1_export_keying_material(SSL *s, unsigned char *out, size_t olen,
+int __cdecl tls1_export_keying_material(SSL *s, unsigned char *out, size_t olen,
                                 const char *label, size_t llen,
                                 const unsigned char *context,
                                 size_t contextlen, int use_context)
@@ -603,7 +603,7 @@ int tls1_export_keying_material(SSL *s, unsigned char *out, size_t olen,
     return rv;
 }
 
-int tls1_alert_code(int code)
+int __cdecl tls1_alert_code(int code)
 {
     switch (code) {
     case SSL_AD_CLOSE_NOTIFY:
diff --git a/ssl/t1_lib.c b/ssl/t1_lib.c
index b482019c4c..8c33bce9c9 100644
--- a/ssl/t1_lib.c
+++ b/ssl/t1_lib.c
@@ -92,7 +92,7 @@ SSL3_ENC_METHOD const TLSv1_3_enc_data = {
     ssl3_handshake_write
 };
 
-long tls1_default_timeout(void)
+long __cdecl tls1_default_timeout(void)
 {
     /*
      * 2 hours, the 24 hours mentioned in the TLSv1 spec is way too long for
@@ -101,7 +101,7 @@ long tls1_default_timeout(void)
     return (60 * 60 * 2);
 }
 
-int tls1_new(SSL *s)
+int __cdecl tls1_new(SSL *s)
 {
     if (!ssl3_new(s))
         return 0;
@@ -111,13 +111,13 @@ int tls1_new(SSL *s)
     return 1;
 }
 
-void tls1_free(SSL *s)
+void __cdecl tls1_free(SSL *s)
 {
     OPENSSL_free(s->ext.session_ticket);
     ssl3_free(s);
 }
 
-int tls1_clear(SSL *s)
+int __cdecl tls1_clear(SSL *s)
 {
     if (!ssl3_clear(s))
         return 0;
@@ -190,7 +190,7 @@ static const uint16_t suiteb_curves[] = {
     TLSEXT_curve_P_384
 };
 
-const TLS_GROUP_INFO *tls1_group_id_lookup(uint16_t group_id)
+const TLS_GROUP_INFO * __cdecl tls1_group_id_lookup(uint16_t group_id)
 {
     /* ECC curves from RFC 4492 and RFC 7027 */
     if (group_id < 1 || group_id > OSSL_NELEM(nid_list))
@@ -212,7 +212,7 @@ static uint16_t tls1_nid2group_id(int nid)
  * Set *pgroups to the supported groups list and *pgroupslen to
  * the number of groups supported.
  */
-void tls1_get_supported_groups(SSL *s, const uint16_t **pgroups,
+void __cdecl tls1_get_supported_groups(SSL *s, const uint16_t **pgroups,
                                size_t *pgroupslen)
 {
 
@@ -246,7 +246,7 @@ void tls1_get_supported_groups(SSL *s, const uint16_t **pgroups,
 }
 
 /* See if curve is allowed by security callback */
-int tls_curve_allowed(SSL *s, uint16_t curve, int op)
+int __cdecl tls_curve_allowed(SSL *s, uint16_t curve, int op)
 {
     const TLS_GROUP_INFO *cinfo = tls1_group_id_lookup(curve);
     unsigned char ctmp[2];
@@ -279,7 +279,7 @@ static int tls1_in_list(uint16_t id, const uint16_t *list, size_t listlen)
  * For nmatch == -2, return the id of the group to use for
  * a tmp key, or 0 if there is no match.
  */
-uint16_t tls1_shared_group(SSL *s, int nmatch)
+uint16_t __cdecl tls1_shared_group(SSL *s, int nmatch)
 {
     const uint16_t *pref, *supp;
     size_t num_pref, num_supp, i;
@@ -334,7 +334,7 @@ uint16_t tls1_shared_group(SSL *s, int nmatch)
     return 0;
 }
 
-int tls1_set_groups(uint16_t **pext, size_t *pextlen,
+int __cdecl tls1_set_groups(uint16_t **pext, size_t *pextlen,
                     int *groups, size_t ngroups)
 {
     uint16_t *glist;
@@ -408,7 +408,7 @@ static int nid_cb(const char *elem, int len, void *arg)
 }
 
 /* Set groups based on a colon separate list */
-int tls1_set_groups_list(uint16_t **pext, size_t *pextlen, const char *str)
+int __cdecl tls1_set_groups_list(uint16_t **pext, size_t *pextlen, const char *str)
 {
     nid_cb_st ncb;
     ncb.nidcnt = 0;
@@ -478,7 +478,7 @@ static int tls1_check_pkey_comp(SSL *s, EVP_PKEY *pkey)
 }
 
 /* Check a group id matches preferences */
-int tls1_check_group_id(SSL *s, uint16_t group_id, int check_own_groups)
+int __cdecl tls1_check_group_id(SSL *s, uint16_t group_id, int check_own_groups)
     {
     const uint16_t *groups;
     size_t groups_len;
@@ -530,7 +530,7 @@ int tls1_check_group_id(SSL *s, uint16_t group_id, int check_own_groups)
     return tls1_in_list(group_id, groups, groups_len);
 }
 
-void tls1_get_formatlist(SSL *s, const unsigned char **pformats,
+void __cdecl tls1_get_formatlist(SSL *s, const unsigned char **pformats,
                          size_t *num_formats)
 {
     /*
@@ -607,7 +607,7 @@ static int tls1_check_cert_param(SSL *s, X509 *x, int check_ee_md)
  *
  * Returns 0 when the cipher can't be used or 1 when it can.
  */
-int tls1_check_ec_tmp_key(SSL *s, unsigned long cid)
+int __cdecl tls1_check_ec_tmp_key(SSL *s, unsigned long cid)
 {
     /* If not Suite B just need a shared group */
     if (!tls1_suiteb(s))
@@ -809,7 +809,7 @@ static const SIGALG_LOOKUP *tls1_lookup_sigalg(uint16_t sigalg)
     return NULL;
 }
 /* Lookup hash: return 0 if invalid or not enabled */
-int tls1_lookup_md(const SIGALG_LOOKUP *lu, const EVP_MD **pmd)
+int __cdecl tls1_lookup_md(const SIGALG_LOOKUP *lu, const EVP_MD **pmd)
 {
     const EVP_MD *md;
     if (lu == NULL)
@@ -898,7 +898,7 @@ static const SIGALG_LOOKUP *tls1_get_legacy_sigalg(const SSL *s, int idx)
     return &legacy_rsa_sigalg;
 }
 /* Set peer sigalg based key type */
-int tls1_set_peer_legacy_sigalg(SSL *s, const EVP_PKEY *pkey)
+int __cdecl tls1_set_peer_legacy_sigalg(SSL *s, const EVP_PKEY *pkey)
 {
     size_t idx;
     const SIGALG_LOOKUP *lu;
@@ -912,7 +912,7 @@ int tls1_set_peer_legacy_sigalg(SSL *s, const EVP_PKEY *pkey)
     return 1;
 }
 
-size_t tls12_get_psigalgs(SSL *s, int sent, const uint16_t **psigs)
+size_t __cdecl tls12_get_psigalgs(SSL *s, int sent, const uint16_t **psigs)
 {
     /*
      * If Suite B mode use Suite B sigalgs only, ignore any other
@@ -955,7 +955,7 @@ size_t tls12_get_psigalgs(SSL *s, int sent, const uint16_t **psigs)
  * Called by servers only. Checks that we have a sig alg that supports the
  * specified EC curve.
  */
-int tls_check_sigalg_curve(const SSL *s, int curve)
+int __cdecl tls_check_sigalg_curve(const SSL *s, int curve)
 {
    const uint16_t *sigs;
    size_t siglen, i;
@@ -988,7 +988,7 @@ int tls_check_sigalg_curve(const SSL *s, int curve)
  * algorithms and if so set relevant digest and signature scheme in
  * s.
  */
-int tls12_check_peer_sigalg(SSL *s, uint16_t sig, EVP_PKEY *pkey)
+int __cdecl tls12_check_peer_sigalg(SSL *s, uint16_t sig, EVP_PKEY *pkey)
 {
     const uint16_t *sent_sigs;
     const EVP_MD *md = NULL;
@@ -1117,7 +1117,7 @@ int tls12_check_peer_sigalg(SSL *s, uint16_t sig, EVP_PKEY *pkey)
     return 1;
 }
 
-int SSL_get_peer_signature_type_nid(const SSL *s, int *pnid)
+int __cdecl SSL_get_peer_signature_type_nid(const SSL *s, int *pnid)
 {
     if (s->s3->tmp.peer_sigalg == NULL)
         return 0;
@@ -1125,7 +1125,7 @@ int SSL_get_peer_signature_type_nid(const SSL *s, int *pnid)
     return 1;
 }
 
-int SSL_get_signature_type_nid(const SSL *s, int *pnid)
+int __cdecl SSL_get_signature_type_nid(const SSL *s, int *pnid)
 {
     if (s->s3->tmp.sigalg == NULL)
         return 0;
@@ -1143,7 +1143,7 @@ int SSL_get_signature_type_nid(const SSL *s, int *pnid)
  *
  * Call ssl_cipher_disabled() to check that it's enabled or not.
  */
-int ssl_set_client_disabled(SSL *s)
+int __cdecl ssl_set_client_disabled(SSL *s)
 {
     s->s3->tmp.mask_a = 0;
     s->s3->tmp.mask_k = 0;
@@ -1176,7 +1176,7 @@ int ssl_set_client_disabled(SSL *s)
  *
  * Returns 1 when it's disabled, 0 when enabled.
  */
-int ssl_cipher_disabled(SSL *s, const SSL_CIPHER *c, int op, int ecdhe)
+int __cdecl ssl_cipher_disabled(SSL *s, const SSL_CIPHER *c, int op, int ecdhe)
 {
     if (c->algorithm_mkey & s->s3->tmp.mask_k
         || c->algorithm_auth & s->s3->tmp.mask_a)
@@ -1204,14 +1204,14 @@ int ssl_cipher_disabled(SSL *s, const SSL_CIPHER *c, int op, int ecdhe)
     return !ssl_security(s, op, c->strength_bits, 0, (void *)c);
 }
 
-int tls_use_ticket(SSL *s)
+int __cdecl tls_use_ticket(SSL *s)
 {
     if ((s->options & SSL_OP_NO_TICKET))
         return 0;
     return ssl_security(s, SSL_SECOP_TICKET, 0, 0, NULL);
 }
 
-int tls1_set_server_sigalgs(SSL *s)
+int __cdecl tls1_set_server_sigalgs(SSL *s)
 {
     size_t i;
 
@@ -1269,7 +1269,7 @@ int tls1_set_server_sigalgs(SSL *s)
  *   ret: (output) on return, if a ticket was decrypted, then this is set to
  *       point to the resulting session.
  */
-SSL_TICKET_STATUS tls_get_ticket_from_client(SSL *s, CLIENTHELLO_MSG *hello,
+SSL_TICKET_STATUS __cdecl tls_get_ticket_from_client(SSL *s, CLIENTHELLO_MSG *hello,
                                              SSL_SESSION **ret)
 {
     size_t size;
@@ -1319,7 +1319,7 @@ SSL_TICKET_STATUS tls_get_ticket_from_client(SSL *s, CLIENTHELLO_MSG *hello,
  *   psess: (output) on return, if a ticket was decrypted, then this is set to
  *       point to the resulting session.
  */
-SSL_TICKET_STATUS tls_decrypt_ticket(SSL *s, const unsigned char *etick,
+SSL_TICKET_STATUS __cdecl tls_decrypt_ticket(SSL *s, const unsigned char *etick,
                                      size_t eticklen, const unsigned char *sess_id,
                                      size_t sesslen, SSL_SESSION **psess)
 {
@@ -1633,7 +1633,7 @@ static int tls12_sigalg_allowed(SSL *s, int op, const SIGALG_LOOKUP *lu)
  * disabled.
  */
 
-void ssl_set_sig_mask(uint32_t *pmask_a, SSL *s, int op)
+void __cdecl ssl_set_sig_mask(uint32_t *pmask_a, SSL *s, int op)
 {
     const uint16_t *sigalgs;
     size_t i, sigalgslen;
@@ -1662,7 +1662,7 @@ void ssl_set_sig_mask(uint32_t *pmask_a, SSL *s, int op)
     *pmask_a |= disabled_mask;
 }
 
-int tls12_copy_sigalgs(SSL *s, WPACKET *pkt,
+int __cdecl tls12_copy_sigalgs(SSL *s, WPACKET *pkt,
                        const uint16_t *psig, size_t psiglen)
 {
     size_t i;
@@ -1763,7 +1763,7 @@ static int tls1_set_shared_sigalgs(SSL *s)
     return 1;
 }
 
-int tls1_save_u16(PACKET *pkt, uint16_t **pdest, size_t *pdestlen)
+int __cdecl tls1_save_u16(PACKET *pkt, uint16_t **pdest, size_t *pdestlen)
 {
     unsigned int stmp;
     size_t size, i;
@@ -1796,7 +1796,7 @@ int tls1_save_u16(PACKET *pkt, uint16_t **pdest, size_t *pdestlen)
     return 1;
 }
 
-int tls1_save_sigalgs(SSL *s, PACKET *pkt, int cert)
+int __cdecl tls1_save_sigalgs(SSL *s, PACKET *pkt, int cert)
 {
     /* Extension ignored for inappropriate versions */
     if (!SSL_USE_SIGALGS(s))
@@ -1816,7 +1816,7 @@ int tls1_save_sigalgs(SSL *s, PACKET *pkt, int cert)
 
 /* Set preferred digest for each key type */
 
-int tls1_process_sigalgs(SSL *s)
+int __cdecl tls1_process_sigalgs(SSL *s)
 {
     size_t i;
     uint32_t *pvalid = s->s3->tmp.valid_flags;
@@ -1841,7 +1841,7 @@ int tls1_process_sigalgs(SSL *s)
     return 1;
 }
 
-int SSL_get_sigalgs(SSL *s, int idx,
+int __cdecl SSL_get_sigalgs(SSL *s, int idx,
                     int *psign, int *phash, int *psignhash,
                     unsigned char *rsig, unsigned char *rhash)
 {
@@ -1870,7 +1870,7 @@ int SSL_get_sigalgs(SSL *s, int idx,
     return (int)numsigalgs;
 }
 
-int SSL_get_shared_sigalgs(SSL *s, int idx,
+int __cdecl SSL_get_shared_sigalgs(SSL *s, int idx,
                            int *psign, int *phash, int *psignhash,
                            unsigned char *rsig, unsigned char *rhash)
 {
@@ -1991,7 +1991,7 @@ static int sig_cb(const char *elem, int len, void *arg)
  * Set supported signature algorithms based on a colon separated list of the
  * form sig+hash e.g. RSA+SHA512:DSA+SHA512
  */
-int tls1_set_sigalgs_list(CERT *c, const char *str, int client)
+int __cdecl tls1_set_sigalgs_list(CERT *c, const char *str, int client)
 {
     sig_cb_st sig;
     sig.sigalgcnt = 0;
@@ -2002,7 +2002,7 @@ int tls1_set_sigalgs_list(CERT *c, const char *str, int client)
     return tls1_set_raw_sigalgs(c, sig.sigalgs, sig.sigalgcnt, client);
 }
 
-int tls1_set_raw_sigalgs(CERT *c, const uint16_t *psigs, size_t salglen,
+int __cdecl tls1_set_raw_sigalgs(CERT *c, const uint16_t *psigs, size_t salglen,
                      int client)
 {
     uint16_t *sigalgs;
@@ -2026,7 +2026,7 @@ int tls1_set_raw_sigalgs(CERT *c, const uint16_t *psigs, size_t salglen,
     return 1;
 }
 
-int tls1_set_sigalgs(CERT *c, const int *psig_nids, size_t salglen, int client)
+int __cdecl tls1_set_sigalgs(CERT *c, const int *psig_nids, size_t salglen, int client)
 {
     uint16_t *sigalgs, *sptr;
     size_t i;
@@ -2134,7 +2134,7 @@ static int ssl_check_ca_name(STACK_OF(X509_NAME) *names, X509 *x)
          (CERT_PKEY_VALID_FLAGS|CERT_PKEY_CA_SIGNATURE|CERT_PKEY_CA_PARAM \
          | CERT_PKEY_ISSUER_NAME|CERT_PKEY_CERT_TYPE)
 
-int tls1_check_chain(SSL *s, X509 *x, EVP_PKEY *pk, STACK_OF(X509) *chain,
+int __cdecl tls1_check_chain(SSL *s, X509 *x, EVP_PKEY *pk, STACK_OF(X509) *chain,
                      int idx)
 {
     int i;
@@ -2386,7 +2386,7 @@ int tls1_check_chain(SSL *s, X509 *x, EVP_PKEY *pk, STACK_OF(X509) *chain,
 }
 
 /* Set validity of certificates in an SSL structure */
-void tls1_set_cert_validity(SSL *s)
+void __cdecl tls1_set_cert_validity(SSL *s)
 {
     tls1_check_chain(s, NULL, NULL, NULL, SSL_PKEY_RSA);
     tls1_check_chain(s, NULL, NULL, NULL, SSL_PKEY_RSA_PSS_SIGN);
@@ -2400,13 +2400,13 @@ void tls1_set_cert_validity(SSL *s)
 }
 
 /* User level utility function to check a chain is suitable */
-int SSL_check_chain(SSL *s, X509 *x, EVP_PKEY *pk, STACK_OF(X509) *chain)
+int __cdecl SSL_check_chain(SSL *s, X509 *x, EVP_PKEY *pk, STACK_OF(X509) *chain)
 {
     return tls1_check_chain(s, x, pk, chain, -1);
 }
 
 #ifndef OPENSSL_NO_DH
-DH *ssl_get_auto_dh(SSL *s)
+DH * __cdecl ssl_get_auto_dh(SSL *s)
 {
     int dh_secbits = 80;
     if (s->cert->dh_tmp_auto == 2)
@@ -2488,7 +2488,7 @@ static int ssl_security_cert_sig(SSL *s, SSL_CTX *ctx, X509 *x, int op)
         return ssl_ctx_security(ctx, op, secbits, nid, x);
 }
 
-int ssl_security_cert(SSL *s, SSL_CTX *ctx, X509 *x, int vfy, int is_ee)
+int __cdecl ssl_security_cert(SSL *s, SSL_CTX *ctx, X509 *x, int vfy, int is_ee)
 {
     if (vfy)
         vfy = SSL_SECOP_PEER;
@@ -2510,7 +2510,7 @@ int ssl_security_cert(SSL *s, SSL_CTX *ctx, X509 *x, int vfy, int is_ee)
  * one to the peer. Return values: 1 if ok otherwise error code to use
  */
 
-int ssl_security_cert_chain(SSL *s, STACK_OF(X509) *sk, X509 *x, int vfy)
+int __cdecl ssl_security_cert_chain(SSL *s, STACK_OF(X509) *sk, X509 *x, int vfy)
 {
     int rv, start_idx, i;
     if (x == NULL) {
@@ -2703,7 +2703,7 @@ static const SIGALG_LOOKUP *find_sig_alg(SSL *s, X509 *x, EVP_PKEY *pkey)
  * a fatal error: we will either try another certificate or not present one
  * to the server. In this case no error is set.
  */
-int tls_choose_sigalg(SSL *s, int fatalerrs)
+int __cdecl tls_choose_sigalg(SSL *s, int fatalerrs)
 {
     const SIGALG_LOOKUP *lu = NULL;
     int sig_idx = -1;
@@ -2831,7 +2831,7 @@ int tls_choose_sigalg(SSL *s, int fatalerrs)
     return 1;
 }
 
-int SSL_CTX_set_tlsext_max_fragment_length(SSL_CTX *ctx, uint8_t mode)
+int __cdecl SSL_CTX_set_tlsext_max_fragment_length(SSL_CTX *ctx, uint8_t mode)
 {
     if (mode != TLSEXT_max_fragment_length_DISABLED
             && !IS_MAX_FRAGMENT_LENGTH_EXT_VALID(mode)) {
@@ -2844,7 +2844,7 @@ int SSL_CTX_set_tlsext_max_fragment_length(SSL_CTX *ctx, uint8_t mode)
     return 1;
 }
 
-int SSL_set_tlsext_max_fragment_length(SSL *ssl, uint8_t mode)
+int __cdecl SSL_set_tlsext_max_fragment_length(SSL *ssl, uint8_t mode)
 {
     if (mode != TLSEXT_max_fragment_length_DISABLED
             && !IS_MAX_FRAGMENT_LENGTH_EXT_VALID(mode)) {
@@ -2857,7 +2857,7 @@ int SSL_set_tlsext_max_fragment_length(SSL *ssl, uint8_t mode)
     return 1;
 }
 
-uint8_t SSL_SESSION_get_max_fragment_length(const SSL_SESSION *session)
+uint8_t __cdecl SSL_SESSION_get_max_fragment_length(const SSL_SESSION *session)
 {
     return session->ext.max_fragment_len_mode;
 }
diff --git a/ssl/t1_trce.c b/ssl/t1_trce.c
index be3039af38..dba6a8f426 100644
--- a/ssl/t1_trce.c
+++ b/ssl/t1_trce.c
@@ -1495,7 +1495,7 @@ static int ssl_print_handshake(BIO *bio, const SSL *ssl, int server,
     return 1;
 }
 
-void SSL_trace(int write_p, int version, int content_type,
+void __cdecl SSL_trace(int write_p, int version, int content_type,
                const void *buf, size_t msglen, SSL *ssl, void *arg)
 {
     const unsigned char *msg = buf;
diff --git a/ssl/tls13_enc.c b/ssl/tls13_enc.c
index b5f57a02f7..b2fcc9dbef 100644
--- a/ssl/tls13_enc.c
+++ b/ssl/tls13_enc.c
@@ -25,7 +25,7 @@ static const unsigned char default_zeros[EVP_MAX_MD_SIZE];
  * The |data| value may be zero length. Any errors will be treated as fatal if
  * |fatal| is set. Returns 1 on success  0 on failure.
  */
-int tls13_hkdf_expand(SSL *s, const EVP_MD *md, const unsigned char *secret,
+int __cdecl tls13_hkdf_expand(SSL *s, const EVP_MD *md, const unsigned char *secret,
                              const unsigned char *label, size_t labellen,
                              const unsigned char *data, size_t datalen,
                              unsigned char *out, size_t outlen, int fatal)
@@ -113,7 +113,7 @@ int tls13_hkdf_expand(SSL *s, const EVP_MD *md, const unsigned char *secret,
  * Given a |secret| generate a |key| of length |keylen| bytes. Returns 1 on
  * success  0 on failure.
  */
-int tls13_derive_key(SSL *s, const EVP_MD *md, const unsigned char *secret,
+int __cdecl tls13_derive_key(SSL *s, const EVP_MD *md, const unsigned char *secret,
                      unsigned char *key, size_t keylen)
 {
 #ifdef CHARSET_EBCDIC
@@ -130,7 +130,7 @@ int tls13_derive_key(SSL *s, const EVP_MD *md, const unsigned char *secret,
  * Given a |secret| generate an |iv| of length |ivlen| bytes. Returns 1 on
  * success  0 on failure.
  */
-int tls13_derive_iv(SSL *s, const EVP_MD *md, const unsigned char *secret,
+int __cdecl tls13_derive_iv(SSL *s, const EVP_MD *md, const unsigned char *secret,
                     unsigned char *iv, size_t ivlen)
 {
 #ifdef CHARSET_EBCDIC
@@ -143,7 +143,7 @@ int tls13_derive_iv(SSL *s, const EVP_MD *md, const unsigned char *secret,
                              NULL, 0, iv, ivlen, 1);
 }
 
-int tls13_derive_finishedkey(SSL *s, const EVP_MD *md,
+int __cdecl tls13_derive_finishedkey(SSL *s, const EVP_MD *md,
                              const unsigned char *secret,
                              unsigned char *fin, size_t finlen)
 {
@@ -162,7 +162,7 @@ int tls13_derive_finishedkey(SSL *s, const EVP_MD *md,
  * length |insecretlen|, generate a new secret and store it in the location
  * pointed to by |outsecret|. Returns 1 on success  0 on failure.
  */
-int tls13_generate_secret(SSL *s, const EVP_MD *md,
+int __cdecl tls13_generate_secret(SSL *s, const EVP_MD *md,
                           const unsigned char *prevsecret,
                           const unsigned char *insecret,
                           size_t insecretlen,
@@ -256,7 +256,7 @@ int tls13_generate_secret(SSL *s, const EVP_MD *md,
  * handshake secret. This requires the early secret to already have been
  * generated. Returns 1 on success  0 on failure.
  */
-int tls13_generate_handshake_secret(SSL *s, const unsigned char *insecret,
+int __cdecl tls13_generate_handshake_secret(SSL *s, const unsigned char *insecret,
                                 size_t insecretlen)
 {
     /* Calls SSLfatal() if required */
@@ -270,7 +270,7 @@ int tls13_generate_handshake_secret(SSL *s, const unsigned char *insecret,
  * secret and store its length in |*secret_size|. Returns 1 on success  0 on
  * failure.
  */
-int tls13_generate_master_secret(SSL *s, unsigned char *out,
+int __cdecl tls13_generate_master_secret(SSL *s, unsigned char *out,
                                  unsigned char *prev, size_t prevlen,
                                  size_t *secret_size)
 {
@@ -285,7 +285,7 @@ int tls13_generate_master_secret(SSL *s, unsigned char *out,
  * Generates the mac for the Finished message. Returns the length of the MAC or
  * 0 on error.
  */
-size_t tls13_final_finish_mac(SSL *s, const char *str, size_t slen,
+size_t __cdecl tls13_final_finish_mac(SSL *s, const char *str, size_t slen,
                              unsigned char *out)
 {
     const EVP_MD *md = ssl_handshake_md(s);
@@ -339,7 +339,7 @@ size_t tls13_final_finish_mac(SSL *s, const char *str, size_t slen,
  * There isn't really a key block in TLSv1.3, but we still need this function
  * for initialising the cipher and hash. Returns 1 on success or 0 on failure.
  */
-int tls13_setup_key_block(SSL *s)
+int __cdecl tls13_setup_key_block(SSL *s)
 {
     const EVP_CIPHER *c;
     const EVP_MD *hash;
@@ -427,7 +427,7 @@ static int derive_secret_key_and_iv(SSL *s, int sending, const EVP_MD *md,
     return 0;
 }
 
-int tls13_change_cipher_state(SSL *s, int which)
+int __cdecl tls13_change_cipher_state(SSL *s, int which)
 {
 #ifdef CHARSET_EBCDIC
   static const unsigned char client_early_traffic[]       = {0x63, 0x20, 0x65, 0x20,       /*traffic*/0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x00};
@@ -713,7 +713,7 @@ int tls13_change_cipher_state(SSL *s, int which)
     return ret;
 }
 
-int tls13_update_key(SSL *s, int sending)
+int __cdecl tls13_update_key(SSL *s, int sending)
 {
 #ifdef CHARSET_EBCDIC
   static const unsigned char application_traffic[] = { 0x74, 0x72 ,0x61 ,0x66 ,0x66 ,0x69 ,0x63 ,0x20 ,0x75 ,0x70 ,0x64, 0x00};
@@ -761,7 +761,7 @@ int tls13_update_key(SSL *s, int sending)
     return ret;
 }
 
-int tls13_alert_code(int code)
+int __cdecl tls13_alert_code(int code)
 {
     /* There are 2 additional alerts in TLSv1.3 compared to TLSv1.2 */
     if (code == SSL_AD_MISSING_EXTENSION || code == SSL_AD_CERTIFICATE_REQUIRED)
@@ -770,7 +770,7 @@ int tls13_alert_code(int code)
     return tls1_alert_code(code);
 }
 
-int tls13_export_keying_material(SSL *s, unsigned char *out, size_t olen,
+int __cdecl tls13_export_keying_material(SSL *s, unsigned char *out, size_t olen,
                                  const char *label, size_t llen,
                                  const unsigned char *context,
                                  size_t contextlen, int use_context)
@@ -812,7 +812,7 @@ int tls13_export_keying_material(SSL *s, unsigned char *out, size_t olen,
     return ret;
 }
 
-int tls13_export_keying_material_early(SSL *s, unsigned char *out, size_t olen,
+int __cdecl tls13_export_keying_material_early(SSL *s, unsigned char *out, size_t olen,
                                        const char *label, size_t llen,
                                        const unsigned char *context,
                                        size_t contextlen)
diff --git a/ssl/tls_srp.c b/ssl/tls_srp.c
index f94e46b4e8..54c5f39656 100644
--- a/ssl/tls_srp.c
+++ b/ssl/tls_srp.c
@@ -19,7 +19,7 @@
 #ifndef OPENSSL_NO_SRP
 # include <openssl/srp.h>
 
-int SSL_CTX_SRP_CTX_free(struct ssl_ctx_st *ctx)
+int __cdecl SSL_CTX_SRP_CTX_free(struct ssl_ctx_st *ctx)
 {
     if (ctx == NULL)
         return 0;
@@ -38,7 +38,7 @@ int SSL_CTX_SRP_CTX_free(struct ssl_ctx_st *ctx)
     return 1;
 }
 
-int SSL_SRP_CTX_free(struct ssl_st *s)
+int __cdecl SSL_SRP_CTX_free(struct ssl_st *s)
 {
     if (s == NULL)
         return 0;
@@ -57,7 +57,7 @@ int SSL_SRP_CTX_free(struct ssl_st *s)
     return 1;
 }
 
-int SSL_SRP_CTX_init(struct ssl_st *s)
+int __cdecl SSL_SRP_CTX_init(struct ssl_st *s)
 {
     SSL_CTX *ctx;
 
@@ -126,7 +126,7 @@ int SSL_SRP_CTX_init(struct ssl_st *s)
     return 0;
 }
 
-int SSL_CTX_SRP_CTX_init(struct ssl_ctx_st *ctx)
+int __cdecl SSL_CTX_SRP_CTX_init(struct ssl_ctx_st *ctx)
 {
     if (ctx == NULL)
         return 0;
@@ -138,7 +138,7 @@ int SSL_CTX_SRP_CTX_init(struct ssl_ctx_st *ctx)
 }
 
 /* server side */
-int SSL_srp_server_param_with_username(SSL *s, int *ad)
+int __cdecl SSL_srp_server_param_with_username(SSL *s, int *ad)
 {
     unsigned char b[SSL_MAX_MASTER_KEY_LENGTH];
     int al;
@@ -174,7 +174,7 @@ int SSL_srp_server_param_with_username(SSL *s, int *ad)
  * If the server just has the raw password, make up a verifier entry on the
  * fly
  */
-int SSL_set_srp_server_param_pw(SSL *s, const char *user, const char *pass,
+int __cdecl SSL_set_srp_server_param_pw(SSL *s, const char *user, const char *pass,
                                 const char *grp)
 {
     SRP_gN *GN = SRP_get_default_gN(grp);
@@ -193,7 +193,7 @@ int SSL_set_srp_server_param_pw(SSL *s, const char *user, const char *pass,
     return 1;
 }
 
-int SSL_set_srp_server_param(SSL *s, const BIGNUM *N, const BIGNUM *g,
+int __cdecl SSL_set_srp_server_param(SSL *s, const BIGNUM *N, const BIGNUM *g,
                              BIGNUM *sa, BIGNUM *v, char *info)
 {
     if (N != NULL) {
@@ -246,7 +246,7 @@ int SSL_set_srp_server_param(SSL *s, const BIGNUM *N, const BIGNUM *g,
     return 1;
 }
 
-int srp_generate_server_master_secret(SSL *s)
+int __cdecl srp_generate_server_master_secret(SSL *s)
 {
     BIGNUM *K = NULL, *u = NULL;
     int ret = -1, tmp_len = 0;
@@ -276,7 +276,7 @@ int srp_generate_server_master_secret(SSL *s)
 }
 
 /* client side */
-int srp_generate_client_master_secret(SSL *s)
+int __cdecl srp_generate_client_master_secret(SSL *s)
 {
     BIGNUM *x = NULL, *u = NULL, *K = NULL;
     int ret = -1, tmp_len = 0;
@@ -329,7 +329,7 @@ int srp_generate_client_master_secret(SSL *s)
     return ret;
 }
 
-int srp_verify_server_param(SSL *s)
+int __cdecl srp_verify_server_param(SSL *s)
 {
     SRP_CTX *srp = &s->srp_ctx;
     /*
@@ -365,7 +365,7 @@ int srp_verify_server_param(SSL *s)
     return 1;
 }
 
-int SRP_Calc_A_param(SSL *s)
+int __cdecl SRP_Calc_A_param(SSL *s)
 {
     unsigned char rnd[SSL_MAX_MASTER_KEY_LENGTH];
 
@@ -380,28 +380,28 @@ int SRP_Calc_A_param(SSL *s)
     return 1;
 }
 
-BIGNUM *SSL_get_srp_g(SSL *s)
+BIGNUM * __cdecl SSL_get_srp_g(SSL *s)
 {
     if (s->srp_ctx.g != NULL)
         return s->srp_ctx.g;
     return s->ctx->srp_ctx.g;
 }
 
-BIGNUM *SSL_get_srp_N(SSL *s)
+BIGNUM * __cdecl SSL_get_srp_N(SSL *s)
 {
     if (s->srp_ctx.N != NULL)
         return s->srp_ctx.N;
     return s->ctx->srp_ctx.N;
 }
 
-char *SSL_get_srp_username(SSL *s)
+char * __cdecl SSL_get_srp_username(SSL *s)
 {
     if (s->srp_ctx.login != NULL)
         return s->srp_ctx.login;
     return s->ctx->srp_ctx.login;
 }
 
-char *SSL_get_srp_userinfo(SSL *s)
+char * __cdecl SSL_get_srp_userinfo(SSL *s)
 {
     if (s->srp_ctx.info != NULL)
         return s->srp_ctx.info;
@@ -411,46 +411,46 @@ char *SSL_get_srp_userinfo(SSL *s)
 # define tls1_ctx_ctrl ssl3_ctx_ctrl
 # define tls1_ctx_callback_ctrl ssl3_ctx_callback_ctrl
 
-int SSL_CTX_set_srp_username(SSL_CTX *ctx, char *name)
+int __cdecl SSL_CTX_set_srp_username(SSL_CTX *ctx, char *name)
 {
     return tls1_ctx_ctrl(ctx, SSL_CTRL_SET_TLS_EXT_SRP_USERNAME, 0, name);
 }
 
-int SSL_CTX_set_srp_password(SSL_CTX *ctx, char *password)
+int __cdecl SSL_CTX_set_srp_password(SSL_CTX *ctx, char *password)
 {
     return tls1_ctx_ctrl(ctx, SSL_CTRL_SET_TLS_EXT_SRP_PASSWORD, 0, password);
 }
 
-int SSL_CTX_set_srp_strength(SSL_CTX *ctx, int strength)
+int __cdecl SSL_CTX_set_srp_strength(SSL_CTX *ctx, int strength)
 {
     return tls1_ctx_ctrl(ctx, SSL_CTRL_SET_TLS_EXT_SRP_STRENGTH, strength,
                          NULL);
 }
 
-int SSL_CTX_set_srp_verify_param_callback(SSL_CTX *ctx,
-                                          int (*cb) (SSL *, void *))
+int __cdecl SSL_CTX_set_srp_verify_param_callback(SSL_CTX *ctx,
+                                          int (__cdecl *cb) (SSL *, void *))
 {
     return tls1_ctx_callback_ctrl(ctx, SSL_CTRL_SET_SRP_VERIFY_PARAM_CB,
-                                  (void (*)(void))cb);
+                                  (void (__cdecl *)(void))cb);
 }
 
-int SSL_CTX_set_srp_cb_arg(SSL_CTX *ctx, void *arg)
+int __cdecl SSL_CTX_set_srp_cb_arg(SSL_CTX *ctx, void *arg)
 {
     return tls1_ctx_ctrl(ctx, SSL_CTRL_SET_SRP_ARG, 0, arg);
 }
 
-int SSL_CTX_set_srp_username_callback(SSL_CTX *ctx,
-                                      int (*cb) (SSL *, int *, void *))
+int __cdecl SSL_CTX_set_srp_username_callback(SSL_CTX *ctx,
+                                      int (__cdecl *cb) (SSL *, int *, void *))
 {
     return tls1_ctx_callback_ctrl(ctx, SSL_CTRL_SET_TLS_EXT_SRP_USERNAME_CB,
-                                  (void (*)(void))cb);
+                                  (void (__cdecl *)(void))cb);
 }
 
-int SSL_CTX_set_srp_client_pwd_callback(SSL_CTX *ctx,
-                                        char *(*cb) (SSL *, void *))
+int __cdecl SSL_CTX_set_srp_client_pwd_callback(SSL_CTX *ctx,
+                                        char *(__cdecl *cb) (SSL *, void *))
 {
     return tls1_ctx_callback_ctrl(ctx, SSL_CTRL_SET_SRP_GIVE_CLIENT_PWD_CB,
-                                  (void (*)(void))cb);
+                                  (void (__cdecl *)(void))cb);
 }
 
 #endif
diff --git a/test/aborttest.c b/test/aborttest.c
index ba5055edff..885734d4bf 100644
--- a/test/aborttest.c
+++ b/test/aborttest.c
@@ -9,7 +9,7 @@
 
 #include <openssl/crypto.h>
 
-int main(int argc, char **argv)
+int __cdecl main(int argc, char **argv)
 {
     OPENSSL_die("Voluntary abort", __FILE__, __LINE__);
     return 0;
diff --git a/test/asn1_decode_test.c b/test/asn1_decode_test.c
index 369023d5f1..4ab76d6b44 100644
--- a/test/asn1_decode_test.c
+++ b/test/asn1_decode_test.c
@@ -42,7 +42,7 @@ ASN1_SEQUENCE(ASN1_LONG_DATA) = {
 IMPLEMENT_STATIC_ASN1_ENCODE_FUNCTIONS(ASN1_LONG_DATA)
 IMPLEMENT_STATIC_ASN1_ALLOC_FUNCTIONS(ASN1_LONG_DATA)
 
-static int test_long(void)
+static int __cdecl test_long(void)
 {
     const unsigned char *p = t_invalid_zero;
     ASN1_LONG_DATA *dectst =
@@ -69,7 +69,7 @@ ASN1_SEQUENCE(ASN1_INT32_DATA) = {
 IMPLEMENT_STATIC_ASN1_ENCODE_FUNCTIONS(ASN1_INT32_DATA)
 IMPLEMENT_STATIC_ASN1_ALLOC_FUNCTIONS(ASN1_INT32_DATA)
 
-static int test_int32(void)
+static int __cdecl test_int32(void)
 {
     const unsigned char *p = t_invalid_zero;
     ASN1_INT32_DATA *dectst =
@@ -95,7 +95,7 @@ ASN1_SEQUENCE(ASN1_UINT32_DATA) = {
 IMPLEMENT_STATIC_ASN1_ENCODE_FUNCTIONS(ASN1_UINT32_DATA)
 IMPLEMENT_STATIC_ASN1_ALLOC_FUNCTIONS(ASN1_UINT32_DATA)
 
-static int test_uint32(void)
+static int __cdecl test_uint32(void)
 {
     const unsigned char *p = t_invalid_zero;
     ASN1_UINT32_DATA *dectst =
@@ -121,7 +121,7 @@ ASN1_SEQUENCE(ASN1_INT64_DATA) = {
 IMPLEMENT_STATIC_ASN1_ENCODE_FUNCTIONS(ASN1_INT64_DATA)
 IMPLEMENT_STATIC_ASN1_ALLOC_FUNCTIONS(ASN1_INT64_DATA)
 
-static int test_int64(void)
+static int __cdecl test_int64(void)
 {
     const unsigned char *p = t_invalid_zero;
     ASN1_INT64_DATA *dectst =
@@ -147,7 +147,7 @@ ASN1_SEQUENCE(ASN1_UINT64_DATA) = {
 IMPLEMENT_STATIC_ASN1_ENCODE_FUNCTIONS(ASN1_UINT64_DATA)
 IMPLEMENT_STATIC_ASN1_ALLOC_FUNCTIONS(ASN1_UINT64_DATA)
 
-static int test_uint64(void)
+static int __cdecl test_uint64(void)
 {
     const unsigned char *p = t_invalid_zero;
     ASN1_UINT64_DATA *dectst =
diff --git a/test/asn1_encode_test.c b/test/asn1_encode_test.c
index ed920a4d66..f85180828d 100644
--- a/test/asn1_encode_test.c
+++ b/test/asn1_encode_test.c
@@ -481,7 +481,7 @@ typedef struct {
  *      0       decoded structure wasn't what was expected (failure)
  *      1       decoded structure was what was expected (success)
  */
-static int do_decode(unsigned char *bytes, long nbytes,
+static int __cdecl do_decode(unsigned char *bytes, long nbytes,
                      const EXPECTED *expected, size_t expected_size,
                      const TEST_PACKAGE *package)
 {
@@ -517,7 +517,7 @@ static int do_decode(unsigned char *bytes, long nbytes,
  *      0       encoded DER wasn't what was expected (failure)
  *      1       encoded DER was what was expected (success)
  */
-static int do_encode(EXPECTED *input,
+static int __cdecl do_encode(EXPECTED *input,
                      const unsigned char *expected, size_t expected_len,
                      const TEST_PACKAGE *package)
 {
@@ -546,7 +546,7 @@ static int do_encode(EXPECTED *input,
 }
 
 /* Do an encode/decode round trip */
-static int do_enc_dec(EXPECTED *bytes, long nbytes,
+static int __cdecl do_enc_dec(EXPECTED *bytes, long nbytes,
                       const TEST_PACKAGE *package)
 {
     unsigned char *data = NULL;
@@ -666,7 +666,7 @@ static size_t make_custom_der(const TEST_CUSTOM_DATA *custom_data,
 }
 
 /* Attempt to decode a custom encoding of the test structure */
-static int do_decode_custom(const TEST_CUSTOM_DATA *custom_data,
+static int __cdecl do_decode_custom(const TEST_CUSTOM_DATA *custom_data,
                             const EXPECTED *expected, size_t expected_size,
                             const TEST_PACKAGE *package)
 {
@@ -689,7 +689,7 @@ static int do_decode_custom(const TEST_CUSTOM_DATA *custom_data,
 }
 
 /* Attempt to encode the test structure and compare it to custom DER */
-static int do_encode_custom(EXPECTED *input,
+static int __cdecl do_encode_custom(EXPECTED *input,
                             const TEST_CUSTOM_DATA *custom_data,
                             const TEST_PACKAGE *package)
 {
@@ -706,7 +706,7 @@ static int do_encode_custom(EXPECTED *input,
     return ret;
 }
 
-static int do_print_item(const TEST_PACKAGE *package)
+static int __cdecl do_print_item(const TEST_PACKAGE *package)
 {
 #define DATA_BUF_SIZE 256
     const ASN1_ITEM *i = ASN1_ITEM_ptr(package->asn1_type);
@@ -726,7 +726,7 @@ static int do_print_item(const TEST_PACKAGE *package)
 }
 
 
-static int test_intern(const TEST_PACKAGE *package)
+static int __cdecl test_intern(const TEST_PACKAGE *package)
 {
     unsigned int i;
     size_t nelems;
@@ -825,33 +825,33 @@ static int test_intern(const TEST_PACKAGE *package)
 }
 
 #if OPENSSL_API_COMPAT < 0x10200000L
-static int test_long_32bit(void)
+static int __cdecl test_long_32bit(void)
 {
     return test_intern(&long_test_package_32bit);
 }
 
-static int test_long_64bit(void)
+static int __cdecl test_long_64bit(void)
 {
     return test_intern(&long_test_package_64bit);
 }
 #endif
 
-static int test_int32(void)
+static int __cdecl test_int32(void)
 {
     return test_intern(&int32_test_package);
 }
 
-static int test_uint32(void)
+static int __cdecl test_uint32(void)
 {
     return test_intern(&uint32_test_package);
 }
 
-static int test_int64(void)
+static int __cdecl test_int64(void)
 {
     return test_intern(&int64_test_package);
 }
 
-static int test_uint64(void)
+static int __cdecl test_uint64(void)
 {
     return test_intern(&uint64_test_package);
 }
diff --git a/test/asn1_internal_test.c b/test/asn1_internal_test.c
index 63278040b6..97ab33b935 100644
--- a/test/asn1_internal_test.c
+++ b/test/asn1_internal_test.c
@@ -26,7 +26,7 @@
 
 #include "../crypto/asn1/tbl_standard.h"
 
-static int test_tbl_standard(void)
+static int __cdecl test_tbl_standard(void)
 {
     const ASN1_STRING_TABLE *tmp;
     int last_nid = -1;
@@ -62,7 +62,7 @@ static int test_tbl_standard(void)
 #include "internal/asn1_int.h"
 #include "../crypto/asn1/standard_methods.h"
 
-static int test_standard_methods(void)
+static int __cdecl test_standard_methods(void)
 {
     const EVP_PKEY_ASN1_METHOD **tmp;
     int last_pkey_id = -1;
diff --git a/test/asn1_string_table_test.c b/test/asn1_string_table_test.c
index 3c6cc257bc..49e8eb65b8 100644
--- a/test/asn1_string_table_test.c
+++ b/test/asn1_string_table_test.c
@@ -15,7 +15,7 @@
 #include <openssl/asn1.h>
 #include "testutil.h"
 
-static int test_string_tbl(void)
+static int __cdecl test_string_tbl(void)
 {
     const ASN1_STRING_TABLE *tmp = NULL;
     int nid = 12345678, nid2 = 87654321, rv = 0, ret = 0;
diff --git a/test/asn1_time_test.c b/test/asn1_time_test.c
index b43763d050..e49ba41c6a 100644
--- a/test/asn1_time_test.c
+++ b/test/asn1_time_test.c
@@ -107,7 +107,7 @@ static ASN1_TIME gtime = {
 };
 static time_t gtime_t = 946598400;
 
-static int test_table(struct testdata *tbl, int idx)
+static int __cdecl test_table(struct testdata *tbl, int idx)
 {
     int error = 0;
     ASN1_TIME atime;
@@ -255,22 +255,22 @@ static int test_table(struct testdata *tbl, int idx)
     return !error;
 }
 
-static int test_table_pos(int idx)
+static int __cdecl test_table_pos(int idx)
 {
     return test_table(tbl_testdata_pos, idx);
 }
 
-static int test_table_neg(int idx)
+static int __cdecl test_table_neg(int idx)
 {
     return test_table(tbl_testdata_neg, idx);
 }
 
-static int test_table_pos_64bit(int idx)
+static int __cdecl test_table_pos_64bit(int idx)
 {
     return test_table(tbl_testdata_pos_64bit, idx);
 }
 
-static int test_table_neg_64bit(int idx)
+static int __cdecl test_table_neg_64bit(int idx)
 {
     return test_table(tbl_testdata_neg_64bit, idx);
 }
@@ -313,7 +313,7 @@ static struct compare_testdata tbl_compare_testdata[] = {
     { TOMORROW_UTC, TOMORROW_UTC,  0 }
 };
 
-static int test_table_compare(int idx)
+static int __cdecl test_table_compare(int idx)
 {
     struct compare_testdata *td = &tbl_compare_testdata[idx];
 
diff --git a/test/asynciotest.c b/test/asynciotest.c
index 5e85cbb044..aeced9910a 100644
--- a/test/asynciotest.c
+++ b/test/asynciotest.c
@@ -24,13 +24,13 @@ static int fragment = 0;
 static char *cert = NULL;
 static char *privkey = NULL;
 
-static int async_new(BIO *bi);
-static int async_free(BIO *a);
-static int async_read(BIO *b, char *out, int outl);
-static int async_write(BIO *b, const char *in, int inl);
-static long async_ctrl(BIO *b, int cmd, long num, void *ptr);
-static int async_gets(BIO *bp, char *buf, int size);
-static int async_puts(BIO *bp, const char *str);
+static int __cdecl async_new(BIO *bi);
+static int __cdecl async_free(BIO *a);
+static int __cdecl async_read(BIO *b, char *out, int outl);
+static int __cdecl async_write(BIO *b, const char *in, int inl);
+static long __cdecl async_ctrl(BIO *b, int cmd, long num, void *ptr);
+static int __cdecl async_gets(BIO *bp, char *buf, int size);
+static int __cdecl async_puts(BIO *bp, const char *str);
 
 /* Choose a sufficiently large type likely to be unused for this custom BIO */
 # define BIO_TYPE_ASYNC_FILTER  (0x80 | BIO_TYPE_FILTER)
@@ -59,7 +59,7 @@ static const BIO_METHOD *bio_f_async_filter(void)
     return methods_async;
 }
 
-static int async_new(BIO *bio)
+static int __cdecl async_new(BIO *bio)
 {
     struct async_ctrs *ctrs;
 
@@ -72,7 +72,7 @@ static int async_new(BIO *bio)
     return 1;
 }
 
-static int async_free(BIO *bio)
+static int __cdecl async_free(BIO *bio)
 {
     struct async_ctrs *ctrs;
 
@@ -86,7 +86,7 @@ static int async_free(BIO *bio)
     return 1;
 }
 
-static int async_read(BIO *bio, char *out, int outl)
+static int __cdecl async_read(BIO *bio, char *out, int outl)
 {
     struct async_ctrs *ctrs;
     int ret = 0;
@@ -121,7 +121,7 @@ static int async_read(BIO *bio, char *out, int outl)
 #define VERSIONLOPOS    2
 #define DATAPOS         5
 
-static int async_write(BIO *bio, const char *in, int inl)
+static int __cdecl async_write(BIO *bio, const char *in, int inl)
 {
     struct async_ctrs *ctrs;
     int ret = 0;
@@ -254,7 +254,7 @@ static int async_write(BIO *bio, const char *in, int inl)
     return ret;
 }
 
-static long async_ctrl(BIO *bio, int cmd, long num, void *ptr)
+static long __cdecl async_ctrl(BIO *bio, int cmd, long num, void *ptr)
 {
     long ret;
     BIO *next = BIO_next(bio);
@@ -273,20 +273,20 @@ static long async_ctrl(BIO *bio, int cmd, long num, void *ptr)
     return ret;
 }
 
-static int async_gets(BIO *bio, char *buf, int size)
+static int __cdecl async_gets(BIO *bio, char *buf, int size)
 {
     /* We don't support this - not needed anyway */
     return -1;
 }
 
-static int async_puts(BIO *bio, const char *str)
+static int __cdecl async_puts(BIO *bio, const char *str)
 {
     return async_write(bio, str, strlen(str));
 }
 
 #define MAX_ATTEMPTS    100
 
-static int test_asyncio(int test)
+static int __cdecl test_asyncio(int test)
 {
     SSL_CTX *serverctx = NULL, *clientctx = NULL;
     SSL *serverssl = NULL, *clientssl = NULL;
diff --git a/test/asynctest.c b/test/asynctest.c
index 9728a37911..2b38b477fb 100644
--- a/test/asynctest.c
+++ b/test/asynctest.c
@@ -19,14 +19,14 @@
 static int ctr = 0;
 static ASYNC_JOB *currjob = NULL;
 
-static int only_pause(void *args)
+static int __cdecl only_pause(void *args)
 {
     ASYNC_pause_job();
 
     return 1;
 }
 
-static int add_two(void *args)
+static int __cdecl add_two(void *args)
 {
     ctr++;
     ASYNC_pause_job();
@@ -35,7 +35,7 @@ static int add_two(void *args)
     return 2;
 }
 
-static int save_current(void *args)
+static int __cdecl save_current(void *args)
 {
     currjob = ASYNC_get_current_job();
     ASYNC_pause_job();
@@ -44,7 +44,7 @@ static int save_current(void *args)
 }
 
 #define MAGIC_WAIT_FD   ((OSSL_ASYNC_FD)99)
-static int waitfd(void *args)
+static int __cdecl waitfd(void *args)
 {
     ASYNC_JOB *job;
     ASYNC_WAIT_CTX *waitctx;
@@ -77,7 +77,7 @@ static int waitfd(void *args)
     return 1;
 }
 
-static int blockpause(void *args)
+static int __cdecl blockpause(void *args)
 {
     ASYNC_block_pause();
     ASYNC_pause_job();
@@ -87,7 +87,7 @@ static int blockpause(void *args)
     return 1;
 }
 
-static int test_ASYNC_init_thread(void)
+static int __cdecl test_ASYNC_init_thread(void)
 {
     ASYNC_JOB *job1 = NULL, *job2 = NULL, *job3 = NULL;
     int funcret1, funcret2, funcret3;
@@ -123,7 +123,7 @@ static int test_ASYNC_init_thread(void)
     return 1;
 }
 
-static int test_ASYNC_start_job(void)
+static int __cdecl test_ASYNC_start_job(void)
 {
     ASYNC_JOB *job = NULL;
     int funcret;
@@ -151,7 +151,7 @@ static int test_ASYNC_start_job(void)
     return 1;
 }
 
-static int test_ASYNC_get_current_job(void)
+static int __cdecl test_ASYNC_get_current_job(void)
 {
     ASYNC_JOB *job = NULL;
     int funcret;
@@ -178,7 +178,7 @@ static int test_ASYNC_get_current_job(void)
     return 1;
 }
 
-static int test_ASYNC_WAIT_CTX_get_all_fds(void)
+static int __cdecl test_ASYNC_WAIT_CTX_get_all_fds(void)
 {
     ASYNC_JOB *job = NULL;
     int funcret;
@@ -245,7 +245,7 @@ static int test_ASYNC_WAIT_CTX_get_all_fds(void)
     return 1;
 }
 
-static int test_ASYNC_block_pause(void)
+static int __cdecl test_ASYNC_block_pause(void)
 {
     ASYNC_JOB *job = NULL;
     int funcret;
@@ -269,7 +269,7 @@ static int test_ASYNC_block_pause(void)
     return 1;
 }
 
-int main(int argc, char **argv)
+int __cdecl main(int argc, char **argv)
 {
     if (!ASYNC_is_capable()) {
         fprintf(stderr,
diff --git a/test/bad_dtls_test.c b/test/bad_dtls_test.c
index 1c836b9c17..7d3d7e5355 100644
--- a/test/bad_dtls_test.c
+++ b/test/bad_dtls_test.c
@@ -60,7 +60,7 @@ static unsigned char key_block[104];
 
 static EVP_MD_CTX *handshake_md;
 
-static int do_PRF(const void *seed1, int seed1_len,
+static int __cdecl do_PRF(const void *seed1, int seed1_len,
                   const void *seed2, int seed2_len,
                   const void *seed3, int seed3_len,
                   unsigned char *out, int olen)
@@ -112,7 +112,7 @@ static SSL_SESSION *client_session(void)
 }
 
 /* Returns 1 for initial ClientHello, 2 for ClientHello with cookie */
-static int validate_client_hello(BIO *wbio)
+static int __cdecl validate_client_hello(BIO *wbio)
 {
     PACKET pkt, pkt2;
     long len;
@@ -189,7 +189,7 @@ static int validate_client_hello(BIO *wbio)
     return 1 + cookie_found;
 }
 
-static int send_hello_verify(BIO *rbio)
+static int __cdecl send_hello_verify(BIO *rbio)
 {
     static unsigned char hello_verify[] = {
         0x16, /* Handshake */
@@ -217,7 +217,7 @@ static int send_hello_verify(BIO *rbio)
     return 1;
 }
 
-static int send_server_hello(BIO *rbio)
+static int __cdecl send_server_hello(BIO *rbio)
 {
     static unsigned char server_hello[] = {
         0x16, /* Handshake */
@@ -268,7 +268,7 @@ static int send_server_hello(BIO *rbio)
 }
 
 /* Create header, HMAC, pad, encrypt and send a record */
-static int send_record(BIO *rbio, unsigned char type, uint64_t seqnr,
+static int __cdecl send_record(BIO *rbio, unsigned char type, uint64_t seqnr,
                        const void *msg, size_t len)
 {
     /* Note that the order of the record header fields on the wire,
@@ -342,7 +342,7 @@ static int send_record(BIO *rbio, unsigned char type, uint64_t seqnr,
     return 1;
 }
 
-static int send_finished(SSL *s, BIO *rbio)
+static int __cdecl send_finished(SSL *s, BIO *rbio)
 {
     static unsigned char finished_msg[DTLS1_HM_HEADER_LENGTH +
                                       TLS1_FINISH_MAC_LENGTH] = {
@@ -374,7 +374,7 @@ static int send_finished(SSL *s, BIO *rbio)
                        finished_msg, sizeof(finished_msg));
 }
 
-static int validate_ccs(BIO *wbio)
+static int __cdecl validate_ccs(BIO *wbio)
 {
     PACKET pkt;
     long len;
@@ -441,7 +441,7 @@ static struct {
     /* The last test should be NODROP, because a DROP wouldn't get tested. */
 };
 
-static int test_bad_dtls(void)
+static int __cdecl test_bad_dtls(void)
 {
     SSL_SESSION *sess = NULL;
     SSL_CTX *ctx = NULL;
diff --git a/test/bftest.c b/test/bftest.c
index 5abb81d7c9..d3a05ea6de 100644
--- a/test/bftest.c
+++ b/test/bftest.c
@@ -224,7 +224,7 @@ static unsigned char key_out[KEY_TEST_NUM][8] = {
     {0x05, 0x04, 0x4B, 0x62, 0xFA, 0x52, 0xD0, 0x80},
 };
 
-static int print_test_data(void)
+static int __cdecl print_test_data(void)
 {
     unsigned int i, j;
 
@@ -289,7 +289,7 @@ static int print_test_data(void)
     return 0;
 }
 
-static int test_bf_ecb_raw(int n)
+static int __cdecl test_bf_ecb_raw(int n)
 {
     int ret = 1;
     BF_KEY key;
@@ -310,7 +310,7 @@ static int test_bf_ecb_raw(int n)
     return ret;
 }
 
-static int test_bf_ecb(int n)
+static int __cdecl test_bf_ecb(int n)
 {
     int ret = 1;
     BF_KEY key;
@@ -329,7 +329,7 @@ static int test_bf_ecb(int n)
     return ret;
 }
 
-static int test_bf_set_key(int n)
+static int __cdecl test_bf_set_key(int n)
 {
     int ret = 1;
     BF_KEY key;
@@ -344,7 +344,7 @@ static int test_bf_set_key(int n)
     return ret;
 }
 
-static int test_bf_cbc(void)
+static int __cdecl test_bf_cbc(void)
 {
     unsigned char cbc_in[40], cbc_out[40], iv[8];
     int ret = 1;
@@ -370,7 +370,7 @@ static int test_bf_cbc(void)
     return ret;
 }
 
-static int test_bf_cfb64(void)
+static int __cdecl test_bf_cfb64(void)
 {
     unsigned char cbc_in[40], cbc_out[40], iv[8];
     int n, ret = 1;
@@ -402,7 +402,7 @@ static int test_bf_cfb64(void)
     return ret;
 }
 
-static int test_bf_ofb64(void)
+static int __cdecl test_bf_ofb64(void)
 {
     unsigned char cbc_in[40], cbc_out[40], iv[8];
     int n, ret = 1;
diff --git a/test/bio_callback_test.c b/test/bio_callback_test.c
index 8a17602d79..f95f8a908e 100644
--- a/test/bio_callback_test.c
+++ b/test/bio_callback_test.c
@@ -21,7 +21,7 @@ static int         my_param_argi[MAXCOUNT];
 static long        my_param_argl[MAXCOUNT];
 static long        my_param_ret[MAXCOUNT];
 
-static long my_bio_callback(BIO *b, int oper, const char *argp, int argi,
+static long __cdecl my_bio_callback(BIO *b, int oper, const char *argp, int argi,
                             long argl, long ret)
 {
     if (my_param_count >= MAXCOUNT)
@@ -36,7 +36,7 @@ static long my_bio_callback(BIO *b, int oper, const char *argp, int argi,
     return ret;
 }
 
-static int test_bio_callback(void)
+static int __cdecl test_bio_callback(void)
 {
     int ok = 0;
     BIO *bio;
diff --git a/test/bio_enc_test.c b/test/bio_enc_test.c
index 282e8dac61..1b3367cab6 100644
--- a/test/bio_enc_test.c
+++ b/test/bio_enc_test.c
@@ -35,7 +35,7 @@ static const unsigned char IV[] = {
     0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08
 };
 
-static int do_bio_cipher(const EVP_CIPHER* cipher, const unsigned char* key,
+static int __cdecl do_bio_cipher(const EVP_CIPHER* cipher, const unsigned char* key,
     const unsigned char* iv)
 {
     BIO *b;
@@ -170,7 +170,7 @@ static int do_bio_cipher(const EVP_CIPHER* cipher, const unsigned char* key,
     return 1;
 }
 
-static int do_test_bio_cipher(const EVP_CIPHER* cipher, int idx)
+static int __cdecl do_test_bio_cipher(const EVP_CIPHER* cipher, int idx)
 {
     switch(idx)
     {
@@ -182,34 +182,34 @@ static int do_test_bio_cipher(const EVP_CIPHER* cipher, int idx)
     return 0;
 }
 
-static int test_bio_enc_aes_128_cbc(int idx)
+static int __cdecl test_bio_enc_aes_128_cbc(int idx)
 {
     return do_test_bio_cipher(EVP_aes_128_cbc(), idx);
 }
 
-static int test_bio_enc_aes_128_ctr(int idx)
+static int __cdecl test_bio_enc_aes_128_ctr(int idx)
 {
     return do_test_bio_cipher(EVP_aes_128_ctr(), idx);
 }
 
-static int test_bio_enc_aes_256_cfb(int idx)
+static int __cdecl test_bio_enc_aes_256_cfb(int idx)
 {
     return do_test_bio_cipher(EVP_aes_256_cfb(), idx);
 }
 
-static int test_bio_enc_aes_256_ofb(int idx)
+static int __cdecl test_bio_enc_aes_256_ofb(int idx)
 {
     return do_test_bio_cipher(EVP_aes_256_ofb(), idx);
 }
 
 # ifndef OPENSSL_NO_CHACHA
-static int test_bio_enc_chacha20(int idx)
+static int __cdecl test_bio_enc_chacha20(int idx)
 {
     return do_test_bio_cipher(EVP_chacha20(), idx);
 }
 
 #  ifndef OPENSSL_NO_POLY1305
-static int test_bio_enc_chacha20_poly1305(int idx)
+static int __cdecl test_bio_enc_chacha20_poly1305(int idx)
 {
     return do_test_bio_cipher(EVP_chacha20_poly1305(), idx);
 }
diff --git a/test/bio_memleak_test.c b/test/bio_memleak_test.c
index 383c82d156..3e3673afac 100644
--- a/test/bio_memleak_test.c
+++ b/test/bio_memleak_test.c
@@ -13,7 +13,7 @@
 
 #include "testutil.h"
 
-static int test_bio_memleak(void)
+static int __cdecl test_bio_memleak(void)
 {
     int ok = 0;
     BIO *bio;
@@ -40,7 +40,7 @@ finish:
     return ok;
 }
 
-static int test_bio_get_mem(void)
+static int __cdecl test_bio_get_mem(void)
 {
     int ok = 0;
     BIO *bio = NULL;
@@ -68,7 +68,7 @@ finish:
     return ok;
 }
 
-static int test_bio_new_mem_buf(void)
+static int __cdecl test_bio_new_mem_buf(void)
 {
     int ok = 0;
     BIO *bio;
@@ -103,7 +103,7 @@ finish:
     return ok;
 }
 
-static int test_bio_rdonly_mem_buf(void)
+static int __cdecl test_bio_rdonly_mem_buf(void)
 {
     int ok = 0;
     BIO *bio, *bio2 = NULL;
@@ -145,7 +145,7 @@ finish:
     return ok;
 }
 
-static int test_bio_rdwr_rdonly(void)
+static int __cdecl test_bio_rdwr_rdonly(void)
 {
     int ok = 0;
     BIO *bio = NULL;
@@ -181,7 +181,7 @@ finish:
     return ok;
 }
 
-static int test_bio_nonclear_rst(void)
+static int __cdecl test_bio_nonclear_rst(void)
 {
     int ok = 0;
     BIO *bio = NULL;
diff --git a/test/bioprinttest.c b/test/bioprinttest.c
index 680391ea9f..260ef736d6 100644
--- a/test/bioprinttest.c
+++ b/test/bioprinttest.c
@@ -128,7 +128,7 @@ static z_data zu_data[] = {
     { 0, "%zi", "0" },
 };
 
-static int test_zu(int i)
+static int __cdecl test_zu(int i)
 {
     char bio_buf[80];
     const z_data *data = &zu_data[i];
@@ -156,7 +156,7 @@ static j_data jf_data[] = {
     { 0x8000000000000000ULL, "%ji", "-9223372036854775808" },
 };
 
-static int test_j(int i)
+static int __cdecl test_j(int i)
 {
     const j_data *data = &jf_data[i];
     char bio_buf[80];
@@ -184,7 +184,7 @@ static pw pw_params[] = {
     { 4, "08" }
 };
 
-static int dofptest(int test, int sub, double val, const char *width, int prec)
+static int __cdecl dofptest(int test, int sub, double val, const char *width, int prec)
 {
     static const char *fspecs[] = {
         "e", "f", "g", "E", "G"
@@ -218,7 +218,7 @@ static int dofptest(int test, int sub, double val, const char *width, int prec)
     return ret;
 }
 
-static int test_fp(int i)
+static int __cdecl test_fp(int i)
 {
     int t = 0, r;
     const double frac = 2.0 / 3.0;
@@ -241,7 +241,7 @@ static int test_fp(int i)
     return r;
 }
 
-static int test_big(void)
+static int __cdecl test_big(void)
 {
     char buf[80];
 
diff --git a/test/bntest.c b/test/bntest.c
index 0bd9a06f72..b7f86df6f9 100644
--- a/test/bntest.c
+++ b/test/bntest.c
@@ -32,7 +32,7 @@
 
 typedef struct filetest_st {
     const char *name;
-    int (*func)(STANZA *s);
+    int (__cdecl *func)(STANZA *s);
 } FILETEST;
 
 typedef struct mpitest_st {
@@ -70,7 +70,7 @@ static const char *findattr(STANZA *s, const char *key)
 /*
  * Parse BIGNUM from sparse hex-strings, return |BN_hex2bn| result.
  */
-static int parse_bigBN(BIGNUM **out, const char *bn_strings[])
+static int __cdecl parse_bigBN(BIGNUM **out, const char *bn_strings[])
 {
     char *bigstring = glue_strings(bn_strings, NULL);
     int ret = BN_hex2bn(out, bigstring);
@@ -82,13 +82,13 @@ static int parse_bigBN(BIGNUM **out, const char *bn_strings[])
 /*
  * Parse BIGNUM, return number of bytes parsed.
  */
-static int parseBN(BIGNUM **out, const char *in)
+static int __cdecl parseBN(BIGNUM **out, const char *in)
 {
     *out = NULL;
     return BN_hex2bn(out, in);
 }
 
-static int parsedecBN(BIGNUM **out, const char *in)
+static int __cdecl parsedecBN(BIGNUM **out, const char *in)
 {
     *out = NULL;
     return BN_dec2bn(out, in);
@@ -111,7 +111,7 @@ static BIGNUM *getBN(STANZA *s, const char *attribute)
     return ret;
 }
 
-static int getint(STANZA *s, int *out, const char *attribute)
+static int __cdecl getint(STANZA *s, int *out, const char *attribute)
 {
     BIGNUM *ret;
     BN_ULONG word;
@@ -128,7 +128,7 @@ static int getint(STANZA *s, int *out, const char *attribute)
     return st;
 }
 
-static int equalBN(const char *op, const BIGNUM *expected, const BIGNUM *actual)
+static int __cdecl equalBN(const char *op, const BIGNUM *expected, const BIGNUM *actual)
 {
     if (BN_cmp(expected, actual) == 0)
         return 1;
@@ -141,7 +141,7 @@ static int equalBN(const char *op, const BIGNUM *expected, const BIGNUM *actual)
 /*
  * Return a "random" flag for if a BN should be negated.
  */
-static int rand_neg(void)
+static int __cdecl rand_neg(void)
 {
     static unsigned int neg = 0;
     static int sign[8] = { 0, 0, 0, 1, 1, 0, 1, 1 };
@@ -149,7 +149,7 @@ static int rand_neg(void)
     return sign[(neg++) % 8];
 }
 
-static int test_swap(void)
+static int __cdecl test_swap(void)
 {
     BIGNUM *a = NULL, *b = NULL, *c = NULL, *d = NULL;
     int top, cond, st = 0;
@@ -222,7 +222,7 @@ static int test_swap(void)
     return st;
 }
 
-static int test_sub(void)
+static int __cdecl test_sub(void)
 {
     BIGNUM *a = NULL, *b = NULL, *c = NULL;
     int i, st = 0;
@@ -259,7 +259,7 @@ static int test_sub(void)
     return st;
 }
 
-static int test_div_recip(void)
+static int __cdecl test_div_recip(void)
 {
     BIGNUM *a = NULL, *b = NULL, *c = NULL, *d = NULL, *e = NULL;
     BN_RECP_CTX *recp = NULL;
@@ -305,7 +305,7 @@ static int test_div_recip(void)
     return st;
 }
 
-static int test_mod(void)
+static int __cdecl test_mod(void)
 {
     BIGNUM *a = NULL, *b = NULL, *c = NULL, *d = NULL, *e = NULL;
     int st = 0, i;
@@ -384,7 +384,7 @@ static const char *bn2strings[] = {
  * Test constant-time modular exponentiation with 1024-bit inputs, which on
  * x86_64 cause a different code branch to be taken.
  */
-static int test_modexp_mont5(void)
+static int __cdecl test_modexp_mont5(void)
 {
     BIGNUM *a = NULL, *p = NULL, *m = NULL, *d = NULL, *e = NULL;
     BIGNUM *b = NULL, *n = NULL, *c = NULL;
@@ -602,7 +602,7 @@ static int test_modexp_mont5(void)
 }
 
 #ifndef OPENSSL_NO_EC2M
-static int test_gf2m_add(void)
+static int __cdecl test_gf2m_add(void)
 {
     BIGNUM *a = NULL, *b = NULL, *c = NULL;
     int i, st = 0;
@@ -636,7 +636,7 @@ static int test_gf2m_add(void)
     return st;
 }
 
-static int test_gf2m_mod(void)
+static int __cdecl test_gf2m_mod(void)
 {
     BIGNUM *a = NULL, *b[2] = {NULL,NULL}, *c = NULL, *d = NULL, *e = NULL;
     int i, j, st = 0;
@@ -676,7 +676,7 @@ static int test_gf2m_mod(void)
     return st;
 }
 
-static int test_gf2m_mul(void)
+static int __cdecl test_gf2m_mul(void)
 {
     BIGNUM *a, *b[2] = {NULL, NULL}, *c = NULL, *d = NULL;
     BIGNUM *e = NULL, *f = NULL, *g = NULL, *h = NULL;
@@ -729,7 +729,7 @@ static int test_gf2m_mul(void)
     return st;
 }
 
-static int test_gf2m_sqr(void)
+static int __cdecl test_gf2m_sqr(void)
 {
     BIGNUM *a = NULL, *b[2] = {NULL,NULL}, *c = NULL, *d = NULL;
     int i, j, st = 0;
@@ -768,7 +768,7 @@ static int test_gf2m_sqr(void)
     return st;
 }
 
-static int test_gf2m_modinv(void)
+static int __cdecl test_gf2m_modinv(void)
 {
     BIGNUM *a = NULL, *b[2] = {NULL,NULL}, *c = NULL, *d = NULL;
     int i, j, st = 0;
@@ -805,7 +805,7 @@ static int test_gf2m_modinv(void)
     return st;
 }
 
-static int test_gf2m_moddiv(void)
+static int __cdecl test_gf2m_moddiv(void)
 {
     BIGNUM *a = NULL, *b[2] = {NULL,NULL}, *c = NULL, *d = NULL;
     BIGNUM *e = NULL, *f = NULL;
@@ -849,7 +849,7 @@ static int test_gf2m_moddiv(void)
     return st;
 }
 
-static int test_gf2m_modexp(void)
+static int __cdecl test_gf2m_modexp(void)
 {
     BIGNUM *a = NULL, *b[2] = {NULL,NULL}, *c = NULL, *d = NULL;
     BIGNUM *e = NULL, *f = NULL;
@@ -897,7 +897,7 @@ static int test_gf2m_modexp(void)
     return st;
 }
 
-static int test_gf2m_modsqrt(void)
+static int __cdecl test_gf2m_modsqrt(void)
 {
     BIGNUM *a = NULL, *b[2] = {NULL,NULL}, *c = NULL, *d = NULL;
     BIGNUM *e = NULL, *f = NULL;
@@ -942,7 +942,7 @@ static int test_gf2m_modsqrt(void)
     return st;
 }
 
-static int test_gf2m_modsolvequad(void)
+static int __cdecl test_gf2m_modsolvequad(void)
 {
     BIGNUM *a = NULL, *b[2] = {NULL,NULL}, *c = NULL, *d = NULL;
     BIGNUM *e = NULL;
@@ -996,7 +996,7 @@ static int test_gf2m_modsolvequad(void)
 }
 #endif
 
-static int test_kronecker(void)
+static int __cdecl test_kronecker(void)
 {
     BIGNUM *a = NULL, *b = NULL, *r = NULL, *t = NULL;
     int i, legendre, kronecker, st = 0;
@@ -1074,7 +1074,7 @@ static int test_kronecker(void)
     return st;
 }
 
-static int file_sum(STANZA *s)
+static int __cdecl file_sum(STANZA *s)
 {
     BIGNUM *a = NULL, *b = NULL, *sum = NULL, *ret = NULL;
     BN_ULONG b_word;
@@ -1183,7 +1183,7 @@ static int file_sum(STANZA *s)
     return st;
 }
 
-static int file_lshift1(STANZA *s)
+static int __cdecl file_lshift1(STANZA *s)
 {
     BIGNUM *a = NULL, *lshift1 = NULL, *zero = NULL, *ret = NULL;
     BIGNUM *two = NULL, *remainder = NULL;
@@ -1235,7 +1235,7 @@ static int file_lshift1(STANZA *s)
     return st;
 }
 
-static int file_lshift(STANZA *s)
+static int __cdecl file_lshift(STANZA *s)
 {
     BIGNUM *a = NULL, *lshift = NULL, *ret = NULL;
     int n = 0, st = 0;
@@ -1260,7 +1260,7 @@ static int file_lshift(STANZA *s)
     return st;
 }
 
-static int file_rshift(STANZA *s)
+static int __cdecl file_rshift(STANZA *s)
 {
     BIGNUM *a = NULL, *rshift = NULL, *ret = NULL;
     int n = 0, st = 0;
@@ -1290,7 +1290,7 @@ static int file_rshift(STANZA *s)
     return st;
 }
 
-static int file_square(STANZA *s)
+static int __cdecl file_square(STANZA *s)
 {
     BIGNUM *a = NULL, *square = NULL, *zero = NULL, *ret = NULL;
     BIGNUM *remainder = NULL, *tmp = NULL;
@@ -1350,7 +1350,7 @@ static int file_square(STANZA *s)
     return st;
 }
 
-static int file_product(STANZA *s)
+static int __cdecl file_product(STANZA *s)
 {
     BIGNUM *a = NULL, *b = NULL, *product = NULL, *ret = NULL;
     BIGNUM *remainder = NULL, *zero = NULL;
@@ -1387,7 +1387,7 @@ static int file_product(STANZA *s)
     return st;
 }
 
-static int file_quotient(STANZA *s)
+static int __cdecl file_quotient(STANZA *s)
 {
     BIGNUM *a = NULL, *b = NULL, *quotient = NULL, *remainder = NULL;
     BIGNUM *ret = NULL, *ret2 = NULL, *nnmod = NULL;
@@ -1471,7 +1471,7 @@ static int file_quotient(STANZA *s)
     return st;
 }
 
-static int file_modmul(STANZA *s)
+static int __cdecl file_modmul(STANZA *s)
 {
     BIGNUM *a = NULL, *b = NULL, *m = NULL, *mod_mul = NULL, *ret = NULL;
     int st = 0;
@@ -1523,7 +1523,7 @@ static int file_modmul(STANZA *s)
     return st;
 }
 
-static int file_modexp(STANZA *s)
+static int __cdecl file_modexp(STANZA *s)
 {
     BIGNUM *a = NULL, *e = NULL, *m = NULL, *mod_exp = NULL, *ret = NULL;
     BIGNUM *b = NULL, *c = NULL, *d = NULL;
@@ -1578,7 +1578,7 @@ static int file_modexp(STANZA *s)
     return st;
 }
 
-static int file_exp(STANZA *s)
+static int __cdecl file_exp(STANZA *s)
 {
     BIGNUM *a = NULL, *e = NULL, *exp = NULL, *ret = NULL;
     int st = 0;
@@ -1602,7 +1602,7 @@ static int file_exp(STANZA *s)
     return st;
 }
 
-static int file_modsqrt(STANZA *s)
+static int __cdecl file_modsqrt(STANZA *s)
 {
     BIGNUM *a = NULL, *p = NULL, *mod_sqrt = NULL, *ret = NULL, *ret2 = NULL;
     int st = 0;
@@ -1634,7 +1634,7 @@ static int file_modsqrt(STANZA *s)
     return st;
 }
 
-static int test_bn2padded(void)
+static int __cdecl test_bn2padded(void)
 {
 #if HAVE_BN_PADDED
     uint8_t zeros[256], out[256], reference[128];
@@ -1695,7 +1695,7 @@ static int test_bn2padded(void)
 #endif
 }
 
-static int test_dec2bn(void)
+static int __cdecl test_dec2bn(void)
 {
     BIGNUM *bn = NULL;
     int st = 0;
@@ -1764,7 +1764,7 @@ static int test_dec2bn(void)
     return st;
 }
 
-static int test_hex2bn(void)
+static int __cdecl test_hex2bn(void)
 {
     BIGNUM *bn = NULL;
     int st = 0;
@@ -1830,7 +1830,7 @@ static int test_hex2bn(void)
     return st;
 }
 
-static int test_asc2bn(void)
+static int __cdecl test_asc2bn(void)
 {
     BIGNUM *bn = NULL;
     int st = 0;
@@ -1893,7 +1893,7 @@ static const MPITEST kMPITests[] = {
     {"-256", "\x00\x00\x00\x02\x81\x00", 6},
 };
 
-static int test_mpi(int i)
+static int __cdecl test_mpi(int i)
 {
     uint8_t scratch[8];
     const MPITEST *test = &kMPITests[i];
@@ -1928,7 +1928,7 @@ static int test_mpi(int i)
     return st;
 }
 
-static int test_rand(void)
+static int __cdecl test_rand(void)
 {
     BIGNUM *bn = NULL;
     int st = 0;
@@ -1954,7 +1954,7 @@ static int test_rand(void)
     return st;
 }
 
-static int test_negzero(void)
+static int __cdecl test_negzero(void)
 {
     BIGNUM *a = NULL, *b = NULL, *c = NULL, *d = NULL;
     BIGNUM *numerator = NULL, *denominator = NULL;
@@ -2023,7 +2023,7 @@ static int test_negzero(void)
     return st;
 }
 
-static int test_badmod(void)
+static int __cdecl test_badmod(void)
 {
     BIGNUM *a = NULL, *b = NULL, *zero = NULL;
     BN_MONT_CTX *mont = NULL;
@@ -2089,7 +2089,7 @@ static int test_badmod(void)
     return st;
 }
 
-static int test_expmodzero(void)
+static int __cdecl test_expmodzero(void)
 {
     BIGNUM *a = NULL, *r = NULL, *zero = NULL;
     int st = 0;
@@ -2122,7 +2122,7 @@ static int test_expmodzero(void)
     return st;
 }
 
-static int test_expmodone(void)
+static int __cdecl test_expmodone(void)
 {
     int ret = 0, i;
     BIGNUM *r = BN_new();
@@ -2169,7 +2169,7 @@ static int test_expmodone(void)
     return ret;
 }
 
-static int test_smallprime(int kBits)
+static int __cdecl test_smallprime(int kBits)
 {
     BIGNUM *r;
     int st = 0;
@@ -2194,7 +2194,7 @@ static int test_smallprime(int kBits)
     return st;
 }
 
-static int test_smallsafeprime(int kBits)
+static int __cdecl test_smallsafeprime(int kBits)
 {
     BIGNUM *r;
     int st = 0;
@@ -2221,7 +2221,7 @@ static int test_smallsafeprime(int kBits)
 
 static int primes[] = { 2, 3, 5, 7, 17863 };
 
-static int test_is_prime(int i)
+static int __cdecl test_is_prime(int i)
 {
     int ret = 0;
     BIGNUM *r = NULL;
@@ -2245,7 +2245,7 @@ static int test_is_prime(int i)
 
 static int not_primes[] = { -1, 0, 1, 4 };
 
-static int test_not_prime(int i)
+static int __cdecl test_not_prime(int i)
 {
     int ret = 0;
     BIGNUM *r = NULL;
@@ -2266,7 +2266,7 @@ static int test_not_prime(int i)
     return ret;
 }
 
-static int test_ctx_set_ct_flag(BN_CTX *c)
+static int __cdecl test_ctx_set_ct_flag(BN_CTX *c)
 {
     int st = 0;
     size_t i;
@@ -2286,7 +2286,7 @@ static int test_ctx_set_ct_flag(BN_CTX *c)
     return st;
 }
 
-static int test_ctx_check_ct_flag(BN_CTX *c)
+static int __cdecl test_ctx_check_ct_flag(BN_CTX *c)
 {
     int st = 0;
     size_t i;
@@ -2306,7 +2306,7 @@ static int test_ctx_check_ct_flag(BN_CTX *c)
     return st;
 }
 
-static int test_ctx_consttime_flag(void)
+static int __cdecl test_ctx_consttime_flag(void)
 {
     /*-
      * The constant-time flag should not "leak" among BN_CTX frames:
@@ -2352,7 +2352,7 @@ static int test_ctx_consttime_flag(void)
     return st;
 }
 
-static int file_test_run(STANZA *s)
+static int __cdecl file_test_run(STANZA *s)
 {
     static const FILETEST filetests[] = {
         {"Sum", file_sum},
@@ -2384,7 +2384,7 @@ static int file_test_run(STANZA *s)
     return 0;
 }
 
-static int run_file_tests(int i)
+static int __cdecl run_file_tests(int i)
 {
     STANZA *s = NULL;
     char *testfile = test_get_argument(i);
diff --git a/test/casttest.c b/test/casttest.c
index 179d7d56d3..20aabf54fe 100644
--- a/test/casttest.c
+++ b/test/casttest.c
@@ -54,7 +54,7 @@ static unsigned char c_b[16] = {
     0x80, 0xAC, 0x05, 0xB8, 0xE8, 0x3D, 0x69, 0x6E
 };
 
-static int cast_test_vector(int z)
+static int __cdecl cast_test_vector(int z)
 {
     int testresult = 1;
     CAST_KEY key;
@@ -75,7 +75,7 @@ static int cast_test_vector(int z)
     return testresult;
 }
 
-static int cast_test_iterations(void)
+static int __cdecl cast_test_iterations(void)
 {
     long l;
     int testresult = 1;
diff --git a/test/chacha_internal_test.c b/test/chacha_internal_test.c
index be44012187..5aa000c151 100644
--- a/test/chacha_internal_test.c
+++ b/test/chacha_internal_test.c
@@ -157,7 +157,7 @@ static const unsigned char ref[] = {
     0xd3, 0x3e, 0xa2, 0x15, 0x5d, 0x10, 0x5d, 0x4e
 };
 
-static int test_cha_cha_internal(int n)
+static int __cdecl test_cha_cha_internal(int n)
 {
     unsigned char buf[sizeof(ref)];
     unsigned int i = n + 1, j;
diff --git a/test/cipher_overhead_test.c b/test/cipher_overhead_test.c
index f8c6fd738e..e92b91959c 100644
--- a/test/cipher_overhead_test.c
+++ b/test/cipher_overhead_test.c
@@ -21,7 +21,7 @@
 # pragma names restore
 #endif
 
-static int cipher_overhead(void)
+static int __cdecl cipher_overhead(void)
 {
     int ret = 1, i, n = ssl3_num_ciphers();
     const SSL_CIPHER *ciph;
diff --git a/test/cipherbytes_test.c b/test/cipherbytes_test.c
index 6418b42408..fc2f75e391 100644
--- a/test/cipherbytes_test.c
+++ b/test/cipherbytes_test.c
@@ -24,7 +24,7 @@
 static SSL_CTX *ctx;
 static SSL *s;
 
-static int test_empty(void)
+static int __cdecl test_empty(void)
 {
     STACK_OF(SSL_CIPHER) *sk = NULL, *scsv = NULL;
     const unsigned char bytes[] = {0x00};
@@ -42,7 +42,7 @@ err:
     return ret;
 }
 
-static int test_unsupported(void)
+static int __cdecl test_unsupported(void)
 {
     STACK_OF(SSL_CIPHER) *sk, *scsv;
     /* ECDH-RSA-AES256 (unsupported), ECDHE-ECDSA-AES128, <unassigned> */
@@ -66,7 +66,7 @@ err:
     return ret;
 }
 
-static int test_v2(void)
+static int __cdecl test_v2(void)
 {
     STACK_OF(SSL_CIPHER) *sk, *scsv;
     /* ECDHE-ECDSA-AES256GCM, SSL2_RC4_1238_WITH_MD5,
@@ -96,7 +96,7 @@ err:
     return ret;
 }
 
-static int test_v3(void)
+static int __cdecl test_v3(void)
 {
     STACK_OF(SSL_CIPHER) *sk = NULL, *scsv = NULL;
     /* ECDHE-ECDSA-AES256GCM, ECDHE-ECDSA-CHACHAPOLY, DHE-RSA-AES256GCM,
diff --git a/test/cipherlist_test.c b/test/cipherlist_test.c
index 8ee491091d..e605292858 100644
--- a/test/cipherlist_test.c
+++ b/test/cipherlist_test.c
@@ -145,7 +145,7 @@ static const uint32_t default_ciphers_in_order[] = {
 #endif
 };
 
-static int test_default_cipherlist(SSL_CTX *ctx)
+static int __cdecl test_default_cipherlist(SSL_CTX *ctx)
 {
     STACK_OF(SSL_CIPHER) *ciphers = NULL;
     SSL *ssl = NULL;
@@ -181,7 +181,7 @@ static int test_default_cipherlist(SSL_CTX *ctx)
     return ret;
 }
 
-static int execute_test(CIPHERLIST_TEST_FIXTURE *fixture)
+static int __cdecl execute_test(CIPHERLIST_TEST_FIXTURE *fixture)
 {
     return fixture != NULL
         && test_default_cipherlist(fixture->server)
@@ -194,7 +194,7 @@ static int execute_test(CIPHERLIST_TEST_FIXTURE *fixture)
 #define EXECUTE_CIPHERLIST_TEST() \
     EXECUTE_TEST(execute_test, tear_down)
 
-static int test_default_cipherlist_implicit(void)
+static int __cdecl test_default_cipherlist_implicit(void)
 {
     SETUP_CIPHERLIST_TEST_FIXTURE();
     if (fixture == NULL)
@@ -203,7 +203,7 @@ static int test_default_cipherlist_implicit(void)
     return result;
 }
 
-static int test_default_cipherlist_explicit(void)
+static int __cdecl test_default_cipherlist_explicit(void)
 {
     SETUP_CIPHERLIST_TEST_FIXTURE();
     if (fixture == NULL)
@@ -216,7 +216,7 @@ static int test_default_cipherlist_explicit(void)
 }
 
 /* SSL_CTX_set_cipher_list() should fail if it clears all TLSv1.2 ciphers. */
-static int test_default_cipherlist_clear(void)
+static int __cdecl test_default_cipherlist_clear(void)
 {
     SETUP_CIPHERLIST_TEST_FIXTURE();
     SSL *s = NULL;
diff --git a/test/ciphername_test.c b/test/ciphername_test.c
index 303e28f50f..754bf3fbff 100644
--- a/test/ciphername_test.c
+++ b/test/ciphername_test.c
@@ -376,7 +376,7 @@ static const char *get_std_name_by_id(int id)
     return NULL;
 }
 
-static int test_cipher_name(void)
+static int __cdecl test_cipher_name(void)
 {
     SSL_CTX *ctx = NULL;
     SSL *ssl = NULL;
diff --git a/test/clienthellotest.c b/test/clienthellotest.c
index 862ca9ff6c..a6751a5beb 100644
--- a/test/clienthellotest.c
+++ b/test/clienthellotest.c
@@ -50,7 +50,7 @@ static const char alpn_prots[] =
     "0123456789012345678901234567890123456789012345678901234567890123456789"
     "01234567890123456789";
 
-static int test_client_hello(int currtest)
+static int __cdecl test_client_hello(int currtest)
 {
     SSL_CTX *ctx;
     SSL *con = NULL;
diff --git a/test/cmsapitest.c b/test/cmsapitest.c
index a79ae8c043..38255f30ba 100644
--- a/test/cmsapitest.c
+++ b/test/cmsapitest.c
@@ -10,7 +10,7 @@
 static X509 *cert = NULL;
 static EVP_PKEY *privkey = NULL;
 
-static int test_encrypt_decrypt(void)
+static int __cdecl test_encrypt_decrypt(void)
 {
     int testresult = 0;
     STACK_OF(X509) *certstack = sk_X509_new_null();
diff --git a/test/conf_include_test.c b/test/conf_include_test.c
index ff0319a1c7..8900c32a90 100644
--- a/test/conf_include_test.c
+++ b/test/conf_include_test.c
@@ -35,7 +35,7 @@
 #endif
 
 /* changes path to that of the filename */
-static int change_path(const char *file)
+static int __cdecl change_path(const char *file)
 {
     char *s = OPENSSL_strdup(file);
     char *p = s;
@@ -66,7 +66,7 @@ static CONF *conf;
 static BIO *in;
 static int expect_failure = 0;
 
-static int test_load_config(void)
+static int __cdecl test_load_config(void)
 {
     long errline;
     long val;
@@ -123,7 +123,7 @@ static int test_load_config(void)
     return 1;
 }
 
-static int test_check_null_numbers(void)
+static int __cdecl test_check_null_numbers(void)
 {
 #if defined(_BSD_SOURCE) \
         || (defined(_POSIX_C_SOURCE) && _POSIX_C_SOURCE >= 200112L) \
@@ -153,7 +153,7 @@ static int test_check_null_numbers(void)
     return 1;
 }
 
-static int test_check_overflow(void)
+static int __cdecl test_check_overflow(void)
 {
 #if defined(_BSD_SOURCE) \
         || (defined(_POSIX_C_SOURCE) && _POSIX_C_SOURCE >= 200112L) \
diff --git a/test/constant_time_test.c b/test/constant_time_test.c
index e5e3e497c0..d6d58a3ef4 100644
--- a/test/constant_time_test.c
+++ b/test/constant_time_test.c
@@ -58,7 +58,7 @@ static uint64_t test_values_64[] = {
     UINT64_MAX / 2 + 1, UINT64_MAX - 1, UINT64_MAX
 };
 
-static int test_binary_op(unsigned int (*op) (unsigned int a, unsigned int b),
+static int __cdecl test_binary_op(unsigned int (__cdecl *op) (unsigned int a, unsigned int b),
                           const char *op_name, unsigned int a, unsigned int b,
                           int is_true)
 {
@@ -69,8 +69,8 @@ static int test_binary_op(unsigned int (*op) (unsigned int a, unsigned int b),
     return 1;
 }
 
-static int test_binary_op_8(unsigned
-                            char (*op) (unsigned int a, unsigned int b),
+static int __cdecl test_binary_op_8(unsigned
+                            char (__cdecl *op) (unsigned int a, unsigned int b),
                             const char *op_name, unsigned int a,
                             unsigned int b, int is_true)
 {
@@ -81,7 +81,7 @@ static int test_binary_op_8(unsigned
     return 1;
 }
 
-static int test_binary_op_s(size_t (*op) (size_t a, size_t b),
+static int __cdecl test_binary_op_s(size_t (__cdecl *op) (size_t a, size_t b),
                             const char *op_name, size_t a, size_t b,
                             int is_true)
 {
@@ -92,7 +92,7 @@ static int test_binary_op_s(size_t (*op) (size_t a, size_t b),
     return 1;
 }
 
-static int test_binary_op_64(uint64_t (*op)(uint64_t a, uint64_t b),
+static int __cdecl test_binary_op_64(uint64_t (__cdecl *op)(uint64_t a, uint64_t b),
                              const char *op_name, uint64_t a, uint64_t b,
                              int is_true)
 {
@@ -110,7 +110,7 @@ static int test_binary_op_64(uint64_t (*op)(uint64_t a, uint64_t b),
     return 1;
 }
 
-static int test_is_zero(int i)
+static int __cdecl test_is_zero(int i)
 {
     unsigned int a = test_values[i];
 
@@ -121,7 +121,7 @@ static int test_is_zero(int i)
     return 1;
 }
 
-static int test_is_zero_8(int i)
+static int __cdecl test_is_zero_8(int i)
 {
     unsigned int a = test_values_8[i];
 
@@ -132,7 +132,7 @@ static int test_is_zero_8(int i)
     return 1;
 }
 
-static int test_is_zero_32(int i)
+static int __cdecl test_is_zero_32(int i)
 {
     uint32_t a = test_values_32[i];
 
@@ -143,7 +143,7 @@ static int test_is_zero_32(int i)
     return 1;
 }
 
-static int test_is_zero_s(int i)
+static int __cdecl test_is_zero_s(int i)
 {
     size_t a = test_values_s[i];
 
@@ -154,7 +154,7 @@ static int test_is_zero_s(int i)
     return 1;
 }
 
-static int test_select(unsigned int a, unsigned int b)
+static int __cdecl test_select(unsigned int a, unsigned int b)
 {
     if (!TEST_uint_eq(constant_time_select(CONSTTIME_TRUE, a, b), a))
         return 0;
@@ -163,7 +163,7 @@ static int test_select(unsigned int a, unsigned int b)
     return 1;
 }
 
-static int test_select_8(unsigned char a, unsigned char b)
+static int __cdecl test_select_8(unsigned char a, unsigned char b)
 {
     if (!TEST_uint_eq(constant_time_select_8(CONSTTIME_TRUE_8, a, b), a))
         return 0;
@@ -172,7 +172,7 @@ static int test_select_8(unsigned char a, unsigned char b)
     return 1;
 }
 
-static int test_select_32(uint32_t a, uint32_t b)
+static int __cdecl test_select_32(uint32_t a, uint32_t b)
 {
     if (!TEST_true(constant_time_select_32(CONSTTIME_TRUE_32, a, b) == a))
         return 0;
@@ -181,7 +181,7 @@ static int test_select_32(uint32_t a, uint32_t b)
     return 1;
 }
 
-static int test_select_s(size_t a, size_t b)
+static int __cdecl test_select_s(size_t a, size_t b)
 {
     if (!TEST_uint_eq(constant_time_select_s(CONSTTIME_TRUE_S, a, b), a))
         return 0;
@@ -190,7 +190,7 @@ static int test_select_s(size_t a, size_t b)
     return 1;
 }
 
-static int test_select_64(uint64_t a, uint64_t b)
+static int __cdecl test_select_64(uint64_t a, uint64_t b)
 {
     uint64_t selected = constant_time_select_64(CONSTTIME_TRUE_64, a, b);
 
@@ -207,7 +207,7 @@ static int test_select_64(uint64_t a, uint64_t b)
     return 1;
 }
 
-static int test_select_int(int a, int b)
+static int __cdecl test_select_int(int a, int b)
 {
     if (!TEST_int_eq(constant_time_select_int(CONSTTIME_TRUE, a, b), a))
         return 0;
@@ -216,7 +216,7 @@ static int test_select_int(int a, int b)
     return 1;
 }
 
-static int test_eq_int_8(int a, int b)
+static int __cdecl test_eq_int_8(int a, int b)
 {
     if (a == b && !TEST_int_eq(constant_time_eq_int_8(a, b), CONSTTIME_TRUE_8))
         return 0;
@@ -225,7 +225,7 @@ static int test_eq_int_8(int a, int b)
     return 1;
 }
 
-static int test_eq_s(size_t a, size_t b)
+static int __cdecl test_eq_s(size_t a, size_t b)
 {
     if (a == b && !TEST_size_t_eq(constant_time_eq_s(a, b), CONSTTIME_TRUE_S))
         return 0;
@@ -234,7 +234,7 @@ static int test_eq_s(size_t a, size_t b)
     return 1;
 }
 
-static int test_eq_int(int a, int b)
+static int __cdecl test_eq_int(int a, int b)
 {
     if (a == b && !TEST_uint_eq(constant_time_eq_int(a, b), CONSTTIME_TRUE))
         return 0;
@@ -243,14 +243,14 @@ static int test_eq_int(int a, int b)
     return 1;
 }
 
-static int test_sizeofs(void)
+static int __cdecl test_sizeofs(void)
 {
     if (!TEST_uint_eq(OSSL_NELEM(test_values), OSSL_NELEM(test_values_s)))
         return 0;
     return 1;
 }
 
-static int test_binops(int i)
+static int __cdecl test_binops(int i)
 {
     unsigned int a = test_values[i];
     int j;
@@ -277,7 +277,7 @@ static int test_binops(int i)
     return ret;
 }
 
-static int test_binops_8(int i)
+static int __cdecl test_binops_8(int i)
 {
     unsigned int a = test_values_8[i];
     int j;
@@ -303,7 +303,7 @@ static int test_binops_8(int i)
     return ret;
 }
 
-static int test_binops_s(int i)
+static int __cdecl test_binops_s(int i)
 {
     size_t a = test_values_s[i];
     int j;
@@ -331,7 +331,7 @@ static int test_binops_s(int i)
     return ret;
 }
 
-static int test_signed(int i)
+static int __cdecl test_signed(int i)
 {
     int c = signed_test_values[i];
     unsigned int j;
@@ -348,7 +348,7 @@ static int test_signed(int i)
     return ret;
 }
 
-static int test_8values(int i)
+static int __cdecl test_8values(int i)
 {
     unsigned char e = test_values_8[i];
     unsigned int j;
@@ -363,7 +363,7 @@ static int test_8values(int i)
     return ret;
 }
 
-static int test_32values(int i)
+static int __cdecl test_32values(int i)
 {
     uint32_t e = test_values_32[i];
     size_t j;
@@ -378,7 +378,7 @@ static int test_32values(int i)
     return ret;
 }
 
-static int test_64values(int i)
+static int __cdecl test_64values(int i)
 {
     uint64_t g = test_values_64[i];
     int j, ret = 1;
diff --git a/test/crltest.c b/test/crltest.c
index fe52282112..9d42091af0 100644
--- a/test/crltest.c
+++ b/test/crltest.c
@@ -229,7 +229,7 @@ static X509 *X509_from_strings(const char **pem)
  * also free'd before returning, which is kinda yucky but convenient.
  * Returns a value from X509_V_ERR_xxx or X509_V_OK.
  */
-static int verify(X509 *leaf, X509 *root, STACK_OF(X509_CRL) *crls,
+static int __cdecl verify(X509 *leaf, X509 *root, STACK_OF(X509_CRL) *crls,
                   unsigned long flags)
 {
     X509_STORE_CTX *ctx = X509_STORE_CTX_new();
@@ -290,7 +290,7 @@ static STACK_OF(X509_CRL) *make_CRL_stack(X509_CRL *x1, X509_CRL *x2)
     return sk;
 }
 
-static int test_basic_crl(void)
+static int __cdecl test_basic_crl(void)
 {
     X509_CRL *basic_crl = CRL_from_strings(kBasicCRL);
     X509_CRL *revoked_crl = CRL_from_strings(kRevokedCRL);
@@ -309,14 +309,14 @@ static int test_basic_crl(void)
     return r;
 }
 
-static int test_no_crl(void)
+static int __cdecl test_no_crl(void)
 {
     return TEST_int_eq(verify(test_leaf, test_root, NULL,
                               X509_V_FLAG_CRL_CHECK),
                        X509_V_ERR_UNABLE_TO_GET_CRL);
 }
 
-static int test_bad_issuer_crl(void)
+static int __cdecl test_bad_issuer_crl(void)
 {
     X509_CRL *bad_issuer_crl = CRL_from_strings(kBadIssuerCRL);
     int r;
@@ -330,7 +330,7 @@ static int test_bad_issuer_crl(void)
     return r;
 }
 
-static int test_known_critical_crl(void)
+static int __cdecl test_known_critical_crl(void)
 {
     X509_CRL *known_critical_crl = CRL_from_strings(kKnownCriticalCRL);
     int r;
@@ -343,7 +343,7 @@ static int test_known_critical_crl(void)
     return r;
 }
 
-static int test_unknown_critical_crl(int n)
+static int __cdecl test_unknown_critical_crl(int n)
 {
     X509_CRL *unknown_critical_crl = CRL_from_strings(unknown_critical_crls[n]);
     int r;
@@ -357,7 +357,7 @@ static int test_unknown_critical_crl(int n)
     return r;
 }
 
-static int test_reuse_crl(void)
+static int __cdecl test_reuse_crl(void)
 {
     X509_CRL *reused_crl = CRL_from_strings(kBasicCRL);
     char *p;
diff --git a/test/ct_test.c b/test/ct_test.c
index 78d11ca98c..eb4ae5486b 100644
--- a/test/ct_test.c
+++ b/test/ct_test.c
@@ -104,7 +104,7 @@ static X509 *load_pem_cert(const char *dir, const char *file)
     return cert;
 }
 
-static int read_text_file(const char *dir, const char *file,
+static int __cdecl read_text_file(const char *dir, const char *file,
                           char *buffer, int buffer_length)
 {
     int len = -1;
@@ -122,7 +122,7 @@ static int read_text_file(const char *dir, const char *file,
     return len;
 }
 
-static int compare_sct_list_printout(STACK_OF(SCT) *sct,
+static int __cdecl compare_sct_list_printout(STACK_OF(SCT) *sct,
                                      const char *expected_output)
 {
     BIO *text_buffer = NULL;
@@ -148,7 +148,7 @@ end:
     return result;
 }
 
-static int compare_extension_printout(X509_EXTENSION *extension,
+static int __cdecl compare_extension_printout(X509_EXTENSION *extension,
                                       const char *expected_output)
 {
     BIO *text_buffer = NULL;
@@ -175,7 +175,7 @@ end:
     return result;
 }
 
-static int assert_validity(CT_TEST_FIXTURE *fixture, STACK_OF(SCT) *scts,
+static int __cdecl assert_validity(CT_TEST_FIXTURE *fixture, STACK_OF(SCT) *scts,
                            CT_POLICY_EVAL_CTX *policy_ctx)
 {
     int invalid_sct_count = 0;
@@ -216,7 +216,7 @@ static int assert_validity(CT_TEST_FIXTURE *fixture, STACK_OF(SCT) *scts,
     return 1;
 }
 
-static int execute_cert_test(CT_TEST_FIXTURE *fixture)
+static int __cdecl execute_cert_test(CT_TEST_FIXTURE *fixture)
 {
     int success = 0;
     X509 *cert = NULL, *issuer = NULL;
@@ -328,7 +328,7 @@ end:
 # define SETUP_CT_TEST_FIXTURE() SETUP_TEST_FIXTURE(CT_TEST_FIXTURE, set_up)
 # define EXECUTE_CT_TEST() EXECUTE_TEST(execute_cert_test, tear_down)
 
-static int test_no_scts_in_certificate(void)
+static int __cdecl test_no_scts_in_certificate(void)
 {
     SETUP_CT_TEST_FIXTURE();
     if (fixture == NULL)
@@ -341,7 +341,7 @@ static int test_no_scts_in_certificate(void)
     return result;
 }
 
-static int test_one_sct_in_certificate(void)
+static int __cdecl test_one_sct_in_certificate(void)
 {
     SETUP_CT_TEST_FIXTURE();
     if (fixture == NULL)
@@ -356,7 +356,7 @@ static int test_one_sct_in_certificate(void)
     return result;
 }
 
-static int test_multiple_scts_in_certificate(void)
+static int __cdecl test_multiple_scts_in_certificate(void)
 {
     SETUP_CT_TEST_FIXTURE();
     if (fixture == NULL)
@@ -371,7 +371,7 @@ static int test_multiple_scts_in_certificate(void)
     return result;
 }
 
-static int test_verify_one_sct(void)
+static int __cdecl test_verify_one_sct(void)
 {
     SETUP_CT_TEST_FIXTURE();
     if (fixture == NULL)
@@ -385,7 +385,7 @@ static int test_verify_one_sct(void)
     return result;
 }
 
-static int test_verify_multiple_scts(void)
+static int __cdecl test_verify_multiple_scts(void)
 {
     SETUP_CT_TEST_FIXTURE();
     if (fixture == NULL)
@@ -399,7 +399,7 @@ static int test_verify_multiple_scts(void)
     return result;
 }
 
-static int test_verify_fails_for_future_sct(void)
+static int __cdecl test_verify_fails_for_future_sct(void)
 {
     SETUP_CT_TEST_FIXTURE();
     if (fixture == NULL)
@@ -415,7 +415,7 @@ static int test_verify_fails_for_future_sct(void)
     return result;
 }
 
-static int test_decode_tls_sct(void)
+static int __cdecl test_decode_tls_sct(void)
 {
     const unsigned char tls_sct_list[] = "\x00\x78" /* length of list */
         "\x00\x76"
@@ -446,7 +446,7 @@ static int test_decode_tls_sct(void)
     return result;
 }
 
-static int test_encode_tls_sct(void)
+static int __cdecl test_encode_tls_sct(void)
 {
     const char log_id[] = "3xwuwRUAlFJHqWFoMl3cXHlZ6PfG04j8AC4LvT9012Q=";
     const uint64_t timestamp = 1;
@@ -477,7 +477,7 @@ static int test_encode_tls_sct(void)
  * Tests that the CT_POLICY_EVAL_CTX default time is approximately now.
  * Allow +-10 minutes, as it may compensate for clock skew.
  */
-static int test_default_ct_policy_eval_ctx_time_is_now(void)
+static int __cdecl test_default_ct_policy_eval_ctx_time_is_now(void)
 {
     int success = 0;
     CT_POLICY_EVAL_CTX *ct_policy_ctx = CT_POLICY_EVAL_CTX_new();
@@ -495,7 +495,7 @@ end:
     return success;
 }
 
-static int test_ctlog_from_base64(void)
+static int __cdecl test_ctlog_from_base64(void)
 {
     CTLOG *ctlogp = NULL;
     const char notb64[] = "\01\02\03\04";
diff --git a/test/ctype_internal_test.c b/test/ctype_internal_test.c
index a4613031fe..d2eaa86018 100644
--- a/test/ctype_internal_test.c
+++ b/test/ctype_internal_test.c
@@ -19,13 +19,13 @@
  * tests, we therefore define our own.
  */
 #if (defined(__VMS) && __CRTL_VER <= 80400000) || defined(__osf__)
-static int isblank(int c)
+static int __cdecl isblank(int c)
 {
     return c == ' ' || c == '\t';
 }
 #endif
 
-static int test_ctype_chars(int n)
+static int __cdecl test_ctype_chars(int n)
 {
     if (!TEST_int_eq(isascii((unsigned char)n) != 0, ossl_isascii(n) != 0))
         return 0;
@@ -63,19 +63,19 @@ static struct {
     { EOF, EOF }
 };
 
-static int test_ctype_toupper(int n)
+static int __cdecl test_ctype_toupper(int n)
 {
     return TEST_int_eq(ossl_toupper(case_change[n].l), case_change[n].u)
            && TEST_int_eq(ossl_toupper(case_change[n].u), case_change[n].u);
 }
 
-static int test_ctype_tolower(int n)
+static int __cdecl test_ctype_tolower(int n)
 {
     return TEST_int_eq(ossl_tolower(case_change[n].u), case_change[n].l)
            && TEST_int_eq(ossl_tolower(case_change[n].l), case_change[n].l);
 }
 
-static int test_ctype_eof(void)
+static int __cdecl test_ctype_eof(void)
 {
     return test_ctype_chars(EOF);
 }
diff --git a/test/curve448_internal_test.c b/test/curve448_internal_test.c
index e7d4378527..b0071856a5 100644
--- a/test/curve448_internal_test.c
+++ b/test/curve448_internal_test.c
@@ -605,7 +605,7 @@ static const uint8_t *dohash(EVP_MD_CTX *hashctx, const uint8_t *msg,
     return hashout;
 }
 
-static int test_ed448(void)
+static int __cdecl test_ed448(void)
 {
     uint8_t outsig[114];
     EVP_MD_CTX *hashctx = EVP_MD_CTX_new();
@@ -654,7 +654,7 @@ static int test_ed448(void)
     return 1;
 }
 
-static int test_x448(void)
+static int __cdecl test_x448(void)
 {
     uint8_t u[56], k[56], out[56];
     unsigned int i;
diff --git a/test/d2i_test.c b/test/d2i_test.c
index afea2dcb9f..df33d8ca49 100644
--- a/test/d2i_test.c
+++ b/test/d2i_test.c
@@ -41,7 +41,7 @@ typedef struct {
 
 static expected_error_t expected_error = ASN1_UNKNOWN;
 
-static int test_bad_asn1(void)
+static int __cdecl test_bad_asn1(void)
 {
     BIO *bio = NULL;
     ASN1_VALUE *value = NULL;
diff --git a/test/danetest.c b/test/danetest.c
index 54a79ab51f..3e4089acd7 100644
--- a/test/danetest.c
+++ b/test/danetest.c
@@ -45,14 +45,14 @@ static void save_errno(void)
     saved_errno = errno;
 }
 
-static int restore_errno(void)
+static int __cdecl restore_errno(void)
 {
     int ret = errno;
     errno = saved_errno;
     return ret;
 }
 
-static int verify_chain(SSL *ssl, STACK_OF(X509) *chain)
+static int __cdecl verify_chain(SSL *ssl, STACK_OF(X509) *chain)
 {
     X509_STORE_CTX *store_ctx = NULL;
     SSL_CTX *ssl_ctx = NULL;
@@ -100,7 +100,7 @@ static STACK_OF(X509) *load_chain(BIO *fp, int nelem)
     long len;
     char *errtype = 0;                /* if error: cert or pkey? */
     STACK_OF(X509) *chain;
-    typedef X509 *(*d2i_X509_t)(X509 **, const unsigned char **, long);
+    typedef X509 *(__cdecl * d2i_X509_t)(X509 **, const unsigned char **, long);
 
     if (!TEST_ptr(chain = sk_X509_new_null()))
         goto err;
@@ -243,7 +243,7 @@ struct tlsa_field {
     ossl_ssize_t (*parser)(const char *, void *);
 };
 
-static int tlsa_import_rr(SSL *ssl, const char *rrdata)
+static int __cdecl tlsa_import_rr(SSL *ssl, const char *rrdata)
 {
     static uint8_t usage;
     static uint8_t selector;
@@ -282,7 +282,7 @@ static int tlsa_import_rr(SSL *ssl, const char *rrdata)
     return ret;
 }
 
-static int allws(const char *cp)
+static int __cdecl allws(const char *cp)
 {
     while (*cp)
         if (!isspace(_UC(*cp++)))
@@ -290,7 +290,7 @@ static int allws(const char *cp)
     return 1;
 }
 
-static int test_tlsafile(SSL_CTX *ctx, const char *base_name,
+static int __cdecl test_tlsafile(SSL_CTX *ctx, const char *base_name,
                          BIO *f, const char *path)
 {
     char *line;
@@ -384,7 +384,7 @@ static int test_tlsafile(SSL_CTX *ctx, const char *base_name,
     return ret;
 }
 
-static int run_tlsatest(void)
+static int __cdecl run_tlsatest(void)
 {
     SSL_CTX *ctx = NULL;
     BIO *f = NULL;
diff --git a/test/destest.c b/test/destest.c
index 26c5f83e2a..2a73987f22 100644
--- a/test/destest.c
+++ b/test/destest.c
@@ -298,7 +298,7 @@ static char *pt(const unsigned char *p, char buf[DATA_BUF_SIZE])
     return ret;
 }
 
-static int test_des_ecb(int i)
+static int __cdecl test_des_ecb(int i)
 {
     DES_key_schedule ks;
     DES_cblock in, out, outin;
@@ -324,7 +324,7 @@ static int test_des_ecb(int i)
     return 1;
 }
 
-static int test_des_ede_ecb(int i)
+static int __cdecl test_des_ede_ecb(int i)
 {
     DES_cblock in, out, outin;
     DES_key_schedule ks, ks2, ks3;
@@ -352,7 +352,7 @@ static int test_des_ede_ecb(int i)
     return 1;
 }
 
-static int test_des_cbc(void)
+static int __cdecl test_des_cbc(void)
 {
     unsigned char cbc_in[40];
     unsigned char cbc_out[40];
@@ -376,7 +376,7 @@ static int test_des_cbc(void)
     return TEST_mem_eq(cbc_in, cbc_data_len, cbc_data, cbc_data_len);
 }
 
-static int test_des_ede_cbc(void)
+static int __cdecl test_des_ede_cbc(void)
 {
     DES_cblock iv3;
     DES_key_schedule ks;
@@ -399,7 +399,7 @@ static int test_des_ede_cbc(void)
     return TEST_mem_eq(cbc_data, n, cbc_data, n);
 }
 
-static int test_ede_cbc(void)
+static int __cdecl test_ede_cbc(void)
 {
     DES_cblock iv3;
     DES_key_schedule ks, ks2, ks3;
@@ -431,7 +431,7 @@ static int test_ede_cbc(void)
     return TEST_mem_eq(cbc_in, i, cbc_data, i);
 }
 
-static int test_input_align(int i)
+static int __cdecl test_input_align(int i)
 {
     unsigned char cbc_out[40];
     DES_cblock iv;
@@ -446,7 +446,7 @@ static int test_input_align(int i)
     return 1;
 }
 
-static int test_output_align(int i)
+static int __cdecl test_output_align(int i)
 {
     unsigned char cbc_out[40];
     DES_cblock iv;
@@ -461,7 +461,7 @@ static int test_output_align(int i)
     return 1;
 }
 
-static int test_des_crypt(void)
+static int __cdecl test_des_crypt(void)
 {
     if (!TEST_str_eq("efGnQx2725bI2", DES_crypt("testing", "ef")))
         return 0;
@@ -477,7 +477,7 @@ static int test_des_crypt(void)
     return 1;
 }
 
-static int test_des_pcbc(void)
+static int __cdecl test_des_pcbc(void)
 {
     unsigned char cbc_in[40];
     unsigned char cbc_out[40];
@@ -497,7 +497,7 @@ static int test_des_pcbc(void)
     return TEST_mem_eq(cbc_in, n, cbc_data, n);
 }
 
-static int cfb_test(int bits, unsigned char *cfb_cipher)
+static int __cdecl cfb_test(int bits, unsigned char *cfb_cipher)
 {
     DES_key_schedule ks;
 
@@ -513,27 +513,27 @@ static int cfb_test(int bits, unsigned char *cfb_cipher)
     return TEST_mem_eq(plain, sizeof(plain), cfb_buf2, sizeof(plain));
 }
 
-static int test_des_cfb8(void)
+static int __cdecl test_des_cfb8(void)
 {
     return cfb_test(8, cfb_cipher8);
 }
 
-static int test_des_cfb16(void)
+static int __cdecl test_des_cfb16(void)
 {
     return cfb_test(16, cfb_cipher16);
 }
 
-static int test_des_cfb32(void)
+static int __cdecl test_des_cfb32(void)
 {
     return cfb_test(32, cfb_cipher32);
 }
 
-static int test_des_cfb48(void)
+static int __cdecl test_des_cfb48(void)
 {
     return cfb_test(48, cfb_cipher48);
 }
 
-static int test_des_cfb64(void)
+static int __cdecl test_des_cfb64(void)
 {
     DES_key_schedule ks;
     int n;
@@ -572,7 +572,7 @@ static int test_des_cfb64(void)
     return TEST_mem_eq(plain, sizeof(plain), cfb_buf2, sizeof(plain));
 }
 
-static int test_des_ede_cfb64(void)
+static int __cdecl test_des_ede_cfb64(void)
 {
     DES_key_schedule ks;
     int n;
@@ -595,7 +595,7 @@ static int test_des_ede_cfb64(void)
     return TEST_mem_eq(plain, sizeof(plain), cfb_buf2, sizeof(plain));
 }
 
-static int test_des_ofb(void)
+static int __cdecl test_des_ofb(void)
 {
     DES_key_schedule ks;
 
@@ -611,7 +611,7 @@ static int test_des_ofb(void)
     return TEST_mem_eq(plain, sizeof(ofb_buf2), ofb_buf2, sizeof(ofb_buf2));
 }
 
-static int test_des_ofb64(void)
+static int __cdecl test_des_ofb64(void)
 {
     DES_key_schedule ks;
     int num;
@@ -634,7 +634,7 @@ static int test_des_ofb64(void)
     return TEST_mem_eq(plain, sizeof(ofb_buf2), ofb_buf2, sizeof(ofb_buf2));
 }
 
-static int test_des_ede_ofb64(void)
+static int __cdecl test_des_ede_ofb64(void)
 {
     DES_key_schedule ks;
     int num;
@@ -658,7 +658,7 @@ static int test_des_ede_ofb64(void)
     return TEST_mem_eq(plain, sizeof(ofb_buf2), ofb_buf2, sizeof(ofb_buf2));
 }
 
-static int test_des_cbc_cksum(void)
+static int __cdecl test_des_cbc_cksum(void)
 {
     DES_LONG cs;
     DES_key_schedule ks;
@@ -672,7 +672,7 @@ static int test_des_cbc_cksum(void)
     return TEST_mem_eq(cret, 8, cbc_cksum_data, 8);
 }
 
-static int test_des_quad_cksum(void)
+static int __cdecl test_des_quad_cksum(void)
 {
     DES_LONG cs, lqret[4];
 
diff --git a/test/dhtest.c b/test/dhtest.c
index 9d5609b943..22d28b93da 100644
--- a/test/dhtest.c
+++ b/test/dhtest.c
@@ -23,9 +23,9 @@
 #ifndef OPENSSL_NO_DH
 # include <openssl/dh.h>
 
-static int cb(int p, int n, BN_GENCB *arg);
+static int __cdecl cb(int p, int n, BN_GENCB *arg);
 
-static int dh_test(void)
+static int __cdecl dh_test(void)
 {
     DH *dh = NULL;
     BIGNUM *p = NULL, *q = NULL, *g = NULL;
@@ -225,7 +225,7 @@ static int dh_test(void)
     return ret;
 }
 
-static int cb(int p, int n, BN_GENCB *arg)
+static int __cdecl cb(int p, int n, BN_GENCB *arg)
 {
     return 1;
 }
@@ -484,7 +484,7 @@ static const unsigned char dhtest_rfc5114_2048_224_bad_y[] = {
 };
 
 typedef struct {
-    DH *(*get_param) (void);
+    DH *(__cdecl *get_param) (void);
     const unsigned char *xA;
     size_t xA_len;
     const unsigned char *yA;
@@ -512,7 +512,7 @@ static const rfc5114_td rfctd[] = {
         make_rfc5114_td(2048_256)
 };
 
-static int rfc5114_test(void)
+static int __cdecl rfc5114_test(void)
 {
     int i;
     DH *dhA = NULL;
@@ -623,7 +623,7 @@ static int rfc5114_test(void)
     return 0;
 }
 
-static int rfc7919_test(void)
+static int __cdecl rfc7919_test(void)
 {
     DH *a = NULL, *b = NULL;
     const BIGNUM *apub_key = NULL, *bpub_key = NULL;
diff --git a/test/drbg_cavs_test.c b/test/drbg_cavs_test.c
index eea387b4f9..b6e685122e 100644
--- a/test/drbg_cavs_test.c
+++ b/test/drbg_cavs_test.c
@@ -62,7 +62,7 @@ static size_t kat_nonce(RAND_DRBG *drbg, unsigned char **pout,
  *
  * Return 0 on failure.
  */
-static int single_kat_no_reseed(const struct drbg_kat *td)
+static int __cdecl single_kat_no_reseed(const struct drbg_kat *td)
 {
     struct drbg_kat_no_reseed *data = (struct drbg_kat_no_reseed *)td->t;
     RAND_DRBG *drbg = NULL;
@@ -121,7 +121,7 @@ err:
  *
  * Return 0 on failure.
  */
-static int single_kat_pr_false(const struct drbg_kat *td)
+static int __cdecl single_kat_pr_false(const struct drbg_kat *td)
 {
     struct drbg_kat_pr_false *data = (struct drbg_kat_pr_false *)td->t;
     RAND_DRBG *drbg = NULL;
@@ -185,7 +185,7 @@ err:
  *
  * Return 0 on failure.
  */
-static int single_kat_pr_true(const struct drbg_kat *td)
+static int __cdecl single_kat_pr_true(const struct drbg_kat *td)
 {
     struct drbg_kat_pr_true *data = (struct drbg_kat_pr_true *)td->t;
     RAND_DRBG *drbg = NULL;
@@ -243,7 +243,7 @@ err:
     return failures == 0;
 }
 
-static int test_cavs_kats(int i)
+static int __cdecl test_cavs_kats(int i)
 {
     const struct drbg_kat *td = drbg_test[i];
     int rv = 0;
diff --git a/test/drbgtest.c b/test/drbgtest.c
index 7325e2ffa3..e232188b29 100644
--- a/test/drbgtest.c
+++ b/test/drbgtest.c
@@ -150,7 +150,7 @@ static size_t kat_nonce(RAND_DRBG *drbg, unsigned char **pout,
     return t->noncelen;
 }
 
-static int uninstantiate(RAND_DRBG *drbg)
+static int __cdecl uninstantiate(RAND_DRBG *drbg)
 {
     int ret = drbg == NULL ? 1 : RAND_DRBG_uninstantiate(drbg);
 
@@ -161,7 +161,7 @@ static int uninstantiate(RAND_DRBG *drbg)
 /*
  * Do a single KAT test.  Return 0 on failure.
  */
-static int single_kat(DRBG_SELFTEST_DATA *td)
+static int __cdecl single_kat(DRBG_SELFTEST_DATA *td)
 {
     RAND_DRBG *drbg = NULL;
     TEST_CTX t;
@@ -252,7 +252,7 @@ err:
 /*
  * Initialise a DRBG based on selftest data
  */
-static int init(RAND_DRBG *drbg, DRBG_SELFTEST_DATA *td, TEST_CTX *t)
+static int __cdecl init(RAND_DRBG *drbg, DRBG_SELFTEST_DATA *td, TEST_CTX *t)
 {
     if (!TEST_true(RAND_DRBG_set(drbg, td->nid, td->flags))
             || !TEST_true(RAND_DRBG_set_callbacks(drbg, kat_entropy, NULL,
@@ -271,7 +271,7 @@ static int init(RAND_DRBG *drbg, DRBG_SELFTEST_DATA *td, TEST_CTX *t)
 /*
  * Initialise and instantiate DRBG based on selftest data
  */
-static int instantiate(RAND_DRBG *drbg, DRBG_SELFTEST_DATA *td,
+static int __cdecl instantiate(RAND_DRBG *drbg, DRBG_SELFTEST_DATA *td,
                        TEST_CTX *t)
 {
     if (!TEST_true(init(drbg, td, t))
@@ -284,7 +284,7 @@ static int instantiate(RAND_DRBG *drbg, DRBG_SELFTEST_DATA *td,
  * Perform extensive error checking as required by SP800-90.
  * Induce several failure modes and check an error condition is set.
  */
-static int error_check(DRBG_SELFTEST_DATA *td)
+static int __cdecl error_check(DRBG_SELFTEST_DATA *td)
 {
     static char zero[sizeof(RAND_DRBG)];
     RAND_DRBG *drbg = NULL;
@@ -465,7 +465,7 @@ err:
     return ret;
 }
 
-static int test_kats(int i)
+static int __cdecl test_kats(int i)
 {
     DRBG_SELFTEST_DATA *td = &drbg_test[i];
     int rv = 0;
@@ -478,7 +478,7 @@ err:
     return rv;
 }
 
-static int test_error_checks(int i)
+static int __cdecl test_error_checks(int i)
 {
     DRBG_SELFTEST_DATA *td = &drbg_test[i];
     int rv = 0;
@@ -582,7 +582,7 @@ static void reset_drbg_hook_ctx(void)
  * |reseed_time|: if nonzero, used instead of time(NULL) to set the
  *                |before_reseed| time.
  */
-static int test_drbg_reseed(int expect_success,
+static int __cdecl test_drbg_reseed(int expect_success,
                             RAND_DRBG *master,
                             RAND_DRBG *public,
                             RAND_DRBG *private,
@@ -682,7 +682,7 @@ static int test_drbg_reseed(int expect_success,
  * Test whether master, public and private DRBG are reseeded after
  * forking the process.
  */
-static int test_drbg_reseed_after_fork(RAND_DRBG *master,
+static int __cdecl test_drbg_reseed_after_fork(RAND_DRBG *master,
                                        RAND_DRBG *public,
                                        RAND_DRBG *private)
 {
@@ -715,7 +715,7 @@ static int test_drbg_reseed_after_fork(RAND_DRBG *master,
  * setup correctly, in particular whether reseeding  works
  * as designed.
  */
-static int test_rand_drbg_reseed(void)
+static int __cdecl test_rand_drbg_reseed(void)
 {
     RAND_DRBG *master, *public, *private;
     unsigned char rand_add_buf[256];
@@ -883,13 +883,13 @@ static DWORD WINAPI thread_run(LPVOID arg)
     return 0;
 }
 
-static int run_thread(thread_t *t)
+static int __cdecl run_thread(thread_t *t)
 {
     *t = CreateThread(NULL, 0, thread_run, NULL, 0, NULL);
     return *t != NULL;
 }
 
-static int wait_for_thread(thread_t thread)
+static int __cdecl wait_for_thread(thread_t thread)
 {
     return WaitForSingleObject(thread, INFINITE) == 0;
 }
@@ -909,12 +909,12 @@ static void *thread_run(void *arg)
     return NULL;
 }
 
-static int run_thread(thread_t *t)
+static int __cdecl run_thread(thread_t *t)
 {
     return pthread_create(t, NULL, thread_run, NULL) == 0;
 }
 
-static int wait_for_thread(thread_t thread)
+static int __cdecl wait_for_thread(thread_t thread)
 {
     return pthread_join(thread, NULL) == 0;
 }
@@ -927,7 +927,7 @@ static int wait_for_thread(thread_t thread)
  */
 # define THREADS 3
 
-static int test_multi_thread(void)
+static int __cdecl test_multi_thread(void)
 {
     thread_t t[THREADS];
     int i;
@@ -957,7 +957,7 @@ static int test_multi_thread(void)
  * If an os entropy source is available then RAND_seed(buffer, bufsize)
  * is expected to succeed always.
  */
-static int test_rand_seed(void)
+static int __cdecl test_rand_seed(void)
 {
     RAND_DRBG *master = NULL;
     unsigned char rand_buf[256];
@@ -992,7 +992,7 @@ static int test_rand_seed(void)
  * This should succeed regardless of whether an os entropy source is
  * available or not.
  */
-static int test_rand_add(void)
+static int __cdecl test_rand_add(void)
 {
     unsigned char rand_buf[256];
     size_t rand_buflen;
diff --git a/test/dsa_no_digest_size_test.c b/test/dsa_no_digest_size_test.c
index 88c6036f53..36bb88c9f5 100644
--- a/test/dsa_no_digest_size_test.c
+++ b/test/dsa_no_digest_size_test.c
@@ -106,7 +106,7 @@ static DSA *load_dsa_params(void)
     return dsa;
 }
 
-static int genkeys(void)
+static int __cdecl genkeys(void)
 {
     if (!TEST_ptr(dsakey = load_dsa_params()))
         return 0;
@@ -117,7 +117,7 @@ static int genkeys(void)
     return 1;
 }
 
-static int sign_and_verify(int len)
+static int __cdecl sign_and_verify(int len)
 {
     /*
      * Per FIPS 186-4, the hash is recommended to be the same length as q.
@@ -206,7 +206,7 @@ end:
     return ok;
 }
 
-static int dsa_exact_size_test(void) {
+static int __cdecl dsa_exact_size_test(void) {
     /*
      * For a 2048-bit p, q should be either 224 or 256 bits per the table in
      * FIPS 186-4 4.2.
@@ -215,11 +215,11 @@ static int dsa_exact_size_test(void) {
     return sign_and_verify(224 / 8) && sign_and_verify(256 / 8);
 }
 
-static int dsa_small_digest_test(void) {
+static int __cdecl dsa_small_digest_test(void) {
     return sign_and_verify(16) && sign_and_verify(1);
 }
 
-static int dsa_large_digest_test(void) {
+static int __cdecl dsa_large_digest_test(void) {
     return sign_and_verify(33) && sign_and_verify(64);
 }
 
diff --git a/test/dsatest.c b/test/dsatest.c
index fa2ec4af12..54cd7537b8 100644
--- a/test/dsatest.c
+++ b/test/dsatest.c
@@ -22,7 +22,7 @@
 #include "internal/nelem.h"
 
 #ifndef OPENSSL_NO_DSA
-static int dsa_cb(int p, int n, BN_GENCB *arg);
+static int __cdecl dsa_cb(int p, int n, BN_GENCB *arg);
 
 /*
  * seed, out_p, out_q, out_g are taken from the updated Appendix 5 to FIPS
@@ -63,7 +63,7 @@ static unsigned char out_g[] = {
 
 static const unsigned char str1[] = "12345678901234567890";
 
-static int dsa_test(void)
+static int __cdecl dsa_test(void)
 {
     BN_GENCB *cb;
     DSA *dsa = NULL;
@@ -115,7 +115,7 @@ static int dsa_test(void)
     return ret;
 }
 
-static int dsa_cb(int p, int n, BN_GENCB *arg)
+static int __cdecl dsa_cb(int p, int n, BN_GENCB *arg)
 {
     static int ok = 0, num = 0;
 
diff --git a/test/dtls_mtu_test.c b/test/dtls_mtu_test.c
index 3aa519f156..b5da9ecc3d 100644
--- a/test/dtls_mtu_test.c
+++ b/test/dtls_mtu_test.c
@@ -22,7 +22,7 @@
 
 static int debug = 0;
 
-static unsigned int clnt_psk_callback(SSL *ssl, const char *hint,
+static unsigned int __cdecl clnt_psk_callback(SSL *ssl, const char *hint,
                                       char *ident, unsigned int max_ident_len,
                                       unsigned char *psk,
                                       unsigned int max_psk_len)
@@ -36,7 +36,7 @@ static unsigned int clnt_psk_callback(SSL *ssl, const char *hint,
     return max_psk_len;
 }
 
-static unsigned int srvr_psk_callback(SSL *ssl, const char *identity,
+static unsigned int __cdecl srvr_psk_callback(SSL *ssl, const char *identity,
                                       unsigned char *psk,
                                       unsigned int max_psk_len)
 {
@@ -46,7 +46,7 @@ static unsigned int srvr_psk_callback(SSL *ssl, const char *identity,
     return max_psk_len;
 }
 
-static int mtu_test(SSL_CTX *ctx, const char *cs, int no_etm)
+static int __cdecl mtu_test(SSL_CTX *ctx, const char *cs, int no_etm)
 {
     SSL *srvr_ssl = NULL, *clnt_ssl = NULL;
     BIO *sc_bio = NULL;
@@ -141,7 +141,7 @@ static int mtu_test(SSL_CTX *ctx, const char *cs, int no_etm)
     return rv;
 }
 
-static int run_mtu_tests(void)
+static int __cdecl run_mtu_tests(void)
 {
     SSL_CTX *ctx = NULL;
     STACK_OF(SSL_CIPHER) *ciphers;
diff --git a/test/dtlstest.c b/test/dtlstest.c
index ab4d4c15c0..e4ba050374 100644
--- a/test/dtlstest.c
+++ b/test/dtlstest.c
@@ -42,7 +42,7 @@ static unsigned char certstatus[] = {
 
 #define RECORD_SEQUENCE 10
 
-static unsigned int timer_cb(SSL *s, unsigned int timer_us)
+static unsigned int __cdecl timer_cb(SSL *s, unsigned int timer_us)
 {
     ++timer_cb_count;
 
@@ -52,7 +52,7 @@ static unsigned int timer_cb(SSL *s, unsigned int timer_us)
         return 2 * timer_us;
 }
 
-static int test_dtls_unprocessed(int testidx)
+static int __cdecl test_dtls_unprocessed(int testidx)
 {
     SSL_CTX *sctx = NULL, *cctx = NULL;
     SSL *serverssl1 = NULL, *clientssl1 = NULL;
@@ -146,7 +146,7 @@ static int test_dtls_unprocessed(int testidx)
 
 #define TOTAL_RECORDS (TOTAL_FULL_HAND_RECORDS + TOTAL_RESUME_HAND_RECORDS)
 
-static int test_dtls_drop_records(int idx)
+static int __cdecl test_dtls_drop_records(int idx)
 {
     SSL_CTX *sctx = NULL, *cctx = NULL;
     SSL *serverssl = NULL, *clientssl = NULL;
@@ -247,7 +247,7 @@ static int test_dtls_drop_records(int idx)
 
 static const char dummy_cookie[] = "0123456";
 
-static int generate_cookie_cb(SSL *ssl, unsigned char *cookie,
+static int __cdecl generate_cookie_cb(SSL *ssl, unsigned char *cookie,
                               unsigned int *cookie_len)
 {
     memcpy(cookie, dummy_cookie, sizeof(dummy_cookie));
@@ -255,13 +255,13 @@ static int generate_cookie_cb(SSL *ssl, unsigned char *cookie,
     return 1;
 }
 
-static int verify_cookie_cb(SSL *ssl, const unsigned char *cookie,
+static int __cdecl verify_cookie_cb(SSL *ssl, const unsigned char *cookie,
                             unsigned int cookie_len)
 {
     return TEST_mem_eq(cookie, cookie_len, dummy_cookie, sizeof(dummy_cookie));
 }
 
-static int test_cookie(void)
+static int __cdecl test_cookie(void)
 {
     SSL_CTX *sctx = NULL, *cctx = NULL;
     SSL *serverssl = NULL, *clientssl = NULL;
@@ -293,7 +293,7 @@ static int test_cookie(void)
     return testresult;
 }
 
-static int test_dtls_duplicate_records(void)
+static int __cdecl test_dtls_duplicate_records(void)
 {
     SSL_CTX *sctx = NULL, *cctx = NULL;
     SSL *serverssl = NULL, *clientssl = NULL;
diff --git a/test/dtlsv1listentest.c b/test/dtlsv1listentest.c
index 4ce11aacb7..eb684f5767 100644
--- a/test/dtlsv1listentest.c
+++ b/test/dtlsv1listentest.c
@@ -259,7 +259,7 @@ static tests testpackets[9] = {
 
 # define COOKIE_LEN  20
 
-static int cookie_gen(SSL *ssl, unsigned char *cookie, unsigned int *cookie_len)
+static int __cdecl cookie_gen(SSL *ssl, unsigned char *cookie, unsigned int *cookie_len)
 {
     unsigned int i;
 
@@ -270,7 +270,7 @@ static int cookie_gen(SSL *ssl, unsigned char *cookie, unsigned int *cookie_len)
     return 1;
 }
 
-static int cookie_verify(SSL *ssl, const unsigned char *cookie,
+static int __cdecl cookie_verify(SSL *ssl, const unsigned char *cookie,
                          unsigned int cookie_len)
 {
     unsigned int i;
@@ -286,7 +286,7 @@ static int cookie_verify(SSL *ssl, const unsigned char *cookie,
     return 1;
 }
 
-static int dtls_listen_test(int i)
+static int __cdecl dtls_listen_test(int i)
 {
     SSL_CTX *ctx = NULL;
     SSL *ssl = NULL;
diff --git a/test/ec_internal_test.c b/test/ec_internal_test.c
index 8d3a4fdd67..84d909081f 100644
--- a/test/ec_internal_test.c
+++ b/test/ec_internal_test.c
@@ -17,7 +17,7 @@ static size_t crv_len = 0;
 static EC_builtin_curve *curves = NULL;
 
 /* sanity checks field_inv function pointer in EC_METHOD */
-static int group_field_tests(const EC_GROUP *group, BN_CTX *ctx)
+static int __cdecl group_field_tests(const EC_GROUP *group, BN_CTX *ctx)
 {
     BIGNUM *a = NULL, *b = NULL, *c = NULL;
     int ret = 0;
@@ -67,7 +67,7 @@ static int group_field_tests(const EC_GROUP *group, BN_CTX *ctx)
 }
 
 /* wrapper for group_field_tests for explicit curve params and EC_METHOD */
-static int field_tests(const EC_METHOD *meth, const unsigned char *params,
+static int __cdecl field_tests(const EC_METHOD *meth, const unsigned char *params,
                        int len)
 {
     BN_CTX *ctx = NULL;
@@ -134,7 +134,7 @@ static const unsigned char params_b283[] = {
 #endif
 
 /* test EC_GFp_simple_method directly */
-static int field_tests_ecp_simple(void)
+static int __cdecl field_tests_ecp_simple(void)
 {
     TEST_info("Testing EC_GFp_simple_method()\n");
     return field_tests(EC_GFp_simple_method(), params_p256,
@@ -142,7 +142,7 @@ static int field_tests_ecp_simple(void)
 }
 
 /* test EC_GFp_mont_method directly */
-static int field_tests_ecp_mont(void)
+static int __cdecl field_tests_ecp_mont(void)
 {
     TEST_info("Testing EC_GFp_mont_method()\n");
     return field_tests(EC_GFp_mont_method(), params_p256,
@@ -151,7 +151,7 @@ static int field_tests_ecp_mont(void)
 
 #ifndef OPENSSL_NO_EC2M
 /* test EC_GF2m_simple_method directly */
-static int field_tests_ec2_simple(void)
+static int __cdecl field_tests_ec2_simple(void)
 {
     TEST_info("Testing EC_GF2m_simple_method()\n");
     return field_tests(EC_GF2m_simple_method(), params_b283,
@@ -160,7 +160,7 @@ static int field_tests_ec2_simple(void)
 #endif
 
 /* test default method for a named curve */
-static int field_tests_default(int n)
+static int __cdecl field_tests_default(int n)
 {
     BN_CTX *ctx = NULL;
     EC_GROUP *group = NULL;
diff --git a/test/ecdsatest.c b/test/ecdsatest.c
index ad2f4048a0..33c01e52d2 100644
--- a/test/ecdsatest.c
+++ b/test/ecdsatest.c
@@ -21,7 +21,7 @@
 # include "ecdsatest.h"
 
 /* functions to change the RAND_METHOD */
-static int fbytes(unsigned char *buf, int num);
+static int __cdecl fbytes(unsigned char *buf, int num);
 
 static RAND_METHOD fake_rand;
 static const RAND_METHOD *old_rand;
@@ -30,7 +30,7 @@ static const char *numbers[2];
 static size_t crv_len = 0;
 static EC_builtin_curve *curves = NULL;
 
-static int change_rand(void)
+static int __cdecl change_rand(void)
 {
     /* save old rand method */
     if (!TEST_ptr(old_rand = RAND_get_rand_method()))
@@ -45,14 +45,14 @@ static int change_rand(void)
     return 1;
 }
 
-static int restore_rand(void)
+static int __cdecl restore_rand(void)
 {
     if (!TEST_true(RAND_set_rand_method(old_rand)))
         return 0;
     return 1;
 }
 
-static int fbytes(unsigned char *buf, int num)
+static int __cdecl fbytes(unsigned char *buf, int num)
 {
     int ret = 0;
     static int fbytes_counter = 0;
@@ -92,7 +92,7 @@ static int fbytes(unsigned char *buf, int num)
  * - create ECDSA signatures that match those KATs
  * - accept those signatures as valid
  */
-static int x9_62_tests(int n)
+static int __cdecl x9_62_tests(int n)
 {
     int nid, md_nid, ret = 0;
     const char *r_in = NULL, *s_in = NULL, *tbs = NULL;
@@ -196,7 +196,7 @@ static int x9_62_tests(int n)
  * - reject that signature after modifying the signature
  * - accept that signature after un-modifying the signature
  */
-static int test_builtin(int n)
+static int __cdecl test_builtin(int n)
 {
     EC_KEY *eckey_neg = NULL, *eckey = NULL;
     unsigned char dirt, offset, tbs[128];
diff --git a/test/ecstresstest.c b/test/ecstresstest.c
index 4f05d237ba..8287c8b147 100644
--- a/test/ecstresstest.c
+++ b/test/ecstresstest.c
@@ -63,7 +63,7 @@ err:
     return NULL;
 }
 
-static int test_curve(void)
+static int __cdecl test_curve(void)
 {
     EC_GROUP *group = NULL;
     EC_POINT *point = NULL;
@@ -101,7 +101,7 @@ err:
 }
 #endif
 
-static int atoi64(const char *in, int64_t *result)
+static int __cdecl atoi64(const char *in, int64_t *result)
 {
     int64_t ret = 0;
 
diff --git a/test/ectest.c b/test/ectest.c
index 136dc741eb..b2365d48a5 100644
--- a/test/ectest.c
+++ b/test/ectest.c
@@ -27,7 +27,7 @@ static size_t crv_len = 0;
 static EC_builtin_curve *curves = NULL;
 
 /* test multiplication with group order, long and negative scalars */
-static int group_order_tests(EC_GROUP *group)
+static int __cdecl group_order_tests(EC_GROUP *group)
 {
     BIGNUM *n1 = NULL, *n2 = NULL, *order = NULL;
     EC_POINT *P = NULL, *Q = NULL, *R = NULL, *S = NULL;
@@ -142,7 +142,7 @@ err:
     return r;
 }
 
-static int prime_field_tests(void)
+static int __cdecl prime_field_tests(void)
 {
     BN_CTX *ctx = NULL;
     BIGNUM *p = NULL, *a = NULL, *b = NULL, *scalar3 = NULL;
@@ -803,7 +803,7 @@ static struct c2_curve_test {
     }
 };
 
-static int char2_curve_test(int n)
+static int __cdecl char2_curve_test(int n)
 {
     int r = 0;
     BN_CTX *ctx = NULL;
@@ -959,7 +959,7 @@ err:
     return r;
 }
 
-static int char2_field_tests(void)
+static int __cdecl char2_field_tests(void)
 {
     BN_CTX *ctx = NULL;
     BIGNUM *p = NULL, *a = NULL, *b = NULL;
@@ -1126,7 +1126,7 @@ err:
 }
 # endif
 
-static int internal_curve_test(int n)
+static int __cdecl internal_curve_test(int n)
 {
     EC_GROUP *group = NULL;
     int nid = curves[n].nid;
@@ -1145,7 +1145,7 @@ static int internal_curve_test(int n)
     return 1;
 }
 
-static int internal_curve_test_method(int n)
+static int __cdecl internal_curve_test_method(int n)
 {
     int r, nid = curves[n].nid;
     EC_GROUP *group;
@@ -1265,7 +1265,7 @@ static const struct nistp_test_params nistp_tests_params[] = {
      },
 };
 
-static int nistp_single_test(int idx)
+static int __cdecl nistp_single_test(int idx)
 {
     const struct nistp_test_params *test = nistp_tests_params + idx;
     BN_CTX *ctx = NULL;
@@ -1408,7 +1408,7 @@ err:
  * Tests a point known to cause an incorrect underflow in an old version of
  * ecp_nist521.c
  */
-static int underflow_test(void)
+static int __cdecl underflow_test(void)
 {
     BN_CTX *ctx = NULL;
     EC_GROUP *grp = NULL;
@@ -1592,7 +1592,7 @@ int are_ec_nids_compatible(int n1d, int n2d)
  *
  * Ensure that the OPENSSL_EC_EXPLICIT_CURVE ASN1 flag is set.
  */
-static int check_named_curve_from_ecparameters(int id)
+static int __cdecl check_named_curve_from_ecparameters(int id)
 {
     int ret = 0, nid, tnid;
     EC_GROUP *group = NULL, *tgroup = NULL, *tmpg = NULL;
@@ -1784,7 +1784,7 @@ err:
     return ret;
 }
 
-static int parameter_test(void)
+static int __cdecl parameter_test(void)
 {
     EC_GROUP *group = NULL, *group2 = NULL;
     ECPARAMETERS *ecparameters = NULL;
@@ -1895,7 +1895,7 @@ static const unsigned char params_cf_fail[] = {
  * will always succeed in computing the cofactor. Neither of these curves
  * conform to that -- this is just robustness testing.
  */
-static int cofactor_range_test(void)
+static int __cdecl cofactor_range_test(void)
 {
     EC_GROUP *group = NULL;
     BIGNUM *cf = NULL;
@@ -1923,7 +1923,7 @@ static int cofactor_range_test(void)
  * - a nonsensical cofactor throws an error (negative test)
  * - nonsensical orders throw errors (negative tests)
  */
-static int cardinality_test(int n)
+static int __cdecl cardinality_test(int n)
 {
     int ret = 0;
     int nid = curves[n].nid;
diff --git a/test/enginetest.c b/test/enginetest.c
index c3dc5bb7ff..35af13776e 100644
--- a/test/enginetest.c
+++ b/test/enginetest.c
@@ -21,7 +21,7 @@
 # include <openssl/rsa.h>
 # include <openssl/err.h>
 
-static void display_engine_list(void)
+static void __cdecl display_engine_list(void)
 {
     ENGINE *h;
     int loop;
@@ -41,7 +41,7 @@ static void display_engine_list(void)
 
 #define NUMTOADD 512
 
-static int test_engines(void)
+static int __cdecl test_engines(void)
 {
     ENGINE *block[NUMTOADD];
     char buf[256];
@@ -187,14 +187,14 @@ static EVP_PKEY_METHOD *test_rsa = NULL;
 static int called_encrypt = 0;
 
 /* Test function to check operation has been redirected */
-static int test_encrypt(EVP_PKEY_CTX *ctx, unsigned char *sig,
+static int __cdecl test_encrypt(EVP_PKEY_CTX *ctx, unsigned char *sig,
                         size_t *siglen, const unsigned char *tbs, size_t tbslen)
 {
     called_encrypt = 1;
     return 1;
 }
 
-static int test_pkey_meths(ENGINE *e, EVP_PKEY_METHOD **pmeth,
+static int __cdecl test_pkey_meths(ENGINE *e, EVP_PKEY_METHOD **pmeth,
                            const int **pnids, int nid)
 {
     static const int rnid = EVP_PKEY_RSA;
@@ -242,7 +242,7 @@ static EVP_PKEY *get_test_pkey(void)
     return pk;
 }
 
-static int test_redirect(void)
+static int __cdecl test_redirect(void)
 {
     const unsigned char pt[] = "Hello World\n";
     unsigned char *tmp = NULL;
diff --git a/test/errtest.c b/test/errtest.c
index e464d08bc0..1019b18354 100644
--- a/test/errtest.c
+++ b/test/errtest.c
@@ -19,7 +19,7 @@
 #endif
 
 /* Test that querying the error queue preserves the OS error. */
-static int preserves_system_error(void)
+static int __cdecl preserves_system_error(void)
 {
 #if defined(OPENSSL_SYS_WINDOWS)
     SetLastError(ERROR_INVALID_FUNCTION);
diff --git a/test/evp_extra_test.c b/test/evp_extra_test.c
index 3ae6408f09..0d480ac07f 100644
--- a/test/evp_extra_test.c
+++ b/test/evp_extra_test.c
@@ -373,7 +373,7 @@ end:
     return ret;
 }
 
-static int test_EVP_Enveloped(void)
+static int __cdecl test_EVP_Enveloped(void)
 {
     int ret = 0;
     EVP_CIPHER_CTX *ctx = NULL;
@@ -417,7 +417,7 @@ err:
 }
 
 
-static int test_EVP_DigestSignInit(void)
+static int __cdecl test_EVP_DigestSignInit(void)
 {
     int ret = 0;
     EVP_PKEY *pkey = NULL;
@@ -462,7 +462,7 @@ static int test_EVP_DigestSignInit(void)
     return ret;
 }
 
-static int test_EVP_DigestVerifyInit(void)
+static int __cdecl test_EVP_DigestVerifyInit(void)
 {
     int ret = 0;
     EVP_PKEY *pkey = NULL;
@@ -485,7 +485,7 @@ static int test_EVP_DigestVerifyInit(void)
     return ret;
 }
 
-static int test_d2i_AutoPrivateKey(int i)
+static int __cdecl test_d2i_AutoPrivateKey(int i)
 {
     int ret = 0;
     const unsigned char *p;
@@ -551,7 +551,7 @@ static struct ec_der_pub_keys_st {
  * Tests the range of the decoded EC char2 public point.
  * See ec_GF2m_simple_oct2point().
  */
-static int test_invalide_ec_char2_pub_range_decode(int id)
+static int __cdecl test_invalide_ec_char2_pub_range_decode(int id)
 {
     int ret = 0;
     BIO *bio = NULL;
@@ -570,7 +570,7 @@ err:
 }
 
 /* Tests loading a bad key in PKCS8 format */
-static int test_EVP_PKCS82PKEY(void)
+static int __cdecl test_EVP_PKCS82PKEY(void)
 {
     int ret = 0;
     const unsigned char *derp = kExampleBadECKeyDER;
@@ -600,7 +600,7 @@ static int test_EVP_PKCS82PKEY(void)
 
 #ifndef OPENSSL_NO_SM2
 
-static int test_EVP_SM2_verify(void)
+static int __cdecl test_EVP_SM2_verify(void)
 {
     /* From https://tools.ietf.org/html/draft-shen-sm2-ecdsa-02#appendix-A */
     const char *pubkey =
@@ -678,7 +678,7 @@ static int test_EVP_SM2_verify(void)
     return rc;
 }
 
-static int test_EVP_SM2(void)
+static int __cdecl test_EVP_SM2(void)
 {
     int ret = 0;
     EVP_PKEY *pkey = NULL;
@@ -841,7 +841,7 @@ static struct keys_st {
 #endif
 };
 
-static int test_set_get_raw_keys_int(int tst, int pub)
+static int __cdecl test_set_get_raw_keys_int(int tst, int pub)
 {
     int ret = 0;
     unsigned char buf[80];
@@ -886,30 +886,30 @@ static int test_set_get_raw_keys_int(int tst, int pub)
     return ret;
 }
 
-static int test_set_get_raw_keys(int tst)
+static int __cdecl test_set_get_raw_keys(int tst)
 {
     return test_set_get_raw_keys_int(tst, 0)
            && test_set_get_raw_keys_int(tst, 1);
 }
 
-static int pkey_custom_check(EVP_PKEY *pkey)
+static int __cdecl pkey_custom_check(EVP_PKEY *pkey)
 {
     return 0xbeef;
 }
 
-static int pkey_custom_pub_check(EVP_PKEY *pkey)
+static int __cdecl pkey_custom_pub_check(EVP_PKEY *pkey)
 {
     return 0xbeef;
 }
 
-static int pkey_custom_param_check(EVP_PKEY *pkey)
+static int __cdecl pkey_custom_param_check(EVP_PKEY *pkey)
 {
     return 0xbeef;
 }
 
 static EVP_PKEY_METHOD *custom_pmeth;
 
-static int test_EVP_PKEY_check(int i)
+static int __cdecl test_EVP_PKEY_check(int i)
 {
     int ret = 0;
     const unsigned char *p;
@@ -994,7 +994,7 @@ static int test_EVP_PKEY_check(int i)
     return ret;
 }
 
-static int test_HKDF(void)
+static int __cdecl test_HKDF(void)
 {
     EVP_PKEY_CTX *pctx;
     unsigned char out[20];
@@ -1039,7 +1039,7 @@ static int test_HKDF(void)
 }
 
 #ifndef OPENSSL_NO_EC
-static int test_X509_PUBKEY_inplace(void)
+static int __cdecl test_X509_PUBKEY_inplace(void)
 {
   int ret = 0;
   X509_PUBKEY *xp = NULL;
diff --git a/test/evp_test.c b/test/evp_test.c
index abb51384e8..f7a6a9a04d 100644
--- a/test/evp_test.c
+++ b/test/evp_test.c
@@ -46,13 +46,13 @@ struct evp_test_method_st {
     /* Name of test as it appears in file */
     const char *name;
     /* Initialise test for "alg" */
-    int (*init) (EVP_TEST * t, const char *alg);
+    int (__cdecl *init) (EVP_TEST * t, const char *alg);
     /* Clean up method */
-    void (*cleanup) (EVP_TEST * t);
+    void (__cdecl *cleanup) (EVP_TEST * t);
     /* Test specific name value pair processing */
-    int (*parse) (EVP_TEST * t, const char *name, const char *value);
+    int (__cdecl *parse) (EVP_TEST * t, const char *name, const char *value);
     /* Run the test itself */
-    int (*run_test) (EVP_TEST * t);
+    int (__cdecl *run_test) (EVP_TEST * t);
 };
 
 
@@ -70,9 +70,9 @@ typedef struct key_list_st {
  */
 static KEY_LIST *private_keys;
 static KEY_LIST *public_keys;
-static int find_key(EVP_PKEY **ppk, const char *name, KEY_LIST *lst);
+static int __cdecl find_key(EVP_PKEY **ppk, const char *name, KEY_LIST *lst);
 
-static int parse_bin(const char *value, unsigned char **buf, size_t *buflen);
+static int __cdecl parse_bin(const char *value, unsigned char **buf, size_t *buflen);
 
 /*
  * Compare two memory regions for equality, returning zero if they differ.
@@ -80,7 +80,7 @@ static int parse_bin(const char *value, unsigned char **buf, size_t *buflen);
  * matches then the memory is expected to be different so handle this
  * case without producing unnecessary test framework output.
  */
-static int memory_err_compare(EVP_TEST *t, const char *err,
+static int __cdecl memory_err_compare(EVP_TEST *t, const char *err,
                               const void *expected, size_t expected_len,
                               const void *got, size_t got_len)
 {
@@ -106,7 +106,7 @@ struct evp_test_buffer_st {
     int count_set;
 };
 
-static void evp_test_buffer_free(EVP_TEST_BUFFER *db)
+static void __cdecl evp_test_buffer_free(EVP_TEST_BUFFER *db)
 {
     if (db != NULL) {
         OPENSSL_free(db->buf);
@@ -117,7 +117,7 @@ static void evp_test_buffer_free(EVP_TEST_BUFFER *db)
 /*
  * append buffer to a list
  */
-static int evp_test_buffer_append(const char *value,
+static int __cdecl evp_test_buffer_append(const char *value,
                                   STACK_OF(EVP_TEST_BUFFER) **sk)
 {
     EVP_TEST_BUFFER *db = NULL;
@@ -145,7 +145,7 @@ err:
 /*
  * replace last buffer in list with copies of itself
  */
-static int evp_test_buffer_ncopy(const char *value,
+static int __cdecl evp_test_buffer_ncopy(const char *value,
                                  STACK_OF(EVP_TEST_BUFFER) *sk)
 {
     EVP_TEST_BUFFER *db;
@@ -175,7 +175,7 @@ static int evp_test_buffer_ncopy(const char *value,
 /*
  * set repeat count for last buffer in list
  */
-static int evp_test_buffer_set_count(const char *value,
+static int __cdecl evp_test_buffer_set_count(const char *value,
                                      STACK_OF(EVP_TEST_BUFFER) *sk)
 {
     EVP_TEST_BUFFER *db;
@@ -199,8 +199,8 @@ static int evp_test_buffer_set_count(const char *value,
 /*
  * call "fn" with each element of the list in turn
  */
-static int evp_test_buffer_do(STACK_OF(EVP_TEST_BUFFER) *sk,
-                              int (*fn)(void *ctx,
+static int __cdecl evp_test_buffer_do(STACK_OF(EVP_TEST_BUFFER) *sk,
+                              int (__cdecl *fn)(void *ctx,
                                         const unsigned char *buf,
                                         size_t buflen),
                               void *ctx)
@@ -265,7 +265,7 @@ static unsigned char* unescape(const char *input, size_t input_len,
  * For a hex string "value" convert to a binary allocated buffer.
  * Return 1 on success or 0 on failure.
  */
-static int parse_bin(const char *value, unsigned char **buf, size_t *buflen)
+static int __cdecl parse_bin(const char *value, unsigned char **buf, size_t *buflen)
 {
     long len;
 
@@ -328,7 +328,7 @@ typedef struct digest_data_st {
     size_t output_len;
 } DIGEST_DATA;
 
-static int digest_test_init(EVP_TEST *t, const char *alg)
+static int __cdecl digest_test_init(EVP_TEST *t, const char *alg)
 {
     DIGEST_DATA *mdat;
     const EVP_MD *digest;
@@ -348,7 +348,7 @@ static int digest_test_init(EVP_TEST *t, const char *alg)
     return 1;
 }
 
-static void digest_test_cleanup(EVP_TEST *t)
+static void __cdecl digest_test_cleanup(EVP_TEST *t)
 {
     DIGEST_DATA *mdat = t->data;
 
@@ -356,7 +356,7 @@ static void digest_test_cleanup(EVP_TEST *t)
     OPENSSL_free(mdat->output);
 }
 
-static int digest_test_parse(EVP_TEST *t,
+static int __cdecl digest_test_parse(EVP_TEST *t,
                              const char *keyword, const char *value)
 {
     DIGEST_DATA *mdata = t->data;
@@ -372,12 +372,12 @@ static int digest_test_parse(EVP_TEST *t,
     return 0;
 }
 
-static int digest_update_fn(void *ctx, const unsigned char *buf, size_t buflen)
+static int __cdecl digest_update_fn(void *ctx, const unsigned char *buf, size_t buflen)
 {
     return EVP_DigestUpdate(ctx, buf, buflen);
 }
 
-static int digest_test_run(EVP_TEST *t)
+static int __cdecl digest_test_run(EVP_TEST *t)
 {
     DIGEST_DATA *expected = t->data;
     EVP_MD_CTX *mctx;
@@ -487,7 +487,7 @@ typedef struct cipher_data_st {
     int tag_late;
 } CIPHER_DATA;
 
-static int cipher_test_init(EVP_TEST *t, const char *alg)
+static int __cdecl cipher_test_init(EVP_TEST *t, const char *alg)
 {
     const EVP_CIPHER *cipher;
     CIPHER_DATA *cdat;
@@ -518,7 +518,7 @@ static int cipher_test_init(EVP_TEST *t, const char *alg)
     return 1;
 }
 
-static void cipher_test_cleanup(EVP_TEST *t)
+static void __cdecl cipher_test_cleanup(EVP_TEST *t)
 {
     CIPHER_DATA *cdat = t->data;
 
@@ -530,7 +530,7 @@ static void cipher_test_cleanup(EVP_TEST *t)
     OPENSSL_free(cdat->tag);
 }
 
-static int cipher_test_parse(EVP_TEST *t, const char *keyword,
+static int __cdecl cipher_test_parse(EVP_TEST *t, const char *keyword,
                              const char *value)
 {
     CIPHER_DATA *cdat = t->data;
@@ -571,7 +571,7 @@ static int cipher_test_parse(EVP_TEST *t, const char *keyword,
     return 0;
 }
 
-static int cipher_test_enc(EVP_TEST *t, int enc,
+static int __cdecl cipher_test_enc(EVP_TEST *t, int enc,
                            size_t out_misalign, size_t inp_misalign, int frag)
 {
     CIPHER_DATA *expected = t->data;
@@ -771,7 +771,7 @@ static int cipher_test_enc(EVP_TEST *t, int enc,
     return ok;
 }
 
-static int cipher_test_run(EVP_TEST *t)
+static int __cdecl cipher_test_run(EVP_TEST *t)
 {
     CIPHER_DATA *cdat = t->data;
     int rv, frag = 0;
@@ -880,7 +880,7 @@ typedef struct mac_data_st {
     STACK_OF(OPENSSL_STRING) *controls;
 } MAC_DATA;
 
-static int mac_test_init(EVP_TEST *t, const char *alg)
+static int __cdecl mac_test_init(EVP_TEST *t, const char *alg)
 {
     int type;
     MAC_DATA *mdat;
@@ -919,12 +919,12 @@ static int mac_test_init(EVP_TEST *t, const char *alg)
 }
 
 /* Because OPENSSL_free is a macro, it can't be passed as a function pointer */
-static void openssl_free(char *m)
+static void __cdecl openssl_free(char *m)
 {
     OPENSSL_free(m);
 }
 
-static void mac_test_cleanup(EVP_TEST *t)
+static void __cdecl mac_test_cleanup(EVP_TEST *t)
 {
     MAC_DATA *mdat = t->data;
 
@@ -935,7 +935,7 @@ static void mac_test_cleanup(EVP_TEST *t)
     OPENSSL_free(mdat->output);
 }
 
-static int mac_test_parse(EVP_TEST *t,
+static int __cdecl mac_test_parse(EVP_TEST *t,
                           const char *keyword, const char *value)
 {
     MAC_DATA *mdata = t->data;
@@ -958,7 +958,7 @@ static int mac_test_parse(EVP_TEST *t,
     return 0;
 }
 
-static int mac_test_ctrl_pkey(EVP_TEST *t, EVP_PKEY_CTX *pctx,
+static int __cdecl mac_test_ctrl_pkey(EVP_TEST *t, EVP_PKEY_CTX *pctx,
                               const char *value)
 {
     int rv;
@@ -980,7 +980,7 @@ static int mac_test_ctrl_pkey(EVP_TEST *t, EVP_PKEY_CTX *pctx,
     return rv > 0;
 }
 
-static int mac_test_run(EVP_TEST *t)
+static int __cdecl mac_test_run(EVP_TEST *t)
 {
     MAC_DATA *expected = t->data;
     EVP_MD_CTX *mctx = NULL;
@@ -1077,7 +1077,7 @@ typedef struct pkey_data_st {
     /* Context for this operation */
     EVP_PKEY_CTX *ctx;
     /* Key operation to perform */
-    int (*keyop) (EVP_PKEY_CTX *ctx,
+    int (__cdecl *keyop) (EVP_PKEY_CTX *ctx,
                   unsigned char *sig, size_t *siglen,
                   const unsigned char *tbs, size_t tbslen);
     /* Input to MAC */
@@ -1092,10 +1092,10 @@ typedef struct pkey_data_st {
  * Perform public key operation setup: lookup key, allocated ctx and call
  * the appropriate initialisation function
  */
-static int pkey_test_init(EVP_TEST *t, const char *name,
+static int __cdecl pkey_test_init(EVP_TEST *t, const char *name,
                           int use_public,
-                          int (*keyopinit) (EVP_PKEY_CTX *ctx),
-                          int (*keyop)(EVP_PKEY_CTX *ctx,
+                          int (__cdecl *keyopinit) (EVP_PKEY_CTX *ctx),
+                          int (__cdecl *keyop)(EVP_PKEY_CTX *ctx,
                                        unsigned char *sig, size_t *siglen,
                                        const unsigned char *tbs,
                                        size_t tbslen))
@@ -1129,7 +1129,7 @@ static int pkey_test_init(EVP_TEST *t, const char *name,
     return 1;
 }
 
-static void pkey_test_cleanup(EVP_TEST *t)
+static void __cdecl pkey_test_cleanup(EVP_TEST *t)
 {
     PKEY_DATA *kdata = t->data;
 
@@ -1138,7 +1138,7 @@ static void pkey_test_cleanup(EVP_TEST *t)
     EVP_PKEY_CTX_free(kdata->ctx);
 }
 
-static int pkey_test_ctrl(EVP_TEST *t, EVP_PKEY_CTX *pctx,
+static int __cdecl pkey_test_ctrl(EVP_TEST *t, EVP_PKEY_CTX *pctx,
                           const char *value)
 {
     int rv;
@@ -1173,7 +1173,7 @@ static int pkey_test_ctrl(EVP_TEST *t, EVP_PKEY_CTX *pctx,
     return rv > 0;
 }
 
-static int pkey_test_parse(EVP_TEST *t,
+static int __cdecl pkey_test_parse(EVP_TEST *t,
                            const char *keyword, const char *value)
 {
     PKEY_DATA *kdata = t->data;
@@ -1186,7 +1186,7 @@ static int pkey_test_parse(EVP_TEST *t,
     return 0;
 }
 
-static int pkey_test_run(EVP_TEST *t)
+static int __cdecl pkey_test_run(EVP_TEST *t)
 {
     PKEY_DATA *expected = t->data;
     unsigned char *got = NULL;
@@ -1214,7 +1214,7 @@ static int pkey_test_run(EVP_TEST *t)
     return 1;
 }
 
-static int sign_test_init(EVP_TEST *t, const char *name)
+static int __cdecl sign_test_init(EVP_TEST *t, const char *name)
 {
     return pkey_test_init(t, name, 0, EVP_PKEY_sign_init, EVP_PKEY_sign);
 }
@@ -1227,7 +1227,7 @@ static const EVP_TEST_METHOD psign_test_method = {
     pkey_test_run
 };
 
-static int verify_recover_test_init(EVP_TEST *t, const char *name)
+static int __cdecl verify_recover_test_init(EVP_TEST *t, const char *name)
 {
     return pkey_test_init(t, name, 1, EVP_PKEY_verify_recover_init,
                           EVP_PKEY_verify_recover);
@@ -1241,7 +1241,7 @@ static const EVP_TEST_METHOD pverify_recover_test_method = {
     pkey_test_run
 };
 
-static int decrypt_test_init(EVP_TEST *t, const char *name)
+static int __cdecl decrypt_test_init(EVP_TEST *t, const char *name)
 {
     return pkey_test_init(t, name, 0, EVP_PKEY_decrypt_init,
                           EVP_PKEY_decrypt);
@@ -1255,12 +1255,12 @@ static const EVP_TEST_METHOD pdecrypt_test_method = {
     pkey_test_run
 };
 
-static int verify_test_init(EVP_TEST *t, const char *name)
+static int __cdecl verify_test_init(EVP_TEST *t, const char *name)
 {
     return pkey_test_init(t, name, 1, EVP_PKEY_verify_init, 0);
 }
 
-static int verify_test_run(EVP_TEST *t)
+static int __cdecl verify_test_run(EVP_TEST *t)
 {
     PKEY_DATA *kdata = t->data;
 
@@ -1279,12 +1279,12 @@ static const EVP_TEST_METHOD pverify_test_method = {
 };
 
 
-static int pderive_test_init(EVP_TEST *t, const char *name)
+static int __cdecl pderive_test_init(EVP_TEST *t, const char *name)
 {
     return pkey_test_init(t, name, 0, EVP_PKEY_derive_init, 0);
 }
 
-static int pderive_test_parse(EVP_TEST *t,
+static int __cdecl pderive_test_parse(EVP_TEST *t,
                               const char *keyword, const char *value)
 {
     PKEY_DATA *kdata = t->data;
@@ -1304,7 +1304,7 @@ static int pderive_test_parse(EVP_TEST *t,
     return 0;
 }
 
-static int pderive_test_run(EVP_TEST *t)
+static int __cdecl pderive_test_run(EVP_TEST *t)
 {
     PKEY_DATA *expected = t->data;
     unsigned char *got = NULL;
@@ -1373,7 +1373,7 @@ typedef struct pbe_data_st {
 /*
  * Parse unsigned decimal 64 bit integer value
  */
-static int parse_uint64(const char *value, uint64_t *pr)
+static int __cdecl parse_uint64(const char *value, uint64_t *pr)
 {
     const char *p = value;
 
@@ -1397,7 +1397,7 @@ static int parse_uint64(const char *value, uint64_t *pr)
     return 1;
 }
 
-static int scrypt_test_parse(EVP_TEST *t,
+static int __cdecl scrypt_test_parse(EVP_TEST *t,
                              const char *keyword, const char *value)
 {
     PBE_DATA *pdata = t->data;
@@ -1414,7 +1414,7 @@ static int scrypt_test_parse(EVP_TEST *t,
 }
 #endif
 
-static int pbkdf2_test_parse(EVP_TEST *t,
+static int __cdecl pbkdf2_test_parse(EVP_TEST *t,
                              const char *keyword, const char *value)
 {
     PBE_DATA *pdata = t->data;
@@ -1434,7 +1434,7 @@ static int pbkdf2_test_parse(EVP_TEST *t,
     return 0;
 }
 
-static int pkcs12_test_parse(EVP_TEST *t,
+static int __cdecl pkcs12_test_parse(EVP_TEST *t,
                              const char *keyword, const char *value)
 {
     PBE_DATA *pdata = t->data;
@@ -1448,7 +1448,7 @@ static int pkcs12_test_parse(EVP_TEST *t,
     return pbkdf2_test_parse(t, keyword, value);
 }
 
-static int pbe_test_init(EVP_TEST *t, const char *alg)
+static int __cdecl pbe_test_init(EVP_TEST *t, const char *alg)
 {
     PBE_DATA *pdat;
     PBE_TYPE pbe_type = PBE_TYPE_INVALID;
@@ -1473,7 +1473,7 @@ static int pbe_test_init(EVP_TEST *t, const char *alg)
     return 1;
 }
 
-static void pbe_test_cleanup(EVP_TEST *t)
+static void __cdecl pbe_test_cleanup(EVP_TEST *t)
 {
     PBE_DATA *pdat = t->data;
 
@@ -1482,7 +1482,7 @@ static void pbe_test_cleanup(EVP_TEST *t)
     OPENSSL_free(pdat->key);
 }
 
-static int pbe_test_parse(EVP_TEST *t,
+static int __cdecl pbe_test_parse(EVP_TEST *t,
                           const char *keyword, const char *value)
 {
     PBE_DATA *pdata = t->data;
@@ -1504,7 +1504,7 @@ static int pbe_test_parse(EVP_TEST *t,
     return 0;
 }
 
-static int pbe_test_run(EVP_TEST *t)
+static int __cdecl pbe_test_run(EVP_TEST *t)
 {
     PBE_DATA *expected = t->data;
     unsigned char *key;
@@ -1579,7 +1579,7 @@ typedef struct encode_data_st {
     base64_encoding_type encoding;
 } ENCODE_DATA;
 
-static int encode_test_init(EVP_TEST *t, const char *encoding)
+static int __cdecl encode_test_init(EVP_TEST *t, const char *encoding)
 {
     ENCODE_DATA *edata;
 
@@ -1606,7 +1606,7 @@ err:
     return 0;
 }
 
-static void encode_test_cleanup(EVP_TEST *t)
+static void __cdecl encode_test_cleanup(EVP_TEST *t)
 {
     ENCODE_DATA *edata = t->data;
 
@@ -1615,7 +1615,7 @@ static void encode_test_cleanup(EVP_TEST *t)
     memset(edata, 0, sizeof(*edata));
 }
 
-static int encode_test_parse(EVP_TEST *t,
+static int __cdecl encode_test_parse(EVP_TEST *t,
                              const char *keyword, const char *value)
 {
     ENCODE_DATA *edata = t->data;
@@ -1627,7 +1627,7 @@ static int encode_test_parse(EVP_TEST *t,
     return 0;
 }
 
-static int encode_test_run(EVP_TEST *t)
+static int __cdecl encode_test_run(EVP_TEST *t)
 {
     ENCODE_DATA *expected = t->data;
     unsigned char *encode_out = NULL, *decode_out = NULL;
@@ -1721,7 +1721,7 @@ typedef struct kdf_data_st {
  * Perform public key operation setup: lookup key, allocated ctx and call
  * the appropriate initialisation function
  */
-static int kdf_test_init(EVP_TEST *t, const char *name)
+static int __cdecl kdf_test_init(EVP_TEST *t, const char *name)
 {
     KDF_DATA *kdata;
     int kdf_nid = OBJ_sn2nid(name);
@@ -1752,14 +1752,14 @@ static int kdf_test_init(EVP_TEST *t, const char *name)
     return 1;
 }
 
-static void kdf_test_cleanup(EVP_TEST *t)
+static void __cdecl kdf_test_cleanup(EVP_TEST *t)
 {
     KDF_DATA *kdata = t->data;
     OPENSSL_free(kdata->output);
     EVP_PKEY_CTX_free(kdata->ctx);
 }
 
-static int kdf_test_parse(EVP_TEST *t,
+static int __cdecl kdf_test_parse(EVP_TEST *t,
                           const char *keyword, const char *value)
 {
     KDF_DATA *kdata = t->data;
@@ -1771,7 +1771,7 @@ static int kdf_test_parse(EVP_TEST *t,
     return 0;
 }
 
-static int kdf_test_run(EVP_TEST *t)
+static int __cdecl kdf_test_run(EVP_TEST *t)
 {
     KDF_DATA *expected = t->data;
     unsigned char *got = NULL;
@@ -1815,7 +1815,7 @@ typedef struct keypair_test_data_st {
     EVP_PKEY *pubk;
 } KEYPAIR_TEST_DATA;
 
-static int keypair_test_init(EVP_TEST *t, const char *pair)
+static int __cdecl keypair_test_init(EVP_TEST *t, const char *pair)
 {
     KEYPAIR_TEST_DATA *data;
     int rv = 0;
@@ -1861,7 +1861,7 @@ end:
     return rv;
 }
 
-static void keypair_test_cleanup(EVP_TEST *t)
+static void __cdecl keypair_test_cleanup(EVP_TEST *t)
 {
     OPENSSL_free(t->data);
     t->data = NULL;
@@ -1870,12 +1870,12 @@ static void keypair_test_cleanup(EVP_TEST *t)
 /*
  * For tests that do not accept any custom keywords.
  */
-static int void_test_parse(EVP_TEST *t, const char *keyword, const char *value)
+static int __cdecl void_test_parse(EVP_TEST *t, const char *keyword, const char *value)
 {
     return 0;
 }
 
-static int keypair_test_run(EVP_TEST *t)
+static int __cdecl keypair_test_run(EVP_TEST *t)
 {
     int rv = 0;
     const KEYPAIR_TEST_DATA *pair = t->data;
@@ -1931,7 +1931,7 @@ typedef struct keygen_test_data_st {
     char *keyname; /* Key name to store key or NULL */
 } KEYGEN_TEST_DATA;
 
-static int keygen_test_init(EVP_TEST *t, const char *alg)
+static int __cdecl keygen_test_init(EVP_TEST *t, const char *alg)
 {
     KEYGEN_TEST_DATA *data;
     EVP_PKEY_CTX *genctx;
@@ -1967,7 +1967,7 @@ err:
     return 0;
 }
 
-static void keygen_test_cleanup(EVP_TEST *t)
+static void __cdecl keygen_test_cleanup(EVP_TEST *t)
 {
     KEYGEN_TEST_DATA *keygen = t->data;
 
@@ -1977,7 +1977,7 @@ static void keygen_test_cleanup(EVP_TEST *t)
     t->data = NULL;
 }
 
-static int keygen_test_parse(EVP_TEST *t,
+static int __cdecl keygen_test_parse(EVP_TEST *t,
                              const char *keyword, const char *value)
 {
     KEYGEN_TEST_DATA *keygen = t->data;
@@ -1989,7 +1989,7 @@ static int keygen_test_parse(EVP_TEST *t,
     return 0;
 }
 
-static int keygen_test_run(EVP_TEST *t)
+static int __cdecl keygen_test_run(EVP_TEST *t)
 {
     KEYGEN_TEST_DATA *keygen = t->data;
     EVP_PKEY *pkey = NULL;
@@ -2051,7 +2051,7 @@ typedef struct {
     size_t output_len; /* Expected output length */
 } DIGESTSIGN_DATA;
 
-static int digestsigver_test_init(EVP_TEST *t, const char *alg, int is_verify,
+static int __cdecl digestsigver_test_init(EVP_TEST *t, const char *alg, int is_verify,
                                   int is_oneshot)
 {
     const EVP_MD *md = NULL;
@@ -2080,12 +2080,12 @@ static int digestsigver_test_init(EVP_TEST *t, const char *alg, int is_verify,
     return 1;
 }
 
-static int digestsign_test_init(EVP_TEST *t, const char *alg)
+static int __cdecl digestsign_test_init(EVP_TEST *t, const char *alg)
 {
     return digestsigver_test_init(t, alg, 0, 0);
 }
 
-static void digestsigver_test_cleanup(EVP_TEST *t)
+static void __cdecl digestsigver_test_cleanup(EVP_TEST *t)
 {
     DIGESTSIGN_DATA *mdata = t->data;
 
@@ -2097,7 +2097,7 @@ static void digestsigver_test_cleanup(EVP_TEST *t)
     t->data = NULL;
 }
 
-static int digestsigver_test_parse(EVP_TEST *t,
+static int __cdecl digestsigver_test_parse(EVP_TEST *t,
                                    const char *keyword, const char *value)
 {
     DIGESTSIGN_DATA *mdata = t->data;
@@ -2148,13 +2148,13 @@ static int digestsigver_test_parse(EVP_TEST *t,
     return 0;
 }
 
-static int digestsign_update_fn(void *ctx, const unsigned char *buf,
+static int __cdecl digestsign_update_fn(void *ctx, const unsigned char *buf,
                                 size_t buflen)
 {
     return EVP_DigestSignUpdate(ctx, buf, buflen);
 }
 
-static int digestsign_test_run(EVP_TEST *t)
+static int __cdecl digestsign_test_run(EVP_TEST *t)
 {
     DIGESTSIGN_DATA *expected = t->data;
     unsigned char *got = NULL;
@@ -2197,18 +2197,18 @@ static const EVP_TEST_METHOD digestsign_test_method = {
     digestsign_test_run
 };
 
-static int digestverify_test_init(EVP_TEST *t, const char *alg)
+static int __cdecl digestverify_test_init(EVP_TEST *t, const char *alg)
 {
     return digestsigver_test_init(t, alg, 1, 0);
 }
 
-static int digestverify_update_fn(void *ctx, const unsigned char *buf,
+static int __cdecl digestverify_update_fn(void *ctx, const unsigned char *buf,
                                   size_t buflen)
 {
     return EVP_DigestVerifyUpdate(ctx, buf, buflen);
 }
 
-static int digestverify_test_run(EVP_TEST *t)
+static int __cdecl digestverify_test_run(EVP_TEST *t)
 {
     DIGESTSIGN_DATA *mdata = t->data;
 
@@ -2231,12 +2231,12 @@ static const EVP_TEST_METHOD digestverify_test_method = {
     digestverify_test_run
 };
 
-static int oneshot_digestsign_test_init(EVP_TEST *t, const char *alg)
+static int __cdecl oneshot_digestsign_test_init(EVP_TEST *t, const char *alg)
 {
     return digestsigver_test_init(t, alg, 0, 1);
 }
 
-static int oneshot_digestsign_test_run(EVP_TEST *t)
+static int __cdecl oneshot_digestsign_test_run(EVP_TEST *t)
 {
     DIGESTSIGN_DATA *expected = t->data;
     unsigned char *got = NULL;
@@ -2275,12 +2275,12 @@ static const EVP_TEST_METHOD oneshot_digestsign_test_method = {
     oneshot_digestsign_test_run
 };
 
-static int oneshot_digestverify_test_init(EVP_TEST *t, const char *alg)
+static int __cdecl oneshot_digestverify_test_init(EVP_TEST *t, const char *alg)
 {
     return digestsigver_test_init(t, alg, 1, 1);
 }
 
-static int oneshot_digestverify_test_run(EVP_TEST *t)
+static int __cdecl oneshot_digestverify_test_run(EVP_TEST *t)
 {
     DIGESTSIGN_DATA *mdata = t->data;
 
@@ -2335,7 +2335,7 @@ static const EVP_TEST_METHOD *find_test(const char *name)
     return NULL;
 }
 
-static void clear_test(EVP_TEST *t)
+static void __cdecl clear_test(EVP_TEST *t)
 {
     test_clearstanza(&t->s);
     ERR_clear_error();
@@ -2361,7 +2361,7 @@ static void clear_test(EVP_TEST *t)
 /*
  * Check for errors in the test structure; return 1 if okay, else 0.
  */
-static int check_test_error(EVP_TEST *t)
+static int __cdecl check_test_error(EVP_TEST *t)
 {
     unsigned long err;
     const char *func;
@@ -2428,7 +2428,7 @@ static int check_test_error(EVP_TEST *t)
 /*
  * Run a parsed test. Log a message and return 0 on error.
  */
-static int run_test(EVP_TEST *t)
+static int __cdecl run_test(EVP_TEST *t)
 {
     if (t->meth == NULL)
         return 1;
@@ -2452,7 +2452,7 @@ static int run_test(EVP_TEST *t)
     return 1;
 }
 
-static int find_key(EVP_PKEY **ppk, const char *name, KEY_LIST *lst)
+static int __cdecl find_key(EVP_PKEY **ppk, const char *name, KEY_LIST *lst)
 {
     for (; lst != NULL; lst = lst->next) {
         if (strcmp(lst->name, name) == 0) {
@@ -2464,7 +2464,7 @@ static int find_key(EVP_PKEY **ppk, const char *name, KEY_LIST *lst)
     return 0;
 }
 
-static void free_key_list(KEY_LIST *lst)
+static void __cdecl free_key_list(KEY_LIST *lst)
 {
     while (lst != NULL) {
         KEY_LIST *next = lst->next;
@@ -2479,7 +2479,7 @@ static void free_key_list(KEY_LIST *lst)
 /*
  * Is the key type an unsupported algorithm?
  */
-static int key_unsupported(void)
+static int __cdecl key_unsupported(void)
 {
     long err = ERR_peek_error();
 
@@ -2517,7 +2517,7 @@ static char *take_value(PAIR *pp)
 /*
  * Read and parse one test.  Return 0 if failure, 1 if okay.
  */
-static int parse(EVP_TEST *t)
+static int __cdecl parse(EVP_TEST *t)
 {
     KEY_LIST *key, **klist;
     EVP_PKEY *pkey;
@@ -2681,7 +2681,7 @@ top:
     return 1;
 }
 
-static int run_file_tests(int i)
+static int __cdecl run_file_tests(int i)
 {
     EVP_TEST *t;
     const char *testfile = test_get_argument(i);
diff --git a/test/exdatatest.c b/test/exdatatest.c
index bc39a145e6..47facaf206 100644
--- a/test/exdatatest.c
+++ b/test/exdatatest.c
@@ -25,7 +25,7 @@ static int gbl_result;
  * Apps explicitly set/get ex_data as needed
  */
 
-static void exnew(void *parent, void *ptr, CRYPTO_EX_DATA *ad,
+static void __cdecl exnew(void *parent, void *ptr, CRYPTO_EX_DATA *ad,
           int idx, long argl, void *argp)
 {
     if (!TEST_int_eq(idx, saved_idx)
@@ -35,7 +35,7 @@ static void exnew(void *parent, void *ptr, CRYPTO_EX_DATA *ad,
         gbl_result = 0;
 }
 
-static int exdup(CRYPTO_EX_DATA *to, const CRYPTO_EX_DATA *from,
+static int __cdecl exdup(CRYPTO_EX_DATA *to, const CRYPTO_EX_DATA *from,
           void *from_d, int idx, long argl, void *argp)
 {
     if (!TEST_int_eq(idx, saved_idx)
@@ -46,7 +46,7 @@ static int exdup(CRYPTO_EX_DATA *to, const CRYPTO_EX_DATA *from,
     return 1;
 }
 
-static void exfree(void *parent, void *ptr, CRYPTO_EX_DATA *ad,
+static void __cdecl exfree(void *parent, void *ptr, CRYPTO_EX_DATA *ad,
             int idx, long argl, void *argp)
 {
     if (!TEST_int_eq(idx, saved_idx)
@@ -67,7 +67,7 @@ typedef struct myobj_ex_data_st {
     int dup;
 } MYOBJ_EX_DATA;
 
-static void exnew2(void *parent, void *ptr, CRYPTO_EX_DATA *ad,
+static void __cdecl exnew2(void *parent, void *ptr, CRYPTO_EX_DATA *ad,
           int idx, long argl, void *argp)
 {
     MYOBJ_EX_DATA *ex_data = OPENSSL_zalloc(sizeof(*ex_data));
@@ -84,7 +84,7 @@ static void exnew2(void *parent, void *ptr, CRYPTO_EX_DATA *ad,
     }
 }
 
-static int exdup2(CRYPTO_EX_DATA *to, const CRYPTO_EX_DATA *from,
+static int __cdecl exdup2(CRYPTO_EX_DATA *to, const CRYPTO_EX_DATA *from,
           void *from_d, int idx, long argl, void *argp)
 {
     MYOBJ_EX_DATA **update_ex_data = (MYOBJ_EX_DATA**)from_d;
@@ -108,7 +108,7 @@ static int exdup2(CRYPTO_EX_DATA *to, const CRYPTO_EX_DATA *from,
     return 1;
 }
 
-static void exfree2(void *parent, void *ptr, CRYPTO_EX_DATA *ad,
+static void __cdecl exfree2(void *parent, void *ptr, CRYPTO_EX_DATA *ad,
             int idx, long argl, void *argp)
 {
     MYOBJ_EX_DATA *ex_data = CRYPTO_get_ex_data(ad, saved_idx2);
@@ -137,7 +137,7 @@ static MYOBJ *MYOBJ_new(void)
     return obj;
 }
 
-static void MYOBJ_sethello(MYOBJ *obj, char *cp)
+static void __cdecl MYOBJ_sethello(MYOBJ *obj, char *cp)
 {
     obj->st = CRYPTO_set_ex_data(&obj->ex_data, saved_idx, cp);
     if (!TEST_int_eq(obj->st, 1))
@@ -149,7 +149,7 @@ static char *MYOBJ_gethello(MYOBJ *obj)
     return CRYPTO_get_ex_data(&obj->ex_data, saved_idx);
 }
 
-static void MYOBJ_sethello2(MYOBJ *obj, char *cp)
+static void __cdecl MYOBJ_sethello2(MYOBJ *obj, char *cp)
 {
     MYOBJ_EX_DATA* ex_data = CRYPTO_get_ex_data(&obj->ex_data, saved_idx2);
     if (TEST_ptr(ex_data))
@@ -168,7 +168,7 @@ static char *MYOBJ_gethello2(MYOBJ *obj)
     return NULL;
 }
 
-static void MYOBJ_free(MYOBJ *obj)
+static void __cdecl MYOBJ_free(MYOBJ *obj)
 {
     CRYPTO_free_ex_data(CRYPTO_EX_INDEX_APP, obj, &obj->ex_data);
     OPENSSL_free(obj);
@@ -183,7 +183,7 @@ static MYOBJ *MYOBJ_dup(MYOBJ *in)
     return obj;
 }
 
-static int test_exdata(void)
+static int __cdecl test_exdata(void)
 {
     MYOBJ *t1, *t2, *t3;
     MYOBJ_EX_DATA *ex_data;
diff --git a/test/exptest.c b/test/exptest.c
index cde4d6bc45..fea26df3db 100644
--- a/test/exptest.c
+++ b/test/exptest.c
@@ -28,7 +28,7 @@
  * Test that r == 0 in test_exp_mod_zero(). Returns one on success,
  * returns zero and prints debug output otherwise.
  */
-static int a_is_zero_mod_one(const char *method, const BIGNUM *r,
+static int __cdecl a_is_zero_mod_one(const char *method, const BIGNUM *r,
                              const BIGNUM *a)
 {
     if (!BN_is_zero(r)) {
@@ -43,7 +43,7 @@ static int a_is_zero_mod_one(const char *method, const BIGNUM *r,
 /*
  * test_mod_exp_zero tests that x**0 mod 1 == 0. It returns zero on success.
  */
-static int test_mod_exp_zero(void)
+static int __cdecl test_mod_exp_zero(void)
 {
     BIGNUM *a = NULL, *p = NULL, *m = NULL;
     BIGNUM *r = NULL;
@@ -119,7 +119,7 @@ static int test_mod_exp_zero(void)
     return ret;
 }
 
-static int test_mod_exp(int round)
+static int __cdecl test_mod_exp(int round)
 {
     BN_CTX *ctx;
     unsigned char c;
diff --git a/test/fatalerrtest.c b/test/fatalerrtest.c
index 66731e6402..cd28761283 100644
--- a/test/fatalerrtest.c
+++ b/test/fatalerrtest.c
@@ -16,7 +16,7 @@
 static char *cert = NULL;
 static char *privkey = NULL;
 
-static int test_fatalerr(void)
+static int __cdecl test_fatalerr(void)
 {
     SSL_CTX *sctx = NULL, *cctx = NULL;
     SSL *sssl = NULL, *cssl = NULL;
diff --git a/test/generate_buildtest.pl b/test/generate_buildtest.pl
index f9a663bea6..dff61939c1 100644
--- a/test/generate_buildtest.pl
+++ b/test/generate_buildtest.pl
@@ -27,7 +27,7 @@ print <<"_____";
 # include <openssl/$name.h>
 #endif
 
-int main(void)
+int __cdecl main(void)
 {
     return 0;
 }
diff --git a/test/gmdifftest.c b/test/gmdifftest.c
index f7aa1a3808..6b584633ed 100644
--- a/test/gmdifftest.c
+++ b/test/gmdifftest.c
@@ -19,7 +19,7 @@
  * trigger the very errors the routines fix.
  */
 
-static int check_time(long offset)
+static int __cdecl check_time(long offset)
 {
     struct tm tm1, tm2, o1;
     int off_day, off_sec;
@@ -47,7 +47,7 @@ static int check_time(long offset)
     return 1;
 }
 
-static int test_gmtime(int offset)
+static int __cdecl test_gmtime(int offset)
 {
     return check_time(offset) &&
            check_time(-offset) &&
diff --git a/test/gosttest.c b/test/gosttest.c
index 1a31a33962..49ae201ed4 100644
--- a/test/gosttest.c
+++ b/test/gosttest.c
@@ -32,7 +32,7 @@ static struct {
 };
 
 /* Test that we never negotiate TLSv1.3 if using GOST */
-static int test_tls13(int idx)
+static int __cdecl test_tls13(int idx)
 {
     SSL_CTX *cctx = NULL, *sctx = NULL;
     SSL *clientssl = NULL, *serverssl = NULL;
diff --git a/test/handshake_helper.c b/test/handshake_helper.c
index 27ff794014..9665a838ac 100644
--- a/test/handshake_helper.c
+++ b/test/handshake_helper.c
@@ -89,7 +89,7 @@ static void ctx_data_free_data(CTX_DATA *ctx_data)
 
 static int ex_data_idx;
 
-static void info_cb(const SSL *s, int where, int ret)
+static void __cdecl info_cb(const SSL *s, int where, int ret)
 {
     if (where & SSL_CB_ALERT) {
         HANDSHAKE_EX_DATA *ex_data =
@@ -111,7 +111,7 @@ static void info_cb(const SSL *s, int where, int ret)
  * Otherwise, returns SSL_TLSEXT_ERR_ALERT_FATAL on mismatch.
  * An empty SNI extension also returns SSL_TSLEXT_ERR_NOACK.
  */
-static int select_server_ctx(SSL *s, void *arg, int ignore)
+static int __cdecl select_server_ctx(SSL *s, void *arg, int ignore)
 {
     const char *servername = SSL_get_servername(s, TLSEXT_NAMETYPE_host_name);
     HANDSHAKE_EX_DATA *ex_data =
@@ -147,7 +147,7 @@ static int select_server_ctx(SSL *s, void *arg, int ignore)
     }
 }
 
-static int client_hello_select_server_ctx(SSL *s, void *arg, int ignore)
+static int __cdecl client_hello_select_server_ctx(SSL *s, void *arg, int ignore)
 {
     const char *servername;
     const unsigned char *p;
@@ -220,17 +220,17 @@ static int client_hello_select_server_ctx(SSL *s, void *arg, int ignore)
  * configurations to ensure the state machine propagates the result
  * correctly.
  */
-static int servername_ignore_cb(SSL *s, int *ad, void *arg)
+static int __cdecl servername_ignore_cb(SSL *s, int *ad, void *arg)
 {
     return select_server_ctx(s, arg, 1);
 }
 
-static int servername_reject_cb(SSL *s, int *ad, void *arg)
+static int __cdecl servername_reject_cb(SSL *s, int *ad, void *arg)
 {
     return select_server_ctx(s, arg, 0);
 }
 
-static int client_hello_ignore_cb(SSL *s, int *al, void *arg)
+static int __cdecl client_hello_ignore_cb(SSL *s, int *al, void *arg)
 {
     if (!client_hello_select_server_ctx(s, arg, 1)) {
         *al = SSL_AD_UNRECOGNIZED_NAME;
@@ -239,7 +239,7 @@ static int client_hello_ignore_cb(SSL *s, int *al, void *arg)
     return SSL_CLIENT_HELLO_SUCCESS;
 }
 
-static int client_hello_reject_cb(SSL *s, int *al, void *arg)
+static int __cdecl client_hello_reject_cb(SSL *s, int *al, void *arg)
 {
     if (!client_hello_select_server_ctx(s, arg, 0)) {
         *al = SSL_AD_UNRECOGNIZED_NAME;
@@ -248,7 +248,7 @@ static int client_hello_reject_cb(SSL *s, int *al, void *arg)
     return SSL_CLIENT_HELLO_SUCCESS;
 }
 
-static int client_hello_nov12_cb(SSL *s, int *al, void *arg)
+static int __cdecl client_hello_nov12_cb(SSL *s, int *al, void *arg)
 {
     int ret;
     unsigned int v;
@@ -279,7 +279,7 @@ static int client_hello_nov12_cb(SSL *s, int *al, void *arg)
 static unsigned char dummy_ocsp_resp_good_val = 0xff;
 static unsigned char dummy_ocsp_resp_bad_val = 0xfe;
 
-static int server_ocsp_cb(SSL *s, void *arg)
+static int __cdecl server_ocsp_cb(SSL *s, void *arg)
 {
     unsigned char *resp;
 
@@ -296,7 +296,7 @@ static int server_ocsp_cb(SSL *s, void *arg)
     return SSL_TLSEXT_ERR_OK;
 }
 
-static int client_ocsp_cb(SSL *s, void *arg)
+static int __cdecl client_ocsp_cb(SSL *s, void *arg)
 {
     const unsigned char *resp;
     int len;
@@ -308,22 +308,22 @@ static int client_ocsp_cb(SSL *s, void *arg)
     return 1;
 }
 
-static int verify_reject_cb(X509_STORE_CTX *ctx, void *arg) {
+static int __cdecl verify_reject_cb(X509_STORE_CTX *ctx, void *arg) {
     X509_STORE_CTX_set_error(ctx, X509_V_ERR_APPLICATION_VERIFICATION);
     return 0;
 }
 
-static int verify_accept_cb(X509_STORE_CTX *ctx, void *arg) {
+static int __cdecl verify_accept_cb(X509_STORE_CTX *ctx, void *arg) {
     return 1;
 }
 
-static int broken_session_ticket_cb(SSL *s, unsigned char *key_name, unsigned char *iv,
+static int __cdecl broken_session_ticket_cb(SSL *s, unsigned char *key_name, unsigned char *iv,
                                     EVP_CIPHER_CTX *ctx, HMAC_CTX *hctx, int enc)
 {
     return 0;
 }
 
-static int do_not_call_session_ticket_cb(SSL *s, unsigned char *key_name,
+static int __cdecl do_not_call_session_ticket_cb(SSL *s, unsigned char *key_name,
                                          unsigned char *iv,
                                          EVP_CIPHER_CTX *ctx,
                                          HMAC_CTX *hctx, int enc)
@@ -335,7 +335,7 @@ static int do_not_call_session_ticket_cb(SSL *s, unsigned char *key_name,
 }
 
 /* Parse the comma-separated list into TLS format. */
-static int parse_protos(const char *protos, unsigned char **out, size_t *outlen)
+static int __cdecl parse_protos(const char *protos, unsigned char **out, size_t *outlen)
 {
     size_t len, i, prefix;
 
@@ -383,7 +383,7 @@ err:
  * protocols, or the server doesn't advertise any, it SHOULD select the first
  * protocol that it supports.
  */
-static int client_npn_cb(SSL *s, unsigned char **out, unsigned char *outlen,
+static int __cdecl client_npn_cb(SSL *s, unsigned char **out, unsigned char *outlen,
                          const unsigned char *in, unsigned int inlen,
                          void *arg)
 {
@@ -398,7 +398,7 @@ static int client_npn_cb(SSL *s, unsigned char **out, unsigned char *outlen,
         ? SSL_TLSEXT_ERR_OK : SSL_TLSEXT_ERR_ALERT_FATAL;
 }
 
-static int server_npn_cb(SSL *s, const unsigned char **data,
+static int __cdecl server_npn_cb(SSL *s, const unsigned char **data,
                          unsigned int *len, void *arg)
 {
     CTX_DATA *ctx_data = (CTX_DATA*)(arg);
@@ -414,7 +414,7 @@ static int server_npn_cb(SSL *s, const unsigned char **data,
  * supports no protocols that the client advertises, then the server SHALL
  * respond with a fatal "no_application_protocol" alert.
  */
-static int server_alpn_cb(SSL *s, const unsigned char **out,
+static int __cdecl server_alpn_cb(SSL *s, const unsigned char **out,
                           unsigned char *outlen, const unsigned char *in,
                           unsigned int inlen, void *arg)
 {
@@ -440,13 +440,13 @@ static int server_alpn_cb(SSL *s, const unsigned char **out,
 }
 
 #ifndef OPENSSL_NO_SRP
-static char *client_srp_cb(SSL *s, void *arg)
+static char * __cdecl client_srp_cb(SSL *s, void *arg)
 {
     CTX_DATA *ctx_data = (CTX_DATA*)(arg);
     return OPENSSL_strdup(ctx_data->srp_password);
 }
 
-static int server_srp_cb(SSL *s, int *ad, void *arg)
+static int __cdecl server_srp_cb(SSL *s, int *ad, void *arg)
 {
     CTX_DATA *ctx_data = (CTX_DATA*)(arg);
     if (strcmp(ctx_data->srp_user, SSL_get_srp_username(s)) != 0)
@@ -461,7 +461,7 @@ static int server_srp_cb(SSL *s, int *ad, void *arg)
 }
 #endif  /* !OPENSSL_NO_SRP */
 
-static int generate_session_ticket_cb(SSL *s, void *arg)
+static int __cdecl generate_session_ticket_cb(SSL *s, void *arg)
 {
     CTX_DATA *server_ctx_data = arg;
     SSL_SESSION *ss = SSL_get_session(s);
@@ -473,7 +473,7 @@ static int generate_session_ticket_cb(SSL *s, void *arg)
     return SSL_SESSION_set1_ticket_appdata(ss, app_data, strlen(app_data));
 }
 
-static int decrypt_session_ticket_cb(SSL *s, SSL_SESSION *ss,
+static int __cdecl decrypt_session_ticket_cb(SSL *s, SSL_SESSION *ss,
                                      const unsigned char *keyname,
                                      size_t keyname_len,
                                      SSL_TICKET_STATUS status,
@@ -497,7 +497,7 @@ static int decrypt_session_ticket_cb(SSL *s, SSL_SESSION *ss,
  * Configure callbacks and other properties that can't be set directly
  * in the server/client CONF.
  */
-static int configure_handshake_ctx(SSL_CTX *server_ctx, SSL_CTX *server2_ctx,
+static int __cdecl configure_handshake_ctx(SSL_CTX *server_ctx, SSL_CTX *server2_ctx,
                                    SSL_CTX *client_ctx,
                                    const SSL_TEST_CTX *test,
                                    const SSL_TEST_EXTRA_CONF *extra,
@@ -756,7 +756,7 @@ typedef struct peer_st {
     peer_status_t status;
 } PEER;
 
-static int create_peer(PEER *peer, SSL_CTX *ctx)
+static int __cdecl create_peer(PEER *peer, SSL_CTX *ctx)
 {
     static const int peer_buffer_size = 64 * 1024;
     SSL *ssl = NULL;
@@ -1084,7 +1084,7 @@ typedef enum {
 } connect_phase_t;
 
 
-static int renegotiate_op(const SSL_TEST_CTX *test_ctx)
+static int __cdecl renegotiate_op(const SSL_TEST_CTX *test_ctx)
 {
     switch (test_ctx->handshake_mode) {
     case SSL_TEST_HANDSHAKE_RENEG_SERVER:
@@ -1094,7 +1094,7 @@ static int renegotiate_op(const SSL_TEST_CTX *test_ctx)
         return 0;
     }
 }
-static int post_handshake_op(const SSL_TEST_CTX *test_ctx)
+static int __cdecl post_handshake_op(const SSL_TEST_CTX *test_ctx)
 {
     switch (test_ctx->handshake_mode) {
     case SSL_TEST_HANDSHAKE_KEY_UPDATE_CLIENT:
@@ -1257,7 +1257,7 @@ static char *dup_str(const unsigned char *in, size_t len)
     return ret;
 }
 
-static int pkey_type(EVP_PKEY *pkey)
+static int __cdecl pkey_type(EVP_PKEY *pkey)
 {
     int nid = EVP_PKEY_id(pkey);
 
@@ -1270,7 +1270,7 @@ static int pkey_type(EVP_PKEY *pkey)
     return nid;
 }
 
-static int peer_pkey_type(SSL *s)
+static int __cdecl peer_pkey_type(SSL *s)
 {
     X509 *x = SSL_get_peer_certificate(s);
 
@@ -1284,7 +1284,7 @@ static int peer_pkey_type(SSL *s)
 }
 
 #if !defined(OPENSSL_NO_SCTP) && !defined(OPENSSL_NO_SOCK)
-static int set_sock_as_sctp(int sock)
+static int __cdecl set_sock_as_sctp(int sock)
 {
     struct sctp_assocparams assocparams;
     struct sctp_rtoinfo rto_info;
@@ -1321,7 +1321,7 @@ static int set_sock_as_sctp(int sock)
     return 1;
 }
 
-static int create_sctp_socks(int *ssock, int *csock)
+static int __cdecl create_sctp_socks(int *ssock, int *csock)
 {
     BIO_ADDRINFO *res = NULL;
     const BIO_ADDRINFO *ai = NULL;
diff --git a/test/hmactest.c b/test/hmactest.c
index ca775773a6..9ff459d4b8 100644
--- a/test/hmactest.c
+++ b/test/hmactest.c
@@ -83,7 +83,7 @@ static char *pt(unsigned char *md, unsigned int len);
 
 
 # ifndef OPENSSL_NO_MD5
-static int test_hmac_md5(int idx)
+static int __cdecl test_hmac_md5(int idx)
 {
     char *p;
 #  ifdef CHARSET_EBCDIC
@@ -105,7 +105,7 @@ static int test_hmac_md5(int idx)
 }
 # endif
 
-static int test_hmac_bad(void)
+static int __cdecl test_hmac_bad(void)
 {
     HMAC_CTX *ctx = NULL;
     int ret = 0;
@@ -125,7 +125,7 @@ err:
     return ret;
 }
 
-static int test_hmac_run(void)
+static int __cdecl test_hmac_run(void)
 {
     char *p;
     HMAC_CTX *ctx = NULL;
@@ -180,7 +180,7 @@ err:
 }
 
 
-static int test_hmac_single_shot(void)
+static int __cdecl test_hmac_single_shot(void)
 {
     char *p;
 
@@ -194,7 +194,7 @@ static int test_hmac_single_shot(void)
 }
 
 
-static int test_hmac_copy(void)
+static int __cdecl test_hmac_copy(void)
 {
     char *p;
     HMAC_CTX *ctx = NULL, *ctx2 = NULL;
diff --git a/test/ideatest.c b/test/ideatest.c
index c80e18f80a..b6cfb9ee60 100644
--- a/test/ideatest.c
+++ b/test/ideatest.c
@@ -51,7 +51,7 @@ static const unsigned char cfb_cipher64[CFB_TEST_SIZE] = {
     0x3D,0x1E,0xAE,0x47,0xFC,0xCF,0x29,0x0B,*/
 };
 
-static int test_idea_ecb(void)
+static int __cdecl test_idea_ecb(void)
 {
     IDEA_KEY_SCHEDULE key, dkey;
 
@@ -65,7 +65,7 @@ static int test_idea_ecb(void)
     return TEST_mem_eq(out, IDEA_BLOCK, in, sizeof(in));
 }
 
-static int test_idea_cbc(void)
+static int __cdecl test_idea_cbc(void)
 {
     IDEA_KEY_SCHEDULE key, dkey;
     unsigned char iv[IDEA_BLOCK];
@@ -81,7 +81,7 @@ static int test_idea_cbc(void)
     return TEST_mem_eq(text, text_len, out, text_len);
 }
 
-static int test_idea_cfb64(void)
+static int __cdecl test_idea_cfb64(void)
 {
     IDEA_KEY_SCHEDULE eks, dks;
     int n;
diff --git a/test/igetest.c b/test/igetest.c
index fd1089d273..76a5fc67a8 100644
--- a/test/igetest.c
+++ b/test/igetest.c
@@ -141,7 +141,7 @@ static struct bi_ige_test const bi_ige_test_vectors[] = {
 
 };
 
-static int test_ige_vectors(int n)
+static int __cdecl test_ige_vectors(int n)
 {
     const struct ige_test *const v = &ige_test_vectors[n];
     AES_KEY key;
@@ -183,7 +183,7 @@ static int test_ige_vectors(int n)
     return testresult;
 }
 
-static int test_bi_ige_vectors(int n)
+static int __cdecl test_bi_ige_vectors(int n)
 {
     const struct bi_ige_test *const v = &bi_ige_test_vectors[n];
     AES_KEY key1;
@@ -215,7 +215,7 @@ static int test_bi_ige_vectors(int n)
     return 1;
 }
 
-static int test_ige_enc_dec(void)
+static int __cdecl test_ige_enc_dec(void)
 {
     AES_KEY key;
     unsigned char iv[AES_BLOCK_SIZE * 4];
@@ -233,7 +233,7 @@ static int test_ige_enc_dec(void)
     return TEST_mem_eq(checktext, TEST_SIZE, plaintext, TEST_SIZE);
 }
 
-static int test_ige_enc_chaining(void)
+static int __cdecl test_ige_enc_chaining(void)
 {
     AES_KEY key;
     unsigned char iv[AES_BLOCK_SIZE * 4];
@@ -255,7 +255,7 @@ static int test_ige_enc_chaining(void)
     return TEST_mem_eq(checktext, TEST_SIZE, plaintext, TEST_SIZE);
 }
 
-static int test_ige_dec_chaining(void)
+static int __cdecl test_ige_dec_chaining(void)
 {
     AES_KEY key;
     unsigned char iv[AES_BLOCK_SIZE * 4];
@@ -281,7 +281,7 @@ static int test_ige_dec_chaining(void)
     return TEST_mem_eq(checktext, TEST_SIZE, plaintext, TEST_SIZE);
 }
 
-static int test_ige_garble_forwards(void)
+static int __cdecl test_ige_garble_forwards(void)
 {
     AES_KEY key;
     unsigned char iv[AES_BLOCK_SIZE * 4];
@@ -319,7 +319,7 @@ static int test_ige_garble_forwards(void)
     return testresult;
 }
 
-static int test_bi_ige_enc_dec(void)
+static int __cdecl test_bi_ige_enc_dec(void)
 {
     AES_KEY key, key2;
     unsigned char iv[AES_BLOCK_SIZE * 4];
@@ -340,7 +340,7 @@ static int test_bi_ige_enc_dec(void)
     return TEST_mem_eq(checktext, TEST_SIZE, plaintext, TEST_SIZE);
 }
 
-static int test_bi_ige_garble1(void)
+static int __cdecl test_bi_ige_garble1(void)
 {
     AES_KEY key, key2;
     unsigned char iv[AES_BLOCK_SIZE * 4];
@@ -371,7 +371,7 @@ static int test_bi_ige_garble1(void)
     return TEST_size_t_le(matches, sizeof(checktext) / 100);
 }
 
-static int test_bi_ige_garble2(void)
+static int __cdecl test_bi_ige_garble2(void)
 {
     AES_KEY key, key2;
     unsigned char iv[AES_BLOCK_SIZE * 4];
@@ -402,7 +402,7 @@ static int test_bi_ige_garble2(void)
     return TEST_size_t_le(matches, sizeof(checktext) / 100);
 }
 
-static int test_bi_ige_garble3(void)
+static int __cdecl test_bi_ige_garble3(void)
 {
     AES_KEY key, key2;
     unsigned char iv[AES_BLOCK_SIZE * 4];
diff --git a/test/lhash_test.c b/test/lhash_test.c
index 162286b7cd..b029811793 100644
--- a/test/lhash_test.c
+++ b/test/lhash_test.c
@@ -34,17 +34,17 @@ static int int_tests[] = { 65537, 13, 1, 3, -5, 6, 7, 4, -10, -12, -14, 22, 9,
 static const unsigned int n_int_tests = OSSL_NELEM(int_tests);
 static short int_found[OSSL_NELEM(int_tests)];
 
-static unsigned long int int_hash(const int *p)
+static unsigned long int __cdecl int_hash(const int *p)
 {
     return 3 & *p;      /* To force collisions */
 }
 
-static int int_cmp(const int *p, const int *q)
+static int __cdecl int_cmp(const int *p, const int *q)
 {
     return *p != *q;
 }
 
-static int int_find(int n)
+static int __cdecl int_find(int n)
 {
     unsigned int i;
 
@@ -66,7 +66,7 @@ static void int_doall_arg(int *p, short *f)
 
 IMPLEMENT_LHASH_DOALL_ARG(int, short);
 
-static int test_int_lhash(void)
+static int __cdecl test_int_lhash(void)
 {
     static struct {
         int data;
@@ -159,12 +159,12 @@ end:
     return testresult;
 }
 
-static unsigned long int stress_hash(const int *p)
+static unsigned long int __cdecl stress_hash(const int *p)
 {
     return *p;
 }
 
-static int test_stress(void)
+static int __cdecl test_stress(void)
 {
     LHASH_OF(int) *h = lh_int_new(&stress_hash, &int_cmp);
     const unsigned int n = 2500000;
diff --git a/test/mdc2_internal_test.c b/test/mdc2_internal_test.c
index 01e30fdd91..0dfb031122 100644
--- a/test/mdc2_internal_test.c
+++ b/test/mdc2_internal_test.c
@@ -44,7 +44,7 @@ static TESTDATA tests[] = {
  *
  ***/
 
-static int test_mdc2(int idx)
+static int __cdecl test_mdc2(int idx)
 {
     unsigned char md[MDC2_DIGEST_LENGTH];
     MDC2_CTX c;
diff --git a/test/mdc2test.c b/test/mdc2test.c
index 0658843ce5..6d93d57c6a 100644
--- a/test/mdc2test.c
+++ b/test/mdc2test.c
@@ -34,7 +34,7 @@ static unsigned char pad2[16] = {
     0x35, 0xD8, 0x7A, 0xFE, 0xAB, 0x33, 0xBE, 0xE2
 };
 
-static int test_mdc2(void)
+static int __cdecl test_mdc2(void)
 {
     int testresult = 0;
     unsigned char md[MDC2_DIGEST_LENGTH];
diff --git a/test/memleaktest.c b/test/memleaktest.c
index d239bd23b8..6179fa76ed 100644
--- a/test/memleaktest.c
+++ b/test/memleaktest.c
@@ -23,7 +23,7 @@
  * but that is worse than avoiding the test framework's main.
  */
 
-int main(int argc, char *argv[])
+int __cdecl main(int argc, char *argv[])
 {
 #ifndef OPENSSL_NO_CRYPTO_MDEBUG
     char *p;
diff --git a/test/modes_internal_test.c b/test/modes_internal_test.c
index e0f1adf6af..4ad1b1691e 100644
--- a/test/modes_internal_test.c
+++ b/test/modes_internal_test.c
@@ -127,18 +127,18 @@ typedef struct {
     const char *case_name;
     size_t (*last_blocks_correction)(const unsigned char *in,
                                      unsigned char *out, size_t len);
-    size_t (*encrypt_block)(const unsigned char *in,
+    size_t (__cdecl *encrypt_block)(const unsigned char *in,
                             unsigned char *out, size_t len,
                             const void *key, unsigned char ivec[16],
                             block128_f block);
-    size_t (*encrypt_stream)(const unsigned char *in, unsigned char *out,
+    size_t (__cdecl *encrypt_stream)(const unsigned char *in, unsigned char *out,
                              size_t len, const void *key,
                              unsigned char ivec[16], cbc128_f cbc);
-    size_t (*decrypt_block)(const unsigned char *in,
+    size_t (__cdecl *decrypt_block)(const unsigned char *in,
                             unsigned char *out, size_t len,
                             const void *key, unsigned char ivec[16],
                             block128_f block);
-    size_t (*decrypt_stream)(const unsigned char *in, unsigned char *out,
+    size_t (__cdecl *decrypt_stream)(const unsigned char *in, unsigned char *out,
                              size_t len, const void *key,
                              unsigned char ivec[16], cbc128_f cbc);
 } CTS128_FIXTURE;
@@ -174,7 +174,7 @@ static size_t last_blocks_correction_nist(const unsigned char *in,
     return tail;
 }
 
-static int execute_cts128(const CTS128_FIXTURE *fixture, int num)
+static int __cdecl execute_cts128(const CTS128_FIXTURE *fixture, int num)
 {
     const unsigned char *test_iv = cts128_test_iv;
     size_t test_iv_len = sizeof(cts128_test_iv);
@@ -234,7 +234,7 @@ static int execute_cts128(const CTS128_FIXTURE *fixture, int num)
     return 1;
 }
 
-static int test_aes_cts128(int idx)
+static int __cdecl test_aes_cts128(int idx)
 {
     static const CTS128_FIXTURE fixture_cts128 = {
         "aes_cts128", last_blocks_correction,
@@ -245,7 +245,7 @@ static int test_aes_cts128(int idx)
     return execute_cts128(&fixture_cts128, idx);
 }
 
-static int test_aes_cts128_nist(int idx)
+static int __cdecl test_aes_cts128_nist(int idx)
 {
     static const CTS128_FIXTURE fixture_cts128_nist = {
         "aes_cts128_nist", last_blocks_correction_nist,
@@ -835,7 +835,7 @@ static struct gcm128_data {
     GCM128_TEST_VECTOR(20)
 };
 
-static int test_gcm128(int idx)
+static int __cdecl test_gcm128(int idx)
 {
     unsigned char out[512];
     SIZED_DATA K = gcm128_vectors[idx].K;
diff --git a/test/ocspapitest.c b/test/ocspapitest.c
index 8e9b7c0a9c..e00f56b846 100644
--- a/test/ocspapitest.c
+++ b/test/ocspapitest.c
@@ -22,7 +22,7 @@ static const char *certstr;
 static const char *privkeystr;
 
 #ifndef OPENSSL_NO_OCSP
-static int get_cert_and_key(X509 **cert_out, EVP_PKEY **key_out)
+static int __cdecl get_cert_and_key(X509 **cert_out, EVP_PKEY **key_out)
 {
     BIO *certbio, *keybio;
     X509 *cert = NULL;
@@ -47,7 +47,7 @@ static int get_cert_and_key(X509 **cert_out, EVP_PKEY **key_out)
     return 0;
 }
 
-static int get_cert(X509 **cert_out)
+static int __cdecl get_cert(X509 **cert_out)
 {
     BIO *certbio;
     X509 *cert = NULL;
@@ -105,7 +105,7 @@ static OCSP_BASICRESP *make_dummy_resp(void)
     return bs_out;
 }
 
-static int test_resp_signer(void)
+static int __cdecl test_resp_signer(void)
 {
     OCSP_BASICRESP *bs = NULL;
     X509 *signer = NULL, *tmp;
@@ -150,7 +150,7 @@ static int test_resp_signer(void)
     return ret;
 }
 
-static int test_access_description(int testcase)
+static int __cdecl test_access_description(int testcase)
 {
     ACCESS_DESCRIPTION *ad = ACCESS_DESCRIPTION_new();
     int ret = 0;
@@ -180,7 +180,7 @@ err:
     return ret;
 }
 
-static int test_ocsp_url_svcloc_new(void)
+static int __cdecl test_ocsp_url_svcloc_new(void)
 {
     static const char *  urls[] = {
         "www.openssl.org",
diff --git a/test/ossl_shim/ossl_shim.cc b/test/ossl_shim/ossl_shim.cc
index 90d1f1ef40..a38fe0fdc9 100644
--- a/test/ossl_shim/ossl_shim.cc
+++ b/test/ossl_shim/ossl_shim.cc
@@ -1295,6 +1295,6 @@ static int Main(int argc, char **argv) {
 
 }  // namespace bssl
 
-int main(int argc, char **argv) {
+int __cdecl main(int argc, char **argv) {
   return bssl::Main(argc, argv);
 }
diff --git a/test/packettest.c b/test/packettest.c
index e58d8d8bcf..82131ff820 100644
--- a/test/packettest.c
+++ b/test/packettest.c
@@ -14,7 +14,7 @@
 
 static unsigned char smbuf[BUF_LEN];
 
-static int test_PACKET_remaining(void)
+static int __cdecl test_PACKET_remaining(void)
 {
     PACKET pkt;
 
@@ -29,7 +29,7 @@ static int test_PACKET_remaining(void)
     return 1;
 }
 
-static int test_PACKET_end(void)
+static int __cdecl test_PACKET_end(void)
 {
     PACKET pkt;
 
@@ -45,7 +45,7 @@ static int test_PACKET_end(void)
     return 1;
 }
 
-static int test_PACKET_get_1(void)
+static int __cdecl test_PACKET_get_1(void)
 {
     unsigned int i = 0;
     PACKET pkt;
@@ -62,7 +62,7 @@ static int test_PACKET_get_1(void)
     return 1;
 }
 
-static int test_PACKET_get_4(void)
+static int __cdecl test_PACKET_get_4(void)
 {
     unsigned long i = 0;
     PACKET pkt;
@@ -79,7 +79,7 @@ static int test_PACKET_get_4(void)
     return 1;
 }
 
-static int test_PACKET_get_net_2(void)
+static int __cdecl test_PACKET_get_net_2(void)
 {
     unsigned int i = 0;
     PACKET pkt;
@@ -96,7 +96,7 @@ static int test_PACKET_get_net_2(void)
     return 1;
 }
 
-static int test_PACKET_get_net_3(void)
+static int __cdecl test_PACKET_get_net_3(void)
 {
     unsigned long i = 0;
     PACKET pkt;
@@ -113,7 +113,7 @@ static int test_PACKET_get_net_3(void)
     return 1;
 }
 
-static int test_PACKET_get_net_4(void)
+static int __cdecl test_PACKET_get_net_4(void)
 {
     unsigned long i = 0;
     PACKET pkt;
@@ -130,7 +130,7 @@ static int test_PACKET_get_net_4(void)
     return 1;
 }
 
-static int test_PACKET_get_sub_packet(void)
+static int __cdecl test_PACKET_get_sub_packet(void)
 {
     PACKET pkt, subpkt;
     unsigned long i = 0;
@@ -151,7 +151,7 @@ static int test_PACKET_get_sub_packet(void)
     return 1;
 }
 
-static int test_PACKET_get_bytes(void)
+static int __cdecl test_PACKET_get_bytes(void)
 {
     const unsigned char *bytes = NULL;
     PACKET pkt;
@@ -175,7 +175,7 @@ static int test_PACKET_get_bytes(void)
     return 1;
 }
 
-static int test_PACKET_copy_bytes(void)
+static int __cdecl test_PACKET_copy_bytes(void)
 {
     unsigned char bytes[4];
     PACKET pkt;
@@ -199,7 +199,7 @@ static int test_PACKET_copy_bytes(void)
     return 1;
 }
 
-static int test_PACKET_copy_all(void)
+static int __cdecl test_PACKET_copy_all(void)
 {
     unsigned char tmp[BUF_LEN];
     PACKET pkt;
@@ -216,7 +216,7 @@ static int test_PACKET_copy_all(void)
     return 1;
 }
 
-static int test_PACKET_memdup(void)
+static int __cdecl test_PACKET_memdup(void)
 {
     unsigned char *data = NULL;
     size_t len;
@@ -238,7 +238,7 @@ end:
     return result;
 }
 
-static int test_PACKET_strndup(void)
+static int __cdecl test_PACKET_strndup(void)
 {
     char buf1[10], buf2[10];
     char *data = NULL;
@@ -265,7 +265,7 @@ end:
     return result;
 }
 
-static int test_PACKET_contains_zero_byte(void)
+static int __cdecl test_PACKET_contains_zero_byte(void)
 {
     char buf1[10], buf2[10];
     PACKET pkt;
@@ -283,7 +283,7 @@ static int test_PACKET_contains_zero_byte(void)
     return 1;
 }
 
-static int test_PACKET_forward(void)
+static int __cdecl test_PACKET_forward(void)
 {
     const unsigned char *byte = NULL;
     PACKET pkt;
@@ -300,7 +300,7 @@ static int test_PACKET_forward(void)
     return 1;
 }
 
-static int test_PACKET_buf_init(void)
+static int __cdecl test_PACKET_buf_init(void)
 {
     unsigned char buf1[BUF_LEN];
     PACKET pkt;
@@ -316,7 +316,7 @@ static int test_PACKET_buf_init(void)
     return 1;
 }
 
-static int test_PACKET_null_init(void)
+static int __cdecl test_PACKET_null_init(void)
 {
     PACKET pkt;
 
@@ -328,7 +328,7 @@ static int test_PACKET_null_init(void)
     return 1;
 }
 
-static int test_PACKET_equal(void)
+static int __cdecl test_PACKET_equal(void)
 {
     PACKET pkt;
 
@@ -345,7 +345,7 @@ static int test_PACKET_equal(void)
     return 1;
 }
 
-static int test_PACKET_get_length_prefixed_1(void)
+static int __cdecl test_PACKET_get_length_prefixed_1(void)
 {
     unsigned char buf1[BUF_LEN];
     const size_t len = 16;
@@ -369,7 +369,7 @@ static int test_PACKET_get_length_prefixed_1(void)
     return 1;
 }
 
-static int test_PACKET_get_length_prefixed_2(void)
+static int __cdecl test_PACKET_get_length_prefixed_2(void)
 {
     unsigned char buf1[1024];
     const size_t len = 516;  /* 0x0204 */
@@ -392,7 +392,7 @@ static int test_PACKET_get_length_prefixed_2(void)
     return 1;
 }
 
-static int test_PACKET_get_length_prefixed_3(void)
+static int __cdecl test_PACKET_get_length_prefixed_3(void)
 {
     unsigned char buf1[1024];
     const size_t len = 516;  /* 0x000204 */
@@ -415,7 +415,7 @@ static int test_PACKET_get_length_prefixed_3(void)
     return 1;
 }
 
-static int test_PACKET_as_length_prefixed_1(void)
+static int __cdecl test_PACKET_as_length_prefixed_1(void)
 {
     unsigned char buf1[BUF_LEN];
     const size_t len = 16;
@@ -438,7 +438,7 @@ static int test_PACKET_as_length_prefixed_1(void)
     return 1;
 }
 
-static int test_PACKET_as_length_prefixed_2(void)
+static int __cdecl test_PACKET_as_length_prefixed_2(void)
 {
     unsigned char buf[1024];
     const size_t len = 516;  /* 0x0204 */
diff --git a/test/pbelutest.c b/test/pbelutest.c
index 3ed5e96726..f7b3895f51 100644
--- a/test/pbelutest.c
+++ b/test/pbelutest.c
@@ -15,7 +15,7 @@
  * Attempt to look up all supported algorithms.
  */
 
-static int test_pbelu(void)
+static int __cdecl test_pbelu(void)
 {
     int i, failed = 0;
     int pbe_type, pbe_nid, last_type = -1, last_nid = -1;
diff --git a/test/pemtest.c b/test/pemtest.c
index 3203d976be..8ab9bb4267 100644
--- a/test/pemtest.c
+++ b/test/pemtest.c
@@ -28,7 +28,7 @@ static TESTDATA b64_pem_data[] = {
 
 static const char *pemtype = "PEMTESTDATA";
 
-static int test_b64(int idx)
+static int __cdecl test_b64(int idx)
 {
     BIO *b = BIO_new(BIO_s_mem());
     char *name = NULL, *header = NULL;
@@ -58,7 +58,7 @@ static int test_b64(int idx)
     return ret;
 }
 
-static int test_invalid(void)
+static int __cdecl test_invalid(void)
 {
     BIO *b = BIO_new(BIO_s_mem());
     char *name = NULL, *header = NULL;
diff --git a/test/pkey_meth_kdf_test.c b/test/pkey_meth_kdf_test.c
index f2abcf3ede..2656ef69ac 100644
--- a/test/pkey_meth_kdf_test.c
+++ b/test/pkey_meth_kdf_test.c
@@ -16,7 +16,7 @@
 #include <openssl/kdf.h>
 #include "testutil.h"
 
-static int test_kdf_tls1_prf(void)
+static int __cdecl test_kdf_tls1_prf(void)
 {
     EVP_PKEY_CTX *pctx;
     unsigned char out[16];
@@ -57,7 +57,7 @@ static int test_kdf_tls1_prf(void)
     return 1;
 }
 
-static int test_kdf_hkdf(void)
+static int __cdecl test_kdf_hkdf(void)
 {
     EVP_PKEY_CTX *pctx;
     unsigned char out[10];
@@ -102,7 +102,7 @@ static int test_kdf_hkdf(void)
 }
 
 #ifndef OPENSSL_NO_SCRYPT
-static int test_kdf_scrypt(void)
+static int __cdecl test_kdf_scrypt(void)
 {
     EVP_PKEY_CTX *pctx;
     unsigned char out[64];
diff --git a/test/pkey_meth_test.c b/test/pkey_meth_test.c
index 76537d7c17..4135646ac2 100644
--- a/test/pkey_meth_test.c
+++ b/test/pkey_meth_test.c
@@ -16,7 +16,7 @@
 #include "testutil.h"
 
 /* Test of EVP_PKEY_ASN1_METHOD ordering */
-static int test_asn1_meths(void)
+static int __cdecl test_asn1_meths(void)
 {
     int i;
     int prev = -1;
@@ -48,7 +48,7 @@ static int test_asn1_meths(void)
 }
 
 /* Test of EVP_PKEY_METHOD ordering */
-static int test_pkey_meths(void)
+static int __cdecl test_pkey_meths(void)
 {
     size_t i;
     int prev = -1;
diff --git a/test/poly1305_internal_test.c b/test/poly1305_internal_test.c
index 7f7a9e39c5..e16c331863 100644
--- a/test/poly1305_internal_test.c
+++ b/test/poly1305_internal_test.c
@@ -1504,7 +1504,7 @@ static TESTDATA tests[] = {
     }
 };
 
-static int test_poly1305(int idx)
+static int __cdecl test_poly1305(int idx)
 {
     POLY1305 poly1305;
     const TESTDATA test = tests[idx];
diff --git a/test/rc2test.c b/test/rc2test.c
index e64d1a7285..beca00a8de 100644
--- a/test/rc2test.c
+++ b/test/rc2test.c
@@ -38,7 +38,7 @@ static unsigned char RC2cipher[4][8] = {
     {0x50, 0xDC, 0x01, 0x62, 0xBD, 0x75, 0x7F, 0x31},
 };
 
-static int test_rc2(const int n)
+static int __cdecl test_rc2(const int n)
 {
     int testresult = 1;
     RC2_KEY key;
diff --git a/test/rc4test.c b/test/rc4test.c
index 15706ea3f0..603367c35f 100644
--- a/test/rc4test.c
+++ b/test/rc4test.c
@@ -55,7 +55,7 @@ static unsigned char output[6][30] = {
     {0xd6, 0xa1, 0x41, 0xa7, 0xec, 0x3c, 0x38, 0xdf, 0xbd, 0x61, 0x00},
 };
 
-static int test_rc4_encrypt(const int i)
+static int __cdecl test_rc4_encrypt(const int i)
 {
     unsigned char obuf[512];
     RC4_KEY key;
@@ -66,7 +66,7 @@ static int test_rc4_encrypt(const int i)
     return TEST_mem_eq(obuf, data_len[i] + 1, output[i], data_len[i] + 1);
 }
 
-static int test_rc4_end_processing(const int i)
+static int __cdecl test_rc4_end_processing(const int i)
 {
     unsigned char obuf[512];
     RC4_KEY key;
@@ -79,7 +79,7 @@ static int test_rc4_end_processing(const int i)
     return TEST_uchar_eq(obuf[i], 0);
 }
 
-static int test_rc4_multi_call(const int i)
+static int __cdecl test_rc4_multi_call(const int i)
 {
     unsigned char obuf[512];
     RC4_KEY key;
@@ -91,7 +91,7 @@ static int test_rc4_multi_call(const int i)
     return TEST_mem_eq(obuf, data_len[3] + 1, output[3], data_len[3] + 1);
 }
 
-static int test_rc_bulk(void)
+static int __cdecl test_rc_bulk(void)
 {
     RC4_KEY key;
     unsigned char buf[513];
diff --git a/test/recordlentest.c b/test/recordlentest.c
index 457335d308..660962499e 100644
--- a/test/recordlentest.c
+++ b/test/recordlentest.c
@@ -24,7 +24,7 @@ static char *privkey = NULL;
 
 #define TOTAL_RECORD_OVERFLOW_TESTS 6
 
-static int write_record(BIO *b, size_t len, int rectype, int recversion)
+static int __cdecl write_record(BIO *b, size_t len, int rectype, int recversion)
 {
     unsigned char header[SSL3_RT_HEADER_LENGTH];
     size_t written;
@@ -60,7 +60,7 @@ static int write_record(BIO *b, size_t len, int rectype, int recversion)
     return 1;
 }
 
-static int fail_due_to_record_overflow(int enc)
+static int __cdecl fail_due_to_record_overflow(int enc)
 {
     long err = ERR_peek_error();
     int reason;
@@ -77,7 +77,7 @@ static int fail_due_to_record_overflow(int enc)
     return 0;
 }
 
-static int test_record_overflow(int idx)
+static int __cdecl test_record_overflow(int idx)
 {
     SSL_CTX *cctx = NULL, *sctx = NULL;
     SSL *clientssl = NULL, *serverssl = NULL;
diff --git a/test/rsa_complex.c b/test/rsa_complex.c
index fac581254a..55564a2d0a 100644
--- a/test/rsa_complex.c
+++ b/test/rsa_complex.c
@@ -20,7 +20,7 @@
 #include <openssl/rsa.h>
 #include <stdlib.h>
 
-int main(int argc, char *argv[])
+int __cdecl main(int argc, char *argv[])
 {
     /* There are explicitly no run time checks for this one */
     return EXIT_SUCCESS;
diff --git a/test/rsa_mp_test.c b/test/rsa_mp_test.c
index a7d4c589e6..00ab57bbc7 100644
--- a/test/rsa_mp_test.c
+++ b/test/rsa_mp_test.c
@@ -25,7 +25,7 @@
 
 #define NUM_EXTRA_PRIMES 1
 
-static int key2048p3(RSA *key)
+static int __cdecl key2048p3(RSA *key)
 {
     /* C90 requires string should <= 509 bytes */
     static const unsigned char n[] =
@@ -183,7 +183,7 @@ static int key2048p3(RSA *key)
     goto ret;
 }
 
-static int test_rsa_mp(void)
+static int __cdecl test_rsa_mp(void)
 {
     int ret = 0;
     RSA *key;
diff --git a/test/rsa_test.c b/test/rsa_test.c
index 3820785edc..365c8f3f7d 100644
--- a/test/rsa_test.c
+++ b/test/rsa_test.c
@@ -45,7 +45,7 @@ int setup_tests(void)
     memcpy(c, ctext_ex, sizeof(ctext_ex) - 1);                  \
     return sizeof(ctext_ex) - 1;
 
-static int key1(RSA *key, unsigned char *c)
+static int __cdecl key1(RSA *key, unsigned char *c)
 {
     static unsigned char n[] =
         "\x00\xAA\x36\xAB\xCE\x88\xAC\xFD\xFF\x55\x52\x3C\x7F\xC4\x52\x3F"
@@ -94,7 +94,7 @@ static int key1(RSA *key, unsigned char *c)
     SetKey;
 }
 
-static int key2(RSA *key, unsigned char *c)
+static int __cdecl key2(RSA *key, unsigned char *c)
 {
     static unsigned char n[] =
         "\x00\xA3\x07\x9A\x90\xDF\x0D\xFD\x72\xAC\x09\x0C\xCC\x2A\x78\xB8"
@@ -139,7 +139,7 @@ static int key2(RSA *key, unsigned char *c)
     SetKey;
 }
 
-static int key3(RSA *key, unsigned char *c)
+static int __cdecl key3(RSA *key, unsigned char *c)
 {
     static unsigned char n[] =
         "\x00\xBB\xF8\x2F\x09\x06\x82\xCE\x9C\x23\x38\xAC\x2B\x9D\xA8\x71"
@@ -211,7 +211,7 @@ static int key3(RSA *key, unsigned char *c)
     SetKey;
 }
 
-static int pad_unknown(void)
+static int __cdecl pad_unknown(void)
 {
     unsigned long l;
     while ((l = ERR_get_error()) != 0)
@@ -220,7 +220,7 @@ static int pad_unknown(void)
     return 0;
 }
 
-static int rsa_setkey(RSA** key, unsigned char* ctext, int idx)
+static int __cdecl rsa_setkey(RSA** key, unsigned char* ctext, int idx)
 {
     int clen = 0;
     *key = RSA_new();
@@ -238,7 +238,7 @@ static int rsa_setkey(RSA** key, unsigned char* ctext, int idx)
     return clen;
 }
 
-static int test_rsa_pkcs1(int idx)
+static int __cdecl test_rsa_pkcs1(int idx)
 {
     int ret = 0;
     RSA *key;
@@ -268,7 +268,7 @@ err:
     return ret;
 }
 
-static int test_rsa_sslv23(int idx)
+static int __cdecl test_rsa_sslv23(int idx)
 {
     int ret = 0;
     RSA *key;
@@ -298,7 +298,7 @@ err:
     return ret;
 }
 
-static int test_rsa_oaep(int idx)
+static int __cdecl test_rsa_oaep(int idx)
 {
     int ret = 0;
     RSA *key;
diff --git a/test/sanitytest.c b/test/sanitytest.c
index 204c01c244..15985b573e 100644
--- a/test/sanitytest.c
+++ b/test/sanitytest.c
@@ -11,7 +11,7 @@
 #include "testutil.h"
 #include "internal/numbers.h"
 
-static int test_sanity_null_zero(void)
+static int __cdecl test_sanity_null_zero(void)
 {
     char *p;
     char bytes[sizeof(p)];
@@ -22,7 +22,7 @@ static int test_sanity_null_zero(void)
     return TEST_mem_eq(&p, sizeof(p), bytes, sizeof(bytes));
 }
 
-static int test_sanity_enum_size(void)
+static int __cdecl test_sanity_enum_size(void)
 {
     enum smallchoices { sa, sb, sc };
     enum medchoices { ma, mb, mc, md, me, mf, mg, mh, mi, mj, mk, ml };
@@ -47,7 +47,7 @@ static int test_sanity_enum_size(void)
     return 1;
 }
 
-static int test_sanity_twos_complement(void)
+static int __cdecl test_sanity_twos_complement(void)
 {
     /* Basic two's complement checks. */
     if (!TEST_int_eq(~(-1), 0)
@@ -56,7 +56,7 @@ static int test_sanity_twos_complement(void)
     return 1;
 }
 
-static int test_sanity_sign(void)
+static int __cdecl test_sanity_sign(void)
 {
     /* Check that values with sign bit 1 and value bits 0 are valid */
     if (!TEST_int_eq(-(INT_MIN + 1), INT_MAX)
@@ -65,7 +65,7 @@ static int test_sanity_sign(void)
     return 1;
 }
 
-static int test_sanity_unsigned_conversion(void)
+static int __cdecl test_sanity_unsigned_conversion(void)
 {
     /* Check that unsigned-to-signed conversions preserve bit patterns */
     if (!TEST_int_eq((int)((unsigned int)INT_MAX + 1), INT_MIN)
@@ -74,7 +74,7 @@ static int test_sanity_unsigned_conversion(void)
     return 1;
 }
 
-static int test_sanity_range(void)
+static int __cdecl test_sanity_range(void)
 {
     /* This isn't possible to check using the framework functions */
     if (SIZE_MAX < INT_MAX) {
@@ -84,7 +84,7 @@ static int test_sanity_range(void)
     return 1;
 }
 
-static int test_sanity_memcmp(void)
+static int __cdecl test_sanity_memcmp(void)
 {
     return CRYPTO_memcmp("ab","cd",2);
 }
diff --git a/test/secmemtest.c b/test/secmemtest.c
index 42aeb5d0cf..7acfe03d43 100644
--- a/test/secmemtest.c
+++ b/test/secmemtest.c
@@ -12,7 +12,7 @@
 #include "testutil.h"
 #include "../e_os.h"
 
-static int test_sec_mem(void)
+static int __cdecl test_sec_mem(void)
 {
 #ifdef OPENSSL_SECURE_MEMORY
     int testresult = 0;
@@ -133,7 +133,7 @@ static int test_sec_mem(void)
 #endif
 }
 
-static int test_sec_mem_clear(void)
+static int __cdecl test_sec_mem_clear(void)
 {
 #ifdef OPENSSL_SECURE_MEMORY
     const int size = 64;
diff --git a/test/servername_test.c b/test/servername_test.c
index d246918d66..6cc8f8a3ae 100644
--- a/test/servername_test.c
+++ b/test/servername_test.c
@@ -222,7 +222,7 @@ static sni_test_fn sni_test_fns[3] = {
     server_setup_sni
 };
 
-static int test_servername(int test)
+static int __cdecl test_servername(int test)
 {
     /*
      * For each test set up an SSL_CTX and SSL and see
diff --git a/test/shlibloadtest.c b/test/shlibloadtest.c
index 86bbfcd849..a4ca1ae484 100644
--- a/test/shlibloadtest.c
+++ b/test/shlibloadtest.c
@@ -294,7 +294,7 @@ end:
  * it to link against libcrypto (which the framework uses). The point of the
  * test is to check dynamic loading and unloading of libcrypto/libssl.
  */
-int main(int argc, char *argv[])
+int __cdecl main(int argc, char *argv[])
 {
     const char *p;
 
diff --git a/test/siphash_internal_test.c b/test/siphash_internal_test.c
index ae9082bc7e..2da48f379c 100644
--- a/test/siphash_internal_test.c
+++ b/test/siphash_internal_test.c
@@ -167,7 +167,7 @@ static TESTDATA tests[] = {
     { 63, { 16, { 0x51, 0x50, 0xd1, 0x77, 0x2f, 0x50, 0x83, 0x4a, 0x50, 0x3e, 0x06, 0x9a, 0x97, 0x3f, 0xbd, 0x7c, } } }
 };
 
-static int test_siphash(int idx)
+static int __cdecl test_siphash(int idx)
 {
     SIPHASH siphash = { 0, };
     TESTDATA test = tests[idx];
@@ -255,7 +255,7 @@ static int test_siphash(int idx)
     return 1;
 }
 
-static int test_siphash_basic(void)
+static int __cdecl test_siphash_basic(void)
 {
     SIPHASH siphash = { 0, };
     unsigned char key[SIPHASH_KEY_SIZE];
diff --git a/test/sm2_internal_test.c b/test/sm2_internal_test.c
index 015fa85e68..35839bb0c9 100644
--- a/test/sm2_internal_test.c
+++ b/test/sm2_internal_test.c
@@ -30,7 +30,7 @@ static uint8_t *fake_rand_bytes = NULL;
 static size_t fake_rand_bytes_offset = 0;
 static size_t fake_rand_size = 0;
 
-static int get_faked_bytes(unsigned char *buf, int num)
+static int __cdecl get_faked_bytes(unsigned char *buf, int num)
 {
     int i;
 
@@ -46,7 +46,7 @@ static int get_faked_bytes(unsigned char *buf, int num)
     return 1;
 }
 
-static int start_fake_rand(const char *hex_bytes)
+static int __cdecl start_fake_rand(const char *hex_bytes)
 {
     /* save old rand method */
     if (!TEST_ptr(saved_rand = RAND_get_rand_method()))
@@ -66,7 +66,7 @@ static int start_fake_rand(const char *hex_bytes)
     return 1;
 }
 
-static int restore_rand(void)
+static int __cdecl restore_rand(void)
 {
     OPENSSL_free(fake_rand_bytes);
     fake_rand_bytes = NULL;
@@ -134,7 +134,7 @@ done:
     return group;
 }
 
-static int test_sm2_crypt(const EC_GROUP *group,
+static int __cdecl test_sm2_crypt(const EC_GROUP *group,
                           const EVP_MD *digest,
                           const char *privkey_hex,
                           const char *message,
@@ -207,7 +207,7 @@ static int test_sm2_crypt(const EC_GROUP *group,
     return rc;
 }
 
-static int sm2_crypt_test(void)
+static int __cdecl sm2_crypt_test(void)
 {
     int testresult = 0;
     EC_GROUP *test_group =
@@ -259,7 +259,7 @@ static int sm2_crypt_test(void)
     return testresult;
 }
 
-static int test_sm2_sign(const EC_GROUP *group,
+static int __cdecl test_sm2_sign(const EC_GROUP *group,
                          const char *userid,
                          const char *privkey_hex,
                          const char *message,
@@ -328,7 +328,7 @@ static int test_sm2_sign(const EC_GROUP *group,
     return ok;
 }
 
-static int sm2_sig_test(void)
+static int __cdecl sm2_sig_test(void)
 {
     int testresult = 0;
     /* From draft-shen-sm2-ecdsa-02 */
diff --git a/test/sm4_internal_test.c b/test/sm4_internal_test.c
index 2f3eaecbce..3a33e97a61 100644
--- a/test/sm4_internal_test.c
+++ b/test/sm4_internal_test.c
@@ -19,7 +19,7 @@
 #ifndef OPENSSL_NO_SM4
 # include "internal/sm4.h"
 
-static int test_sm4_ecb(void)
+static int __cdecl test_sm4_ecb(void)
 {
     static const uint8_t k[SM4_BLOCK_SIZE] = {
         0x01, 0x23, 0x45, 0x67, 0x89, 0xab, 0xcd, 0xef,
diff --git a/test/srptest.c b/test/srptest.c
index bb1682e714..700c3e1688 100644
--- a/test/srptest.c
+++ b/test/srptest.c
@@ -20,7 +20,7 @@
 
 # define RANDOM_SIZE 32         /* use 256 bits on each side */
 
-static int run_srp(const char *username, const char *client_pass,
+static int __cdecl run_srp(const char *username, const char *client_pass,
                    const char *server_pass)
 {
     int ret = 0;
@@ -111,7 +111,7 @@ end:
     return ret;
 }
 
-static int check_bn(const char *name, const BIGNUM *bn, const char *hexbn)
+static int __cdecl check_bn(const char *name, const BIGNUM *bn, const char *hexbn)
 {
     BIGNUM *tmp = NULL;
     int r;
@@ -127,7 +127,7 @@ static int check_bn(const char *name, const BIGNUM *bn, const char *hexbn)
 }
 
 /* SRP test vectors from RFC5054 */
-static int run_srp_kat(void)
+static int __cdecl run_srp_kat(void)
 {
     int ret = 0;
     BIGNUM *s = NULL;
@@ -248,7 +248,7 @@ err:
     return ret;
 }
 
-static int run_srp_tests(void)
+static int __cdecl run_srp_tests(void)
 {
     /* "Negative" test, expect a mismatch */
     TEST_info("run_srp: expecting a mismatch");
diff --git a/test/ssl_cert_table_internal_test.c b/test/ssl_cert_table_internal_test.c
index 2104e8c516..a58b3037f2 100644
--- a/test/ssl_cert_table_internal_test.c
+++ b/test/ssl_cert_table_internal_test.c
@@ -31,7 +31,7 @@
 #define test_cert_table(nid, amask, idx) \
     do_test_cert_table(nid, amask, idx, #idx)
 
-static int do_test_cert_table(int nid, uint32_t amask, size_t idx,
+static int __cdecl do_test_cert_table(int nid, uint32_t amask, size_t idx,
                               const char *idxname)
 {
     const SSL_CERT_LOOKUP *clu = &ssl_cert_info[idx];
@@ -51,7 +51,7 @@ static int do_test_cert_table(int nid, uint32_t amask, size_t idx,
 
 /* Sanity check of ssl_cert_table */
 
-static int test_ssl_cert_table(void)
+static int __cdecl test_ssl_cert_table(void)
 {
     TEST_size_t_eq(OSSL_NELEM(ssl_cert_info), SSL_PKEY_NUM);
     if (!test_cert_table(EVP_PKEY_RSA, SSL_aRSA, SSL_PKEY_RSA))
diff --git a/test/ssl_test.c b/test/ssl_test.c
index 7453a9d10e..d51b9c91e8 100644
--- a/test/ssl_test.c
+++ b/test/ssl_test.c
@@ -28,7 +28,7 @@ static const char *print_alert(int alert)
     return alert ? SSL_alert_desc_string_long(alert) : "no alert";
 }
 
-static int check_result(HANDSHAKE_RESULT *result, SSL_TEST_CTX *test_ctx)
+static int __cdecl check_result(HANDSHAKE_RESULT *result, SSL_TEST_CTX *test_ctx)
 {
     if (!TEST_int_eq(result->result, test_ctx->expected_result)) {
         TEST_info("ExpectedResult mismatch: expected %s, got %s.",
@@ -39,7 +39,7 @@ static int check_result(HANDSHAKE_RESULT *result, SSL_TEST_CTX *test_ctx)
     return 1;
 }
 
-static int check_alerts(HANDSHAKE_RESULT *result, SSL_TEST_CTX *test_ctx)
+static int __cdecl check_alerts(HANDSHAKE_RESULT *result, SSL_TEST_CTX *test_ctx)
 {
     if (!TEST_int_eq(result->client_alert_sent,
                      result->client_alert_received)) {
@@ -97,7 +97,7 @@ static int check_alerts(HANDSHAKE_RESULT *result, SSL_TEST_CTX *test_ctx)
     return 1;
 }
 
-static int check_protocol(HANDSHAKE_RESULT *result, SSL_TEST_CTX *test_ctx)
+static int __cdecl check_protocol(HANDSHAKE_RESULT *result, SSL_TEST_CTX *test_ctx)
 {
     if (!TEST_int_eq(result->client_protocol, result->server_protocol)) {
         TEST_info("Client has protocol %s but server has %s.",
@@ -118,7 +118,7 @@ static int check_protocol(HANDSHAKE_RESULT *result, SSL_TEST_CTX *test_ctx)
     return 1;
 }
 
-static int check_servername(HANDSHAKE_RESULT *result, SSL_TEST_CTX *test_ctx)
+static int __cdecl check_servername(HANDSHAKE_RESULT *result, SSL_TEST_CTX *test_ctx)
 {
     if (!TEST_int_eq(result->servername, test_ctx->expected_servername)) {
       TEST_info("Client ServerName mismatch, expected %s, got %s.",
@@ -129,7 +129,7 @@ static int check_servername(HANDSHAKE_RESULT *result, SSL_TEST_CTX *test_ctx)
   return 1;
 }
 
-static int check_session_ticket(HANDSHAKE_RESULT *result, SSL_TEST_CTX *test_ctx)
+static int __cdecl check_session_ticket(HANDSHAKE_RESULT *result, SSL_TEST_CTX *test_ctx)
 {
     if (test_ctx->session_ticket_expected == SSL_TEST_SESSION_TICKET_IGNORE)
         return 1;
@@ -143,7 +143,7 @@ static int check_session_ticket(HANDSHAKE_RESULT *result, SSL_TEST_CTX *test_ctx
     return 1;
 }
 
-static int check_session_id(HANDSHAKE_RESULT *result, SSL_TEST_CTX *test_ctx)
+static int __cdecl check_session_id(HANDSHAKE_RESULT *result, SSL_TEST_CTX *test_ctx)
 {
     if (test_ctx->session_id_expected == SSL_TEST_SESSION_ID_IGNORE)
         return 1;
@@ -156,14 +156,14 @@ static int check_session_id(HANDSHAKE_RESULT *result, SSL_TEST_CTX *test_ctx)
     return 1;
 }
 
-static int check_compression(HANDSHAKE_RESULT *result, SSL_TEST_CTX *test_ctx)
+static int __cdecl check_compression(HANDSHAKE_RESULT *result, SSL_TEST_CTX *test_ctx)
 {
     if (!TEST_int_eq(result->compression, test_ctx->compression_expected))
         return 0;
     return 1;
 }
 #ifndef OPENSSL_NO_NEXTPROTONEG
-static int check_npn(HANDSHAKE_RESULT *result, SSL_TEST_CTX *test_ctx)
+static int __cdecl check_npn(HANDSHAKE_RESULT *result, SSL_TEST_CTX *test_ctx)
 {
     int ret = 1;
     if (!TEST_str_eq(result->client_npn_negotiated,
@@ -176,7 +176,7 @@ static int check_npn(HANDSHAKE_RESULT *result, SSL_TEST_CTX *test_ctx)
 }
 #endif
 
-static int check_alpn(HANDSHAKE_RESULT *result, SSL_TEST_CTX *test_ctx)
+static int __cdecl check_alpn(HANDSHAKE_RESULT *result, SSL_TEST_CTX *test_ctx)
 {
     int ret = 1;
     if (!TEST_str_eq(result->client_alpn_negotiated,
@@ -188,7 +188,7 @@ static int check_alpn(HANDSHAKE_RESULT *result, SSL_TEST_CTX *test_ctx)
     return ret;
 }
 
-static int check_session_ticket_app_data(HANDSHAKE_RESULT *result,
+static int __cdecl check_session_ticket_app_data(HANDSHAKE_RESULT *result,
                                          SSL_TEST_CTX *test_ctx)
 {
     size_t result_len = 0;
@@ -209,7 +209,7 @@ static int check_session_ticket_app_data(HANDSHAKE_RESULT *result,
     return 1;
 }
 
-static int check_resumption(HANDSHAKE_RESULT *result, SSL_TEST_CTX *test_ctx)
+static int __cdecl check_resumption(HANDSHAKE_RESULT *result, SSL_TEST_CTX *test_ctx)
 {
     if (!TEST_int_eq(result->client_resumed, result->server_resumed))
         return 0;
@@ -218,7 +218,7 @@ static int check_resumption(HANDSHAKE_RESULT *result, SSL_TEST_CTX *test_ctx)
     return 1;
 }
 
-static int check_nid(const char *name, int expected_nid, int nid)
+static int __cdecl check_nid(const char *name, int expected_nid, int nid)
 {
     if (expected_nid == 0 || expected_nid == nid)
         return 1;
@@ -243,7 +243,7 @@ static void print_ca_names(STACK_OF(X509_NAME) *names)
     }
 }
 
-static int check_ca_names(const char *name,
+static int __cdecl check_ca_names(const char *name,
                           STACK_OF(X509_NAME) *expected_names,
                           STACK_OF(X509_NAME) *names)
 {
@@ -275,34 +275,34 @@ err:
     return 0;
 }
 
-static int check_tmp_key(HANDSHAKE_RESULT *result, SSL_TEST_CTX *test_ctx)
+static int __cdecl check_tmp_key(HANDSHAKE_RESULT *result, SSL_TEST_CTX *test_ctx)
 {
     return check_nid("Tmp key", test_ctx->expected_tmp_key_type,
                      result->tmp_key_type);
 }
 
-static int check_server_cert_type(HANDSHAKE_RESULT *result,
+static int __cdecl check_server_cert_type(HANDSHAKE_RESULT *result,
                                   SSL_TEST_CTX *test_ctx)
 {
     return check_nid("Server certificate", test_ctx->expected_server_cert_type,
                      result->server_cert_type);
 }
 
-static int check_server_sign_hash(HANDSHAKE_RESULT *result,
+static int __cdecl check_server_sign_hash(HANDSHAKE_RESULT *result,
                                   SSL_TEST_CTX *test_ctx)
 {
     return check_nid("Server signing hash", test_ctx->expected_server_sign_hash,
                      result->server_sign_hash);
 }
 
-static int check_server_sign_type(HANDSHAKE_RESULT *result,
+static int __cdecl check_server_sign_type(HANDSHAKE_RESULT *result,
                                   SSL_TEST_CTX *test_ctx)
 {
     return check_nid("Server signing", test_ctx->expected_server_sign_type,
                      result->server_sign_type);
 }
 
-static int check_server_ca_names(HANDSHAKE_RESULT *result,
+static int __cdecl check_server_ca_names(HANDSHAKE_RESULT *result,
                                  SSL_TEST_CTX *test_ctx)
 {
     return check_ca_names("Server CA names",
@@ -310,28 +310,28 @@ static int check_server_ca_names(HANDSHAKE_RESULT *result,
                           result->server_ca_names);
 }
 
-static int check_client_cert_type(HANDSHAKE_RESULT *result,
+static int __cdecl check_client_cert_type(HANDSHAKE_RESULT *result,
                                   SSL_TEST_CTX *test_ctx)
 {
     return check_nid("Client certificate", test_ctx->expected_client_cert_type,
                      result->client_cert_type);
 }
 
-static int check_client_sign_hash(HANDSHAKE_RESULT *result,
+static int __cdecl check_client_sign_hash(HANDSHAKE_RESULT *result,
                                   SSL_TEST_CTX *test_ctx)
 {
     return check_nid("Client signing hash", test_ctx->expected_client_sign_hash,
                      result->client_sign_hash);
 }
 
-static int check_client_sign_type(HANDSHAKE_RESULT *result,
+static int __cdecl check_client_sign_type(HANDSHAKE_RESULT *result,
                                   SSL_TEST_CTX *test_ctx)
 {
     return check_nid("Client signing", test_ctx->expected_client_sign_type,
                      result->client_sign_type);
 }
 
-static int check_client_ca_names(HANDSHAKE_RESULT *result,
+static int __cdecl check_client_ca_names(HANDSHAKE_RESULT *result,
                                  SSL_TEST_CTX *test_ctx)
 {
     return check_ca_names("Client CA names",
@@ -339,7 +339,7 @@ static int check_client_ca_names(HANDSHAKE_RESULT *result,
                           result->client_ca_names);
 }
 
-static int check_cipher(HANDSHAKE_RESULT *result, SSL_TEST_CTX *test_ctx)
+static int __cdecl check_cipher(HANDSHAKE_RESULT *result, SSL_TEST_CTX *test_ctx)
 {
     if (test_ctx->expected_cipher == NULL)
         return 1;
@@ -356,7 +356,7 @@ static int check_cipher(HANDSHAKE_RESULT *result, SSL_TEST_CTX *test_ctx)
  * HANDSHAKE_RESULT, and implementing comparison methods for
  * its fields.
  */
-static int check_test(HANDSHAKE_RESULT *result, SSL_TEST_CTX *test_ctx)
+static int __cdecl check_test(HANDSHAKE_RESULT *result, SSL_TEST_CTX *test_ctx)
 {
     int ret = 1;
     ret &= check_result(result, test_ctx);
@@ -388,7 +388,7 @@ static int check_test(HANDSHAKE_RESULT *result, SSL_TEST_CTX *test_ctx)
     return ret;
 }
 
-static int test_handshake(int idx)
+static int __cdecl test_handshake(int idx)
 {
     int ret = 0;
     SSL_CTX *server_ctx = NULL, *server2_ctx = NULL, *client_ctx = NULL,
diff --git a/test/ssl_test_ctx_test.c b/test/ssl_test_ctx_test.c
index ffbbfbc12b..726b973ad5 100644
--- a/test/ssl_test_ctx_test.c
+++ b/test/ssl_test_ctx_test.c
@@ -33,7 +33,7 @@ typedef struct ssl_test_ctx_test_fixture {
 } SSL_TEST_CTX_TEST_FIXTURE;
 
 
-static int clientconf_eq(SSL_TEST_CLIENT_CONF *conf1,
+static int __cdecl clientconf_eq(SSL_TEST_CLIENT_CONF *conf1,
                          SSL_TEST_CLIENT_CONF *conf2)
 {
     if (!TEST_int_eq(conf1->verify_callback, conf2->verify_callback)
@@ -47,7 +47,7 @@ static int clientconf_eq(SSL_TEST_CLIENT_CONF *conf1,
     return 1;
 }
 
-static int serverconf_eq(SSL_TEST_SERVER_CONF *serv,
+static int __cdecl serverconf_eq(SSL_TEST_SERVER_CONF *serv,
                          SSL_TEST_SERVER_CONF *serv2)
 {
     if (!TEST_int_eq(serv->servername_callback, serv2->servername_callback)
@@ -62,7 +62,7 @@ static int serverconf_eq(SSL_TEST_SERVER_CONF *serv,
     return 1;
 }
 
-static int extraconf_eq(SSL_TEST_EXTRA_CONF *extra,
+static int __cdecl extraconf_eq(SSL_TEST_EXTRA_CONF *extra,
                         SSL_TEST_EXTRA_CONF *extra2)
 {
     if (!TEST_true(clientconf_eq(&extra->client, &extra2->client))
@@ -72,7 +72,7 @@ static int extraconf_eq(SSL_TEST_EXTRA_CONF *extra,
     return 1;
 }
 
-static int testctx_eq(SSL_TEST_CTX *ctx, SSL_TEST_CTX *ctx2)
+static int __cdecl testctx_eq(SSL_TEST_CTX *ctx, SSL_TEST_CTX *ctx2)
 {
     if (!TEST_int_eq(ctx->method, ctx2->method)
             || !TEST_int_eq(ctx->handshake_mode, ctx2->handshake_mode)
@@ -121,7 +121,7 @@ static SSL_TEST_CTX_TEST_FIXTURE *set_up(const char *const test_case_name)
     return fixture;
 }
 
-static int execute_test(SSL_TEST_CTX_TEST_FIXTURE *fixture)
+static int __cdecl execute_test(SSL_TEST_CTX_TEST_FIXTURE *fixture)
 {
     int success = 0;
     SSL_TEST_CTX *ctx;
@@ -147,7 +147,7 @@ static void tear_down(SSL_TEST_CTX_TEST_FIXTURE *fixture)
 #define EXECUTE_SSL_TEST_CTX_TEST() \
     EXECUTE_TEST(execute_test, tear_down)
 
-static int test_empty_configuration(void)
+static int __cdecl test_empty_configuration(void)
 {
     SETUP_SSL_TEST_CTX_TEST_FIXTURE();
     if (fixture == NULL)
@@ -158,7 +158,7 @@ static int test_empty_configuration(void)
     return result;
 }
 
-static int test_good_configuration(void)
+static int __cdecl test_good_configuration(void)
 {
     SETUP_SSL_TEST_CTX_TEST_FIXTURE();
     if (fixture == NULL)
@@ -227,7 +227,7 @@ static const char *bad_configurations[] = {
     "ssltest_invalid_max_fragment_len",
 };
 
-static int test_bad_configuration(int idx)
+static int __cdecl test_bad_configuration(int idx)
 {
     SSL_TEST_CTX *ctx;
 
diff --git a/test/sslapitest.c b/test/sslapitest.c
index 7a142268fa..e1ce2db059 100644
--- a/test/sslapitest.c
+++ b/test/sslapitest.c
@@ -31,9 +31,9 @@ static SSL_SESSION *serverpsk = NULL;
 static const char *pskid = "Identity";
 static const char *srvid;
 
-static int use_session_cb(SSL *ssl, const EVP_MD *md, const unsigned char **id,
+static int __cdecl use_session_cb(SSL *ssl, const EVP_MD *md, const unsigned char **id,
                           size_t *idlen, SSL_SESSION **sess);
-static int find_session_cb(SSL *ssl, const unsigned char *identity,
+static int __cdecl find_session_cb(SSL *ssl, const unsigned char *identity,
                            size_t identity_len, SSL_SESSION **sess);
 
 static int use_session_cb_cnt = 0;
@@ -98,7 +98,7 @@ static unsigned char serverinfov2[] = {
     0xff        /* Dummy extension data */
 };
 
-static void client_keylog_callback(const SSL *ssl, const char *line)
+static void __cdecl client_keylog_callback(const SSL *ssl, const char *line)
 {
     int line_length = strlen(line);
 
@@ -114,7 +114,7 @@ static void client_keylog_callback(const SSL *ssl, const char *line)
     client_log_buffer[client_log_buffer_index++] = '\n';
 }
 
-static void server_keylog_callback(const SSL *ssl, const char *line)
+static void __cdecl server_keylog_callback(const SSL *ssl, const char *line)
 {
     int line_length = strlen(line);
 
@@ -130,7 +130,7 @@ static void server_keylog_callback(const SSL *ssl, const char *line)
     server_log_buffer[server_log_buffer_index++] = '\n';
 }
 
-static int compare_hex_encoded_buffer(const char *hex_encoded,
+static int __cdecl compare_hex_encoded_buffer(const char *hex_encoded,
                                       size_t hex_length,
                                       const uint8_t *raw,
                                       size_t raw_length)
@@ -151,7 +151,7 @@ static int compare_hex_encoded_buffer(const char *hex_encoded,
     return 0;
 }
 
-static int test_keylog_output(char *buffer, const SSL *ssl,
+static int __cdecl test_keylog_output(char *buffer, const SSL *ssl,
                               const SSL_SESSION *session,
                               struct sslapitest_log_counts *expected)
 {
@@ -301,7 +301,7 @@ static int test_keylog_output(char *buffer, const SSL *ssl,
 }
 
 #if !defined(OPENSSL_NO_TLS1_2) || defined(OPENSSL_NO_TLS1_3)
-static int test_keylog(void)
+static int __cdecl test_keylog(void)
 {
     SSL_CTX *cctx = NULL, *sctx = NULL;
     SSL *clientssl = NULL, *serverssl = NULL;
@@ -381,7 +381,7 @@ end:
 #endif
 
 #ifndef OPENSSL_NO_TLS1_3
-static int test_keylog_no_master_key(void)
+static int __cdecl test_keylog_no_master_key(void)
 {
     SSL_CTX *cctx = NULL, *sctx = NULL;
     SSL *clientssl = NULL, *serverssl = NULL;
@@ -497,7 +497,7 @@ end:
 #endif
 
 #ifndef OPENSSL_NO_TLS1_2
-static int full_client_hello_callback(SSL *s, int *al, void *arg)
+static int __cdecl full_client_hello_callback(SSL *s, int *al, void *arg)
 {
     int *ctr = arg;
     const unsigned char *p;
@@ -538,7 +538,7 @@ static int full_client_hello_callback(SSL *s, int *al, void *arg)
     return SSL_CLIENT_HELLO_SUCCESS;
 }
 
-static int test_client_hello_cb(void)
+static int __cdecl test_client_hello_cb(void)
 {
     SSL_CTX *cctx = NULL, *sctx = NULL;
     SSL *clientssl = NULL, *serverssl = NULL;
@@ -581,7 +581,7 @@ end:
 }
 #endif
 
-static int execute_test_large_message(const SSL_METHOD *smeth,
+static int __cdecl execute_test_large_message(const SSL_METHOD *smeth,
                                       const SSL_METHOD *cmeth,
                                       int min_version, int max_version,
                                       int read_ahead)
@@ -657,14 +657,14 @@ static int execute_test_large_message(const SSL_METHOD *smeth,
     return testresult;
 }
 
-static int test_large_message_tls(void)
+static int __cdecl test_large_message_tls(void)
 {
     return execute_test_large_message(TLS_server_method(), TLS_client_method(),
                                       TLS1_VERSION, TLS_MAX_VERSION,
                                       0);
 }
 
-static int test_large_message_tls_read_ahead(void)
+static int __cdecl test_large_message_tls_read_ahead(void)
 {
     return execute_test_large_message(TLS_server_method(), TLS_client_method(),
                                       TLS1_VERSION, TLS_MAX_VERSION,
@@ -672,7 +672,7 @@ static int test_large_message_tls_read_ahead(void)
 }
 
 #ifndef OPENSSL_NO_DTLS
-static int test_large_message_dtls(void)
+static int __cdecl test_large_message_dtls(void)
 {
     /*
      * read_ahead is not relevant to DTLS because DTLS always acts as if
@@ -686,7 +686,7 @@ static int test_large_message_dtls(void)
 #endif
 
 #ifndef OPENSSL_NO_OCSP
-static int ocsp_server_cb(SSL *s, void *arg)
+static int __cdecl ocsp_server_cb(SSL *s, void *arg)
 {
     int *argi = (int *)arg;
     unsigned char *copy = NULL;
@@ -714,7 +714,7 @@ static int ocsp_server_cb(SSL *s, void *arg)
     return SSL_TLSEXT_ERR_OK;
 }
 
-static int ocsp_client_cb(SSL *s, void *arg)
+static int __cdecl ocsp_client_cb(SSL *s, void *arg)
 {
     int *argi = (int *)arg;
     const unsigned char *respderin;
@@ -731,7 +731,7 @@ static int ocsp_client_cb(SSL *s, void *arg)
     return 1;
 }
 
-static int test_tlsext_status_type(void)
+static int __cdecl test_tlsext_status_type(void)
 {
     SSL_CTX *cctx = NULL, *sctx = NULL;
     SSL *clientssl = NULL, *serverssl = NULL;
@@ -865,7 +865,7 @@ static int test_tlsext_status_type(void)
 #if !defined(OPENSSL_NO_TLS1_3) || !defined(OPENSSL_NO_TLS1_2)
 static int new_called, remove_called, get_called;
 
-static int new_session_cb(SSL *ssl, SSL_SESSION *sess)
+static int __cdecl new_session_cb(SSL *ssl, SSL_SESSION *sess)
 {
     new_called++;
     /*
@@ -876,14 +876,14 @@ static int new_session_cb(SSL *ssl, SSL_SESSION *sess)
     return 1;
 }
 
-static void remove_session_cb(SSL_CTX *ctx, SSL_SESSION *sess)
+static void __cdecl remove_session_cb(SSL_CTX *ctx, SSL_SESSION *sess)
 {
     remove_called++;
 }
 
 static SSL_SESSION *get_sess_val = NULL;
 
-static SSL_SESSION *get_session_cb(SSL *ssl, const unsigned char *id, int len,
+static SSL_SESSION * __cdecl get_session_cb(SSL *ssl, const unsigned char *id, int len,
                                    int *copy)
 {
     get_called++;
@@ -891,7 +891,7 @@ static SSL_SESSION *get_session_cb(SSL *ssl, const unsigned char *id, int len,
     return get_sess_val;
 }
 
-static int execute_test_session(int maxprot, int use_int_cache,
+static int __cdecl execute_test_session(int maxprot, int use_int_cache,
                                 int use_ext_cache)
 {
     SSL_CTX *sctx = NULL, *cctx = NULL;
@@ -1176,7 +1176,7 @@ static int execute_test_session(int maxprot, int use_int_cache,
 }
 #endif /* !defined(OPENSSL_NO_TLS1_3) || !defined(OPENSSL_NO_TLS1_2) */
 
-static int test_session_with_only_int_cache(void)
+static int __cdecl test_session_with_only_int_cache(void)
 {
 #ifndef OPENSSL_NO_TLS1_3
     if (!execute_test_session(TLS1_3_VERSION, 1, 0))
@@ -1190,7 +1190,7 @@ static int test_session_with_only_int_cache(void)
 #endif
 }
 
-static int test_session_with_only_ext_cache(void)
+static int __cdecl test_session_with_only_ext_cache(void)
 {
 #ifndef OPENSSL_NO_TLS1_3
     if (!execute_test_session(TLS1_3_VERSION, 0, 1))
@@ -1204,7 +1204,7 @@ static int test_session_with_only_ext_cache(void)
 #endif
 }
 
-static int test_session_with_both_cache(void)
+static int __cdecl test_session_with_both_cache(void)
 {
 #ifndef OPENSSL_NO_TLS1_3
     if (!execute_test_session(TLS1_3_VERSION, 1, 1))
@@ -1222,7 +1222,7 @@ static int test_session_with_both_cache(void)
 static SSL_SESSION *sesscache[6];
 static int do_cache;
 
-static int new_cachesession_cb(SSL *ssl, SSL_SESSION *sess)
+static int __cdecl new_cachesession_cb(SSL *ssl, SSL_SESSION *sess)
 {
     if (do_cache) {
         sesscache[new_called] = sess;
@@ -1235,7 +1235,7 @@ static int new_cachesession_cb(SSL *ssl, SSL_SESSION *sess)
     return 1;
 }
 
-static int post_handshake_verify(SSL *sssl, SSL *cssl)
+static int __cdecl post_handshake_verify(SSL *sssl, SSL *cssl)
 {
     SSL_set_verify(sssl, SSL_VERIFY_PEER, NULL);
     if (!TEST_true(SSL_verify_client_post_handshake(sssl)))
@@ -1252,7 +1252,7 @@ static int post_handshake_verify(SSL *sssl, SSL *cssl)
     return 1;
 }
 
-static int setup_ticket_test(int stateful, int idx, SSL_CTX **sctx,
+static int __cdecl setup_ticket_test(int stateful, int idx, SSL_CTX **sctx,
                              SSL_CTX **cctx)
 {
     int sess_id_ctx = 1;
@@ -1276,7 +1276,7 @@ static int setup_ticket_test(int stateful, int idx, SSL_CTX **sctx,
     return 1;
 }
 
-static int check_resumption(int idx, SSL_CTX *sctx, SSL_CTX *cctx, int succ)
+static int __cdecl check_resumption(int idx, SSL_CTX *sctx, SSL_CTX *cctx, int succ)
 {
     SSL *serverssl = NULL, *clientssl = NULL;
     int i;
@@ -1333,7 +1333,7 @@ static int check_resumption(int idx, SSL_CTX *sctx, SSL_CTX *cctx, int succ)
     return 0;
 }
 
-static int test_tickets(int stateful, int idx)
+static int __cdecl test_tickets(int stateful, int idx)
 {
     SSL_CTX *sctx = NULL, *cctx = NULL;
     SSL *serverssl = NULL, *clientssl = NULL;
@@ -1440,17 +1440,17 @@ static int test_tickets(int stateful, int idx)
     return testresult;
 }
 
-static int test_stateless_tickets(int idx)
+static int __cdecl test_stateless_tickets(int idx)
 {
     return test_tickets(0, idx);
 }
 
-static int test_stateful_tickets(int idx)
+static int __cdecl test_stateful_tickets(int idx)
 {
     return test_tickets(1, idx);
 }
 
-static int test_psk_tickets(void)
+static int __cdecl test_psk_tickets(void)
 {
     SSL_CTX *sctx = NULL, *cctx = NULL;
     SSL *serverssl = NULL, *clientssl = NULL;
@@ -1527,7 +1527,7 @@ static int test_psk_tickets(void)
                                 + TOTAL_CONN_SUCCESS_SSL_SET_BIO_TESTS \
                                 + TOTAL_CONN_FAIL_SSL_SET_BIO_TESTS
 
-static void setupbio(BIO **res, BIO *bio1, BIO *bio2, int type)
+static void __cdecl setupbio(BIO **res, BIO *bio1, BIO *bio2, int type)
 {
     switch (type) {
     case USE_NULL:
@@ -1554,7 +1554,7 @@ static void setupbio(BIO **res, BIO *bio1, BIO *bio2, int type)
  * following a failed connection. In this last case we are looking to check that
  * SSL_set_bio() functions correctly in the case where s->bbio is not NULL.
  */
-static int test_ssl_set_bio(int idx)
+static int __cdecl test_ssl_set_bio(int idx)
 {
     SSL_CTX *sctx = NULL, *cctx = NULL;
     BIO *bio1 = NULL;
@@ -1681,7 +1681,7 @@ static int test_ssl_set_bio(int idx)
 
 typedef enum { NO_BIO_CHANGE, CHANGE_RBIO, CHANGE_WBIO } bio_change_t;
 
-static int execute_test_ssl_bio(int pop_ssl, bio_change_t change_bio)
+static int __cdecl execute_test_ssl_bio(int pop_ssl, bio_change_t change_bio)
 {
     BIO *sslbio = NULL, *membio1 = NULL, *membio2 = NULL;
     SSL_CTX *ctx;
@@ -1728,22 +1728,22 @@ static int execute_test_ssl_bio(int pop_ssl, bio_change_t change_bio)
     return testresult;
 }
 
-static int test_ssl_bio_pop_next_bio(void)
+static int __cdecl test_ssl_bio_pop_next_bio(void)
 {
     return execute_test_ssl_bio(0, NO_BIO_CHANGE);
 }
 
-static int test_ssl_bio_pop_ssl_bio(void)
+static int __cdecl test_ssl_bio_pop_ssl_bio(void)
 {
     return execute_test_ssl_bio(1, NO_BIO_CHANGE);
 }
 
-static int test_ssl_bio_change_rbio(void)
+static int __cdecl test_ssl_bio_change_rbio(void)
 {
     return execute_test_ssl_bio(0, CHANGE_RBIO);
 }
 
-static int test_ssl_bio_change_wbio(void)
+static int __cdecl test_ssl_bio_change_wbio(void)
 {
     return execute_test_ssl_bio(0, CHANGE_WBIO);
 }
@@ -1792,7 +1792,7 @@ static const sigalgs_list testsigalgs[] = {
     {NULL, 0, "Invalid", 0, 0}
 };
 
-static int test_set_sigalgs(int idx)
+static int __cdecl test_set_sigalgs(int idx)
 {
     SSL_CTX *cctx = NULL, *sctx = NULL;
     SSL *clientssl = NULL, *serverssl = NULL;
@@ -1883,7 +1883,7 @@ static int test_set_sigalgs(int idx)
 static int psk_client_cb_cnt = 0;
 static int psk_server_cb_cnt = 0;
 
-static int use_session_cb(SSL *ssl, const EVP_MD *md, const unsigned char **id,
+static int __cdecl use_session_cb(SSL *ssl, const EVP_MD *md, const unsigned char **id,
                           size_t *idlen, SSL_SESSION **sess)
 {
     switch (++use_session_cb_cnt) {
@@ -1915,7 +1915,7 @@ static int use_session_cb(SSL *ssl, const EVP_MD *md, const unsigned char **id,
 }
 
 #ifndef OPENSSL_NO_PSK
-static unsigned int psk_client_cb(SSL *ssl, const char *hint, char *id,
+static unsigned int __cdecl psk_client_cb(SSL *ssl, const char *hint, char *id,
                                   unsigned int max_id_len,
                                   unsigned char *psk,
                                   unsigned int max_psk_len)
@@ -1944,7 +1944,7 @@ static unsigned int psk_client_cb(SSL *ssl, const char *hint, char *id,
 }
 #endif /* OPENSSL_NO_PSK */
 
-static int find_session_cb(SSL *ssl, const unsigned char *identity,
+static int __cdecl find_session_cb(SSL *ssl, const unsigned char *identity,
                            size_t identity_len, SSL_SESSION **sess)
 {
     find_session_cb_cnt++;
@@ -1971,7 +1971,7 @@ static int find_session_cb(SSL *ssl, const unsigned char *identity,
 }
 
 #ifndef OPENSSL_NO_PSK
-static unsigned int psk_server_cb(SSL *ssl, const char *identity,
+static unsigned int __cdecl psk_server_cb(SSL *ssl, const char *identity,
                                   unsigned char *psk, unsigned int max_psk_len)
 {
     unsigned int psklen = 0;
@@ -2043,7 +2043,7 @@ static SSL_SESSION *create_a_psk(SSL *ssl)
  * Helper method to setup objects for early data test. Caller frees objects on
  * error.
  */
-static int setupearly_data_test(SSL_CTX **cctx, SSL_CTX **sctx, SSL **clientssl,
+static int __cdecl setupearly_data_test(SSL_CTX **cctx, SSL_CTX **sctx, SSL **clientssl,
                                 SSL **serverssl, SSL_SESSION **sess, int idx)
 {
     if (*sctx == NULL
@@ -2133,7 +2133,7 @@ static int setupearly_data_test(SSL_CTX **cctx, SSL_CTX **sctx, SSL **clientssl,
     return 1;
 }
 
-static int test_early_data_read_write(int idx)
+static int __cdecl test_early_data_read_write(int idx)
 {
     SSL_CTX *cctx = NULL, *sctx = NULL;
     SSL *clientssl = NULL, *serverssl = NULL;
@@ -2342,7 +2342,7 @@ static int test_early_data_read_write(int idx)
 
 static int allow_ed_cb_called = 0;
 
-static int allow_early_data_cb(SSL *s, void *arg)
+static int __cdecl allow_early_data_cb(SSL *s, void *arg)
 {
     int *usecb = (int *)arg;
 
@@ -2363,7 +2363,7 @@ static int allow_early_data_cb(SSL *s, void *arg)
  * confopt == 0: Configure anti-replay directly
  * confopt == 1: Configure anti-replay using SSL_CONF
  */
-static int test_early_data_replay_int(int idx, int usecb, int confopt)
+static int __cdecl test_early_data_replay_int(int idx, int usecb, int confopt)
 {
     SSL_CTX *cctx = NULL, *sctx = NULL;
     SSL *clientssl = NULL, *serverssl = NULL;
@@ -2479,7 +2479,7 @@ static int test_early_data_replay_int(int idx, int usecb, int confopt)
     return testresult;
 }
 
-static int test_early_data_replay(int idx)
+static int __cdecl test_early_data_replay(int idx)
 {
     int ret = 1, usecb, confopt;
 
@@ -2499,7 +2499,7 @@ static int test_early_data_replay(int idx)
  * testtype: 2 == HRR, invalid early_data sent after HRR
  * testtype: 3 == recv_max_early_data set to 0
  */
-static int early_data_skip_helper(int testtype, int idx)
+static int __cdecl early_data_skip_helper(int testtype, int idx)
 {
     SSL_CTX *cctx = NULL, *sctx = NULL;
     SSL *clientssl = NULL, *serverssl = NULL;
@@ -2644,7 +2644,7 @@ static int early_data_skip_helper(int testtype, int idx)
  * Test that a server attempting to read early data can handle a connection
  * from a client where the early data is not acceptable.
  */
-static int test_early_data_skip(int idx)
+static int __cdecl test_early_data_skip(int idx)
 {
     return early_data_skip_helper(0, idx);
 }
@@ -2653,7 +2653,7 @@ static int test_early_data_skip(int idx)
  * Test that a server attempting to read early data can handle a connection
  * from a client where an HRR occurs.
  */
-static int test_early_data_skip_hrr(int idx)
+static int __cdecl test_early_data_skip_hrr(int idx)
 {
     return early_data_skip_helper(1, idx);
 }
@@ -2663,7 +2663,7 @@ static int test_early_data_skip_hrr(int idx)
  * from a client where an HRR occurs and correctly fails if early_data is sent
  * after the HRR
  */
-static int test_early_data_skip_hrr_fail(int idx)
+static int __cdecl test_early_data_skip_hrr_fail(int idx)
 {
     return early_data_skip_helper(2, idx);
 }
@@ -2672,7 +2672,7 @@ static int test_early_data_skip_hrr_fail(int idx)
  * Test that a server attempting to read early data will abort if it tries to
  * skip over too much.
  */
-static int test_early_data_skip_abort(int idx)
+static int __cdecl test_early_data_skip_abort(int idx)
 {
     return early_data_skip_helper(3, idx);
 }
@@ -2681,7 +2681,7 @@ static int test_early_data_skip_abort(int idx)
  * Test that a server attempting to read early data can handle a connection
  * from a client that doesn't send any.
  */
-static int test_early_data_not_sent(int idx)
+static int __cdecl test_early_data_not_sent(int idx)
 {
     SSL_CTX *cctx = NULL, *sctx = NULL;
     SSL *clientssl = NULL, *serverssl = NULL;
@@ -2737,7 +2737,7 @@ static int test_early_data_not_sent(int idx)
     return testresult;
 }
 
-static int hostname_cb(SSL *s, int *al, void *arg)
+static int __cdecl hostname_cb(SSL *s, int *al, void *arg)
 {
     const char *hostname = SSL_get_servername(s, TLSEXT_NAMETYPE_host_name);
 
@@ -2749,7 +2749,7 @@ static int hostname_cb(SSL *s, int *al, void *arg)
 
 static const char *servalpn;
 
-static int alpn_select_cb(SSL *ssl, const unsigned char **out,
+static int __cdecl alpn_select_cb(SSL *ssl, const unsigned char **out,
                           unsigned char *outlen, const unsigned char *in,
                           unsigned int inlen, void *arg)
 {
@@ -2773,7 +2773,7 @@ static int alpn_select_cb(SSL *ssl, const unsigned char **out,
 }
 
 /* Test that a PSK can be used to send early_data */
-static int test_early_data_psk(int idx)
+static int __cdecl test_early_data_psk(int idx)
 {
     SSL_CTX *cctx = NULL, *sctx = NULL;
     SSL *clientssl = NULL, *serverssl = NULL;
@@ -2950,7 +2950,7 @@ static int test_early_data_psk(int idx)
  * Test that a server that doesn't try to read early data can handle a
  * client sending some.
  */
-static int test_early_data_not_expected(int idx)
+static int __cdecl test_early_data_not_expected(int idx)
 {
     SSL_CTX *cctx = NULL, *sctx = NULL;
     SSL *clientssl = NULL, *serverssl = NULL;
@@ -3010,7 +3010,7 @@ static int test_early_data_not_expected(int idx)
  * Test that a server attempting to read early data can handle a connection
  * from a TLSv1.2 client.
  */
-static int test_early_data_tls1_2(int idx)
+static int __cdecl test_early_data_tls1_2(int idx)
 {
     SSL_CTX *cctx = NULL, *sctx = NULL;
     SSL *clientssl = NULL, *serverssl = NULL;
@@ -3093,7 +3093,7 @@ static int test_early_data_tls1_2(int idx)
  * Test 8: Set a default ciphersuite in the SSL (SSL cipher_list)
  * Test 9: Set a non-default ciphersuite in the SSL (SSL cipher_list)
  */
-static int test_set_ciphersuite(int idx)
+static int __cdecl test_set_ciphersuite(int idx)
 {
     SSL_CTX *cctx = NULL, *sctx = NULL;
     SSL *clientssl = NULL, *serverssl = NULL;
@@ -3160,7 +3160,7 @@ static int test_set_ciphersuite(int idx)
     return testresult;
 }
 
-static int test_ciphersuite_change(void)
+static int __cdecl test_ciphersuite_change(void)
 {
     SSL_CTX *cctx = NULL, *sctx = NULL;
     SSL *clientssl = NULL, *serverssl = NULL;
@@ -3296,7 +3296,7 @@ static int test_ciphersuite_change(void)
  * Test 2 = Set TLS1.3 and TLS1.2 cipher on context
  * Test 3 = Set TLS1.3 and TLS1.2 cipher on SSL
  */
-static int test_tls13_ciphersuite(int idx)
+static int __cdecl test_tls13_ciphersuite(int idx)
 {
     SSL_CTX *sctx = NULL, *cctx = NULL;
     SSL *serverssl = NULL, *clientssl = NULL;
@@ -3432,7 +3432,7 @@ static int test_tls13_ciphersuite(int idx)
  * Test 2 = Test old style callbacks
  * Test 3 = Test old style callbacks with no certificate
  */
-static int test_tls13_psk(int idx)
+static int __cdecl test_tls13_psk(int idx)
 {
     SSL_CTX *sctx = NULL, *cctx = NULL;
     SSL *serverssl = NULL, *clientssl = NULL;
@@ -3649,7 +3649,7 @@ static int test_tls13_psk(int idx)
 
 static unsigned char cookie_magic_value[] = "cookie magic";
 
-static int generate_cookie_callback(SSL *ssl, unsigned char *cookie,
+static int __cdecl generate_cookie_callback(SSL *ssl, unsigned char *cookie,
                                     unsigned int *cookie_len)
 {
     /*
@@ -3662,7 +3662,7 @@ static int generate_cookie_callback(SSL *ssl, unsigned char *cookie,
     return 1;
 }
 
-static int verify_cookie_callback(SSL *ssl, const unsigned char *cookie,
+static int __cdecl verify_cookie_callback(SSL *ssl, const unsigned char *cookie,
                                   unsigned int cookie_len)
 {
     if (cookie_len == sizeof(cookie_magic_value) - 1
@@ -3672,7 +3672,7 @@ static int verify_cookie_callback(SSL *ssl, const unsigned char *cookie,
     return 0;
 }
 
-static int generate_stateless_cookie_callback(SSL *ssl, unsigned char *cookie,
+static int __cdecl generate_stateless_cookie_callback(SSL *ssl, unsigned char *cookie,
                                         size_t *cookie_len)
 {
     unsigned int temp;
@@ -3681,13 +3681,13 @@ static int generate_stateless_cookie_callback(SSL *ssl, unsigned char *cookie,
     return res;
 }
 
-static int verify_stateless_cookie_callback(SSL *ssl, const unsigned char *cookie,
+static int __cdecl verify_stateless_cookie_callback(SSL *ssl, const unsigned char *cookie,
                                       size_t cookie_len)
 {
     return verify_cookie_callback(ssl, cookie, cookie_len);
 }
 
-static int test_stateless(void)
+static int __cdecl test_stateless(void)
 {
     SSL_CTX *sctx = NULL, *cctx = NULL;
     SSL *serverssl = NULL, *clientssl = NULL;
@@ -3785,7 +3785,7 @@ static int snicb = 0;
 
 #define TEST_EXT_TYPE1  0xff00
 
-static int old_add_cb(SSL *s, unsigned int ext_type, const unsigned char **out,
+static int __cdecl old_add_cb(SSL *s, unsigned int ext_type, const unsigned char **out,
                       size_t *outlen, int *al, void *add_arg)
 {
     int *server = (int *)add_arg;
@@ -3806,13 +3806,13 @@ static int old_add_cb(SSL *s, unsigned int ext_type, const unsigned char **out,
     return 1;
 }
 
-static void old_free_cb(SSL *s, unsigned int ext_type, const unsigned char *out,
+static void __cdecl old_free_cb(SSL *s, unsigned int ext_type, const unsigned char *out,
                         void *add_arg)
 {
     OPENSSL_free((unsigned char *)out);
 }
 
-static int old_parse_cb(SSL *s, unsigned int ext_type, const unsigned char *in,
+static int __cdecl old_parse_cb(SSL *s, unsigned int ext_type, const unsigned char *in,
                         size_t inlen, int *al, void *parse_arg)
 {
     int *server = (int *)parse_arg;
@@ -3830,7 +3830,7 @@ static int old_parse_cb(SSL *s, unsigned int ext_type, const unsigned char *in,
     return 1;
 }
 
-static int new_add_cb(SSL *s, unsigned int ext_type, unsigned int context,
+static int __cdecl new_add_cb(SSL *s, unsigned int ext_type, unsigned int context,
                       const unsigned char **out, size_t *outlen, X509 *x,
                       size_t chainidx, int *al, void *add_arg)
 {
@@ -3852,13 +3852,13 @@ static int new_add_cb(SSL *s, unsigned int ext_type, unsigned int context,
     return 1;
 }
 
-static void new_free_cb(SSL *s, unsigned int ext_type, unsigned int context,
+static void __cdecl new_free_cb(SSL *s, unsigned int ext_type, unsigned int context,
                         const unsigned char *out, void *add_arg)
 {
     OPENSSL_free((unsigned char *)out);
 }
 
-static int new_parse_cb(SSL *s, unsigned int ext_type, unsigned int context,
+static int __cdecl new_parse_cb(SSL *s, unsigned int ext_type, unsigned int context,
                         const unsigned char *in, size_t inlen, X509 *x,
                         size_t chainidx, int *al, void *parse_arg)
 {
@@ -3876,7 +3876,7 @@ static int new_parse_cb(SSL *s, unsigned int ext_type, unsigned int context,
     return 1;
 }
 
-static int sni_cb(SSL *s, int *al, void *arg)
+static int __cdecl sni_cb(SSL *s, int *al, void *arg)
 {
     SSL_CTX *ctx = (SSL_CTX *)arg;
 
@@ -3896,7 +3896,7 @@ static int sni_cb(SSL *s, int *al, void *arg)
  * Test 3: New style callbacks in TLSv1.3. Extensions in CH and EE
  * Test 4: New style callbacks in TLSv1.3. Extensions in CH, SH, EE, Cert + NST
  */
-static int test_custom_exts(int tst)
+static int __cdecl test_custom_exts(int tst)
 {
     SSL_CTX *cctx = NULL, *sctx = NULL, *sctx2 = NULL;
     SSL *clientssl = NULL, *serverssl = NULL;
@@ -4107,7 +4107,7 @@ end:
  * Test loading of serverinfo data in various formats. test_sslmessages actually
  * tests to make sure the extensions appear in the handshake
  */
-static int test_serverinfo(int tst)
+static int __cdecl test_serverinfo(int tst)
 {
     unsigned int version;
     unsigned char *sibuf;
@@ -4167,7 +4167,7 @@ static int test_serverinfo(int tst)
  */
 #define SMALL_LABEL_LEN 10
 #define LONG_LABEL_LEN  249
-static int test_export_key_mat(int tst)
+static int __cdecl test_export_key_mat(int tst)
 {
     int testresult = 0;
     SSL_CTX *cctx = NULL, *sctx = NULL, *sctx2 = NULL;
@@ -4317,7 +4317,7 @@ static int test_export_key_mat(int tst)
  * sides of the communication produce the same results for different
  * protocol versions.
  */
-static int test_export_key_mat_early(int idx)
+static int __cdecl test_export_key_mat_early(int idx)
 {
     static const char label[] = "test label";
     static const unsigned char context[] = "context";
@@ -4392,7 +4392,7 @@ static int test_export_key_mat_early(int idx)
 /*
  * Test KeyUpdate.
  */
-static int test_key_update(void)
+static int __cdecl test_key_update(void)
 {
     SSL_CTX *cctx = NULL, *sctx = NULL;
     SSL *clientssl = NULL, *serverssl = NULL;
@@ -4451,7 +4451,7 @@ static int test_key_update(void)
  * Test 0: Client sends KeyUpdate while Server is writing
  * Test 1: Server sends KeyUpdate while Client is writing
  */
-static int test_key_update_in_write(int tst)
+static int __cdecl test_key_update_in_write(int tst)
 {
     SSL_CTX *cctx = NULL, *sctx = NULL;
     SSL *clientssl = NULL, *serverssl = NULL;
@@ -4531,7 +4531,7 @@ static int test_key_update_in_write(int tst)
 }
 #endif /* OPENSSL_NO_TLS1_3 */
 
-static int test_ssl_clear(int idx)
+static int __cdecl test_ssl_clear(int idx)
 {
     SSL_CTX *cctx = NULL, *sctx = NULL;
     SSL *clientssl = NULL, *serverssl = NULL;
@@ -4586,7 +4586,7 @@ static int test_ssl_clear(int idx)
 }
 
 /* Parse CH and retrieve any MFL extension value if present */
-static int get_MFL_from_client_hello(BIO *bio, int *mfl_codemfl_code)
+static int __cdecl get_MFL_from_client_hello(BIO *bio, int *mfl_codemfl_code)
 {
     long len;
     unsigned char *data;
@@ -4642,7 +4642,7 @@ static const unsigned char max_fragment_len_test[] = {
     TLSEXT_max_fragment_length_4096
 };
 
-static int test_max_fragment_len_ext(int idx_tst)
+static int __cdecl test_max_fragment_len_ext(int idx_tst)
 {
     SSL_CTX *ctx;
     SSL *con = NULL;
@@ -4693,7 +4693,7 @@ end:
 }
 
 #ifndef OPENSSL_NO_TLS1_3
-static int test_pha_key_update(void)
+static int __cdecl test_pha_key_update(void)
 {
     SSL_CTX *cctx = NULL, *sctx = NULL;
     SSL *clientssl = NULL, *serverssl = NULL;
@@ -4754,7 +4754,7 @@ static int test_pha_key_update(void)
 
 static SRP_VBASE *vbase = NULL;
 
-static int ssl_srp_cb(SSL *s, int *ad, void *arg)
+static int __cdecl ssl_srp_cb(SSL *s, int *ad, void *arg)
 {
     int ret = SSL3_AL_FATAL;
     char *username;
@@ -4785,7 +4785,7 @@ static int ssl_srp_cb(SSL *s, int *ad, void *arg)
     return ret;
 }
 
-static int create_new_vfile(char *userid, char *password, const char *filename)
+static int __cdecl create_new_vfile(char *userid, char *password, const char *filename)
 {
     char *gNid = NULL;
     OPENSSL_STRING *row = OPENSSL_zalloc(sizeof(row) * (DB_NUMBER + 1));
@@ -4843,7 +4843,7 @@ static int create_new_vfile(char *userid, char *password, const char *filename)
     return ret;
 }
 
-static int create_new_vbase(char *userid, char *password)
+static int __cdecl create_new_vbase(char *userid, char *password)
 {
     BIGNUM *verifier = NULL, *salt = NULL;
     const SRP_gN *lgN = NULL;
@@ -4896,7 +4896,7 @@ end:
  * Test 4: Simple successful SRP connection, vbase loaded from new file
  * Test 5: Connection failure due to bad password, vbase loaded from new file
  */
-static int test_srp(int tst)
+static int __cdecl test_srp(int tst)
 {
     char *userid = "test", *password = "password", *tstsrpfile;
     SSL_CTX *cctx = NULL, *sctx = NULL;
@@ -5064,7 +5064,7 @@ static struct info_cb_states_st {
     }
 };
 
-static void sslapi_info_callback(const SSL *s, int where, int ret)
+static void __cdecl sslapi_info_callback(const SSL *s, int where, int ret)
 {
     struct info_cb_states_st *state = info_cb_states[info_cb_offset];
 
@@ -5117,7 +5117,7 @@ static void sslapi_info_callback(const SSL *s, int where, int ret)
  * Test 4: TLSv1.3, server, early_data
  * Test 5: TLSv1.3, client, early_data
  */
-static int test_info_callback(int tst)
+static int __cdecl test_info_callback(int tst)
 {
     SSL_CTX *cctx = NULL, *sctx = NULL;
     SSL *clientssl = NULL, *serverssl = NULL;
@@ -5233,7 +5233,7 @@ static int test_info_callback(int tst)
     return testresult;
 }
 
-static int test_ssl_pending(int tst)
+static int __cdecl test_ssl_pending(int tst)
 {
     SSL_CTX *cctx = NULL, *sctx = NULL;
     SSL *clientssl = NULL, *serverssl = NULL;
@@ -5355,7 +5355,7 @@ static struct {
 #endif
 };
 
-static int test_ssl_get_shared_ciphers(int tst)
+static int __cdecl test_ssl_get_shared_ciphers(int tst)
 {
     SSL_CTX *cctx = NULL, *sctx = NULL;
     SSL *clientssl = NULL, *serverssl = NULL;
@@ -5410,7 +5410,7 @@ static int gen_tick_called, dec_tick_called, tick_key_cb_called;
 static int tick_key_renew = 0;
 static SSL_TICKET_RETURN tick_dec_ret = SSL_TICKET_RETURN_ABORT;
 
-static int gen_tick_cb(SSL *s, void *arg)
+static int __cdecl gen_tick_cb(SSL *s, void *arg)
 {
     gen_tick_called = 1;
 
@@ -5418,7 +5418,7 @@ static int gen_tick_cb(SSL *s, void *arg)
                                            strlen(appdata));
 }
 
-static SSL_TICKET_RETURN dec_tick_cb(SSL *s, SSL_SESSION *ss,
+static SSL_TICKET_RETURN __cdecl dec_tick_cb(SSL *s, SSL_SESSION *ss,
                                      const unsigned char *keyname,
                                      size_t keyname_length,
                                      SSL_TICKET_STATUS status,
@@ -5462,7 +5462,7 @@ static SSL_TICKET_RETURN dec_tick_cb(SSL *s, SSL_SESSION *ss,
 
 }
 
-static int tick_key_cb(SSL *s, unsigned char key_name[16],
+static int __cdecl tick_key_cb(SSL *s, unsigned char key_name[16],
                        unsigned char iv[EVP_MAX_IV_LENGTH], EVP_CIPHER_CTX *ctx,
                        HMAC_CTX *hctx, int enc)
 {
@@ -5495,7 +5495,7 @@ static int tick_key_cb(SSL *s, unsigned char key_name[16],
  * Test 10: TLSv1.2, ticket key callback, ticket, renewal
  * Test 11: TLSv1.3, ticket key callback, ticket, renewal
  */
-static int test_ticket_callbacks(int tst)
+static int __cdecl test_ticket_callbacks(int tst)
 {
     SSL_CTX *cctx = NULL, *sctx = NULL;
     SSL *clientssl = NULL, *serverssl = NULL;
@@ -5644,7 +5644,7 @@ static int test_ticket_callbacks(int tst)
  * Test 6: TLSv1.3, server continues to read/write after client shutdown, client
  *                  doesn't read it
  */
-static int test_shutdown(int tst)
+static int __cdecl test_shutdown(int tst)
 {
     SSL_CTX *cctx = NULL, *sctx = NULL;
     SSL *clientssl = NULL, *serverssl = NULL;
@@ -5796,7 +5796,7 @@ static int test_shutdown(int tst)
 #if !defined(OPENSSL_NO_TLS1_2) || !defined(OPENSSL_NO_TLS1_3)
 static int cert_cb_cnt;
 
-static int cert_cb(SSL *s, void *arg)
+static int __cdecl cert_cb(SSL *s, void *arg)
 {
     SSL_CTX *ctx = (SSL_CTX *)arg;
     BIO *in = NULL;
@@ -5891,7 +5891,7 @@ static int cert_cb(SSL *s, void *arg)
  *                   chain
  * Test 5: Failure - SSL_check_chain fails from callback due to bad ee cert
  */
-static int test_cert_cb_int(int prot, int tst)
+static int __cdecl test_cert_cb_int(int prot, int tst)
 {
     SSL_CTX *cctx = NULL, *sctx = NULL, *snictx = NULL;
     SSL *clientssl = NULL, *serverssl = NULL;
@@ -5963,7 +5963,7 @@ static int test_cert_cb_int(int prot, int tst)
 }
 #endif
 
-static int test_cert_cb(int tst)
+static int __cdecl test_cert_cb(int tst)
 {
     int testresult = 1;
 
@@ -5977,7 +5977,7 @@ static int test_cert_cb(int tst)
     return testresult;
 }
 
-static int client_cert_cb(SSL *ssl, X509 **x509, EVP_PKEY **pkey)
+static int __cdecl client_cert_cb(SSL *ssl, X509 **x509, EVP_PKEY **pkey)
 {
     X509 *xcert, *peer;
     EVP_PKEY *privpkey;
@@ -6022,7 +6022,7 @@ static int verify_cb(int preverify_ok, X509_STORE_CTX *x509_ctx)
     return 1;
 }
 
-static int test_client_cert_cb(int tst)
+static int __cdecl test_client_cert_cb(int tst)
 {
     SSL_CTX *cctx = NULL, *sctx = NULL;
     SSL *clientssl = NULL, *serverssl = NULL;
@@ -6079,7 +6079,7 @@ static int test_client_cert_cb(int tst)
  * Test 1: Both SSL_CTX_set0_CA_list() and SSL_CTX_set_client_CA_list()
  * Test 2: Only SSL_CTX_set_client_CA_list()
  */
-static int test_ca_names_int(int prot, int tst)
+static int __cdecl test_ca_names_int(int prot, int tst)
 {
     SSL_CTX *cctx = NULL, *sctx = NULL;
     SSL *clientssl = NULL, *serverssl = NULL;
@@ -6191,7 +6191,7 @@ static int test_ca_names_int(int prot, int tst)
 }
 #endif
 
-static int test_ca_names(int tst)
+static int __cdecl test_ca_names(int tst)
 {
     int testresult = 1;
 
diff --git a/test/sslbuffertest.c b/test/sslbuffertest.c
index b8b1f52dde..78344ac8bb 100644
--- a/test/sslbuffertest.c
+++ b/test/sslbuffertest.c
@@ -43,7 +43,7 @@ static SSL_CTX *clientctx = NULL;
  * 7 = + allocate buffers after free
  * 8 = + free buffers after allocation
  */
-static int test_func(int test)
+static int __cdecl test_func(int test)
 {
     int result = 0;
     SSL *serverssl = NULL, *clientssl = NULL;
diff --git a/test/sslcorrupttest.c b/test/sslcorrupttest.c
index d06c8c729b..669219e009 100644
--- a/test/sslcorrupttest.c
+++ b/test/sslcorrupttest.c
@@ -13,7 +13,7 @@
 
 static int docorrupt = 0;
 
-static void copy_flags(BIO *bio)
+static void __cdecl copy_flags(BIO *bio)
 {
     int flags;
     BIO *next = BIO_next(bio);
@@ -23,7 +23,7 @@ static void copy_flags(BIO *bio)
     BIO_set_flags(bio, flags);
 }
 
-static int tls_corrupt_read(BIO *bio, char *out, int outl)
+static int __cdecl tls_corrupt_read(BIO *bio, char *out, int outl)
 {
     int ret;
     BIO *next = BIO_next(bio);
@@ -34,7 +34,7 @@ static int tls_corrupt_read(BIO *bio, char *out, int outl)
     return ret;
 }
 
-static int tls_corrupt_write(BIO *bio, const char *in, int inl)
+static int __cdecl tls_corrupt_write(BIO *bio, const char *in, int inl)
 {
     int ret;
     BIO *next = BIO_next(bio);
@@ -55,7 +55,7 @@ static int tls_corrupt_write(BIO *bio, const char *in, int inl)
     return ret;
 }
 
-static long tls_corrupt_ctrl(BIO *bio, int cmd, long num, void *ptr)
+static long __cdecl tls_corrupt_ctrl(BIO *bio, int cmd, long num, void *ptr)
 {
     long ret;
     BIO *next = BIO_next(bio);
@@ -74,26 +74,26 @@ static long tls_corrupt_ctrl(BIO *bio, int cmd, long num, void *ptr)
     return ret;
 }
 
-static int tls_corrupt_gets(BIO *bio, char *buf, int size)
+static int __cdecl tls_corrupt_gets(BIO *bio, char *buf, int size)
 {
     /* We don't support this - not needed anyway */
     return -1;
 }
 
-static int tls_corrupt_puts(BIO *bio, const char *str)
+static int __cdecl tls_corrupt_puts(BIO *bio, const char *str)
 {
     /* We don't support this - not needed anyway */
     return -1;
 }
 
-static int tls_corrupt_new(BIO *bio)
+static int __cdecl tls_corrupt_new(BIO *bio)
 {
     BIO_set_init(bio, 1);
 
     return 1;
 }
 
-static int tls_corrupt_free(BIO *bio)
+static int __cdecl tls_corrupt_free(BIO *bio)
 {
     BIO_set_init(bio, 0);
 
@@ -123,7 +123,7 @@ static const BIO_METHOD *bio_f_tls_corrupt_filter(void)
     return method_tls_corrupt;
 }
 
-static void bio_f_tls_corrupt_filter_free(void)
+static void __cdecl bio_f_tls_corrupt_filter_free(void)
 {
     BIO_meth_free(method_tls_corrupt);
 }
@@ -137,7 +137,7 @@ static void bio_f_tls_corrupt_filter_free(void)
  */
 static const char **cipher_list = NULL;
 
-static int setup_cipher_list(void)
+static int __cdecl setup_cipher_list(void)
 {
     SSL_CTX *ctx = NULL;
     SSL *ssl = NULL;
@@ -179,7 +179,7 @@ err:
 static char *cert = NULL;
 static char *privkey = NULL;
 
-static int test_ssl_corrupt(int testidx)
+static int __cdecl test_ssl_corrupt(int testidx)
 {
     static unsigned char junk[16000] = { 0 };
     SSL_CTX *sctx = NULL, *cctx = NULL;
diff --git a/test/ssltest_old.c b/test/ssltest_old.c
index 36e6031f3a..9edc964294 100644
--- a/test/ssltest_old.c
+++ b/test/ssltest_old.c
@@ -84,7 +84,7 @@ static SSL_CTX *s_ctx2 = NULL;
 #define COMP_ZLIB       1
 
 static int verify_callback(int ok, X509_STORE_CTX *ctx);
-static int app_verify_callback(X509_STORE_CTX *ctx, void *arg);
+static unsigned int __cdecl app_verify_callback(X509_STORE_CTX *ctx, void *arg);
 #define APP_CALLBACK_STRING "Test Callback Argument"
 struct app_verify_arg {
     char *string;
@@ -99,12 +99,12 @@ static DH *get_dh1024dsa(void);
 
 static char *psk_key = NULL;    /* by default PSK is not used */
 #ifndef OPENSSL_NO_PSK
-static unsigned int psk_client_callback(SSL *ssl, const char *hint,
+static unsigned int __cdecl psk_client_callback(SSL *ssl, const char *hint,
                                         char *identity,
                                         unsigned int max_identity_len,
                                         unsigned char *psk,
                                         unsigned int max_psk_len);
-static unsigned int psk_server_callback(SSL *ssl, const char *identity,
+static unsigned int __cdecl psk_server_callback(SSL *ssl, const char *identity,
                                         unsigned char *psk,
                                         unsigned int max_psk_len);
 #endif
@@ -119,7 +119,7 @@ static int npn_client = 0;
 static int npn_server = 0;
 static int npn_server_reject = 0;
 
-static int cb_client_npn(SSL *s, unsigned char **out, unsigned char *outlen,
+static int __cdecl cb_client_npn(SSL *s, unsigned char **out, unsigned char *outlen,
                          const unsigned char *in, unsigned int inlen,
                          void *arg)
 {
@@ -133,7 +133,7 @@ static int cb_client_npn(SSL *s, unsigned char **out, unsigned char *outlen,
     return SSL_TLSEXT_ERR_OK;
 }
 
-static int cb_server_npn(SSL *s, const unsigned char **data,
+static int __cdecl cb_server_npn(SSL *s, const unsigned char **data,
                          unsigned int *len, void *arg)
 {
     *data = (const unsigned char *)NEXT_PROTO_STRING;
@@ -141,13 +141,13 @@ static int cb_server_npn(SSL *s, const unsigned char **data,
     return SSL_TLSEXT_ERR_OK;
 }
 
-static int cb_server_rejects_npn(SSL *s, const unsigned char **data,
+static int __cdecl cb_server_rejects_npn(SSL *s, const unsigned char **data,
                                  unsigned int *len, void *arg)
 {
     return SSL_TLSEXT_ERR_NOACK;
 }
 
-static int verify_npn(SSL *client, SSL *server)
+static int __cdecl verify_npn(SSL *client, SSL *server)
 {
     const unsigned char *client_s;
     unsigned client_len;
@@ -214,7 +214,7 @@ static const char *client_sess_in;
 static SSL_SESSION *server_sess;
 static SSL_SESSION *client_sess;
 
-static int servername_cb(SSL *s, int *ad, void *arg)
+static int __cdecl servername_cb(SSL *s, int *ad, void *arg)
 {
     const char *servername = SSL_get_servername(s, TLSEXT_NAMETYPE_host_name);
     if (sn_server2 == NULL) {
@@ -231,7 +231,7 @@ static int servername_cb(SSL *s, int *ad, void *arg)
     }
     return SSL_TLSEXT_ERR_OK;
 }
-static int verify_servername(SSL *client, SSL *server)
+static int __cdecl verify_servername(SSL *client, SSL *server)
 {
     /* just need to see if sn_context is what we expect */
     SSL_CTX* ctx = SSL_get_SSL_CTX(server);
@@ -291,7 +291,7 @@ static unsigned char *next_protos_parse(size_t *outlen,
     return out;
 }
 
-static int cb_server_alpn(SSL *s, const unsigned char **out,
+static int __cdecl cb_server_alpn(SSL *s, const unsigned char **out,
                           unsigned char *outlen, const unsigned char *in,
                           unsigned int inlen, void *arg)
 {
@@ -325,7 +325,7 @@ static int cb_server_alpn(SSL *s, const unsigned char **out,
     return SSL_TLSEXT_ERR_OK;
 }
 
-static int verify_alpn(SSL *client, SSL *server)
+static int __cdecl verify_alpn(SSL *client, SSL *server)
 {
     const unsigned char *client_proto, *server_proto;
     unsigned int client_proto_len = 0, server_proto_len = 0;
@@ -410,7 +410,7 @@ static int custom_ext = 0;
 /* This set based on extension callbacks */
 static int custom_ext_error = 0;
 
-static int serverinfo_cli_parse_cb(SSL *s, unsigned int ext_type,
+static int __cdecl serverinfo_cli_parse_cb(SSL *s, unsigned int ext_type,
                                    const unsigned char *in, size_t inlen,
                                    int *al, void *arg)
 {
@@ -423,7 +423,7 @@ static int serverinfo_cli_parse_cb(SSL *s, unsigned int ext_type,
     return 1;
 }
 
-static int verify_serverinfo(void)
+static int __cdecl verify_serverinfo(void)
 {
     if (serverinfo_sct != serverinfo_sct_seen)
         return -1;
@@ -442,7 +442,7 @@ static int verify_serverinfo(void)
  * 3 - ClientHello with "abc", "defg" response
  */
 
-static int custom_ext_0_cli_add_cb(SSL *s, unsigned int ext_type,
+static int __cdecl custom_ext_0_cli_add_cb(SSL *s, unsigned int ext_type,
                                    const unsigned char **out,
                                    size_t *outlen, int *al, void *arg)
 {
@@ -451,14 +451,14 @@ static int custom_ext_0_cli_add_cb(SSL *s, unsigned int ext_type,
     return 0;                   /* Don't send an extension */
 }
 
-static int custom_ext_0_cli_parse_cb(SSL *s, unsigned int ext_type,
+static int __cdecl custom_ext_0_cli_parse_cb(SSL *s, unsigned int ext_type,
                                      const unsigned char *in,
                                      size_t inlen, int *al, void *arg)
 {
     return 1;
 }
 
-static int custom_ext_1_cli_add_cb(SSL *s, unsigned int ext_type,
+static int __cdecl custom_ext_1_cli_add_cb(SSL *s, unsigned int ext_type,
                                    const unsigned char **out,
                                    size_t *outlen, int *al, void *arg)
 {
@@ -469,14 +469,14 @@ static int custom_ext_1_cli_add_cb(SSL *s, unsigned int ext_type,
     return 1;                   /* Send "abc" */
 }
 
-static int custom_ext_1_cli_parse_cb(SSL *s, unsigned int ext_type,
+static int __cdecl custom_ext_1_cli_parse_cb(SSL *s, unsigned int ext_type,
                                      const unsigned char *in,
                                      size_t inlen, int *al, void *arg)
 {
     return 1;
 }
 
-static int custom_ext_2_cli_add_cb(SSL *s, unsigned int ext_type,
+static int __cdecl custom_ext_2_cli_add_cb(SSL *s, unsigned int ext_type,
                                    const unsigned char **out,
                                    size_t *outlen, int *al, void *arg)
 {
@@ -487,7 +487,7 @@ static int custom_ext_2_cli_add_cb(SSL *s, unsigned int ext_type,
     return 1;                   /* Send "abc" */
 }
 
-static int custom_ext_2_cli_parse_cb(SSL *s, unsigned int ext_type,
+static int __cdecl custom_ext_2_cli_parse_cb(SSL *s, unsigned int ext_type,
                                      const unsigned char *in,
                                      size_t inlen, int *al, void *arg)
 {
@@ -498,7 +498,7 @@ static int custom_ext_2_cli_parse_cb(SSL *s, unsigned int ext_type,
     return 1;
 }
 
-static int custom_ext_3_cli_add_cb(SSL *s, unsigned int ext_type,
+static int __cdecl custom_ext_3_cli_add_cb(SSL *s, unsigned int ext_type,
                                    const unsigned char **out,
                                    size_t *outlen, int *al, void *arg)
 {
@@ -509,7 +509,7 @@ static int custom_ext_3_cli_add_cb(SSL *s, unsigned int ext_type,
     return 1;                   /* Send "abc" */
 }
 
-static int custom_ext_3_cli_parse_cb(SSL *s, unsigned int ext_type,
+static int __cdecl custom_ext_3_cli_parse_cb(SSL *s, unsigned int ext_type,
                                      const unsigned char *in,
                                      size_t inlen, int *al, void *arg)
 {
@@ -526,7 +526,7 @@ static int custom_ext_3_cli_parse_cb(SSL *s, unsigned int ext_type,
  * custom_ext_0_cli_add_cb returns 0 - the server won't receive a callback
  * for this extension
  */
-static int custom_ext_0_srv_parse_cb(SSL *s, unsigned int ext_type,
+static int __cdecl custom_ext_0_srv_parse_cb(SSL *s, unsigned int ext_type,
                                      const unsigned char *in,
                                      size_t inlen, int *al, void *arg)
 {
@@ -535,7 +535,7 @@ static int custom_ext_0_srv_parse_cb(SSL *s, unsigned int ext_type,
 }
 
 /* 'add' callbacks are only called if the 'parse' callback is called */
-static int custom_ext_0_srv_add_cb(SSL *s, unsigned int ext_type,
+static int __cdecl custom_ext_0_srv_add_cb(SSL *s, unsigned int ext_type,
                                    const unsigned char **out,
                                    size_t *outlen, int *al, void *arg)
 {
@@ -544,7 +544,7 @@ static int custom_ext_0_srv_add_cb(SSL *s, unsigned int ext_type,
     return 0;                   /* Don't send an extension */
 }
 
-static int custom_ext_1_srv_parse_cb(SSL *s, unsigned int ext_type,
+static int __cdecl custom_ext_1_srv_parse_cb(SSL *s, unsigned int ext_type,
                                      const unsigned char *in,
                                      size_t inlen, int *al, void *arg)
 {
@@ -558,14 +558,14 @@ static int custom_ext_1_srv_parse_cb(SSL *s, unsigned int ext_type,
     return 1;
 }
 
-static int custom_ext_1_srv_add_cb(SSL *s, unsigned int ext_type,
+static int __cdecl custom_ext_1_srv_add_cb(SSL *s, unsigned int ext_type,
                                    const unsigned char **out,
                                    size_t *outlen, int *al, void *arg)
 {
     return 0;                   /* Don't send an extension */
 }
 
-static int custom_ext_2_srv_parse_cb(SSL *s, unsigned int ext_type,
+static int __cdecl custom_ext_2_srv_parse_cb(SSL *s, unsigned int ext_type,
                                      const unsigned char *in,
                                      size_t inlen, int *al, void *arg)
 {
@@ -579,7 +579,7 @@ static int custom_ext_2_srv_parse_cb(SSL *s, unsigned int ext_type,
     return 1;
 }
 
-static int custom_ext_2_srv_add_cb(SSL *s, unsigned int ext_type,
+static int __cdecl custom_ext_2_srv_add_cb(SSL *s, unsigned int ext_type,
                                    const unsigned char **out,
                                    size_t *outlen, int *al, void *arg)
 {
@@ -588,7 +588,7 @@ static int custom_ext_2_srv_add_cb(SSL *s, unsigned int ext_type,
     return 1;                   /* Send empty extension */
 }
 
-static int custom_ext_3_srv_parse_cb(SSL *s, unsigned int ext_type,
+static int __cdecl custom_ext_3_srv_parse_cb(SSL *s, unsigned int ext_type,
                                      const unsigned char *in,
                                      size_t inlen, int *al, void *arg)
 {
@@ -602,7 +602,7 @@ static int custom_ext_3_srv_parse_cb(SSL *s, unsigned int ext_type,
     return 1;
 }
 
-static int custom_ext_3_srv_add_cb(SSL *s, unsigned int ext_type,
+static int __cdecl custom_ext_3_srv_add_cb(SSL *s, unsigned int ext_type,
                                    const unsigned char **out,
                                    size_t *outlen, int *al, void *arg)
 {
@@ -794,7 +794,7 @@ static void print_details(SSL *c_ssl, const char *prefix)
  *
  * Returns -1 on failure or the version on success
  */
-static int protocol_from_string(const char *value)
+static int __cdecl protocol_from_string(const char *value)
 {
     struct protocol_versions {
         const char *name;
@@ -836,7 +836,7 @@ static SSL_SESSION *read_session(const char *filename)
     return sess;
 }
 
-static int write_session(const char *filename, SSL_SESSION *sess)
+static int __cdecl write_session(const char *filename, SSL_SESSION *sess)
 {
     BIO *f = BIO_new_file(filename, "w");
 
@@ -859,7 +859,7 @@ static int write_session(const char *filename, SSL_SESSION *sess)
  *
  * Returns 0 on failure and 1 on success
  */
-static int set_protocol_version(const char *version, SSL *ssl, int setting)
+static int __cdecl set_protocol_version(const char *version, SSL *ssl, int setting)
 {
     if (version != NULL) {
         int ver = protocol_from_string(version);
@@ -872,7 +872,7 @@ static int set_protocol_version(const char *version, SSL *ssl, int setting)
     return 1;
 }
 
-int main(int argc, char *argv[])
+int __cdecl main(int argc, char *argv[])
 {
     const char *CApath = NULL, *CAfile = NULL;
     int badop = 0;
@@ -2842,7 +2842,7 @@ static int verify_callback(int ok, X509_STORE_CTX *ctx)
     return ok;
 }
 
-static int app_verify_callback(X509_STORE_CTX *ctx, void *arg)
+static unsigned int __cdecl app_verify_callback(X509_STORE_CTX *ctx, void *arg)
 {
     int ok = 1;
     struct app_verify_arg *cb_arg = arg;
@@ -3023,7 +3023,7 @@ static DH *get_dh1024dsa(void)
 
 #ifndef OPENSSL_NO_PSK
 /* convert the PSK key (psk_key) in ascii to binary (psk) */
-static int psk_key2bn(const char *pskkey, unsigned char *psk,
+static unsigned int __cdecl psk_key2bn(const char *pskkey, unsigned char *psk,
                       unsigned int max_psk_len)
 {
     int ret;
@@ -3048,7 +3048,7 @@ static int psk_key2bn(const char *pskkey, unsigned char *psk,
     return ret;
 }
 
-static unsigned int psk_client_callback(SSL *ssl, const char *hint,
+static unsigned int __cdecl psk_client_callback(SSL *ssl, const char *hint,
                                         char *identity,
                                         unsigned int max_identity_len,
                                         unsigned char *psk,
@@ -3071,7 +3071,7 @@ static unsigned int psk_client_callback(SSL *ssl, const char *hint,
     return psk_len;
 }
 
-static unsigned int psk_server_callback(SSL *ssl, const char *identity,
+static unsigned int __cdecl psk_server_callback(SSL *ssl, const char *identity,
                                         unsigned char *psk,
                                         unsigned int max_psk_len)
 {
diff --git a/test/ssltestlib.c b/test/ssltestlib.c
index 456afdf471..314ec278a4 100644
--- a/test/ssltestlib.c
+++ b/test/ssltestlib.c
@@ -51,13 +51,13 @@ static ossl_inline void ossl_sleep(unsigned int millis)
 }
 #endif
 
-static int tls_dump_new(BIO *bi);
-static int tls_dump_free(BIO *a);
-static int tls_dump_read(BIO *b, char *out, int outl);
-static int tls_dump_write(BIO *b, const char *in, int inl);
-static long tls_dump_ctrl(BIO *b, int cmd, long num, void *ptr);
-static int tls_dump_gets(BIO *bp, char *buf, int size);
-static int tls_dump_puts(BIO *bp, const char *str);
+static int __cdecl tls_dump_new(BIO *bi);
+static int __cdecl tls_dump_free(BIO *a);
+static int __cdecl tls_dump_read(BIO *b, char *out, int outl);
+static int __cdecl tls_dump_write(BIO *b, const char *in, int inl);
+static long __cdecl tls_dump_ctrl(BIO *b, int cmd, long num, void *ptr);
+static int __cdecl tls_dump_gets(BIO *bp, char *buf, int size);
+static int __cdecl tls_dump_puts(BIO *bp, const char *str);
 
 /* Choose a sufficiently large type likely to be unused for this custom BIO */
 #define BIO_TYPE_TLS_DUMP_FILTER  (0x80 | BIO_TYPE_FILTER)
@@ -92,13 +92,13 @@ void bio_f_tls_dump_filter_free(void)
     BIO_meth_free(method_tls_dump);
 }
 
-static int tls_dump_new(BIO *bio)
+static int __cdecl tls_dump_new(BIO *bio)
 {
     BIO_set_init(bio, 1);
     return 1;
 }
 
-static int tls_dump_free(BIO *bio)
+static int __cdecl tls_dump_free(BIO *bio)
 {
     BIO_set_init(bio, 0);
 
@@ -215,7 +215,7 @@ static void dump_data(const char *data, int len)
     fflush(stdout);
 }
 
-static int tls_dump_read(BIO *bio, char *out, int outl)
+static int __cdecl tls_dump_read(BIO *bio, char *out, int outl)
 {
     int ret;
     BIO *next = BIO_next(bio);
@@ -230,7 +230,7 @@ static int tls_dump_read(BIO *bio, char *out, int outl)
     return ret;
 }
 
-static int tls_dump_write(BIO *bio, const char *in, int inl)
+static int __cdecl tls_dump_write(BIO *bio, const char *in, int inl)
 {
     int ret;
     BIO *next = BIO_next(bio);
@@ -241,7 +241,7 @@ static int tls_dump_write(BIO *bio, const char *in, int inl)
     return ret;
 }
 
-static long tls_dump_ctrl(BIO *bio, int cmd, long num, void *ptr)
+static long __cdecl tls_dump_ctrl(BIO *bio, int cmd, long num, void *ptr)
 {
     long ret;
     BIO *next = BIO_next(bio);
@@ -260,13 +260,13 @@ static long tls_dump_ctrl(BIO *bio, int cmd, long num, void *ptr)
     return ret;
 }
 
-static int tls_dump_gets(BIO *bio, char *buf, int size)
+static int __cdecl tls_dump_gets(BIO *bio, char *buf, int size)
 {
     /* We don't support this - not needed anyway */
     return -1;
 }
 
-static int tls_dump_puts(BIO *bio, const char *str)
+static int __cdecl tls_dump_puts(BIO *bio, const char *str)
 {
     return tls_dump_write(bio, str, strlen(str));
 }
@@ -279,7 +279,7 @@ struct mempacket_st {
     unsigned int type;
 };
 
-static void mempacket_free(MEMPACKET *pkt)
+static void __cdecl mempacket_free(MEMPACKET *pkt)
 {
     if (pkt->data != NULL)
         OPENSSL_free(pkt->data);
@@ -299,13 +299,13 @@ typedef struct mempacket_test_ctx_st {
     int duprec;
 } MEMPACKET_TEST_CTX;
 
-static int mempacket_test_new(BIO *bi);
-static int mempacket_test_free(BIO *a);
-static int mempacket_test_read(BIO *b, char *out, int outl);
-static int mempacket_test_write(BIO *b, const char *in, int inl);
-static long mempacket_test_ctrl(BIO *b, int cmd, long num, void *ptr);
-static int mempacket_test_gets(BIO *bp, char *buf, int size);
-static int mempacket_test_puts(BIO *bp, const char *str);
+static int __cdecl mempacket_test_new(BIO *bi);
+static int __cdecl mempacket_test_free(BIO *a);
+static int __cdecl mempacket_test_read(BIO *b, char *out, int outl);
+static int __cdecl mempacket_test_write(BIO *b, const char *in, int inl);
+static long __cdecl mempacket_test_ctrl(BIO *b, int cmd, long num, void *ptr);
+static int __cdecl mempacket_test_gets(BIO *bp, char *buf, int size);
+static int __cdecl mempacket_test_puts(BIO *bp, const char *str);
 
 const BIO_METHOD *bio_s_mempacket_test(void)
 {
@@ -329,7 +329,7 @@ void bio_s_mempacket_test_free(void)
     BIO_meth_free(meth_mem);
 }
 
-static int mempacket_test_new(BIO *bio)
+static int __cdecl mempacket_test_new(BIO *bio)
 {
     MEMPACKET_TEST_CTX *ctx;
 
@@ -346,7 +346,7 @@ static int mempacket_test_new(BIO *bio)
     return 1;
 }
 
-static int mempacket_test_free(BIO *bio)
+static int __cdecl mempacket_test_free(BIO *bio)
 {
     MEMPACKET_TEST_CTX *ctx = BIO_get_data(bio);
 
@@ -366,7 +366,7 @@ static int mempacket_test_free(BIO *bio)
 
 #define STANDARD_PACKET                 0
 
-static int mempacket_test_read(BIO *bio, char *out, int outl)
+static int __cdecl mempacket_test_read(BIO *bio, char *out, int outl)
 {
     MEMPACKET_TEST_CTX *ctx = BIO_get_data(bio);
     MEMPACKET *thispkt;
@@ -546,12 +546,12 @@ int mempacket_test_inject(BIO *bio, const char *in, int inl, int pktnum,
     return -1;
 }
 
-static int mempacket_test_write(BIO *bio, const char *in, int inl)
+static int __cdecl mempacket_test_write(BIO *bio, const char *in, int inl)
 {
     return mempacket_test_inject(bio, in, inl, -1, STANDARD_PACKET);
 }
 
-static long mempacket_test_ctrl(BIO *bio, int cmd, long num, void *ptr)
+static long __cdecl mempacket_test_ctrl(BIO *bio, int cmd, long num, void *ptr)
 {
     long ret = 1;
     MEMPACKET_TEST_CTX *ctx = BIO_get_data(bio);
@@ -603,24 +603,24 @@ static long mempacket_test_ctrl(BIO *bio, int cmd, long num, void *ptr)
     return ret;
 }
 
-static int mempacket_test_gets(BIO *bio, char *buf, int size)
+static int __cdecl mempacket_test_gets(BIO *bio, char *buf, int size)
 {
     /* We don't support this - not needed anyway */
     return -1;
 }
 
-static int mempacket_test_puts(BIO *bio, const char *str)
+static int __cdecl mempacket_test_puts(BIO *bio, const char *str)
 {
     return mempacket_test_write(bio, str, strlen(str));
 }
 
-static int always_retry_new(BIO *bi);
-static int always_retry_free(BIO *a);
-static int always_retry_read(BIO *b, char *out, int outl);
-static int always_retry_write(BIO *b, const char *in, int inl);
-static long always_retry_ctrl(BIO *b, int cmd, long num, void *ptr);
-static int always_retry_gets(BIO *bp, char *buf, int size);
-static int always_retry_puts(BIO *bp, const char *str);
+static int __cdecl always_retry_new(BIO *bi);
+static int __cdecl always_retry_free(BIO *a);
+static int __cdecl always_retry_read(BIO *b, char *out, int outl);
+static int __cdecl always_retry_write(BIO *b, const char *in, int inl);
+static long __cdecl always_retry_ctrl(BIO *b, int cmd, long num, void *ptr);
+static int __cdecl always_retry_gets(BIO *bp, char *buf, int size);
+static int __cdecl always_retry_puts(BIO *bp, const char *str);
 
 const BIO_METHOD *bio_s_always_retry(void)
 {
@@ -651,32 +651,32 @@ void bio_s_always_retry_free(void)
     BIO_meth_free(meth_always_retry);
 }
 
-static int always_retry_new(BIO *bio)
+static int __cdecl always_retry_new(BIO *bio)
 {
     BIO_set_init(bio, 1);
     return 1;
 }
 
-static int always_retry_free(BIO *bio)
+static int __cdecl always_retry_free(BIO *bio)
 {
     BIO_set_data(bio, NULL);
     BIO_set_init(bio, 0);
     return 1;
 }
 
-static int always_retry_read(BIO *bio, char *out, int outl)
+static int __cdecl always_retry_read(BIO *bio, char *out, int outl)
 {
     BIO_set_retry_read(bio);
     return -1;
 }
 
-static int always_retry_write(BIO *bio, const char *in, int inl)
+static int __cdecl always_retry_write(BIO *bio, const char *in, int inl)
 {
     BIO_set_retry_write(bio);
     return -1;
 }
 
-static long always_retry_ctrl(BIO *bio, int cmd, long num, void *ptr)
+static long __cdecl always_retry_ctrl(BIO *bio, int cmd, long num, void *ptr)
 {
     long ret = 1;
 
@@ -696,13 +696,13 @@ static long always_retry_ctrl(BIO *bio, int cmd, long num, void *ptr)
     return ret;
 }
 
-static int always_retry_gets(BIO *bio, char *buf, int size)
+static int __cdecl always_retry_gets(BIO *bio, char *buf, int size)
 {
     BIO_set_retry_read(bio);
     return -1;
 }
 
-static int always_retry_puts(BIO *bio, const char *str)
+static int __cdecl always_retry_puts(BIO *bio, const char *str)
 {
     BIO_set_retry_write(bio);
     return -1;
diff --git a/test/stack_test.c b/test/stack_test.c
index 680f68d60e..152173ba3b 100644
--- a/test/stack_test.c
+++ b/test/stack_test.c
@@ -41,7 +41,7 @@ DEFINE_SPECIAL_STACK_OF_CONST(uchar, unsigned char)
 DEFINE_STACK_OF(SS)
 DEFINE_STACK_OF_CONST(SU)
 
-static int int_compare(const int *const *a, const int *const *b)
+static int __cdecl int_compare(const int *const *a, const int *const *b)
 {
     if (**a < **b)
         return -1;
@@ -50,7 +50,7 @@ static int int_compare(const int *const *a, const int *const *b)
     return 0;
 }
 
-static int test_int_stack(int reserve)
+static int __cdecl test_int_stack(int reserve)
 {
     static int v[] = { 1, 2, -4, 16, 999, 1, -173, 1, 9 };
     static int notpresent = -1;
@@ -165,13 +165,13 @@ end:
     return testresult;
 }
 
-static int uchar_compare(const unsigned char *const *a,
+static int __cdecl uchar_compare(const unsigned char *const *a,
                          const unsigned char *const *b)
 {
     return **a - (signed int)**b;
 }
 
-static int test_uchar_stack(int reserve)
+static int __cdecl test_uchar_stack(int reserve)
 {
     static const unsigned char v[] = { 1, 3, 7, 5, 255, 0 };
     const int n = OSSL_NELEM(v);
@@ -251,7 +251,7 @@ end:
     return testresult;
 }
 
-static SS *SS_copy(const SS *p)
+static SS * __cdecl SS_copy(const SS *p)
 {
     SS *q = OPENSSL_malloc(sizeof(*q));
 
@@ -260,11 +260,11 @@ static SS *SS_copy(const SS *p)
     return q;
 }
 
-static void SS_free(SS *p) {
+static void __cdecl SS_free(SS *p) {
     OPENSSL_free(p);
 }
 
-static int test_SS_stack(void)
+static int __cdecl test_SS_stack(void)
 {
     STACK_OF(SS) *s = sk_SS_new_null();
     STACK_OF(SS) *r = NULL;
@@ -334,7 +334,7 @@ end:
     return testresult;
 }
 
-static int test_SU_stack(void)
+static int __cdecl test_SU_stack(void)
 {
     STACK_OF(SU) *s = sk_SU_new_null();
     SU v[10];
diff --git a/test/sysdefaulttest.c b/test/sysdefaulttest.c
index 2e2bb8f76b..9a1b123f9c 100644
--- a/test/sysdefaulttest.c
+++ b/test/sysdefaulttest.c
@@ -18,7 +18,7 @@
 
 static SSL_CTX *ctx;
 
-static int test_func(void)
+static int __cdecl test_func(void)
 {
     if (!TEST_int_eq(SSL_CTX_get_min_proto_version(ctx), TLS1_2_VERSION)
         && !TEST_int_eq(SSL_CTX_get_max_proto_version(ctx), TLS1_2_VERSION)) {
diff --git a/test/test_test.c b/test/test_test.c
index 0af2eaeb8a..9692accdbb 100644
--- a/test/test_test.c
+++ b/test/test_test.c
@@ -21,7 +21,7 @@
 
 #define TEST(expected, test) test_case((expected), #test, (test))
 
-static int test_case(int expected, const char *test, int result)
+static int __cdecl test_case(int expected, const char *test, int result)
 {
     if (result != expected) {
         fprintf(stderr, "# FATAL: %s != %d\n", test, expected);
@@ -30,7 +30,7 @@ static int test_case(int expected, const char *test, int result)
     return 1;
 }
 
-static int test_int(void)
+static int __cdecl test_int(void)
 {
     if (!TEST(1, TEST_int_eq(1, 1))
         | !TEST(0, TEST_int_eq(1, -1))
@@ -53,7 +53,7 @@ err:
     return 0;
 }
 
-static int test_uint(void)
+static int __cdecl test_uint(void)
 {
     if (!TEST(1, TEST_uint_eq(3u, 3u))
         | !TEST(0, TEST_uint_eq(3u, 5u))
@@ -76,7 +76,7 @@ err:
     return 0;
 }
 
-static int test_char(void)
+static int __cdecl test_char(void)
 {
     if (!TEST(1, TEST_char_eq('a', 'a'))
         | !TEST(0, TEST_char_eq('a', 'A'))
@@ -99,7 +99,7 @@ err:
     return 0;
 }
 
-static int test_uchar(void)
+static int __cdecl test_uchar(void)
 {
     if (!TEST(1, TEST_uchar_eq(49, 49))
         | !TEST(0, TEST_uchar_eq(49, 60))
@@ -122,7 +122,7 @@ err:
     return 0;
 }
 
-static int test_long(void)
+static int __cdecl test_long(void)
 {
     if (!TEST(1, TEST_long_eq(123l, 123l))
         | !TEST(0, TEST_long_eq(123l, -123l))
@@ -145,7 +145,7 @@ err:
     return 0;
 }
 
-static int test_ulong(void)
+static int __cdecl test_ulong(void)
 {
     if (!TEST(1, TEST_ulong_eq(919ul, 919ul))
         | !TEST(0, TEST_ulong_eq(919ul, 10234ul))
@@ -168,7 +168,7 @@ err:
     return 0;
 }
 
-static int test_size_t(void)
+static int __cdecl test_size_t(void)
 {
     if (!TEST(1, TEST_size_t_eq((size_t)10, (size_t)10))
         | !TEST(0, TEST_size_t_eq((size_t)10, (size_t)12))
@@ -191,7 +191,7 @@ err:
     return 0;
 }
 
-static int test_time_t(void)
+static int __cdecl test_time_t(void)
 {
     if (!TEST(1, TEST_time_t_eq((time_t)10, (time_t)10))
         | !TEST(0, TEST_time_t_eq((time_t)10, (time_t)12))
@@ -214,7 +214,7 @@ err:
     return 0;
 }
 
-static int test_pointer(void)
+static int __cdecl test_pointer(void)
 {
     int x = 0;
     char y = 1;
@@ -240,7 +240,7 @@ err:
     return 0;
 }
 
-static int test_bool(void)
+static int __cdecl test_bool(void)
 {
     if (!TEST(0, TEST_true(0))
         | !TEST(1, TEST_true(1))
@@ -253,7 +253,7 @@ err:
     return 0;
 }
 
-static int test_string(void)
+static int __cdecl test_string(void)
 {
     static char buf[] = "abc";
 
@@ -278,7 +278,7 @@ err:
     return 0;
 }
 
-static int test_memory(void)
+static int __cdecl test_memory(void)
 {
     static char buf[] = "xyz";
 
@@ -300,7 +300,7 @@ err:
     return 0;
 }
 
-static int test_memory_overflow(void)
+static int __cdecl test_memory_overflow(void)
 {
     /* Verify that the memory printing overflows without walking the stack */
     const char *p = "1234567890123456789012345678901234567890123456789012";
@@ -309,7 +309,7 @@ static int test_memory_overflow(void)
     return TEST(0, TEST_mem_eq(p, strlen(p), q, strlen(q)));
 }
 
-static int test_bignum(void)
+static int __cdecl test_bignum(void)
 {
     BIGNUM *a = NULL, *b = NULL, *c = NULL;
     int r = 0;
@@ -380,7 +380,7 @@ err:
     return r;
 }
 
-static int test_long_output(void)
+static int __cdecl test_long_output(void)
 {
     const char *p = "1234567890123456789012345678901234567890123456789012";
     const char *q = "1234567890klmnopqrs01234567890EFGHIJKLM0123456789XYZ";
@@ -398,7 +398,7 @@ static int test_long_output(void)
            & TEST(0, TEST_mem_eq(r, strlen(r), s, strlen(s)));
 }
 
-static int test_long_bignum(void)
+static int __cdecl test_long_bignum(void)
 {
     int r;
     BIGNUM *a = NULL, *b = NULL, *c = NULL, *d = NULL;
@@ -438,14 +438,14 @@ static int test_long_bignum(void)
     return r;
 }
 
-static int test_messages(void)
+static int __cdecl test_messages(void)
 {
     TEST_info("This is an %s message.", "info");
     TEST_error("This is an %s message.", "error");
     return 1;
 }
 
-static int test_single_eval(void)
+static int __cdecl test_single_eval(void)
 {
     int i = 4;
     long l = -9000;
@@ -500,7 +500,7 @@ static int test_single_eval(void)
            && TEST_mem_eq(p--, sizeof("456"), "456", sizeof("456"));
 }
 
-static int test_output(void)
+static int __cdecl test_output(void)
 {
     const char s[] = "1234567890123456789012345678901234567890123456789012"
                      "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ";
@@ -519,7 +519,7 @@ static const char *bn_output_tests[] = {
     "987657"
 };
 
-static int test_bn_output(int n)
+static int __cdecl test_bn_output(int n)
 {
     BIGNUM *b = NULL;
 
diff --git a/test/testutil.h b/test/testutil.h
index 2a610d7bff..a2aaedd46c 100644
--- a/test/testutil.h
+++ b/test/testutil.h
@@ -139,8 +139,8 @@ const char *test_get_option_argument(const char *option);
  * rather link to one of the helper main() methods.
  */
 
-void add_test(const char *test_case_name, int (*test_fn) (void));
-void add_all_tests(const char *test_case_name, int (*test_fn)(int idx), int num,
+void __cdecl add_test(const char *test_case_name, int (__cdecl *test_fn) (void));
+void __cdecl add_all_tests(const char *test_case_name, int (__cdecl *test_fn)(int idx), int num,
                    int subtest);
 
 /*
diff --git a/test/testutil/driver.c b/test/testutil/driver.c
index 670f5b80ce..488a10cbbc 100644
--- a/test/testutil/driver.c
+++ b/test/testutil/driver.c
@@ -26,8 +26,8 @@
  */
 typedef struct test_info {
     const char *test_case_name;
-    int (*test_fn) (void);
-    int (*param_test_fn)(int idx);
+    int (__cdecl *test_fn) (void);
+    int (__cdecl *param_test_fn)(int idx);
     int num;
 
     /* flags */
@@ -44,7 +44,7 @@ static int seed = 0;
  */
 static int num_test_cases = 0;
 
-void add_test(const char *test_case_name, int (*test_fn) (void))
+void __cdecl add_test(const char *test_case_name, int (__cdecl *test_fn) (void))
 {
     assert(num_tests != OSSL_NELEM(all_tests));
     all_tests[num_tests].test_case_name = test_case_name;
@@ -54,7 +54,7 @@ void add_test(const char *test_case_name, int (*test_fn) (void))
     ++num_test_cases;
 }
 
-void add_all_tests(const char *test_case_name, int(*test_fn)(int idx),
+void __cdecl add_all_tests(const char *test_case_name, int(__cdecl *test_fn)(int idx),
                    int num, int subtest)
 {
     assert(num_tests != OSSL_NELEM(all_tests));
diff --git a/test/testutil/main.c b/test/testutil/main.c
index d3ccdda391..f86bc5dbc5 100644
--- a/test/testutil/main.c
+++ b/test/testutil/main.c
@@ -31,7 +31,7 @@ static void check_arg_usage(void)
         test_printf_stderr("Warning arguments %zu and later unchecked\n", i);
 }
 
-int main(int argc, char *argv[])
+int __cdecl main(int argc, char *argv[])
 {
     int ret = EXIT_FAILURE;
 
diff --git a/test/testutil/tap_bio.c b/test/testutil/tap_bio.c
index a6c903b5ae..66ec8b501a 100644
--- a/test/testutil/tap_bio.c
+++ b/test/testutil/tap_bio.c
@@ -11,14 +11,14 @@
 #include <string.h>
 #include "tu_local.h"
 
-static int tap_write_ex(BIO *b, const char *buf, size_t size, size_t *in_size);
-static int tap_read_ex(BIO *b, char *buf, size_t size, size_t *out_size);
-static int tap_puts(BIO *b, const char *str);
-static int tap_gets(BIO *b, char *str, int size);
-static long tap_ctrl(BIO *b, int cmd, long arg1, void *arg2);
-static int tap_new(BIO *b);
-static int tap_free(BIO *b);
-static long tap_callback_ctrl(BIO *h, int cmd, BIO_info_cb *fp);
+static int __cdecl tap_write_ex(BIO *b, const char *buf, size_t size, size_t *in_size);
+static int __cdecl tap_read_ex(BIO *b, char *buf, size_t size, size_t *out_size);
+static int __cdecl tap_puts(BIO *b, const char *str);
+static int __cdecl tap_gets(BIO *b, char *str, int size);
+static long __cdecl tap_ctrl(BIO *b, int cmd, long arg1, void *arg2);
+static int __cdecl tap_new(BIO *b);
+static int __cdecl tap_free(BIO *b);
+static long __cdecl tap_callback_ctrl(BIO *h, int cmd, BIO_info_cb *fp);
 
 const BIO_METHOD *BIO_f_tap(void)
 {
@@ -40,14 +40,14 @@ const BIO_METHOD *BIO_f_tap(void)
     return tap;
 }
 
-static int tap_new(BIO *b)
+static int __cdecl tap_new(BIO *b)
 {
     BIO_set_data(b, NULL);
     BIO_set_init(b, 1);
     return 1;
 }
 
-static int tap_free(BIO *b)
+static int __cdecl tap_free(BIO *b)
 {
     if (b == NULL)
         return 0;
@@ -56,7 +56,7 @@ static int tap_free(BIO *b)
     return 1;
 }
 
-static int tap_read_ex(BIO *b, char *buf, size_t size, size_t *out_size)
+static int __cdecl tap_read_ex(BIO *b, char *buf, size_t size, size_t *out_size)
 {
     BIO *next = BIO_next(b);
     int ret = 0;
@@ -91,7 +91,7 @@ static int write_string(BIO *b, const char *buf, size_t n)
  * The BIO_data field is used as our state.  If it is NULL, we've just
  * seen a new line.  If it is not NULL, we're processing characters in a line.
  */
-static int tap_write_ex(BIO *b, const char *buf, size_t size, size_t *in_size)
+static int __cdecl tap_write_ex(BIO *b, const char *buf, size_t size, size_t *in_size)
 {
     BIO *next = BIO_next(b);
     size_t i;
@@ -119,7 +119,7 @@ err:
     return 0;
 }
 
-static long tap_ctrl(BIO *b, int cmd, long num, void *ptr)
+static long __cdecl tap_ctrl(BIO *b, int cmd, long num, void *ptr)
 {
     BIO *next = BIO_next(b);
 
@@ -134,17 +134,17 @@ static long tap_ctrl(BIO *b, int cmd, long num, void *ptr)
     return BIO_ctrl(next, cmd, num, ptr);
 }
 
-static long tap_callback_ctrl(BIO *b, int cmd, BIO_info_cb *fp)
+static long __cdecl tap_callback_ctrl(BIO *b, int cmd, BIO_info_cb *fp)
 {
     return BIO_callback_ctrl(BIO_next(b), cmd, fp);
 }
 
-static int tap_gets(BIO *b, char *buf, int size)
+static int __cdecl tap_gets(BIO *b, char *buf, int size)
 {
     return BIO_gets(BIO_next(b), buf, size);
 }
 
-static int tap_puts(BIO *b, const char *str)
+static int __cdecl tap_puts(BIO *b, const char *str)
 {
     size_t m;
 
diff --git a/test/threadstest.c b/test/threadstest.c
index ee09f86930..9341026966 100644
--- a/test/threadstest.c
+++ b/test/threadstest.c
@@ -18,13 +18,13 @@
 
 typedef unsigned int thread_t;
 
-static int run_thread(thread_t *t, void (*f)(void))
+static int __cdecl run_thread(thread_t *t, void (__cdecl *f)(void))
 {
     f();
     return 1;
 }
 
-static int wait_for_thread(thread_t thread)
+static int __cdecl wait_for_thread(thread_t thread)
 {
     return 1;
 }
@@ -35,7 +35,7 @@ typedef HANDLE thread_t;
 
 static DWORD WINAPI thread_run(LPVOID arg)
 {
-    void (*f)(void);
+    void (__cdecl *f)(void);
 
     *(void **) (&f) = arg;
 
@@ -43,13 +43,13 @@ static DWORD WINAPI thread_run(LPVOID arg)
     return 0;
 }
 
-static int run_thread(thread_t *t, void (*f)(void))
+static int __cdecl run_thread(thread_t *t, void (__cdecl *f)(void))
 {
     *t = CreateThread(NULL, 0, thread_run, *(void **) &f, 0, NULL);
     return *t != NULL;
 }
 
-static int wait_for_thread(thread_t thread)
+static int __cdecl wait_for_thread(thread_t thread)
 {
     return WaitForSingleObject(thread, INFINITE) == 0;
 }
@@ -60,7 +60,7 @@ typedef pthread_t thread_t;
 
 static void *thread_run(void *arg)
 {
-    void (*f)(void);
+    void (__cdecl *f)(void);
 
     *(void **) (&f) = arg;
 
@@ -68,19 +68,19 @@ static void *thread_run(void *arg)
     return NULL;
 }
 
-static int run_thread(thread_t *t, void (*f)(void))
+static int __cdecl run_thread(thread_t *t, void (__cdecl *f)(void))
 {
     return pthread_create(t, NULL, thread_run, *(void **) &f) == 0;
 }
 
-static int wait_for_thread(thread_t thread)
+static int __cdecl wait_for_thread(thread_t thread)
 {
     return pthread_join(thread, NULL) == 0;
 }
 
 #endif
 
-static int test_lock(void)
+static int __cdecl test_lock(void)
 {
     CRYPTO_RWLOCK *lock = CRYPTO_THREAD_lock_new();
 
@@ -96,17 +96,17 @@ static int test_lock(void)
 static CRYPTO_ONCE once_run = CRYPTO_ONCE_STATIC_INIT;
 static unsigned once_run_count = 0;
 
-static void once_do_run(void)
+static void __cdecl once_do_run(void)
 {
     once_run_count++;
 }
 
-static void once_run_thread_cb(void)
+static void __cdecl once_run_thread_cb(void)
 {
     CRYPTO_THREAD_run_once(&once_run, once_do_run);
 }
 
-static int test_once(void)
+static int __cdecl test_once(void)
 {
     thread_t thread;
 
@@ -122,7 +122,7 @@ static CRYPTO_THREAD_LOCAL thread_local_key;
 static unsigned destructor_run_count = 0;
 static int thread_local_thread_cb_ok = 0;
 
-static void thread_local_destructor(void *arg)
+static void __cdecl thread_local_destructor(void *arg)
 {
     unsigned *count;
 
@@ -134,7 +134,7 @@ static void thread_local_destructor(void *arg)
     (*count)++;
 }
 
-static void thread_local_thread_cb(void)
+static void __cdecl thread_local_thread_cb(void)
 {
     void *ptr;
 
@@ -151,7 +151,7 @@ static void thread_local_thread_cb(void)
     thread_local_thread_cb_ok = 1;
 }
 
-static int test_thread_local(void)
+static int __cdecl test_thread_local(void)
 {
     thread_t thread;
     void *ptr = NULL;
diff --git a/test/time_offset_test.c b/test/time_offset_test.c
index 740b471af0..63ad38818e 100644
--- a/test/time_offset_test.c
+++ b/test/time_offset_test.c
@@ -64,7 +64,7 @@ static ASN1_TIME the_asn1_time = {
     0
 };
 
-static int test_offset(int idx)
+static int __cdecl test_offset(int idx)
 {
     ASN1_TIME at;
     const TESTDATA *testdata = &tests[idx];
diff --git a/test/tls13ccstest.c b/test/tls13ccstest.c
index 92e9d598ca..60928d3f81 100644
--- a/test/tls13ccstest.c
+++ b/test/tls13ccstest.c
@@ -24,13 +24,13 @@ static int badvers = 0, badsessid = 0;
 static unsigned char chsessid[SSL_MAX_SSL_SESSION_ID_LENGTH];
 static size_t chsessidlen = 0;
 
-static int watchccs_new(BIO *bi);
-static int watchccs_free(BIO *a);
-static int watchccs_read(BIO *b, char *out, int outl);
-static int watchccs_write(BIO *b, const char *in, int inl);
-static long watchccs_ctrl(BIO *b, int cmd, long num, void *ptr);
-static int watchccs_gets(BIO *bp, char *buf, int size);
-static int watchccs_puts(BIO *bp, const char *str);
+static int __cdecl watchccs_new(BIO *bi);
+static int __cdecl watchccs_free(BIO *a);
+static int __cdecl watchccs_read(BIO *b, char *out, int outl);
+static int __cdecl watchccs_write(BIO *b, const char *in, int inl);
+static long __cdecl watchccs_ctrl(BIO *b, int cmd, long num, void *ptr);
+static int __cdecl watchccs_gets(BIO *bp, char *buf, int size);
+static int __cdecl watchccs_puts(BIO *bp, const char *str);
 
 /* Choose a sufficiently large type likely to be unused for this custom BIO */
 # define BIO_TYPE_WATCHCCS_FILTER  (0x80 | BIO_TYPE_FILTER)
@@ -55,19 +55,19 @@ static const BIO_METHOD *bio_f_watchccs_filter(void)
     return method_watchccs;
 }
 
-static int watchccs_new(BIO *bio)
+static int __cdecl watchccs_new(BIO *bio)
 {
     BIO_set_init(bio, 1);
     return 1;
 }
 
-static int watchccs_free(BIO *bio)
+static int __cdecl watchccs_free(BIO *bio)
 {
     BIO_set_init(bio, 0);
     return 1;
 }
 
-static int watchccs_read(BIO *bio, char *out, int outl)
+static int __cdecl watchccs_read(BIO *bio, char *out, int outl)
 {
     int ret = 0;
     BIO *next = BIO_next(bio);
@@ -86,7 +86,7 @@ static int watchccs_read(BIO *bio, char *out, int outl)
     return ret;
 }
 
-static int watchccs_write(BIO *bio, const char *in, int inl)
+static int __cdecl watchccs_write(BIO *bio, const char *in, int inl)
 {
     int ret = 0;
     BIO *next = BIO_next(bio);
@@ -210,7 +210,7 @@ static int watchccs_write(BIO *bio, const char *in, int inl)
     return ret;
 }
 
-static long watchccs_ctrl(BIO *bio, int cmd, long num, void *ptr)
+static long __cdecl watchccs_ctrl(BIO *bio, int cmd, long num, void *ptr)
 {
     long ret;
     BIO *next = BIO_next(bio);
@@ -229,18 +229,18 @@ static long watchccs_ctrl(BIO *bio, int cmd, long num, void *ptr)
     return ret;
 }
 
-static int watchccs_gets(BIO *bio, char *buf, int size)
+static int __cdecl watchccs_gets(BIO *bio, char *buf, int size)
 {
     /* We don't support this - not needed anyway */
     return -1;
 }
 
-static int watchccs_puts(BIO *bio, const char *str)
+static int __cdecl watchccs_puts(BIO *bio, const char *str)
 {
     return watchccs_write(bio, str, strlen(str));
 }
 
-static int test_tls13ccs(int tst)
+static int __cdecl test_tls13ccs(int tst)
 {
     SSL_CTX *sctx = NULL, *cctx = NULL;
     SSL *sssl = NULL, *cssl = NULL;
diff --git a/test/tls13encryptiontest.c b/test/tls13encryptiontest.c
index 6f359b3a2f..172c92f799 100644
--- a/test/tls13encryptiontest.c
+++ b/test/tls13encryptiontest.c
@@ -247,7 +247,7 @@ static unsigned char *multihexstr2buf(const char *str[3], size_t *len)
     return outbuf;
 }
 
-static int load_record(SSL3_RECORD *rec, RECORD_DATA *recd, unsigned char **key,
+static int __cdecl load_record(SSL3_RECORD *rec, RECORD_DATA *recd, unsigned char **key,
                        unsigned char *iv, size_t ivlen, unsigned char *seq)
 {
     unsigned char *pt = NULL, *sq = NULL, *ivtmp = NULL;
@@ -284,7 +284,7 @@ static int load_record(SSL3_RECORD *rec, RECORD_DATA *recd, unsigned char **key,
     return 0;
 }
 
-static int test_record(SSL3_RECORD *rec, RECORD_DATA *recd, int enc)
+static int __cdecl test_record(SSL3_RECORD *rec, RECORD_DATA *recd, int enc)
 {
     int ret = 0;
     unsigned char *refd;
@@ -312,7 +312,7 @@ static int test_record(SSL3_RECORD *rec, RECORD_DATA *recd, int enc)
 
 #define TLS13_AES_128_GCM_SHA256_BYTES  ((const unsigned char *)"\x13\x01")
 
-static int test_tls13_encryption(void)
+static int __cdecl test_tls13_encryption(void)
 {
     SSL_CTX *ctx = NULL;
     SSL *s = NULL;
diff --git a/test/tls13secretstest.c b/test/tls13secretstest.c
index 9368b1cdc5..c9261f8413 100644
--- a/test/tls13secretstest.c
+++ b/test/tls13secretstest.c
@@ -136,7 +136,7 @@ static unsigned char server_ats_iv[] = {
 };
 
 /* Mocked out implementations of various functions */
-int ssl3_digest_cached_records(SSL *s, int keep)
+int __cdecl ssl3_digest_cached_records(SSL *s, int keep)
 {
     return 1;
 }
@@ -162,7 +162,7 @@ int ssl_handshake_hash(SSL *s, unsigned char *out, size_t outlen,
     return 1;
 }
 
-const EVP_MD *ssl_handshake_md(SSL *s)
+const EVP_MD * __cdecl ssl_handshake_md(SSL *s)
 {
     return EVP_sha256();
 }
@@ -175,7 +175,7 @@ void RECORD_LAYER_reset_write_sequence(RECORD_LAYER *rl)
 {
 }
 
-int ssl_cipher_get_evp(const SSL_SESSION *s, const EVP_CIPHER **enc,
+int __cdecl ssl_cipher_get_evp(const SSL_SESSION *s, const EVP_CIPHER **enc,
                        const EVP_MD **md, int *mac_pkey_type,
                        size_t *mac_secret_size, SSL_COMP **comp, int use_etm)
 
@@ -183,7 +183,7 @@ int ssl_cipher_get_evp(const SSL_SESSION *s, const EVP_CIPHER **enc,
     return 0;
 }
 
-int tls1_alert_code(int code)
+int __cdecl tls1_alert_code(int code)
 {
     return code;
 }
@@ -196,7 +196,7 @@ int ssl_log_secret(SSL *ssl,
     return 1;
 }
 
-const EVP_MD *ssl_md(int idx)
+const EVP_MD * __cdecl ssl_md(int idx)
 {
     return EVP_sha256();
 }
@@ -218,7 +218,7 @@ int ossl_statem_export_early_allowed(SSL *s)
 
 /* End of mocked out code */
 
-static int test_secret(SSL *s, unsigned char *prk,
+static int __cdecl test_secret(SSL *s, unsigned char *prk,
                        const unsigned char *label, size_t labellen,
                        const unsigned char *ref_secret,
                        const unsigned char *ref_key, const unsigned char *ref_iv)
@@ -263,7 +263,7 @@ static int test_secret(SSL *s, unsigned char *prk,
     return 1;
 }
 
-static int test_handshake_secrets(void)
+static int __cdecl test_handshake_secrets(void)
 {
     SSL_CTX *ctx = NULL;
     SSL *s = NULL;
diff --git a/test/uitest.c b/test/uitest.c
index 03db008c71..6beef626da 100644
--- a/test/uitest.c
+++ b/test/uitest.c
@@ -30,7 +30,7 @@ static int test_pem_password_cb(char *buf, int size, int rwflag, void *userdata)
  * Test wrapping old style PEM password callback in a UI method through the
  * use of UI utility functions
  */
-static int test_old(void)
+static int __cdecl test_old(void)
 {
     UI_METHOD *ui_method = NULL;
     UI *ui = NULL;
@@ -71,7 +71,7 @@ static int test_old(void)
 }
 
 /* Test of UI.  This uses the UI method defined in apps/apps.c */
-static int test_new_ui(void)
+static int __cdecl test_new_ui(void)
 {
     PW_CB_DATA cb_data = {
         "password",
diff --git a/test/v3ext.c b/test/v3ext.c
index 14ae49969d..8f447dc87a 100644
--- a/test/v3ext.c
+++ b/test/v3ext.c
@@ -17,7 +17,7 @@
 
 static const char *infile;
 
-static int test_pathlen(void)
+static int __cdecl test_pathlen(void)
 {
     X509 *x = NULL;
     BIO *b = NULL;
diff --git a/test/v3nametest.c b/test/v3nametest.c
index 86f3829aed..5b44cf1ee1 100644
--- a/test/v3nametest.c
+++ b/test/v3nametest.c
@@ -76,7 +76,7 @@ static const char *const exceptions[] = {
     NULL
 };
 
-static int is_exception(const char *msg)
+static int __cdecl is_exception(const char *msg)
 {
     const char *const *p;
 
@@ -86,7 +86,7 @@ static int is_exception(const char *msg)
     return 0;
 }
 
-static int set_cn(X509 *crt, ...)
+static int __cdecl set_cn(X509 *crt, ...)
 {
     int ret = 0;
     X509_NAME *n = NULL;
@@ -125,7 +125,7 @@ X509_EXTENSION *X509_EXTENSION_create_by_NID(X509_EXTENSION **ex,
 int             X509_add_ext(X509 *x, X509_EXTENSION *ex, int loc);
 */
 
-static int set_altname(X509 *crt, ...)
+static int __cdecl set_altname(X509 *crt, ...)
 {
     int ret = 0;
     GENERAL_NAMES *gens = NULL;
@@ -175,64 +175,64 @@ static int set_altname(X509 *crt, ...)
     return ret;
 }
 
-static int set_cn1(X509 *crt, const char *name)
+static int __cdecl set_cn1(X509 *crt, const char *name)
 {
     return set_cn(crt, NID_commonName, name, 0);
 }
 
-static int set_cn_and_email(X509 *crt, const char *name)
+static int __cdecl set_cn_and_email(X509 *crt, const char *name)
 {
     return set_cn(crt, NID_commonName, name,
                   NID_pkcs9_emailAddress, "dummy@example.com", 0);
 }
 
-static int set_cn2(X509 *crt, const char *name)
+static int __cdecl set_cn2(X509 *crt, const char *name)
 {
     return set_cn(crt, NID_commonName, "dummy value",
                   NID_commonName, name, 0);
 }
 
-static int set_cn3(X509 *crt, const char *name)
+static int __cdecl set_cn3(X509 *crt, const char *name)
 {
     return set_cn(crt, NID_commonName, name,
                   NID_commonName, "dummy value", 0);
 }
 
-static int set_email1(X509 *crt, const char *name)
+static int __cdecl set_email1(X509 *crt, const char *name)
 {
     return set_cn(crt, NID_pkcs9_emailAddress, name, 0);
 }
 
-static int set_email2(X509 *crt, const char *name)
+static int __cdecl set_email2(X509 *crt, const char *name)
 {
     return set_cn(crt, NID_pkcs9_emailAddress, "dummy@example.com",
                   NID_pkcs9_emailAddress, name, 0);
 }
 
-static int set_email3(X509 *crt, const char *name)
+static int __cdecl set_email3(X509 *crt, const char *name)
 {
     return set_cn(crt, NID_pkcs9_emailAddress, name,
                   NID_pkcs9_emailAddress, "dummy@example.com", 0);
 }
 
-static int set_email_and_cn(X509 *crt, const char *name)
+static int __cdecl set_email_and_cn(X509 *crt, const char *name)
 {
     return set_cn(crt, NID_pkcs9_emailAddress, name,
                   NID_commonName, "www.example.org", 0);
 }
 
-static int set_altname_dns(X509 *crt, const char *name)
+static int __cdecl set_altname_dns(X509 *crt, const char *name)
 {
     return set_altname(crt, GEN_DNS, name, 0);
 }
 
-static int set_altname_email(X509 *crt, const char *name)
+static int __cdecl set_altname_email(X509 *crt, const char *name)
 {
     return set_altname(crt, GEN_EMAIL, name, 0);
 }
 
 struct set_name_fn {
-    int (*fn) (X509 *, const char *);
+    int (__cdecl *fn) (X509 *, const char *);
     const char *name;
     int host;
     int email;
@@ -264,7 +264,7 @@ static X509 *make_cert(void)
     return crt;
 }
 
-static int check_message(const struct set_name_fn *fn, const char *op,
+static int __cdecl check_message(const struct set_name_fn *fn, const char *op,
                          const char *nameincert, int match, const char *name)
 {
     char msg[1024];
@@ -280,7 +280,7 @@ static int check_message(const struct set_name_fn *fn, const char *op,
     return 0;
 }
 
-static int run_cert(X509 *crt, const char *nameincert,
+static int __cdecl run_cert(X509 *crt, const char *nameincert,
                      const struct set_name_fn *fn)
 {
     const char *const *pname = names;
@@ -341,7 +341,7 @@ static int run_cert(X509 *crt, const char *nameincert,
     return failed == 0;
 }
 
-static int call_run_cert(int i)
+static int __cdecl call_run_cert(int i)
 {
     int failed = 0;
     const struct set_name_fn *pfn = &name_fns[i];
diff --git a/test/verify_extra_test.c b/test/verify_extra_test.c
index d9d1498954..28f79eef5c 100644
--- a/test/verify_extra_test.c
+++ b/test/verify_extra_test.c
@@ -87,7 +87,7 @@ static STACK_OF(X509) *load_certs_from_file(const char *filename)
  * CA=FALSE, and will therefore incorrectly verify bad
  *
  */
-static int test_alt_chains_cert_forgery(void)
+static int __cdecl test_alt_chains_cert_forgery(void)
 {
     int ret = 0;
     int i;
@@ -138,7 +138,7 @@ static int test_alt_chains_cert_forgery(void)
     return ret;
 }
 
-static int test_store_ctx(void)
+static int __cdecl test_store_ctx(void)
 {
     X509_STORE_CTX *sctx = NULL;
     X509 *x = NULL;
diff --git a/test/versions.c b/test/versions.c
index 3ab05ec35d..c9e32f6793 100644
--- a/test/versions.c
+++ b/test/versions.c
@@ -12,7 +12,7 @@
 #include <openssl/crypto.h>
 
 /* A simple helper for the perl function OpenSSL::Test::openssl_versions */
-int main(void)
+int __cdecl main(void)
 {
     printf("Build version: 0x%08lX\n", OPENSSL_VERSION_NUMBER);
     printf("Library version: 0x%08lX\n", OpenSSL_version_num());
diff --git a/test/wpackettest.c b/test/wpackettest.c
index 773eef0525..2f849a31c0 100644
--- a/test/wpackettest.c
+++ b/test/wpackettest.c
@@ -35,13 +35,13 @@ static const unsigned char fixed[] = { 0xff, 0xff, 0xff };
 
 static BUF_MEM *buf;
 
-static int cleanup(WPACKET *pkt)
+static int __cdecl cleanup(WPACKET *pkt)
 {
     WPACKET_cleanup(pkt);
     return 0;
 }
 
-static int test_WPACKET_init(void)
+static int __cdecl test_WPACKET_init(void)
 {
     WPACKET pkt;
     int i;
@@ -117,7 +117,7 @@ static int test_WPACKET_init(void)
     return 1;
 }
 
-static int test_WPACKET_set_max_size(void)
+static int __cdecl test_WPACKET_set_max_size(void)
 {
     WPACKET pkt;
     size_t written;
@@ -164,7 +164,7 @@ static int test_WPACKET_set_max_size(void)
     return 1;
 }
 
-static int test_WPACKET_start_sub_packet(void)
+static int __cdecl test_WPACKET_start_sub_packet(void)
 {
     WPACKET pkt;
     size_t written;
@@ -246,7 +246,7 @@ static int test_WPACKET_start_sub_packet(void)
 }
 
 
-static int test_WPACKET_set_flags(void)
+static int __cdecl test_WPACKET_set_flags(void)
 {
     WPACKET pkt;
     size_t written;
@@ -306,7 +306,7 @@ static int test_WPACKET_set_flags(void)
     return 1;
 }
 
-static int test_WPACKET_allocate_bytes(void)
+static int __cdecl test_WPACKET_allocate_bytes(void)
 {
     WPACKET pkt;
     size_t written;
@@ -336,7 +336,7 @@ static int test_WPACKET_allocate_bytes(void)
     return 1;
 }
 
-static int test_WPACKET_memcpy(void)
+static int __cdecl test_WPACKET_memcpy(void)
 {
     WPACKET pkt;
     size_t written;
diff --git a/test/x509_check_cert_pkey_test.c b/test/x509_check_cert_pkey_test.c
index 1cad49e803..3e04778215 100644
--- a/test/x509_check_cert_pkey_test.c
+++ b/test/x509_check_cert_pkey_test.c
@@ -25,7 +25,7 @@ static const char *k;
 static const char *t;
 static const char *e;
 
-static int test_x509_check_cert_pkey(void)
+static int __cdecl test_x509_check_cert_pkey(void)
 {
     BIO *bio = NULL;
     X509 *x509 = NULL;
diff --git a/test/x509_dup_cert_test.c b/test/x509_dup_cert_test.c
index e639c01945..0ddd0b5b33 100644
--- a/test/x509_dup_cert_test.c
+++ b/test/x509_dup_cert_test.c
@@ -14,7 +14,7 @@
 
 #include "testutil.h"
 
-static int test_509_dup_cert(int n)
+static int __cdecl test_509_dup_cert(int n)
 {
     int ret = 0;
     X509_STORE_CTX *sctx = NULL;
diff --git a/test/x509_internal_test.c b/test/x509_internal_test.c
index d2f41d7085..db782c0f58 100644
--- a/test/x509_internal_test.c
+++ b/test/x509_internal_test.c
@@ -35,7 +35,7 @@
 # pragma names restore
 #endif
 
-static int test_standard_exts(void)
+static int __cdecl test_standard_exts(void)
 {
     size_t i;
     int prev = -1, good = 1;
diff --git a/test/x509_time_test.c b/test/x509_time_test.c
index b6fd38a5c5..2f610b867f 100644
--- a/test/x509_time_test.c
+++ b/test/x509_time_test.c
@@ -253,7 +253,7 @@ static TESTDATA x509_cmp_tests[] = {
     },
 };
 
-static int test_x509_cmp_time(int idx)
+static int __cdecl test_x509_cmp_time(int idx)
 {
     ASN1_TIME t;
     int result;
@@ -273,7 +273,7 @@ static int test_x509_cmp_time(int idx)
     return 1;
 }
 
-static int test_x509_cmp_time_current(void)
+static int __cdecl test_x509_cmp_time_current(void)
 {
     time_t now = time(NULL);
     /* Pick a day earlier and later, relative to any system clock. */
@@ -297,7 +297,7 @@ static int test_x509_cmp_time_current(void)
     return failed == 0;
 }
 
-static int test_x509_time(int idx)
+static int __cdecl test_x509_time(int idx)
 {
     ASN1_TIME *t = NULL;
     int result, rv = 0;
@@ -401,7 +401,7 @@ static const struct {
     { 2020, 12,  2, 336, 3 }
 };
 
-static int test_days(int n)
+static int __cdecl test_days(int n)
 {
     char d[16];
     ASN1_TIME *a = NULL;
@@ -454,7 +454,7 @@ static const struct {
             "Jul 31 22:20:00 2017 GMT"),
 };
 
-static int test_x509_time_print(int idx)
+static int __cdecl test_x509_time_print(int idx)
 {
     BIO *m;
     int ret = 0, rv;
diff --git a/test/x509aux.c b/test/x509aux.c
index e41f1f6809..954e10604d 100644
--- a/test/x509aux.c
+++ b/test/x509aux.c
@@ -19,15 +19,15 @@
 #include "internal/nelem.h"
 #include "testutil.h"
 
-static int test_certs(int num)
+static int __cdecl test_certs(int num)
 {
     int c;
     char *name = 0;
     char *header = 0;
     unsigned char *data = 0;
     long len;
-    typedef X509 *(*d2i_X509_t)(X509 **, const unsigned char **, long);
-    typedef int (*i2d_X509_t)(X509 *, unsigned char **);
+    typedef X509 *(__cdecl * d2i_X509_t)(X509 **, const unsigned char **, long);
+    typedef int (__cdecl * i2d_X509_t)(X509 *, unsigned char **);
     int err = 0;
     BIO *fp = BIO_new_file(test_get_argument(num), "r");
     X509 *reuse = NULL;
diff --git a/util/mkdef.pl b/util/mkdef.pl
index 3ac79821b0..ed05e5584d 100755
--- a/util/mkdef.pl
+++ b/util/mkdef.pl
@@ -297,7 +297,7 @@ if($do_crypto == 1) {
  * to link to all of them. This is *not* intended to be run!
  */
 
-int main()
+int __cdecl main()
 {
 EOF
 	&print_test_file(*STDOUT,"LIBSSL",*ssl_list,$do_ctestall,@ssl_symbols)
