diff --git a/apps/openssl.c b/apps/openssl.c
index 9648f35b02..f2e2fc5676 100644
--- a/apps/openssl.c
+++ b/apps/openssl.c
@@ -116,7 +116,7 @@ static char *make_config_name(void)
     return p;
 }
 
-int main(int argc, char *argv[])
+int __cdecl main(int argc, char *argv[])
 {
     FUNCTION f, *fp;
     LHASH_OF(FUNCTION) *prog = NULL;
@@ -630,7 +630,7 @@ static void list_pkey_meth(void)
     }
 }
 
-static int function_cmp(const FUNCTION * a, const FUNCTION * b)
+static int __cdecl function_cmp(const FUNCTION * a, const FUNCTION * b)
 {
     return strncmp(a->name, b->name, 8);
 }
@@ -640,7 +640,7 @@ static unsigned long function_hash(const FUNCTION * a)
     return OPENSSL_LH_strhash(a->name);
 }
 
-static int SortFnByName(const void *_f1, const void *_f2)
+static int __cdecl SortFnByName(const void *_f1, const void *_f2)
 {
     const FUNCTION *f1 = _f1;
     const FUNCTION *f2 = _f2;
diff --git a/apps/req.c b/apps/req.c
index f9d6fba109..56e3603a99 100644
--- a/apps/req.c
+++ b/apps/req.c
@@ -158,7 +158,7 @@ static unsigned long ext_name_hash(const OPENSSL_STRING *a)
     return OPENSSL_LH_strhash((const char *)a);
 }
 
-static int ext_name_cmp(const OPENSSL_STRING *a, const OPENSSL_STRING *b)
+static int __cdecl ext_name_cmp(const OPENSSL_STRING *a, const OPENSSL_STRING *b)
 {
     return strcmp((const char *)a, (const char *)b);
 }
diff --git a/apps/win32_init.c b/apps/win32_init.c
index df4bff41a2..b8436cc54f 100644
--- a/apps/win32_init.c
+++ b/apps/win32_init.c
@@ -18,7 +18,7 @@ static UINT saved_cp;
 static int newargc;
 static char **newargv;
 
-static void cleanup(void)
+static void __cdecl cleanup(void)
 {
     int i;
 
diff --git a/crypto/aes/aes_cbc.c b/crypto/aes/aes_cbc.c
index 342841fc4f..01061c06f4 100644
--- a/crypto/aes/aes_cbc.c
+++ b/crypto/aes/aes_cbc.c
@@ -10,7 +10,7 @@
 #include <openssl/aes.h>
 #include <openssl/modes.h>
 
-void AES_cbc_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl AES_cbc_encrypt(const unsigned char *in, unsigned char *out,
                      size_t len, const AES_KEY *key,
                      unsigned char *ivec, const int enc)
 {
diff --git a/crypto/aes/aes_cfb.c b/crypto/aes/aes_cfb.c
index f010e3c4ea..c0e0fd4f13 100644
--- a/crypto/aes/aes_cfb.c
+++ b/crypto/aes/aes_cfb.c
@@ -16,7 +16,7 @@
  * used is contained in *num;
  */
 
-void AES_cfb128_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl AES_cfb128_encrypt(const unsigned char *in, unsigned char *out,
                         size_t length, const AES_KEY *key,
                         unsigned char *ivec, int *num, const int enc)
 {
@@ -26,7 +26,7 @@ void AES_cfb128_encrypt(const unsigned char *in, unsigned char *out,
 }
 
 /* N.B. This expects the input to be packed, MS bit first */
-void AES_cfb1_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl AES_cfb1_encrypt(const unsigned char *in, unsigned char *out,
                       size_t length, const AES_KEY *key,
                       unsigned char *ivec, int *num, const int enc)
 {
@@ -34,7 +34,7 @@ void AES_cfb1_encrypt(const unsigned char *in, unsigned char *out,
                             (block128_f) AES_encrypt);
 }
 
-void AES_cfb8_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl AES_cfb8_encrypt(const unsigned char *in, unsigned char *out,
                       size_t length, const AES_KEY *key,
                       unsigned char *ivec, int *num, const int enc)
 {
diff --git a/crypto/aes/aes_core.c b/crypto/aes/aes_core.c
index f1f11fd8de..8f7d611751 100644
--- a/crypto/aes/aes_core.c
+++ b/crypto/aes/aes_core.c
@@ -629,7 +629,7 @@ static const u32 rcon[] = {
 /**
  * Expand the cipher key into the encryption key schedule.
  */
-int AES_set_encrypt_key(const unsigned char *userKey, const int bits,
+int __cdecl AES_set_encrypt_key(const unsigned char *userKey, const int bits,
                         AES_KEY *key)
 {
 
@@ -731,7 +731,7 @@ int AES_set_encrypt_key(const unsigned char *userKey, const int bits,
 /**
  * Expand the cipher key into the decryption key schedule.
  */
-int AES_set_decrypt_key(const unsigned char *userKey, const int bits,
+int __cdecl AES_set_decrypt_key(const unsigned char *userKey, const int bits,
                         AES_KEY *key)
 {
 
@@ -784,7 +784,7 @@ int AES_set_decrypt_key(const unsigned char *userKey, const int bits,
  * Encrypt a single block
  * in and out can overlap
  */
-void AES_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl AES_encrypt(const unsigned char *in, unsigned char *out,
                  const AES_KEY *key) {
 
     const u32 *rk;
@@ -975,7 +975,7 @@ void AES_encrypt(const unsigned char *in, unsigned char *out,
  * Decrypt a single block
  * in and out can overlap
  */
-void AES_decrypt(const unsigned char *in, unsigned char *out,
+void __cdecl AES_decrypt(const unsigned char *in, unsigned char *out,
                  const AES_KEY *key)
 {
 
@@ -1208,7 +1208,7 @@ static const u32 rcon[] = {
 /**
  * Expand the cipher key into the encryption key schedule.
  */
-int AES_set_encrypt_key(const unsigned char *userKey, const int bits,
+int __cdecl AES_set_encrypt_key(const unsigned char *userKey, const int bits,
                         AES_KEY *key)
 {
     u32 *rk;
@@ -1309,7 +1309,7 @@ int AES_set_encrypt_key(const unsigned char *userKey, const int bits,
 /**
  * Expand the cipher key into the decryption key schedule.
  */
-int AES_set_decrypt_key(const unsigned char *userKey, const int bits,
+int __cdecl AES_set_decrypt_key(const unsigned char *userKey, const int bits,
                         AES_KEY *key)
 {
 
diff --git a/crypto/aes/aes_ecb.c b/crypto/aes/aes_ecb.c
index 29bfc1ad66..fa432af6d3 100644
--- a/crypto/aes/aes_ecb.c
+++ b/crypto/aes/aes_ecb.c
@@ -12,7 +12,7 @@
 #include <openssl/aes.h>
 #include "aes_locl.h"
 
-void AES_ecb_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl AES_ecb_encrypt(const unsigned char *in, unsigned char *out,
                      const AES_KEY *key, const int enc)
 {
 
diff --git a/crypto/aes/aes_ige.c b/crypto/aes/aes_ige.c
index 75f796cf3b..f46b21a191 100644
--- a/crypto/aes/aes_ige.c
+++ b/crypto/aes/aes_ige.c
@@ -34,7 +34,7 @@ typedef struct {
 
 /* N.B. The IV for this mode is _twice_ the block size */
 
-void AES_ige_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl AES_ige_encrypt(const unsigned char *in, unsigned char *out,
                      size_t length, const AES_KEY *key,
                      unsigned char *ivec, const int enc)
 {
@@ -166,7 +166,7 @@ void AES_ige_encrypt(const unsigned char *in, unsigned char *out,
 
 /* N.B. The IV for this mode is _four times_ the block size */
 
-void AES_bi_ige_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl AES_bi_ige_encrypt(const unsigned char *in, unsigned char *out,
                         size_t length, const AES_KEY *key,
                         const AES_KEY *key2, const unsigned char *ivec,
                         const int enc)
diff --git a/crypto/aes/aes_misc.c b/crypto/aes/aes_misc.c
index 7403c84f82..59c4c04e2f 100644
--- a/crypto/aes/aes_misc.c
+++ b/crypto/aes/aes_misc.c
@@ -11,7 +11,7 @@
 #include <openssl/aes.h>
 #include "aes_locl.h"
 
-const char *AES_options(void)
+const char * __cdecl AES_options(void)
 {
 #ifdef FULL_UNROLL
     return "aes(full)";
diff --git a/crypto/aes/aes_ofb.c b/crypto/aes/aes_ofb.c
index 215b53858e..8b0686d37d 100644
--- a/crypto/aes/aes_ofb.c
+++ b/crypto/aes/aes_ofb.c
@@ -10,7 +10,7 @@
 #include <openssl/aes.h>
 #include <openssl/modes.h>
 
-void AES_ofb128_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl AES_ofb128_encrypt(const unsigned char *in, unsigned char *out,
                         size_t length, const AES_KEY *key,
                         unsigned char *ivec, int *num)
 {
diff --git a/crypto/aes/aes_wrap.c b/crypto/aes/aes_wrap.c
index cae0b21229..d9932d89d0 100644
--- a/crypto/aes/aes_wrap.c
+++ b/crypto/aes/aes_wrap.c
@@ -11,14 +11,14 @@
 #include <openssl/aes.h>
 #include <openssl/modes.h>
 
-int AES_wrap_key(AES_KEY *key, const unsigned char *iv,
+int __cdecl AES_wrap_key(AES_KEY *key, const unsigned char *iv,
                  unsigned char *out,
                  const unsigned char *in, unsigned int inlen)
 {
     return CRYPTO_128_wrap(key, iv, out, in, inlen, (block128_f) AES_encrypt);
 }
 
-int AES_unwrap_key(AES_KEY *key, const unsigned char *iv,
+int __cdecl AES_unwrap_key(AES_KEY *key, const unsigned char *iv,
                    unsigned char *out,
                    const unsigned char *in, unsigned int inlen)
 {
diff --git a/crypto/aes/aes_x86core.c b/crypto/aes/aes_x86core.c
index 1b660d716d..f7b176169a 100644
--- a/crypto/aes/aes_x86core.c
+++ b/crypto/aes/aes_x86core.c
@@ -471,7 +471,7 @@ static const u32 rcon[] = {
 /**
  * Expand the cipher key into the encryption key schedule.
  */
-int AES_set_encrypt_key(const unsigned char *userKey, const int bits,
+int __cdecl AES_set_encrypt_key(const unsigned char *userKey, const int bits,
                         AES_KEY *key)
 {
 
@@ -573,7 +573,7 @@ int AES_set_encrypt_key(const unsigned char *userKey, const int bits,
 /**
  * Expand the cipher key into the decryption key schedule.
  */
-int AES_set_decrypt_key(const unsigned char *userKey, const int bits,
+int __cdecl AES_set_decrypt_key(const unsigned char *userKey, const int bits,
                         AES_KEY *key)
 {
 
@@ -655,7 +655,7 @@ int AES_set_decrypt_key(const unsigned char *userKey, const int bits,
  * Encrypt a single block
  * in and out can overlap
  */
-void AES_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl AES_encrypt(const unsigned char *in, unsigned char *out,
                  const AES_KEY *key)
 {
 
@@ -869,7 +869,7 @@ void AES_encrypt(const unsigned char *in, unsigned char *out,
  * Decrypt a single block
  * in and out can overlap
  */
-void AES_decrypt(const unsigned char *in, unsigned char *out,
+void __cdecl AES_decrypt(const unsigned char *in, unsigned char *out,
                  const AES_KEY *key)
 {
 
diff --git a/crypto/asn1/a_bitstr.c b/crypto/asn1/a_bitstr.c
index bffbd160a2..7f8e703c1a 100644
--- a/crypto/asn1/a_bitstr.c
+++ b/crypto/asn1/a_bitstr.c
@@ -13,7 +13,7 @@
 #include <openssl/asn1.h>
 #include "asn1_locl.h"
 
-int ASN1_BIT_STRING_set(ASN1_BIT_STRING *x, unsigned char *d, int len)
+int __cdecl ASN1_BIT_STRING_set(ASN1_BIT_STRING *x, unsigned char *d, int len)
 {
     return ASN1_STRING_set(x, d, len);
 }
@@ -143,7 +143,7 @@ ASN1_BIT_STRING *c2i_ASN1_BIT_STRING(ASN1_BIT_STRING **a,
 /*
  * These next 2 functions from Goetz Babin-Ebell.
  */
-int ASN1_BIT_STRING_set_bit(ASN1_BIT_STRING *a, int n, int value)
+int __cdecl ASN1_BIT_STRING_set_bit(ASN1_BIT_STRING *a, int n, int value)
 {
     int w, v, iv;
     unsigned char *c;
@@ -178,7 +178,7 @@ int ASN1_BIT_STRING_set_bit(ASN1_BIT_STRING *a, int n, int value)
     return 1;
 }
 
-int ASN1_BIT_STRING_get_bit(const ASN1_BIT_STRING *a, int n)
+int __cdecl ASN1_BIT_STRING_get_bit(const ASN1_BIT_STRING *a, int n)
 {
     int w, v;
 
@@ -195,7 +195,7 @@ int ASN1_BIT_STRING_get_bit(const ASN1_BIT_STRING *a, int n)
  * which is not specified in 'flags', 1 otherwise.
  * 'len' is the length of 'flags'.
  */
-int ASN1_BIT_STRING_check(const ASN1_BIT_STRING *a,
+int __cdecl ASN1_BIT_STRING_check(const ASN1_BIT_STRING *a,
                           const unsigned char *flags, int flags_len)
 {
     int i, ok;
diff --git a/crypto/asn1/a_d2i_fp.c b/crypto/asn1/a_d2i_fp.c
index a1a17901b8..788b526c44 100644
--- a/crypto/asn1/a_d2i_fp.c
+++ b/crypto/asn1/a_d2i_fp.c
@@ -18,7 +18,7 @@
 #ifndef NO_OLD_ASN1
 # ifndef OPENSSL_NO_STDIO
 
-void *ASN1_d2i_fp(void *(*xnew) (void), d2i_of_void *d2i, FILE *in, void **x)
+void * __cdecl ASN1_d2i_fp(void *(*xnew) (void), d2i_of_void *d2i, FILE *in, void **x)
 {
     BIO *b;
     void *ret;
@@ -34,7 +34,7 @@ void *ASN1_d2i_fp(void *(*xnew) (void), d2i_of_void *d2i, FILE *in, void **x)
 }
 # endif
 
-void *ASN1_d2i_bio(void *(*xnew) (void), d2i_of_void *d2i, BIO *in, void **x)
+void * __cdecl ASN1_d2i_bio(void *(*xnew) (void), d2i_of_void *d2i, BIO *in, void **x)
 {
     BUF_MEM *b = NULL;
     const unsigned char *p;
@@ -54,7 +54,7 @@ void *ASN1_d2i_bio(void *(*xnew) (void), d2i_of_void *d2i, BIO *in, void **x)
 
 #endif
 
-void *ASN1_item_d2i_bio(const ASN1_ITEM *it, BIO *in, void *x)
+void * __cdecl ASN1_item_d2i_bio(const ASN1_ITEM *it, BIO *in, void *x)
 {
     BUF_MEM *b = NULL;
     const unsigned char *p;
@@ -73,7 +73,7 @@ void *ASN1_item_d2i_bio(const ASN1_ITEM *it, BIO *in, void *x)
 }
 
 #ifndef OPENSSL_NO_STDIO
-void *ASN1_item_d2i_fp(const ASN1_ITEM *it, FILE *in, void *x)
+void * __cdecl ASN1_item_d2i_fp(const ASN1_ITEM *it, FILE *in, void *x)
 {
     BIO *b;
     char *ret;
diff --git a/crypto/asn1/a_dup.c b/crypto/asn1/a_dup.c
index 50af6b0006..a9ae2ba142 100644
--- a/crypto/asn1/a_dup.c
+++ b/crypto/asn1/a_dup.c
@@ -13,7 +13,7 @@
 
 #ifndef NO_OLD_ASN1
 
-void *ASN1_dup(i2d_of_void *i2d, d2i_of_void *d2i, void *x)
+void * __cdecl ASN1_dup(i2d_of_void *i2d, d2i_of_void *d2i, void *x)
 {
     unsigned char *b, *p;
     const unsigned char *p2;
@@ -46,7 +46,7 @@ void *ASN1_dup(i2d_of_void *i2d, d2i_of_void *d2i, void *x)
  * decode.
  */
 
-void *ASN1_item_dup(const ASN1_ITEM *it, void *x)
+void * __cdecl ASN1_item_dup(const ASN1_ITEM *it, void *x)
 {
     unsigned char *b = NULL;
     const unsigned char *p;
diff --git a/crypto/asn1/a_gentm.c b/crypto/asn1/a_gentm.c
index d3878d6e57..bd1ea790e2 100644
--- a/crypto/asn1/a_gentm.c
+++ b/crypto/asn1/a_gentm.c
@@ -26,12 +26,12 @@ int asn1_generalizedtime_to_tm(struct tm *tm, const ASN1_GENERALIZEDTIME *d)
     return asn1_time_to_tm(tm, d);
 }
 
-int ASN1_GENERALIZEDTIME_check(const ASN1_GENERALIZEDTIME *d)
+int __cdecl ASN1_GENERALIZEDTIME_check(const ASN1_GENERALIZEDTIME *d)
 {
     return asn1_generalizedtime_to_tm(NULL, d);
 }
 
-int ASN1_GENERALIZEDTIME_set_string(ASN1_GENERALIZEDTIME *s, const char *str)
+int __cdecl ASN1_GENERALIZEDTIME_set_string(ASN1_GENERALIZEDTIME *s, const char *str)
 {
     ASN1_GENERALIZEDTIME t;
 
@@ -49,13 +49,13 @@ int ASN1_GENERALIZEDTIME_set_string(ASN1_GENERALIZEDTIME *s, const char *str)
     return 1;
 }
 
-ASN1_GENERALIZEDTIME *ASN1_GENERALIZEDTIME_set(ASN1_GENERALIZEDTIME *s,
+ASN1_GENERALIZEDTIME * __cdecl ASN1_GENERALIZEDTIME_set(ASN1_GENERALIZEDTIME *s,
                                                time_t t)
 {
     return ASN1_GENERALIZEDTIME_adj(s, t, 0, 0);
 }
 
-ASN1_GENERALIZEDTIME *ASN1_GENERALIZEDTIME_adj(ASN1_GENERALIZEDTIME *s,
+ASN1_GENERALIZEDTIME * __cdecl ASN1_GENERALIZEDTIME_adj(ASN1_GENERALIZEDTIME *s,
                                                time_t t, int offset_day,
                                                long offset_sec)
 {
@@ -74,7 +74,7 @@ ASN1_GENERALIZEDTIME *ASN1_GENERALIZEDTIME_adj(ASN1_GENERALIZEDTIME *s,
     return asn1_time_from_tm(s, ts, V_ASN1_GENERALIZEDTIME);
 }
 
-int ASN1_GENERALIZEDTIME_print(BIO *bp, const ASN1_GENERALIZEDTIME *tm)
+int __cdecl ASN1_GENERALIZEDTIME_print(BIO *bp, const ASN1_GENERALIZEDTIME *tm)
 {
     if (tm->type != V_ASN1_GENERALIZEDTIME)
         return 0;
diff --git a/crypto/asn1/a_i2d_fp.c b/crypto/asn1/a_i2d_fp.c
index 980c65a25d..fe553ffe6c 100644
--- a/crypto/asn1/a_i2d_fp.c
+++ b/crypto/asn1/a_i2d_fp.c
@@ -15,7 +15,7 @@
 #ifndef NO_OLD_ASN1
 
 # ifndef OPENSSL_NO_STDIO
-int ASN1_i2d_fp(i2d_of_void *i2d, FILE *out, void *x)
+int __cdecl ASN1_i2d_fp(i2d_of_void *i2d, FILE *out, void *x)
 {
     BIO *b;
     int ret;
@@ -31,7 +31,7 @@ int ASN1_i2d_fp(i2d_of_void *i2d, FILE *out, void *x)
 }
 # endif
 
-int ASN1_i2d_bio(i2d_of_void *i2d, BIO *out, unsigned char *x)
+int __cdecl ASN1_i2d_bio(i2d_of_void *i2d, BIO *out, unsigned char *x)
 {
     char *b;
     unsigned char *p;
@@ -68,7 +68,7 @@ int ASN1_i2d_bio(i2d_of_void *i2d, BIO *out, unsigned char *x)
 #endif
 
 #ifndef OPENSSL_NO_STDIO
-int ASN1_item_i2d_fp(const ASN1_ITEM *it, FILE *out, void *x)
+int __cdecl ASN1_item_i2d_fp(const ASN1_ITEM *it, FILE *out, void *x)
 {
     BIO *b;
     int ret;
@@ -84,7 +84,7 @@ int ASN1_item_i2d_fp(const ASN1_ITEM *it, FILE *out, void *x)
 }
 #endif
 
-int ASN1_item_i2d_bio(const ASN1_ITEM *it, BIO *out, void *x)
+int __cdecl ASN1_item_i2d_bio(const ASN1_ITEM *it, BIO *out, void *x)
 {
     unsigned char *b = NULL;
     int i, j = 0, n, ret = 1;
diff --git a/crypto/asn1/a_int.c b/crypto/asn1/a_int.c
index 70a45cb3cc..4386180ac0 100644
--- a/crypto/asn1/a_int.c
+++ b/crypto/asn1/a_int.c
@@ -15,12 +15,12 @@
 #include <openssl/bn.h>
 #include "asn1_locl.h"
 
-ASN1_INTEGER *ASN1_INTEGER_dup(const ASN1_INTEGER *x)
+ASN1_INTEGER * __cdecl ASN1_INTEGER_dup(const ASN1_INTEGER *x)
 {
     return ASN1_STRING_dup(x);
 }
 
-int ASN1_INTEGER_cmp(const ASN1_INTEGER *x, const ASN1_INTEGER *y)
+int __cdecl ASN1_INTEGER_cmp(const ASN1_INTEGER *x, const ASN1_INTEGER *y)
 {
     int neg, ret;
     /* Compare signs */
@@ -384,7 +384,7 @@ static int asn1_string_set_uint64(ASN1_STRING *a, uint64_t r, int itype)
  * set as negative (it doesn't add a padding zero).
  */
 
-ASN1_INTEGER *d2i_ASN1_UINTEGER(ASN1_INTEGER **a, const unsigned char **pp,
+ASN1_INTEGER * __cdecl d2i_ASN1_UINTEGER(ASN1_INTEGER **a, const unsigned char **pp,
                                 long length)
 {
     ASN1_INTEGER *ret = NULL;
@@ -510,32 +510,32 @@ static BIGNUM *asn1_string_to_bn(const ASN1_INTEGER *ai, BIGNUM *bn,
     return ret;
 }
 
-int ASN1_INTEGER_get_int64(int64_t *pr, const ASN1_INTEGER *a)
+int __cdecl ASN1_INTEGER_get_int64(int64_t *pr, const ASN1_INTEGER *a)
 {
     return asn1_string_get_int64(pr, a, V_ASN1_INTEGER);
 }
 
-int ASN1_INTEGER_set_int64(ASN1_INTEGER *a, int64_t r)
+int __cdecl ASN1_INTEGER_set_int64(ASN1_INTEGER *a, int64_t r)
 {
     return asn1_string_set_int64(a, r, V_ASN1_INTEGER);
 }
 
-int ASN1_INTEGER_get_uint64(uint64_t *pr, const ASN1_INTEGER *a)
+int __cdecl ASN1_INTEGER_get_uint64(uint64_t *pr, const ASN1_INTEGER *a)
 {
     return asn1_string_get_uint64(pr, a, V_ASN1_INTEGER);
 }
 
-int ASN1_INTEGER_set_uint64(ASN1_INTEGER *a, uint64_t r)
+int __cdecl ASN1_INTEGER_set_uint64(ASN1_INTEGER *a, uint64_t r)
 {
     return asn1_string_set_uint64(a, r, V_ASN1_INTEGER);
 }
 
-int ASN1_INTEGER_set(ASN1_INTEGER *a, long v)
+int __cdecl ASN1_INTEGER_set(ASN1_INTEGER *a, long v)
 {
     return ASN1_INTEGER_set_int64(a, v);
 }
 
-long ASN1_INTEGER_get(const ASN1_INTEGER *a)
+long __cdecl ASN1_INTEGER_get(const ASN1_INTEGER *a)
 {
     int i;
     int64_t r;
@@ -549,32 +549,32 @@ long ASN1_INTEGER_get(const ASN1_INTEGER *a)
     return (long)r;
 }
 
-ASN1_INTEGER *BN_to_ASN1_INTEGER(const BIGNUM *bn, ASN1_INTEGER *ai)
+ASN1_INTEGER * __cdecl BN_to_ASN1_INTEGER(const BIGNUM *bn, ASN1_INTEGER *ai)
 {
     return bn_to_asn1_string(bn, ai, V_ASN1_INTEGER);
 }
 
-BIGNUM *ASN1_INTEGER_to_BN(const ASN1_INTEGER *ai, BIGNUM *bn)
+BIGNUM * __cdecl ASN1_INTEGER_to_BN(const ASN1_INTEGER *ai, BIGNUM *bn)
 {
     return asn1_string_to_bn(ai, bn, V_ASN1_INTEGER);
 }
 
-int ASN1_ENUMERATED_get_int64(int64_t *pr, const ASN1_ENUMERATED *a)
+int __cdecl ASN1_ENUMERATED_get_int64(int64_t *pr, const ASN1_ENUMERATED *a)
 {
     return asn1_string_get_int64(pr, a, V_ASN1_ENUMERATED);
 }
 
-int ASN1_ENUMERATED_set_int64(ASN1_ENUMERATED *a, int64_t r)
+int __cdecl ASN1_ENUMERATED_set_int64(ASN1_ENUMERATED *a, int64_t r)
 {
     return asn1_string_set_int64(a, r, V_ASN1_ENUMERATED);
 }
 
-int ASN1_ENUMERATED_set(ASN1_ENUMERATED *a, long v)
+int __cdecl ASN1_ENUMERATED_set(ASN1_ENUMERATED *a, long v)
 {
     return ASN1_ENUMERATED_set_int64(a, v);
 }
 
-long ASN1_ENUMERATED_get(const ASN1_ENUMERATED *a)
+long __cdecl ASN1_ENUMERATED_get(const ASN1_ENUMERATED *a)
 {
     int i;
     int64_t r;
@@ -592,12 +592,12 @@ long ASN1_ENUMERATED_get(const ASN1_ENUMERATED *a)
     return (long)r;
 }
 
-ASN1_ENUMERATED *BN_to_ASN1_ENUMERATED(const BIGNUM *bn, ASN1_ENUMERATED *ai)
+ASN1_ENUMERATED * __cdecl BN_to_ASN1_ENUMERATED(const BIGNUM *bn, ASN1_ENUMERATED *ai)
 {
     return bn_to_asn1_string(bn, ai, V_ASN1_ENUMERATED);
 }
 
-BIGNUM *ASN1_ENUMERATED_to_BN(const ASN1_ENUMERATED *ai, BIGNUM *bn)
+BIGNUM * __cdecl ASN1_ENUMERATED_to_BN(const ASN1_ENUMERATED *ai, BIGNUM *bn)
 {
     return asn1_string_to_bn(ai, bn, V_ASN1_ENUMERATED);
 }
diff --git a/crypto/asn1/a_mbstr.c b/crypto/asn1/a_mbstr.c
index 949fe6c161..5023259261 100644
--- a/crypto/asn1/a_mbstr.c
+++ b/crypto/asn1/a_mbstr.c
@@ -32,13 +32,13 @@ static int cpy_utf8(unsigned long value, void *arg);
  * size limits too.
  */
 
-int ASN1_mbstring_copy(ASN1_STRING **out, const unsigned char *in, int len,
+int __cdecl ASN1_mbstring_copy(ASN1_STRING **out, const unsigned char *in, int len,
                        int inform, unsigned long mask)
 {
     return ASN1_mbstring_ncopy(out, in, len, inform, mask, 0, 0);
 }
 
-int ASN1_mbstring_ncopy(ASN1_STRING **out, const unsigned char *in, int len,
+int __cdecl ASN1_mbstring_ncopy(ASN1_STRING **out, const unsigned char *in, int len,
                         int inform, unsigned long mask,
                         long minsize, long maxsize)
 {
diff --git a/crypto/asn1/a_object.c b/crypto/asn1/a_object.c
index 5e1424a806..54f8e51525 100644
--- a/crypto/asn1/a_object.c
+++ b/crypto/asn1/a_object.c
@@ -18,7 +18,7 @@
 #include "internal/asn1_int.h"
 #include "asn1_locl.h"
 
-int i2d_ASN1_OBJECT(const ASN1_OBJECT *a, unsigned char **pp)
+int __cdecl i2d_ASN1_OBJECT(const ASN1_OBJECT *a, unsigned char **pp)
 {
     unsigned char *p, *allocated = NULL;
     int objsize;
@@ -50,7 +50,7 @@ int i2d_ASN1_OBJECT(const ASN1_OBJECT *a, unsigned char **pp)
     return objsize;
 }
 
-int a2d_ASN1_OBJECT(unsigned char *out, int olen, const char *buf, int num)
+int __cdecl a2d_ASN1_OBJECT(unsigned char *out, int olen, const char *buf, int num)
 {
     int i, first, len = 0, c, use_bn;
     char ftmp[24], *tmp = ftmp;
@@ -177,12 +177,12 @@ int a2d_ASN1_OBJECT(unsigned char *out, int olen, const char *buf, int num)
     return 0;
 }
 
-int i2t_ASN1_OBJECT(char *buf, int buf_len, const ASN1_OBJECT *a)
+int __cdecl i2t_ASN1_OBJECT(char *buf, int buf_len, const ASN1_OBJECT *a)
 {
     return OBJ_obj2txt(buf, buf_len, a, 0);
 }
 
-int i2a_ASN1_OBJECT(BIO *bp, const ASN1_OBJECT *a)
+int __cdecl i2a_ASN1_OBJECT(BIO *bp, const ASN1_OBJECT *a)
 {
     char buf[80], *p = buf;
     int i;
@@ -208,7 +208,7 @@ int i2a_ASN1_OBJECT(BIO *bp, const ASN1_OBJECT *a)
     return i;
 }
 
-ASN1_OBJECT *d2i_ASN1_OBJECT(ASN1_OBJECT **a, const unsigned char **pp,
+ASN1_OBJECT * __cdecl d2i_ASN1_OBJECT(ASN1_OBJECT **a, const unsigned char **pp,
                              long length)
 {
     const unsigned char *p;
@@ -332,7 +332,7 @@ ASN1_OBJECT *c2i_ASN1_OBJECT(ASN1_OBJECT **a, const unsigned char **pp,
     return NULL;
 }
 
-ASN1_OBJECT *ASN1_OBJECT_new(void)
+ASN1_OBJECT * __cdecl ASN1_OBJECT_new(void)
 {
     ASN1_OBJECT *ret;
 
@@ -345,7 +345,7 @@ ASN1_OBJECT *ASN1_OBJECT_new(void)
     return ret;
 }
 
-void ASN1_OBJECT_free(ASN1_OBJECT *a)
+void __cdecl ASN1_OBJECT_free(ASN1_OBJECT *a)
 {
     if (a == NULL)
         return;
@@ -367,7 +367,7 @@ void ASN1_OBJECT_free(ASN1_OBJECT *a)
         OPENSSL_free(a);
 }
 
-ASN1_OBJECT *ASN1_OBJECT_create(int nid, unsigned char *data, int len,
+ASN1_OBJECT * __cdecl ASN1_OBJECT_create(int nid, unsigned char *data, int len,
                                 const char *sn, const char *ln)
 {
     ASN1_OBJECT o;
diff --git a/crypto/asn1/a_octet.c b/crypto/asn1/a_octet.c
index 2e1205caea..3ee70e8745 100644
--- a/crypto/asn1/a_octet.c
+++ b/crypto/asn1/a_octet.c
@@ -11,18 +11,18 @@
 #include "internal/cryptlib.h"
 #include <openssl/asn1.h>
 
-ASN1_OCTET_STRING *ASN1_OCTET_STRING_dup(const ASN1_OCTET_STRING *x)
+ASN1_OCTET_STRING * __cdecl ASN1_OCTET_STRING_dup(const ASN1_OCTET_STRING *x)
 {
     return ASN1_STRING_dup(x);
 }
 
-int ASN1_OCTET_STRING_cmp(const ASN1_OCTET_STRING *a,
+int __cdecl ASN1_OCTET_STRING_cmp(const ASN1_OCTET_STRING *a,
                           const ASN1_OCTET_STRING *b)
 {
     return ASN1_STRING_cmp(a, b);
 }
 
-int ASN1_OCTET_STRING_set(ASN1_OCTET_STRING *x, const unsigned char *d,
+int __cdecl ASN1_OCTET_STRING_set(ASN1_OCTET_STRING *x, const unsigned char *d,
                           int len)
 {
     return ASN1_STRING_set(x, d, len);
diff --git a/crypto/asn1/a_print.c b/crypto/asn1/a_print.c
index 8a373d9da9..f25605a0a3 100644
--- a/crypto/asn1/a_print.c
+++ b/crypto/asn1/a_print.c
@@ -12,7 +12,7 @@
 #include "internal/cryptlib.h"
 #include <openssl/asn1.h>
 
-int ASN1_PRINTABLE_type(const unsigned char *s, int len)
+int __cdecl ASN1_PRINTABLE_type(const unsigned char *s, int len)
 {
     int c;
     int ia5 = 0;
@@ -37,7 +37,7 @@ int ASN1_PRINTABLE_type(const unsigned char *s, int len)
     return V_ASN1_PRINTABLESTRING;
 }
 
-int ASN1_UNIVERSALSTRING_to_string(ASN1_UNIVERSALSTRING *s)
+int __cdecl ASN1_UNIVERSALSTRING_to_string(ASN1_UNIVERSALSTRING *s)
 {
     int i;
     unsigned char *p;
@@ -65,7 +65,7 @@ int ASN1_UNIVERSALSTRING_to_string(ASN1_UNIVERSALSTRING *s)
     return 1;
 }
 
-int ASN1_STRING_print(BIO *bp, const ASN1_STRING *v)
+int __cdecl ASN1_STRING_print(BIO *bp, const ASN1_STRING *v)
 {
     int i, n;
     char buf[80];
diff --git a/crypto/asn1/a_strex.c b/crypto/asn1/a_strex.c
index ea4dd1c5b1..9667e77e02 100644
--- a/crypto/asn1/a_strex.c
+++ b/crypto/asn1/a_strex.c
@@ -583,13 +583,13 @@ int X509_NAME_print_ex_fp(FILE *fp, const X509_NAME *nm, int indent,
 }
 #endif
 
-int ASN1_STRING_print_ex(BIO *out, const ASN1_STRING *str, unsigned long flags)
+int __cdecl ASN1_STRING_print_ex(BIO *out, const ASN1_STRING *str, unsigned long flags)
 {
     return do_print_ex(send_bio_chars, out, flags, str);
 }
 
 #ifndef OPENSSL_NO_STDIO
-int ASN1_STRING_print_ex_fp(FILE *fp, const ASN1_STRING *str, unsigned long flags)
+int __cdecl ASN1_STRING_print_ex_fp(FILE *fp, const ASN1_STRING *str, unsigned long flags)
 {
     return do_print_ex(send_fp_chars, fp, flags, str);
 }
@@ -600,7 +600,7 @@ int ASN1_STRING_print_ex_fp(FILE *fp, const ASN1_STRING *str, unsigned long flag
  * in output string or a negative error code
  */
 
-int ASN1_STRING_to_UTF8(unsigned char **out, const ASN1_STRING *in)
+int __cdecl ASN1_STRING_to_UTF8(unsigned char **out, const ASN1_STRING *in)
 {
     ASN1_STRING stmp, *str = &stmp;
     int mbflag, type, ret;
diff --git a/crypto/asn1/a_strnid.c b/crypto/asn1/a_strnid.c
index f19a9de647..712b31a65f 100644
--- a/crypto/asn1/a_strnid.c
+++ b/crypto/asn1/a_strnid.c
@@ -13,8 +13,8 @@
 #include <openssl/objects.h>
 
 static STACK_OF(ASN1_STRING_TABLE) *stable = NULL;
-static void st_free(ASN1_STRING_TABLE *tbl);
-static int sk_table_cmp(const ASN1_STRING_TABLE *const *a,
+static void __cdecl st_free(ASN1_STRING_TABLE *tbl);
+static int __cdecl sk_table_cmp(const ASN1_STRING_TABLE *const *a,
                         const ASN1_STRING_TABLE *const *b);
 
 /*
@@ -25,12 +25,12 @@ static int sk_table_cmp(const ASN1_STRING_TABLE *const *a,
 
 static unsigned long global_mask = B_ASN1_UTF8STRING;
 
-void ASN1_STRING_set_default_mask(unsigned long mask)
+void __cdecl ASN1_STRING_set_default_mask(unsigned long mask)
 {
     global_mask = mask;
 }
 
-unsigned long ASN1_STRING_get_default_mask(void)
+unsigned long __cdecl ASN1_STRING_get_default_mask(void)
 {
     return global_mask;
 }
@@ -45,7 +45,7 @@ unsigned long ASN1_STRING_get_default_mask(void)
  * default:   the default value, Printable, T61, BMP.
  */
 
-int ASN1_STRING_set_default_mask_asc(const char *p)
+int __cdecl ASN1_STRING_set_default_mask_asc(const char *p)
 {
     unsigned long mask;
     char *end;
@@ -76,7 +76,7 @@ int ASN1_STRING_set_default_mask_asc(const char *p)
  * a corresponding OID. For example certificates and certificate requests.
  */
 
-ASN1_STRING *ASN1_STRING_set_by_NID(ASN1_STRING **out,
+ASN1_STRING * __cdecl ASN1_STRING_set_by_NID(ASN1_STRING **out,
                                     const unsigned char *in, int inlen,
                                     int inform, int nid)
 {
@@ -109,7 +109,7 @@ ASN1_STRING *ASN1_STRING_set_by_NID(ASN1_STRING **out,
 
 #include "tbl_standard.h"
 
-static int sk_table_cmp(const ASN1_STRING_TABLE *const *a,
+static int __cdecl sk_table_cmp(const ASN1_STRING_TABLE *const *a,
                         const ASN1_STRING_TABLE *const *b)
 {
     return (*a)->nid - (*b)->nid;
@@ -117,14 +117,14 @@ static int sk_table_cmp(const ASN1_STRING_TABLE *const *a,
 
 DECLARE_OBJ_BSEARCH_CMP_FN(ASN1_STRING_TABLE, ASN1_STRING_TABLE, table);
 
-static int table_cmp(const ASN1_STRING_TABLE *a, const ASN1_STRING_TABLE *b)
+static int __cdecl table_cmp(const ASN1_STRING_TABLE *a, const ASN1_STRING_TABLE *b)
 {
     return a->nid - b->nid;
 }
 
 IMPLEMENT_OBJ_BSEARCH_CMP_FN(ASN1_STRING_TABLE, ASN1_STRING_TABLE, table);
 
-ASN1_STRING_TABLE *ASN1_STRING_TABLE_get(int nid)
+ASN1_STRING_TABLE * __cdecl ASN1_STRING_TABLE_get(int nid)
 {
     int idx;
     ASN1_STRING_TABLE fnd;
@@ -179,7 +179,7 @@ static ASN1_STRING_TABLE *stable_get(int nid)
     return rv;
 }
 
-int ASN1_STRING_TABLE_add(int nid,
+int __cdecl ASN1_STRING_TABLE_add(int nid,
                           long minsize, long maxsize, unsigned long mask,
                           unsigned long flags)
 {
@@ -201,7 +201,7 @@ int ASN1_STRING_TABLE_add(int nid,
     return 1;
 }
 
-void ASN1_STRING_TABLE_cleanup(void)
+void __cdecl ASN1_STRING_TABLE_cleanup(void)
 {
     STACK_OF(ASN1_STRING_TABLE) *tmp;
 
@@ -212,7 +212,7 @@ void ASN1_STRING_TABLE_cleanup(void)
     sk_ASN1_STRING_TABLE_pop_free(tmp, st_free);
 }
 
-static void st_free(ASN1_STRING_TABLE *tbl)
+static void __cdecl st_free(ASN1_STRING_TABLE *tbl)
 {
     if (tbl->flags & STABLE_FLAGS_MALLOC)
         OPENSSL_free(tbl);
diff --git a/crypto/asn1/a_time.c b/crypto/asn1/a_time.c
index c36dd95001..bca171433a 100644
--- a/crypto/asn1/a_time.c
+++ b/crypto/asn1/a_time.c
@@ -314,12 +314,12 @@ ASN1_TIME *asn1_time_from_tm(ASN1_TIME *s, struct tm *ts, int type)
     return NULL;
 }
 
-ASN1_TIME *ASN1_TIME_set(ASN1_TIME *s, time_t t)
+ASN1_TIME * __cdecl ASN1_TIME_set(ASN1_TIME *s, time_t t)
 {
     return ASN1_TIME_adj(s, t, 0, 0);
 }
 
-ASN1_TIME *ASN1_TIME_adj(ASN1_TIME *s, time_t t,
+ASN1_TIME * __cdecl ASN1_TIME_adj(ASN1_TIME *s, time_t t,
                          int offset_day, long offset_sec)
 {
     struct tm *ts;
@@ -337,7 +337,7 @@ ASN1_TIME *ASN1_TIME_adj(ASN1_TIME *s, time_t t,
     return asn1_time_from_tm(s, ts, V_ASN1_UNDEF);
 }
 
-int ASN1_TIME_check(const ASN1_TIME *t)
+int __cdecl ASN1_TIME_check(const ASN1_TIME *t)
 {
     if (t->type == V_ASN1_GENERALIZEDTIME)
         return ASN1_GENERALIZEDTIME_check(t);
@@ -347,7 +347,7 @@ int ASN1_TIME_check(const ASN1_TIME *t)
 }
 
 /* Convert an ASN1_TIME structure to GeneralizedTime */
-ASN1_GENERALIZEDTIME *ASN1_TIME_to_generalizedtime(const ASN1_TIME *t,
+ASN1_GENERALIZEDTIME * __cdecl ASN1_TIME_to_generalizedtime(const ASN1_TIME *t,
                                                    ASN1_GENERALIZEDTIME **out)
 {
     ASN1_GENERALIZEDTIME *ret = NULL;
@@ -367,7 +367,7 @@ ASN1_GENERALIZEDTIME *ASN1_TIME_to_generalizedtime(const ASN1_TIME *t,
     return ret;
 }
 
-int ASN1_TIME_set_string(ASN1_TIME *s, const char *str)
+int __cdecl ASN1_TIME_set_string(ASN1_TIME *s, const char *str)
 {
     /* Try UTC, if that fails, try GENERALIZED */
     if (ASN1_UTCTIME_set_string(s, str))
@@ -375,7 +375,7 @@ int ASN1_TIME_set_string(ASN1_TIME *s, const char *str)
     return ASN1_GENERALIZEDTIME_set_string(s, str);
 }
 
-int ASN1_TIME_set_string_X509(ASN1_TIME *s, const char *str)
+int __cdecl ASN1_TIME_set_string_X509(ASN1_TIME *s, const char *str)
 {
     ASN1_TIME t;
     struct tm tm;
@@ -434,7 +434,7 @@ out:
     return rv;
 }
 
-int ASN1_TIME_to_tm(const ASN1_TIME *s, struct tm *tm)
+int __cdecl ASN1_TIME_to_tm(const ASN1_TIME *s, struct tm *tm)
 {
     if (s == NULL) {
         time_t now_t;
@@ -449,7 +449,7 @@ int ASN1_TIME_to_tm(const ASN1_TIME *s, struct tm *tm)
     return asn1_time_to_tm(tm, s);
 }
 
-int ASN1_TIME_diff(int *pday, int *psec,
+int __cdecl ASN1_TIME_diff(int *pday, int *psec,
                    const ASN1_TIME *from, const ASN1_TIME *to)
 {
     struct tm tm_from, tm_to;
@@ -466,7 +466,7 @@ static const char _asn1_mon[12][4] = {
     "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"
 };
 
-int ASN1_TIME_print(BIO *bp, const ASN1_TIME *tm)
+int __cdecl ASN1_TIME_print(BIO *bp, const ASN1_TIME *tm)
 {
     char *v;
     int gmt = 0, l;
@@ -513,7 +513,7 @@ int ASN1_TIME_print(BIO *bp, const ASN1_TIME *tm)
     return 0;
 }
 
-int ASN1_TIME_cmp_time_t(const ASN1_TIME *s, time_t t)
+int __cdecl ASN1_TIME_cmp_time_t(const ASN1_TIME *s, time_t t)
 {
     struct tm stm, ttm;
     int day, sec;
@@ -534,7 +534,7 @@ int ASN1_TIME_cmp_time_t(const ASN1_TIME *s, time_t t)
     return 0;
 }
 
-int ASN1_TIME_normalize(ASN1_TIME *t)
+int __cdecl ASN1_TIME_normalize(ASN1_TIME *t)
 {
     struct tm tm;
 
@@ -544,7 +544,7 @@ int ASN1_TIME_normalize(ASN1_TIME *t)
     return asn1_time_from_tm(t, &tm, V_ASN1_UNDEF) != NULL;
 }
 
-int ASN1_TIME_compare(const ASN1_TIME *a, const ASN1_TIME *b)
+int __cdecl ASN1_TIME_compare(const ASN1_TIME *a, const ASN1_TIME *b)
 {
     int day, sec;
 
diff --git a/crypto/asn1/a_type.c b/crypto/asn1/a_type.c
index 732328e050..51f4490837 100644
--- a/crypto/asn1/a_type.c
+++ b/crypto/asn1/a_type.c
@@ -13,7 +13,7 @@
 #include <openssl/objects.h>
 #include "asn1_locl.h"
 
-int ASN1_TYPE_get(const ASN1_TYPE *a)
+int __cdecl ASN1_TYPE_get(const ASN1_TYPE *a)
 {
     if (a->type == V_ASN1_BOOLEAN
             || a->type == V_ASN1_NULL
@@ -23,7 +23,7 @@ int ASN1_TYPE_get(const ASN1_TYPE *a)
         return 0;
 }
 
-void ASN1_TYPE_set(ASN1_TYPE *a, int type, void *value)
+void __cdecl ASN1_TYPE_set(ASN1_TYPE *a, int type, void *value)
 {
     if (a->type != V_ASN1_BOOLEAN
             && a->type != V_ASN1_NULL
@@ -38,7 +38,7 @@ void ASN1_TYPE_set(ASN1_TYPE *a, int type, void *value)
         a->value.ptr = value;
 }
 
-int ASN1_TYPE_set1(ASN1_TYPE *a, int type, const void *value)
+int __cdecl ASN1_TYPE_set1(ASN1_TYPE *a, int type, const void *value)
 {
     if (!value || (type == V_ASN1_BOOLEAN)) {
         void *p = (void *)value;
@@ -60,7 +60,7 @@ int ASN1_TYPE_set1(ASN1_TYPE *a, int type, const void *value)
 }
 
 /* Returns 0 if they are equal, != 0 otherwise. */
-int ASN1_TYPE_cmp(const ASN1_TYPE *a, const ASN1_TYPE *b)
+int __cdecl ASN1_TYPE_cmp(const ASN1_TYPE *a, const ASN1_TYPE *b)
 {
     int result = -1;
 
@@ -106,7 +106,7 @@ int ASN1_TYPE_cmp(const ASN1_TYPE *a, const ASN1_TYPE *b)
     return result;
 }
 
-ASN1_TYPE *ASN1_TYPE_pack_sequence(const ASN1_ITEM *it, void *s, ASN1_TYPE **t)
+ASN1_TYPE * __cdecl ASN1_TYPE_pack_sequence(const ASN1_ITEM *it, void *s, ASN1_TYPE **t)
 {
     ASN1_OCTET_STRING *oct;
     ASN1_TYPE *rt;
@@ -130,7 +130,7 @@ ASN1_TYPE *ASN1_TYPE_pack_sequence(const ASN1_ITEM *it, void *s, ASN1_TYPE **t)
     return rt;
 }
 
-void *ASN1_TYPE_unpack_sequence(const ASN1_ITEM *it, const ASN1_TYPE *t)
+void * __cdecl ASN1_TYPE_unpack_sequence(const ASN1_ITEM *it, const ASN1_TYPE *t)
 {
     if (t == NULL || t->type != V_ASN1_SEQUENCE || t->value.sequence == NULL)
         return NULL;
diff --git a/crypto/asn1/a_utctm.c b/crypto/asn1/a_utctm.c
index b224991aa3..c5284ad11c 100644
--- a/crypto/asn1/a_utctm.c
+++ b/crypto/asn1/a_utctm.c
@@ -22,13 +22,13 @@ int asn1_utctime_to_tm(struct tm *tm, const ASN1_UTCTIME *d)
     return asn1_time_to_tm(tm, d);
 }
 
-int ASN1_UTCTIME_check(const ASN1_UTCTIME *d)
+int __cdecl ASN1_UTCTIME_check(const ASN1_UTCTIME *d)
 {
     return asn1_utctime_to_tm(NULL, d);
 }
 
 /* Sets the string via simple copy without cleaning it up */
-int ASN1_UTCTIME_set_string(ASN1_UTCTIME *s, const char *str)
+int __cdecl ASN1_UTCTIME_set_string(ASN1_UTCTIME *s, const char *str)
 {
     ASN1_UTCTIME t;
 
@@ -46,12 +46,12 @@ int ASN1_UTCTIME_set_string(ASN1_UTCTIME *s, const char *str)
     return 1;
 }
 
-ASN1_UTCTIME *ASN1_UTCTIME_set(ASN1_UTCTIME *s, time_t t)
+ASN1_UTCTIME * __cdecl ASN1_UTCTIME_set(ASN1_UTCTIME *s, time_t t)
 {
     return ASN1_UTCTIME_adj(s, t, 0, 0);
 }
 
-ASN1_UTCTIME *ASN1_UTCTIME_adj(ASN1_UTCTIME *s, time_t t,
+ASN1_UTCTIME * __cdecl ASN1_UTCTIME_adj(ASN1_UTCTIME *s, time_t t,
                                int offset_day, long offset_sec)
 {
     struct tm *ts;
@@ -69,7 +69,7 @@ ASN1_UTCTIME *ASN1_UTCTIME_adj(ASN1_UTCTIME *s, time_t t,
     return asn1_time_from_tm(s, ts, V_ASN1_UTCTIME);
 }
 
-int ASN1_UTCTIME_cmp_time_t(const ASN1_UTCTIME *s, time_t t)
+int __cdecl ASN1_UTCTIME_cmp_time_t(const ASN1_UTCTIME *s, time_t t)
 {
     struct tm stm, ttm;
     int day, sec;
@@ -90,7 +90,7 @@ int ASN1_UTCTIME_cmp_time_t(const ASN1_UTCTIME *s, time_t t)
     return 0;
 }
 
-int ASN1_UTCTIME_print(BIO *bp, const ASN1_UTCTIME *tm)
+int __cdecl ASN1_UTCTIME_print(BIO *bp, const ASN1_UTCTIME *tm)
 {
     if (tm->type != V_ASN1_UTCTIME)
         return 0;
diff --git a/crypto/asn1/a_utf8.c b/crypto/asn1/a_utf8.c
index e2dc09f6ae..1f8508f7a6 100644
--- a/crypto/asn1/a_utf8.c
+++ b/crypto/asn1/a_utf8.c
@@ -24,7 +24,7 @@
  * -4 = character encoded incorrectly (not minimal length).
  */
 
-int UTF8_getc(const unsigned char *str, int len, unsigned long *val)
+int __cdecl UTF8_getc(const unsigned char *str, int len, unsigned long *val)
 {
     const unsigned char *p;
     unsigned long value;
@@ -121,7 +121,7 @@ int UTF8_getc(const unsigned char *str, int len, unsigned long *val)
  * most 6 characters.
  */
 
-int UTF8_putc(unsigned char *str, int len, unsigned long value)
+int __cdecl UTF8_putc(unsigned char *str, int len, unsigned long value)
 {
     if (!str)
         len = 6;                /* Maximum we will need */
diff --git a/crypto/asn1/ameth_lib.c b/crypto/asn1/ameth_lib.c
index d7d270dbb5..dd23421ecd 100644
--- a/crypto/asn1/ameth_lib.c
+++ b/crypto/asn1/ameth_lib.c
@@ -18,13 +18,13 @@
 
 #include "standard_methods.h"
 
-typedef int sk_cmp_fn_type(const char *const *a, const char *const *b);
+typedef int __cdecl sk_cmp_fn_type(const char *const *a, const char *const *b);
 static STACK_OF(EVP_PKEY_ASN1_METHOD) *app_methods = NULL;
 
 DECLARE_OBJ_BSEARCH_CMP_FN(const EVP_PKEY_ASN1_METHOD *,
                            const EVP_PKEY_ASN1_METHOD *, ameth);
 
-static int ameth_cmp(const EVP_PKEY_ASN1_METHOD *const *a,
+static int __cdecl ameth_cmp(const EVP_PKEY_ASN1_METHOD *const *a,
                      const EVP_PKEY_ASN1_METHOD *const *b)
 {
     return ((*a)->pkey_id - (*b)->pkey_id);
diff --git a/crypto/asn1/asn1_err.c b/crypto/asn1/asn1_err.c
index 613f9ae713..0e5c0d8562 100644
--- a/crypto/asn1/asn1_err.c
+++ b/crypto/asn1/asn1_err.c
@@ -338,7 +338,7 @@ static const ERR_STRING_DATA ASN1_str_reasons[] = {
 
 #endif
 
-int ERR_load_ASN1_strings(void)
+int __cdecl ERR_load_ASN1_strings(void)
 {
 #ifndef OPENSSL_NO_ERR
     if (ERR_func_error_string(ASN1_str_functs[0].error) == NULL) {
diff --git a/crypto/asn1/asn1_gen.c b/crypto/asn1/asn1_gen.c
index 493a693aa3..d1fa076297 100644
--- a/crypto/asn1/asn1_gen.c
+++ b/crypto/asn1/asn1_gen.c
@@ -75,7 +75,7 @@ static ASN1_TYPE *asn1_multi(int utype, const char *section, X509V3_CTX *cnf,
 static ASN1_TYPE *asn1_str2type(const char *str, int format, int utype);
 static int asn1_str2tag(const char *tagstr, int len);
 
-ASN1_TYPE *ASN1_generate_nconf(const char *str, CONF *nconf)
+ASN1_TYPE * __cdecl ASN1_generate_nconf(const char *str, CONF *nconf)
 {
     X509V3_CTX cnf;
 
@@ -86,7 +86,7 @@ ASN1_TYPE *ASN1_generate_nconf(const char *str, CONF *nconf)
     return ASN1_generate_v3(str, &cnf);
 }
 
-ASN1_TYPE *ASN1_generate_v3(const char *str, X509V3_CTX *cnf)
+ASN1_TYPE * __cdecl ASN1_generate_v3(const char *str, X509V3_CTX *cnf)
 {
     int err = 0;
     ASN1_TYPE *ret = generate_v3(str, cnf, 0, &err);
@@ -782,7 +782,7 @@ static int mask_cb(const char *elem, int len, void *arg)
     return 1;
 }
 
-int ASN1_str2mask(const char *str, unsigned long *pmask)
+int __cdecl ASN1_str2mask(const char *str, unsigned long *pmask)
 {
     *pmask = 0;
     return CONF_parse_list(str, '|', 1, mask_cb, pmask);
diff --git a/crypto/asn1/asn1_item_list.c b/crypto/asn1/asn1_item_list.c
index 9798192f4b..74c5f9f395 100644
--- a/crypto/asn1/asn1_item_list.c
+++ b/crypto/asn1/asn1_item_list.c
@@ -21,7 +21,7 @@
 
 #include "asn1_item_list.h"
 
-const ASN1_ITEM *ASN1_ITEM_lookup(const char *name)
+const ASN1_ITEM * __cdecl ASN1_ITEM_lookup(const char *name)
 {
     size_t i;
 
@@ -34,7 +34,7 @@ const ASN1_ITEM *ASN1_ITEM_lookup(const char *name)
     return NULL;
 }
 
-const ASN1_ITEM *ASN1_ITEM_get(size_t i)
+const ASN1_ITEM * __cdecl ASN1_ITEM_get(size_t i)
 {
     if (i >= OSSL_NELEM(asn1_item_list))
         return NULL;
diff --git a/crypto/asn1/asn1_lib.c b/crypto/asn1/asn1_lib.c
index 88c4b53918..a2d58d0074 100644
--- a/crypto/asn1/asn1_lib.c
+++ b/crypto/asn1/asn1_lib.c
@@ -31,17 +31,17 @@ static int _asn1_check_infinite_end(const unsigned char **p, long len)
     return 0;
 }
 
-int ASN1_check_infinite_end(unsigned char **p, long len)
+int __cdecl ASN1_check_infinite_end(unsigned char **p, long len)
 {
     return _asn1_check_infinite_end((const unsigned char **)p, len);
 }
 
-int ASN1_const_check_infinite_end(const unsigned char **p, long len)
+int __cdecl ASN1_const_check_infinite_end(const unsigned char **p, long len)
 {
     return _asn1_check_infinite_end(p, len);
 }
 
-int ASN1_get_object(const unsigned char **pp, long *plength, int *ptag,
+int __cdecl ASN1_get_object(const unsigned char **pp, long *plength, int *ptag,
                     int *pclass, long omax)
 {
     int i, ret;
@@ -152,7 +152,7 @@ static int asn1_get_length(const unsigned char **pp, int *inf, long *rl,
 /*
  * class 0 is constructed constructed == 2 for indefinite length constructed
  */
-void ASN1_put_object(unsigned char **pp, int constructed, int length, int tag,
+void __cdecl ASN1_put_object(unsigned char **pp, int constructed, int length, int tag,
                      int xclass)
 {
     unsigned char *p = *pp;
@@ -182,7 +182,7 @@ void ASN1_put_object(unsigned char **pp, int constructed, int length, int tag,
     *pp = p;
 }
 
-int ASN1_put_eoc(unsigned char **pp)
+int __cdecl ASN1_put_eoc(unsigned char **pp)
 {
     unsigned char *p = *pp;
     *p++ = 0;
@@ -212,7 +212,7 @@ static void asn1_put_length(unsigned char **pp, int length)
     *pp = p;
 }
 
-int ASN1_object_size(int constructed, int length, int tag)
+int __cdecl ASN1_object_size(int constructed, int length, int tag)
 {
     int ret = 1;
     if (length < 0)
@@ -240,7 +240,7 @@ int ASN1_object_size(int constructed, int length, int tag)
     return ret + length;
 }
 
-int ASN1_STRING_copy(ASN1_STRING *dst, const ASN1_STRING *str)
+int __cdecl ASN1_STRING_copy(ASN1_STRING *dst, const ASN1_STRING *str)
 {
     if (str == NULL)
         return 0;
@@ -253,7 +253,7 @@ int ASN1_STRING_copy(ASN1_STRING *dst, const ASN1_STRING *str)
     return 1;
 }
 
-ASN1_STRING *ASN1_STRING_dup(const ASN1_STRING *str)
+ASN1_STRING * __cdecl ASN1_STRING_dup(const ASN1_STRING *str)
 {
     ASN1_STRING *ret;
     if (!str)
@@ -268,7 +268,7 @@ ASN1_STRING *ASN1_STRING_dup(const ASN1_STRING *str)
     return ret;
 }
 
-int ASN1_STRING_set(ASN1_STRING *str, const void *_data, int len)
+int __cdecl ASN1_STRING_set(ASN1_STRING *str, const void *_data, int len)
 {
     unsigned char *c;
     const char *data = _data;
@@ -297,19 +297,19 @@ int ASN1_STRING_set(ASN1_STRING *str, const void *_data, int len)
     return 1;
 }
 
-void ASN1_STRING_set0(ASN1_STRING *str, void *data, int len)
+void __cdecl ASN1_STRING_set0(ASN1_STRING *str, void *data, int len)
 {
     OPENSSL_free(str->data);
     str->data = data;
     str->length = len;
 }
 
-ASN1_STRING *ASN1_STRING_new(void)
+ASN1_STRING * __cdecl ASN1_STRING_new(void)
 {
     return ASN1_STRING_type_new(V_ASN1_OCTET_STRING);
 }
 
-ASN1_STRING *ASN1_STRING_type_new(int type)
+ASN1_STRING * __cdecl ASN1_STRING_type_new(int type)
 {
     ASN1_STRING *ret;
 
@@ -332,14 +332,14 @@ void asn1_string_embed_free(ASN1_STRING *a, int embed)
         OPENSSL_free(a);
 }
 
-void ASN1_STRING_free(ASN1_STRING *a)
+void __cdecl ASN1_STRING_free(ASN1_STRING *a)
 {
     if (a == NULL)
         return;
     asn1_string_embed_free(a, a->flags & ASN1_STRING_FLAG_EMBED);
 }
 
-void ASN1_STRING_clear_free(ASN1_STRING *a)
+void __cdecl ASN1_STRING_clear_free(ASN1_STRING *a)
 {
     if (a == NULL)
         return;
@@ -348,7 +348,7 @@ void ASN1_STRING_clear_free(ASN1_STRING *a)
     ASN1_STRING_free(a);
 }
 
-int ASN1_STRING_cmp(const ASN1_STRING *a, const ASN1_STRING *b)
+int __cdecl ASN1_STRING_cmp(const ASN1_STRING *a, const ASN1_STRING *b)
 {
     int i;
 
@@ -363,22 +363,22 @@ int ASN1_STRING_cmp(const ASN1_STRING *a, const ASN1_STRING *b)
         return i;
 }
 
-int ASN1_STRING_length(const ASN1_STRING *x)
+int __cdecl ASN1_STRING_length(const ASN1_STRING *x)
 {
     return x->length;
 }
 
-void ASN1_STRING_length_set(ASN1_STRING *x, int len)
+void __cdecl ASN1_STRING_length_set(ASN1_STRING *x, int len)
 {
     x->length = len;
 }
 
-int ASN1_STRING_type(const ASN1_STRING *x)
+int __cdecl ASN1_STRING_type(const ASN1_STRING *x)
 {
     return x->type;
 }
 
-const unsigned char *ASN1_STRING_get0_data(const ASN1_STRING *x)
+const unsigned char * __cdecl ASN1_STRING_get0_data(const ASN1_STRING *x)
 {
     return x->data;
 }
diff --git a/crypto/asn1/asn1_par.c b/crypto/asn1/asn1_par.c
index 4b60c615de..2749b7f9fd 100644
--- a/crypto/asn1/asn1_par.c
+++ b/crypto/asn1/asn1_par.c
@@ -55,12 +55,12 @@ static int asn1_print_info(BIO *bp, int tag, int xclass, int constructed,
     return 0;
 }
 
-int ASN1_parse(BIO *bp, const unsigned char *pp, long len, int indent)
+int __cdecl ASN1_parse(BIO *bp, const unsigned char *pp, long len, int indent)
 {
     return asn1_parse2(bp, &pp, len, 0, 0, indent, 0);
 }
 
-int ASN1_parse_dump(BIO *bp, const unsigned char *pp, long len, int indent,
+int __cdecl ASN1_parse_dump(BIO *bp, const unsigned char *pp, long len, int indent,
                     int dump)
 {
     return asn1_parse2(bp, &pp, len, 0, 0, indent, dump);
@@ -345,7 +345,7 @@ static int asn1_parse2(BIO *bp, const unsigned char **pp, long length,
     return ret;
 }
 
-const char *ASN1_tag2str(int tag)
+const char * __cdecl ASN1_tag2str(int tag)
 {
     static const char *const tag2str[] = {
         /* 0-4 */
diff --git a/crypto/asn1/asn_mime.c b/crypto/asn1/asn_mime.c
index dfd5be6347..0604e1827a 100644
--- a/crypto/asn1/asn_mime.c
+++ b/crypto/asn1/asn_mime.c
@@ -47,24 +47,24 @@ static char *strip_end(char *name);
 static MIME_HEADER *mime_hdr_new(const char *name, const char *value);
 static int mime_hdr_addparam(MIME_HEADER *mhdr, const char *name, const char *value);
 static STACK_OF(MIME_HEADER) *mime_parse_hdr(BIO *bio);
-static int mime_hdr_cmp(const MIME_HEADER *const *a,
+static int __cdecl mime_hdr_cmp(const MIME_HEADER *const *a,
                         const MIME_HEADER *const *b);
-static int mime_param_cmp(const MIME_PARAM *const *a,
+static int __cdecl mime_param_cmp(const MIME_PARAM *const *a,
                           const MIME_PARAM *const *b);
-static void mime_param_free(MIME_PARAM *param);
+static void __cdecl mime_param_free(MIME_PARAM *param);
 static int mime_bound_check(char *line, int linelen, const char *bound, int blen);
 static int multi_split(BIO *bio, const char *bound, STACK_OF(BIO) **ret);
 static int strip_eol(char *linebuf, int *plen, int flags);
 static MIME_HEADER *mime_hdr_find(STACK_OF(MIME_HEADER) *hdrs, const char *name);
 static MIME_PARAM *mime_param_find(MIME_HEADER *hdr, const char *name);
-static void mime_hdr_free(MIME_HEADER *hdr);
+static void __cdecl mime_hdr_free(MIME_HEADER *hdr);
 
 #define MAX_SMLEN 1024
 #define mime_debug(x)           /* x */
 
 /* Output an ASN1 structure in BER format streaming if necessary */
 
-int i2d_ASN1_bio_stream(BIO *out, ASN1_VALUE *val, BIO *in, int flags,
+int __cdecl i2d_ASN1_bio_stream(BIO *out, ASN1_VALUE *val, BIO *in, int flags,
                         const ASN1_ITEM *it)
 {
     /* If streaming create stream BIO and copy all content through it */
@@ -118,7 +118,7 @@ static int B64_write_ASN1(BIO *out, ASN1_VALUE *val, BIO *in, int flags,
 
 /* Streaming ASN1 PEM write */
 
-int PEM_write_bio_ASN1_stream(BIO *out, ASN1_VALUE *val, BIO *in, int flags,
+int __cdecl PEM_write_bio_ASN1_stream(BIO *out, ASN1_VALUE *val, BIO *in, int flags,
                               const char *hdr, const ASN1_ITEM *it)
 {
     int r;
@@ -219,7 +219,7 @@ static int asn1_write_micalg(BIO *out, STACK_OF(X509_ALGOR) *mdalgs)
 
 /* SMIME sender */
 
-int SMIME_write_ASN1(BIO *bio, ASN1_VALUE *val, BIO *data, int flags,
+int __cdecl SMIME_write_ASN1(BIO *bio, ASN1_VALUE *val, BIO *data, int flags,
                      int ctype_nid, int econt_nid,
                      STACK_OF(X509_ALGOR) *mdalgs, const ASN1_ITEM *it)
 {
@@ -367,7 +367,7 @@ static int asn1_output_data(BIO *out, BIO *data, ASN1_VALUE *val, int flags,
  * opaque this is set to NULL
  */
 
-ASN1_VALUE *SMIME_read_ASN1(BIO *bio, BIO **bcont, const ASN1_ITEM *it)
+ASN1_VALUE * __cdecl SMIME_read_ASN1(BIO *bio, BIO **bcont, const ASN1_ITEM *it)
 {
     BIO *asnin;
     STACK_OF(MIME_HEADER) *headers = NULL;
@@ -475,7 +475,7 @@ ASN1_VALUE *SMIME_read_ASN1(BIO *bio, BIO **bcont, const ASN1_ITEM *it)
 }
 
 /* Copy text from one BIO to another making the output CRLF at EOL */
-int SMIME_crlf_copy(BIO *in, BIO *out, int flags)
+int __cdecl SMIME_crlf_copy(BIO *in, BIO *out, int flags)
 {
     BIO *bf;
     char eol;
@@ -522,7 +522,7 @@ int SMIME_crlf_copy(BIO *in, BIO *out, int flags)
 }
 
 /* Strip off headers if they are text/plain */
-int SMIME_text(BIO *in, BIO *out)
+int __cdecl SMIME_text(BIO *in, BIO *out)
 {
     char iobuf[4096];
     int len;
@@ -854,7 +854,7 @@ static int mime_hdr_addparam(MIME_HEADER *mhdr, const char *name, const char *va
     return 0;
 }
 
-static int mime_hdr_cmp(const MIME_HEADER *const *a,
+static int __cdecl mime_hdr_cmp(const MIME_HEADER *const *a,
                         const MIME_HEADER *const *b)
 {
     if (!(*a)->name || !(*b)->name)
@@ -863,7 +863,7 @@ static int mime_hdr_cmp(const MIME_HEADER *const *a,
     return strcmp((*a)->name, (*b)->name);
 }
 
-static int mime_param_cmp(const MIME_PARAM *const *a,
+static int __cdecl mime_param_cmp(const MIME_PARAM *const *a,
                           const MIME_PARAM *const *b)
 {
     if (!(*a)->param_name || !(*b)->param_name)
@@ -897,7 +897,7 @@ static MIME_PARAM *mime_param_find(MIME_HEADER *hdr, const char *name)
     return sk_MIME_PARAM_value(hdr->params, idx);
 }
 
-static void mime_hdr_free(MIME_HEADER *hdr)
+static void __cdecl mime_hdr_free(MIME_HEADER *hdr)
 {
     if (hdr == NULL)
         return;
@@ -908,7 +908,7 @@ static void mime_hdr_free(MIME_HEADER *hdr)
     OPENSSL_free(hdr);
 }
 
-static void mime_param_free(MIME_PARAM *param)
+static void __cdecl mime_param_free(MIME_PARAM *param)
 {
     OPENSSL_free(param->param_name);
     OPENSSL_free(param->param_value);
diff --git a/crypto/asn1/asn_moid.c b/crypto/asn1/asn_moid.c
index 68a01f3117..937722f0ce 100644
--- a/crypto/asn1/asn_moid.c
+++ b/crypto/asn1/asn_moid.c
@@ -46,7 +46,7 @@ static void oid_module_finish(CONF_IMODULE *md)
 {
 }
 
-void ASN1_add_oid_module(void)
+void __cdecl ASN1_add_oid_module(void)
 {
     CONF_module_add("oid_section", oid_module_init, oid_module_finish);
 }
diff --git a/crypto/asn1/asn_mstbl.c b/crypto/asn1/asn_mstbl.c
index ddcbcd07fe..6ee31f0cd2 100644
--- a/crypto/asn1/asn_mstbl.c
+++ b/crypto/asn1/asn_mstbl.c
@@ -44,7 +44,7 @@ static void stbl_module_finish(CONF_IMODULE *md)
     ASN1_STRING_TABLE_cleanup();
 }
 
-void ASN1_add_stable_module(void)
+void __cdecl ASN1_add_stable_module(void)
 {
     CONF_module_add("stbl_section", stbl_module_init, stbl_module_finish);
 }
diff --git a/crypto/asn1/asn_pack.c b/crypto/asn1/asn_pack.c
index 63bc306756..18866ccbc9 100644
--- a/crypto/asn1/asn_pack.c
+++ b/crypto/asn1/asn_pack.c
@@ -13,7 +13,7 @@
 
 /* ASN1 packing and unpacking functions */
 
-ASN1_STRING *ASN1_item_pack(void *obj, const ASN1_ITEM *it, ASN1_STRING **oct)
+ASN1_STRING * __cdecl ASN1_item_pack(void *obj, const ASN1_ITEM *it, ASN1_STRING **oct)
 {
     ASN1_STRING *octmp;
 
@@ -50,7 +50,7 @@ ASN1_STRING *ASN1_item_pack(void *obj, const ASN1_ITEM *it, ASN1_STRING **oct)
 
 /* Extract an ASN1 object from an ASN1_STRING */
 
-void *ASN1_item_unpack(const ASN1_STRING *oct, const ASN1_ITEM *it)
+void * __cdecl ASN1_item_unpack(const ASN1_STRING *oct, const ASN1_ITEM *it)
 {
     const unsigned char *p;
     void *ret;
diff --git a/crypto/asn1/bio_asn1.c b/crypto/asn1/bio_asn1.c
index 86ee566323..f7b507b910 100644
--- a/crypto/asn1/bio_asn1.c
+++ b/crypto/asn1/bio_asn1.c
@@ -93,7 +93,7 @@ static const BIO_METHOD methods_asn1 = {
     asn1_bio_callback_ctrl,
 };
 
-const BIO_METHOD *BIO_f_asn1(void)
+const BIO_METHOD * __cdecl BIO_f_asn1(void)
 {
     return &methods_asn1;
 }
diff --git a/crypto/asn1/bio_ndef.c b/crypto/asn1/bio_ndef.c
index 6222c99074..431a499dcf 100644
--- a/crypto/asn1/bio_ndef.c
+++ b/crypto/asn1/bio_ndef.c
@@ -49,7 +49,7 @@ static int ndef_suffix(BIO *b, unsigned char **pbuf, int *plen, void *parg);
 static int ndef_suffix_free(BIO *b, unsigned char **pbuf, int *plen,
                             void *parg);
 
-BIO *BIO_new_NDEF(BIO *out, ASN1_VALUE *val, const ASN1_ITEM *it)
+BIO * __cdecl BIO_new_NDEF(BIO *out, ASN1_VALUE *val, const ASN1_ITEM *it)
 {
     NDEF_SUPPORT *ndef_aux = NULL;
     BIO *asn_bio = NULL;
diff --git a/crypto/asn1/evp_asn1.c b/crypto/asn1/evp_asn1.c
index 895085a520..0dfb92e346 100644
--- a/crypto/asn1/evp_asn1.c
+++ b/crypto/asn1/evp_asn1.c
@@ -12,7 +12,7 @@
 #include <openssl/asn1.h>
 #include <openssl/asn1t.h>
 
-int ASN1_TYPE_set_octetstring(ASN1_TYPE *a, unsigned char *data, int len)
+int __cdecl ASN1_TYPE_set_octetstring(ASN1_TYPE *a, unsigned char *data, int len)
 {
     ASN1_STRING *os;
 
@@ -27,7 +27,7 @@ int ASN1_TYPE_set_octetstring(ASN1_TYPE *a, unsigned char *data, int len)
 }
 
 /* int max_len:  for returned value    */
-int ASN1_TYPE_get_octetstring(const ASN1_TYPE *a, unsigned char *data, int max_len)
+int __cdecl ASN1_TYPE_get_octetstring(const ASN1_TYPE *a, unsigned char *data, int max_len)
 {
     int ret, num;
     const unsigned char *p;
@@ -58,7 +58,7 @@ ASN1_SEQUENCE(asn1_int_oct) = {
 
 DECLARE_ASN1_ITEM(asn1_int_oct)
 
-int ASN1_TYPE_set_int_octetstring(ASN1_TYPE *a, long num, unsigned char *data,
+int __cdecl ASN1_TYPE_set_int_octetstring(ASN1_TYPE *a, long num, unsigned char *data,
                                   int len)
 {
     asn1_int_oct atmp;
@@ -80,7 +80,7 @@ int ASN1_TYPE_set_int_octetstring(ASN1_TYPE *a, long num, unsigned char *data,
  * we return the actual length...
  */
 /* int max_len:  for returned value    */
-int ASN1_TYPE_get_int_octetstring(const ASN1_TYPE *a, long *num,
+int __cdecl ASN1_TYPE_get_int_octetstring(const ASN1_TYPE *a, long *num,
                                   unsigned char *data, int max_len)
 {
     asn1_int_oct *atmp = NULL;
diff --git a/crypto/asn1/f_int.c b/crypto/asn1/f_int.c
index 6d6bddc651..bc7d6d73ea 100644
--- a/crypto/asn1/f_int.c
+++ b/crypto/asn1/f_int.c
@@ -13,7 +13,7 @@
 #include <openssl/buffer.h>
 #include <openssl/asn1.h>
 
-int i2a_ASN1_INTEGER(BIO *bp, const ASN1_INTEGER *a)
+int __cdecl i2a_ASN1_INTEGER(BIO *bp, const ASN1_INTEGER *a)
 {
     int i, n = 0;
     static const char *h = "0123456789ABCDEF";
@@ -51,7 +51,7 @@ int i2a_ASN1_INTEGER(BIO *bp, const ASN1_INTEGER *a)
     return -1;
 }
 
-int a2i_ASN1_INTEGER(BIO *bp, ASN1_INTEGER *bs, char *buf, int size)
+int __cdecl a2i_ASN1_INTEGER(BIO *bp, ASN1_INTEGER *bs, char *buf, int size)
 {
     int i, j, k, m, n, again, bufsize;
     unsigned char *s = NULL, *sp;
@@ -142,12 +142,12 @@ int a2i_ASN1_INTEGER(BIO *bp, ASN1_INTEGER *bs, char *buf, int size)
     return 0;
 }
 
-int i2a_ASN1_ENUMERATED(BIO *bp, const ASN1_ENUMERATED *a)
+int __cdecl i2a_ASN1_ENUMERATED(BIO *bp, const ASN1_ENUMERATED *a)
 {
     return i2a_ASN1_INTEGER(bp, a);
 }
 
-int a2i_ASN1_ENUMERATED(BIO *bp, ASN1_ENUMERATED *bs, char *buf, int size)
+int __cdecl a2i_ASN1_ENUMERATED(BIO *bp, ASN1_ENUMERATED *bs, char *buf, int size)
 {
     int rv = a2i_ASN1_INTEGER(bp, bs, buf, size);
     if (rv == 1)
diff --git a/crypto/asn1/f_string.c b/crypto/asn1/f_string.c
index f893489a67..68ee2f8324 100644
--- a/crypto/asn1/f_string.c
+++ b/crypto/asn1/f_string.c
@@ -13,7 +13,7 @@
 #include <openssl/buffer.h>
 #include <openssl/asn1.h>
 
-int i2a_ASN1_STRING(BIO *bp, const ASN1_STRING *a, int type)
+int __cdecl i2a_ASN1_STRING(BIO *bp, const ASN1_STRING *a, int type)
 {
     int i, n = 0;
     static const char *h = "0123456789ABCDEF";
@@ -45,7 +45,7 @@ int i2a_ASN1_STRING(BIO *bp, const ASN1_STRING *a, int type)
     return -1;
 }
 
-int a2i_ASN1_STRING(BIO *bp, ASN1_STRING *bs, char *buf, int size)
+int __cdecl a2i_ASN1_STRING(BIO *bp, ASN1_STRING *bs, char *buf, int size)
 {
     int i, j, k, m, n, again, bufsize;
     unsigned char *s = NULL, *sp;
diff --git a/crypto/asn1/i2d_pr.c b/crypto/asn1/i2d_pr.c
index 445b0c8425..748901dbc0 100644
--- a/crypto/asn1/i2d_pr.c
+++ b/crypto/asn1/i2d_pr.c
@@ -14,7 +14,7 @@
 #include "internal/asn1_int.h"
 #include "internal/evp_int.h"
 
-int i2d_PrivateKey(EVP_PKEY *a, unsigned char **pp)
+int __cdecl i2d_PrivateKey(EVP_PKEY *a, unsigned char **pp)
 {
     if (a->ameth && a->ameth->old_priv_encode) {
         return a->ameth->old_priv_encode(a, pp);
diff --git a/crypto/asn1/t_bitst.c b/crypto/asn1/t_bitst.c
index c0aeca4c78..0faad36e59 100644
--- a/crypto/asn1/t_bitst.c
+++ b/crypto/asn1/t_bitst.c
@@ -12,7 +12,7 @@
 #include <openssl/conf.h>
 #include <openssl/x509v3.h>
 
-int ASN1_BIT_STRING_name_print(BIO *out, ASN1_BIT_STRING *bs,
+int __cdecl ASN1_BIT_STRING_name_print(BIO *out, ASN1_BIT_STRING *bs,
                                BIT_STRING_BITNAME *tbl, int indent)
 {
     BIT_STRING_BITNAME *bnam;
@@ -30,7 +30,7 @@ int ASN1_BIT_STRING_name_print(BIO *out, ASN1_BIT_STRING *bs,
     return 1;
 }
 
-int ASN1_BIT_STRING_set_asc(ASN1_BIT_STRING *bs, const char *name, int value,
+int __cdecl ASN1_BIT_STRING_set_asc(ASN1_BIT_STRING *bs, const char *name, int value,
                             BIT_STRING_BITNAME *tbl)
 {
     int bitnum;
@@ -44,7 +44,7 @@ int ASN1_BIT_STRING_set_asc(ASN1_BIT_STRING *bs, const char *name, int value,
     return 1;
 }
 
-int ASN1_BIT_STRING_num_asc(const char *name, BIT_STRING_BITNAME *tbl)
+int __cdecl ASN1_BIT_STRING_num_asc(const char *name, BIT_STRING_BITNAME *tbl)
 {
     BIT_STRING_BITNAME *bnam;
     for (bnam = tbl; bnam->lname; bnam++) {
diff --git a/crypto/asn1/t_pkey.c b/crypto/asn1/t_pkey.c
index 3b2c9df891..ab3d27644d 100644
--- a/crypto/asn1/t_pkey.c
+++ b/crypto/asn1/t_pkey.c
@@ -18,7 +18,7 @@
 /* Maximum indent */
 #define ASN1_PRINT_MAX_INDENT 128
 
-int ASN1_buf_print(BIO *bp, const unsigned char *buf, size_t buflen, int indent)
+int __cdecl ASN1_buf_print(BIO *bp, const unsigned char *buf, size_t buflen, int indent)
 {
     size_t i;
 
@@ -42,7 +42,7 @@ int ASN1_buf_print(BIO *bp, const unsigned char *buf, size_t buflen, int indent)
     return 1;
 }
 
-int ASN1_bn_print(BIO *bp, const char *number, const BIGNUM *num,
+int __cdecl ASN1_bn_print(BIO *bp, const char *number, const BIGNUM *num,
                   unsigned char *ign, int indent)
 {
     int n, rv = 0;
diff --git a/crypto/asn1/tasn_dec.c b/crypto/asn1/tasn_dec.c
index c2a521ed51..1cf4f1067d 100644
--- a/crypto/asn1/tasn_dec.c
+++ b/crypto/asn1/tasn_dec.c
@@ -82,7 +82,7 @@ static const unsigned long tag2bit[32] = {
     B_ASN1_UNIVERSALSTRING, B_ASN1_UNKNOWN, B_ASN1_BMPSTRING, B_ASN1_UNKNOWN,
 };
 
-unsigned long ASN1_tag2bit(int tag)
+unsigned long __cdecl ASN1_tag2bit(int tag)
 {
     if ((tag < 0) || (tag > 30))
         return 0;
@@ -102,7 +102,7 @@ unsigned long ASN1_tag2bit(int tag)
  * this will simply be a special case.
  */
 
-ASN1_VALUE *ASN1_item_d2i(ASN1_VALUE **pval,
+ASN1_VALUE * __cdecl ASN1_item_d2i(ASN1_VALUE **pval,
                           const unsigned char **in, long len,
                           const ASN1_ITEM *it)
 {
@@ -116,7 +116,7 @@ ASN1_VALUE *ASN1_item_d2i(ASN1_VALUE **pval,
     return NULL;
 }
 
-int ASN1_item_ex_d2i(ASN1_VALUE **pval, const unsigned char **in, long len,
+int __cdecl ASN1_item_ex_d2i(ASN1_VALUE **pval, const unsigned char **in, long len,
                      const ASN1_ITEM *it,
                      int tag, int aclass, char opt, ASN1_TLC *ctx)
 {
diff --git a/crypto/asn1/tasn_enc.c b/crypto/asn1/tasn_enc.c
index 30be314ff9..67028de15d 100644
--- a/crypto/asn1/tasn_enc.c
+++ b/crypto/asn1/tasn_enc.c
@@ -33,13 +33,13 @@ static int asn1_ex_i2c(ASN1_VALUE **pval, unsigned char *cout, int *putype,
  * indefinite length constructed encoding, where appropriate
  */
 
-int ASN1_item_ndef_i2d(ASN1_VALUE *val, unsigned char **out,
+int __cdecl ASN1_item_ndef_i2d(ASN1_VALUE *val, unsigned char **out,
                        const ASN1_ITEM *it)
 {
     return asn1_item_flags_i2d(val, out, it, ASN1_TFLG_NDEF);
 }
 
-int ASN1_item_i2d(ASN1_VALUE *val, unsigned char **out, const ASN1_ITEM *it)
+int __cdecl ASN1_item_i2d(ASN1_VALUE *val, unsigned char **out, const ASN1_ITEM *it)
 {
     return asn1_item_flags_i2d(val, out, it, 0);
 }
@@ -79,7 +79,7 @@ static int asn1_item_flags_i2d(ASN1_VALUE *val, unsigned char **out,
  * performs the normal item handling: it can be used in external types.
  */
 
-int ASN1_item_ex_i2d(ASN1_VALUE **pval, unsigned char **out,
+int __cdecl ASN1_item_ex_i2d(ASN1_VALUE **pval, unsigned char **out,
                      const ASN1_ITEM *it, int tag, int aclass)
 {
     const ASN1_TEMPLATE *tt = NULL;
@@ -354,7 +354,7 @@ typedef struct {
     ASN1_VALUE *field;
 } DER_ENC;
 
-static int der_cmp(const void *a, const void *b)
+static int __cdecl der_cmp(const void *a, const void *b)
 {
     const DER_ENC *d1 = a, *d2 = b;
     int cmplen, i;
diff --git a/crypto/asn1/tasn_fre.c b/crypto/asn1/tasn_fre.c
index bbce489fe0..d59a6519cc 100644
--- a/crypto/asn1/tasn_fre.c
+++ b/crypto/asn1/tasn_fre.c
@@ -15,12 +15,12 @@
 
 /* Free up an ASN1 structure */
 
-void ASN1_item_free(ASN1_VALUE *val, const ASN1_ITEM *it)
+void __cdecl ASN1_item_free(ASN1_VALUE *val, const ASN1_ITEM *it)
 {
     asn1_item_embed_free(&val, it, 0);
 }
 
-void ASN1_item_ex_free(ASN1_VALUE **pval, const ASN1_ITEM *it)
+void __cdecl ASN1_item_ex_free(ASN1_VALUE **pval, const ASN1_ITEM *it)
 {
     asn1_item_embed_free(pval, it, 0);
 }
diff --git a/crypto/asn1/tasn_new.c b/crypto/asn1/tasn_new.c
index 6b8ea8ddd7..6c35cb2443 100644
--- a/crypto/asn1/tasn_new.c
+++ b/crypto/asn1/tasn_new.c
@@ -24,7 +24,7 @@ static int asn1_template_new(ASN1_VALUE **pval, const ASN1_TEMPLATE *tt);
 static void asn1_template_clear(ASN1_VALUE **pval, const ASN1_TEMPLATE *tt);
 static void asn1_primitive_clear(ASN1_VALUE **pval, const ASN1_ITEM *it);
 
-ASN1_VALUE *ASN1_item_new(const ASN1_ITEM *it)
+ASN1_VALUE * __cdecl ASN1_item_new(const ASN1_ITEM *it)
 {
     ASN1_VALUE *ret = NULL;
     if (ASN1_item_ex_new(&ret, it) > 0)
@@ -34,7 +34,7 @@ ASN1_VALUE *ASN1_item_new(const ASN1_ITEM *it)
 
 /* Allocate an ASN1 structure */
 
-int ASN1_item_ex_new(ASN1_VALUE **pval, const ASN1_ITEM *it)
+int __cdecl ASN1_item_ex_new(ASN1_VALUE **pval, const ASN1_ITEM *it)
 {
     return asn1_item_embed_new(pval, it, 0);
 }
diff --git a/crypto/asn1/tasn_prn.c b/crypto/asn1/tasn_prn.c
index 1fb66f1062..ca8babb602 100644
--- a/crypto/asn1/tasn_prn.c
+++ b/crypto/asn1/tasn_prn.c
@@ -32,7 +32,7 @@ static ASN1_PCTX default_pctx = {
     0                           /* str_flags */
 };
 
-ASN1_PCTX *ASN1_PCTX_new(void)
+ASN1_PCTX * __cdecl ASN1_PCTX_new(void)
 {
     ASN1_PCTX *ret;
 
@@ -44,57 +44,57 @@ ASN1_PCTX *ASN1_PCTX_new(void)
     return ret;
 }
 
-void ASN1_PCTX_free(ASN1_PCTX *p)
+void __cdecl ASN1_PCTX_free(ASN1_PCTX *p)
 {
     OPENSSL_free(p);
 }
 
-unsigned long ASN1_PCTX_get_flags(const ASN1_PCTX *p)
+unsigned long __cdecl ASN1_PCTX_get_flags(const ASN1_PCTX *p)
 {
     return p->flags;
 }
 
-void ASN1_PCTX_set_flags(ASN1_PCTX *p, unsigned long flags)
+void __cdecl ASN1_PCTX_set_flags(ASN1_PCTX *p, unsigned long flags)
 {
     p->flags = flags;
 }
 
-unsigned long ASN1_PCTX_get_nm_flags(const ASN1_PCTX *p)
+unsigned long __cdecl ASN1_PCTX_get_nm_flags(const ASN1_PCTX *p)
 {
     return p->nm_flags;
 }
 
-void ASN1_PCTX_set_nm_flags(ASN1_PCTX *p, unsigned long flags)
+void __cdecl ASN1_PCTX_set_nm_flags(ASN1_PCTX *p, unsigned long flags)
 {
     p->nm_flags = flags;
 }
 
-unsigned long ASN1_PCTX_get_cert_flags(const ASN1_PCTX *p)
+unsigned long __cdecl ASN1_PCTX_get_cert_flags(const ASN1_PCTX *p)
 {
     return p->cert_flags;
 }
 
-void ASN1_PCTX_set_cert_flags(ASN1_PCTX *p, unsigned long flags)
+void __cdecl ASN1_PCTX_set_cert_flags(ASN1_PCTX *p, unsigned long flags)
 {
     p->cert_flags = flags;
 }
 
-unsigned long ASN1_PCTX_get_oid_flags(const ASN1_PCTX *p)
+unsigned long __cdecl ASN1_PCTX_get_oid_flags(const ASN1_PCTX *p)
 {
     return p->oid_flags;
 }
 
-void ASN1_PCTX_set_oid_flags(ASN1_PCTX *p, unsigned long flags)
+void __cdecl ASN1_PCTX_set_oid_flags(ASN1_PCTX *p, unsigned long flags)
 {
     p->oid_flags = flags;
 }
 
-unsigned long ASN1_PCTX_get_str_flags(const ASN1_PCTX *p)
+unsigned long __cdecl ASN1_PCTX_get_str_flags(const ASN1_PCTX *p)
 {
     return p->str_flags;
 }
 
-void ASN1_PCTX_set_str_flags(ASN1_PCTX *p, unsigned long flags)
+void __cdecl ASN1_PCTX_set_str_flags(ASN1_PCTX *p, unsigned long flags)
 {
     p->str_flags = flags;
 }
@@ -118,7 +118,7 @@ static int asn1_print_fsname(BIO *out, int indent,
                              const char *fname, const char *sname,
                              const ASN1_PCTX *pctx);
 
-int ASN1_item_print(BIO *out, ASN1_VALUE *ifld, int indent,
+int __cdecl ASN1_item_print(BIO *out, ASN1_VALUE *ifld, int indent,
                     const ASN1_ITEM *it, const ASN1_PCTX *pctx)
 {
     const char *sname;
diff --git a/crypto/asn1/tasn_scn.c b/crypto/asn1/tasn_scn.c
index e1df2cfcae..312fc05033 100644
--- a/crypto/asn1/tasn_scn.c
+++ b/crypto/asn1/tasn_scn.c
@@ -22,7 +22,7 @@
  * passing details to a callback.
  */
 
-ASN1_SCTX *ASN1_SCTX_new(int (*scan_cb) (ASN1_SCTX *ctx))
+ASN1_SCTX * __cdecl ASN1_SCTX_new(int (*scan_cb) (ASN1_SCTX *ctx))
 {
     ASN1_SCTX *ret = OPENSSL_zalloc(sizeof(*ret));
 
@@ -34,32 +34,32 @@ ASN1_SCTX *ASN1_SCTX_new(int (*scan_cb) (ASN1_SCTX *ctx))
     return ret;
 }
 
-void ASN1_SCTX_free(ASN1_SCTX *p)
+void __cdecl ASN1_SCTX_free(ASN1_SCTX *p)
 {
     OPENSSL_free(p);
 }
 
-const ASN1_ITEM *ASN1_SCTX_get_item(ASN1_SCTX *p)
+const ASN1_ITEM * __cdecl ASN1_SCTX_get_item(ASN1_SCTX *p)
 {
     return p->it;
 }
 
-const ASN1_TEMPLATE *ASN1_SCTX_get_template(ASN1_SCTX *p)
+const ASN1_TEMPLATE * __cdecl ASN1_SCTX_get_template(ASN1_SCTX *p)
 {
     return p->tt;
 }
 
-unsigned long ASN1_SCTX_get_flags(ASN1_SCTX *p)
+unsigned long __cdecl ASN1_SCTX_get_flags(ASN1_SCTX *p)
 {
     return p->flags;
 }
 
-void ASN1_SCTX_set_app_data(ASN1_SCTX *p, void *data)
+void __cdecl ASN1_SCTX_set_app_data(ASN1_SCTX *p, void *data)
 {
     p->app_data = data;
 }
 
-void *ASN1_SCTX_get_app_data(ASN1_SCTX *p)
+void * __cdecl ASN1_SCTX_get_app_data(ASN1_SCTX *p)
 {
     return p->app_data;
 }
diff --git a/crypto/asn1/tasn_typ.c b/crypto/asn1/tasn_typ.c
index 98d9879014..06404da1ad 100644
--- a/crypto/asn1/tasn_typ.c
+++ b/crypto/asn1/tasn_typ.c
@@ -20,7 +20,7 @@ sname *sname##_new(void) \
 { \
     return ASN1_STRING_type_new(V_##sname); \
 } \
-void sname##_free(sname *x) \
+void __cdecl sname##_free(sname *x) \
 { \
     ASN1_STRING_free(x); \
 }
diff --git a/crypto/asn1/x_info.c b/crypto/asn1/x_info.c
index 8d99f07c63..e9a5cbf7bc 100644
--- a/crypto/asn1/x_info.c
+++ b/crypto/asn1/x_info.c
@@ -26,7 +26,7 @@ X509_INFO *X509_INFO_new(void)
     return ret;
 }
 
-void X509_INFO_free(X509_INFO *x)
+void __cdecl X509_INFO_free(X509_INFO *x)
 {
     if (x == NULL)
         return;
diff --git a/crypto/async/arch/async_null.c b/crypto/async/arch/async_null.c
index 3eaf170f2e..642fcd3534 100644
--- a/crypto/async/arch/async_null.c
+++ b/crypto/async/arch/async_null.c
@@ -11,7 +11,7 @@
 #include "../async_locl.h"
 
 #ifdef ASYNC_NULL
-int ASYNC_is_capable(void)
+int __cdecl ASYNC_is_capable(void)
 {
     return 0;
 }
diff --git a/crypto/async/arch/async_posix.c b/crypto/async/arch/async_posix.c
index 02c342d3df..b91ee1a13b 100644
--- a/crypto/async/arch/async_posix.c
+++ b/crypto/async/arch/async_posix.c
@@ -17,7 +17,7 @@
 
 #define STACKSIZE       32768
 
-int ASYNC_is_capable(void)
+int __cdecl ASYNC_is_capable(void)
 {
     ucontext_t ctx;
 
diff --git a/crypto/async/arch/async_win.c b/crypto/async/arch/async_win.c
index 077d56ced0..d2f30908bd 100644
--- a/crypto/async/arch/async_win.c
+++ b/crypto/async/arch/async_win.c
@@ -15,7 +15,7 @@
 # include <windows.h>
 # include "internal/cryptlib.h"
 
-int ASYNC_is_capable(void)
+int __cdecl ASYNC_is_capable(void)
 {
     return 1;
 }
diff --git a/crypto/async/async.c b/crypto/async/async.c
index 1d83e4576f..92eaa6982c 100644
--- a/crypto/async/async.c
+++ b/crypto/async/async.c
@@ -164,7 +164,7 @@ void async_start_func(void)
     }
 }
 
-int ASYNC_start_job(ASYNC_JOB **job, ASYNC_WAIT_CTX *wctx, int *ret,
+int __cdecl ASYNC_start_job(ASYNC_JOB **job, ASYNC_WAIT_CTX *wctx, int *ret,
                     int (*func)(void *), void *args, size_t size)
 {
     async_ctx *ctx;
@@ -252,7 +252,7 @@ err:
     return ASYNC_ERR;
 }
 
-int ASYNC_pause_job(void)
+int __cdecl ASYNC_pause_job(void)
 {
     ASYNC_JOB *job;
     async_ctx *ctx = async_get_ctx();
@@ -313,7 +313,7 @@ void async_deinit(void)
     CRYPTO_THREAD_cleanup_local(&poolkey);
 }
 
-int ASYNC_init_thread(size_t max_size, size_t init_size)
+int __cdecl ASYNC_init_thread(size_t max_size, size_t init_size)
 {
     async_pool *pool;
     size_t curr_size = 0;
@@ -388,7 +388,7 @@ void async_delete_thread_state(void)
     async_ctx_free();
 }
 
-void ASYNC_cleanup_thread(void)
+void __cdecl ASYNC_cleanup_thread(void)
 {
     if (!OPENSSL_init_crypto(OPENSSL_INIT_ASYNC, NULL))
         return;
@@ -396,7 +396,7 @@ void ASYNC_cleanup_thread(void)
     async_delete_thread_state();
 }
 
-ASYNC_JOB *ASYNC_get_current_job(void)
+ASYNC_JOB * __cdecl ASYNC_get_current_job(void)
 {
     async_ctx *ctx;
 
@@ -410,12 +410,12 @@ ASYNC_JOB *ASYNC_get_current_job(void)
     return ctx->currjob;
 }
 
-ASYNC_WAIT_CTX *ASYNC_get_wait_ctx(ASYNC_JOB *job)
+ASYNC_WAIT_CTX * __cdecl ASYNC_get_wait_ctx(ASYNC_JOB *job)
 {
     return job->waitctx;
 }
 
-void ASYNC_block_pause(void)
+void __cdecl ASYNC_block_pause(void)
 {
     async_ctx *ctx;
 
@@ -432,7 +432,7 @@ void ASYNC_block_pause(void)
     ctx->blocked++;
 }
 
-void ASYNC_unblock_pause(void)
+void __cdecl ASYNC_unblock_pause(void)
 {
     async_ctx *ctx;
 
diff --git a/crypto/async/async_err.c b/crypto/async/async_err.c
index fd5527aae8..4b9144eadc 100644
--- a/crypto/async/async_err.c
+++ b/crypto/async/async_err.c
@@ -39,7 +39,7 @@ static const ERR_STRING_DATA ASYNC_str_reasons[] = {
 
 #endif
 
-int ERR_load_ASYNC_strings(void)
+int __cdecl ERR_load_ASYNC_strings(void)
 {
 #ifndef OPENSSL_NO_ERR
     if (ERR_func_error_string(ASYNC_str_functs[0].error) == NULL) {
diff --git a/crypto/async/async_wait.c b/crypto/async/async_wait.c
index b23e43e8c8..0ded29b180 100644
--- a/crypto/async/async_wait.c
+++ b/crypto/async/async_wait.c
@@ -12,12 +12,12 @@
 
 #include <openssl/err.h>
 
-ASYNC_WAIT_CTX *ASYNC_WAIT_CTX_new(void)
+ASYNC_WAIT_CTX * __cdecl ASYNC_WAIT_CTX_new(void)
 {
     return OPENSSL_zalloc(sizeof(ASYNC_WAIT_CTX));
 }
 
-void ASYNC_WAIT_CTX_free(ASYNC_WAIT_CTX *ctx)
+void __cdecl ASYNC_WAIT_CTX_free(ASYNC_WAIT_CTX *ctx)
 {
     struct fd_lookup_st *curr;
     struct fd_lookup_st *next;
@@ -40,7 +40,7 @@ void ASYNC_WAIT_CTX_free(ASYNC_WAIT_CTX *ctx)
 
     OPENSSL_free(ctx);
 }
-int ASYNC_WAIT_CTX_set_wait_fd(ASYNC_WAIT_CTX *ctx, const void *key,
+int __cdecl ASYNC_WAIT_CTX_set_wait_fd(ASYNC_WAIT_CTX *ctx, const void *key,
                                OSSL_ASYNC_FD fd, void *custom_data,
                                void (*cleanup)(ASYNC_WAIT_CTX *, const void *,
                                                OSSL_ASYNC_FD, void *))
@@ -63,7 +63,7 @@ int ASYNC_WAIT_CTX_set_wait_fd(ASYNC_WAIT_CTX *ctx, const void *key,
     return 1;
 }
 
-int ASYNC_WAIT_CTX_get_fd(ASYNC_WAIT_CTX *ctx, const void *key,
+int __cdecl ASYNC_WAIT_CTX_get_fd(ASYNC_WAIT_CTX *ctx, const void *key,
                           OSSL_ASYNC_FD *fd, void **custom_data)
 {
     struct fd_lookup_st *curr;
@@ -85,7 +85,7 @@ int ASYNC_WAIT_CTX_get_fd(ASYNC_WAIT_CTX *ctx, const void *key,
     return 0;
 }
 
-int ASYNC_WAIT_CTX_get_all_fds(ASYNC_WAIT_CTX *ctx, OSSL_ASYNC_FD *fd,
+int __cdecl ASYNC_WAIT_CTX_get_all_fds(ASYNC_WAIT_CTX *ctx, OSSL_ASYNC_FD *fd,
                                size_t *numfds)
 {
     struct fd_lookup_st *curr;
@@ -108,7 +108,7 @@ int ASYNC_WAIT_CTX_get_all_fds(ASYNC_WAIT_CTX *ctx, OSSL_ASYNC_FD *fd,
     return 1;
 }
 
-int ASYNC_WAIT_CTX_get_changed_fds(ASYNC_WAIT_CTX *ctx, OSSL_ASYNC_FD *addfd,
+int __cdecl ASYNC_WAIT_CTX_get_changed_fds(ASYNC_WAIT_CTX *ctx, OSSL_ASYNC_FD *addfd,
                                    size_t *numaddfds, OSSL_ASYNC_FD *delfd,
                                    size_t *numdelfds)
 {
@@ -137,7 +137,7 @@ int ASYNC_WAIT_CTX_get_changed_fds(ASYNC_WAIT_CTX *ctx, OSSL_ASYNC_FD *addfd,
     return 1;
 }
 
-int ASYNC_WAIT_CTX_clear_fd(ASYNC_WAIT_CTX *ctx, const void *key)
+int __cdecl ASYNC_WAIT_CTX_clear_fd(ASYNC_WAIT_CTX *ctx, const void *key)
 {
     struct fd_lookup_st *curr, *prev;
 
diff --git a/crypto/bio/bio_lib.c b/crypto/bio/bio_lib.c
index ca375b911a..f7c1636f22 100644
--- a/crypto/bio/bio_lib.c
+++ b/crypto/bio/bio_lib.c
@@ -170,7 +170,7 @@ int BIO_get_shutdown(BIO *a)
     return a->shutdown;
 }
 
-void BIO_vfree(BIO *a)
+void __cdecl BIO_vfree(BIO *a)
 {
     BIO_free(a);
 }
diff --git a/crypto/conf/conf_api.c b/crypto/conf/conf_api.c
index 5e57d749ce..86bbf53e77 100644
--- a/crypto/conf/conf_api.c
+++ b/crypto/conf/conf_api.c
@@ -104,7 +104,7 @@ static unsigned long conf_value_hash(const CONF_VALUE *v)
     return (OPENSSL_LH_strhash(v->section) << 2) ^ OPENSSL_LH_strhash(v->name);
 }
 
-static int conf_value_cmp(const CONF_VALUE *a, const CONF_VALUE *b)
+static int __cdecl conf_value_cmp(const CONF_VALUE *a, const CONF_VALUE *b)
 {
     int i;
 
diff --git a/crypto/ct/ct_log.c b/crypto/ct/ct_log.c
index c1bca3e141..cba30257d6 100644
--- a/crypto/ct/ct_log.c
+++ b/crypto/ct/ct_log.c
@@ -260,7 +260,7 @@ err:
 }
 
 /* Frees CT log and associated structures */
-void CTLOG_free(CTLOG *log)
+void __cdecl CTLOG_free(CTLOG *log)
 {
     if (log != NULL) {
         OPENSSL_free(log->name);
diff --git a/crypto/ct/ct_sct.c b/crypto/ct/ct_sct.c
index 1dc16857ba..14dfa43d0a 100644
--- a/crypto/ct/ct_sct.c
+++ b/crypto/ct/ct_sct.c
@@ -33,7 +33,7 @@ SCT *SCT_new(void)
     return sct;
 }
 
-void SCT_free(SCT *sct)
+void __cdecl SCT_free(SCT *sct)
 {
     if (sct == NULL)
         return;
diff --git a/crypto/dh/dh_asn1.c b/crypto/dh/dh_asn1.c
index 1a40633b48..f3cde24e64 100644
--- a/crypto/dh/dh_asn1.c
+++ b/crypto/dh/dh_asn1.c
@@ -72,7 +72,7 @@ ASN1_SEQUENCE(DHxparams) = {
 
 int_dhx942_dh *d2i_int_dhx(int_dhx942_dh **a,
                            const unsigned char **pp, long length);
-int i2d_int_dhx(const int_dhx942_dh *a, unsigned char **pp);
+int __cdecl i2d_int_dhx(const int_dhx942_dh *a, unsigned char **pp);
 
 IMPLEMENT_ASN1_ENCODE_FUNCTIONS_const_fname(int_dhx942_dh, DHxparams, int_dhx)
 
@@ -115,7 +115,7 @@ DH *d2i_DHxparams(DH **a, const unsigned char **pp, long length)
     return dh;
 }
 
-int i2d_DHxparams(const DH *dh, unsigned char **pp)
+int __cdecl i2d_DHxparams(const DH *dh, unsigned char **pp)
 {
     int_dhx942_dh dhx;
     int_dhvparams dhv;
diff --git a/crypto/ec/ec_asn1.c b/crypto/ec/ec_asn1.c
index 1ce1181fc1..671da0f4d1 100644
--- a/crypto/ec/ec_asn1.c
+++ b/crypto/ec/ec_asn1.c
@@ -933,7 +933,7 @@ EC_GROUP *d2i_ECPKParameters(EC_GROUP **a, const unsigned char **in, long len)
     return group;
 }
 
-int i2d_ECPKParameters(const EC_GROUP *a, unsigned char **out)
+int __cdecl i2d_ECPKParameters(const EC_GROUP *a, unsigned char **out)
 {
     int ret = 0;
     ECPKPARAMETERS *tmp = EC_GROUP_get_ecpkparameters(a, NULL);
@@ -1031,7 +1031,7 @@ EC_KEY *d2i_ECPrivateKey(EC_KEY **a, const unsigned char **in, long len)
     return NULL;
 }
 
-int i2d_ECPrivateKey(EC_KEY *a, unsigned char **out)
+int __cdecl i2d_ECPrivateKey(EC_KEY *a, unsigned char **out)
 {
     int ret = 0, ok = 0;
     unsigned char *priv= NULL, *pub= NULL;
@@ -1217,7 +1217,7 @@ ECDSA_SIG *ECDSA_SIG_new(void)
     return sig;
 }
 
-void ECDSA_SIG_free(ECDSA_SIG *sig)
+void __cdecl ECDSA_SIG_free(ECDSA_SIG *sig)
 {
     if (sig == NULL)
         return;
diff --git a/crypto/engine/eng_dyn.c b/crypto/engine/eng_dyn.c
index 843226c077..8844659541 100644
--- a/crypto/engine/eng_dyn.c
+++ b/crypto/engine/eng_dyn.c
@@ -117,7 +117,7 @@ struct st_dynamic_data_ctx {
  */
 static int dynamic_ex_data_idx = -1;
 
-static void int_free_str(char *s)
+static void __cdecl int_free_str(char *s)
 {
     OPENSSL_free(s);
 }
diff --git a/crypto/engine/eng_lib.c b/crypto/engine/eng_lib.c
index d7f2026fac..1e494730a6 100644
--- a/crypto/engine/eng_lib.c
+++ b/crypto/engine/eng_lib.c
@@ -157,7 +157,7 @@ void engine_cleanup_add_last(ENGINE_CLEANUP_CB *cb)
 }
 
 /* The API function that performs all cleanup */
-static void engine_cleanup_cb_free(ENGINE_CLEANUP_ITEM *item)
+static void __cdecl engine_cleanup_cb_free(ENGINE_CLEANUP_ITEM *item)
 {
     (*(item->cb)) ();
     OPENSSL_free(item);
diff --git a/crypto/engine/eng_table.c b/crypto/engine/eng_table.c
index ac4b02fc12..cc46bdb969 100644
--- a/crypto/engine/eng_table.c
+++ b/crypto/engine/eng_table.c
@@ -56,7 +56,7 @@ static unsigned long engine_pile_hash(const ENGINE_PILE *c)
     return c->nid;
 }
 
-static int engine_pile_cmp(const ENGINE_PILE *a, const ENGINE_PILE *b)
+static int __cdecl engine_pile_cmp(const ENGINE_PILE *a, const ENGINE_PILE *b)
 {
     return a->nid - b->nid;
 }
diff --git a/crypto/err/err.c b/crypto/err/err.c
index 3a58ccb958..cec0cfdc3a 100644
--- a/crypto/err/err.c
+++ b/crypto/err/err.c
@@ -164,7 +164,7 @@ static unsigned long err_string_data_hash(const ERR_STRING_DATA *a)
     return (ret ^ ret % 19 * 13);
 }
 
-static int err_string_data_cmp(const ERR_STRING_DATA *a,
+static int __cdecl err_string_data_cmp(const ERR_STRING_DATA *a,
                                const ERR_STRING_DATA *b)
 {
     if (a->error == b->error)
@@ -342,7 +342,7 @@ static int err_load_strings(const ERR_STRING_DATA *str)
     return 1;
 }
 
-int ERR_load_ERR_strings(void)
+int __cdecl ERR_load_ERR_strings(void)
 {
 #ifndef OPENSSL_NO_ERR
     if (!RUN_ONCE(&err_string_init, do_err_strings_init))
@@ -357,7 +357,7 @@ int ERR_load_ERR_strings(void)
     return 1;
 }
 
-int ERR_load_strings(int lib, ERR_STRING_DATA *str)
+int __cdecl ERR_load_strings(int lib, ERR_STRING_DATA *str)
 {
     if (ERR_load_ERR_strings() == 0)
         return 0;
@@ -367,7 +367,7 @@ int ERR_load_strings(int lib, ERR_STRING_DATA *str)
     return 1;
 }
 
-int ERR_load_strings_const(const ERR_STRING_DATA *str)
+int __cdecl ERR_load_strings_const(const ERR_STRING_DATA *str)
 {
     if (ERR_load_ERR_strings() == 0)
         return 0;
@@ -375,7 +375,7 @@ int ERR_load_strings_const(const ERR_STRING_DATA *str)
     return 1;
 }
 
-int ERR_unload_strings(int lib, ERR_STRING_DATA *str)
+int __cdecl ERR_unload_strings(int lib, ERR_STRING_DATA *str)
 {
     if (!RUN_ONCE(&err_string_init, do_err_strings_init))
         return 0;
@@ -392,7 +392,7 @@ int ERR_unload_strings(int lib, ERR_STRING_DATA *str)
     return 1;
 }
 
-void err_free_strings_int(void)
+void __cdecl err_free_strings_int(void)
 {
     if (!RUN_ONCE(&err_string_init, do_err_strings_init))
         return;
@@ -437,7 +437,7 @@ void ERR_put_error(int lib, int func, int reason, const char *file, int line)
     err_clear_data(es, es->top);
 }
 
-void ERR_clear_error(void)
+void __cdecl ERR_clear_error(void)
 {
     int i;
     ERR_STATE *es;
@@ -582,7 +582,7 @@ static unsigned long get_error_values(int inc, int top, const char **file,
     return ret;
 }
 
-void ERR_error_string_n(unsigned long e, char *buf, size_t len)
+void __cdecl ERR_error_string_n(unsigned long e, char *buf, size_t len)
 {
     char lsbuf[64], fsbuf[64], rsbuf[64];
     const char *ls, *fs, *rs;
@@ -623,7 +623,7 @@ void ERR_error_string_n(unsigned long e, char *buf, size_t len)
  * ERR_error_string_n should be used instead for ret != NULL as
  * ERR_error_string cannot know how large the buffer is
  */
-char *ERR_error_string(unsigned long e, char *ret)
+char * __cdecl ERR_error_string(unsigned long e, char *ret)
 {
     static char buf[256];
 
@@ -633,7 +633,7 @@ char *ERR_error_string(unsigned long e, char *ret)
     return ret;
 }
 
-const char *ERR_lib_error_string(unsigned long e)
+const char * __cdecl ERR_lib_error_string(unsigned long e)
 {
     ERR_STRING_DATA d, *p;
     unsigned long l;
@@ -648,7 +648,7 @@ const char *ERR_lib_error_string(unsigned long e)
     return ((p == NULL) ? NULL : p->string);
 }
 
-const char *ERR_func_error_string(unsigned long e)
+const char * __cdecl ERR_func_error_string(unsigned long e)
 {
     ERR_STRING_DATA d, *p;
     unsigned long l, f;
@@ -664,7 +664,7 @@ const char *ERR_func_error_string(unsigned long e)
     return ((p == NULL) ? NULL : p->string);
 }
 
-const char *ERR_reason_error_string(unsigned long e)
+const char * __cdecl ERR_reason_error_string(unsigned long e)
 {
     ERR_STRING_DATA d, *p = NULL;
     unsigned long l, r;
@@ -712,7 +712,7 @@ DEFINE_RUN_ONCE_STATIC(err_do_init)
     return CRYPTO_THREAD_init_local(&err_thread_local, NULL);
 }
 
-ERR_STATE *ERR_get_state(void)
+ERR_STATE *__cdecl ERR_get_state(void)
 {
     ERR_STATE *state;
     int saveerrno = get_last_sys_error();
@@ -835,7 +835,7 @@ void ERR_set_error_data(char *data, int flags)
     err_set_error_data_int(data, flags);
 }
 
-void ERR_add_error_data(int num, ...)
+void __cdecl ERR_add_error_data(int num, ...)
 {
     va_list args;
     va_start(args, num);
@@ -843,7 +843,7 @@ void ERR_add_error_data(int num, ...)
     va_end(args);
 }
 
-void ERR_add_error_vdata(int num, va_list args)
+void __cdecl ERR_add_error_vdata(int num, va_list args)
 {
     int i, n, s;
     char *str, *p, *a;
diff --git a/crypto/err/err_all.c b/crypto/err/err_all.c
index d9ec04b606..ad86eaab70 100644
--- a/crypto/err/err_all.c
+++ b/crypto/err/err_all.c
@@ -39,7 +39,7 @@
 #include <openssl/kdferr.h>
 #include <openssl/storeerr.h>
 
-int err_load_crypto_strings_int(void)
+int __cdecl err_load_crypto_strings_int(void)
 {
     if (
 #ifndef OPENSSL_NO_ERR
diff --git a/crypto/err/err_prn.c b/crypto/err/err_prn.c
index c82e62947e..0691fec995 100644
--- a/crypto/err/err_prn.c
+++ b/crypto/err/err_prn.c
@@ -13,7 +13,7 @@
 #include <openssl/buffer.h>
 #include <openssl/err.h>
 
-void ERR_print_errors_cb(int (*cb) (const char *str, size_t len, void *u),
+void __cdecl ERR_print_errors_cb(int (*cb) (const char *str, size_t len, void *u),
                          void *u)
 {
     unsigned long l;
@@ -47,13 +47,13 @@ static int print_bio(const char *str, size_t len, void *bp)
     return BIO_write((BIO *)bp, str, len);
 }
 
-void ERR_print_errors(BIO *bp)
+void __cdecl ERR_print_errors(BIO *bp)
 {
     ERR_print_errors_cb(print_bio, bp);
 }
 
 #ifndef OPENSSL_NO_STDIO
-void ERR_print_errors_fp(FILE *fp)
+void __cdecl ERR_print_errors_fp(FILE *fp)
 {
     BIO *bio = BIO_new_fp(fp, BIO_NOCLOSE);
     if (bio == NULL)
diff --git a/crypto/evp/evp_pbe.c b/crypto/evp/evp_pbe.c
index 5a88817b4a..5cd9d07bf7 100644
--- a/crypto/evp/evp_pbe.c
+++ b/crypto/evp/evp_pbe.c
@@ -135,7 +135,7 @@ int EVP_PBE_CipherInit(ASN1_OBJECT *pbe_obj, const char *pass, int passlen,
 
 DECLARE_OBJ_BSEARCH_CMP_FN(EVP_PBE_CTL, EVP_PBE_CTL, pbe2);
 
-static int pbe2_cmp(const EVP_PBE_CTL *pbe1, const EVP_PBE_CTL *pbe2)
+static int __cdecl pbe2_cmp(const EVP_PBE_CTL *pbe1, const EVP_PBE_CTL *pbe2)
 {
     int ret = pbe1->pbe_type - pbe2->pbe_type;
     if (ret)
@@ -146,7 +146,7 @@ static int pbe2_cmp(const EVP_PBE_CTL *pbe1, const EVP_PBE_CTL *pbe2)
 
 IMPLEMENT_OBJ_BSEARCH_CMP_FN(EVP_PBE_CTL, EVP_PBE_CTL, pbe2);
 
-static int pbe_cmp(const EVP_PBE_CTL *const *a, const EVP_PBE_CTL *const *b)
+static int __cdecl pbe_cmp(const EVP_PBE_CTL *const *a, const EVP_PBE_CTL *const *b)
 {
     int ret = (*a)->pbe_type - (*b)->pbe_type;
     if (ret)
@@ -235,7 +235,7 @@ int EVP_PBE_find(int type, int pbe_nid,
     return 1;
 }
 
-static void free_evp_pbe_ctl(EVP_PBE_CTL *pbe)
+static void __cdecl free_evp_pbe_ctl(EVP_PBE_CTL *pbe)
 {
     OPENSSL_free(pbe);
 }
diff --git a/crypto/evp/pmeth_lib.c b/crypto/evp/pmeth_lib.c
index 7fbf895e07..4d69a349e5 100644
--- a/crypto/evp/pmeth_lib.c
+++ b/crypto/evp/pmeth_lib.c
@@ -17,7 +17,7 @@
 #include "internal/evp_int.h"
 #include "internal/numbers.h"
 
-typedef int sk_cmp_fn_type(const char *const *a, const char *const *b);
+typedef int __cdecl sk_cmp_fn_type(const char *const *a, const char *const *b);
 
 static STACK_OF(EVP_PKEY_METHOD) *app_pkey_methods = NULL;
 
@@ -72,7 +72,7 @@ static const EVP_PKEY_METHOD *standard_methods[] = {
 DECLARE_OBJ_BSEARCH_CMP_FN(const EVP_PKEY_METHOD *, const EVP_PKEY_METHOD *,
                            pmeth);
 
-static int pmeth_cmp(const EVP_PKEY_METHOD *const *a,
+static int __cdecl pmeth_cmp(const EVP_PKEY_METHOD *const *a,
                      const EVP_PKEY_METHOD *const *b)
 {
     return ((*a)->pkey_id - (*b)->pkey_id);
@@ -234,7 +234,7 @@ void EVP_PKEY_meth_copy(EVP_PKEY_METHOD *dst, const EVP_PKEY_METHOD *src)
     dst->check = src->check;
 }
 
-void EVP_PKEY_meth_free(EVP_PKEY_METHOD *pmeth)
+void __cdecl EVP_PKEY_meth_free(EVP_PKEY_METHOD *pmeth)
 {
     if (pmeth && (pmeth->flags & EVP_PKEY_FLAG_DYNAMIC))
         OPENSSL_free(pmeth);
diff --git a/crypto/ex_data.c b/crypto/ex_data.c
index 08dc7c4073..9caa209495 100644
--- a/crypto/ex_data.c
+++ b/crypto/ex_data.c
@@ -79,7 +79,7 @@ static EX_CALLBACKS *get_and_lock(int class_index)
     return ip;
 }
 
-static void cleanup_cb(EX_CALLBACK *funcs)
+static void __cdecl cleanup_cb(EX_CALLBACK *funcs)
 {
     OPENSSL_free(funcs);
 }
diff --git a/crypto/include/internal/err_int.h b/crypto/include/internal/err_int.h
index 44ac944627..574d2e780f 100644
--- a/crypto/include/internal/err_int.h
+++ b/crypto/include/internal/err_int.h
@@ -10,7 +10,7 @@
 #ifndef INTERNAL_ERR_INT_H
 # define INTERNAL_ERR_INT_H
 
-int err_load_crypto_strings_int(void);
+int __cdecl err_load_crypto_strings_int(void);
 void err_cleanup(void);
 void err_delete_thread_state(void);
 int err_shelve_state(void **);
diff --git a/crypto/init.c b/crypto/init.c
index 9fc0e8ef68..6bdb538618 100644
--- a/crypto/init.c
+++ b/crypto/init.c
@@ -119,7 +119,7 @@ err:
 
 static CRYPTO_ONCE register_atexit = CRYPTO_ONCE_STATIC_INIT;
 #if !defined(OPENSSL_SYS_UEFI) && defined(_WIN32)
-static int win32atexit(void)
+static int __cdecl win32atexit(void)
 {
     OPENSSL_cleanup();
     return 0;
@@ -449,7 +449,7 @@ static void ossl_init_thread_stop(struct thread_local_inits_st *locals)
     OPENSSL_free(locals);
 }
 
-void OPENSSL_thread_stop(void)
+void __cdecl OPENSSL_thread_stop(void)
 {
     if (destructor_key.sane != -1)
         ossl_init_thread_stop(ossl_init_get_thread_local(0));
@@ -494,7 +494,7 @@ int ossl_init_thread_start(uint64_t opts)
     return 1;
 }
 
-void OPENSSL_cleanup(void)
+void __cdecl OPENSSL_cleanup(void)
 {
     OPENSSL_INIT_STOP *currhandler, *lasthandler;
     CRYPTO_THREAD_LOCAL key;
@@ -617,7 +617,7 @@ void OPENSSL_cleanup(void)
  * called prior to any threads making calls to any OpenSSL functions,
  * i.e. passing a non-null settings value is assumed to be single-threaded.
  */
-int OPENSSL_init_crypto(uint64_t opts, const OPENSSL_INIT_SETTINGS *settings)
+int __cdecl OPENSSL_init_crypto(uint64_t opts, const OPENSSL_INIT_SETTINGS *settings)
 {
     if (stopped) {
         if (!(opts & OPENSSL_INIT_BASE_ONLY))
@@ -759,7 +759,7 @@ int OPENSSL_init_crypto(uint64_t opts, const OPENSSL_INIT_SETTINGS *settings)
     return 1;
 }
 
-int OPENSSL_atexit(void (*handler)(void))
+int __cdecl OPENSSL_atexit(void (*handler)(void))
 {
     OPENSSL_INIT_STOP *newhand;
 
diff --git a/crypto/lhash/lhash.c b/crypto/lhash/lhash.c
index 485d4c3fff..e9519e91b6 100644
--- a/crypto/lhash/lhash.c
+++ b/crypto/lhash/lhash.c
@@ -93,7 +93,7 @@ void OPENSSL_LH_free(OPENSSL_LHASH *lh)
     OPENSSL_free(lh);
 }
 
-void *OPENSSL_LH_insert(OPENSSL_LHASH *lh, void *data)
+void * __cdecl OPENSSL_LH_insert(OPENSSL_LHASH *lh, void *data)
 {
     unsigned long hash;
     OPENSSL_LH_NODE *nn, **rn;
diff --git a/crypto/mem.c b/crypto/mem.c
index 780053ffef..55c7295526 100644
--- a/crypto/mem.c
+++ b/crypto/mem.c
@@ -23,11 +23,11 @@
  */
 static int allow_customize = 1;
 
-static void *(*malloc_impl)(size_t, const char *, int)
+static void *(__cdecl *malloc_impl)(size_t, const char *, int)
     = CRYPTO_malloc;
-static void *(*realloc_impl)(void *, size_t, const char *, int)
+static void *(__cdecl *realloc_impl)(void *, size_t, const char *, int)
     = CRYPTO_realloc;
-static void (*free_impl)(void *, const char *, int)
+static void (__cdecl *free_impl)(void *, const char *, int)
     = CRYPTO_free;
 
 #ifndef OPENSSL_NO_CRYPTO_MDEBUG
@@ -58,9 +58,9 @@ static int call_malloc_debug = 0;
 #endif
 
 int CRYPTO_set_mem_functions(
-        void *(*m)(size_t, const char *, int),
-        void *(*r)(void *, size_t, const char *, int),
-        void (*f)(void *, const char *, int))
+        void *(__cdecl *m)(size_t, const char *, int),
+        void *(__cdecl *r)(void *, size_t, const char *, int),
+        void (__cdecl *f)(void *, const char *, int))
 {
     if (!allow_customize)
         return 0;
@@ -82,9 +82,9 @@ int CRYPTO_set_mem_debug(int flag)
 }
 
 void CRYPTO_get_mem_functions(
-        void *(**m)(size_t, const char *, int),
-        void *(**r)(void *, size_t, const char *, int),
-        void (**f)(void *, const char *, int))
+        void *(__cdecl **m)(size_t, const char *, int),
+        void *(__cdecl **r)(void *, size_t, const char *, int),
+        void (__cdecl **f)(void *, const char *, int))
 {
     if (m != NULL)
         *m = malloc_impl;
@@ -189,7 +189,7 @@ void ossl_malloc_setup_failures(void)
 }
 #endif
 
-void *CRYPTO_malloc(size_t num, const char *file, int line)
+void * __cdecl CRYPTO_malloc(size_t num, const char *file, int line)
 {
     void *ret = NULL;
 
@@ -235,7 +235,7 @@ void *CRYPTO_zalloc(size_t num, const char *file, int line)
     return ret;
 }
 
-void *CRYPTO_realloc(void *str, size_t num, const char *file, int line)
+void * __cdecl CRYPTO_realloc(void *str, size_t num, const char *file, int line)
 {
     INCREMENT(realloc_count);
     if (realloc_impl != NULL && realloc_impl != &CRYPTO_realloc)
@@ -292,7 +292,7 @@ void *CRYPTO_clear_realloc(void *str, size_t old_len, size_t num,
     return ret;
 }
 
-void CRYPTO_free(void *str, const char *file, int line)
+void __cdecl CRYPTO_free(void *str, const char *file, int line)
 {
     INCREMENT(free_count);
     if (free_impl != NULL && free_impl != &CRYPTO_free) {
diff --git a/crypto/mem_clr.c b/crypto/mem_clr.c
index 35bfb74eae..b5ccbe2c32 100644
--- a/crypto/mem_clr.c
+++ b/crypto/mem_clr.c
@@ -15,7 +15,7 @@
  * the pointer and can't assume that it points to any function in
  * particular (such as memset, which it then might further "optimize")
  */
-typedef void *(*memset_t)(void *, int, size_t);
+typedef void *(__cdecl *memset_t)(void *, int, size_t);
 
 static volatile memset_t memset_func = memset;
 
diff --git a/crypto/objects/o_names.c b/crypto/objects/o_names.c
index c4355370cb..9f9d815e87 100644
--- a/crypto/objects/o_names.c
+++ b/crypto/objects/o_names.c
@@ -30,7 +30,7 @@
  * transparently assign function pointers to it.
  */
 #if defined(OPENSSL_SYS_VMS_DECC) || defined(OPENSSL_SYS_UEFI)
-static int obj_strcasecmp(const char *a, const char *b)
+static int __cdecl obj_strcasecmp(const char *a, const char *b)
 {
     return strcasecmp(a, b);
 }
@@ -48,7 +48,7 @@ static CRYPTO_RWLOCK *obj_lock = NULL;
 
 struct name_funcs_st {
     unsigned long (*hash_func) (const char *name);
-    int (*cmp_func) (const char *a, const char *b);
+    int (__cdecl *cmp_func) (const char *a, const char *b);
     void (*free_func) (const char *, int, const char *);
 };
 
@@ -61,7 +61,7 @@ static STACK_OF(NAME_FUNCS) *name_funcs_stack;
  */
 
 static unsigned long obj_name_hash(const OBJ_NAME *a);
-static int obj_name_cmp(const OBJ_NAME *a, const OBJ_NAME *b);
+static int __cdecl obj_name_cmp(const OBJ_NAME *a, const OBJ_NAME *b);
 
 static CRYPTO_ONCE init = CRYPTO_ONCE_STATIC_INIT;
 DEFINE_RUN_ONCE_STATIC(o_names_init)
@@ -79,7 +79,7 @@ int OBJ_NAME_init(void)
 }
 
 int OBJ_NAME_new_index(unsigned long (*hash_func) (const char *),
-                       int (*cmp_func) (const char *, const char *),
+                       int (__cdecl *cmp_func) (const char *, const char *),
                        void (*free_func) (const char *, int, const char *))
 {
     int ret = 0, i, push;
@@ -137,7 +137,7 @@ out:
     return ret;
 }
 
-static int obj_name_cmp(const OBJ_NAME *a, const OBJ_NAME *b)
+static int __cdecl obj_name_cmp(const OBJ_NAME *a, const OBJ_NAME *b)
 {
     int ret;
 
@@ -334,7 +334,7 @@ static void do_all_sorted_fn(const OBJ_NAME *name, void *d_)
     d->names[d->n++] = name;
 }
 
-static int do_all_sorted_cmp(const void *n1_, const void *n2_)
+static int __cdecl do_all_sorted_cmp(const void *n1_, const void *n2_)
 {
     const OBJ_NAME *const *n1 = n1_;
     const OBJ_NAME *const *n2 = n2_;
@@ -377,7 +377,7 @@ static void names_lh_free_doall(OBJ_NAME *onp)
         OBJ_NAME_remove(onp->name, onp->type);
 }
 
-static void name_funcs_free(NAME_FUNCS *ptr)
+static void __cdecl name_funcs_free(NAME_FUNCS *ptr)
 {
     OPENSSL_free(ptr);
 }
diff --git a/crypto/objects/obj_dat.c b/crypto/objects/obj_dat.c
index ef2d1e0dda..93489b2520 100644
--- a/crypto/objects/obj_dat.c
+++ b/crypto/objects/obj_dat.c
@@ -38,14 +38,14 @@ struct added_obj_st {
 static int new_nid = NUM_NID;
 static LHASH_OF(ADDED_OBJ) *added = NULL;
 
-static int sn_cmp(const ASN1_OBJECT *const *a, const unsigned int *b)
+static int __cdecl sn_cmp(const ASN1_OBJECT *const *a, const unsigned int *b)
 {
     return strcmp((*a)->sn, nid_objs[*b].sn);
 }
 
 IMPLEMENT_OBJ_BSEARCH_CMP_FN(const ASN1_OBJECT *, unsigned int, sn);
 
-static int ln_cmp(const ASN1_OBJECT *const *a, const unsigned int *b)
+static int __cdecl ln_cmp(const ASN1_OBJECT *const *a, const unsigned int *b)
 {
     return strcmp((*a)->ln, nid_objs[*b].ln);
 }
@@ -85,7 +85,7 @@ static unsigned long added_obj_hash(const ADDED_OBJ *ca)
     return ret;
 }
 
-static int added_obj_cmp(const ADDED_OBJ *ca, const ADDED_OBJ *cb)
+static int __cdecl added_obj_cmp(const ADDED_OBJ *ca, const ADDED_OBJ *cb)
 {
     ASN1_OBJECT *a, *b;
     int i;
@@ -298,7 +298,7 @@ const char *OBJ_nid2ln(int n)
     }
 }
 
-static int obj_cmp(const ASN1_OBJECT *const *ap, const unsigned int *bp)
+static int __cdecl obj_cmp(const ASN1_OBJECT *const *ap, const unsigned int *bp)
 {
     int j;
     const ASN1_OBJECT *a = *ap;
@@ -580,14 +580,14 @@ int OBJ_sn2nid(const char *s)
 }
 
 const void *OBJ_bsearch_(const void *key, const void *base, int num, int size,
-                         int (*cmp) (const void *, const void *))
+                         int (__cdecl *cmp) (const void *, const void *))
 {
     return OBJ_bsearch_ex_(key, base, num, size, cmp, 0);
 }
 
 const void *OBJ_bsearch_ex_(const void *key, const void *base_, int num,
                             int size,
-                            int (*cmp) (const void *, const void *),
+                            int (__cdecl *cmp) (const void *, const void *),
                             int flags)
 {
     const char *base = base_;
diff --git a/crypto/objects/obj_xref.c b/crypto/objects/obj_xref.c
index faf59eb20c..b9218cd74c 100644
--- a/crypto/objects/obj_xref.c
+++ b/crypto/objects/obj_xref.c
@@ -14,7 +14,7 @@
 
 static STACK_OF(nid_triple) *sig_app, *sigx_app;
 
-static int sig_cmp(const nid_triple *a, const nid_triple *b)
+static int __cdecl sig_cmp(const nid_triple *a, const nid_triple *b)
 {
     return a->sign_id - b->sign_id;
 }
@@ -22,14 +22,14 @@ static int sig_cmp(const nid_triple *a, const nid_triple *b)
 DECLARE_OBJ_BSEARCH_CMP_FN(nid_triple, nid_triple, sig);
 IMPLEMENT_OBJ_BSEARCH_CMP_FN(nid_triple, nid_triple, sig);
 
-static int sig_sk_cmp(const nid_triple *const *a, const nid_triple *const *b)
+static int __cdecl sig_sk_cmp(const nid_triple *const *a, const nid_triple *const *b)
 {
     return (*a)->sign_id - (*b)->sign_id;
 }
 
 DECLARE_OBJ_BSEARCH_CMP_FN(const nid_triple *, const nid_triple *, sigx);
 
-static int sigx_cmp(const nid_triple *const *a, const nid_triple *const *b)
+static int __cdecl sigx_cmp(const nid_triple *const *a, const nid_triple *const *b)
 {
     int ret;
     ret = (*a)->hash_id - (*b)->hash_id;
@@ -125,7 +125,7 @@ int OBJ_add_sigid(int signid, int dig_id, int pkey_id)
     return 1;
 }
 
-static void sid_free(nid_triple *tt)
+static void __cdecl sid_free(nid_triple *tt)
 {
     OPENSSL_free(tt);
 }
diff --git a/crypto/rsa/rsa_locl.h b/crypto/rsa/rsa_locl.h
index 2b94462a94..42c0219bec 100644
--- a/crypto/rsa/rsa_locl.h
+++ b/crypto/rsa/rsa_locl.h
@@ -125,8 +125,8 @@ RSA_PSS_PARAMS *rsa_pss_params_create(const EVP_MD *sigmd,
 int rsa_pss_get_param(const RSA_PSS_PARAMS *pss, const EVP_MD **pmd,
                       const EVP_MD **pmgf1md, int *psaltlen);
 /* internal function to clear and free multi-prime parameters */
-void rsa_multip_info_free_ex(RSA_PRIME_INFO *pinfo);
-void rsa_multip_info_free(RSA_PRIME_INFO *pinfo);
+void __cdecl rsa_multip_info_free_ex(RSA_PRIME_INFO *pinfo);
+void __cdecl rsa_multip_info_free(RSA_PRIME_INFO *pinfo);
 RSA_PRIME_INFO *rsa_multip_info_new(void);
 int rsa_multip_calc_product(RSA *rsa);
 int rsa_multip_cap(int bits);
diff --git a/crypto/rsa/rsa_mp.c b/crypto/rsa/rsa_mp.c
index e7e810823b..b8c7a7396c 100644
--- a/crypto/rsa/rsa_mp.c
+++ b/crypto/rsa/rsa_mp.c
@@ -12,14 +12,14 @@
 #include <openssl/err.h>
 #include "rsa_locl.h"
 
-void rsa_multip_info_free_ex(RSA_PRIME_INFO *pinfo)
+void __cdecl rsa_multip_info_free_ex(RSA_PRIME_INFO *pinfo)
 {
     /* free pp and pinfo only */
     BN_clear_free(pinfo->pp);
     OPENSSL_free(pinfo);
 }
 
-void rsa_multip_info_free(RSA_PRIME_INFO *pinfo)
+void __cdecl rsa_multip_info_free(RSA_PRIME_INFO *pinfo)
 {
     /* free a RSA_PRIME_INFO structure */
     BN_clear_free(pinfo->r);
diff --git a/crypto/sha/keccak1600.c b/crypto/sha/keccak1600.c
index 55a44023d5..9e3e805b1b 100644
--- a/crypto/sha/keccak1600.c
+++ b/crypto/sha/keccak1600.c
@@ -1146,7 +1146,7 @@ void SHA3_sponge(const unsigned char *inp, size_t len,
 
 # include <stdio.h>
 
-int main()
+int __cdecl main()
 {
     /*
      * This is 5-bit SHAKE128 test from http://csrc.nist.gov/groups/ST/toolkit/examples.html#aHashing
diff --git a/crypto/srp/srp_vfy.c b/crypto/srp/srp_vfy.c
index eb279dd418..68e177db22 100644
--- a/crypto/srp/srp_vfy.c
+++ b/crypto/srp/srp_vfy.c
@@ -173,7 +173,7 @@ static int t_tob64(char *dst, const unsigned char *src, int size)
     return 1;
 }
 
-void SRP_user_pwd_free(SRP_user_pwd *user_pwd)
+void __cdecl SRP_user_pwd_free(SRP_user_pwd *user_pwd)
 {
     if (user_pwd == NULL)
         return;
diff --git a/crypto/stack/stack.c b/crypto/stack/stack.c
index 975515db59..80248f71b0 100644
--- a/crypto/stack/stack.c
+++ b/crypto/stack/stack.c
@@ -357,7 +357,7 @@ void OPENSSL_sk_zero(OPENSSL_STACK *st)
     st->num = 0;
 }
 
-void OPENSSL_sk_pop_free(OPENSSL_STACK *st, OPENSSL_sk_freefunc func)
+void __cdecl OPENSSL_sk_pop_free(OPENSSL_STACK *st, OPENSSL_sk_freefunc func)
 {
     int i;
 
@@ -377,12 +377,12 @@ void OPENSSL_sk_free(OPENSSL_STACK *st)
     OPENSSL_free(st);
 }
 
-int OPENSSL_sk_num(const OPENSSL_STACK *st)
+int __cdecl OPENSSL_sk_num(const OPENSSL_STACK *st)
 {
     return st == NULL ? -1 : st->num;
 }
 
-void *OPENSSL_sk_value(const OPENSSL_STACK *st, int i)
+void * __cdecl OPENSSL_sk_value(const OPENSSL_STACK *st, int i)
 {
     if (st == NULL || i < 0 || i >= st->num)
         return NULL;
diff --git a/crypto/store/store_lib.c b/crypto/store/store_lib.c
index 7de2e31f55..dcd8211221 100644
--- a/crypto/store/store_lib.c
+++ b/crypto/store/store_lib.c
@@ -439,7 +439,7 @@ X509_CRL *OSSL_STORE_INFO_get1_CRL(const OSSL_STORE_INFO *info)
 /*
  * Free the OSSL_STORE_INFO
  */
-void OSSL_STORE_INFO_free(OSSL_STORE_INFO *info)
+void __cdecl OSSL_STORE_INFO_free(OSSL_STORE_INFO *info)
 {
     if (info != NULL) {
         switch (info->type) {
diff --git a/crypto/store/store_register.c b/crypto/store/store_register.c
index e68cb3c568..e141dc8bd6 100644
--- a/crypto/store/store_register.c
+++ b/crypto/store/store_register.c
@@ -134,7 +134,7 @@ static unsigned long store_loader_hash(const OSSL_STORE_LOADER *v)
     return OPENSSL_LH_strhash(v->scheme);
 }
 
-static int store_loader_cmp(const OSSL_STORE_LOADER *a,
+static int __cdecl store_loader_cmp(const OSSL_STORE_LOADER *a,
                             const OSSL_STORE_LOADER *b)
 {
     assert(a->scheme != NULL && b->scheme != NULL);
diff --git a/crypto/threads_none.c b/crypto/threads_none.c
index aabf0e0dc0..389bc13d82 100644
--- a/crypto/threads_none.c
+++ b/crypto/threads_none.c
@@ -62,7 +62,7 @@ void CRYPTO_THREAD_lock_free(CRYPTO_RWLOCK *lock) {
     return;
 }
 
-int CRYPTO_THREAD_run_once(CRYPTO_ONCE *once, void (*init)(void))
+int __cdecl CRYPTO_THREAD_run_once(CRYPTO_ONCE *once, void (*init)(void))
 {
     if (*once != 0)
         return 1;
diff --git a/crypto/threads_pthread.c b/crypto/threads_pthread.c
index 1774a2b2ac..5556ec3c5b 100644
--- a/crypto/threads_pthread.c
+++ b/crypto/threads_pthread.c
@@ -113,7 +113,7 @@ void CRYPTO_THREAD_lock_free(CRYPTO_RWLOCK *lock)
     return;
 }
 
-int CRYPTO_THREAD_run_once(CRYPTO_ONCE *once, void (*init)(void))
+int __cdecl CRYPTO_THREAD_run_once(CRYPTO_ONCE *once, void (*init)(void))
 {
     if (pthread_once(once, init) != 0)
         return 0;
diff --git a/crypto/threads_win.c b/crypto/threads_win.c
index 44a360fcab..932beb0f39 100644
--- a/crypto/threads_win.c
+++ b/crypto/threads_win.c
@@ -74,7 +74,7 @@ void CRYPTO_THREAD_lock_free(CRYPTO_RWLOCK *lock)
  * We don't use InitOnceExecuteOnce because that isn't available in WinXP which
  * we still have to support.
  */
-int CRYPTO_THREAD_run_once(CRYPTO_ONCE *once, void (*init)(void))
+int __cdecl CRYPTO_THREAD_run_once(CRYPTO_ONCE *once, void (*init)(void))
 {
     LONG volatile *lock = (LONG *)once;
     LONG result;
diff --git a/crypto/ui/ui_lib.c b/crypto/ui/ui_lib.c
index f550972d3e..a30b5d2ebe 100644
--- a/crypto/ui/ui_lib.c
+++ b/crypto/ui/ui_lib.c
@@ -49,7 +49,7 @@ UI *UI_new_method(const UI_METHOD *method)
     return ret;
 }
 
-static void free_string(UI_STRING *uis)
+static void __cdecl free_string(UI_STRING *uis)
 {
     if (uis->flags & OUT_STRING_FREEABLE) {
         OPENSSL_free((char *)uis->out_string);
diff --git a/crypto/ui/ui_openssl.c b/crypto/ui/ui_openssl.c
index 0ec9f0daf3..467e6a640f 100644
--- a/crypto/ui/ui_openssl.c
+++ b/crypto/ui/ui_openssl.c
@@ -159,7 +159,7 @@ struct IOSB {
 # ifdef SIGACTION
 static struct sigaction savsig[NX509_SIG];
 # else
-static void (*savsig[NX509_SIG]) (int);
+static void (__cdecl *savsig[NX509_SIG]) (int);
 # endif
 
 # ifdef OPENSSL_SYS_VMS
@@ -183,9 +183,9 @@ static int is_a_tty;
 /* Declare static functions */
 # if !defined(OPENSSL_SYS_WINCE)
 static int read_till_nl(FILE *);
-static void recsig(int);
-static void pushsig(void);
-static void popsig(void);
+static void __cdecl recsig(int);
+static void __cdecl pushsig(void);
+static void __cdecl popsig(void);
 # endif
 # if defined(OPENSSL_SYS_MSDOS) && !defined(_WIN32)
 static int noecho_fgets(char *buf, int size, FILE *tty);
@@ -584,7 +584,7 @@ static int close_console(UI *ui)
 
 # if !defined(OPENSSL_SYS_WINCE)
 /* Internal functions to handle signals and act on them */
-static void pushsig(void)
+static void __cdecl pushsig(void)
 {
 #  ifndef OPENSSL_SYS_WIN32
     int i;
@@ -630,7 +630,7 @@ static void pushsig(void)
 #  endif
 }
 
-static void popsig(void)
+static void __cdecl popsig(void)
 {
 #  ifdef OPENSSL_SYS_WIN32
     signal(SIGABRT, savsig[SIGABRT]);
@@ -659,7 +659,7 @@ static void popsig(void)
 #  endif
 }
 
-static void recsig(int i)
+static void __cdecl recsig(int i)
 {
     intr_signal = i;
 }
diff --git a/crypto/x509/by_dir.c b/crypto/x509/by_dir.c
index b691a83a0d..0070026868 100644
--- a/crypto/x509/by_dir.c
+++ b/crypto/x509/by_dir.c
@@ -118,12 +118,12 @@ static int new_dir(X509_LOOKUP *lu)
     return 0;
 }
 
-static void by_dir_hash_free(BY_DIR_HASH *hash)
+static void __cdecl by_dir_hash_free(BY_DIR_HASH *hash)
 {
     OPENSSL_free(hash);
 }
 
-static int by_dir_hash_cmp(const BY_DIR_HASH *const *a,
+static int __cdecl by_dir_hash_cmp(const BY_DIR_HASH *const *a,
                            const BY_DIR_HASH *const *b)
 {
     if ((*a)->hash > (*b)->hash)
@@ -133,7 +133,7 @@ static int by_dir_hash_cmp(const BY_DIR_HASH *const *a,
     return 0;
 }
 
-static void by_dir_entry_free(BY_DIR_ENTRY *ent)
+static void __cdecl by_dir_entry_free(BY_DIR_ENTRY *ent)
 {
     OPENSSL_free(ent->dir);
     sk_BY_DIR_HASH_pop_free(ent->hashes, by_dir_hash_free);
diff --git a/crypto/x509/x509_lu.c b/crypto/x509/x509_lu.c
index b7d2e66574..9c5b36cabc 100644
--- a/crypto/x509/x509_lu.c
+++ b/crypto/x509/x509_lu.c
@@ -135,7 +135,7 @@ X509_STORE *X509_LOOKUP_get_store(const X509_LOOKUP *ctx)
 }
 
 
-static int x509_object_cmp(const X509_OBJECT *const *a,
+static int __cdecl x509_object_cmp(const X509_OBJECT *const *a,
                            const X509_OBJECT *const *b)
 {
     int ret;
@@ -465,7 +465,7 @@ int X509_OBJECT_set1_X509_CRL(X509_OBJECT *a, X509_CRL *obj)
     return 1;
 }
 
-void X509_OBJECT_free(X509_OBJECT *a)
+void __cdecl X509_OBJECT_free(X509_OBJECT *a)
 {
     x509_object_free_internal(a);
     OPENSSL_free(a);
diff --git a/crypto/x509/x509_trs.c b/crypto/x509/x509_trs.c
index d749af4d59..7ca429180f 100644
--- a/crypto/x509/x509_trs.c
+++ b/crypto/x509/x509_trs.c
@@ -12,8 +12,8 @@
 #include <openssl/x509v3.h>
 #include "internal/x509_int.h"
 
-static int tr_cmp(const X509_TRUST *const *a, const X509_TRUST *const *b);
-static void trtable_free(X509_TRUST *p);
+static int __cdecl tr_cmp(const X509_TRUST *const *a, const X509_TRUST *const *b);
+static void __cdecl trtable_free(X509_TRUST *p);
 
 static int trust_1oidany(X509_TRUST *trust, X509 *x, int flags);
 static int trust_1oid(X509_TRUST *trust, X509 *x, int flags);
@@ -49,7 +49,7 @@ static X509_TRUST trstandard[] = {
 
 static STACK_OF(X509_TRUST) *trtable = NULL;
 
-static int tr_cmp(const X509_TRUST *const *a, const X509_TRUST *const *b)
+static int __cdecl tr_cmp(const X509_TRUST *const *a, const X509_TRUST *const *b)
 {
     return (*a)->trust - (*b)->trust;
 }
@@ -182,7 +182,7 @@ int X509_TRUST_add(int id, int flags, int (*ck) (X509_TRUST *, X509 *, int),
     return 0;
 }
 
-static void trtable_free(X509_TRUST *p)
+static void __cdecl trtable_free(X509_TRUST *p)
 {
     if (!p)
         return;
diff --git a/crypto/x509/x509_vpm.c b/crypto/x509/x509_vpm.c
index aea186295c..2a354ce00c 100644
--- a/crypto/x509/x509_vpm.c
+++ b/crypto/x509/x509_vpm.c
@@ -23,12 +23,12 @@
 #define SET_HOST 0
 #define ADD_HOST 1
 
-static char *str_copy(const char *s)
+static char * __cdecl str_copy(const char *s)
 {
     return OPENSSL_strdup(s);
 }
 
-static void str_free(char *s)
+static void __cdecl str_free(char *s)
 {
     OPENSSL_free(s);
 }
@@ -95,7 +95,7 @@ X509_VERIFY_PARAM *X509_VERIFY_PARAM_new(void)
     return param;
 }
 
-void X509_VERIFY_PARAM_free(X509_VERIFY_PARAM *param)
+void __cdecl X509_VERIFY_PARAM_free(X509_VERIFY_PARAM *param)
 {
     if (param == NULL)
         return;
@@ -531,7 +531,7 @@ static const X509_VERIFY_PARAM default_table[] = {
 
 static STACK_OF(X509_VERIFY_PARAM) *param_table = NULL;
 
-static int table_cmp(const X509_VERIFY_PARAM *a, const X509_VERIFY_PARAM *b)
+static int __cdecl table_cmp(const X509_VERIFY_PARAM *a, const X509_VERIFY_PARAM *b)
 {
     return strcmp(a->name, b->name);
 }
@@ -539,7 +539,7 @@ static int table_cmp(const X509_VERIFY_PARAM *a, const X509_VERIFY_PARAM *b)
 DECLARE_OBJ_BSEARCH_CMP_FN(X509_VERIFY_PARAM, X509_VERIFY_PARAM, table);
 IMPLEMENT_OBJ_BSEARCH_CMP_FN(X509_VERIFY_PARAM, X509_VERIFY_PARAM, table);
 
-static int param_cmp(const X509_VERIFY_PARAM *const *a,
+static int __cdecl param_cmp(const X509_VERIFY_PARAM *const *a,
                      const X509_VERIFY_PARAM *const *b)
 {
     return strcmp((*a)->name, (*b)->name);
diff --git a/crypto/x509/x_crl.c b/crypto/x509/x_crl.c
index 12ab3cca42..c830de507c 100644
--- a/crypto/x509/x_crl.c
+++ b/crypto/x509/x_crl.c
@@ -15,7 +15,7 @@
 #include <openssl/x509v3.h>
 #include "x509_lcl.h"
 
-static int X509_REVOKED_cmp(const X509_REVOKED *const *a,
+static int __cdecl X509_REVOKED_cmp(const X509_REVOKED *const *a,
                             const X509_REVOKED *const *b);
 static void setup_idp(X509_CRL *crl, ISSUING_DIST_POINT *idp);
 
@@ -311,7 +311,7 @@ IMPLEMENT_ASN1_FUNCTIONS(X509_CRL)
 
 IMPLEMENT_ASN1_DUP_FUNCTION(X509_CRL)
 
-static int X509_REVOKED_cmp(const X509_REVOKED *const *a,
+static int __cdecl X509_REVOKED_cmp(const X509_REVOKED *const *a,
                             const X509_REVOKED *const *b)
 {
     return (ASN1_STRING_cmp((ASN1_STRING *)&(*a)->serialNumber,
diff --git a/crypto/x509/x_name.c b/crypto/x509/x_name.c
index a1e9bbdb66..e8c1ef76b3 100644
--- a/crypto/x509/x_name.c
+++ b/crypto/x509/x_name.c
@@ -125,12 +125,12 @@ static void x509_name_ex_free(ASN1_VALUE **pval, const ASN1_ITEM *it)
     *pval = NULL;
 }
 
-static void local_sk_X509_NAME_ENTRY_free(STACK_OF(X509_NAME_ENTRY) *ne)
+static void __cdecl local_sk_X509_NAME_ENTRY_free(STACK_OF(X509_NAME_ENTRY) *ne)
 {
     sk_X509_NAME_ENTRY_free(ne);
 }
 
-static void local_sk_X509_NAME_ENTRY_pop_free(STACK_OF(X509_NAME_ENTRY) *ne)
+static void __cdecl local_sk_X509_NAME_ENTRY_pop_free(STACK_OF(X509_NAME_ENTRY) *ne)
 {
     sk_X509_NAME_ENTRY_pop_free(ne, X509_NAME_ENTRY_free);
 }
diff --git a/crypto/x509/x_pubkey.c b/crypto/x509/x_pubkey.c
index 1c87b8268e..20e4f645cf 100644
--- a/crypto/x509/x_pubkey.c
+++ b/crypto/x509/x_pubkey.c
@@ -200,7 +200,7 @@ EVP_PKEY *d2i_PUBKEY(EVP_PKEY **a, const unsigned char **pp, long length)
     return pktmp;
 }
 
-int i2d_PUBKEY(EVP_PKEY *a, unsigned char **pp)
+int __cdecl i2d_PUBKEY(EVP_PKEY *a, unsigned char **pp)
 {
     X509_PUBKEY *xpk = NULL;
     int ret;
@@ -238,7 +238,7 @@ RSA *d2i_RSA_PUBKEY(RSA **a, const unsigned char **pp, long length)
     return key;
 }
 
-int i2d_RSA_PUBKEY(RSA *a, unsigned char **pp)
+int __cdecl i2d_RSA_PUBKEY(RSA *a, unsigned char **pp)
 {
     EVP_PKEY *pktmp;
     int ret;
@@ -278,7 +278,7 @@ DSA *d2i_DSA_PUBKEY(DSA **a, const unsigned char **pp, long length)
     return key;
 }
 
-int i2d_DSA_PUBKEY(DSA *a, unsigned char **pp)
+int __cdecl i2d_DSA_PUBKEY(DSA *a, unsigned char **pp)
 {
     EVP_PKEY *pktmp;
     int ret;
@@ -318,7 +318,7 @@ EC_KEY *d2i_EC_PUBKEY(EC_KEY **a, const unsigned char **pp, long length)
     return key;
 }
 
-int i2d_EC_PUBKEY(EC_KEY *a, unsigned char **pp)
+int __cdecl i2d_EC_PUBKEY(EC_KEY *a, unsigned char **pp)
 {
     EVP_PKEY *pktmp;
     int ret;
diff --git a/crypto/x509/x_x509.c b/crypto/x509/x_x509.c
index afe59c46c5..907db97c51 100644
--- a/crypto/x509/x_x509.c
+++ b/crypto/x509/x_x509.c
@@ -197,7 +197,7 @@ static int i2d_x509_aux_internal(X509 *a, unsigned char **pp)
  * the allocation, nor can we allow i2d_X509_CERT_AUX() to increment the
  * allocated buffer.
  */
-int i2d_X509_AUX(X509 *a, unsigned char **pp)
+int __cdecl i2d_X509_AUX(X509 *a, unsigned char **pp)
 {
     int length;
     unsigned char *tmp;
diff --git a/crypto/x509v3/pcy_cache.c b/crypto/x509v3/pcy_cache.c
index 623870b1f6..42194005c7 100644
--- a/crypto/x509v3/pcy_cache.c
+++ b/crypto/x509v3/pcy_cache.c
@@ -14,7 +14,7 @@
 
 #include "pcy_int.h"
 
-static int policy_data_cmp(const X509_POLICY_DATA *const *a,
+static int __cdecl policy_data_cmp(const X509_POLICY_DATA *const *a,
                            const X509_POLICY_DATA *const *b);
 static int policy_cache_set_int(long *out, ASN1_INTEGER *value);
 
@@ -207,7 +207,7 @@ X509_POLICY_DATA *policy_cache_find_data(const X509_POLICY_CACHE *cache,
     return sk_X509_POLICY_DATA_value(cache->data, idx);
 }
 
-static int policy_data_cmp(const X509_POLICY_DATA *const *a,
+static int __cdecl policy_data_cmp(const X509_POLICY_DATA *const *a,
                            const X509_POLICY_DATA *const *b)
 {
     return OBJ_cmp((*a)->valid_policy, (*b)->valid_policy);
diff --git a/crypto/x509v3/pcy_data.c b/crypto/x509v3/pcy_data.c
index bd3bb0e40d..1ce8f6ce77 100644
--- a/crypto/x509v3/pcy_data.c
+++ b/crypto/x509v3/pcy_data.c
@@ -15,7 +15,7 @@
 
 /* Policy Node routines */
 
-void policy_data_free(X509_POLICY_DATA *data)
+void __cdecl policy_data_free(X509_POLICY_DATA *data)
 {
     if (data == NULL)
         return;
diff --git a/crypto/x509v3/pcy_int.h b/crypto/x509v3/pcy_int.h
index 5daf78de45..8f16cd61a3 100644
--- a/crypto/x509v3/pcy_int.h
+++ b/crypto/x509v3/pcy_int.h
@@ -137,7 +137,7 @@ struct X509_POLICY_TREE_st {
 
 X509_POLICY_DATA *policy_data_new(POLICYINFO *policy, const ASN1_OBJECT *id,
                                   int crit);
-void policy_data_free(X509_POLICY_DATA *data);
+void __cdecl policy_data_free(X509_POLICY_DATA *data);
 
 X509_POLICY_DATA *policy_cache_find_data(const X509_POLICY_CACHE *cache,
                                          const ASN1_OBJECT *id);
@@ -160,7 +160,7 @@ X509_POLICY_NODE *level_add_node(X509_POLICY_LEVEL *level,
                                  X509_POLICY_DATA *data,
                                  X509_POLICY_NODE *parent,
                                  X509_POLICY_TREE *tree);
-void policy_node_free(X509_POLICY_NODE *node);
+void __cdecl policy_node_free(X509_POLICY_NODE *node);
 int policy_node_match(const X509_POLICY_LEVEL *lvl,
                       const X509_POLICY_NODE *node, const ASN1_OBJECT *oid);
 
diff --git a/crypto/x509v3/pcy_node.c b/crypto/x509v3/pcy_node.c
index 1ffe98498b..f43bf9b52a 100644
--- a/crypto/x509v3/pcy_node.c
+++ b/crypto/x509v3/pcy_node.c
@@ -14,7 +14,7 @@
 
 #include "pcy_int.h"
 
-static int node_cmp(const X509_POLICY_NODE *const *a,
+static int __cdecl node_cmp(const X509_POLICY_NODE *const *a,
                     const X509_POLICY_NODE *const *b)
 {
     return OBJ_cmp((*a)->data->valid_policy, (*b)->data->valid_policy);
@@ -113,7 +113,7 @@ X509_POLICY_NODE *level_add_node(X509_POLICY_LEVEL *level,
     return NULL;
 }
 
-void policy_node_free(X509_POLICY_NODE *node)
+void __cdecl policy_node_free(X509_POLICY_NODE *node)
 {
     OPENSSL_free(node);
 }
diff --git a/crypto/x509v3/pcy_tree.c b/crypto/x509v3/pcy_tree.c
index 87f51d001b..676c2ccc79 100644
--- a/crypto/x509v3/pcy_tree.c
+++ b/crypto/x509v3/pcy_tree.c
@@ -598,7 +598,7 @@ static int tree_evaluate(X509_POLICY_TREE *tree)
     return X509_PCY_TREE_VALID;
 }
 
-static void exnode_free(X509_POLICY_NODE *node)
+static void __cdecl exnode_free(X509_POLICY_NODE *node)
 {
     if (node->data && (node->data->flags & POLICY_DATA_FLAG_EXTRA_NODE))
         OPENSSL_free(node);
diff --git a/crypto/x509v3/v3_addr.c b/crypto/x509v3/v3_addr.c
index bb58e04846..b6fceb2779 100644
--- a/crypto/x509v3/v3_addr.c
+++ b/crypto/x509v3/v3_addr.c
@@ -316,7 +316,7 @@ static int IPAddressOrRange_cmp(const IPAddressOrRange *a,
  * IPv4-specific closure over IPAddressOrRange_cmp, since sk_sort()
  * comparison routines are only allowed two arguments.
  */
-static int v4IPAddressOrRange_cmp(const IPAddressOrRange *const *a,
+static int __cdecl v4IPAddressOrRange_cmp(const IPAddressOrRange *const *a,
                                   const IPAddressOrRange *const *b)
 {
     return IPAddressOrRange_cmp(*a, *b, 4);
@@ -326,7 +326,7 @@ static int v4IPAddressOrRange_cmp(const IPAddressOrRange *const *a,
  * IPv6-specific closure over IPAddressOrRange_cmp, since sk_sort()
  * comparison routines are only allowed two arguments.
  */
-static int v6IPAddressOrRange_cmp(const IPAddressOrRange *const *a,
+static int __cdecl v6IPAddressOrRange_cmp(const IPAddressOrRange *const *a,
                                   const IPAddressOrRange *const *b)
 {
     return IPAddressOrRange_cmp(*a, *b, 16);
@@ -666,7 +666,7 @@ int X509v3_addr_get_range(IPAddressOrRange *aor,
  * null-SAFI rule to apply only within a single AFI, which is what I
  * would have expected and is what the following code implements.
  */
-static int IPAddressFamily_cmp(const IPAddressFamily *const *a_,
+static int __cdecl IPAddressFamily_cmp(const IPAddressFamily *const *a_,
                                const IPAddressFamily *const *b_)
 {
     const ASN1_OCTET_STRING *a = (*a_)->addressFamily;
diff --git a/crypto/x509v3/v3_asid.c b/crypto/x509v3/v3_asid.c
index 089f2ae29f..3bc9762a64 100644
--- a/crypto/x509v3/v3_asid.c
+++ b/crypto/x509v3/v3_asid.c
@@ -119,7 +119,7 @@ static int i2r_ASIdentifiers(const X509V3_EXT_METHOD *method,
 /*
  * Sort comparison function for a sequence of ASIdOrRange elements.
  */
-static int ASIdOrRange_cmp(const ASIdOrRange *const *a_,
+static int __cdecl ASIdOrRange_cmp(const ASIdOrRange *const *a_,
                            const ASIdOrRange *const *b_)
 {
     const ASIdOrRange *a = *a_, *b = *b_;
diff --git a/crypto/x509v3/v3_lib.c b/crypto/x509v3/v3_lib.c
index 97c1cbc20f..eadec5615d 100644
--- a/crypto/x509v3/v3_lib.c
+++ b/crypto/x509v3/v3_lib.c
@@ -18,9 +18,9 @@
 
 static STACK_OF(X509V3_EXT_METHOD) *ext_list = NULL;
 
-static int ext_cmp(const X509V3_EXT_METHOD *const *a,
+static int __cdecl ext_cmp(const X509V3_EXT_METHOD *const *a,
                    const X509V3_EXT_METHOD *const *b);
-static void ext_list_free(X509V3_EXT_METHOD *ext);
+static void __cdecl ext_list_free(X509V3_EXT_METHOD *ext);
 
 int X509V3_EXT_add(X509V3_EXT_METHOD *ext)
 {
@@ -36,7 +36,7 @@ int X509V3_EXT_add(X509V3_EXT_METHOD *ext)
     return 1;
 }
 
-static int ext_cmp(const X509V3_EXT_METHOD *const *a,
+static int __cdecl ext_cmp(const X509V3_EXT_METHOD *const *a,
                    const X509V3_EXT_METHOD *const *b)
 {
     return ((*a)->ext_nid - (*b)->ext_nid);
@@ -108,7 +108,7 @@ void X509V3_EXT_cleanup(void)
     ext_list = NULL;
 }
 
-static void ext_list_free(X509V3_EXT_METHOD *ext)
+static void __cdecl ext_list_free(X509V3_EXT_METHOD *ext)
 {
     if (ext->ext_flags & X509V3_EXT_DYNAMIC)
         OPENSSL_free(ext);
diff --git a/crypto/x509v3/v3_purp.c b/crypto/x509v3/v3_purp.c
index 2f06289d19..0f5b865f71 100644
--- a/crypto/x509v3/v3_purp.c
+++ b/crypto/x509v3/v3_purp.c
@@ -36,8 +36,8 @@ static int check_purpose_timestamp_sign(const X509_PURPOSE *xp, const X509 *x,
 static int no_check(const X509_PURPOSE *xp, const X509 *x, int ca);
 static int ocsp_helper(const X509_PURPOSE *xp, const X509 *x, int ca);
 
-static int xp_cmp(const X509_PURPOSE *const *a, const X509_PURPOSE *const *b);
-static void xptable_free(X509_PURPOSE *p);
+static int __cdecl xp_cmp(const X509_PURPOSE *const *a, const X509_PURPOSE *const *b);
+static void __cdecl xptable_free(X509_PURPOSE *p);
 
 static X509_PURPOSE xstandard[] = {
     {X509_PURPOSE_SSL_CLIENT, X509_TRUST_SSL_CLIENT, 0,
@@ -65,7 +65,7 @@ static X509_PURPOSE xstandard[] = {
 
 static STACK_OF(X509_PURPOSE) *xptable = NULL;
 
-static int xp_cmp(const X509_PURPOSE *const *a, const X509_PURPOSE *const *b)
+static int __cdecl xp_cmp(const X509_PURPOSE *const *a, const X509_PURPOSE *const *b)
 {
     return (*a)->purpose - (*b)->purpose;
 }
@@ -214,7 +214,7 @@ int X509_PURPOSE_add(int id, int trust, int flags,
     return 0;
 }
 
-static void xptable_free(X509_PURPOSE *p)
+static void __cdecl xptable_free(X509_PURPOSE *p)
 {
     if (!p)
         return;
@@ -253,7 +253,7 @@ int X509_PURPOSE_get_trust(const X509_PURPOSE *xp)
     return xp->trust;
 }
 
-static int nid_cmp(const int *a, const int *b)
+static int __cdecl nid_cmp(const int *a, const int *b)
 {
     return *a - *b;
 }
diff --git a/crypto/x509v3/v3_utl.c b/crypto/x509v3/v3_utl.c
index c9b40d2c76..d051a495d2 100644
--- a/crypto/x509v3/v3_utl.c
+++ b/crypto/x509v3/v3_utl.c
@@ -21,10 +21,10 @@
 #include "ext_dat.h"
 
 static char *strip_spaces(char *name);
-static int sk_strcmp(const char *const *a, const char *const *b);
+static int __cdecl sk_strcmp(const char *const *a, const char *const *b);
 static STACK_OF(OPENSSL_STRING) *get_email(X509_NAME *name,
                                            GENERAL_NAMES *gens);
-static void str_free(OPENSSL_STRING str);
+static void __cdecl str_free(OPENSSL_STRING str);
 static int append_ia5(STACK_OF(OPENSSL_STRING) **sk, const ASN1_IA5STRING *email);
 
 static int ipv4_from_asc(unsigned char *v4, const char *in);
@@ -75,7 +75,7 @@ int X509V3_add_value_uchar(const char *name, const unsigned char *value,
 
 /* Free function for STACK_OF(CONF_VALUE) */
 
-void X509V3_conf_free(CONF_VALUE *conf)
+void __cdecl X509V3_conf_free(CONF_VALUE *conf)
 {
     if (!conf)
         return;
@@ -410,7 +410,7 @@ int name_cmp(const char *name, const char *cmp)
     return 1;
 }
 
-static int sk_strcmp(const char *const *a, const char *const *b)
+static int __cdecl sk_strcmp(const char *const *a, const char *const *b)
 {
     return strcmp(*a, *b);
 }
@@ -491,7 +491,7 @@ static STACK_OF(OPENSSL_STRING) *get_email(X509_NAME *name,
     return ret;
 }
 
-static void str_free(OPENSSL_STRING str)
+static void __cdecl str_free(OPENSSL_STRING str)
 {
     OPENSSL_free(str);
 }
diff --git a/demos/bio/client-arg.c b/demos/bio/client-arg.c
index e8d5e46ab5..64da8b8d55 100644
--- a/demos/bio/client-arg.c
+++ b/demos/bio/client-arg.c
@@ -11,7 +11,7 @@
 #include <openssl/err.h>
 #include <openssl/ssl.h>
 
-int main(int argc, char **argv)
+int __cdecl main(int argc, char **argv)
 {
     BIO *sbio = NULL, *out = NULL;
     int len;
diff --git a/demos/bio/client-conf.c b/demos/bio/client-conf.c
index e819030eec..223f1ca7d8 100644
--- a/demos/bio/client-conf.c
+++ b/demos/bio/client-conf.c
@@ -12,7 +12,7 @@
 #include <openssl/ssl.h>
 #include <openssl/conf.h>
 
-int main(int argc, char **argv)
+int __cdecl main(int argc, char **argv)
 {
     BIO *sbio = NULL, *out = NULL;
     int i, len, rv;
diff --git a/demos/bio/saccept.c b/demos/bio/saccept.c
index de86ae6322..5bd262f50d 100644
--- a/demos/bio/saccept.c
+++ b/demos/bio/saccept.c
@@ -45,7 +45,7 @@ void sigsetup(void)
     sigaction(SIGINT, &sa, NULL);
 }
 
-int main(int argc, char *argv[])
+int __cdecl main(int argc, char *argv[])
 {
     char *port = NULL;
     BIO *in = NULL;
diff --git a/demos/bio/sconnect.c b/demos/bio/sconnect.c
index db71f29afe..3a377a9399 100644
--- a/demos/bio/sconnect.c
+++ b/demos/bio/sconnect.c
@@ -25,7 +25,7 @@
 #define HOSTPORT "localhost:4433"
 #define CAFILE "root.pem"
 
-int main(int argc, char *argv[])
+int __cdecl main(int argc, char *argv[])
 {
     const char *hostport = HOSTPORT;
     const char *CAfile = CAFILE;
diff --git a/demos/bio/server-arg.c b/demos/bio/server-arg.c
index d80d070f7a..9f079641b6 100644
--- a/demos/bio/server-arg.c
+++ b/demos/bio/server-arg.c
@@ -20,7 +20,7 @@
 #include <openssl/err.h>
 #include <openssl/ssl.h>
 
-int main(int argc, char *argv[])
+int __cdecl main(int argc, char *argv[])
 {
     char *port = "*:4433";
     BIO *ssl_bio, *tmp;
diff --git a/demos/bio/server-cmod.c b/demos/bio/server-cmod.c
index f1079ad329..caf3f18340 100644
--- a/demos/bio/server-cmod.c
+++ b/demos/bio/server-cmod.c
@@ -19,7 +19,7 @@
 #include <openssl/ssl.h>
 #include <openssl/conf.h>
 
-int main(int argc, char *argv[])
+int __cdecl main(int argc, char *argv[])
 {
     unsigned char buf[512];
     char *port = "*:4433";
diff --git a/demos/bio/server-conf.c b/demos/bio/server-conf.c
index 4d1655bfc9..f2a0773e52 100644
--- a/demos/bio/server-conf.c
+++ b/demos/bio/server-conf.c
@@ -21,7 +21,7 @@
 #include <openssl/ssl.h>
 #include <openssl/conf.h>
 
-int main(int argc, char *argv[])
+int __cdecl main(int argc, char *argv[])
 {
     char *port = "*:4433";
     BIO *in = NULL;
diff --git a/demos/cms/cms_comp.c b/demos/cms/cms_comp.c
index 0d548f93ca..d11002dd80 100644
--- a/demos/cms/cms_comp.c
+++ b/demos/cms/cms_comp.c
@@ -12,7 +12,7 @@
 #include <openssl/cms.h>
 #include <openssl/err.h>
 
-int main(int argc, char **argv)
+int __cdecl main(int argc, char **argv)
 {
     BIO *in = NULL, *out = NULL;
     CMS_ContentInfo *cms = NULL;
diff --git a/demos/cms/cms_ddec.c b/demos/cms/cms_ddec.c
index 8f2e9aecb2..04e8e519f0 100644
--- a/demos/cms/cms_ddec.c
+++ b/demos/cms/cms_ddec.c
@@ -15,7 +15,7 @@
 #include <openssl/cms.h>
 #include <openssl/err.h>
 
-int main(int argc, char **argv)
+int __cdecl main(int argc, char **argv)
 {
     BIO *in = NULL, *out = NULL, *tbio = NULL, *dcont = NULL;
     X509 *rcert = NULL;
diff --git a/demos/cms/cms_dec.c b/demos/cms/cms_dec.c
index 4f9428b4e7..09bd72a002 100644
--- a/demos/cms/cms_dec.c
+++ b/demos/cms/cms_dec.c
@@ -12,7 +12,7 @@
 #include <openssl/cms.h>
 #include <openssl/err.h>
 
-int main(int argc, char **argv)
+int __cdecl main(int argc, char **argv)
 {
     BIO *in = NULL, *out = NULL, *tbio = NULL;
     X509 *rcert = NULL;
diff --git a/demos/cms/cms_denc.c b/demos/cms/cms_denc.c
index adba69b96d..62a73c390a 100644
--- a/demos/cms/cms_denc.c
+++ b/demos/cms/cms_denc.c
@@ -15,7 +15,7 @@
 #include <openssl/cms.h>
 #include <openssl/err.h>
 
-int main(int argc, char **argv)
+int __cdecl main(int argc, char **argv)
 {
     BIO *in = NULL, *out = NULL, *tbio = NULL, *dout = NULL;
     X509 *rcert = NULL;
diff --git a/demos/cms/cms_enc.c b/demos/cms/cms_enc.c
index 4d17d720c6..d9205aa679 100644
--- a/demos/cms/cms_enc.c
+++ b/demos/cms/cms_enc.c
@@ -12,7 +12,7 @@
 #include <openssl/cms.h>
 #include <openssl/err.h>
 
-int main(int argc, char **argv)
+int __cdecl main(int argc, char **argv)
 {
     BIO *in = NULL, *out = NULL, *tbio = NULL;
     X509 *rcert = NULL;
diff --git a/demos/cms/cms_sign.c b/demos/cms/cms_sign.c
index 15bd5b8dd9..8e1a1e2d98 100644
--- a/demos/cms/cms_sign.c
+++ b/demos/cms/cms_sign.c
@@ -12,7 +12,7 @@
 #include <openssl/cms.h>
 #include <openssl/err.h>
 
-int main(int argc, char **argv)
+int __cdecl main(int argc, char **argv)
 {
     BIO *in = NULL, *out = NULL, *tbio = NULL;
     X509 *scert = NULL;
diff --git a/demos/cms/cms_sign2.c b/demos/cms/cms_sign2.c
index 14ebf27775..e288b4b2cf 100644
--- a/demos/cms/cms_sign2.c
+++ b/demos/cms/cms_sign2.c
@@ -12,7 +12,7 @@
 #include <openssl/cms.h>
 #include <openssl/err.h>
 
-int main(int argc, char **argv)
+int __cdecl main(int argc, char **argv)
 {
     BIO *in = NULL, *out = NULL, *tbio = NULL;
     X509 *scert = NULL, *scert2 = NULL;
diff --git a/demos/cms/cms_uncomp.c b/demos/cms/cms_uncomp.c
index 3e3b4c4c6e..4251a09a77 100644
--- a/demos/cms/cms_uncomp.c
+++ b/demos/cms/cms_uncomp.c
@@ -12,7 +12,7 @@
 #include <openssl/cms.h>
 #include <openssl/err.h>
 
-int main(int argc, char **argv)
+int __cdecl main(int argc, char **argv)
 {
     BIO *in = NULL, *out = NULL;
     CMS_ContentInfo *cms = NULL;
diff --git a/demos/cms/cms_ver.c b/demos/cms/cms_ver.c
index 43c10e2513..b6d62a108a 100644
--- a/demos/cms/cms_ver.c
+++ b/demos/cms/cms_ver.c
@@ -12,7 +12,7 @@
 #include <openssl/cms.h>
 #include <openssl/err.h>
 
-int main(int argc, char **argv)
+int __cdecl main(int argc, char **argv)
 {
     BIO *in = NULL, *out = NULL, *tbio = NULL, *cont = NULL;
     X509_STORE *st = NULL;
diff --git a/demos/evp/aesccm.c b/demos/evp/aesccm.c
index cc4d0b5ee9..e06181d761 100644
--- a/demos/evp/aesccm.c
+++ b/demos/evp/aesccm.c
@@ -118,7 +118,7 @@ void aes_ccm_decrypt(void)
     EVP_CIPHER_CTX_free(ctx);
 }
 
-int main(int argc, char **argv)
+int __cdecl main(int argc, char **argv)
 {
     aes_ccm_encrypt();
     aes_ccm_decrypt();
diff --git a/demos/evp/aesgcm.c b/demos/evp/aesgcm.c
index 3cef27f991..420384af91 100644
--- a/demos/evp/aesgcm.c
+++ b/demos/evp/aesgcm.c
@@ -114,7 +114,7 @@ void aes_gcm_decrypt(void)
     EVP_CIPHER_CTX_free(ctx);
 }
 
-int main(int argc, char **argv)
+int __cdecl main(int argc, char **argv)
 {
     aes_gcm_encrypt();
     aes_gcm_decrypt();
diff --git a/demos/pkcs12/pkread.c b/demos/pkcs12/pkread.c
index e5f78f1b35..495bb16402 100644
--- a/demos/pkcs12/pkread.c
+++ b/demos/pkcs12/pkread.c
@@ -45,7 +45,7 @@ static char *find_friendly_name(PKCS12 *p12)
     return name;
 }
 
-int main(int argc, char **argv)
+int __cdecl main(int argc, char **argv)
 {
     FILE *fp;
     EVP_PKEY *pkey = NULL;
diff --git a/demos/pkcs12/pkwrite.c b/demos/pkcs12/pkwrite.c
index e14cf8327d..6fa4b99735 100644
--- a/demos/pkcs12/pkwrite.c
+++ b/demos/pkcs12/pkwrite.c
@@ -15,7 +15,7 @@
 
 /* Simple PKCS#12 file creator */
 
-int main(int argc, char **argv)
+int __cdecl main(int argc, char **argv)
 {
     FILE *fp;
     EVP_PKEY *pkey;
diff --git a/demos/smime/smdec.c b/demos/smime/smdec.c
index c4d1b090d9..3238f5bed5 100644
--- a/demos/smime/smdec.c
+++ b/demos/smime/smdec.c
@@ -12,7 +12,7 @@
 #include <openssl/pkcs7.h>
 #include <openssl/err.h>
 
-int main(int argc, char **argv)
+int __cdecl main(int argc, char **argv)
 {
     BIO *in = NULL, *out = NULL, *tbio = NULL;
     X509 *rcert = NULL;
diff --git a/demos/smime/smenc.c b/demos/smime/smenc.c
index 5d36e9a497..ec8107f7f8 100644
--- a/demos/smime/smenc.c
+++ b/demos/smime/smenc.c
@@ -12,7 +12,7 @@
 #include <openssl/pkcs7.h>
 #include <openssl/err.h>
 
-int main(int argc, char **argv)
+int __cdecl main(int argc, char **argv)
 {
     BIO *in = NULL, *out = NULL, *tbio = NULL;
     X509 *rcert = NULL;
diff --git a/demos/smime/smsign.c b/demos/smime/smsign.c
index ba0adb3974..3ccccfe2bb 100644
--- a/demos/smime/smsign.c
+++ b/demos/smime/smsign.c
@@ -12,7 +12,7 @@
 #include <openssl/pkcs7.h>
 #include <openssl/err.h>
 
-int main(int argc, char **argv)
+int __cdecl main(int argc, char **argv)
 {
     BIO *in = NULL, *out = NULL, *tbio = NULL;
     X509 *scert = NULL;
diff --git a/demos/smime/smsign2.c b/demos/smime/smsign2.c
index 2b7f45b294..80f8e3b518 100644
--- a/demos/smime/smsign2.c
+++ b/demos/smime/smsign2.c
@@ -12,7 +12,7 @@
 #include <openssl/pkcs7.h>
 #include <openssl/err.h>
 
-int main(int argc, char **argv)
+int __cdecl main(int argc, char **argv)
 {
     BIO *in = NULL, *out = NULL, *tbio = NULL;
     X509 *scert = NULL, *scert2 = NULL;
diff --git a/demos/smime/smver.c b/demos/smime/smver.c
index 75411c40d0..01cd21813f 100644
--- a/demos/smime/smver.c
+++ b/demos/smime/smver.c
@@ -12,7 +12,7 @@
 #include <openssl/pkcs7.h>
 #include <openssl/err.h>
 
-int main(int argc, char **argv)
+int __cdecl main(int argc, char **argv)
 {
     BIO *in = NULL, *out = NULL, *tbio = NULL, *cont = NULL;
     X509_STORE *st = NULL;
diff --git a/doc/man3/ASYNC_start_job.pod b/doc/man3/ASYNC_start_job.pod
index b06db76708..7aa6cac37e 100644
--- a/doc/man3/ASYNC_start_job.pod
+++ b/doc/man3/ASYNC_start_job.pod
@@ -244,7 +244,7 @@ The following example demonstrates how to use most of the core async APIs:
      return 1;
  }
 
- int main(void)
+ int __cdecl main(void)
  {
      ASYNC_JOB *job = NULL;
      ASYNC_WAIT_CTX *ctx = NULL;
diff --git a/doc/man3/EVP_DigestInit.pod b/doc/man3/EVP_DigestInit.pod
index 3e3e342297..bf10d3bb6f 100644
--- a/doc/man3/EVP_DigestInit.pod
+++ b/doc/man3/EVP_DigestInit.pod
@@ -313,7 +313,7 @@ digest name passed on the command line.
  #include <string.h>
  #include <openssl/evp.h>
 
- int main(int argc, char *argv[])
+ int __cdecl main(int argc, char *argv[])
  {
      EVP_MD_CTX *mdctx;
      const EVP_MD *md;
diff --git a/doc/man3/PKCS12_newpass.pod b/doc/man3/PKCS12_newpass.pod
index 5fc041bfbd..d8df52c083 100644
--- a/doc/man3/PKCS12_newpass.pod
+++ b/doc/man3/PKCS12_newpass.pod
@@ -45,7 +45,7 @@ the result to a new file.
  #include <openssl/err.h>
  #include <openssl/pkcs12.h>
 
- int main(int argc, char **argv)
+ int __cdecl main(int argc, char **argv)
  {
      FILE *fp;
      PKCS12 *p12;
diff --git a/fuzz/driver.c b/fuzz/driver.c
index 54d67de202..b9010d6987 100644
--- a/fuzz/driver.c
+++ b/fuzz/driver.c
@@ -32,7 +32,7 @@ int LLVMFuzzerTestOneInput(const uint8_t *buf, size_t len)
 
 #define BUF_SIZE 65536
 
-int main(int argc, char** argv)
+int __cdecl main(int argc, char** argv)
 {
     FuzzerInitialize(&argc, &argv);
 
diff --git a/fuzz/test-corpus.c b/fuzz/test-corpus.c
index 86be5337e1..13e2cae10d 100644
--- a/fuzz/test-corpus.c
+++ b/fuzz/test-corpus.c
@@ -58,7 +58,7 @@ static void testfile(const char *pathname)
     fclose(f);
 }
 
-int main(int argc, char **argv) {
+int __cdecl main(int argc, char **argv) {
     int n;
 
     FuzzerInitialize(&argc, &argv);
diff --git a/include/internal/err.h b/include/internal/err.h
index d46b8bdb29..6bad3f0cf3 100644
--- a/include/internal/err.h
+++ b/include/internal/err.h
@@ -10,6 +10,6 @@
 #ifndef INTERNAL_ERR_H
 # define INTERNAL_ERR_H
 
-void err_free_strings_int(void);
+void __cdecl err_free_strings_int(void);
 
 #endif
diff --git a/include/openssl/aes.h b/include/openssl/aes.h
index 245c552abd..6f78f11053 100644
--- a/include/openssl/aes.h
+++ b/include/openssl/aes.h
@@ -38,49 +38,49 @@ struct aes_key_st {
 };
 typedef struct aes_key_st AES_KEY;
 
-const char *AES_options(void);
+const char * __cdecl AES_options(void);
 
-int AES_set_encrypt_key(const unsigned char *userKey, const int bits,
+int __cdecl AES_set_encrypt_key(const unsigned char *userKey, const int bits,
                         AES_KEY *key);
-int AES_set_decrypt_key(const unsigned char *userKey, const int bits,
+int __cdecl AES_set_decrypt_key(const unsigned char *userKey, const int bits,
                         AES_KEY *key);
 
-void AES_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl AES_encrypt(const unsigned char *in, unsigned char *out,
                  const AES_KEY *key);
-void AES_decrypt(const unsigned char *in, unsigned char *out,
+void __cdecl AES_decrypt(const unsigned char *in, unsigned char *out,
                  const AES_KEY *key);
 
-void AES_ecb_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl AES_ecb_encrypt(const unsigned char *in, unsigned char *out,
                      const AES_KEY *key, const int enc);
-void AES_cbc_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl AES_cbc_encrypt(const unsigned char *in, unsigned char *out,
                      size_t length, const AES_KEY *key,
                      unsigned char *ivec, const int enc);
-void AES_cfb128_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl AES_cfb128_encrypt(const unsigned char *in, unsigned char *out,
                         size_t length, const AES_KEY *key,
                         unsigned char *ivec, int *num, const int enc);
-void AES_cfb1_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl AES_cfb1_encrypt(const unsigned char *in, unsigned char *out,
                       size_t length, const AES_KEY *key,
                       unsigned char *ivec, int *num, const int enc);
-void AES_cfb8_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl AES_cfb8_encrypt(const unsigned char *in, unsigned char *out,
                       size_t length, const AES_KEY *key,
                       unsigned char *ivec, int *num, const int enc);
-void AES_ofb128_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl AES_ofb128_encrypt(const unsigned char *in, unsigned char *out,
                         size_t length, const AES_KEY *key,
                         unsigned char *ivec, int *num);
 /* NB: the IV is _two_ blocks long */
-void AES_ige_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl AES_ige_encrypt(const unsigned char *in, unsigned char *out,
                      size_t length, const AES_KEY *key,
                      unsigned char *ivec, const int enc);
 /* NB: the IV is _four_ blocks long */
-void AES_bi_ige_encrypt(const unsigned char *in, unsigned char *out,
+void __cdecl AES_bi_ige_encrypt(const unsigned char *in, unsigned char *out,
                         size_t length, const AES_KEY *key,
                         const AES_KEY *key2, const unsigned char *ivec,
                         const int enc);
 
-int AES_wrap_key(AES_KEY *key, const unsigned char *iv,
+int __cdecl AES_wrap_key(AES_KEY *key, const unsigned char *iv,
                  unsigned char *out,
                  const unsigned char *in, unsigned int inlen);
-int AES_unwrap_key(AES_KEY *key, const unsigned char *iv,
+int __cdecl AES_unwrap_key(AES_KEY *key, const unsigned char *iv,
                    unsigned char *out,
                    const unsigned char *in, unsigned int inlen);
 
diff --git a/include/openssl/asn1.h b/include/openssl/asn1.h
index 9522eec18f..f26388bc91 100644
--- a/include/openssl/asn1.h
+++ b/include/openssl/asn1.h
@@ -229,12 +229,12 @@ typedef struct ASN1_VALUE_st ASN1_VALUE;
 
 # define DECLARE_ASN1_ENCODE_FUNCTIONS(type, itname, name) \
         type *d2i_##name(type **a, const unsigned char **in, long len); \
-        int i2d_##name(type *a, unsigned char **out); \
+        int __cdecl i2d_##name(type *a, unsigned char **out); \
         DECLARE_ASN1_ITEM(itname)
 
 # define DECLARE_ASN1_ENCODE_FUNCTIONS_const(type, name) \
         type *d2i_##name(type **a, const unsigned char **in, long len); \
-        int i2d_##name(const type *a, unsigned char **out); \
+        int __cdecl i2d_##name(const type *a, unsigned char **out); \
         DECLARE_ASN1_ITEM(name)
 
 # define DECLARE_ASN1_NDEF_FUNCTION(name) \
@@ -246,7 +246,7 @@ typedef struct ASN1_VALUE_st ASN1_VALUE;
 
 # define DECLARE_ASN1_ALLOC_FUNCTIONS_name(type, name) \
         type *name##_new(void); \
-        void name##_free(type *a);
+        void __cdecl name##_free(type *a);
 
 # define DECLARE_ASN1_PRINT_FUNCTION(stname) \
         DECLARE_ASN1_PRINT_FUNCTION_fname(stname, stname)
@@ -256,8 +256,8 @@ typedef struct ASN1_VALUE_st ASN1_VALUE;
                                          const ASN1_PCTX *pctx);
 
 # define D2I_OF(type) type *(*)(type **,const unsigned char **,long)
-# define I2D_OF(type) int (*)(type *,unsigned char **)
-# define I2D_OF_const(type) int (*)(const type *,unsigned char **)
+# define I2D_OF(type) int (__cdecl *)(type *,unsigned char **)
+# define I2D_OF_const(type) int (__cdecl *)(const type *,unsigned char **)
 
 # define CHECKED_D2I_OF(type, d2i) \
     ((d2i_of_void*) (1 ? d2i : ((D2I_OF(type))0)))
@@ -271,7 +271,7 @@ typedef struct ASN1_VALUE_st ASN1_VALUE;
     ((void**) (1 ? p : (type**)0))
 
 # define TYPEDEF_D2I_OF(type) typedef type *d2i_of_##type(type **,const unsigned char **,long)
-# define TYPEDEF_I2D_OF(type) typedef int i2d_of_##type(type *,unsigned char **)
+# define TYPEDEF_I2D_OF(type) typedef int __cdecl i2d_of_##type(type *,unsigned char **)
 # define TYPEDEF_D2I2D_OF(type) TYPEDEF_D2I_OF(type); TYPEDEF_I2D_OF(type)
 
 TYPEDEF_D2I2D_OF(void);
@@ -517,87 +517,87 @@ typedef struct BIT_STRING_BITNAME_st {
 
 DECLARE_ASN1_FUNCTIONS_fname(ASN1_TYPE, ASN1_ANY, ASN1_TYPE)
 
-int ASN1_TYPE_get(const ASN1_TYPE *a);
-void ASN1_TYPE_set(ASN1_TYPE *a, int type, void *value);
-int ASN1_TYPE_set1(ASN1_TYPE *a, int type, const void *value);
-int ASN1_TYPE_cmp(const ASN1_TYPE *a, const ASN1_TYPE *b);
+int __cdecl ASN1_TYPE_get(const ASN1_TYPE *a);
+void __cdecl ASN1_TYPE_set(ASN1_TYPE *a, int type, void *value);
+int __cdecl ASN1_TYPE_set1(ASN1_TYPE *a, int type, const void *value);
+int __cdecl ASN1_TYPE_cmp(const ASN1_TYPE *a, const ASN1_TYPE *b);
 
-ASN1_TYPE *ASN1_TYPE_pack_sequence(const ASN1_ITEM *it, void *s, ASN1_TYPE **t);
-void *ASN1_TYPE_unpack_sequence(const ASN1_ITEM *it, const ASN1_TYPE *t);
+ASN1_TYPE * __cdecl ASN1_TYPE_pack_sequence(const ASN1_ITEM *it, void *s, ASN1_TYPE **t);
+void * __cdecl ASN1_TYPE_unpack_sequence(const ASN1_ITEM *it, const ASN1_TYPE *t);
 
-ASN1_OBJECT *ASN1_OBJECT_new(void);
-void ASN1_OBJECT_free(ASN1_OBJECT *a);
-int i2d_ASN1_OBJECT(const ASN1_OBJECT *a, unsigned char **pp);
-ASN1_OBJECT *d2i_ASN1_OBJECT(ASN1_OBJECT **a, const unsigned char **pp,
+ASN1_OBJECT * __cdecl ASN1_OBJECT_new(void);
+void __cdecl ASN1_OBJECT_free(ASN1_OBJECT *a);
+int __cdecl i2d_ASN1_OBJECT(const ASN1_OBJECT *a, unsigned char **pp);
+ASN1_OBJECT * __cdecl d2i_ASN1_OBJECT(ASN1_OBJECT **a, const unsigned char **pp,
                              long length);
 
 DECLARE_ASN1_ITEM(ASN1_OBJECT)
 
 DEFINE_STACK_OF(ASN1_OBJECT)
 
-ASN1_STRING *ASN1_STRING_new(void);
-void ASN1_STRING_free(ASN1_STRING *a);
-void ASN1_STRING_clear_free(ASN1_STRING *a);
-int ASN1_STRING_copy(ASN1_STRING *dst, const ASN1_STRING *str);
-ASN1_STRING *ASN1_STRING_dup(const ASN1_STRING *a);
-ASN1_STRING *ASN1_STRING_type_new(int type);
-int ASN1_STRING_cmp(const ASN1_STRING *a, const ASN1_STRING *b);
+ASN1_STRING * __cdecl ASN1_STRING_new(void);
+void __cdecl ASN1_STRING_free(ASN1_STRING *a);
+void __cdecl ASN1_STRING_clear_free(ASN1_STRING *a);
+int __cdecl ASN1_STRING_copy(ASN1_STRING *dst, const ASN1_STRING *str);
+ASN1_STRING * __cdecl ASN1_STRING_dup(const ASN1_STRING *a);
+ASN1_STRING * __cdecl ASN1_STRING_type_new(int type);
+int __cdecl ASN1_STRING_cmp(const ASN1_STRING *a, const ASN1_STRING *b);
   /*
    * Since this is used to store all sorts of things, via macros, for now,
    * make its data void *
    */
-int ASN1_STRING_set(ASN1_STRING *str, const void *data, int len);
-void ASN1_STRING_set0(ASN1_STRING *str, void *data, int len);
-int ASN1_STRING_length(const ASN1_STRING *x);
-void ASN1_STRING_length_set(ASN1_STRING *x, int n);
-int ASN1_STRING_type(const ASN1_STRING *x);
+int __cdecl ASN1_STRING_set(ASN1_STRING *str, const void *data, int len);
+void __cdecl ASN1_STRING_set0(ASN1_STRING *str, void *data, int len);
+int __cdecl ASN1_STRING_length(const ASN1_STRING *x);
+void __cdecl ASN1_STRING_length_set(ASN1_STRING *x, int n);
+int __cdecl ASN1_STRING_type(const ASN1_STRING *x);
 DEPRECATEDIN_1_1_0(unsigned char *ASN1_STRING_data(ASN1_STRING *x))
-const unsigned char *ASN1_STRING_get0_data(const ASN1_STRING *x);
+const unsigned char * __cdecl ASN1_STRING_get0_data(const ASN1_STRING *x);
 
 DECLARE_ASN1_FUNCTIONS(ASN1_BIT_STRING)
-int ASN1_BIT_STRING_set(ASN1_BIT_STRING *a, unsigned char *d, int length);
-int ASN1_BIT_STRING_set_bit(ASN1_BIT_STRING *a, int n, int value);
-int ASN1_BIT_STRING_get_bit(const ASN1_BIT_STRING *a, int n);
-int ASN1_BIT_STRING_check(const ASN1_BIT_STRING *a,
+int __cdecl ASN1_BIT_STRING_set(ASN1_BIT_STRING *a, unsigned char *d, int length);
+int __cdecl ASN1_BIT_STRING_set_bit(ASN1_BIT_STRING *a, int n, int value);
+int __cdecl ASN1_BIT_STRING_get_bit(const ASN1_BIT_STRING *a, int n);
+int __cdecl ASN1_BIT_STRING_check(const ASN1_BIT_STRING *a,
                           const unsigned char *flags, int flags_len);
 
-int ASN1_BIT_STRING_name_print(BIO *out, ASN1_BIT_STRING *bs,
+int __cdecl ASN1_BIT_STRING_name_print(BIO *out, ASN1_BIT_STRING *bs,
                                BIT_STRING_BITNAME *tbl, int indent);
-int ASN1_BIT_STRING_num_asc(const char *name, BIT_STRING_BITNAME *tbl);
-int ASN1_BIT_STRING_set_asc(ASN1_BIT_STRING *bs, const char *name, int value,
+int __cdecl ASN1_BIT_STRING_num_asc(const char *name, BIT_STRING_BITNAME *tbl);
+int __cdecl ASN1_BIT_STRING_set_asc(ASN1_BIT_STRING *bs, const char *name, int value,
                             BIT_STRING_BITNAME *tbl);
 
 DECLARE_ASN1_FUNCTIONS(ASN1_INTEGER)
-ASN1_INTEGER *d2i_ASN1_UINTEGER(ASN1_INTEGER **a, const unsigned char **pp,
+ASN1_INTEGER * __cdecl d2i_ASN1_UINTEGER(ASN1_INTEGER **a, const unsigned char **pp,
                                 long length);
-ASN1_INTEGER *ASN1_INTEGER_dup(const ASN1_INTEGER *x);
-int ASN1_INTEGER_cmp(const ASN1_INTEGER *x, const ASN1_INTEGER *y);
+ASN1_INTEGER * __cdecl ASN1_INTEGER_dup(const ASN1_INTEGER *x);
+int __cdecl ASN1_INTEGER_cmp(const ASN1_INTEGER *x, const ASN1_INTEGER *y);
 
 DECLARE_ASN1_FUNCTIONS(ASN1_ENUMERATED)
 
-int ASN1_UTCTIME_check(const ASN1_UTCTIME *a);
-ASN1_UTCTIME *ASN1_UTCTIME_set(ASN1_UTCTIME *s, time_t t);
-ASN1_UTCTIME *ASN1_UTCTIME_adj(ASN1_UTCTIME *s, time_t t,
+int __cdecl ASN1_UTCTIME_check(const ASN1_UTCTIME *a);
+ASN1_UTCTIME * __cdecl ASN1_UTCTIME_set(ASN1_UTCTIME *s, time_t t);
+ASN1_UTCTIME * __cdecl ASN1_UTCTIME_adj(ASN1_UTCTIME *s, time_t t,
                                int offset_day, long offset_sec);
-int ASN1_UTCTIME_set_string(ASN1_UTCTIME *s, const char *str);
-int ASN1_UTCTIME_cmp_time_t(const ASN1_UTCTIME *s, time_t t);
+int __cdecl ASN1_UTCTIME_set_string(ASN1_UTCTIME *s, const char *str);
+int __cdecl ASN1_UTCTIME_cmp_time_t(const ASN1_UTCTIME *s, time_t t);
 
-int ASN1_GENERALIZEDTIME_check(const ASN1_GENERALIZEDTIME *a);
-ASN1_GENERALIZEDTIME *ASN1_GENERALIZEDTIME_set(ASN1_GENERALIZEDTIME *s,
+int __cdecl ASN1_GENERALIZEDTIME_check(const ASN1_GENERALIZEDTIME *a);
+ASN1_GENERALIZEDTIME * __cdecl ASN1_GENERALIZEDTIME_set(ASN1_GENERALIZEDTIME *s,
                                                time_t t);
-ASN1_GENERALIZEDTIME *ASN1_GENERALIZEDTIME_adj(ASN1_GENERALIZEDTIME *s,
+ASN1_GENERALIZEDTIME * __cdecl ASN1_GENERALIZEDTIME_adj(ASN1_GENERALIZEDTIME *s,
                                                time_t t, int offset_day,
                                                long offset_sec);
-int ASN1_GENERALIZEDTIME_set_string(ASN1_GENERALIZEDTIME *s, const char *str);
+int __cdecl ASN1_GENERALIZEDTIME_set_string(ASN1_GENERALIZEDTIME *s, const char *str);
 
-int ASN1_TIME_diff(int *pday, int *psec,
+int __cdecl ASN1_TIME_diff(int *pday, int *psec,
                    const ASN1_TIME *from, const ASN1_TIME *to);
 
 DECLARE_ASN1_FUNCTIONS(ASN1_OCTET_STRING)
-ASN1_OCTET_STRING *ASN1_OCTET_STRING_dup(const ASN1_OCTET_STRING *a);
-int ASN1_OCTET_STRING_cmp(const ASN1_OCTET_STRING *a,
+ASN1_OCTET_STRING * __cdecl ASN1_OCTET_STRING_dup(const ASN1_OCTET_STRING *a);
+int __cdecl ASN1_OCTET_STRING_cmp(const ASN1_OCTET_STRING *a,
                           const ASN1_OCTET_STRING *b);
-int ASN1_OCTET_STRING_set(ASN1_OCTET_STRING *str, const unsigned char *data,
+int __cdecl ASN1_OCTET_STRING_set(ASN1_OCTET_STRING *str, const unsigned char *data,
                           int len);
 
 DECLARE_ASN1_FUNCTIONS(ASN1_VISIBLESTRING)
@@ -606,8 +606,8 @@ DECLARE_ASN1_FUNCTIONS(ASN1_UTF8STRING)
 DECLARE_ASN1_FUNCTIONS(ASN1_NULL)
 DECLARE_ASN1_FUNCTIONS(ASN1_BMPSTRING)
 
-int UTF8_getc(const unsigned char *str, int len, unsigned long *val);
-int UTF8_putc(unsigned char *str, int len, unsigned long value);
+int __cdecl UTF8_getc(const unsigned char *str, int len, unsigned long *val);
+int __cdecl UTF8_putc(unsigned char *str, int len, unsigned long value);
 
 DECLARE_ASN1_FUNCTIONS_name(ASN1_STRING, ASN1_PRINTABLE)
 
@@ -623,69 +623,69 @@ DECLARE_ASN1_FUNCTIONS(ASN1_TIME)
 
 DECLARE_ASN1_ITEM(ASN1_OCTET_STRING_NDEF)
 
-ASN1_TIME *ASN1_TIME_set(ASN1_TIME *s, time_t t);
-ASN1_TIME *ASN1_TIME_adj(ASN1_TIME *s, time_t t,
+ASN1_TIME * __cdecl ASN1_TIME_set(ASN1_TIME *s, time_t t);
+ASN1_TIME * __cdecl ASN1_TIME_adj(ASN1_TIME *s, time_t t,
                          int offset_day, long offset_sec);
-int ASN1_TIME_check(const ASN1_TIME *t);
-ASN1_GENERALIZEDTIME *ASN1_TIME_to_generalizedtime(const ASN1_TIME *t,
+int __cdecl ASN1_TIME_check(const ASN1_TIME *t);
+ASN1_GENERALIZEDTIME * __cdecl ASN1_TIME_to_generalizedtime(const ASN1_TIME *t,
                                                    ASN1_GENERALIZEDTIME **out);
-int ASN1_TIME_set_string(ASN1_TIME *s, const char *str);
-int ASN1_TIME_set_string_X509(ASN1_TIME *s, const char *str);
-int ASN1_TIME_to_tm(const ASN1_TIME *s, struct tm *tm);
-int ASN1_TIME_normalize(ASN1_TIME *s);
-int ASN1_TIME_cmp_time_t(const ASN1_TIME *s, time_t t);
-int ASN1_TIME_compare(const ASN1_TIME *a, const ASN1_TIME *b);
-
-int i2a_ASN1_INTEGER(BIO *bp, const ASN1_INTEGER *a);
-int a2i_ASN1_INTEGER(BIO *bp, ASN1_INTEGER *bs, char *buf, int size);
-int i2a_ASN1_ENUMERATED(BIO *bp, const ASN1_ENUMERATED *a);
-int a2i_ASN1_ENUMERATED(BIO *bp, ASN1_ENUMERATED *bs, char *buf, int size);
-int i2a_ASN1_OBJECT(BIO *bp, const ASN1_OBJECT *a);
-int a2i_ASN1_STRING(BIO *bp, ASN1_STRING *bs, char *buf, int size);
-int i2a_ASN1_STRING(BIO *bp, const ASN1_STRING *a, int type);
-int i2t_ASN1_OBJECT(char *buf, int buf_len, const ASN1_OBJECT *a);
-
-int a2d_ASN1_OBJECT(unsigned char *out, int olen, const char *buf, int num);
-ASN1_OBJECT *ASN1_OBJECT_create(int nid, unsigned char *data, int len,
+int __cdecl ASN1_TIME_set_string(ASN1_TIME *s, const char *str);
+int __cdecl ASN1_TIME_set_string_X509(ASN1_TIME *s, const char *str);
+int __cdecl ASN1_TIME_to_tm(const ASN1_TIME *s, struct tm *tm);
+int __cdecl ASN1_TIME_normalize(ASN1_TIME *s);
+int __cdecl ASN1_TIME_cmp_time_t(const ASN1_TIME *s, time_t t);
+int __cdecl ASN1_TIME_compare(const ASN1_TIME *a, const ASN1_TIME *b);
+
+int __cdecl i2a_ASN1_INTEGER(BIO *bp, const ASN1_INTEGER *a);
+int __cdecl a2i_ASN1_INTEGER(BIO *bp, ASN1_INTEGER *bs, char *buf, int size);
+int __cdecl i2a_ASN1_ENUMERATED(BIO *bp, const ASN1_ENUMERATED *a);
+int __cdecl a2i_ASN1_ENUMERATED(BIO *bp, ASN1_ENUMERATED *bs, char *buf, int size);
+int __cdecl i2a_ASN1_OBJECT(BIO *bp, const ASN1_OBJECT *a);
+int __cdecl a2i_ASN1_STRING(BIO *bp, ASN1_STRING *bs, char *buf, int size);
+int __cdecl i2a_ASN1_STRING(BIO *bp, const ASN1_STRING *a, int type);
+int __cdecl i2t_ASN1_OBJECT(char *buf, int buf_len, const ASN1_OBJECT *a);
+
+int __cdecl a2d_ASN1_OBJECT(unsigned char *out, int olen, const char *buf, int num);
+ASN1_OBJECT * __cdecl ASN1_OBJECT_create(int nid, unsigned char *data, int len,
                                 const char *sn, const char *ln);
 
-int ASN1_INTEGER_get_int64(int64_t *pr, const ASN1_INTEGER *a);
-int ASN1_INTEGER_set_int64(ASN1_INTEGER *a, int64_t r);
-int ASN1_INTEGER_get_uint64(uint64_t *pr, const ASN1_INTEGER *a);
-int ASN1_INTEGER_set_uint64(ASN1_INTEGER *a, uint64_t r);
+int __cdecl ASN1_INTEGER_get_int64(int64_t *pr, const ASN1_INTEGER *a);
+int __cdecl ASN1_INTEGER_set_int64(ASN1_INTEGER *a, int64_t r);
+int __cdecl ASN1_INTEGER_get_uint64(uint64_t *pr, const ASN1_INTEGER *a);
+int __cdecl ASN1_INTEGER_set_uint64(ASN1_INTEGER *a, uint64_t r);
 
-int ASN1_INTEGER_set(ASN1_INTEGER *a, long v);
-long ASN1_INTEGER_get(const ASN1_INTEGER *a);
-ASN1_INTEGER *BN_to_ASN1_INTEGER(const BIGNUM *bn, ASN1_INTEGER *ai);
-BIGNUM *ASN1_INTEGER_to_BN(const ASN1_INTEGER *ai, BIGNUM *bn);
+int __cdecl ASN1_INTEGER_set(ASN1_INTEGER *a, long v);
+long __cdecl ASN1_INTEGER_get(const ASN1_INTEGER *a);
+ASN1_INTEGER * __cdecl BN_to_ASN1_INTEGER(const BIGNUM *bn, ASN1_INTEGER *ai);
+BIGNUM * __cdecl ASN1_INTEGER_to_BN(const ASN1_INTEGER *ai, BIGNUM *bn);
 
-int ASN1_ENUMERATED_get_int64(int64_t *pr, const ASN1_ENUMERATED *a);
-int ASN1_ENUMERATED_set_int64(ASN1_ENUMERATED *a, int64_t r);
+int __cdecl ASN1_ENUMERATED_get_int64(int64_t *pr, const ASN1_ENUMERATED *a);
+int __cdecl ASN1_ENUMERATED_set_int64(ASN1_ENUMERATED *a, int64_t r);
 
 
-int ASN1_ENUMERATED_set(ASN1_ENUMERATED *a, long v);
-long ASN1_ENUMERATED_get(const ASN1_ENUMERATED *a);
-ASN1_ENUMERATED *BN_to_ASN1_ENUMERATED(const BIGNUM *bn, ASN1_ENUMERATED *ai);
-BIGNUM *ASN1_ENUMERATED_to_BN(const ASN1_ENUMERATED *ai, BIGNUM *bn);
+int __cdecl ASN1_ENUMERATED_set(ASN1_ENUMERATED *a, long v);
+long __cdecl ASN1_ENUMERATED_get(const ASN1_ENUMERATED *a);
+ASN1_ENUMERATED * __cdecl BN_to_ASN1_ENUMERATED(const BIGNUM *bn, ASN1_ENUMERATED *ai);
+BIGNUM * __cdecl ASN1_ENUMERATED_to_BN(const ASN1_ENUMERATED *ai, BIGNUM *bn);
 
 /* General */
 /* given a string, return the correct type, max is the maximum length */
-int ASN1_PRINTABLE_type(const unsigned char *s, int max);
+int __cdecl ASN1_PRINTABLE_type(const unsigned char *s, int max);
 
-unsigned long ASN1_tag2bit(int tag);
+unsigned long __cdecl ASN1_tag2bit(int tag);
 
 /* SPECIALS */
-int ASN1_get_object(const unsigned char **pp, long *plength, int *ptag,
+int __cdecl ASN1_get_object(const unsigned char **pp, long *plength, int *ptag,
                     int *pclass, long omax);
-int ASN1_check_infinite_end(unsigned char **p, long len);
-int ASN1_const_check_infinite_end(const unsigned char **p, long len);
-void ASN1_put_object(unsigned char **pp, int constructed, int length,
+int __cdecl ASN1_check_infinite_end(unsigned char **p, long len);
+int __cdecl ASN1_const_check_infinite_end(const unsigned char **p, long len);
+void __cdecl ASN1_put_object(unsigned char **pp, int constructed, int length,
                      int tag, int xclass);
-int ASN1_put_eoc(unsigned char **pp);
-int ASN1_object_size(int constructed, int length, int tag);
+int __cdecl ASN1_put_eoc(unsigned char **pp);
+int __cdecl ASN1_object_size(int constructed, int length, int tag);
 
 /* Used to implement other functions */
-void *ASN1_dup(i2d_of_void *i2d, d2i_of_void *d2i, void *x);
+void * __cdecl ASN1_dup(i2d_of_void *i2d, d2i_of_void *d2i, void *x);
 
 # define ASN1_dup_of(type,i2d,d2i,x) \
     ((type*)ASN1_dup(CHECKED_I2D_OF(type, i2d), \
@@ -697,7 +697,7 @@ void *ASN1_dup(i2d_of_void *i2d, d2i_of_void *d2i, void *x);
                      CHECKED_D2I_OF(type, d2i), \
                      CHECKED_PTR_OF(const type, x)))
 
-void *ASN1_item_dup(const ASN1_ITEM *it, void *x);
+void * __cdecl ASN1_item_dup(const ASN1_ITEM *it, void *x);
 
 /* ASN1 alloc/free macros for when a type is only used internally */
 
@@ -706,7 +706,7 @@ void *ASN1_item_dup(const ASN1_ITEM *it, void *x);
                 ASN1_item_free(CHECKED_PTR_OF(type, x), ASN1_ITEM_rptr(type))
 
 # ifndef OPENSSL_NO_STDIO
-void *ASN1_d2i_fp(void *(*xnew) (void), d2i_of_void *d2i, FILE *in, void **x);
+void * __cdecl ASN1_d2i_fp(void *(*xnew) (void), d2i_of_void *d2i, FILE *in, void **x);
 
 #  define ASN1_d2i_fp_of(type,xnew,d2i,in,x) \
     ((type*)ASN1_d2i_fp(CHECKED_NEW_OF(type, xnew), \
@@ -714,8 +714,8 @@ void *ASN1_d2i_fp(void *(*xnew) (void), d2i_of_void *d2i, FILE *in, void **x);
                         in, \
                         CHECKED_PPTR_OF(type, x)))
 
-void *ASN1_item_d2i_fp(const ASN1_ITEM *it, FILE *in, void *x);
-int ASN1_i2d_fp(i2d_of_void *i2d, FILE *out, void *x);
+void * __cdecl ASN1_item_d2i_fp(const ASN1_ITEM *it, FILE *in, void *x);
+int __cdecl ASN1_i2d_fp(i2d_of_void *i2d, FILE *out, void *x);
 
 #  define ASN1_i2d_fp_of(type,i2d,out,x) \
     (ASN1_i2d_fp(CHECKED_I2D_OF(type, i2d), \
@@ -727,13 +727,13 @@ int ASN1_i2d_fp(i2d_of_void *i2d, FILE *out, void *x);
                  out, \
                  CHECKED_PTR_OF(const type, x)))
 
-int ASN1_item_i2d_fp(const ASN1_ITEM *it, FILE *out, void *x);
-int ASN1_STRING_print_ex_fp(FILE *fp, const ASN1_STRING *str, unsigned long flags);
+int __cdecl ASN1_item_i2d_fp(const ASN1_ITEM *it, FILE *out, void *x);
+int __cdecl ASN1_STRING_print_ex_fp(FILE *fp, const ASN1_STRING *str, unsigned long flags);
 # endif
 
-int ASN1_STRING_to_UTF8(unsigned char **out, const ASN1_STRING *in);
+int __cdecl ASN1_STRING_to_UTF8(unsigned char **out, const ASN1_STRING *in);
 
-void *ASN1_d2i_bio(void *(*xnew) (void), d2i_of_void *d2i, BIO *in, void **x);
+void * __cdecl ASN1_d2i_bio(void *(*xnew) (void), d2i_of_void *d2i, BIO *in, void **x);
 
 #  define ASN1_d2i_bio_of(type,xnew,d2i,in,x) \
     ((type*)ASN1_d2i_bio( CHECKED_NEW_OF(type, xnew), \
@@ -741,8 +741,8 @@ void *ASN1_d2i_bio(void *(*xnew) (void), d2i_of_void *d2i, BIO *in, void **x);
                           in, \
                           CHECKED_PPTR_OF(type, x)))
 
-void *ASN1_item_d2i_bio(const ASN1_ITEM *it, BIO *in, void *x);
-int ASN1_i2d_bio(i2d_of_void *i2d, BIO *out, unsigned char *x);
+void * __cdecl ASN1_item_d2i_bio(const ASN1_ITEM *it, BIO *in, void *x);
+int __cdecl ASN1_i2d_bio(i2d_of_void *i2d, BIO *out, unsigned char *x);
 
 #  define ASN1_i2d_bio_of(type,i2d,out,x) \
     (ASN1_i2d_bio(CHECKED_I2D_OF(type, i2d), \
@@ -754,69 +754,69 @@ int ASN1_i2d_bio(i2d_of_void *i2d, BIO *out, unsigned char *x);
                   out, \
                   CHECKED_PTR_OF(const type, x)))
 
-int ASN1_item_i2d_bio(const ASN1_ITEM *it, BIO *out, void *x);
-int ASN1_UTCTIME_print(BIO *fp, const ASN1_UTCTIME *a);
-int ASN1_GENERALIZEDTIME_print(BIO *fp, const ASN1_GENERALIZEDTIME *a);
-int ASN1_TIME_print(BIO *fp, const ASN1_TIME *a);
-int ASN1_STRING_print(BIO *bp, const ASN1_STRING *v);
-int ASN1_STRING_print_ex(BIO *out, const ASN1_STRING *str, unsigned long flags);
-int ASN1_buf_print(BIO *bp, const unsigned char *buf, size_t buflen, int off);
-int ASN1_bn_print(BIO *bp, const char *number, const BIGNUM *num,
+int __cdecl ASN1_item_i2d_bio(const ASN1_ITEM *it, BIO *out, void *x);
+int __cdecl ASN1_UTCTIME_print(BIO *fp, const ASN1_UTCTIME *a);
+int __cdecl ASN1_GENERALIZEDTIME_print(BIO *fp, const ASN1_GENERALIZEDTIME *a);
+int __cdecl ASN1_TIME_print(BIO *fp, const ASN1_TIME *a);
+int __cdecl ASN1_STRING_print(BIO *bp, const ASN1_STRING *v);
+int __cdecl ASN1_STRING_print_ex(BIO *out, const ASN1_STRING *str, unsigned long flags);
+int __cdecl ASN1_buf_print(BIO *bp, const unsigned char *buf, size_t buflen, int off);
+int __cdecl ASN1_bn_print(BIO *bp, const char *number, const BIGNUM *num,
                   unsigned char *buf, int off);
-int ASN1_parse(BIO *bp, const unsigned char *pp, long len, int indent);
-int ASN1_parse_dump(BIO *bp, const unsigned char *pp, long len, int indent,
+int __cdecl ASN1_parse(BIO *bp, const unsigned char *pp, long len, int indent);
+int __cdecl ASN1_parse_dump(BIO *bp, const unsigned char *pp, long len, int indent,
                     int dump);
-const char *ASN1_tag2str(int tag);
+const char * __cdecl ASN1_tag2str(int tag);
 
 /* Used to load and write Netscape format cert */
 
-int ASN1_UNIVERSALSTRING_to_string(ASN1_UNIVERSALSTRING *s);
+int __cdecl ASN1_UNIVERSALSTRING_to_string(ASN1_UNIVERSALSTRING *s);
 
-int ASN1_TYPE_set_octetstring(ASN1_TYPE *a, unsigned char *data, int len);
-int ASN1_TYPE_get_octetstring(const ASN1_TYPE *a, unsigned char *data, int max_len);
-int ASN1_TYPE_set_int_octetstring(ASN1_TYPE *a, long num,
+int __cdecl ASN1_TYPE_set_octetstring(ASN1_TYPE *a, unsigned char *data, int len);
+int __cdecl ASN1_TYPE_get_octetstring(const ASN1_TYPE *a, unsigned char *data, int max_len);
+int __cdecl ASN1_TYPE_set_int_octetstring(ASN1_TYPE *a, long num,
                                   unsigned char *data, int len);
-int ASN1_TYPE_get_int_octetstring(const ASN1_TYPE *a, long *num,
+int __cdecl ASN1_TYPE_get_int_octetstring(const ASN1_TYPE *a, long *num,
                                   unsigned char *data, int max_len);
 
-void *ASN1_item_unpack(const ASN1_STRING *oct, const ASN1_ITEM *it);
+void * __cdecl ASN1_item_unpack(const ASN1_STRING *oct, const ASN1_ITEM *it);
 
-ASN1_STRING *ASN1_item_pack(void *obj, const ASN1_ITEM *it,
+ASN1_STRING * __cdecl ASN1_item_pack(void *obj, const ASN1_ITEM *it,
                             ASN1_OCTET_STRING **oct);
 
-void ASN1_STRING_set_default_mask(unsigned long mask);
-int ASN1_STRING_set_default_mask_asc(const char *p);
-unsigned long ASN1_STRING_get_default_mask(void);
-int ASN1_mbstring_copy(ASN1_STRING **out, const unsigned char *in, int len,
+void __cdecl ASN1_STRING_set_default_mask(unsigned long mask);
+int __cdecl ASN1_STRING_set_default_mask_asc(const char *p);
+unsigned long __cdecl ASN1_STRING_get_default_mask(void);
+int __cdecl ASN1_mbstring_copy(ASN1_STRING **out, const unsigned char *in, int len,
                        int inform, unsigned long mask);
-int ASN1_mbstring_ncopy(ASN1_STRING **out, const unsigned char *in, int len,
+int __cdecl ASN1_mbstring_ncopy(ASN1_STRING **out, const unsigned char *in, int len,
                         int inform, unsigned long mask,
                         long minsize, long maxsize);
 
-ASN1_STRING *ASN1_STRING_set_by_NID(ASN1_STRING **out,
+ASN1_STRING * __cdecl ASN1_STRING_set_by_NID(ASN1_STRING **out,
                                     const unsigned char *in, int inlen,
                                     int inform, int nid);
-ASN1_STRING_TABLE *ASN1_STRING_TABLE_get(int nid);
-int ASN1_STRING_TABLE_add(int, long, long, unsigned long, unsigned long);
-void ASN1_STRING_TABLE_cleanup(void);
+ASN1_STRING_TABLE * __cdecl ASN1_STRING_TABLE_get(int nid);
+int __cdecl ASN1_STRING_TABLE_add(int, long, long, unsigned long, unsigned long);
+void __cdecl ASN1_STRING_TABLE_cleanup(void);
 
 /* ASN1 template functions */
 
 /* Old API compatible functions */
-ASN1_VALUE *ASN1_item_new(const ASN1_ITEM *it);
-void ASN1_item_free(ASN1_VALUE *val, const ASN1_ITEM *it);
-ASN1_VALUE *ASN1_item_d2i(ASN1_VALUE **val, const unsigned char **in,
+ASN1_VALUE * __cdecl ASN1_item_new(const ASN1_ITEM *it);
+void __cdecl ASN1_item_free(ASN1_VALUE *val, const ASN1_ITEM *it);
+ASN1_VALUE * __cdecl ASN1_item_d2i(ASN1_VALUE **val, const unsigned char **in,
                           long len, const ASN1_ITEM *it);
-int ASN1_item_i2d(ASN1_VALUE *val, unsigned char **out, const ASN1_ITEM *it);
-int ASN1_item_ndef_i2d(ASN1_VALUE *val, unsigned char **out,
+int __cdecl ASN1_item_i2d(ASN1_VALUE *val, unsigned char **out, const ASN1_ITEM *it);
+int __cdecl ASN1_item_ndef_i2d(ASN1_VALUE *val, unsigned char **out,
                        const ASN1_ITEM *it);
 
-void ASN1_add_oid_module(void);
-void ASN1_add_stable_module(void);
+void __cdecl ASN1_add_oid_module(void);
+void __cdecl ASN1_add_stable_module(void);
 
-ASN1_TYPE *ASN1_generate_nconf(const char *str, CONF *nconf);
-ASN1_TYPE *ASN1_generate_v3(const char *str, X509V3_CTX *cnf);
-int ASN1_str2mask(const char *str, unsigned long *pmask);
+ASN1_TYPE * __cdecl ASN1_generate_nconf(const char *str, CONF *nconf);
+ASN1_TYPE * __cdecl ASN1_generate_v3(const char *str, X509V3_CTX *cnf);
+int __cdecl ASN1_str2mask(const char *str, unsigned long *pmask);
 
 /* ASN1 Print flags */
 
@@ -839,46 +839,46 @@ int ASN1_str2mask(const char *str, unsigned long *pmask);
 /* Don't show structure name even at top level */
 # define ASN1_PCTX_FLAGS_NO_STRUCT_NAME          0x100
 
-int ASN1_item_print(BIO *out, ASN1_VALUE *ifld, int indent,
+int __cdecl ASN1_item_print(BIO *out, ASN1_VALUE *ifld, int indent,
                     const ASN1_ITEM *it, const ASN1_PCTX *pctx);
-ASN1_PCTX *ASN1_PCTX_new(void);
-void ASN1_PCTX_free(ASN1_PCTX *p);
-unsigned long ASN1_PCTX_get_flags(const ASN1_PCTX *p);
-void ASN1_PCTX_set_flags(ASN1_PCTX *p, unsigned long flags);
-unsigned long ASN1_PCTX_get_nm_flags(const ASN1_PCTX *p);
-void ASN1_PCTX_set_nm_flags(ASN1_PCTX *p, unsigned long flags);
-unsigned long ASN1_PCTX_get_cert_flags(const ASN1_PCTX *p);
-void ASN1_PCTX_set_cert_flags(ASN1_PCTX *p, unsigned long flags);
-unsigned long ASN1_PCTX_get_oid_flags(const ASN1_PCTX *p);
-void ASN1_PCTX_set_oid_flags(ASN1_PCTX *p, unsigned long flags);
-unsigned long ASN1_PCTX_get_str_flags(const ASN1_PCTX *p);
-void ASN1_PCTX_set_str_flags(ASN1_PCTX *p, unsigned long flags);
-
-ASN1_SCTX *ASN1_SCTX_new(int (*scan_cb) (ASN1_SCTX *ctx));
-void ASN1_SCTX_free(ASN1_SCTX *p);
-const ASN1_ITEM *ASN1_SCTX_get_item(ASN1_SCTX *p);
-const ASN1_TEMPLATE *ASN1_SCTX_get_template(ASN1_SCTX *p);
-unsigned long ASN1_SCTX_get_flags(ASN1_SCTX *p);
-void ASN1_SCTX_set_app_data(ASN1_SCTX *p, void *data);
-void *ASN1_SCTX_get_app_data(ASN1_SCTX *p);
-
-const BIO_METHOD *BIO_f_asn1(void);
-
-BIO *BIO_new_NDEF(BIO *out, ASN1_VALUE *val, const ASN1_ITEM *it);
-
-int i2d_ASN1_bio_stream(BIO *out, ASN1_VALUE *val, BIO *in, int flags,
+ASN1_PCTX * __cdecl ASN1_PCTX_new(void);
+void __cdecl ASN1_PCTX_free(ASN1_PCTX *p);
+unsigned long __cdecl ASN1_PCTX_get_flags(const ASN1_PCTX *p);
+void __cdecl ASN1_PCTX_set_flags(ASN1_PCTX *p, unsigned long flags);
+unsigned long __cdecl ASN1_PCTX_get_nm_flags(const ASN1_PCTX *p);
+void __cdecl ASN1_PCTX_set_nm_flags(ASN1_PCTX *p, unsigned long flags);
+unsigned long __cdecl ASN1_PCTX_get_cert_flags(const ASN1_PCTX *p);
+void __cdecl ASN1_PCTX_set_cert_flags(ASN1_PCTX *p, unsigned long flags);
+unsigned long __cdecl ASN1_PCTX_get_oid_flags(const ASN1_PCTX *p);
+void __cdecl ASN1_PCTX_set_oid_flags(ASN1_PCTX *p, unsigned long flags);
+unsigned long __cdecl ASN1_PCTX_get_str_flags(const ASN1_PCTX *p);
+void __cdecl ASN1_PCTX_set_str_flags(ASN1_PCTX *p, unsigned long flags);
+
+ASN1_SCTX * __cdecl ASN1_SCTX_new(int (*scan_cb) (ASN1_SCTX *ctx));
+void __cdecl ASN1_SCTX_free(ASN1_SCTX *p);
+const ASN1_ITEM * __cdecl ASN1_SCTX_get_item(ASN1_SCTX *p);
+const ASN1_TEMPLATE * __cdecl ASN1_SCTX_get_template(ASN1_SCTX *p);
+unsigned long __cdecl ASN1_SCTX_get_flags(ASN1_SCTX *p);
+void __cdecl ASN1_SCTX_set_app_data(ASN1_SCTX *p, void *data);
+void * __cdecl ASN1_SCTX_get_app_data(ASN1_SCTX *p);
+
+const BIO_METHOD * __cdecl BIO_f_asn1(void);
+
+BIO * __cdecl BIO_new_NDEF(BIO *out, ASN1_VALUE *val, const ASN1_ITEM *it);
+
+int __cdecl i2d_ASN1_bio_stream(BIO *out, ASN1_VALUE *val, BIO *in, int flags,
                         const ASN1_ITEM *it);
-int PEM_write_bio_ASN1_stream(BIO *out, ASN1_VALUE *val, BIO *in, int flags,
+int __cdecl PEM_write_bio_ASN1_stream(BIO *out, ASN1_VALUE *val, BIO *in, int flags,
                               const char *hdr, const ASN1_ITEM *it);
-int SMIME_write_ASN1(BIO *bio, ASN1_VALUE *val, BIO *data, int flags,
+int __cdecl SMIME_write_ASN1(BIO *bio, ASN1_VALUE *val, BIO *data, int flags,
                      int ctype_nid, int econt_nid,
                      STACK_OF(X509_ALGOR) *mdalgs, const ASN1_ITEM *it);
-ASN1_VALUE *SMIME_read_ASN1(BIO *bio, BIO **bcont, const ASN1_ITEM *it);
-int SMIME_crlf_copy(BIO *in, BIO *out, int flags);
-int SMIME_text(BIO *in, BIO *out);
+ASN1_VALUE * __cdecl SMIME_read_ASN1(BIO *bio, BIO **bcont, const ASN1_ITEM *it);
+int __cdecl SMIME_crlf_copy(BIO *in, BIO *out, int flags);
+int __cdecl SMIME_text(BIO *in, BIO *out);
 
-const ASN1_ITEM *ASN1_ITEM_lookup(const char *name);
-const ASN1_ITEM *ASN1_ITEM_get(size_t i);
+const ASN1_ITEM * __cdecl ASN1_ITEM_lookup(const char *name);
+const ASN1_ITEM * __cdecl ASN1_ITEM_get(size_t i);
 
 # ifdef  __cplusplus
 }
diff --git a/include/openssl/asn1err.h b/include/openssl/asn1err.h
index faed5a5518..10d838047e 100644
--- a/include/openssl/asn1err.h
+++ b/include/openssl/asn1err.h
@@ -18,7 +18,7 @@
 # ifdef  __cplusplus
 extern "C"
 # endif
-int ERR_load_ASN1_strings(void);
+int __cdecl ERR_load_ASN1_strings(void);
 
 /*
  * ASN1 function codes.
diff --git a/include/openssl/asn1t.h b/include/openssl/asn1t.h
index a450ba0d9d..1cd386a9d8 100644
--- a/include/openssl/asn1t.h
+++ b/include/openssl/asn1t.h
@@ -822,7 +822,7 @@ typedef struct ASN1_STREAM_ARG_st {
         { \
                 return (stname *)ASN1_item_new(ASN1_ITEM_rptr(itname)); \
         } \
-        void fname##_free(stname *a) \
+        void __cdecl fname##_free(stname *a) \
         { \
                 ASN1_item_free((ASN1_VALUE *)a, ASN1_ITEM_rptr(itname)); \
         }
@@ -836,7 +836,7 @@ typedef struct ASN1_STREAM_ARG_st {
         { \
                 return (stname *)ASN1_item_d2i((ASN1_VALUE **)a, in, len, ASN1_ITEM_rptr(itname));\
         } \
-        int i2d_##fname(stname *a, unsigned char **out) \
+        int __cdecl i2d_##fname(stname *a, unsigned char **out) \
         { \
                 return ASN1_item_i2d((ASN1_VALUE *)a, out, ASN1_ITEM_rptr(itname));\
         }
@@ -869,7 +869,7 @@ typedef struct ASN1_STREAM_ARG_st {
         { \
                 return (stname *)ASN1_item_d2i((ASN1_VALUE **)a, in, len, ASN1_ITEM_rptr(itname));\
         } \
-        int i2d_##fname(const stname *a, unsigned char **out) \
+        int __cdecl i2d_##fname(const stname *a, unsigned char **out) \
         { \
                 return ASN1_item_i2d((ASN1_VALUE *)a, out, ASN1_ITEM_rptr(itname));\
         }
@@ -929,14 +929,14 @@ DEFINE_STACK_OF(ASN1_VALUE)
 
 /* Functions used internally by the ASN1 code */
 
-int ASN1_item_ex_new(ASN1_VALUE **pval, const ASN1_ITEM *it);
-void ASN1_item_ex_free(ASN1_VALUE **pval, const ASN1_ITEM *it);
+int __cdecl ASN1_item_ex_new(ASN1_VALUE **pval, const ASN1_ITEM *it);
+void __cdecl ASN1_item_ex_free(ASN1_VALUE **pval, const ASN1_ITEM *it);
 
-int ASN1_item_ex_d2i(ASN1_VALUE **pval, const unsigned char **in, long len,
+int __cdecl ASN1_item_ex_d2i(ASN1_VALUE **pval, const unsigned char **in, long len,
                      const ASN1_ITEM *it, int tag, int aclass, char opt,
                      ASN1_TLC *ctx);
 
-int ASN1_item_ex_i2d(ASN1_VALUE **pval, unsigned char **out,
+int __cdecl ASN1_item_ex_i2d(ASN1_VALUE **pval, unsigned char **out,
                      const ASN1_ITEM *it, int tag, int aclass);
 
 #ifdef  __cplusplus
diff --git a/include/openssl/async.h b/include/openssl/async.h
index 7052b89052..5cb71527ce 100644
--- a/include/openssl/async.h
+++ b/include/openssl/async.h
@@ -37,37 +37,37 @@ typedef struct async_wait_ctx_st ASYNC_WAIT_CTX;
 #define ASYNC_PAUSE    2
 #define ASYNC_FINISH   3
 
-int ASYNC_init_thread(size_t max_size, size_t init_size);
-void ASYNC_cleanup_thread(void);
+int __cdecl ASYNC_init_thread(size_t max_size, size_t init_size);
+void __cdecl ASYNC_cleanup_thread(void);
 
 #ifdef OSSL_ASYNC_FD
-ASYNC_WAIT_CTX *ASYNC_WAIT_CTX_new(void);
-void ASYNC_WAIT_CTX_free(ASYNC_WAIT_CTX *ctx);
-int ASYNC_WAIT_CTX_set_wait_fd(ASYNC_WAIT_CTX *ctx, const void *key,
+ASYNC_WAIT_CTX * __cdecl ASYNC_WAIT_CTX_new(void);
+void __cdecl ASYNC_WAIT_CTX_free(ASYNC_WAIT_CTX *ctx);
+int __cdecl ASYNC_WAIT_CTX_set_wait_fd(ASYNC_WAIT_CTX *ctx, const void *key,
                                OSSL_ASYNC_FD fd,
                                void *custom_data,
                                void (*cleanup)(ASYNC_WAIT_CTX *, const void *,
                                                OSSL_ASYNC_FD, void *));
-int ASYNC_WAIT_CTX_get_fd(ASYNC_WAIT_CTX *ctx, const void *key,
+int __cdecl ASYNC_WAIT_CTX_get_fd(ASYNC_WAIT_CTX *ctx, const void *key,
                         OSSL_ASYNC_FD *fd, void **custom_data);
-int ASYNC_WAIT_CTX_get_all_fds(ASYNC_WAIT_CTX *ctx, OSSL_ASYNC_FD *fd,
+int __cdecl ASYNC_WAIT_CTX_get_all_fds(ASYNC_WAIT_CTX *ctx, OSSL_ASYNC_FD *fd,
                                size_t *numfds);
-int ASYNC_WAIT_CTX_get_changed_fds(ASYNC_WAIT_CTX *ctx, OSSL_ASYNC_FD *addfd,
+int __cdecl ASYNC_WAIT_CTX_get_changed_fds(ASYNC_WAIT_CTX *ctx, OSSL_ASYNC_FD *addfd,
                                    size_t *numaddfds, OSSL_ASYNC_FD *delfd,
                                    size_t *numdelfds);
-int ASYNC_WAIT_CTX_clear_fd(ASYNC_WAIT_CTX *ctx, const void *key);
+int __cdecl ASYNC_WAIT_CTX_clear_fd(ASYNC_WAIT_CTX *ctx, const void *key);
 #endif
 
-int ASYNC_is_capable(void);
+int __cdecl ASYNC_is_capable(void);
 
-int ASYNC_start_job(ASYNC_JOB **job, ASYNC_WAIT_CTX *ctx, int *ret,
+int __cdecl ASYNC_start_job(ASYNC_JOB **job, ASYNC_WAIT_CTX *ctx, int *ret,
                     int (*func)(void *), void *args, size_t size);
-int ASYNC_pause_job(void);
+int __cdecl ASYNC_pause_job(void);
 
-ASYNC_JOB *ASYNC_get_current_job(void);
-ASYNC_WAIT_CTX *ASYNC_get_wait_ctx(ASYNC_JOB *job);
-void ASYNC_block_pause(void);
-void ASYNC_unblock_pause(void);
+ASYNC_JOB * __cdecl ASYNC_get_current_job(void);
+ASYNC_WAIT_CTX * __cdecl ASYNC_get_wait_ctx(ASYNC_JOB *job);
+void __cdecl ASYNC_block_pause(void);
+void __cdecl ASYNC_unblock_pause(void);
 
 
 # ifdef  __cplusplus
diff --git a/include/openssl/asyncerr.h b/include/openssl/asyncerr.h
index 91afbbb2f5..d404cafb75 100644
--- a/include/openssl/asyncerr.h
+++ b/include/openssl/asyncerr.h
@@ -18,7 +18,7 @@
 # ifdef  __cplusplus
 extern "C"
 # endif
-int ERR_load_ASYNC_strings(void);
+int __cdecl ERR_load_ASYNC_strings(void);
 
 /*
  * ASYNC function codes.
diff --git a/include/openssl/bio.h b/include/openssl/bio.h
index e1fddfb796..62f7bc33bb 100644
--- a/include/openssl/bio.h
+++ b/include/openssl/bio.h
@@ -553,7 +553,7 @@ void BIO_set_init(BIO *a, int init);
 int BIO_get_init(BIO *a);
 void BIO_set_shutdown(BIO *a, int shut);
 int BIO_get_shutdown(BIO *a);
-void BIO_vfree(BIO *a);
+void __cdecl BIO_vfree(BIO *a);
 int BIO_up_ref(BIO *a);
 int BIO_read(BIO *b, void *data, int dlen);
 int BIO_read_ex(BIO *b, void *data, size_t dlen, size_t *readbytes);
diff --git a/include/openssl/crypto.h b/include/openssl/crypto.h
index 7d0b526236..90aa5e4acc 100644
--- a/include/openssl/crypto.h
+++ b/include/openssl/crypto.h
@@ -254,23 +254,23 @@ typedef struct crypto_threadid_st {
 # endif /* OPENSSL_API_COMPAT < 0x10100000L */
 
 int CRYPTO_set_mem_functions(
-        void *(*m) (size_t, const char *, int),
-        void *(*r) (void *, size_t, const char *, int),
-        void (*f) (void *, const char *, int));
+        void *(__cdecl *m) (size_t, const char *, int),
+        void *(__cdecl *r) (void *, size_t, const char *, int),
+        void (__cdecl *f) (void *, const char *, int));
 int CRYPTO_set_mem_debug(int flag);
 void CRYPTO_get_mem_functions(
-        void *(**m) (size_t, const char *, int),
-        void *(**r) (void *, size_t, const char *, int),
-        void (**f) (void *, const char *, int));
+        void *(__cdecl **m) (size_t, const char *, int),
+        void *(__cdecl **r) (void *, size_t, const char *, int),
+        void (__cdecl **f) (void *, const char *, int));
 
-void *CRYPTO_malloc(size_t num, const char *file, int line);
+void * __cdecl CRYPTO_malloc(size_t num, const char *file, int line);
 void *CRYPTO_zalloc(size_t num, const char *file, int line);
 void *CRYPTO_memdup(const void *str, size_t siz, const char *file, int line);
 char *CRYPTO_strdup(const char *str, const char *file, int line);
 char *CRYPTO_strndup(const char *str, size_t s, const char *file, int line);
-void CRYPTO_free(void *ptr, const char *file, int line);
+void __cdecl CRYPTO_free(void *ptr, const char *file, int line);
 void CRYPTO_clear_free(void *ptr, size_t num, const char *file, int line);
-void *CRYPTO_realloc(void *addr, size_t num, const char *file, int line);
+void * __cdecl CRYPTO_realloc(void *addr, size_t num, const char *file, int line);
 void *CRYPTO_clear_realloc(void *addr, size_t old_num, size_t num,
                            const char *file, int line);
 
@@ -384,10 +384,10 @@ int CRYPTO_memcmp(const void * in_a, const void * in_b, size_t len);
 
 
 /* Library initialisation functions */
-void OPENSSL_cleanup(void);
-int OPENSSL_init_crypto(uint64_t opts, const OPENSSL_INIT_SETTINGS *settings);
-int OPENSSL_atexit(void (*handler)(void));
-void OPENSSL_thread_stop(void);
+void __cdecl OPENSSL_cleanup(void);
+int __cdecl OPENSSL_init_crypto(uint64_t opts, const OPENSSL_INIT_SETTINGS *settings);
+int __cdecl OPENSSL_atexit(void (*handler)(void));
+void __cdecl OPENSSL_thread_stop(void);
 
 /* Low-level control of initialization */
 OPENSSL_INIT_SETTINGS *OPENSSL_INIT_new(void);
@@ -428,7 +428,7 @@ typedef unsigned int CRYPTO_THREAD_ID;
 #  define CRYPTO_ONCE_STATIC_INIT 0
 # endif
 
-int CRYPTO_THREAD_run_once(CRYPTO_ONCE *once, void (*init)(void));
+int __cdecl CRYPTO_THREAD_run_once(CRYPTO_ONCE *once, void (*init)(void));
 
 int CRYPTO_THREAD_init_local(CRYPTO_THREAD_LOCAL *key, void (*cleanup)(void *));
 void *CRYPTO_THREAD_get_local(CRYPTO_THREAD_LOCAL *key);
diff --git a/include/openssl/ct.h b/include/openssl/ct.h
index d4262fa048..b74dcaa010 100644
--- a/include/openssl/ct.h
+++ b/include/openssl/ct.h
@@ -138,7 +138,7 @@ SCT *SCT_new_from_base64(unsigned char version,
 /*
  * Frees the SCT and the underlying data structures.
  */
-void SCT_free(SCT *sct);
+void __cdecl SCT_free(SCT *sct);
 
 /*
  * Free a stack of SCTs, and the underlying SCTs themselves.
@@ -422,7 +422,7 @@ int CTLOG_new_from_base64(CTLOG ** ct_log,
 /*
  * Deletes a CT log instance and its fields.
  */
-void CTLOG_free(CTLOG *log);
+void __cdecl CTLOG_free(CTLOG *log);
 
 /* Gets the name of the CT log */
 const char *CTLOG_get0_name(const CTLOG *log);
diff --git a/include/openssl/dh.h b/include/openssl/dh.h
index 3527540cdd..794d995a1f 100644
--- a/include/openssl/dh.h
+++ b/include/openssl/dh.h
@@ -152,9 +152,9 @@ int DH_generate_key(DH *dh);
 int DH_compute_key(unsigned char *key, const BIGNUM *pub_key, DH *dh);
 int DH_compute_key_padded(unsigned char *key, const BIGNUM *pub_key, DH *dh);
 DH *d2i_DHparams(DH **a, const unsigned char **pp, long length);
-int i2d_DHparams(const DH *a, unsigned char **pp);
+int __cdecl i2d_DHparams(const DH *a, unsigned char **pp);
 DH *d2i_DHxparams(DH **a, const unsigned char **pp, long length);
-int i2d_DHxparams(const DH *a, unsigned char **pp);
+int __cdecl i2d_DHxparams(const DH *a, unsigned char **pp);
 # ifndef OPENSSL_NO_STDIO
 int DHparams_print_fp(FILE *fp, const DH *x);
 # endif
diff --git a/include/openssl/dsa.h b/include/openssl/dsa.h
index 822eff347a..22a70e5274 100644
--- a/include/openssl/dsa.h
+++ b/include/openssl/dsa.h
@@ -74,7 +74,7 @@ typedef struct DSA_SIG_st DSA_SIG;
 DSA *DSAparams_dup(DSA *x);
 DSA_SIG *DSA_SIG_new(void);
 void DSA_SIG_free(DSA_SIG *a);
-int i2d_DSA_SIG(const DSA_SIG *a, unsigned char **pp);
+int __cdecl i2d_DSA_SIG(const DSA_SIG *a, unsigned char **pp);
 DSA_SIG *d2i_DSA_SIG(DSA_SIG **v, const unsigned char **pp, long length);
 void DSA_SIG_get0(const DSA_SIG *sig, const BIGNUM **pr, const BIGNUM **ps);
 int DSA_SIG_set0(DSA_SIG *sig, BIGNUM *r, BIGNUM *s);
@@ -130,9 +130,9 @@ int DSA_generate_parameters_ex(DSA *dsa, int bits,
                                BN_GENCB *cb);
 
 int DSA_generate_key(DSA *a);
-int i2d_DSAPublicKey(const DSA *a, unsigned char **pp);
-int i2d_DSAPrivateKey(const DSA *a, unsigned char **pp);
-int i2d_DSAparams(const DSA *a, unsigned char **pp);
+int __cdecl i2d_DSAPublicKey(const DSA *a, unsigned char **pp);
+int __cdecl i2d_DSAPrivateKey(const DSA *a, unsigned char **pp);
+int __cdecl i2d_DSAparams(const DSA *a, unsigned char **pp);
 
 int DSAparams_print(BIO *bp, const DSA *x);
 int DSA_print(BIO *bp, const DSA *x, int off);
diff --git a/include/openssl/ec.h b/include/openssl/ec.h
index 5af9ebdc7f..6b9952f424 100644
--- a/include/openssl/ec.h
+++ b/include/openssl/ec.h
@@ -791,7 +791,7 @@ int EC_GROUP_get_pentanomial_basis(const EC_GROUP *, unsigned int *k1,
 # define OPENSSL_EC_NAMED_CURVE     0x001
 
 EC_GROUP *d2i_ECPKParameters(EC_GROUP **, const unsigned char **in, long len);
-int i2d_ECPKParameters(const EC_GROUP *, unsigned char **out);
+int __cdecl i2d_ECPKParameters(const EC_GROUP *, unsigned char **out);
 
 # define d2i_ECPKParameters_bio(bp,x) ASN1_d2i_bio_of(EC_GROUP,NULL,d2i_ECPKParameters,bp,x)
 # define i2d_ECPKParameters_bio(bp,x) ASN1_i2d_bio_of_const(EC_GROUP,i2d_ECPKParameters,bp,x)
@@ -1022,7 +1022,7 @@ EC_KEY *d2i_ECPrivateKey(EC_KEY **key, const unsigned char **in, long len);
  *               of bytes needed).
  *  \return 1 on success and 0 if an error occurred.
  */
-int i2d_ECPrivateKey(EC_KEY *key, unsigned char **out);
+int __cdecl i2d_ECPrivateKey(EC_KEY *key, unsigned char **out);
 
 /********************************************************************/
 /*        de- and encoding functions for EC parameters              */
@@ -1132,7 +1132,7 @@ ECDSA_SIG *ECDSA_SIG_new(void);
 /** frees a ECDSA_SIG structure
  *  \param  sig  pointer to the ECDSA_SIG structure
  */
-void ECDSA_SIG_free(ECDSA_SIG *sig);
+void __cdecl ECDSA_SIG_free(ECDSA_SIG *sig);
 
 /** DER encode content of ECDSA_SIG object (note: this function modifies *pp
  *  (*pp += length of the DER encoded signature)).
@@ -1141,7 +1141,7 @@ void ECDSA_SIG_free(ECDSA_SIG *sig);
  *  \return the length of the DER encoded ECDSA_SIG object or a negative value
  *          on error
  */
-int i2d_ECDSA_SIG(const ECDSA_SIG *sig, unsigned char **pp);
+int __cdecl i2d_ECDSA_SIG(const ECDSA_SIG *sig, unsigned char **pp);
 
 /** Decodes a DER encoded ECDSA signature (note: this function changes *pp
  *  (*pp += len)).
diff --git a/include/openssl/engine.h b/include/openssl/engine.h
index 0780f0fb5f..226277635a 100644
--- a/include/openssl/engine.h
+++ b/include/openssl/engine.h
@@ -656,9 +656,9 @@ void ENGINE_add_conf_module(void);
  * same static data as the calling application (or library), and thus whether
  * these callbacks need to be set or not.
  */
-typedef void *(*dyn_MEM_malloc_fn) (size_t, const char *, int);
-typedef void *(*dyn_MEM_realloc_fn) (void *, size_t, const char *, int);
-typedef void (*dyn_MEM_free_fn) (void *, const char *, int);
+typedef void *(__cdecl *dyn_MEM_malloc_fn) (size_t, const char *, int);
+typedef void *(__cdecl *dyn_MEM_realloc_fn) (void *, size_t, const char *, int);
+typedef void (__cdecl *dyn_MEM_free_fn) (void *, const char *, int);
 typedef struct st_dynamic_MEM_fns {
     dyn_MEM_malloc_fn malloc_fn;
     dyn_MEM_realloc_fn realloc_fn;
diff --git a/include/openssl/err.h b/include/openssl/err.h
index b49f88129e..d4eec4ffcf 100644
--- a/include/openssl/err.h
+++ b/include/openssl/err.h
@@ -232,24 +232,24 @@ unsigned long ERR_peek_last_error(void);
 unsigned long ERR_peek_last_error_line(const char **file, int *line);
 unsigned long ERR_peek_last_error_line_data(const char **file, int *line,
                                             const char **data, int *flags);
-void ERR_clear_error(void);
-char *ERR_error_string(unsigned long e, char *buf);
-void ERR_error_string_n(unsigned long e, char *buf, size_t len);
-const char *ERR_lib_error_string(unsigned long e);
-const char *ERR_func_error_string(unsigned long e);
-const char *ERR_reason_error_string(unsigned long e);
-void ERR_print_errors_cb(int (*cb) (const char *str, size_t len, void *u),
+void __cdecl ERR_clear_error(void);
+char *__cdecl ERR_error_string(unsigned long e, char *buf);
+void __cdecl ERR_error_string_n(unsigned long e, char *buf, size_t len);
+const char * __cdecl ERR_lib_error_string(unsigned long e);
+const char * __cdecl ERR_func_error_string(unsigned long e);
+const char * __cdecl ERR_reason_error_string(unsigned long e);
+void __cdecl ERR_print_errors_cb(int (*cb) (const char *str, size_t len, void *u),
                          void *u);
 # ifndef OPENSSL_NO_STDIO
-void ERR_print_errors_fp(FILE *fp);
+void __cdecl ERR_print_errors_fp(FILE *fp);
 # endif
-void ERR_print_errors(BIO *bp);
-void ERR_add_error_data(int num, ...);
-void ERR_add_error_vdata(int num, va_list args);
-int ERR_load_strings(int lib, ERR_STRING_DATA *str);
-int ERR_load_strings_const(const ERR_STRING_DATA *str);
-int ERR_unload_strings(int lib, ERR_STRING_DATA *str);
-int ERR_load_ERR_strings(void);
+void __cdecl ERR_print_errors(BIO *bp);
+void __cdecl ERR_add_error_data(int num, ...);
+void __cdecl ERR_add_error_vdata(int num, va_list args);
+int __cdecl ERR_load_strings(int lib, ERR_STRING_DATA *str);
+int __cdecl ERR_load_strings_const(const ERR_STRING_DATA *str);
+int __cdecl ERR_unload_strings(int lib, ERR_STRING_DATA *str);
+int __cdecl ERR_load_ERR_strings(void);
 
 #if OPENSSL_API_COMPAT < 0x10100000L
 # define ERR_load_crypto_strings() \
@@ -259,7 +259,7 @@ int ERR_load_ERR_strings(void);
 
 DEPRECATEDIN_1_1_0(void ERR_remove_thread_state(void *))
 DEPRECATEDIN_1_0_0(void ERR_remove_state(unsigned long pid))
-ERR_STATE *ERR_get_state(void);
+ERR_STATE * __cdecl ERR_get_state(void);
 
 int ERR_get_next_error_library(void);
 
diff --git a/include/openssl/evp.h b/include/openssl/evp.h
index 545654a98b..f3ca42c5aa 100644
--- a/include/openssl/evp.h
+++ b/include/openssl/evp.h
@@ -1048,7 +1048,7 @@ EVP_PKEY *d2i_PrivateKey(int type, EVP_PKEY **a, const unsigned char **pp,
                          long length);
 EVP_PKEY *d2i_AutoPrivateKey(EVP_PKEY **a, const unsigned char **pp,
                              long length);
-int i2d_PrivateKey(EVP_PKEY *a, unsigned char **pp);
+int __cdecl i2d_PrivateKey(EVP_PKEY *a, unsigned char **pp);
 
 int EVP_PKEY_copy_parameters(EVP_PKEY *to, const EVP_PKEY *from);
 int EVP_PKEY_missing_parameters(const EVP_PKEY *pkey);
@@ -1329,7 +1329,7 @@ EVP_PKEY_METHOD *EVP_PKEY_meth_new(int id, int flags);
 void EVP_PKEY_meth_get0_info(int *ppkey_id, int *pflags,
                              const EVP_PKEY_METHOD *meth);
 void EVP_PKEY_meth_copy(EVP_PKEY_METHOD *dst, const EVP_PKEY_METHOD *src);
-void EVP_PKEY_meth_free(EVP_PKEY_METHOD *pmeth);
+void __cdecl EVP_PKEY_meth_free(EVP_PKEY_METHOD *pmeth);
 int EVP_PKEY_meth_add0(const EVP_PKEY_METHOD *pmeth);
 int EVP_PKEY_meth_remove(const EVP_PKEY_METHOD *pmeth);
 size_t EVP_PKEY_meth_get_count(void);
diff --git a/include/openssl/lhash.h b/include/openssl/lhash.h
index 47b99d17fb..e37335400e 100644
--- a/include/openssl/lhash.h
+++ b/include/openssl/lhash.h
@@ -72,7 +72,7 @@ typedef struct lhash_st OPENSSL_LHASH;
 int OPENSSL_LH_error(OPENSSL_LHASH *lh);
 OPENSSL_LHASH *OPENSSL_LH_new(OPENSSL_LH_HASHFUNC h, OPENSSL_LH_COMPFUNC c);
 void OPENSSL_LH_free(OPENSSL_LHASH *lh);
-void *OPENSSL_LH_insert(OPENSSL_LHASH *lh, void *data);
+void * __cdecl OPENSSL_LH_insert(OPENSSL_LHASH *lh, void *data);
 void *OPENSSL_LH_delete(OPENSSL_LHASH *lh, const void *data);
 void *OPENSSL_LH_retrieve(OPENSSL_LHASH *lh, const void *data);
 void OPENSSL_LH_doall(OPENSSL_LHASH *lh, OPENSSL_LH_DOALL_FUNC func);
@@ -122,7 +122,7 @@ void OPENSSL_LH_node_usage_stats_bio(const OPENSSL_LHASH *lh, BIO *out);
     LHASH_OF(type) { union lh_##type##_dummy { void* d1; unsigned long d2; int d3; } dummy; }; \
     static ossl_inline LHASH_OF(type) * \
         lh_##type##_new(unsigned long (*hfn)(const type *), \
-                        int (*cfn)(const type *, const type *)) \
+                        int (__cdecl *cfn)(const type *, const type *)) \
     { \
         return (LHASH_OF(type) *) \
             OPENSSL_LH_new((OPENSSL_LH_HASHFUNC)hfn, (OPENSSL_LH_COMPFUNC)cfn); \
diff --git a/include/openssl/objects.h b/include/openssl/objects.h
index 5e8b5762f8..c7e8ce2d0d 100644
--- a/include/openssl/objects.h
+++ b/include/openssl/objects.h
@@ -43,7 +43,7 @@ typedef struct obj_name_st {
 
 int OBJ_NAME_init(void);
 int OBJ_NAME_new_index(unsigned long (*hash_func) (const char *),
-                       int (*cmp_func) (const char *, const char *),
+                       int (__cdecl *cmp_func) (const char *, const char *),
                        void (*free_func) (const char *, int, const char *));
 const char *OBJ_NAME_get(const char *name, int type);
 int OBJ_NAME_add(const char *name, int type, const char *data);
@@ -67,15 +67,15 @@ int OBJ_ln2nid(const char *s);
 int OBJ_sn2nid(const char *s);
 int OBJ_cmp(const ASN1_OBJECT *a, const ASN1_OBJECT *b);
 const void *OBJ_bsearch_(const void *key, const void *base, int num, int size,
-                         int (*cmp) (const void *, const void *));
+                         int (__cdecl *cmp) (const void *, const void *));
 const void *OBJ_bsearch_ex_(const void *key, const void *base, int num,
                             int size,
-                            int (*cmp) (const void *, const void *),
+                            int (__cdecl *cmp) (const void *, const void *),
                             int flags);
 
 # define _DECLARE_OBJ_BSEARCH_CMP_FN(scope, type1, type2, nm)    \
-  static int nm##_cmp_BSEARCH_CMP_FN(const void *, const void *); \
-  static int nm##_cmp(type1 const *, type2 const *); \
+  static int __cdecl nm##_cmp_BSEARCH_CMP_FN(const void *, const void *); \
+  static int __cdecl nm##_cmp(type1 const *, type2 const *); \
   scope type2 * OBJ_bsearch_##nm(type1 *key, type2 const *base, int num)
 
 # define DECLARE_OBJ_BSEARCH_CMP_FN(type1, type2, cmp)   \
@@ -111,7 +111,7 @@ const void *OBJ_bsearch_ex_(const void *key, const void *base, int num,
  */
 
 # define IMPLEMENT_OBJ_BSEARCH_CMP_FN(type1, type2, nm)  \
-  static int nm##_cmp_BSEARCH_CMP_FN(const void *a_, const void *b_)    \
+  static int __cdecl nm##_cmp_BSEARCH_CMP_FN(const void *a_, const void *b_)    \
       { \
       type1 const *a = a_; \
       type2 const *b = b_; \
@@ -125,7 +125,7 @@ const void *OBJ_bsearch_ex_(const void *key, const void *base, int num,
       extern void dummy_prototype(void)
 
 # define IMPLEMENT_OBJ_BSEARCH_GLOBAL_CMP_FN(type1, type2, nm)   \
-  static int nm##_cmp_BSEARCH_CMP_FN(const void *a_, const void *b_)    \
+  static int __cdecl nm##_cmp_BSEARCH_CMP_FN(const void *a_, const void *b_)    \
       { \
       type1 const *a = a_; \
       type2 const *b = b_; \
diff --git a/include/openssl/safestack.h b/include/openssl/safestack.h
index 38b5578978..0d317b8a56 100644
--- a/include/openssl/safestack.h
+++ b/include/openssl/safestack.h
@@ -21,9 +21,9 @@ extern "C" {
 
 # define SKM_DEFINE_STACK_OF(t1, t2, t3) \
     STACK_OF(t1); \
-    typedef int (*sk_##t1##_compfunc)(const t3 * const *a, const t3 *const *b); \
-    typedef void (*sk_##t1##_freefunc)(t3 *a); \
-    typedef t3 * (*sk_##t1##_copyfunc)(const t3 *a); \
+    typedef int (__cdecl *sk_##t1##_compfunc)(const t3 * const *a, const t3 *const *b); \
+    typedef void (__cdecl *sk_##t1##_freefunc)(t3 *a); \
+    typedef t3 * (__cdecl *sk_##t1##_copyfunc)(const t3 *a); \
     static ossl_unused ossl_inline int sk_##t1##_num(const STACK_OF(t1) *sk) \
     { \
         return OPENSSL_sk_num((const OPENSSL_STACK *)sk); \
diff --git a/include/openssl/srp.h b/include/openssl/srp.h
index aaf13558e3..6fbf8aee4d 100644
--- a/include/openssl/srp.h
+++ b/include/openssl/srp.h
@@ -47,7 +47,7 @@ typedef struct SRP_user_pwd_st {
     char *info;
 } SRP_user_pwd;
 
-void SRP_user_pwd_free(SRP_user_pwd *user_pwd);
+void __cdecl SRP_user_pwd_free(SRP_user_pwd *user_pwd);
 
 DEFINE_STACK_OF(SRP_user_pwd)
 
diff --git a/include/openssl/ssl.h b/include/openssl/ssl.h
index 6724ccf2d2..e19138c7ab 100644
--- a/include/openssl/ssl.h
+++ b/include/openssl/ssl.h
@@ -1662,7 +1662,7 @@ int SSL_SESSION_print(BIO *fp, const SSL_SESSION *ses);
 int SSL_SESSION_print_keylog(BIO *bp, const SSL_SESSION *x);
 int SSL_SESSION_up_ref(SSL_SESSION *ses);
 void SSL_SESSION_free(SSL_SESSION *ses);
-__owur int i2d_SSL_SESSION(SSL_SESSION *in, unsigned char **pp);
+__owur int __cdecl i2d_SSL_SESSION(SSL_SESSION *in, unsigned char **pp);
 __owur int SSL_set_session(SSL *to, SSL_SESSION *session);
 int SSL_CTX_add_session(SSL_CTX *ctx, SSL_SESSION *session);
 int SSL_CTX_remove_session(SSL_CTX *ctx, SSL_SESSION *session);
diff --git a/include/openssl/stack.h b/include/openssl/stack.h
index cfc075057a..e71b68d81a 100644
--- a/include/openssl/stack.h
+++ b/include/openssl/stack.h
@@ -16,12 +16,12 @@ extern "C" {
 
 typedef struct stack_st OPENSSL_STACK; /* Use STACK_OF(...) instead */
 
-typedef int (*OPENSSL_sk_compfunc)(const void *, const void *);
-typedef void (*OPENSSL_sk_freefunc)(void *);
-typedef void *(*OPENSSL_sk_copyfunc)(const void *);
+typedef int (__cdecl *OPENSSL_sk_compfunc)(const void *, const void *);
+typedef void (__cdecl *OPENSSL_sk_freefunc)(void *);
+typedef void *(__cdecl *OPENSSL_sk_copyfunc)(const void *);
 
-int OPENSSL_sk_num(const OPENSSL_STACK *);
-void *OPENSSL_sk_value(const OPENSSL_STACK *, int);
+int __cdecl OPENSSL_sk_num(const OPENSSL_STACK *);
+void * __cdecl OPENSSL_sk_value(const OPENSSL_STACK *, int);
 
 void *OPENSSL_sk_set(OPENSSL_STACK *st, int i, const void *data);
 
@@ -30,7 +30,7 @@ OPENSSL_STACK *OPENSSL_sk_new_null(void);
 OPENSSL_STACK *OPENSSL_sk_new_reserve(OPENSSL_sk_compfunc c, int n);
 int OPENSSL_sk_reserve(OPENSSL_STACK *st, int n);
 void OPENSSL_sk_free(OPENSSL_STACK *);
-void OPENSSL_sk_pop_free(OPENSSL_STACK *st, void (*func) (void *));
+void __cdecl OPENSSL_sk_pop_free(OPENSSL_STACK *st, void (__cdecl *func) (void *));
 OPENSSL_STACK *OPENSSL_sk_deep_copy(const OPENSSL_STACK *,
                                     OPENSSL_sk_copyfunc c,
                                     OPENSSL_sk_freefunc f);
diff --git a/include/openssl/store.h b/include/openssl/store.h
index a40a7339e6..00b9ad2a3a 100644
--- a/include/openssl/store.h
+++ b/include/openssl/store.h
@@ -149,7 +149,7 @@ const char *OSSL_STORE_INFO_type_string(int type);
 /*
  * Free the OSSL_STORE_INFO
  */
-void OSSL_STORE_INFO_free(OSSL_STORE_INFO *info);
+void __cdecl OSSL_STORE_INFO_free(OSSL_STORE_INFO *info);
 
 
 /*-
diff --git a/include/openssl/ts.h b/include/openssl/ts.h
index 3b58aa527e..c33fb17aab 100644
--- a/include/openssl/ts.h
+++ b/include/openssl/ts.h
@@ -69,8 +69,8 @@ DEFINE_STACK_OF(ESS_CERT_ID_V2)
 typedef struct TS_resp_st TS_RESP;
 
 TS_REQ *TS_REQ_new(void);
-void TS_REQ_free(TS_REQ *a);
-int i2d_TS_REQ(const TS_REQ *a, unsigned char **pp);
+void __cdecl TS_REQ_free(TS_REQ *a);
+int __cdecl i2d_TS_REQ(const TS_REQ *a, unsigned char **pp);
 TS_REQ *d2i_TS_REQ(TS_REQ **a, const unsigned char **pp, long length);
 
 TS_REQ *TS_REQ_dup(TS_REQ *a);
@@ -83,8 +83,8 @@ TS_REQ *d2i_TS_REQ_bio(BIO *fp, TS_REQ **a);
 int i2d_TS_REQ_bio(BIO *fp, TS_REQ *a);
 
 TS_MSG_IMPRINT *TS_MSG_IMPRINT_new(void);
-void TS_MSG_IMPRINT_free(TS_MSG_IMPRINT *a);
-int i2d_TS_MSG_IMPRINT(const TS_MSG_IMPRINT *a, unsigned char **pp);
+void __cdecl TS_MSG_IMPRINT_free(TS_MSG_IMPRINT *a);
+int __cdecl i2d_TS_MSG_IMPRINT(const TS_MSG_IMPRINT *a, unsigned char **pp);
 TS_MSG_IMPRINT *d2i_TS_MSG_IMPRINT(TS_MSG_IMPRINT **a,
                                    const unsigned char **pp, long length);
 
@@ -98,8 +98,8 @@ TS_MSG_IMPRINT *d2i_TS_MSG_IMPRINT_bio(BIO *bio, TS_MSG_IMPRINT **a);
 int i2d_TS_MSG_IMPRINT_bio(BIO *bio, TS_MSG_IMPRINT *a);
 
 TS_RESP *TS_RESP_new(void);
-void TS_RESP_free(TS_RESP *a);
-int i2d_TS_RESP(const TS_RESP *a, unsigned char **pp);
+void __cdecl TS_RESP_free(TS_RESP *a);
+int __cdecl i2d_TS_RESP(const TS_RESP *a, unsigned char **pp);
 TS_RESP *d2i_TS_RESP(TS_RESP **a, const unsigned char **pp, long length);
 TS_TST_INFO *PKCS7_to_TS_TST_INFO(PKCS7 *token);
 TS_RESP *TS_RESP_dup(TS_RESP *a);
@@ -112,15 +112,15 @@ TS_RESP *d2i_TS_RESP_bio(BIO *bio, TS_RESP **a);
 int i2d_TS_RESP_bio(BIO *bio, TS_RESP *a);
 
 TS_STATUS_INFO *TS_STATUS_INFO_new(void);
-void TS_STATUS_INFO_free(TS_STATUS_INFO *a);
-int i2d_TS_STATUS_INFO(const TS_STATUS_INFO *a, unsigned char **pp);
+void __cdecl TS_STATUS_INFO_free(TS_STATUS_INFO *a);
+int __cdecl i2d_TS_STATUS_INFO(const TS_STATUS_INFO *a, unsigned char **pp);
 TS_STATUS_INFO *d2i_TS_STATUS_INFO(TS_STATUS_INFO **a,
                                    const unsigned char **pp, long length);
 TS_STATUS_INFO *TS_STATUS_INFO_dup(TS_STATUS_INFO *a);
 
 TS_TST_INFO *TS_TST_INFO_new(void);
-void TS_TST_INFO_free(TS_TST_INFO *a);
-int i2d_TS_TST_INFO(const TS_TST_INFO *a, unsigned char **pp);
+void __cdecl TS_TST_INFO_free(TS_TST_INFO *a);
+int __cdecl i2d_TS_TST_INFO(const TS_TST_INFO *a, unsigned char **pp);
 TS_TST_INFO *d2i_TS_TST_INFO(TS_TST_INFO **a, const unsigned char **pp,
                              long length);
 TS_TST_INFO *TS_TST_INFO_dup(TS_TST_INFO *a);
@@ -133,44 +133,44 @@ TS_TST_INFO *d2i_TS_TST_INFO_bio(BIO *bio, TS_TST_INFO **a);
 int i2d_TS_TST_INFO_bio(BIO *bio, TS_TST_INFO *a);
 
 TS_ACCURACY *TS_ACCURACY_new(void);
-void TS_ACCURACY_free(TS_ACCURACY *a);
-int i2d_TS_ACCURACY(const TS_ACCURACY *a, unsigned char **pp);
+void __cdecl TS_ACCURACY_free(TS_ACCURACY *a);
+int __cdecl i2d_TS_ACCURACY(const TS_ACCURACY *a, unsigned char **pp);
 TS_ACCURACY *d2i_TS_ACCURACY(TS_ACCURACY **a, const unsigned char **pp,
                              long length);
 TS_ACCURACY *TS_ACCURACY_dup(TS_ACCURACY *a);
 
 ESS_ISSUER_SERIAL *ESS_ISSUER_SERIAL_new(void);
-void ESS_ISSUER_SERIAL_free(ESS_ISSUER_SERIAL *a);
-int i2d_ESS_ISSUER_SERIAL(const ESS_ISSUER_SERIAL *a, unsigned char **pp);
+void __cdecl ESS_ISSUER_SERIAL_free(ESS_ISSUER_SERIAL *a);
+int __cdecl i2d_ESS_ISSUER_SERIAL(const ESS_ISSUER_SERIAL *a, unsigned char **pp);
 ESS_ISSUER_SERIAL *d2i_ESS_ISSUER_SERIAL(ESS_ISSUER_SERIAL **a,
                                          const unsigned char **pp,
                                          long length);
 ESS_ISSUER_SERIAL *ESS_ISSUER_SERIAL_dup(ESS_ISSUER_SERIAL *a);
 
 ESS_CERT_ID *ESS_CERT_ID_new(void);
-void ESS_CERT_ID_free(ESS_CERT_ID *a);
-int i2d_ESS_CERT_ID(const ESS_CERT_ID *a, unsigned char **pp);
+void __cdecl ESS_CERT_ID_free(ESS_CERT_ID *a);
+int __cdecl i2d_ESS_CERT_ID(const ESS_CERT_ID *a, unsigned char **pp);
 ESS_CERT_ID *d2i_ESS_CERT_ID(ESS_CERT_ID **a, const unsigned char **pp,
                              long length);
 ESS_CERT_ID *ESS_CERT_ID_dup(ESS_CERT_ID *a);
 
 ESS_SIGNING_CERT *ESS_SIGNING_CERT_new(void);
-void ESS_SIGNING_CERT_free(ESS_SIGNING_CERT *a);
-int i2d_ESS_SIGNING_CERT(const ESS_SIGNING_CERT *a, unsigned char **pp);
+void __cdecl ESS_SIGNING_CERT_free(ESS_SIGNING_CERT *a);
+int __cdecl i2d_ESS_SIGNING_CERT(const ESS_SIGNING_CERT *a, unsigned char **pp);
 ESS_SIGNING_CERT *d2i_ESS_SIGNING_CERT(ESS_SIGNING_CERT **a,
                                        const unsigned char **pp, long length);
 ESS_SIGNING_CERT *ESS_SIGNING_CERT_dup(ESS_SIGNING_CERT *a);
 
 ESS_CERT_ID_V2 *ESS_CERT_ID_V2_new(void);
-void ESS_CERT_ID_V2_free(ESS_CERT_ID_V2 *a);
-int i2d_ESS_CERT_ID_V2(const ESS_CERT_ID_V2 *a, unsigned char **pp);
+void __cdecl ESS_CERT_ID_V2_free(ESS_CERT_ID_V2 *a);
+int __cdecl i2d_ESS_CERT_ID_V2(const ESS_CERT_ID_V2 *a, unsigned char **pp);
 ESS_CERT_ID_V2 *d2i_ESS_CERT_ID_V2(ESS_CERT_ID_V2 **a,
                                    const unsigned char **pp, long length);
 ESS_CERT_ID_V2 *ESS_CERT_ID_V2_dup(ESS_CERT_ID_V2 *a);
 
 ESS_SIGNING_CERT_V2 *ESS_SIGNING_CERT_V2_new(void);
-void ESS_SIGNING_CERT_V2_free(ESS_SIGNING_CERT_V2 *a);
-int i2d_ESS_SIGNING_CERT_V2(const ESS_SIGNING_CERT_V2 *a, unsigned char **pp);
+void __cdecl ESS_SIGNING_CERT_V2_free(ESS_SIGNING_CERT_V2 *a);
+int __cdecl i2d_ESS_SIGNING_CERT_V2(const ESS_SIGNING_CERT_V2 *a, unsigned char **pp);
 ESS_SIGNING_CERT_V2 *d2i_ESS_SIGNING_CERT_V2(ESS_SIGNING_CERT_V2 **a,
                                              const unsigned char **pp,
                                              long length);
diff --git a/include/openssl/x509.h b/include/openssl/x509.h
index 39ca0ba575..b3d2848156 100644
--- a/include/openssl/x509.h
+++ b/include/openssl/x509.h
@@ -510,18 +510,18 @@ EVP_PKEY *X509_PUBKEY_get0(X509_PUBKEY *key);
 EVP_PKEY *X509_PUBKEY_get(X509_PUBKEY *key);
 int X509_get_pubkey_parameters(EVP_PKEY *pkey, STACK_OF(X509) *chain);
 long X509_get_pathlen(X509 *x);
-int i2d_PUBKEY(EVP_PKEY *a, unsigned char **pp);
+int __cdecl i2d_PUBKEY(EVP_PKEY *a, unsigned char **pp);
 EVP_PKEY *d2i_PUBKEY(EVP_PKEY **a, const unsigned char **pp, long length);
 # ifndef OPENSSL_NO_RSA
-int i2d_RSA_PUBKEY(RSA *a, unsigned char **pp);
+int __cdecl i2d_RSA_PUBKEY(RSA *a, unsigned char **pp);
 RSA *d2i_RSA_PUBKEY(RSA **a, const unsigned char **pp, long length);
 # endif
 # ifndef OPENSSL_NO_DSA
-int i2d_DSA_PUBKEY(DSA *a, unsigned char **pp);
+int __cdecl i2d_DSA_PUBKEY(DSA *a, unsigned char **pp);
 DSA *d2i_DSA_PUBKEY(DSA **a, const unsigned char **pp, long length);
 # endif
 # ifndef OPENSSL_NO_EC
-int i2d_EC_PUBKEY(EC_KEY *a, unsigned char **pp);
+int __cdecl i2d_EC_PUBKEY(EC_KEY *a, unsigned char **pp);
 EC_KEY *d2i_EC_PUBKEY(EC_KEY **a, const unsigned char **pp, long length);
 # endif
 
@@ -555,7 +555,7 @@ DECLARE_ASN1_FUNCTIONS(X509_CERT_AUX)
     CRYPTO_get_ex_new_index(CRYPTO_EX_INDEX_X509, l, p, newf, dupf, freef)
 int X509_set_ex_data(X509 *r, int idx, void *arg);
 void *X509_get_ex_data(X509 *r, int idx);
-int i2d_X509_AUX(X509 *a, unsigned char **pp);
+int __cdecl i2d_X509_AUX(X509 *a, unsigned char **pp);
 X509 *d2i_X509_AUX(X509 **a, const unsigned char **pp, long length);
 
 int i2d_re_X509_tbs(X509 *x, unsigned char **pp);
@@ -605,7 +605,7 @@ DECLARE_ASN1_FUNCTIONS(NETSCAPE_SPKAC)
 DECLARE_ASN1_FUNCTIONS(NETSCAPE_CERT_SEQUENCE)
 
 X509_INFO *X509_INFO_new(void);
-void X509_INFO_free(X509_INFO *a);
+void __cdecl X509_INFO_free(X509_INFO *a);
 char *X509_NAME_oneline(const X509_NAME *a, char *buf, int size);
 
 int ASN1_verify(i2d_of_void *i2d, X509_ALGOR *algor1,
diff --git a/include/openssl/x509_vfy.h b/include/openssl/x509_vfy.h
index adb8bce7cb..42f28f2ef7 100644
--- a/include/openssl/x509_vfy.h
+++ b/include/openssl/x509_vfy.h
@@ -258,7 +258,7 @@ X509_OBJECT *X509_OBJECT_retrieve_match(STACK_OF(X509_OBJECT) *h,
                                         X509_OBJECT *x);
 int X509_OBJECT_up_ref_count(X509_OBJECT *a);
 X509_OBJECT *X509_OBJECT_new(void);
-void X509_OBJECT_free(X509_OBJECT *a);
+void __cdecl X509_OBJECT_free(X509_OBJECT *a);
 X509_LOOKUP_TYPE X509_OBJECT_get_type(const X509_OBJECT *a);
 X509 *X509_OBJECT_get0_X509(const X509_OBJECT *a);
 int X509_OBJECT_set1_X509(X509_OBJECT *a, X509 *obj);
@@ -526,7 +526,7 @@ void X509_STORE_CTX_set0_dane(X509_STORE_CTX *ctx, SSL_DANE *dane);
 /* X509_VERIFY_PARAM functions */
 
 X509_VERIFY_PARAM *X509_VERIFY_PARAM_new(void);
-void X509_VERIFY_PARAM_free(X509_VERIFY_PARAM *param);
+void __cdecl X509_VERIFY_PARAM_free(X509_VERIFY_PARAM *param);
 int X509_VERIFY_PARAM_inherit(X509_VERIFY_PARAM *to,
                               const X509_VERIFY_PARAM *from);
 int X509_VERIFY_PARAM_set1(X509_VERIFY_PARAM *to,
diff --git a/include/openssl/x509v3.h b/include/openssl/x509v3.h
index 6c6eca38a5..3713882f86 100644
--- a/include/openssl/x509v3.h
+++ b/include/openssl/x509v3.h
@@ -557,7 +557,7 @@ GENERAL_NAME *v2i_GENERAL_NAME_ex(GENERAL_NAME *out,
                                   const X509V3_EXT_METHOD *method,
                                   X509V3_CTX *ctx, CONF_VALUE *cnf,
                                   int is_nc);
-void X509V3_conf_free(CONF_VALUE *val);
+void __cdecl X509V3_conf_free(CONF_VALUE *val);
 
 X509_EXTENSION *X509V3_EXT_nconf_nid(CONF *conf, X509V3_CTX *ctx, int ext_nid,
                                      const char *value);
diff --git a/ms/applink.c b/ms/applink.c
index 238dbff35b..52cb19477b 100644
--- a/ms/applink.c
+++ b/ms/applink.c
@@ -38,42 +38,42 @@
 # include <io.h>
 # include <fcntl.h>
 
-static void *app_stdin(void)
+static void * __cdecl app_stdin(void)
 {
     return stdin;
 }
 
-static void *app_stdout(void)
+static void * __cdecl app_stdout(void)
 {
     return stdout;
 }
 
-static void *app_stderr(void)
+static void * __cdecl app_stderr(void)
 {
     return stderr;
 }
 
-static int app_feof(FILE *fp)
+static int __cdecl app_feof(FILE *fp)
 {
     return feof(fp);
 }
 
-static int app_ferror(FILE *fp)
+static int __cdecl app_ferror(FILE *fp)
 {
     return ferror(fp);
 }
 
-static void app_clearerr(FILE *fp)
+static void __cdecl app_clearerr(FILE *fp)
 {
     clearerr(fp);
 }
 
-static int app_fileno(FILE *fp)
+static int __cdecl app_fileno(FILE *fp)
 {
     return _fileno(fp);
 }
 
-static int app_fsetmod(FILE *fp, char mod)
+static int __cdecl app_fsetmod(FILE *fp, char mod)
 {
     return _setmode(_fileno(fp), mod == 'b' ? _O_BINARY : _O_TEXT);
 }
diff --git a/ms/uplink.c b/ms/uplink.c
index cd4e96b780..8156952d93 100644
--- a/ms/uplink.c
+++ b/ms/uplink.c
@@ -31,7 +31,7 @@ static void unimplemented(void)
     TerminateProcess(GetCurrentProcess(), 1);
 }
 
-void OPENSSL_Uplink(volatile void **table, int index)
+void __cdecl OPENSSL_Uplink(volatile void **table, int index)
 {
     static HMODULE volatile apphandle = NULL;
     static void **volatile applinktable = NULL;
diff --git a/ms/uplink.h b/ms/uplink.h
index f6cd0380ae..1f0d75cc55 100644
--- a/ms/uplink.h
+++ b/ms/uplink.h
@@ -12,27 +12,27 @@
 
 extern void *OPENSSL_UplinkTable[];
 
-#define UP_stdin  (*(void *(*)(void))OPENSSL_UplinkTable[APPLINK_STDIN])()
-#define UP_stdout (*(void *(*)(void))OPENSSL_UplinkTable[APPLINK_STDOUT])()
-#define UP_stderr (*(void *(*)(void))OPENSSL_UplinkTable[APPLINK_STDERR])()
-#define UP_fprintf (*(int (*)(void *,const char *,...))OPENSSL_UplinkTable[APPLINK_FPRINTF])
-#define UP_fgets  (*(char *(*)(char *,int,void *))OPENSSL_UplinkTable[APPLINK_FGETS])
-#define UP_fread  (*(size_t (*)(void *,size_t,size_t,void *))OPENSSL_UplinkTable[APPLINK_FREAD])
-#define UP_fwrite (*(size_t (*)(const void *,size_t,size_t,void *))OPENSSL_UplinkTable[APPLINK_FWRITE])
-#define UP_fsetmod (*(int (*)(void *,char))OPENSSL_UplinkTable[APPLINK_FSETMOD])
-#define UP_feof   (*(int (*)(void *))OPENSSL_UplinkTable[APPLINK_FEOF])
-#define UP_fclose (*(int (*)(void *))OPENSSL_UplinkTable[APPLINK_FCLOSE])
+#define UP_stdin  (*(void *(__cdecl *)(void))OPENSSL_UplinkTable[APPLINK_STDIN])()
+#define UP_stdout (*(void *(__cdecl *)(void))OPENSSL_UplinkTable[APPLINK_STDOUT])()
+#define UP_stderr (*(void *(__cdecl *)(void))OPENSSL_UplinkTable[APPLINK_STDERR])()
+#define UP_fprintf (*(int (__cdecl *)(void *,const char *,...))OPENSSL_UplinkTable[APPLINK_FPRINTF])
+#define UP_fgets  (*(char *(__cdecl *)(char *,int,void *))OPENSSL_UplinkTable[APPLINK_FGETS])
+#define UP_fread  (*(size_t (__cdecl *)(void *,size_t,size_t,void *))OPENSSL_UplinkTable[APPLINK_FREAD])
+#define UP_fwrite (*(size_t (__cdecl *)(const void *,size_t,size_t,void *))OPENSSL_UplinkTable[APPLINK_FWRITE])
+#define UP_fsetmod (*(int (__cdecl *)(void *,char))OPENSSL_UplinkTable[APPLINK_FSETMOD])
+#define UP_feof   (*(int (__cdecl *)(void *))OPENSSL_UplinkTable[APPLINK_FEOF])
+#define UP_fclose (*(int (__cdecl *)(void *))OPENSSL_UplinkTable[APPLINK_FCLOSE])
 
-#define UP_fopen  (*(void *(*)(const char *,const char *))OPENSSL_UplinkTable[APPLINK_FOPEN])
-#define UP_fseek  (*(int (*)(void *,long,int))OPENSSL_UplinkTable[APPLINK_FSEEK])
-#define UP_ftell  (*(long (*)(void *))OPENSSL_UplinkTable[APPLINK_FTELL])
-#define UP_fflush (*(int (*)(void *))OPENSSL_UplinkTable[APPLINK_FFLUSH])
-#define UP_ferror (*(int (*)(void *))OPENSSL_UplinkTable[APPLINK_FERROR])
-#define UP_clearerr (*(void (*)(void *))OPENSSL_UplinkTable[APPLINK_CLEARERR])
-#define UP_fileno (*(int (*)(void *))OPENSSL_UplinkTable[APPLINK_FILENO])
+#define UP_fopen  (*(void *(__cdecl *)(const char *,const char *))OPENSSL_UplinkTable[APPLINK_FOPEN])
+#define UP_fseek  (*(int (__cdecl *)(void *,long,int))OPENSSL_UplinkTable[APPLINK_FSEEK])
+#define UP_ftell  (*(long (__cdecl *)(void *))OPENSSL_UplinkTable[APPLINK_FTELL])
+#define UP_fflush (*(int (__cdecl *)(void *))OPENSSL_UplinkTable[APPLINK_FFLUSH])
+#define UP_ferror (*(int (__cdecl *)(void *))OPENSSL_UplinkTable[APPLINK_FERROR])
+#define UP_clearerr (*(void (__cdecl *)(void *))OPENSSL_UplinkTable[APPLINK_CLEARERR])
+#define UP_fileno (*(int (__cdecl *)(void *))OPENSSL_UplinkTable[APPLINK_FILENO])
 
-#define UP_open   (*(int (*)(const char *,int,...))OPENSSL_UplinkTable[APPLINK_OPEN])
-#define UP_read   (*(ossl_ssize_t (*)(int,void *,size_t))OPENSSL_UplinkTable[APPLINK_READ])
-#define UP_write  (*(ossl_ssize_t (*)(int,const void *,size_t))OPENSSL_UplinkTable[APPLINK_WRITE])
-#define UP_lseek  (*(long (*)(int,long,int))OPENSSL_UplinkTable[APPLINK_LSEEK])
-#define UP_close  (*(int (*)(int))OPENSSL_UplinkTable[APPLINK_CLOSE])
+#define UP_open   (*(int (__cdecl *)(const char *,int,...))OPENSSL_UplinkTable[APPLINK_OPEN])
+#define UP_read   (*(ossl_ssize_t (__cdecl *)(int,void *,size_t))OPENSSL_UplinkTable[APPLINK_READ])
+#define UP_write  (*(ossl_ssize_t (__cdecl *)(int,const void *,size_t))OPENSSL_UplinkTable[APPLINK_WRITE])
+#define UP_lseek  (*(long (__cdecl *)(int,long,int))OPENSSL_UplinkTable[APPLINK_LSEEK])
+#define UP_close  (*(int (__cdecl *)(int))OPENSSL_UplinkTable[APPLINK_CLOSE])
diff --git a/ssl/s3_lib.c b/ssl/s3_lib.c
index 066bf47221..0162fa70af 100644
--- a/ssl/s3_lib.c
+++ b/ssl/s3_lib.c
@@ -3198,7 +3198,7 @@ static SSL_CIPHER ssl3_scsvs[] = {
     },
 };
 
-static int cipher_compare(const void *a, const void *b)
+static int __cdecl cipher_compare(const void *a, const void *b)
 {
     const SSL_CIPHER *ap = (const SSL_CIPHER *)a;
     const SSL_CIPHER *bp = (const SSL_CIPHER *)b;
diff --git a/ssl/ssl_asn1.c b/ssl/ssl_asn1.c
index b56c5e96c5..be50781b4e 100644
--- a/ssl/ssl_asn1.c
+++ b/ssl/ssl_asn1.c
@@ -101,7 +101,7 @@ static void ssl_session_sinit(ASN1_OCTET_STRING **dest, ASN1_OCTET_STRING *os,
         *dest = NULL;
 }
 
-int i2d_SSL_SESSION(SSL_SESSION *in, unsigned char **pp)
+int __cdecl i2d_SSL_SESSION(SSL_SESSION *in, unsigned char **pp)
 {
 
     SSL_SESSION_ASN1 as;
diff --git a/ssl/ssl_cert.c b/ssl/ssl_cert.c
index 9df9fb9677..a704f5ed41 100644
--- a/ssl/ssl_cert.c
+++ b/ssl/ssl_cert.c
@@ -567,7 +567,7 @@ int SSL_CTX_add_client_CA(SSL_CTX *ctx, X509 *x)
     return add_ca_name(&ctx->client_ca_names, x);
 }
 
-static int xname_cmp(const X509_NAME *a, const X509_NAME *b)
+static int __cdecl xname_cmp(const X509_NAME *a, const X509_NAME *b)
 {
     unsigned char *abuf = NULL, *bbuf = NULL;
     int alen, blen, ret;
@@ -591,7 +591,7 @@ static int xname_cmp(const X509_NAME *a, const X509_NAME *b)
     return ret;
 }
 
-static int xname_sk_cmp(const X509_NAME *const *a, const X509_NAME *const *b)
+static int __cdecl xname_sk_cmp(const X509_NAME *const *a, const X509_NAME *const *b)
 {
     return xname_cmp(*a, *b);
 }
@@ -682,7 +682,7 @@ int SSL_add_file_cert_subjects_to_stack(STACK_OF(X509_NAME) *stack,
     X509 *x = NULL;
     X509_NAME *xn = NULL;
     int ret = 1;
-    int (*oldcmp) (const X509_NAME *const *a, const X509_NAME *const *b);
+    int (__cdecl *oldcmp) (const X509_NAME *const *a, const X509_NAME *const *b);
 
     oldcmp = sk_X509_NAME_set_cmp_func(stack, xname_sk_cmp);
 
diff --git a/ssl/ssl_ciph.c b/ssl/ssl_ciph.c
index 27a1b2ec68..1263b04638 100644
--- a/ssl/ssl_ciph.c
+++ b/ssl/ssl_ciph.c
@@ -450,7 +450,7 @@ int ssl_load_ciphers(void)
 
 #ifndef OPENSSL_NO_COMP
 
-static int sk_comp_cmp(const SSL_COMP *const *a, const SSL_COMP *const *b)
+static int __cdecl sk_comp_cmp(const SSL_COMP *const *a, const SSL_COMP *const *b)
 {
     return ((*a)->id - (*b)->id);
 }
@@ -1946,7 +1946,7 @@ STACK_OF(SSL_COMP) *SSL_COMP_set0_compression_methods(STACK_OF(SSL_COMP)
     return old_meths;
 }
 
-static void cmeth_free(SSL_COMP *cm)
+static void __cdecl cmeth_free(SSL_COMP *cm)
 {
     OPENSSL_free(cm);
 }
diff --git a/ssl/ssl_lib.c b/ssl/ssl_lib.c
index ac820cf9fe..a5d417fc31 100644
--- a/ssl/ssl_lib.c
+++ b/ssl/ssl_lib.c
@@ -179,7 +179,7 @@ static void dane_ctx_final(struct dane_ctx_st *dctx)
     dctx->mdmax = 0;
 }
 
-static void tlsa_free(danetls_record *t)
+static void __cdecl tlsa_free(danetls_record *t)
 {
     if (t == NULL)
         return;
@@ -2411,7 +2411,7 @@ long SSL_CTX_callback_ctrl(SSL_CTX *ctx, int cmd, void (*fp) (void))
     }
 }
 
-int ssl_cipher_id_cmp(const SSL_CIPHER *a, const SSL_CIPHER *b)
+int __cdecl ssl_cipher_id_cmp(const SSL_CIPHER *a, const SSL_CIPHER *b)
 {
     if (a->id > b->id)
         return 1;
@@ -2420,7 +2420,7 @@ int ssl_cipher_id_cmp(const SSL_CIPHER *a, const SSL_CIPHER *b)
     return 0;
 }
 
-int ssl_cipher_ptr_id_cmp(const SSL_CIPHER *const *ap,
+int __cdecl ssl_cipher_ptr_id_cmp(const SSL_CIPHER *const *ap,
                           const SSL_CIPHER *const *bp)
 {
     if ((*ap)->id > (*bp)->id)
@@ -2888,7 +2888,7 @@ static unsigned long ssl_session_hash(const SSL_SESSION *a)
  * being able to construct an SSL_SESSION that will collide with any existing
  * session with a matching session ID.
  */
-static int ssl_session_cmp(const SSL_SESSION *a, const SSL_SESSION *b)
+static int __cdecl ssl_session_cmp(const SSL_SESSION *a, const SSL_SESSION *b)
 {
     if (a->ssl_version != b->ssl_version)
         return 1;
diff --git a/ssl/ssl_locl.h b/ssl/ssl_locl.h
index 25875c9f6d..d49523aee1 100644
--- a/ssl/ssl_locl.h
+++ b/ssl/ssl_locl.h
@@ -2263,9 +2263,9 @@ __owur SSL_SESSION *lookup_sess_in_cache(SSL *s, const unsigned char *sess_id,
                                          size_t sess_id_len);
 __owur int ssl_get_prev_session(SSL *s, CLIENTHELLO_MSG *hello);
 __owur SSL_SESSION *ssl_session_dup(SSL_SESSION *src, int ticket);
-__owur int ssl_cipher_id_cmp(const SSL_CIPHER *a, const SSL_CIPHER *b);
+__owur int __cdecl ssl_cipher_id_cmp(const SSL_CIPHER *a, const SSL_CIPHER *b);
 DECLARE_OBJ_BSEARCH_GLOBAL_CMP_FN(SSL_CIPHER, SSL_CIPHER, ssl_cipher_id);
-__owur int ssl_cipher_ptr_id_cmp(const SSL_CIPHER *const *ap,
+__owur int __cdecl ssl_cipher_ptr_id_cmp(const SSL_CIPHER *const *ap,
                                  const SSL_CIPHER *const *bp);
 __owur STACK_OF(SSL_CIPHER) *ssl_create_cipher_list(const SSL_METHOD *ssl_method,
                                                     STACK_OF(SSL_CIPHER) *tls13_ciphersuites,
diff --git a/ssl/statem/statem_lib.c b/ssl/statem/statem_lib.c
index 22e9f0490e..1c9ed9b9cf 100644
--- a/ssl/statem/statem_lib.c
+++ b/ssl/statem/statem_lib.c
@@ -2218,7 +2218,7 @@ int create_synthetic_message_hash(SSL *s, const unsigned char *hashval,
     return 1;
 }
 
-static int ca_dn_cmp(const X509_NAME *const *a, const X509_NAME *const *b)
+static int __cdecl ca_dn_cmp(const X509_NAME *const *a, const X509_NAME *const *b)
 {
     return X509_NAME_cmp(*a, *b);
 }
diff --git a/test/aborttest.c b/test/aborttest.c
index ba5055edff..885734d4bf 100644
--- a/test/aborttest.c
+++ b/test/aborttest.c
@@ -9,7 +9,7 @@
 
 #include <openssl/crypto.h>
 
-int main(int argc, char **argv)
+int __cdecl main(int argc, char **argv)
 {
     OPENSSL_die("Voluntary abort", __FILE__, __LINE__);
     return 0;
diff --git a/test/asynctest.c b/test/asynctest.c
index 9728a37911..2061b76020 100644
--- a/test/asynctest.c
+++ b/test/asynctest.c
@@ -269,7 +269,7 @@ static int test_ASYNC_block_pause(void)
     return 1;
 }
 
-int main(int argc, char **argv)
+int __cdecl main(int argc, char **argv)
 {
     if (!ASYNC_is_capable()) {
         fprintf(stderr,
diff --git a/test/evp_test.c b/test/evp_test.c
index abb51384e8..b9e084eb41 100644
--- a/test/evp_test.c
+++ b/test/evp_test.c
@@ -106,7 +106,7 @@ struct evp_test_buffer_st {
     int count_set;
 };
 
-static void evp_test_buffer_free(EVP_TEST_BUFFER *db)
+static void __cdecl evp_test_buffer_free(EVP_TEST_BUFFER *db)
 {
     if (db != NULL) {
         OPENSSL_free(db->buf);
@@ -919,7 +919,7 @@ static int mac_test_init(EVP_TEST *t, const char *alg)
 }
 
 /* Because OPENSSL_free is a macro, it can't be passed as a function pointer */
-static void openssl_free(char *m)
+static void __cdecl openssl_free(char *m)
 {
     OPENSSL_free(m);
 }
diff --git a/test/generate_buildtest.pl b/test/generate_buildtest.pl
index f9a663bea6..dff61939c1 100644
--- a/test/generate_buildtest.pl
+++ b/test/generate_buildtest.pl
@@ -27,7 +27,7 @@ print <<"_____";
 # include <openssl/$name.h>
 #endif
 
-int main(void)
+int __cdecl main(void)
 {
     return 0;
 }
diff --git a/test/lhash_test.c b/test/lhash_test.c
index 162286b7cd..3740062220 100644
--- a/test/lhash_test.c
+++ b/test/lhash_test.c
@@ -39,7 +39,7 @@ static unsigned long int int_hash(const int *p)
     return 3 & *p;      /* To force collisions */
 }
 
-static int int_cmp(const int *p, const int *q)
+static int __cdecl int_cmp(const int *p, const int *q)
 {
     return *p != *q;
 }
diff --git a/test/memleaktest.c b/test/memleaktest.c
index d239bd23b8..6179fa76ed 100644
--- a/test/memleaktest.c
+++ b/test/memleaktest.c
@@ -23,7 +23,7 @@
  * but that is worse than avoiding the test framework's main.
  */
 
-int main(int argc, char *argv[])
+int __cdecl main(int argc, char *argv[])
 {
 #ifndef OPENSSL_NO_CRYPTO_MDEBUG
     char *p;
diff --git a/test/ossl_shim/ossl_shim.cc b/test/ossl_shim/ossl_shim.cc
index 90d1f1ef40..a38fe0fdc9 100644
--- a/test/ossl_shim/ossl_shim.cc
+++ b/test/ossl_shim/ossl_shim.cc
@@ -1295,6 +1295,6 @@ static int Main(int argc, char **argv) {
 
 }  // namespace bssl
 
-int main(int argc, char **argv) {
+int __cdecl main(int argc, char **argv) {
   return bssl::Main(argc, argv);
 }
diff --git a/test/rsa_complex.c b/test/rsa_complex.c
index fac581254a..55564a2d0a 100644
--- a/test/rsa_complex.c
+++ b/test/rsa_complex.c
@@ -20,7 +20,7 @@
 #include <openssl/rsa.h>
 #include <stdlib.h>
 
-int main(int argc, char *argv[])
+int __cdecl main(int argc, char *argv[])
 {
     /* There are explicitly no run time checks for this one */
     return EXIT_SUCCESS;
diff --git a/test/shlibloadtest.c b/test/shlibloadtest.c
index 86bbfcd849..a4ca1ae484 100644
--- a/test/shlibloadtest.c
+++ b/test/shlibloadtest.c
@@ -294,7 +294,7 @@ end:
  * it to link against libcrypto (which the framework uses). The point of the
  * test is to check dynamic loading and unloading of libcrypto/libssl.
  */
-int main(int argc, char *argv[])
+int __cdecl main(int argc, char *argv[])
 {
     const char *p;
 
diff --git a/test/ssltest_old.c b/test/ssltest_old.c
index 36e6031f3a..4d97ea7bb9 100644
--- a/test/ssltest_old.c
+++ b/test/ssltest_old.c
@@ -872,7 +872,7 @@ static int set_protocol_version(const char *version, SSL *ssl, int setting)
     return 1;
 }
 
-int main(int argc, char *argv[])
+int __cdecl main(int argc, char *argv[])
 {
     const char *CApath = NULL, *CAfile = NULL;
     int badop = 0;
diff --git a/test/ssltestlib.c b/test/ssltestlib.c
index 456afdf471..aec9b1d7f7 100644
--- a/test/ssltestlib.c
+++ b/test/ssltestlib.c
@@ -279,7 +279,7 @@ struct mempacket_st {
     unsigned int type;
 };
 
-static void mempacket_free(MEMPACKET *pkt)
+static void __cdecl mempacket_free(MEMPACKET *pkt)
 {
     if (pkt->data != NULL)
         OPENSSL_free(pkt->data);
diff --git a/test/stack_test.c b/test/stack_test.c
index 680f68d60e..3f8e4f96f5 100644
--- a/test/stack_test.c
+++ b/test/stack_test.c
@@ -41,7 +41,7 @@ DEFINE_SPECIAL_STACK_OF_CONST(uchar, unsigned char)
 DEFINE_STACK_OF(SS)
 DEFINE_STACK_OF_CONST(SU)
 
-static int int_compare(const int *const *a, const int *const *b)
+static int __cdecl int_compare(const int *const *a, const int *const *b)
 {
     if (**a < **b)
         return -1;
@@ -165,7 +165,7 @@ end:
     return testresult;
 }
 
-static int uchar_compare(const unsigned char *const *a,
+static int __cdecl uchar_compare(const unsigned char *const *a,
                          const unsigned char *const *b)
 {
     return **a - (signed int)**b;
@@ -251,7 +251,7 @@ end:
     return testresult;
 }
 
-static SS *SS_copy(const SS *p)
+static SS * __cdecl SS_copy(const SS *p)
 {
     SS *q = OPENSSL_malloc(sizeof(*q));
 
@@ -260,7 +260,7 @@ static SS *SS_copy(const SS *p)
     return q;
 }
 
-static void SS_free(SS *p) {
+static void __cdecl SS_free(SS *p) {
     OPENSSL_free(p);
 }
 
diff --git a/test/testutil/main.c b/test/testutil/main.c
index d3ccdda391..f86bc5dbc5 100644
--- a/test/testutil/main.c
+++ b/test/testutil/main.c
@@ -31,7 +31,7 @@ static void check_arg_usage(void)
         test_printf_stderr("Warning arguments %zu and later unchecked\n", i);
 }
 
-int main(int argc, char *argv[])
+int __cdecl main(int argc, char *argv[])
 {
     int ret = EXIT_FAILURE;
 
diff --git a/test/versions.c b/test/versions.c
index 3ab05ec35d..c9e32f6793 100644
--- a/test/versions.c
+++ b/test/versions.c
@@ -12,7 +12,7 @@
 #include <openssl/crypto.h>
 
 /* A simple helper for the perl function OpenSSL::Test::openssl_versions */
-int main(void)
+int __cdecl main(void)
 {
     printf("Build version: 0x%08lX\n", OPENSSL_VERSION_NUMBER);
     printf("Library version: 0x%08lX\n", OpenSSL_version_num());
diff --git a/test/x509aux.c b/test/x509aux.c
index e41f1f6809..5170dec1f7 100644
--- a/test/x509aux.c
+++ b/test/x509aux.c
@@ -27,7 +27,7 @@ static int test_certs(int num)
     unsigned char *data = 0;
     long len;
     typedef X509 *(*d2i_X509_t)(X509 **, const unsigned char **, long);
-    typedef int (*i2d_X509_t)(X509 *, unsigned char **);
+    typedef int (__cdecl * i2d_X509_t)(X509 *, unsigned char **);
     int err = 0;
     BIO *fp = BIO_new_file(test_get_argument(num), "r");
     X509 *reuse = NULL;
diff --git a/util/mkdef.pl b/util/mkdef.pl
index 3ac79821b0..ed05e5584d 100755
--- a/util/mkdef.pl
+++ b/util/mkdef.pl
@@ -297,7 +297,7 @@ if($do_crypto == 1) {
  * to link to all of them. This is *not* intended to be run!
  */
 
-int main()
+int __cdecl main()
 {
 EOF
 	&print_test_file(*STDOUT,"LIBSSL",*ssl_list,$do_ctestall,@ssl_symbols)
